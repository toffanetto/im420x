
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000214c8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002910  08021768  08021768  00022768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08024078  08024078  00025078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000040  08024080  08024080  00025080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080240c0  080240c0  000250c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000013f0  24000000  080240c4  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000681f0  240013f0  080254b4  000273f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240695e0  080254b4  000275e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000273f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002de11  00000000  00000000  0002741e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000596e  00000000  00000000  0005522f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f98  00000000  00000000  0005aba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001847  00000000  00000000  0005cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042650  00000000  00000000  0005e37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003134b  00000000  00000000  000a09cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00191f97  00000000  00000000  000d1d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  00263cb1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009224  00000000  00000000  00263d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  0026cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013f0 	.word	0x240013f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08021750 	.word	0x08021750

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013f4 	.word	0x240013f4
 80002dc:	08021750 	.word	0x08021750

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b37      	ldr	r3, [pc, #220]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000766:	4a38      	ldr	r2, [pc, #224]	@ (8000848 <MX_ADC1_Init+0x108>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800076a:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_ADC1_Init+0x104>)
 800076c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_ADC1_Init+0x104>)
 800077a:	2201      	movs	r2, #1
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000780:	2204      	movs	r2, #4
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_ADC1_Init+0x104>)
 800078c:	2201      	movs	r2, #1
 800078e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000792:	2202      	movs	r2, #2
 8000794:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000798:	2200      	movs	r2, #0
 800079a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_ADC1_Init+0x104>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	4820      	ldr	r0, [pc, #128]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007c4:	f002 fa34 	bl	8002c30 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ce:	f000 ffcf 	bl	8001770 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007de:	f003 fa57 	bl	8003c90 <HAL_ADCEx_MultiModeConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e8:	f000 ffc2 	bl	8001770 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ADC1_Init+0x10c>)
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	2306      	movs	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80007f4:	2306      	movs	r3, #6
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2304      	movs	r3, #4
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000810:	f002 fc92 	bl	8003138 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800081a:	f000 ffa9 	bl	8001770 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_ADC1_Init+0x110>)
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000822:	230c      	movs	r3, #12
 8000824:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <MX_ADC1_Init+0x104>)
 800082c:	f002 fc84 	bl	8003138 <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000836:	f000 ff9b 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2400140c 	.word	0x2400140c
 8000848:	40022000 	.word	0x40022000
 800084c:	19200040 	.word	0x19200040
 8000850:	08600004 	.word	0x08600004

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ba      	sub	sp, #232	@ 0xe8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f020 f80d 	bl	8020894 <memset>
  if(adcHandle->Instance==ADC1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a45      	ldr	r2, [pc, #276]	@ (8000994 <HAL_ADC_MspInit+0x140>)
 8000880:	4293      	cmp	r3, r2
 8000882:	f040 8083 	bne.w	800098c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000886:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 8000896:	2325      	movs	r3, #37	@ 0x25
 8000898:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008aa:	2320      	movs	r3, #32
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096.0;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4618      	mov	r0, r3
 80008c0:	f007 fc32 	bl	8008128 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80008ca:	f000 ff51 	bl	8001770 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d4:	4a30      	ldr	r2, [pc, #192]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a29      	ldr	r2, [pc, #164]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800090a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800090e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000922:	4619      	mov	r1, r3
 8000924:	481d      	ldr	r0, [pc, #116]	@ (800099c <HAL_ADC_MspInit+0x148>)
 8000926:	f006 f9b9 	bl	8006c9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <HAL_ADC_MspInit+0x150>)
 800092e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000932:	2209      	movs	r2, #9
 8000934:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000944:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800094c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000954:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800095c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000964:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000968:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000972:	f003 fb4b 	bl	800400c <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 800097c:	f000 fef8 	bl	8001770 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000984:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000986:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800098c:	bf00      	nop
 800098e:	37e8      	adds	r7, #232	@ 0xe8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40022000 	.word	0x40022000
 8000998:	58024400 	.word	0x58024400
 800099c:	58021400 	.word	0x58021400
 80009a0:	24001470 	.word	0x24001470
 80009a4:	40020410 	.word	0x40020410

080009a8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009b4:	f00e f9c6 	bl	800ed44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80009c0:	f000 f986 	bl	8000cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009c4:	4b58      	ldr	r3, [pc, #352]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 8090 	bne.w	8000af2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d01e      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80009d8:	2208      	movs	r2, #8
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d015      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f023 0307 	bic.w	r3, r3, #7
 80009f0:	3308      	adds	r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	e7fd      	b.n	8000a12 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d06a      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d865      	bhi.n	8000af2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a26:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a30:	e004      	b.n	8000a3c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d903      	bls.n	8000a4e <pvPortMallocMicroROS+0xa6>
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f1      	bne.n	8000a32 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d04c      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4413      	add	r3, r2
 8000a60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	2308      	movs	r3, #8
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d920      	bls.n	8000abc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	613b      	str	r3, [r7, #16]
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ab6:	69b8      	ldr	r0, [r7, #24]
 8000ab8:	f000 f96e 	bl	8000d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d203      	bcs.n	8000ade <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a16      	ldr	r2, [pc, #88]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000af2:	f00e f935 	bl	800ed60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	60fb      	str	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24032230 	.word	0x24032230
 8000b28:	2403223c 	.word	0x2403223c
 8000b2c:	24032234 	.word	0x24032234
 8000b30:	24032228 	.word	0x24032228
 8000b34:	24032238 	.word	0x24032238

08000b38 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d04a      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10b      	bne.n	8000b7e <vPortFreeMicroROS+0x46>
	__asm volatile
 8000b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b6a:	f383 8811 	msr	BASEPRI, r3
 8000b6e:	f3bf 8f6f 	isb	sy
 8000b72:	f3bf 8f4f 	dsb	sy
 8000b76:	60fb      	str	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00b      	beq.n	8000b9e <vPortFreeMicroROS+0x66>
	__asm volatile
 8000b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	60bb      	str	r3, [r7, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	e7fd      	b.n	8000b9a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d019      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d115      	bne.n	8000be0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000bc4:	f00e f8be 	bl	800ed44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f000 f8de 	bl	8000d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000bdc:	f00e f8c0 	bl	800ed60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2403223c 	.word	0x2403223c
 8000bec:	24032234 	.word	0x24032234

08000bf0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	425b      	negs	r3, r3
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	4413      	add	r3, r2
 8000c04:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <getBlockSize+0x38>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

	return count;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2403223c 	.word	0x2403223c

08000c2c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c36:	f00e f885 	bl	800ed44 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c3a:	6838      	ldr	r0, [r7, #0]
 8000c3c:	f7ff feb4 	bl	80009a8 <pvPortMallocMicroROS>
 8000c40:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d017      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d014      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffce 	bl	8000bf0 <getBlockSize>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2208      	movs	r2, #8
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d201      	bcs.n	8000c68 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f01f ff30 	bl	8020ad2 <memcpy>

		vPortFreeMicroROS(pv);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff60 	bl	8000b38 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000c78:	f00e f872 	bl	800ed60 <xTaskResumeAll>

	return newmem;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c90:	f00e f858 	bl	800ed44 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff fe82 	bl	80009a8 <pvPortMallocMicroROS>
 8000ca4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000caa:	e004      	b.n	8000cb6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	613a      	str	r2, [r7, #16]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	617a      	str	r2, [r7, #20]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f5      	bne.n	8000cac <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000cc0:	f00e f84e 	bl	800ed60 <xTaskResumeAll>
  	return mem;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <prvHeapInit+0xac>)
 8000cd8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cdc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3307      	adds	r3, #7
 8000cec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d2e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <prvHeapInit+0xbc>)
 8000d5c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <prvHeapInit+0xc0>)
 8000d64:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <prvHeapInit+0xc4>)
 8000d68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	00030d40 	.word	0x00030d40
 8000d80:	240014e8 	.word	0x240014e8
 8000d84:	24032228 	.word	0x24032228
 8000d88:	24032230 	.word	0x24032230
 8000d8c:	24032238 	.word	0x24032238
 8000d90:	24032234 	.word	0x24032234
 8000d94:	2403223c 	.word	0x2403223c

08000d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <prvInsertBlockIntoFreeList+0xac>)
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e002      	b.n	8000dac <prvInsertBlockIntoFreeList+0x14>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8f7      	bhi.n	8000da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d108      	bne.n	8000dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d118      	bne.n	8000e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d00d      	beq.n	8000e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	441a      	add	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e008      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e003      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d002      	beq.n	8000e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	24032228 	.word	0x24032228
 8000e48:	24032230 	.word	0x24032230

08000e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e58:	4a17      	ldr	r2, [pc, #92]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e76:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e80:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2105      	movs	r1, #5
 8000e92:	200b      	movs	r0, #11
 8000e94:	f003 f892 	bl	8003fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e98:	200b      	movs	r0, #11
 8000e9a:	f003 f8a9 	bl	8003ff0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f003 f88a 	bl	8003fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f003 f8a1 	bl	8003ff0 <HAL_NVIC_EnableIRQ>

}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	58024400 	.word	0x58024400

08000ebc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000eca:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000ecc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ed0:	4904      	ldr	r1, [pc, #16]	@ (8000ee4 <cubemx_transport_open+0x28>)
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f00a f9c4 	bl	800b260 <HAL_UART_Receive_DMA>
    return true;
 8000ed8:	2301      	movs	r3, #1
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24032240 	.word	0x24032240

08000ee8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ef6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f00a f9fd 	bl	800b2f8 <HAL_UART_DMAStop>
    return true;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f1c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f24:	2b20      	cmp	r3, #32
 8000f26:	d11b      	bne.n	8000f60 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	6978      	ldr	r0, [r7, #20]
 8000f32:	f00a f915 	bl	800b160 <HAL_UART_Transmit_DMA>
 8000f36:	4603      	mov	r3, r0
 8000f38:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f3a:	e002      	b.n	8000f42 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f00c fb76 	bl	800d62e <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f42:	7cfb      	ldrb	r3, [r7, #19]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d104      	bne.n	8000f52 <cubemx_transport_write+0x4a>
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4e:	2b20      	cmp	r3, #32
 8000f50:	d1f4      	bne.n	8000f3c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f52:	7cfb      	ldrb	r3, [r7, #19]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <cubemx_transport_write+0x54>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	e002      	b.n	8000f62 <cubemx_transport_write+0x5a>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e000      	b.n	8000f62 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f60:	2300      	movs	r3, #0
    }
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f80:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f86:	b672      	cpsid	i
}
 8000f88:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a5a      	ldr	r2, [pc, #360]	@ (80010fc <cubemx_transport_read+0x190>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d068      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a57      	ldr	r2, [pc, #348]	@ (8001100 <cubemx_transport_read+0x194>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d061      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a55      	ldr	r2, [pc, #340]	@ (8001104 <cubemx_transport_read+0x198>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d05a      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a52      	ldr	r2, [pc, #328]	@ (8001108 <cubemx_transport_read+0x19c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d053      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a50      	ldr	r2, [pc, #320]	@ (800110c <cubemx_transport_read+0x1a0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d04c      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a4d      	ldr	r2, [pc, #308]	@ (8001110 <cubemx_transport_read+0x1a4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d045      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a4b      	ldr	r2, [pc, #300]	@ (8001114 <cubemx_transport_read+0x1a8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d03e      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a48      	ldr	r2, [pc, #288]	@ (8001118 <cubemx_transport_read+0x1ac>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d037      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a46      	ldr	r2, [pc, #280]	@ (800111c <cubemx_transport_read+0x1b0>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d030      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a43      	ldr	r2, [pc, #268]	@ (8001120 <cubemx_transport_read+0x1b4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d029      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a41      	ldr	r2, [pc, #260]	@ (8001124 <cubemx_transport_read+0x1b8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d022      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a3e      	ldr	r2, [pc, #248]	@ (8001128 <cubemx_transport_read+0x1bc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01b      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a3c      	ldr	r2, [pc, #240]	@ (800112c <cubemx_transport_read+0x1c0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d014      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a39      	ldr	r2, [pc, #228]	@ (8001130 <cubemx_transport_read+0x1c4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <cubemx_transport_read+0xfe>
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a37      	ldr	r2, [pc, #220]	@ (8001134 <cubemx_transport_read+0x1c8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d006      	beq.n	800106a <cubemx_transport_read+0xfe>
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a34      	ldr	r2, [pc, #208]	@ (8001138 <cubemx_transport_read+0x1cc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d107      	bne.n	800107a <cubemx_transport_read+0x10e>
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001078:	e006      	b.n	8001088 <cubemx_transport_read+0x11c>
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001088:	4a2c      	ldr	r2, [pc, #176]	@ (800113c <cubemx_transport_read+0x1d0>)
 800108a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800108c:	b662      	cpsie	i
}
 800108e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	3301      	adds	r3, #1
 8001094:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001096:	2001      	movs	r0, #1
 8001098:	f00c fac9 	bl	800d62e <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800109c:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <cubemx_transport_read+0x1d4>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b26      	ldr	r3, [pc, #152]	@ (800113c <cubemx_transport_read+0x1d0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d104      	bne.n	80010b2 <cubemx_transport_read+0x146>
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f6ff af6a 	blt.w	8000f86 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010b6:	e011      	b.n	80010dc <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <cubemx_transport_read+0x1d4>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	440b      	add	r3, r1
 80010c2:	4920      	ldr	r1, [pc, #128]	@ (8001144 <cubemx_transport_read+0x1d8>)
 80010c4:	5c8a      	ldrb	r2, [r1, r2]
 80010c6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <cubemx_transport_read+0x1d4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001140 <cubemx_transport_read+0x1d4>)
 80010d4:	6013      	str	r3, [r2, #0]
        wrote++;
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	3301      	adds	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <cubemx_transport_read+0x1d4>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <cubemx_transport_read+0x1d0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d003      	beq.n	80010f0 <cubemx_transport_read+0x184>
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d3e3      	bcc.n	80010b8 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 80010f0:	69bb      	ldr	r3, [r7, #24]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020010 	.word	0x40020010
 8001100:	40020028 	.word	0x40020028
 8001104:	40020040 	.word	0x40020040
 8001108:	40020058 	.word	0x40020058
 800110c:	40020070 	.word	0x40020070
 8001110:	40020088 	.word	0x40020088
 8001114:	400200a0 	.word	0x400200a0
 8001118:	400200b8 	.word	0x400200b8
 800111c:	40020410 	.word	0x40020410
 8001120:	40020428 	.word	0x40020428
 8001124:	40020440 	.word	0x40020440
 8001128:	40020458 	.word	0x40020458
 800112c:	40020470 	.word	0x40020470
 8001130:	40020488 	.word	0x40020488
 8001134:	400204a0 	.word	0x400204a0
 8001138:	400204b8 	.word	0x400204b8
 800113c:	24032a44 	.word	0x24032a44
 8001140:	24032a40 	.word	0x24032a40
 8001144:	24032240 	.word	0x24032240

08001148 <control_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in control_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_cmd_callback(const void * xMsgIn)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  const autoware_control_msgs__msg__Control * control_cmd_msg_ = (const autoware_control_msgs__msg__Control * )xMsgIn;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 0);
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <control_cmd_callback+0x24>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	4a03      	ldr	r2, [pc, #12]	@ (800116c <control_cmd_callback+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	24032a64 	.word	0x24032a64

08001170 <gear_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the gear command and save in gear_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void gear_cmd_callback(const void * xMsgIn)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__GearCommand * gear_cmd_msg_ = (const autoware_vehicle_msgs__msg__GearCommand * )xMsgIn;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 1);
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <gear_cmd_callback+0x24>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	4a03      	ldr	r2, [pc, #12]	@ (8001194 <gear_cmd_callback+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	24032a64 	.word	0x24032a64

08001198 <turn_indicators_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the turn lights commands and save in turn_indicators_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void turn_indicators_cmd_callback(const void * xMsgIn)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * turn_indicators_cmd_msg_ = (const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * )xMsgIn;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 2);
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <turn_indicators_cmd_callback+0x24>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	4a03      	ldr	r2, [pc, #12]	@ (80011bc <turn_indicators_cmd_callback+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	24032a64 	.word	0x24032a64

080011c0 <hazard_lights_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the hazard lights commands and save in hazard_lights_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void hazard_lights_cmd_callback(const void * xMsgIn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__HazardLightsCommand * hazard_lights_cmd_msg_ = (const autoware_vehicle_msgs__msg__HazardLightsCommand * )xMsgIn;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 3);
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <hazard_lights_cmd_callback+0x24>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	4a03      	ldr	r2, [pc, #12]	@ (80011e4 <hazard_lights_cmd_callback+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	24032a64 	.word	0x24032a64

080011e8 <actuation_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in actuation_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void actuation_cmd_callback(const void * xMsgIn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__ActuationCommandStamped * actuation_cmd_msg_ = (const tier4_vehicle_msgs__msg__ActuationCommandStamped * )xMsgIn;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 4);
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <actuation_cmd_callback+0x24>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f043 0310 	orr.w	r3, r3, #16
 80011fc:	4a03      	ldr	r2, [pc, #12]	@ (800120c <actuation_cmd_callback+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	24032a64 	.word	0x24032a64

08001210 <emergency_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in emergency_msg_ 
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void emergency_callback(const void * xMsgIn)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * emergency_msg_ = (const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * )xMsgIn;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 5);
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <emergency_callback+0x24>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f043 0320 	orr.w	r3, r3, #32
 8001224:	4a03      	ldr	r2, [pc, #12]	@ (8001234 <emergency_callback+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	24032a64 	.word	0x24032a64

08001238 <control_mode_cmd_callback>:
  * @brief  ROS service server callback to change the control mode and return a status about the change
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_mode_cmd_callback(const void * xRequestMsg, void * xResponseMsg)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  const autoware_vehicle_msgs__srv__ControlModeCommand_Request * control_mode_request_msg_ = (const autoware_vehicle_msgs__srv__ControlModeCommand_Request * )xRequestMsg;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  // TODO Send threadflag to TaskControle


  //xResponseMsg = &control_mode_response_msg_;
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 8001258:	480e      	ldr	r0, [pc, #56]	@ (8001294 <MX_FREERTOS_Init+0x40>)
 800125a:	f00c fa03 	bl	800d664 <osMutexNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <MX_FREERTOS_Init+0x44>)
 8001262:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <MX_FREERTOS_Init+0x48>)
 8001266:	f00c f9fd 	bl	800d664 <osMutexNew>
 800126a:	4603      	mov	r3, r0
 800126c:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <MX_FREERTOS_Init+0x4c>)
 800126e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8001270:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <MX_FREERTOS_Init+0x50>)
 8001272:	2100      	movs	r1, #0
 8001274:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <MX_FREERTOS_Init+0x54>)
 8001276:	f00c f879 	bl	800d36c <osThreadNew>
 800127a:	4603      	mov	r3, r0
 800127c:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <MX_FREERTOS_Init+0x58>)
 800127e:	6013      	str	r3, [r2, #0]

  /* creation of TaskMicroAutowa */
  TaskMicroAutowaHandle = osThreadNew(StartMicroAutoware, NULL, &TaskMicroAutowa_attributes);
 8001280:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <MX_FREERTOS_Init+0x5c>)
 8001282:	2100      	movs	r1, #0
 8001284:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <MX_FREERTOS_Init+0x60>)
 8001286:	f00c f871 	bl	800d36c <osThreadNew>
 800128a:	4603      	mov	r3, r0
 800128c:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <MX_FREERTOS_Init+0x64>)
 800128e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	08021a44 	.word	0x08021a44
 8001298:	24032a50 	.word	0x24032a50
 800129c:	08021a54 	.word	0x08021a54
 80012a0:	24032a54 	.word	0x24032a54
 80012a4:	080219fc 	.word	0x080219fc
 80012a8:	080022c1 	.word	0x080022c1
 80012ac:	24032a48 	.word	0x24032a48
 80012b0:	08021a20 	.word	0x08021a20
 80012b4:	08001781 	.word	0x08001781
 80012b8:	24032a4c 	.word	0x24032a4c

080012bc <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012cc:	d10d      	bne.n	80012ea <HAL_GPIO_EXTI_Callback+0x2e>
    ucButtonState ^= 1;
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_GPIO_EXTI_Callback+0x38>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	f083 0301 	eor.w	r3, r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_GPIO_EXTI_Callback+0x38>)
 80012da:	701a      	strb	r2, [r3, #0]
    osThreadFlagsSet(TaskControleHandle, 0x1000);
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00c f8d3 	bl	800d490 <osThreadFlagsSet>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	24032a58 	.word	0x24032a58
 80012f8:	24032a48 	.word	0x24032a48

080012fc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	@ 0x38
 8001300:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	4b9e      	ldr	r3, [pc, #632]	@ (800158c <MX_GPIO_Init+0x290>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001318:	4a9c      	ldr	r2, [pc, #624]	@ (800158c <MX_GPIO_Init+0x290>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001322:	4b9a      	ldr	r3, [pc, #616]	@ (800158c <MX_GPIO_Init+0x290>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	623b      	str	r3, [r7, #32]
 800132e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001330:	4b96      	ldr	r3, [pc, #600]	@ (800158c <MX_GPIO_Init+0x290>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001336:	4a95      	ldr	r2, [pc, #596]	@ (800158c <MX_GPIO_Init+0x290>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800133c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001340:	4b92      	ldr	r3, [pc, #584]	@ (800158c <MX_GPIO_Init+0x290>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b8f      	ldr	r3, [pc, #572]	@ (800158c <MX_GPIO_Init+0x290>)
 8001350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001354:	4a8d      	ldr	r2, [pc, #564]	@ (800158c <MX_GPIO_Init+0x290>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800135e:	4b8b      	ldr	r3, [pc, #556]	@ (800158c <MX_GPIO_Init+0x290>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	4b87      	ldr	r3, [pc, #540]	@ (800158c <MX_GPIO_Init+0x290>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001372:	4a86      	ldr	r2, [pc, #536]	@ (800158c <MX_GPIO_Init+0x290>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800137c:	4b83      	ldr	r3, [pc, #524]	@ (800158c <MX_GPIO_Init+0x290>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800138a:	4b80      	ldr	r3, [pc, #512]	@ (800158c <MX_GPIO_Init+0x290>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001390:	4a7e      	ldr	r2, [pc, #504]	@ (800158c <MX_GPIO_Init+0x290>)
 8001392:	f043 0320 	orr.w	r3, r3, #32
 8001396:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800139a:	4b7c      	ldr	r3, [pc, #496]	@ (800158c <MX_GPIO_Init+0x290>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a0:	f003 0320 	and.w	r3, r3, #32
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a8:	4b78      	ldr	r3, [pc, #480]	@ (800158c <MX_GPIO_Init+0x290>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ae:	4a77      	ldr	r2, [pc, #476]	@ (800158c <MX_GPIO_Init+0x290>)
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b8:	4b74      	ldr	r3, [pc, #464]	@ (800158c <MX_GPIO_Init+0x290>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c6:	4b71      	ldr	r3, [pc, #452]	@ (800158c <MX_GPIO_Init+0x290>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013cc:	4a6f      	ldr	r2, [pc, #444]	@ (800158c <MX_GPIO_Init+0x290>)
 80013ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d6:	4b6d      	ldr	r3, [pc, #436]	@ (800158c <MX_GPIO_Init+0x290>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e4:	4b69      	ldr	r3, [pc, #420]	@ (800158c <MX_GPIO_Init+0x290>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ea:	4a68      	ldr	r2, [pc, #416]	@ (800158c <MX_GPIO_Init+0x290>)
 80013ec:	f043 0310 	orr.w	r3, r3, #16
 80013f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f4:	4b65      	ldr	r3, [pc, #404]	@ (800158c <MX_GPIO_Init+0x290>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001408:	4861      	ldr	r0, [pc, #388]	@ (8001590 <MX_GPIO_Init+0x294>)
 800140a:	f005 fdf7 	bl	8006ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001414:	485f      	ldr	r0, [pc, #380]	@ (8001594 <MX_GPIO_Init+0x298>)
 8001416:	f005 fdf1 	bl	8006ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	485e      	ldr	r0, [pc, #376]	@ (8001598 <MX_GPIO_Init+0x29c>)
 8001420:	f005 fdec 	bl	8006ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001424:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4858      	ldr	r0, [pc, #352]	@ (800159c <MX_GPIO_Init+0x2a0>)
 800143a:	f005 fc2f 	bl	8006c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800143e:	2332      	movs	r3, #50	@ 0x32
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800144e:	230b      	movs	r3, #11
 8001450:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4850      	ldr	r0, [pc, #320]	@ (800159c <MX_GPIO_Init+0x2a0>)
 800145a:	f005 fc1f 	bl	8006c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800145e:	2386      	movs	r3, #134	@ 0x86
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800146e:	230b      	movs	r3, #11
 8001470:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001476:	4619      	mov	r1, r3
 8001478:	4849      	ldr	r0, [pc, #292]	@ (80015a0 <MX_GPIO_Init+0x2a4>)
 800147a:	f005 fc0f 	bl	8006c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800147e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	483e      	ldr	r0, [pc, #248]	@ (8001590 <MX_GPIO_Init+0x294>)
 8001498:	f005 fc00 	bl	8006c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 800149c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	483c      	ldr	r0, [pc, #240]	@ (80015a4 <MX_GPIO_Init+0x2a8>)
 80014b4:	f005 fbf2 	bl	8006c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ca:	230b      	movs	r3, #11
 80014cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	482e      	ldr	r0, [pc, #184]	@ (8001590 <MX_GPIO_Init+0x294>)
 80014d6:	f005 fbe1 	bl	8006c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80014da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4828      	ldr	r0, [pc, #160]	@ (8001594 <MX_GPIO_Init+0x298>)
 80014f4:	f005 fbd2 	bl	8006c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	4826      	ldr	r0, [pc, #152]	@ (80015a8 <MX_GPIO_Init+0x2ac>)
 800150e:	f005 fbc5 	bl	8006c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001512:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001524:	230a      	movs	r3, #10
 8001526:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	481c      	ldr	r0, [pc, #112]	@ (80015a0 <MX_GPIO_Init+0x2a4>)
 8001530:	f005 fbb4 	bl	8006c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001534:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001546:	230b      	movs	r3, #11
 8001548:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	4815      	ldr	r0, [pc, #84]	@ (80015a8 <MX_GPIO_Init+0x2ac>)
 8001552:	f005 fba3 	bl	8006c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001556:	2302      	movs	r3, #2
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	480a      	ldr	r0, [pc, #40]	@ (8001598 <MX_GPIO_Init+0x29c>)
 800156e:	f005 fb95 	bl	8006c9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2107      	movs	r1, #7
 8001576:	2028      	movs	r0, #40	@ 0x28
 8001578:	f002 fd20 	bl	8003fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800157c:	2028      	movs	r0, #40	@ 0x28
 800157e:	f002 fd37 	bl	8003ff0 <HAL_NVIC_EnableIRQ>

}
 8001582:	bf00      	nop
 8001584:	3738      	adds	r7, #56	@ 0x38
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	58024400 	.word	0x58024400
 8001590:	58020400 	.word	0x58020400
 8001594:	58020c00 	.word	0x58020c00
 8001598:	58021000 	.word	0x58021000
 800159c:	58020800 	.word	0x58020800
 80015a0:	58020000 	.word	0x58020000
 80015a4:	58021400 	.word	0x58021400
 80015a8:	58021800 	.word	0x58021800

080015ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b0:	f001 f8ee 	bl	8002790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b4:	f000 f81a 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b8:	f7ff fea0 	bl	80012fc <MX_GPIO_Init>
  MX_DMA_Init();
 80015bc:	f7ff fc46 	bl	8000e4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80015c0:	f000 ff64 	bl	800248c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80015c4:	f7ff f8bc 	bl	8000740 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 80015c8:	2202      	movs	r2, #2
 80015ca:	4906      	ldr	r1, [pc, #24]	@ (80015e4 <main+0x38>)
 80015cc:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <main+0x3c>)
 80015ce:	f001 fcd1 	bl	8002f74 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015d2:	f00b fe81 	bl	800d2d8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015d6:	f7ff fe3d 	bl	8001254 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015da:	f00b fea1 	bl	800d320 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015de:	bf00      	nop
 80015e0:	e7fd      	b.n	80015de <main+0x32>
 80015e2:	bf00      	nop
 80015e4:	24032a5c 	.word	0x24032a5c
 80015e8:	2400140c 	.word	0x2400140c

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b09e      	sub	sp, #120	@ 0x78
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015f6:	224c      	movs	r2, #76	@ 0x4c
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f01f f94a 	bl	8020894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	2220      	movs	r2, #32
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f01f f943 	bl	8020894 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800160e:	2002      	movs	r0, #2
 8001610:	f005 fd28 	bl	8007064 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	4b49      	ldr	r3, [pc, #292]	@ (8001740 <SystemClock_Config+0x154>)
 800161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161c:	4a48      	ldr	r2, [pc, #288]	@ (8001740 <SystemClock_Config+0x154>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001624:	4b46      	ldr	r3, [pc, #280]	@ (8001740 <SystemClock_Config+0x154>)
 8001626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b45      	ldr	r3, [pc, #276]	@ (8001744 <SystemClock_Config+0x158>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	4a44      	ldr	r2, [pc, #272]	@ (8001744 <SystemClock_Config+0x158>)
 8001634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001638:	6193      	str	r3, [r2, #24]
 800163a:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <SystemClock_Config+0x158>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001646:	bf00      	nop
 8001648:	4b3e      	ldr	r3, [pc, #248]	@ (8001744 <SystemClock_Config+0x158>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001654:	d1f8      	bne.n	8001648 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	4b3c      	ldr	r3, [pc, #240]	@ (8001748 <SystemClock_Config+0x15c>)
 8001658:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800165c:	4a3a      	ldr	r2, [pc, #232]	@ (8001748 <SystemClock_Config+0x15c>)
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001666:	4b38      	ldr	r3, [pc, #224]	@ (8001748 <SystemClock_Config+0x15c>)
 8001668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001674:	2300      	movs	r3, #0
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	4b32      	ldr	r3, [pc, #200]	@ (8001744 <SystemClock_Config+0x158>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a31      	ldr	r2, [pc, #196]	@ (8001744 <SystemClock_Config+0x158>)
 800167e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <SystemClock_Config+0x158>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <SystemClock_Config+0x154>)
 8001690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001692:	4a2b      	ldr	r2, [pc, #172]	@ (8001740 <SystemClock_Config+0x154>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800169a:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <SystemClock_Config+0x154>)
 800169c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016a6:	bf00      	nop
 80016a8:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <SystemClock_Config+0x158>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016b4:	d1f8      	bne.n	80016a8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 80016b6:	2310      	movs	r3, #16
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80016be:	2320      	movs	r3, #32
 80016c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c2:	2302      	movs	r3, #2
 80016c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80016c6:	2301      	movs	r3, #1
 80016c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016ca:	2301      	movs	r3, #1
 80016cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 80016ce:	23f0      	movs	r3, #240	@ 0xf0
 80016d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016d6:	2304      	movs	r3, #4
 80016d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016da:	2302      	movs	r3, #2
 80016dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016de:	2308      	movs	r3, #8
 80016e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ee:	4618      	mov	r0, r3
 80016f0:	f005 fcf2 	bl	80070d8 <HAL_RCC_OscConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0x112>
  {
    Error_Handler();
 80016fa:	f000 f839 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fe:	233f      	movs	r3, #63	@ 0x3f
 8001700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001702:	2303      	movs	r3, #3
 8001704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800170a:	2308      	movs	r3, #8
 800170c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800170e:	2340      	movs	r3, #64	@ 0x40
 8001710:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001712:	2340      	movs	r3, #64	@ 0x40
 8001714:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800171c:	2340      	movs	r3, #64	@ 0x40
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2104      	movs	r1, #4
 8001726:	4618      	mov	r0, r3
 8001728:	f006 f930 	bl	800798c <HAL_RCC_ClockConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001732:	f000 f81d 	bl	8001770 <Error_Handler>
  }
}
 8001736:	bf00      	nop
 8001738:	3778      	adds	r7, #120	@ 0x78
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	58000400 	.word	0x58000400
 8001744:	58024800 	.word	0x58024800
 8001748:	58024400 	.word	0x58024400

0800174c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a04      	ldr	r2, [pc, #16]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800175e:	f001 f853 	bl	8002808 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40001000 	.word	0x40001000

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <Error_Handler+0x8>
 800177c:	0000      	movs	r0, r0
	...

08001780 <StartMicroAutoware>:
  * @brief  MicroAutoware task function.
  * @param  argument : not used.
  * @retval None
  */
void StartMicroAutoware(void *argument)
{
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	f5ad 7d4a 	sub.w	sp, sp, #808	@ 0x328
 8001786:	af02      	add	r7, sp, #8
 8001788:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 800178c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001790:	6018      	str	r0, [r3, #0]

  // Variables -- START

  unsigned int uiFlags;
  unsigned char ucControlMode = AUTOWARE;
 8001792:	2301      	movs	r3, #1
 8001794:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 8001798:	4bb7      	ldr	r3, [pc, #732]	@ (8001a78 <StartMicroAutoware+0x2f8>)
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	4bb7      	ldr	r3, [pc, #732]	@ (8001a7c <StartMicroAutoware+0x2fc>)
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4bb7      	ldr	r3, [pc, #732]	@ (8001a80 <StartMicroAutoware+0x300>)
 80017a2:	4ab8      	ldr	r2, [pc, #736]	@ (8001a84 <StartMicroAutoware+0x304>)
 80017a4:	49b8      	ldr	r1, [pc, #736]	@ (8001a88 <StartMicroAutoware+0x308>)
 80017a6:	2001      	movs	r0, #1
 80017a8:	f012 ffbe 	bl	8014728 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80017ac:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017b0:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80017b4:	4618      	mov	r0, r3
 80017b6:	f012 fef1 	bl	801459c <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 80017ba:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017be:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80017c2:	4ab2      	ldr	r2, [pc, #712]	@ (8001a8c <StartMicroAutoware+0x30c>)
 80017c4:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 80017c6:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017ca:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80017ce:	4ab0      	ldr	r2, [pc, #704]	@ (8001a90 <StartMicroAutoware+0x310>)
 80017d0:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 80017d2:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017d6:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80017da:	4aae      	ldr	r2, [pc, #696]	@ (8001a94 <StartMicroAutoware+0x314>)
 80017dc:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80017de:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017e2:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80017e6:	4aac      	ldr	r2, [pc, #688]	@ (8001a98 <StartMicroAutoware+0x318>)
 80017e8:	60da      	str	r2, [r3, #12]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80017ea:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80017ee:	4618      	mov	r0, r3
 80017f0:	f012 fee2 	bl	80145b8 <rcutils_set_default_allocator>
    //printf_("Error on default allocators (line %d)\n", __LINE__);
  }

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 80017f4:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017f8:	f5a3 741e 	sub.w	r4, r3, #632	@ 0x278
 80017fc:	463b      	mov	r3, r7
 80017fe:	4618      	mov	r0, r3
 8001800:	f012 fa5c 	bl	8013cbc <rclc_executor_get_zero_initialized_executor>
 8001804:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001808:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 800180c:	4620      	mov	r0, r4
 800180e:	4619      	mov	r1, r3
 8001810:	2388      	movs	r3, #136	@ 0x88
 8001812:	461a      	mov	r2, r3
 8001814:	f01f f95d 	bl	8020ad2 <memcpy>

  allocator = rcl_get_default_allocator();
 8001818:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 800181c:	f5a3 74f6 	sub.w	r4, r3, #492	@ 0x1ec
 8001820:	463b      	mov	r3, r7
 8001822:	4618      	mov	r0, r3
 8001824:	f012 fee6 	bl	80145f4 <rcutils_get_default_allocator>
 8001828:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 800182c:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001830:	461d      	mov	r5, r3
 8001832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001836:	682b      	ldr	r3, [r5, #0]
 8001838:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 800183a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800183e:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	f012 fd67 	bl	8014318 <rclc_support_init>

  // create node
  rclc_node_init_default(&VehicleInterfaceNode, NODE_NAME, "", &support);
 800184a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800184e:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8001852:	4a92      	ldr	r2, [pc, #584]	@ (8001a9c <StartMicroAutoware+0x31c>)
 8001854:	4992      	ldr	r1, [pc, #584]	@ (8001aa0 <StartMicroAutoware+0x320>)
 8001856:	f012 fda9 	bl	80143ac <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 800185a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800185e:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001862:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001866:	2201      	movs	r2, #1
 8001868:	f012 fa32 	bl	8013cd0 <rclc_executor_init>


  // create subscribers
  // TODO set QoS
  rclc_subscription_init_default(
 800186c:	f00f fa1e 	bl	8010cac <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>
 8001870:	4602      	mov	r2, r0
 8001872:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001876:	f507 7045 	add.w	r0, r7, #788	@ 0x314
 800187a:	4b8a      	ldr	r3, [pc, #552]	@ (8001aa4 <StartMicroAutoware+0x324>)
 800187c:	f012 fe4c 	bl	8014518 <rclc_subscription_init_default>
    		&control_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_control_msgs, msg, Control),
    		"/control/command/control_cmd");

  rclc_subscription_init_default(
 8001880:	f00f fd2a 	bl	80112d8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>
 8001884:	4602      	mov	r2, r0
 8001886:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800188a:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 800188e:	4b86      	ldr	r3, [pc, #536]	@ (8001aa8 <StartMicroAutoware+0x328>)
 8001890:	f012 fe42 	bl	8014518 <rclc_subscription_init_default>
    		&gear_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd");

  rclc_subscription_init_default(
 8001894:	f00f fd98 	bl	80113c8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>
 8001898:	4602      	mov	r2, r0
 800189a:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800189e:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 80018a2:	4b82      	ldr	r3, [pc, #520]	@ (8001aac <StartMicroAutoware+0x32c>)
 80018a4:	f012 fe38 	bl	8014518 <rclc_subscription_init_default>
    		&turn_indicators_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd");

  rclc_subscription_init_default(
 80018a8:	f00f fd46 	bl	8011338 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018b2:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 80018b6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ab0 <StartMicroAutoware+0x330>)
 80018b8:	f012 fe2e 	bl	8014518 <rclc_subscription_init_default>
    		&hazard_lights_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd");

  rclc_subscription_init_default(
 80018bc:	f013 f86e 	bl	801499c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018c6:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 80018ca:	4b7a      	ldr	r3, [pc, #488]	@ (8001ab4 <StartMicroAutoware+0x334>)
 80018cc:	f012 fe24 	bl	8014518 <rclc_subscription_init_default>
    		&actuation_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd");

  rclc_subscription_init_default(
 80018d0:	f013 f8ac 	bl	8014a2c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018da:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 80018de:	4b76      	ldr	r3, [pc, #472]	@ (8001ab8 <StartMicroAutoware+0x338>)
 80018e0:	f012 fe1a 	bl	8014518 <rclc_subscription_init_default>
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd");

  // create publishers
  // TODO set QoS
  rclc_publisher_init_default(
 80018e4:	f00f fce0 	bl	80112a8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018ee:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 80018f2:	4b72      	ldr	r3, [pc, #456]	@ (8001abc <StartMicroAutoware+0x33c>)
 80018f4:	f012 fd9c 	bl	8014430 <rclc_publisher_init_default>
		  	&control_mode_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, ControlModeReport),
			"/vehicle/status/control_mode");

  rclc_publisher_init_default(
 80018f8:	f00f fd96 	bl	8011428 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001902:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 8001906:	4b6e      	ldr	r3, [pc, #440]	@ (8001ac0 <StartMicroAutoware+0x340>)
 8001908:	f012 fd92 	bl	8014430 <rclc_publisher_init_default>
		  	&vehicle_twist_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, VelocityReport),
			"/vehicle/status/velocity_status");

  rclc_publisher_init_default(
 800190c:	f00f fd44 	bl	8011398 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>
 8001910:	4602      	mov	r2, r0
 8001912:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001916:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 800191a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac4 <StartMicroAutoware+0x344>)
 800191c:	f012 fd88 	bl	8014430 <rclc_publisher_init_default>
			&steering_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, SteeringReport),
			"/vehicle/status/steering_status");

  rclc_publisher_init_default(
 8001920:	f00f fcf2 	bl	8011308 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>
 8001924:	4602      	mov	r2, r0
 8001926:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800192a:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 800192e:	4b66      	ldr	r3, [pc, #408]	@ (8001ac8 <StartMicroAutoware+0x348>)
 8001930:	f012 fd7e 	bl	8014430 <rclc_publisher_init_default>
			&gear_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearReport),
			"/vehicle/status/gear_status");

  rclc_publisher_init_default(
 8001934:	f00f fd60 	bl	80113f8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>
 8001938:	4602      	mov	r2, r0
 800193a:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800193e:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 8001942:	4b62      	ldr	r3, [pc, #392]	@ (8001acc <StartMicroAutoware+0x34c>)
 8001944:	f012 fd74 	bl	8014430 <rclc_publisher_init_default>
			&turn_indicators_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsReport),
			"/vehicle/status/turn_indicators_status");

  rclc_publisher_init_default(
 8001948:	f00f fd0e 	bl	8011368 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>
 800194c:	4602      	mov	r2, r0
 800194e:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001952:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8001956:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad0 <StartMicroAutoware+0x350>)
 8001958:	f012 fd6a 	bl	8014430 <rclc_publisher_init_default>
			&hazard_lights_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsReport),
			"/vehicle/status/hazard_lights_status");

  rclc_publisher_init_default(
 800195c:	f013 f836 	bl	80149cc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 8001960:	4602      	mov	r2, r0
 8001962:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001966:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 800196a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad4 <StartMicroAutoware+0x354>)
 800196c:	f012 fd60 	bl	8014430 <rclc_publisher_init_default>
			&actuation_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
			"/vehicle/status/actuation_status");

  rclc_publisher_init_default(
 8001970:	f013 f844 	bl	80149fc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 8001974:	4602      	mov	r2, r0
 8001976:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800197a:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 800197e:	4b56      	ldr	r3, [pc, #344]	@ (8001ad8 <StartMicroAutoware+0x358>)
 8001980:	f012 fd56 	bl	8014430 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
			"/vehicle/status/steering_wheel_status");

  // creating servers

  rclc_service_init_default(
 8001984:	f00f fc70 	bl	8011268 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>
 8001988:	4602      	mov	r2, r0
 800198a:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800198e:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8001992:	4b52      	ldr	r3, [pc, #328]	@ (8001adc <StartMicroAutoware+0x35c>)
 8001994:	f012 fd86 	bl	80144a4 <rclc_service_init_default>
			ROSIDL_GET_SRV_TYPE_SUPPORT(autoware_vehicle_msgs, srv, ControlModeCommand),
			"/control/control_mode_request");


  // adding callbacks to executor
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 8001998:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 800199c:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 80019a0:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019a4:	2300      	movs	r3, #0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae0 <StartMicroAutoware+0x360>)
 80019aa:	f012 fa0d 	bl	8013dc8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &gear_cmd_sub_, &gear_cmd_msg_, &gear_cmd_callback, ON_NEW_DATA);
 80019ae:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 80019b2:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 80019b6:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019ba:	2300      	movs	r3, #0
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4b49      	ldr	r3, [pc, #292]	@ (8001ae4 <StartMicroAutoware+0x364>)
 80019c0:	f012 fa02 	bl	8013dc8 <rclc_executor_add_subscription>
  rclc_executor_add_service(&executor, &control_mode_server_, &control_mode_request_msg_, &control_mode_response_msg_, control_mode_cmd_callback);
 80019c4:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 80019c8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80019cc:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 80019d0:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019d4:	4c44      	ldr	r4, [pc, #272]	@ (8001ae8 <StartMicroAutoware+0x368>)
 80019d6:	9400      	str	r4, [sp, #0]
 80019d8:	f012 fa34 	bl	8013e44 <rclc_executor_add_service>

  rclc_executor_add_subscription(&executor, &turn_indicators_cmd_sub_, &turn_indicators_cmd_msg_, &turn_indicators_cmd_callback, ON_NEW_DATA);
 80019dc:	f507 721e 	add.w	r2, r7, #632	@ 0x278
 80019e0:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 80019e4:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019e8:	2300      	movs	r3, #0
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	4b3f      	ldr	r3, [pc, #252]	@ (8001aec <StartMicroAutoware+0x36c>)
 80019ee:	f012 f9eb 	bl	8013dc8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &hazard_lights_cmd_sub_, &hazard_lights_cmd_msg_, &hazard_lights_cmd_callback, ON_NEW_DATA);
 80019f2:	f507 721b 	add.w	r2, r7, #620	@ 0x26c
 80019f6:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 80019fa:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019fe:	2300      	movs	r3, #0
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4b3b      	ldr	r3, [pc, #236]	@ (8001af0 <StartMicroAutoware+0x370>)
 8001a04:	f012 f9e0 	bl	8013dc8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &actuation_cmd_sub_, &actuation_cmd_msg_, &actuation_cmd_callback, ON_NEW_DATA);
 8001a08:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001a0c:	f507 7141 	add.w	r1, r7, #772	@ 0x304
 8001a10:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001a14:	2300      	movs	r3, #0
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <StartMicroAutoware+0x374>)
 8001a1a:	f012 f9d5 	bl	8013dc8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);
 8001a1e:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8001a22:	f507 7140 	add.w	r1, r7, #768	@ 0x300
 8001a26:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	4b32      	ldr	r3, [pc, #200]	@ (8001af8 <StartMicroAutoware+0x378>)
 8001a30:	f012 f9ca 	bl	8013dc8 <rclc_executor_add_subscription>


  for (;;)
  {

    rclc_executor_spin_some(&executor, 20 * (1000 * 1000)); // Spinning executor for 20 ms.
 8001a34:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001a38:	a30d      	add	r3, pc, #52	@ (adr r3, 8001a70 <StartMicroAutoware+0x2f0>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	4608      	mov	r0, r1
 8001a40:	f012 fc30 	bl	80142a4 <rclc_executor_spin_some>

    if(0x00111111 == ucSubscribersRecieved)
 8001a44:	4b2d      	ldr	r3, [pc, #180]	@ (8001afc <StartMicroAutoware+0x37c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a2d      	ldr	r2, [pc, #180]	@ (8001b00 <StartMicroAutoware+0x380>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d1f2      	bne.n	8001a34 <StartMicroAutoware+0x2b4>
    {

	  // TODO: Gather all subs data, then compact and send to TaskControle.

      // Verify if Autoware changed the operation mode
	  if(AUTOWARE == ucControlMode)
 8001a4e:	f897 331b 	ldrb.w	r3, [r7, #795]	@ 0x31b
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d158      	bne.n	8001b08 <StartMicroAutoware+0x388>
	  {
		ucControlMode = MANUAL;
 8001a56:	2302      	movs	r3, #2
 8001a58:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
		osThreadFlagsSet(TaskControleHandle, 0x10);
 8001a5c:	4b29      	ldr	r3, [pc, #164]	@ (8001b04 <StartMicroAutoware+0x384>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2110      	movs	r1, #16
 8001a62:	4618      	mov	r0, r3
 8001a64:	f00b fd14 	bl	800d490 <osThreadFlagsSet>
 8001a68:	e05b      	b.n	8001b22 <StartMicroAutoware+0x3a2>
 8001a6a:	bf00      	nop
 8001a6c:	f3af 8000 	nop.w
 8001a70:	01312d00 	.word	0x01312d00
 8001a74:	00000000 	.word	0x00000000
 8001a78:	08000f6d 	.word	0x08000f6d
 8001a7c:	08000f09 	.word	0x08000f09
 8001a80:	08000ee9 	.word	0x08000ee9
 8001a84:	08000ebd 	.word	0x08000ebd
 8001a88:	24032ac4 	.word	0x24032ac4
 8001a8c:	08001bb1 	.word	0x08001bb1
 8001a90:	08001bf5 	.word	0x08001bf5
 8001a94:	08001c2d 	.word	0x08001c2d
 8001a98:	08001c99 	.word	0x08001c99
 8001a9c:	080217b0 	.word	0x080217b0
 8001aa0:	080217b4 	.word	0x080217b4
 8001aa4:	080217c8 	.word	0x080217c8
 8001aa8:	080217e8 	.word	0x080217e8
 8001aac:	08021804 	.word	0x08021804
 8001ab0:	0802182c 	.word	0x0802182c
 8001ab4:	08021850 	.word	0x08021850
 8001ab8:	08021870 	.word	0x08021870
 8001abc:	08021890 	.word	0x08021890
 8001ac0:	080218b0 	.word	0x080218b0
 8001ac4:	080218d0 	.word	0x080218d0
 8001ac8:	080218f0 	.word	0x080218f0
 8001acc:	0802190c 	.word	0x0802190c
 8001ad0:	08021934 	.word	0x08021934
 8001ad4:	0802195c 	.word	0x0802195c
 8001ad8:	08021980 	.word	0x08021980
 8001adc:	080219a8 	.word	0x080219a8
 8001ae0:	08001149 	.word	0x08001149
 8001ae4:	08001171 	.word	0x08001171
 8001ae8:	08001239 	.word	0x08001239
 8001aec:	08001199 	.word	0x08001199
 8001af0:	080011c1 	.word	0x080011c1
 8001af4:	080011e9 	.word	0x080011e9
 8001af8:	08001211 	.word	0x08001211
 8001afc:	24032a64 	.word	0x24032a64
 8001b00:	00111111 	.word	0x00111111
 8001b04:	24032a48 	.word	0x24032a48
	  }
	  else if(MANUAL == ucControlMode)
 8001b08:	f897 331b 	ldrb.w	r3, [r7, #795]	@ 0x31b
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d108      	bne.n	8001b22 <StartMicroAutoware+0x3a2>
	  {
		ucControlMode = AUTOWARE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
		osThreadFlagsSet(TaskControleHandle, 0x01);
 8001b16:	4b22      	ldr	r3, [pc, #136]	@ (8001ba0 <StartMicroAutoware+0x420>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00b fcb7 	bl	800d490 <osThreadFlagsSet>
	  }

	  // Autonomous mode: send commands
      if(AUTOWARE == ucControlMode)
 8001b22:	f897 331b 	ldrb.w	r3, [r7, #795]	@ 0x31b
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d112      	bne.n	8001b50 <StartMicroAutoware+0x3d0>
      {
    	osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba4 <StartMicroAutoware+0x424>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b32:	4618      	mov	r0, r3
 8001b34:	f00b fe1c 	bl	800d770 <osMutexAcquire>
	    // xControlAction
		osMutexRelease(MutexControlSignalHandle);
 8001b38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <StartMicroAutoware+0x428>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f00b fe62 	bl	800d806 <osMutexRelease>

		osThreadFlagsSet(TaskControleHandle, 0x100);
 8001b42:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <StartMicroAutoware+0x420>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00b fca0 	bl	800d490 <osThreadFlagsSet>
      }

      // WAIT for flag to sync xControlSignal update
      uiFlags = osThreadFlagsWait(0x100, osFlagsWaitAll, TIMEOUT_GET_CONTROL_SIGNAL);
 8001b50:	221e      	movs	r2, #30
 8001b52:	2101      	movs	r1, #1
 8001b54:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b58:	f00b fce8 	bl	800d52c <osThreadFlagsWait>
 8001b5c:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
      {
    	  // Pub data carla
      }

      // Checking control mode update by hardware.
      uiFlags = osThreadFlagsWait(0x11, osFlagsWaitAll, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2101      	movs	r1, #1
 8001b64:	2011      	movs	r0, #17
 8001b66:	f00b fce1 	bl	800d52c <osThreadFlagsWait>
 8001b6a:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c

	  if(0x01 == uiFlags)
 8001b6e:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d105      	bne.n	8001b82 <StartMicroAutoware+0x402>
	  {
	    ucControlMode = AUTOWARE;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
	    // publish to autoware
	    uiFlags = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
	  }

	  if(0x10 == uiFlags)
 8001b82:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d105      	bne.n	8001b96 <StartMicroAutoware+0x416>
	  {
	    ucControlMode = MANUAL;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
		// publish to autoware
		uiFlags = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
	  }


	  // Reseting subscribers flags
	  ucSubscribersRecieved = 0;
 8001b96:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <StartMicroAutoware+0x42c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
    rclc_executor_spin_some(&executor, 20 * (1000 * 1000)); // Spinning executor for 20 ms.
 8001b9c:	e74a      	b.n	8001a34 <StartMicroAutoware+0x2b4>
 8001b9e:	bf00      	nop
 8001ba0:	24032a48 	.word	0x24032a48
 8001ba4:	24032a54 	.word	0x24032a54
 8001ba8:	24032a50 	.word	0x24032a50
 8001bac:	24032a64 	.word	0x24032a64

08001bb0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001bba:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <microros_allocate+0x3c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <microros_allocate+0x3c>)
 8001bc8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <microros_allocate+0x40>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <microros_allocate+0x40>)
 8001bd8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fee4 	bl	80009a8 <pvPortMallocMicroROS>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	24032a68 	.word	0x24032a68
 8001bf0:	24032a6c 	.word	0x24032a6c

08001bf4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00c      	beq.n	8001c1e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7fe fff3 	bl	8000bf0 <getBlockSize>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a06      	ldr	r2, [pc, #24]	@ (8001c28 <microros_deallocate+0x34>)
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <microros_deallocate+0x34>)
 8001c16:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7fe ff8d 	bl	8000b38 <vPortFreeMicroROS>
  }
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	24032a6c 	.word	0x24032a6c

08001c2c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c38:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <microros_reallocate+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	4413      	add	r3, r2
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <microros_reallocate+0x64>)
 8001c46:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <microros_reallocate+0x68>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	4413      	add	r3, r2
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <microros_reallocate+0x68>)
 8001c56:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d104      	bne.n	8001c68 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001c5e:	68b8      	ldr	r0, [r7, #8]
 8001c60:	f7fe fea2 	bl	80009a8 <pvPortMallocMicroROS>
 8001c64:	4603      	mov	r3, r0
 8001c66:	e00e      	b.n	8001c86 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7fe ffc1 	bl	8000bf0 <getBlockSize>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a08      	ldr	r2, [pc, #32]	@ (8001c94 <microros_reallocate+0x68>)
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <microros_reallocate+0x68>)
 8001c7a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7fe ffd4 	bl	8000c2c <pvPortReallocMicroROS>
 8001c84:	4603      	mov	r3, r0
  }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	24032a68 	.word	0x24032a68
 8001c94:	24032a6c 	.word	0x24032a6c

08001c98 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce0 <microros_zero_allocate+0x48>)
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <microros_zero_allocate+0x48>)
 8001cb6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <microros_zero_allocate+0x4c>)
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <microros_zero_allocate+0x4c>)
 8001cca:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7fe ffd9 	bl	8000c86 <pvPortCallocMicroROS>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	24032a68 	.word	0x24032a68
 8001ce4:	24032a6c 	.word	0x24032a6c

08001ce8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001ce8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001cfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cfe:	a320      	add	r3, pc, #128	@ (adr r3, 8001d80 <UTILS_NanosecondsToTimespec+0x98>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fb54 	bl	80003b0 <__aeabi_ldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001d12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d16:	a31a      	add	r3, pc, #104	@ (adr r3, 8001d80 <UTILS_NanosecondsToTimespec+0x98>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	f7fe fb48 	bl	80003b0 <__aeabi_ldivmod>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da20      	bge.n	8001d6e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a11      	ldr	r2, [pc, #68]	@ (8001d78 <UTILS_NanosecondsToTimespec+0x90>)
 8001d32:	fb82 1203 	smull	r1, r2, r2, r3
 8001d36:	1712      	asrs	r2, r2, #28
 8001d38:	17db      	asrs	r3, r3, #31
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d46:	6979      	ldr	r1, [r7, #20]
 8001d48:	17c8      	asrs	r0, r1, #31
 8001d4a:	460c      	mov	r4, r1
 8001d4c:	4605      	mov	r5, r0
 8001d4e:	ebb2 0804 	subs.w	r8, r2, r4
 8001d52:	eb63 0905 	sbc.w	r9, r3, r5
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	4906      	ldr	r1, [pc, #24]	@ (8001d7c <UTILS_NanosecondsToTimespec+0x94>)
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	441a      	add	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
    }
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d78:	44b82fa1 	.word	0x44b82fa1
 8001d7c:	3b9aca00 	.word	0x3b9aca00
 8001d80:	3b9aca00 	.word	0x3b9aca00
 8001d84:	00000000 	.word	0x00000000

08001d88 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d8c:	b08e      	sub	sp, #56	@ 0x38
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6278      	str	r0, [r7, #36]	@ 0x24
 8001d92:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001d94:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001d98:	2300      	movs	r3, #0
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001daa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dae:	4618      	mov	r0, r3
 8001db0:	f00d fa5a 	bl	800f268 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db6:	17da      	asrs	r2, r3, #31
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	61fa      	str	r2, [r7, #28]
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	69b9      	ldr	r1, [r7, #24]
 8001dc6:	000b      	movs	r3, r1
 8001dc8:	2200      	movs	r2, #0
 8001dca:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	461c      	mov	r4, r3
 8001dd4:	4615      	mov	r5, r2
 8001dd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001dda:	1911      	adds	r1, r2, r4
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	416b      	adcs	r3, r5
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001de6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001dea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	f04f 0400 	mov.w	r4, #0
 8001df6:	f04f 0500 	mov.w	r5, #0
 8001dfa:	015d      	lsls	r5, r3, #5
 8001dfc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001e00:	0154      	lsls	r4, r2, #5
 8001e02:	4622      	mov	r2, r4
 8001e04:	462b      	mov	r3, r5
 8001e06:	ebb2 0800 	subs.w	r8, r2, r0
 8001e0a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001e1a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001e1e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001e22:	4690      	mov	r8, r2
 8001e24:	4699      	mov	r9, r3
 8001e26:	eb18 0a00 	adds.w	sl, r8, r0
 8001e2a:	eb49 0b01 	adc.w	fp, r9, r1
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e3a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e3e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e42:	ebb2 040a 	subs.w	r4, r2, sl
 8001e46:	603c      	str	r4, [r7, #0]
 8001e48:	eb63 030b 	sbc.w	r3, r3, fp
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e52:	4623      	mov	r3, r4
 8001e54:	181b      	adds	r3, r3, r0
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	462b      	mov	r3, r5
 8001e5a:	eb41 0303 	adc.w	r3, r1, r3
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	6a3a      	ldr	r2, [r7, #32]
 8001e62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e66:	f7ff ff3f 	bl	8001ce8 <UTILS_NanosecondsToTimespec>

    return 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3738      	adds	r7, #56	@ 0x38
 8001e70:	46bd      	mov	sp, r7
 8001e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <HAL_MspInit+0x38>)
 8001e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e84:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <HAL_MspInit+0x38>)
 8001e86:	f043 0302 	orr.w	r3, r3, #2
 8001e8a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e8e:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <HAL_MspInit+0x38>)
 8001e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f06f 0001 	mvn.w	r0, #1
 8001ea4:	f002 f88a 	bl	8003fbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	58024400 	.word	0x58024400

08001eb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b090      	sub	sp, #64	@ 0x40
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b0f      	cmp	r3, #15
 8001ec0:	d827      	bhi.n	8001f12 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	2036      	movs	r0, #54	@ 0x36
 8001ec8:	f002 f878 	bl	8003fbc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ecc:	2036      	movs	r0, #54	@ 0x36
 8001ece:	f002 f88f 	bl	8003ff0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001ed2:	4a29      	ldr	r2, [pc, #164]	@ (8001f78 <HAL_InitTick+0xc4>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ed8:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <HAL_InitTick+0xc8>)
 8001eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ede:	4a27      	ldr	r2, [pc, #156]	@ (8001f7c <HAL_InitTick+0xc8>)
 8001ee0:	f043 0310 	orr.w	r3, r3, #16
 8001ee4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ee8:	4b24      	ldr	r3, [pc, #144]	@ (8001f7c <HAL_InitTick+0xc8>)
 8001eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ef6:	f107 0210 	add.w	r2, r7, #16
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f006 f8cf 	bl	80080a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f08:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d106      	bne.n	8001f1e <HAL_InitTick+0x6a>
 8001f10:	e001      	b.n	8001f16 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e02b      	b.n	8001f6e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f16:	f006 f899 	bl	800804c <HAL_RCC_GetPCLK1Freq>
 8001f1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001f1c:	e004      	b.n	8001f28 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f1e:	f006 f895 	bl	800804c <HAL_RCC_GetPCLK1Freq>
 8001f22:	4603      	mov	r3, r0
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f2a:	4a15      	ldr	r2, [pc, #84]	@ (8001f80 <HAL_InitTick+0xcc>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	0c9b      	lsrs	r3, r3, #18
 8001f32:	3b01      	subs	r3, #1
 8001f34:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f36:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <HAL_InitTick+0xd0>)
 8001f38:	4a13      	ldr	r2, [pc, #76]	@ (8001f88 <HAL_InitTick+0xd4>)
 8001f3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <HAL_InitTick+0xd0>)
 8001f3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f44:	4a0f      	ldr	r2, [pc, #60]	@ (8001f84 <HAL_InitTick+0xd0>)
 8001f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <HAL_InitTick+0xd0>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <HAL_InitTick+0xd0>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001f56:	480b      	ldr	r0, [pc, #44]	@ (8001f84 <HAL_InitTick+0xd0>)
 8001f58:	f008 fde4 	bl	800ab24 <HAL_TIM_Base_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d104      	bne.n	8001f6c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001f62:	4808      	ldr	r0, [pc, #32]	@ (8001f84 <HAL_InitTick+0xd0>)
 8001f64:	f008 fe40 	bl	800abe8 <HAL_TIM_Base_Start_IT>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	e000      	b.n	8001f6e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3740      	adds	r7, #64	@ 0x40
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	2400000c 	.word	0x2400000c
 8001f7c:	58024400 	.word	0x58024400
 8001f80:	431bde83 	.word	0x431bde83
 8001f84:	24032a70 	.word	0x24032a70
 8001f88:	40001000 	.word	0x40001000

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <NMI_Handler+0x4>

08001f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	@ (8001fd4 <DMA1_Stream0_IRQHandler+0x10>)
 8001fca:	f003 fb49 	bl	8005660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	24032b58 	.word	0x24032b58

08001fd8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <DMA1_Stream1_IRQHandler+0x10>)
 8001fde:	f003 fb3f 	bl	8005660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	24032bd0 	.word	0x24032bd0

08001fec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <USART3_IRQHandler+0x10>)
 8001ff2:	f009 fa17 	bl	800b424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	24032ac4 	.word	0x24032ac4

08002000 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8002004:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002008:	f005 f811 	bl	800702e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <TIM6_DAC_IRQHandler+0x10>)
 8002016:	f008 fe5f 	bl	800acd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	24032a70 	.word	0x24032a70

08002024 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return 1;
 8002028:	2301      	movs	r3, #1
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <_kill>:

int _kill(int pid, int sig)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800203e:	f01e fd13 	bl	8020a68 <__errno>
 8002042:	4603      	mov	r3, r0
 8002044:	2216      	movs	r2, #22
 8002046:	601a      	str	r2, [r3, #0]
  return -1;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_exit>:

void _exit (int status)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800205c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ffe7 	bl	8002034 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002066:	bf00      	nop
 8002068:	e7fd      	b.n	8002066 <_exit+0x12>

0800206a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e00a      	b.n	8002092 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800207c:	f3af 8000 	nop.w
 8002080:	4601      	mov	r1, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	60ba      	str	r2, [r7, #8]
 8002088:	b2ca      	uxtb	r2, r1
 800208a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3301      	adds	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	dbf0      	blt.n	800207c <_read+0x12>
  }

  return len;
 800209a:	687b      	ldr	r3, [r7, #4]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	e009      	b.n	80020ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	60ba      	str	r2, [r7, #8]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	dbf1      	blt.n	80020b6 <_write+0x12>
  }
  return len;
 80020d2:	687b      	ldr	r3, [r7, #4]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_close>:

int _close(int file)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002104:	605a      	str	r2, [r3, #4]
  return 0;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_isatty>:

int _isatty(int file)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800211c:	2301      	movs	r3, #1
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800214c:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <_sbrk+0x5c>)
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <_sbrk+0x60>)
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002158:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <_sbrk+0x64>)
 8002162:	4a12      	ldr	r2, [pc, #72]	@ (80021ac <_sbrk+0x68>)
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	429a      	cmp	r2, r3
 8002172:	d207      	bcs.n	8002184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002174:	f01e fc78 	bl	8020a68 <__errno>
 8002178:	4603      	mov	r3, r0
 800217a:	220c      	movs	r2, #12
 800217c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002182:	e009      	b.n	8002198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002184:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218a:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <_sbrk+0x64>)
 8002194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	24080000 	.word	0x24080000
 80021a4:	00000400 	.word	0x00000400
 80021a8:	24032ac0 	.word	0x24032ac0
 80021ac:	240695e0 	.word	0x240695e0

080021b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021b4:	4b37      	ldr	r3, [pc, #220]	@ (8002294 <SystemInit+0xe4>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	4a36      	ldr	r2, [pc, #216]	@ (8002294 <SystemInit+0xe4>)
 80021bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021c4:	4b34      	ldr	r3, [pc, #208]	@ (8002298 <SystemInit+0xe8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	2b06      	cmp	r3, #6
 80021ce:	d807      	bhi.n	80021e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021d0:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <SystemInit+0xe8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 030f 	bic.w	r3, r3, #15
 80021d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002298 <SystemInit+0xe8>)
 80021da:	f043 0307 	orr.w	r3, r3, #7
 80021de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80021e0:	4b2e      	ldr	r3, [pc, #184]	@ (800229c <SystemInit+0xec>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2d      	ldr	r2, [pc, #180]	@ (800229c <SystemInit+0xec>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021ec:	4b2b      	ldr	r3, [pc, #172]	@ (800229c <SystemInit+0xec>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80021f2:	4b2a      	ldr	r3, [pc, #168]	@ (800229c <SystemInit+0xec>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4929      	ldr	r1, [pc, #164]	@ (800229c <SystemInit+0xec>)
 80021f8:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <SystemInit+0xf0>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021fe:	4b26      	ldr	r3, [pc, #152]	@ (8002298 <SystemInit+0xe8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800220a:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <SystemInit+0xe8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 030f 	bic.w	r3, r3, #15
 8002212:	4a21      	ldr	r2, [pc, #132]	@ (8002298 <SystemInit+0xe8>)
 8002214:	f043 0307 	orr.w	r3, r3, #7
 8002218:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800221a:	4b20      	ldr	r3, [pc, #128]	@ (800229c <SystemInit+0xec>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002220:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <SystemInit+0xec>)
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002226:	4b1d      	ldr	r3, [pc, #116]	@ (800229c <SystemInit+0xec>)
 8002228:	2200      	movs	r2, #0
 800222a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800222c:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <SystemInit+0xec>)
 800222e:	4a1d      	ldr	r2, [pc, #116]	@ (80022a4 <SystemInit+0xf4>)
 8002230:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002232:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <SystemInit+0xec>)
 8002234:	4a1c      	ldr	r2, [pc, #112]	@ (80022a8 <SystemInit+0xf8>)
 8002236:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002238:	4b18      	ldr	r3, [pc, #96]	@ (800229c <SystemInit+0xec>)
 800223a:	4a1c      	ldr	r2, [pc, #112]	@ (80022ac <SystemInit+0xfc>)
 800223c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800223e:	4b17      	ldr	r3, [pc, #92]	@ (800229c <SystemInit+0xec>)
 8002240:	2200      	movs	r2, #0
 8002242:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002244:	4b15      	ldr	r3, [pc, #84]	@ (800229c <SystemInit+0xec>)
 8002246:	4a19      	ldr	r2, [pc, #100]	@ (80022ac <SystemInit+0xfc>)
 8002248:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800224a:	4b14      	ldr	r3, [pc, #80]	@ (800229c <SystemInit+0xec>)
 800224c:	2200      	movs	r2, #0
 800224e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002250:	4b12      	ldr	r3, [pc, #72]	@ (800229c <SystemInit+0xec>)
 8002252:	4a16      	ldr	r2, [pc, #88]	@ (80022ac <SystemInit+0xfc>)
 8002254:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002256:	4b11      	ldr	r3, [pc, #68]	@ (800229c <SystemInit+0xec>)
 8002258:	2200      	movs	r2, #0
 800225a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800225c:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <SystemInit+0xec>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0e      	ldr	r2, [pc, #56]	@ (800229c <SystemInit+0xec>)
 8002262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002266:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002268:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <SystemInit+0xec>)
 800226a:	2200      	movs	r2, #0
 800226c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800226e:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <SystemInit+0x100>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <SystemInit+0x104>)
 8002274:	4013      	ands	r3, r2
 8002276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800227a:	d202      	bcs.n	8002282 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800227c:	4b0e      	ldr	r3, [pc, #56]	@ (80022b8 <SystemInit+0x108>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002282:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <SystemInit+0x10c>)
 8002284:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002288:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00
 8002298:	52002000 	.word	0x52002000
 800229c:	58024400 	.word	0x58024400
 80022a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80022a4:	02020200 	.word	0x02020200
 80022a8:	01ff0000 	.word	0x01ff0000
 80022ac:	01010280 	.word	0x01010280
 80022b0:	5c001000 	.word	0x5c001000
 80022b4:	ffff0000 	.word	0xffff0000
 80022b8:	51008108 	.word	0x51008108
 80022bc:	52004000 	.word	0x52004000

080022c0 <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void *argument)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b090      	sub	sp, #64	@ 0x40
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  unsigned char ucControlMode;

  unsigned int uiX0   = 33970;
 80022c8:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 80022cc:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int uiXMin = 1057;
 80022ce:	f240 4321 	movw	r3, #1057	@ 0x421
 80022d2:	633b      	str	r3, [r7, #48]	@ 0x30
  unsigned int uiXMax = 65535;
 80022d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  unsigned int uiY0   = 33580;
 80022da:	f248 332c 	movw	r3, #33580	@ 0x832c
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int uiYMin = 1062;
 80022e0:	f240 4326 	movw	r3, #1062	@ 0x426
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
  unsigned int uiYMax = 65535;
 80022e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022ea:	623b      	str	r3, [r7, #32]
  float fTrottle;
  float fBrake;
  float fSteeringAngle;


  ucControlMode = AUTOWARE;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  for(;;)
  {

	uiFlags = osThreadFlagsWait(0x11, osFlagsWaitAny, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2011      	movs	r0, #17
 80022f8:	f00b f918 	bl	800d52c <osThreadFlagsWait>
 80022fc:	63b8      	str	r0, [r7, #56]	@ 0x38

	if(0x01 == uiFlags)
 80022fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002300:	2b01      	cmp	r3, #1
 8002302:	d104      	bne.n	800230e <StartTaskControle+0x4e>
	{
	  ucControlMode = AUTOWARE;
 8002304:	2301      	movs	r3, #1
 8002306:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	  uiFlags = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	if(0x10 == uiFlags)
 800230e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002310:	2b10      	cmp	r3, #16
 8002312:	d104      	bne.n	800231e <StartTaskControle+0x5e>
	{
	  ucControlMode = MANUAL;
 8002314:	2302      	movs	r3, #2
 8002316:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	  uiFlags = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	uiFlags = osThreadFlagsWait(0x1000, osFlagsWaitAll, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2101      	movs	r1, #1
 8002322:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002326:	f00b f901 	bl	800d52c <osThreadFlagsWait>
 800232a:	63b8      	str	r0, [r7, #56]	@ 0x38

	if(0x1000 == uiFlags)
 800232c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002332:	d11c      	bne.n	800236e <StartTaskControle+0xae>
	{
	  if(AUTOWARE == ucControlMode)
 8002334:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002338:	2b01      	cmp	r3, #1
 800233a:	d109      	bne.n	8002350 <StartTaskControle+0x90>
	  {
		ucControlMode = MANUAL;
 800233c:	2302      	movs	r3, #2
 800233e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		osThreadFlagsSet(TaskMicroAutowaHandle, 0x10);
 8002342:	4b4d      	ldr	r3, [pc, #308]	@ (8002478 <StartTaskControle+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2110      	movs	r1, #16
 8002348:	4618      	mov	r0, r3
 800234a:	f00b f8a1 	bl	800d490 <osThreadFlagsSet>
 800234e:	e00c      	b.n	800236a <StartTaskControle+0xaa>
	  }
	  else if(MANUAL == ucControlMode)
 8002350:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002354:	2b02      	cmp	r3, #2
 8002356:	d108      	bne.n	800236a <StartTaskControle+0xaa>
	  {
		ucControlMode = AUTOWARE;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		osThreadFlagsSet(TaskMicroAutowaHandle, 0x01);
 800235e:	4b46      	ldr	r3, [pc, #280]	@ (8002478 <StartTaskControle+0x1b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2101      	movs	r1, #1
 8002364:	4618      	mov	r0, r3
 8002366:	f00b f893 	bl	800d490 <osThreadFlagsSet>
	  }
	  uiFlags = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	if(AUTOWARE == ucControlMode)
 800236e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002372:	2b01      	cmp	r3, #1
 8002374:	d11d      	bne.n	80023b2 <StartTaskControle+0xf2>
	{
	  // WAIT for flag to sync xControlAction update
	  uiFlags = osThreadFlagsWait(0x100, osFlagsWaitAll, TIMEOUT_GET_CONTROL_ACTION);
 8002376:	221e      	movs	r2, #30
 8002378:	2101      	movs	r1, #1
 800237a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800237e:	f00b f8d5 	bl	800d52c <osThreadFlagsWait>
 8002382:	63b8      	str	r0, [r7, #56]	@ 0x38
	  if(osFlagsErrorTimeout == uiFlags)
	  {
	  // Deu ruim timeout
	  }

	  if(0x100 == uiFlags)
 8002384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800238a:	d112      	bne.n	80023b2 <StartTaskControle+0xf2>
	  {
	  osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 800238c:	4b3b      	ldr	r3, [pc, #236]	@ (800247c <StartTaskControle+0x1bc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002394:	4618      	mov	r0, r3
 8002396:	f00b f9eb 	bl	800d770 <osMutexAcquire>
	  //xControlSignal
	  osMutexRelease(MutexControlSignalHandle);
 800239a:	4b38      	ldr	r3, [pc, #224]	@ (800247c <StartTaskControle+0x1bc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f00b fa31 	bl	800d806 <osMutexRelease>

	  osThreadFlagsSet(TaskMicroAutowaHandle, 0x100);
 80023a4:	4b34      	ldr	r3, [pc, #208]	@ (8002478 <StartTaskControle+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023ac:	4618      	mov	r0, r3
 80023ae:	f00b f86f 	bl	800d490 <osThreadFlagsSet>
	  }
	}

    if(MANUAL == ucControlMode)
 80023b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d19b      	bne.n	80022f2 <StartTaskControle+0x32>
    {
      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 80023ba:	4b31      	ldr	r3, [pc, #196]	@ (8002480 <StartTaskControle+0x1c0>)
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80023c4:	f000 f986 	bl	80026d4 <fGetJoyPostition>
 80023c8:	ed87 0a07 	vstr	s0, [r7, #28]
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 80023cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002480 <StartTaskControle+0x1c0>)
 80023ce:	6858      	ldr	r0, [r3, #4]
 80023d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d2:	6a3a      	ldr	r2, [r7, #32]
 80023d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023d6:	f000 f97d 	bl	80026d4 <fGetJoyPostition>
 80023da:	ed87 0a06 	vstr	s0, [r7, #24]

      fTrottle = (fJoyYAxis > 0) ? fJoyYAxis*MAX_TROTTLE : 0;
 80023de:	edd7 7a06 	vldr	s15, [r7, #24]
 80023e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	dd06      	ble.n	80023fa <StartTaskControle+0x13a>
 80023ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80023f0:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002484 <StartTaskControle+0x1c4>
 80023f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f8:	e001      	b.n	80023fe <StartTaskControle+0x13e>
 80023fa:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8002488 <StartTaskControle+0x1c8>
 80023fe:	edc7 7a05 	vstr	s15, [r7, #20]
      fBrake = (fJoyYAxis < 0) ? fJoyYAxis*MAX_BRAKE : 0;
 8002402:	edd7 7a06 	vldr	s15, [r7, #24]
 8002406:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240e:	d506      	bpl.n	800241e <StartTaskControle+0x15e>
 8002410:	edd7 7a06 	vldr	s15, [r7, #24]
 8002414:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002484 <StartTaskControle+0x1c4>
 8002418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800241c:	e001      	b.n	8002422 <StartTaskControle+0x162>
 800241e:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8002488 <StartTaskControle+0x1c8>
 8002422:	edc7 7a04 	vstr	s15, [r7, #16]
      fSteeringAngle = fJoyXAxis*MAX_STEERING_ANGLE;
 8002426:	edd7 7a07 	vldr	s15, [r7, #28]
 800242a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800242e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8002470 <StartTaskControle+0x1b0>
 8002432:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002436:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800243a:	edc7 7a03 	vstr	s15, [r7, #12]

      // Empacota xControlSignal
      
      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 800243e:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <StartTaskControle+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002446:	4618      	mov	r0, r3
 8002448:	f00b f992 	bl	800d770 <osMutexAcquire>
      // xControlSignal
      osMutexRelease(MutexControlSignalHandle);
 800244c:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <StartTaskControle+0x1bc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f00b f9d8 	bl	800d806 <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, 0x100);
 8002456:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <StartTaskControle+0x1b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800245e:	4618      	mov	r0, r3
 8002460:	f00b f816 	bl	800d490 <osThreadFlagsSet>

      // WAIT
      osDelay(20);
 8002464:	2014      	movs	r0, #20
 8002466:	f00b f8e2 	bl	800d62e <osDelay>
	uiFlags = osThreadFlagsWait(0x11, osFlagsWaitAny, 0);
 800246a:	e742      	b.n	80022f2 <StartTaskControle+0x32>
 800246c:	f3af 8000 	nop.w
 8002470:	7af71723 	.word	0x7af71723
 8002474:	3fe0c152 	.word	0x3fe0c152
 8002478:	24032a4c 	.word	0x24032a4c
 800247c:	24032a50 	.word	0x24032a50
 8002480:	24032a5c 	.word	0x24032a5c
 8002484:	42c80000 	.word	0x42c80000
 8002488:	00000000 	.word	0x00000000

0800248c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002490:	4b22      	ldr	r3, [pc, #136]	@ (800251c <MX_USART3_UART_Init+0x90>)
 8002492:	4a23      	ldr	r2, [pc, #140]	@ (8002520 <MX_USART3_UART_Init+0x94>)
 8002494:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002496:	4b21      	ldr	r3, [pc, #132]	@ (800251c <MX_USART3_UART_Init+0x90>)
 8002498:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800249c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b1f      	ldr	r3, [pc, #124]	@ (800251c <MX_USART3_UART_Init+0x90>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <MX_USART3_UART_Init+0x90>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <MX_USART3_UART_Init+0x90>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <MX_USART3_UART_Init+0x90>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b19      	ldr	r3, [pc, #100]	@ (800251c <MX_USART3_UART_Init+0x90>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <MX_USART3_UART_Init+0x90>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <MX_USART3_UART_Init+0x90>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024c8:	4b14      	ldr	r3, [pc, #80]	@ (800251c <MX_USART3_UART_Init+0x90>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ce:	4b13      	ldr	r3, [pc, #76]	@ (800251c <MX_USART3_UART_Init+0x90>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024d4:	4811      	ldr	r0, [pc, #68]	@ (800251c <MX_USART3_UART_Init+0x90>)
 80024d6:	f008 fdf3 	bl	800b0c0 <HAL_UART_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80024e0:	f7ff f946 	bl	8001770 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e4:	2100      	movs	r1, #0
 80024e6:	480d      	ldr	r0, [pc, #52]	@ (800251c <MX_USART3_UART_Init+0x90>)
 80024e8:	f00a fde8 	bl	800d0bc <HAL_UARTEx_SetTxFifoThreshold>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80024f2:	f7ff f93d 	bl	8001770 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024f6:	2100      	movs	r1, #0
 80024f8:	4808      	ldr	r0, [pc, #32]	@ (800251c <MX_USART3_UART_Init+0x90>)
 80024fa:	f00a fe1d 	bl	800d138 <HAL_UARTEx_SetRxFifoThreshold>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002504:	f7ff f934 	bl	8001770 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002508:	4804      	ldr	r0, [pc, #16]	@ (800251c <MX_USART3_UART_Init+0x90>)
 800250a:	f00a fd9e 	bl	800d04a <HAL_UARTEx_DisableFifoMode>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002514:	f7ff f92c 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	24032ac4 	.word	0x24032ac4
 8002520:	40004800 	.word	0x40004800

08002524 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0ba      	sub	sp, #232	@ 0xe8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	22c0      	movs	r2, #192	@ 0xc0
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f01e f9a5 	bl	8020894 <memset>
  if(uartHandle->Instance==USART3)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a5a      	ldr	r2, [pc, #360]	@ (80026b8 <HAL_UART_MspInit+0x194>)
 8002550:	4293      	cmp	r3, r2
 8002552:	f040 80ad 	bne.w	80026b0 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002556:	f04f 0202 	mov.w	r2, #2
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	4618      	mov	r0, r3
 800256e:	f005 fddb 	bl	8008128 <HAL_RCCEx_PeriphCLKConfig>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002578:	f7ff f8fa 	bl	8001770 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800257c:	4b4f      	ldr	r3, [pc, #316]	@ (80026bc <HAL_UART_MspInit+0x198>)
 800257e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002582:	4a4e      	ldr	r2, [pc, #312]	@ (80026bc <HAL_UART_MspInit+0x198>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002588:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800258c:	4b4b      	ldr	r3, [pc, #300]	@ (80026bc <HAL_UART_MspInit+0x198>)
 800258e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800259a:	4b48      	ldr	r3, [pc, #288]	@ (80026bc <HAL_UART_MspInit+0x198>)
 800259c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a0:	4a46      	ldr	r2, [pc, #280]	@ (80026bc <HAL_UART_MspInit+0x198>)
 80025a2:	f043 0308 	orr.w	r3, r3, #8
 80025a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025aa:	4b44      	ldr	r3, [pc, #272]	@ (80026bc <HAL_UART_MspInit+0x198>)
 80025ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80025b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025d2:	2307      	movs	r3, #7
 80025d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025dc:	4619      	mov	r1, r3
 80025de:	4838      	ldr	r0, [pc, #224]	@ (80026c0 <HAL_UART_MspInit+0x19c>)
 80025e0:	f004 fb5c 	bl	8006c9c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80025e4:	4b37      	ldr	r3, [pc, #220]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 80025e6:	4a38      	ldr	r2, [pc, #224]	@ (80026c8 <HAL_UART_MspInit+0x1a4>)
 80025e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80025ea:	4b36      	ldr	r3, [pc, #216]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 80025ec:	222d      	movs	r2, #45	@ 0x2d
 80025ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f0:	4b34      	ldr	r3, [pc, #208]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f6:	4b33      	ldr	r3, [pc, #204]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025fc:	4b31      	ldr	r3, [pc, #196]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 80025fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002602:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002604:	4b2f      	ldr	r3, [pc, #188]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 8002606:	2200      	movs	r2, #0
 8002608:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800260a:	4b2e      	ldr	r3, [pc, #184]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002610:	4b2c      	ldr	r3, [pc, #176]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 8002612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002616:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002618:	4b2a      	ldr	r3, [pc, #168]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 800261a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800261e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002620:	4b28      	ldr	r3, [pc, #160]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 8002622:	2200      	movs	r2, #0
 8002624:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002626:	4827      	ldr	r0, [pc, #156]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 8002628:	f001 fcf0 	bl	800400c <HAL_DMA_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002632:	f7ff f89d 	bl	8001770 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a22      	ldr	r2, [pc, #136]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 800263a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800263e:	4a21      	ldr	r2, [pc, #132]	@ (80026c4 <HAL_UART_MspInit+0x1a0>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8002644:	4b21      	ldr	r3, [pc, #132]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 8002646:	4a22      	ldr	r2, [pc, #136]	@ (80026d0 <HAL_UART_MspInit+0x1ac>)
 8002648:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800264a:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 800264c:	222e      	movs	r2, #46	@ 0x2e
 800264e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002650:	4b1e      	ldr	r3, [pc, #120]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 8002652:	2240      	movs	r2, #64	@ 0x40
 8002654:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002656:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 8002658:	2200      	movs	r2, #0
 800265a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800265c:	4b1b      	ldr	r3, [pc, #108]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 800265e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002662:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002664:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 8002666:	2200      	movs	r2, #0
 8002668:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800266a:	4b18      	ldr	r3, [pc, #96]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002670:	4b16      	ldr	r3, [pc, #88]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 8002678:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800267c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800267e:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 8002680:	2200      	movs	r2, #0
 8002682:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002684:	4811      	ldr	r0, [pc, #68]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 8002686:	f001 fcc1 	bl	800400c <HAL_DMA_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8002690:	f7ff f86e 	bl	8001770 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a0d      	ldr	r2, [pc, #52]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 8002698:	67da      	str	r2, [r3, #124]	@ 0x7c
 800269a:	4a0c      	ldr	r2, [pc, #48]	@ (80026cc <HAL_UART_MspInit+0x1a8>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2108      	movs	r1, #8
 80026a4:	2027      	movs	r0, #39	@ 0x27
 80026a6:	f001 fc89 	bl	8003fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026aa:	2027      	movs	r0, #39	@ 0x27
 80026ac:	f001 fca0 	bl	8003ff0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026b0:	bf00      	nop
 80026b2:	37e8      	adds	r7, #232	@ 0xe8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40004800 	.word	0x40004800
 80026bc:	58024400 	.word	0x58024400
 80026c0:	58020c00 	.word	0x58020c00
 80026c4:	24032b58 	.word	0x24032b58
 80026c8:	40020010 	.word	0x40020010
 80026cc:	24032bd0 	.word	0x24032bd0
 80026d0:	40020028 	.word	0x40020028

080026d4 <fGetJoyPostition>:
  *         uiRefMax: Analog value for axis maximum limit.
  *         uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
	return (uiValue - uiRef0 > 0) ? (uiValue - uiRef0)/((float)(uiRefMax - uiRef0)) : (uiValue - uiRef0)/((float)(uiRef0 - uiRefMin));
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d010      	beq.n	800270c <fGetJoyPostition+0x38>
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	ee07 3a90 	vmov	s15, r3
 8002702:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800270a:	e00f      	b.n	800272c <fGetJoyPostition+0x58>
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	ee07 3a90 	vmov	s15, r3
 8002724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002728:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 800272c:	eeb0 0a67 	vmov.f32	s0, s15
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800273c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002774 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002740:	f7ff fd36 	bl	80021b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002744:	480c      	ldr	r0, [pc, #48]	@ (8002778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002746:	490d      	ldr	r1, [pc, #52]	@ (800277c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002748:	4a0d      	ldr	r2, [pc, #52]	@ (8002780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800274a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800274c:	e002      	b.n	8002754 <LoopCopyDataInit>

0800274e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800274e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002752:	3304      	adds	r3, #4

08002754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002758:	d3f9      	bcc.n	800274e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800275a:	4a0a      	ldr	r2, [pc, #40]	@ (8002784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800275c:	4c0a      	ldr	r4, [pc, #40]	@ (8002788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002760:	e001      	b.n	8002766 <LoopFillZerobss>

08002762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002764:	3204      	adds	r2, #4

08002766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002768:	d3fb      	bcc.n	8002762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800276a:	f01e f983 	bl	8020a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800276e:	f7fe ff1d 	bl	80015ac <main>
  bx  lr
 8002772:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002774:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002778:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800277c:	240013f0 	.word	0x240013f0
  ldr r2, =_sidata
 8002780:	080240c4 	.word	0x080240c4
  ldr r2, =_sbss
 8002784:	240013f0 	.word	0x240013f0
  ldr r4, =_ebss
 8002788:	240695e0 	.word	0x240695e0

0800278c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800278c:	e7fe      	b.n	800278c <ADC3_IRQHandler>
	...

08002790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002796:	2003      	movs	r0, #3
 8002798:	f001 fc05 	bl	8003fa6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800279c:	f005 faac 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <HAL_Init+0x68>)
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	4913      	ldr	r1, [pc, #76]	@ (80027fc <HAL_Init+0x6c>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ba:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <HAL_Init+0x68>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	4a0e      	ldr	r2, [pc, #56]	@ (80027fc <HAL_Init+0x6c>)
 80027c4:	5cd3      	ldrb	r3, [r2, r3]
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
 80027d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002800 <HAL_Init+0x70>)
 80027d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002804 <HAL_Init+0x74>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027da:	200f      	movs	r0, #15
 80027dc:	f7ff fb6a 	bl	8001eb4 <HAL_InitTick>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e002      	b.n	80027f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027ea:	f7ff fb45 	bl	8001e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	58024400 	.word	0x58024400
 80027fc:	08021a64 	.word	0x08021a64
 8002800:	24000008 	.word	0x24000008
 8002804:	24000004 	.word	0x24000004

08002808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_IncTick+0x20>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	4b06      	ldr	r3, [pc, #24]	@ (800282c <HAL_IncTick+0x24>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4413      	add	r3, r2
 8002818:	4a04      	ldr	r2, [pc, #16]	@ (800282c <HAL_IncTick+0x24>)
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	24000010 	.word	0x24000010
 800282c:	24032c48 	.word	0x24032c48

08002830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return uwTick;
 8002834:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <HAL_GetTick+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	24032c48 	.word	0x24032c48

08002848 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <HAL_GetREVID+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	0c1b      	lsrs	r3, r3, #16
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	5c001000 	.word	0x5c001000

08002860 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	609a      	str	r2, [r3, #8]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3360      	adds	r3, #96	@ 0x60
 80028da:	461a      	mov	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	611a      	str	r2, [r3, #16]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3360      	adds	r3, #96	@ 0x60
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	431a      	orrs	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	601a      	str	r2, [r3, #0]
  }
}
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002996:	b480      	push	{r7}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3330      	adds	r3, #48	@ 0x30
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	4413      	add	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	211f      	movs	r1, #31
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	401a      	ands	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	f003 011f 	and.w	r1, r3, #31
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	431a      	orrs	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f023 0203 	bic.w	r2, r3, #3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3314      	adds	r3, #20
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	0e5b      	lsrs	r3, r3, #25
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	4413      	add	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	0d1b      	lsrs	r3, r3, #20
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2107      	movs	r1, #7
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	401a      	ands	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	0d1b      	lsrs	r3, r3, #20
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a84:	43db      	mvns	r3, r3
 8002a86:	401a      	ands	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0318 	and.w	r3, r3, #24
 8002a8e:	4908      	ldr	r1, [pc, #32]	@ (8002ab0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a90:	40d9      	lsrs	r1, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	400b      	ands	r3, r1
 8002a96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	000fffff 	.word	0x000fffff

08002ab4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6093      	str	r3, [r2, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	5fffffc0 	.word	0x5fffffc0

08002af4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b08:	d101      	bne.n	8002b0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	4b05      	ldr	r3, [pc, #20]	@ (8002b40 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	6fffffc0 	.word	0x6fffffc0

08002b44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b58:	d101      	bne.n	8002b5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <LL_ADC_Enable+0x24>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	7fffffc0 	.word	0x7fffffc0

08002b94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <LL_ADC_IsEnabled+0x18>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <LL_ADC_IsEnabled+0x1a>
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <LL_ADC_REG_StartConversion+0x24>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	7fffffc0 	.word	0x7fffffc0

08002be4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d101      	bne.n	8002bfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d101      	bne.n	8002c22 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b089      	sub	sp, #36	@ 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e18f      	b.n	8002f6a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fd fdfb 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff3f 	bl	8002af4 <LL_ADC_IsDeepPowerDownEnabled>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d004      	beq.n	8002c86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff25 	bl	8002ad0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ff5a 	bl	8002b44 <LL_ADC_IsInternalRegulatorEnabled>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d114      	bne.n	8002cc0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff3e 	bl	8002b1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca0:	4b87      	ldr	r3, [pc, #540]	@ (8002ec0 <HAL_ADC_Init+0x290>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	4a87      	ldr	r2, [pc, #540]	@ (8002ec4 <HAL_ADC_Init+0x294>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	3301      	adds	r3, #1
 8002cb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cb2:	e002      	b.n	8002cba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f9      	bne.n	8002cb4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff3d 	bl	8002b44 <LL_ADC_IsInternalRegulatorEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10d      	bne.n	8002cec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f043 0210 	orr.w	r2, r3, #16
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff77 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8002cf6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f040 8129 	bne.w	8002f58 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f040 8125 	bne.w	8002f58 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d12:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d16:	f043 0202 	orr.w	r2, r3, #2
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff36 	bl	8002b94 <LL_ADC_IsEnabled>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d136      	bne.n	8002d9c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a65      	ldr	r2, [pc, #404]	@ (8002ec8 <HAL_ADC_Init+0x298>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_ADC_Init+0x112>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a63      	ldr	r2, [pc, #396]	@ (8002ecc <HAL_ADC_Init+0x29c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d10e      	bne.n	8002d60 <HAL_ADC_Init+0x130>
 8002d42:	4861      	ldr	r0, [pc, #388]	@ (8002ec8 <HAL_ADC_Init+0x298>)
 8002d44:	f7ff ff26 	bl	8002b94 <LL_ADC_IsEnabled>
 8002d48:	4604      	mov	r4, r0
 8002d4a:	4860      	ldr	r0, [pc, #384]	@ (8002ecc <HAL_ADC_Init+0x29c>)
 8002d4c:	f7ff ff22 	bl	8002b94 <LL_ADC_IsEnabled>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4323      	orrs	r3, r4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e008      	b.n	8002d72 <HAL_ADC_Init+0x142>
 8002d60:	485b      	ldr	r0, [pc, #364]	@ (8002ed0 <HAL_ADC_Init+0x2a0>)
 8002d62:	f7ff ff17 	bl	8002b94 <LL_ADC_IsEnabled>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d012      	beq.n	8002d9c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a53      	ldr	r2, [pc, #332]	@ (8002ec8 <HAL_ADC_Init+0x298>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d004      	beq.n	8002d8a <HAL_ADC_Init+0x15a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a51      	ldr	r2, [pc, #324]	@ (8002ecc <HAL_ADC_Init+0x29c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_Init+0x15e>
 8002d8a:	4a52      	ldr	r2, [pc, #328]	@ (8002ed4 <HAL_ADC_Init+0x2a4>)
 8002d8c:	e000      	b.n	8002d90 <HAL_ADC_Init+0x160>
 8002d8e:	4a52      	ldr	r2, [pc, #328]	@ (8002ed8 <HAL_ADC_Init+0x2a8>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4619      	mov	r1, r3
 8002d96:	4610      	mov	r0, r2
 8002d98:	f7ff fd62 	bl	8002860 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002d9c:	f7ff fd54 	bl	8002848 <HAL_GetREVID>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d914      	bls.n	8002dd4 <HAL_ADC_Init+0x1a4>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d110      	bne.n	8002dd4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	7d5b      	ldrb	r3, [r3, #21]
 8002db6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dbc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002dc2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7f1b      	ldrb	r3, [r3, #28]
 8002dc8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002dca:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dcc:	f043 030c 	orr.w	r3, r3, #12
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	e00d      	b.n	8002df0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7d5b      	ldrb	r3, [r3, #21]
 8002dd8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dde:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002de4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	7f1b      	ldrb	r3, [r3, #28]
 8002dea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7f1b      	ldrb	r3, [r3, #28]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d106      	bne.n	8002e06 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	045b      	lsls	r3, r3, #17
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d009      	beq.n	8002e22 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	4b2c      	ldr	r3, [pc, #176]	@ (8002edc <HAL_ADC_Init+0x2ac>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	69b9      	ldr	r1, [r7, #24]
 8002e32:	430b      	orrs	r3, r1
 8002e34:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fed2 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8002e40:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fedf 	bl	8002c0a <LL_ADC_INJ_IsConversionOngoing>
 8002e4c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d15f      	bne.n	8002f14 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d15c      	bne.n	8002f14 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	7d1b      	ldrb	r3, [r3, #20]
 8002e5e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee0 <HAL_ADC_Init+0x2b0>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d130      	bne.n	8002ee8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <HAL_ADC_Init+0x2b4>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e9a:	3a01      	subs	r2, #1
 8002e9c:	0411      	lsls	r1, r2, #16
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ea2:	4311      	orrs	r1, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ea8:	4311      	orrs	r1, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	611a      	str	r2, [r3, #16]
 8002ebc:	e01c      	b.n	8002ef8 <HAL_ADC_Init+0x2c8>
 8002ebe:	bf00      	nop
 8002ec0:	24000004 	.word	0x24000004
 8002ec4:	053e2d63 	.word	0x053e2d63
 8002ec8:	40022000 	.word	0x40022000
 8002ecc:	40022100 	.word	0x40022100
 8002ed0:	58026000 	.word	0x58026000
 8002ed4:	40022300 	.word	0x40022300
 8002ed8:	58026300 	.word	0x58026300
 8002edc:	fff0c003 	.word	0xfff0c003
 8002ee0:	ffffbffc 	.word	0xffffbffc
 8002ee4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fd8c 	bl	8003a2c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d10c      	bne.n	8002f36 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f023 010f 	bic.w	r1, r3, #15
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	1e5a      	subs	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f34:	e007      	b.n	8002f46 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 020f 	bic.w	r2, r2, #15
 8002f44:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4a:	f023 0303 	bic.w	r3, r3, #3
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f56:	e007      	b.n	8002f68 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5c:	f043 0210 	orr.w	r2, r3, #16
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f68:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3724      	adds	r7, #36	@ 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd90      	pop	{r4, r7, pc}
 8002f72:	bf00      	nop

08002f74 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a55      	ldr	r2, [pc, #340]	@ (80030dc <HAL_ADC_Start_DMA+0x168>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_ADC_Start_DMA+0x20>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a54      	ldr	r2, [pc, #336]	@ (80030e0 <HAL_ADC_Start_DMA+0x16c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_Start_DMA+0x24>
 8002f94:	4b53      	ldr	r3, [pc, #332]	@ (80030e4 <HAL_ADC_Start_DMA+0x170>)
 8002f96:	e000      	b.n	8002f9a <HAL_ADC_Start_DMA+0x26>
 8002f98:	4b53      	ldr	r3, [pc, #332]	@ (80030e8 <HAL_ADC_Start_DMA+0x174>)
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fd8a 	bl	8002ab4 <LL_ADC_GetMultimode>
 8002fa0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fe1c 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f040 808c 	bne.w	80030cc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_ADC_Start_DMA+0x4e>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e087      	b.n	80030d2 <HAL_ADC_Start_DMA+0x15e>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b05      	cmp	r3, #5
 8002fd4:	d002      	beq.n	8002fdc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b09      	cmp	r3, #9
 8002fda:	d170      	bne.n	80030be <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 fc07 	bl	80037f0 <ADC_Enable>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d163      	bne.n	80030b4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80030ec <HAL_ADC_Start_DMA+0x178>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a37      	ldr	r2, [pc, #220]	@ (80030e0 <HAL_ADC_Start_DMA+0x16c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d002      	beq.n	800300c <HAL_ADC_Start_DMA+0x98>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e000      	b.n	800300e <HAL_ADC_Start_DMA+0x9a>
 800300c:	4b33      	ldr	r3, [pc, #204]	@ (80030dc <HAL_ADC_Start_DMA+0x168>)
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	4293      	cmp	r3, r2
 8003014:	d002      	beq.n	800301c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d105      	bne.n	8003028 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003020:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d006      	beq.n	8003042 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003038:	f023 0206 	bic.w	r2, r3, #6
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003040:	e002      	b.n	8003048 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304c:	4a28      	ldr	r2, [pc, #160]	@ (80030f0 <HAL_ADC_Start_DMA+0x17c>)
 800304e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003054:	4a27      	ldr	r2, [pc, #156]	@ (80030f4 <HAL_ADC_Start_DMA+0x180>)
 8003056:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800305c:	4a26      	ldr	r2, [pc, #152]	@ (80030f8 <HAL_ADC_Start_DMA+0x184>)
 800305e:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	221c      	movs	r2, #28
 8003066:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0210 	orr.w	r2, r2, #16
 800307e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7ff fcaf 	bl	80029ee <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3340      	adds	r3, #64	@ 0x40
 800309a:	4619      	mov	r1, r3
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f001 fb10 	bl	80046c4 <HAL_DMA_Start_IT>
 80030a4:	4603      	mov	r3, r0
 80030a6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fd85 	bl	8002bbc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80030b2:	e00d      	b.n	80030d0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80030bc:	e008      	b.n	80030d0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80030ca:	e001      	b.n	80030d0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030cc:	2302      	movs	r3, #2
 80030ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40022000 	.word	0x40022000
 80030e0:	40022100 	.word	0x40022100
 80030e4:	40022300 	.word	0x40022300
 80030e8:	58026300 	.word	0x58026300
 80030ec:	fffff0fe 	.word	0xfffff0fe
 80030f0:	08003905 	.word	0x08003905
 80030f4:	080039dd 	.word	0x080039dd
 80030f8:	080039f9 	.word	0x080039f9

080030fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b0a1      	sub	sp, #132	@ 0x84
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a65      	ldr	r2, [pc, #404]	@ (80032e8 <HAL_ADC_ConfigChannel+0x1b0>)
 8003152:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x2a>
 800315e:	2302      	movs	r3, #2
 8003160:	e32e      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x688>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fd38 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 8313 	bne.w	80037a2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	db2c      	blt.n	80031de <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800318c:	2b00      	cmp	r3, #0
 800318e:	d108      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x6a>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2201      	movs	r2, #1
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	e016      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x98>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031b2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e003      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80031be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	2201      	movs	r2, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	69d1      	ldr	r1, [r2, #28]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	430b      	orrs	r3, r1
 80031dc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	f7ff fbd3 	bl	8002996 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fcf5 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 80031fa:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fd02 	bl	8002c0a <LL_ADC_INJ_IsConversionOngoing>
 8003206:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003208:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 80b8 	bne.w	8003380 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003210:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 80b4 	bne.w	8003380 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	461a      	mov	r2, r3
 8003226:	f7ff fbf5 	bl	8002a14 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800322a:	4b30      	ldr	r3, [pc, #192]	@ (80032ec <HAL_ADC_ConfigChannel+0x1b4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003232:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003236:	d10b      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x118>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	e01d      	b.n	800328c <HAL_ADC_ConfigChannel+0x154>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10b      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x13e>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	e00a      	b.n	800328c <HAL_ADC_ConfigChannel+0x154>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b04      	cmp	r3, #4
 8003294:	d02c      	beq.n	80032f0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6919      	ldr	r1, [r3, #16]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032a4:	f7ff fb10 	bl	80028c8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6919      	ldr	r1, [r3, #16]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	7e5b      	ldrb	r3, [r3, #25]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d102      	bne.n	80032be <HAL_ADC_ConfigChannel+0x186>
 80032b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80032bc:	e000      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x188>
 80032be:	2300      	movs	r3, #0
 80032c0:	461a      	mov	r2, r3
 80032c2:	f7ff fb3a 	bl	800293a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6919      	ldr	r1, [r3, #16]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	7e1b      	ldrb	r3, [r3, #24]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x1a4>
 80032d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80032da:	e000      	b.n	80032de <HAL_ADC_ConfigChannel+0x1a6>
 80032dc:	2300      	movs	r3, #0
 80032de:	461a      	mov	r2, r3
 80032e0:	f7ff fb12 	bl	8002908 <LL_ADC_SetDataRightShift>
 80032e4:	e04c      	b.n	8003380 <HAL_ADC_ConfigChannel+0x248>
 80032e6:	bf00      	nop
 80032e8:	47ff0000 	.word	0x47ff0000
 80032ec:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	069b      	lsls	r3, r3, #26
 8003300:	429a      	cmp	r2, r3
 8003302:	d107      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003312:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800331a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	069b      	lsls	r3, r3, #26
 8003324:	429a      	cmp	r2, r3
 8003326:	d107      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003336:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800333e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	069b      	lsls	r3, r3, #26
 8003348:	429a      	cmp	r2, r3
 800334a:	d107      	bne.n	800335c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800335a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003362:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	069b      	lsls	r3, r3, #26
 800336c:	429a      	cmp	r2, r3
 800336e:	d107      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800337e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fc05 	bl	8002b94 <LL_ADC_IsEnabled>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	f040 8211 	bne.w	80037b4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6819      	ldr	r1, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	461a      	mov	r2, r3
 80033a0:	f7ff fb64 	bl	8002a6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4aa1      	ldr	r2, [pc, #644]	@ (8003630 <HAL_ADC_ConfigChannel+0x4f8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	f040 812e 	bne.w	800360c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10b      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x2a0>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0e9b      	lsrs	r3, r3, #26
 80033c6:	3301      	adds	r3, #1
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	bf94      	ite	ls
 80033d0:	2301      	movls	r3, #1
 80033d2:	2300      	movhi	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e019      	b.n	800340c <HAL_ADC_ConfigChannel+0x2d4>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80033e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80033ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80033f0:	2320      	movs	r3, #32
 80033f2:	e003      	b.n	80033fc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80033f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	2b09      	cmp	r3, #9
 8003404:	bf94      	ite	ls
 8003406:	2301      	movls	r3, #1
 8003408:	2300      	movhi	r3, #0
 800340a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800340c:	2b00      	cmp	r3, #0
 800340e:	d079      	beq.n	8003504 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_ADC_ConfigChannel+0x2f4>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0e9b      	lsrs	r3, r3, #26
 8003422:	3301      	adds	r3, #1
 8003424:	069b      	lsls	r3, r3, #26
 8003426:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800342a:	e015      	b.n	8003458 <HAL_ADC_ConfigChannel+0x320>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800343a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800343c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800343e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003444:	2320      	movs	r3, #32
 8003446:	e003      	b.n	8003450 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	069b      	lsls	r3, r3, #26
 8003454:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x340>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	0e9b      	lsrs	r3, r3, #26
 800346a:	3301      	adds	r3, #1
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	2101      	movs	r1, #1
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	e017      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x370>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003488:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800348a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003490:	2320      	movs	r3, #32
 8003492:	e003      	b.n	800349c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	3301      	adds	r3, #1
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	ea42 0103 	orr.w	r1, r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x396>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0e9b      	lsrs	r3, r3, #26
 80034be:	3301      	adds	r3, #1
 80034c0:	f003 021f 	and.w	r2, r3, #31
 80034c4:	4613      	mov	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4413      	add	r3, r2
 80034ca:	051b      	lsls	r3, r3, #20
 80034cc:	e018      	b.n	8003500 <HAL_ADC_ConfigChannel+0x3c8>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80034e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80034e6:	2320      	movs	r3, #32
 80034e8:	e003      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80034ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	3301      	adds	r3, #1
 80034f4:	f003 021f 	and.w	r2, r3, #31
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003500:	430b      	orrs	r3, r1
 8003502:	e07e      	b.n	8003602 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x3e8>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0e9b      	lsrs	r3, r3, #26
 8003516:	3301      	adds	r3, #1
 8003518:	069b      	lsls	r3, r3, #26
 800351a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800351e:	e015      	b.n	800354c <HAL_ADC_ConfigChannel+0x414>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003538:	2320      	movs	r3, #32
 800353a:	e003      	b.n	8003544 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3301      	adds	r3, #1
 8003546:	069b      	lsls	r3, r3, #26
 8003548:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <HAL_ADC_ConfigChannel+0x434>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	3301      	adds	r3, #1
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	e017      	b.n	800359c <HAL_ADC_ConfigChannel+0x464>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	61bb      	str	r3, [r7, #24]
  return result;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003584:	2320      	movs	r3, #32
 8003586:	e003      	b.n	8003590 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3301      	adds	r3, #1
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	2101      	movs	r1, #1
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	ea42 0103 	orr.w	r1, r2, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10d      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x490>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	0e9b      	lsrs	r3, r3, #26
 80035b2:	3301      	adds	r3, #1
 80035b4:	f003 021f 	and.w	r2, r3, #31
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	3b1e      	subs	r3, #30
 80035c0:	051b      	lsls	r3, r3, #20
 80035c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035c6:	e01b      	b.n	8003600 <HAL_ADC_ConfigChannel+0x4c8>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	60fb      	str	r3, [r7, #12]
  return result;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80035e0:	2320      	movs	r3, #32
 80035e2:	e003      	b.n	80035ec <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3301      	adds	r3, #1
 80035ee:	f003 021f 	and.w	r2, r3, #31
 80035f2:	4613      	mov	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	3b1e      	subs	r3, #30
 80035fa:	051b      	lsls	r3, r3, #20
 80035fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003600:	430b      	orrs	r3, r1
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	6892      	ldr	r2, [r2, #8]
 8003606:	4619      	mov	r1, r3
 8003608:	f7ff fa04 	bl	8002a14 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f280 80cf 	bge.w	80037b4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a06      	ldr	r2, [pc, #24]	@ (8003634 <HAL_ADC_ConfigChannel+0x4fc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_ADC_ConfigChannel+0x4f2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a04      	ldr	r2, [pc, #16]	@ (8003638 <HAL_ADC_ConfigChannel+0x500>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d10a      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x508>
 800362a:	4b04      	ldr	r3, [pc, #16]	@ (800363c <HAL_ADC_ConfigChannel+0x504>)
 800362c:	e009      	b.n	8003642 <HAL_ADC_ConfigChannel+0x50a>
 800362e:	bf00      	nop
 8003630:	47ff0000 	.word	0x47ff0000
 8003634:	40022000 	.word	0x40022000
 8003638:	40022100 	.word	0x40022100
 800363c:	40022300 	.word	0x40022300
 8003640:	4b61      	ldr	r3, [pc, #388]	@ (80037c8 <HAL_ADC_ConfigChannel+0x690>)
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff f932 	bl	80028ac <LL_ADC_GetCommonPathInternalCh>
 8003648:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a5f      	ldr	r2, [pc, #380]	@ (80037cc <HAL_ADC_ConfigChannel+0x694>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_ADC_ConfigChannel+0x526>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a5d      	ldr	r2, [pc, #372]	@ (80037d0 <HAL_ADC_ConfigChannel+0x698>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10e      	bne.n	800367c <HAL_ADC_ConfigChannel+0x544>
 800365e:	485b      	ldr	r0, [pc, #364]	@ (80037cc <HAL_ADC_ConfigChannel+0x694>)
 8003660:	f7ff fa98 	bl	8002b94 <LL_ADC_IsEnabled>
 8003664:	4604      	mov	r4, r0
 8003666:	485a      	ldr	r0, [pc, #360]	@ (80037d0 <HAL_ADC_ConfigChannel+0x698>)
 8003668:	f7ff fa94 	bl	8002b94 <LL_ADC_IsEnabled>
 800366c:	4603      	mov	r3, r0
 800366e:	4323      	orrs	r3, r4
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e008      	b.n	800368e <HAL_ADC_ConfigChannel+0x556>
 800367c:	4855      	ldr	r0, [pc, #340]	@ (80037d4 <HAL_ADC_ConfigChannel+0x69c>)
 800367e:	f7ff fa89 	bl	8002b94 <LL_ADC_IsEnabled>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d07d      	beq.n	800378e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a50      	ldr	r2, [pc, #320]	@ (80037d8 <HAL_ADC_ConfigChannel+0x6a0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d130      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x5c6>
 800369c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800369e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d12b      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a4a      	ldr	r2, [pc, #296]	@ (80037d4 <HAL_ADC_ConfigChannel+0x69c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	f040 8081 	bne.w	80037b4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a45      	ldr	r2, [pc, #276]	@ (80037cc <HAL_ADC_ConfigChannel+0x694>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_ADC_ConfigChannel+0x58e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a43      	ldr	r2, [pc, #268]	@ (80037d0 <HAL_ADC_ConfigChannel+0x698>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x592>
 80036c6:	4a45      	ldr	r2, [pc, #276]	@ (80037dc <HAL_ADC_ConfigChannel+0x6a4>)
 80036c8:	e000      	b.n	80036cc <HAL_ADC_ConfigChannel+0x594>
 80036ca:	4a3f      	ldr	r2, [pc, #252]	@ (80037c8 <HAL_ADC_ConfigChannel+0x690>)
 80036cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f7ff f8d6 	bl	8002886 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036da:	4b41      	ldr	r3, [pc, #260]	@ (80037e0 <HAL_ADC_ConfigChannel+0x6a8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	4a40      	ldr	r2, [pc, #256]	@ (80037e4 <HAL_ADC_ConfigChannel+0x6ac>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	099b      	lsrs	r3, r3, #6
 80036e8:	3301      	adds	r3, #1
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80036ee:	e002      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f9      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036fc:	e05a      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a39      	ldr	r2, [pc, #228]	@ (80037e8 <HAL_ADC_ConfigChannel+0x6b0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d11e      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x60e>
 8003708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800370a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d119      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2f      	ldr	r2, [pc, #188]	@ (80037d4 <HAL_ADC_ConfigChannel+0x69c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d14b      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a2a      	ldr	r2, [pc, #168]	@ (80037cc <HAL_ADC_ConfigChannel+0x694>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_ADC_ConfigChannel+0x5f8>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a29      	ldr	r2, [pc, #164]	@ (80037d0 <HAL_ADC_ConfigChannel+0x698>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x5fc>
 8003730:	4a2a      	ldr	r2, [pc, #168]	@ (80037dc <HAL_ADC_ConfigChannel+0x6a4>)
 8003732:	e000      	b.n	8003736 <HAL_ADC_ConfigChannel+0x5fe>
 8003734:	4a24      	ldr	r2, [pc, #144]	@ (80037c8 <HAL_ADC_ConfigChannel+0x690>)
 8003736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003738:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f7ff f8a1 	bl	8002886 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003744:	e036      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a28      	ldr	r2, [pc, #160]	@ (80037ec <HAL_ADC_ConfigChannel+0x6b4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d131      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x67c>
 8003750:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d12c      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1d      	ldr	r2, [pc, #116]	@ (80037d4 <HAL_ADC_ConfigChannel+0x69c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d127      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a18      	ldr	r2, [pc, #96]	@ (80037cc <HAL_ADC_ConfigChannel+0x694>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_ADC_ConfigChannel+0x640>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a17      	ldr	r2, [pc, #92]	@ (80037d0 <HAL_ADC_ConfigChannel+0x698>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <HAL_ADC_ConfigChannel+0x644>
 8003778:	4a18      	ldr	r2, [pc, #96]	@ (80037dc <HAL_ADC_ConfigChannel+0x6a4>)
 800377a:	e000      	b.n	800377e <HAL_ADC_ConfigChannel+0x646>
 800377c:	4a12      	ldr	r2, [pc, #72]	@ (80037c8 <HAL_ADC_ConfigChannel+0x690>)
 800377e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003780:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f7ff f87d 	bl	8002886 <LL_ADC_SetCommonPathInternalCh>
 800378c:	e012      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003792:	f043 0220 	orr.w	r2, r3, #32
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80037a0:	e008      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a6:	f043 0220 	orr.w	r2, r3, #32
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80037bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3784      	adds	r7, #132	@ 0x84
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd90      	pop	{r4, r7, pc}
 80037c8:	58026300 	.word	0x58026300
 80037cc:	40022000 	.word	0x40022000
 80037d0:	40022100 	.word	0x40022100
 80037d4:	58026000 	.word	0x58026000
 80037d8:	cb840000 	.word	0xcb840000
 80037dc:	40022300 	.word	0x40022300
 80037e0:	24000004 	.word	0x24000004
 80037e4:	053e2d63 	.word	0x053e2d63
 80037e8:	c7520000 	.word	0xc7520000
 80037ec:	cfb80000 	.word	0xcfb80000

080037f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff f9c9 	bl	8002b94 <LL_ADC_IsEnabled>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d16e      	bne.n	80038e6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	4b38      	ldr	r3, [pc, #224]	@ (80038f0 <ADC_Enable+0x100>)
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	f043 0210 	orr.w	r2, r3, #16
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e05a      	b.n	80038e8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff f998 	bl	8002b6c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800383c:	f7fe fff8 	bl	8002830 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2b      	ldr	r2, [pc, #172]	@ (80038f4 <ADC_Enable+0x104>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <ADC_Enable+0x66>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a29      	ldr	r2, [pc, #164]	@ (80038f8 <ADC_Enable+0x108>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <ADC_Enable+0x6a>
 8003856:	4b29      	ldr	r3, [pc, #164]	@ (80038fc <ADC_Enable+0x10c>)
 8003858:	e000      	b.n	800385c <ADC_Enable+0x6c>
 800385a:	4b29      	ldr	r3, [pc, #164]	@ (8003900 <ADC_Enable+0x110>)
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff f929 	bl	8002ab4 <LL_ADC_GetMultimode>
 8003862:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a23      	ldr	r2, [pc, #140]	@ (80038f8 <ADC_Enable+0x108>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d002      	beq.n	8003874 <ADC_Enable+0x84>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	e000      	b.n	8003876 <ADC_Enable+0x86>
 8003874:	4b1f      	ldr	r3, [pc, #124]	@ (80038f4 <ADC_Enable+0x104>)
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	4293      	cmp	r3, r2
 800387c:	d02c      	beq.n	80038d8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d130      	bne.n	80038e6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003884:	e028      	b.n	80038d8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f982 	bl	8002b94 <LL_ADC_IsEnabled>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d104      	bne.n	80038a0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff f966 	bl	8002b6c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038a0:	f7fe ffc6 	bl	8002830 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d914      	bls.n	80038d8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d00d      	beq.n	80038d8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c0:	f043 0210 	orr.w	r2, r3, #16
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e007      	b.n	80038e8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d1cf      	bne.n	8003886 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	8000003f 	.word	0x8000003f
 80038f4:	40022000 	.word	0x40022000
 80038f8:	40022100 	.word	0x40022100
 80038fc:	40022300 	.word	0x40022300
 8003900:	58026300 	.word	0x58026300

08003904 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003916:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800391a:	2b00      	cmp	r3, #0
 800391c:	d14b      	bne.n	80039b6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003922:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d021      	beq.n	800397c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f817 	bl	8002970 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d032      	beq.n	80039ae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d12b      	bne.n	80039ae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003966:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d11f      	bne.n	80039ae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	655a      	str	r2, [r3, #84]	@ 0x54
 800397a:	e018      	b.n	80039ae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d111      	bne.n	80039ae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800399a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a6:	f043 0201 	orr.w	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f7ff fba4 	bl	80030fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039b4:	e00e      	b.n	80039d4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff fbae 	bl	8003124 <HAL_ADC_ErrorCallback>
}
 80039c8:	e004      	b.n	80039d4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
}
 80039d4:	bf00      	nop
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff fb90 	bl	8003110 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	f043 0204 	orr.w	r2, r3, #4
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f7ff fb80 	bl	8003124 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7a      	ldr	r2, [pc, #488]	@ (8003c24 <ADC_ConfigureBoostMode+0x1f8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <ADC_ConfigureBoostMode+0x1c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a79      	ldr	r2, [pc, #484]	@ (8003c28 <ADC_ConfigureBoostMode+0x1fc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d109      	bne.n	8003a5c <ADC_ConfigureBoostMode+0x30>
 8003a48:	4b78      	ldr	r3, [pc, #480]	@ (8003c2c <ADC_ConfigureBoostMode+0x200>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e008      	b.n	8003a6e <ADC_ConfigureBoostMode+0x42>
 8003a5c:	4b74      	ldr	r3, [pc, #464]	@ (8003c30 <ADC_ConfigureBoostMode+0x204>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf14      	ite	ne
 8003a68:	2301      	movne	r3, #1
 8003a6a:	2300      	moveq	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01c      	beq.n	8003aac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003a72:	f004 fabb 	bl	8007fec <HAL_RCC_GetHCLKFreq>
 8003a76:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a80:	d010      	beq.n	8003aa4 <ADC_ConfigureBoostMode+0x78>
 8003a82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a86:	d873      	bhi.n	8003b70 <ADC_ConfigureBoostMode+0x144>
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a8c:	d002      	beq.n	8003a94 <ADC_ConfigureBoostMode+0x68>
 8003a8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a92:	d16d      	bne.n	8003b70 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	60fb      	str	r3, [r7, #12]
        break;
 8003aa2:	e068      	b.n	8003b76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	60fb      	str	r3, [r7, #12]
        break;
 8003aaa:	e064      	b.n	8003b76 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003aac:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	f005 fd42 	bl	800953c <HAL_RCCEx_GetPeriphCLKFreq>
 8003ab8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003ac2:	d051      	beq.n	8003b68 <ADC_ConfigureBoostMode+0x13c>
 8003ac4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003ac8:	d854      	bhi.n	8003b74 <ADC_ConfigureBoostMode+0x148>
 8003aca:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003ace:	d047      	beq.n	8003b60 <ADC_ConfigureBoostMode+0x134>
 8003ad0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003ad4:	d84e      	bhi.n	8003b74 <ADC_ConfigureBoostMode+0x148>
 8003ad6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003ada:	d03d      	beq.n	8003b58 <ADC_ConfigureBoostMode+0x12c>
 8003adc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003ae0:	d848      	bhi.n	8003b74 <ADC_ConfigureBoostMode+0x148>
 8003ae2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ae6:	d033      	beq.n	8003b50 <ADC_ConfigureBoostMode+0x124>
 8003ae8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aec:	d842      	bhi.n	8003b74 <ADC_ConfigureBoostMode+0x148>
 8003aee:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003af2:	d029      	beq.n	8003b48 <ADC_ConfigureBoostMode+0x11c>
 8003af4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003af8:	d83c      	bhi.n	8003b74 <ADC_ConfigureBoostMode+0x148>
 8003afa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003afe:	d01a      	beq.n	8003b36 <ADC_ConfigureBoostMode+0x10a>
 8003b00:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b04:	d836      	bhi.n	8003b74 <ADC_ConfigureBoostMode+0x148>
 8003b06:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003b0a:	d014      	beq.n	8003b36 <ADC_ConfigureBoostMode+0x10a>
 8003b0c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003b10:	d830      	bhi.n	8003b74 <ADC_ConfigureBoostMode+0x148>
 8003b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b16:	d00e      	beq.n	8003b36 <ADC_ConfigureBoostMode+0x10a>
 8003b18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b1c:	d82a      	bhi.n	8003b74 <ADC_ConfigureBoostMode+0x148>
 8003b1e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b22:	d008      	beq.n	8003b36 <ADC_ConfigureBoostMode+0x10a>
 8003b24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b28:	d824      	bhi.n	8003b74 <ADC_ConfigureBoostMode+0x148>
 8003b2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b2e:	d002      	beq.n	8003b36 <ADC_ConfigureBoostMode+0x10a>
 8003b30:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b34:	d11e      	bne.n	8003b74 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	0c9b      	lsrs	r3, r3, #18
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	60fb      	str	r3, [r7, #12]
        break;
 8003b46:	e016      	b.n	8003b76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	60fb      	str	r3, [r7, #12]
        break;
 8003b4e:	e012      	b.n	8003b76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	60fb      	str	r3, [r7, #12]
        break;
 8003b56:	e00e      	b.n	8003b76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	099b      	lsrs	r3, r3, #6
 8003b5c:	60fb      	str	r3, [r7, #12]
        break;
 8003b5e:	e00a      	b.n	8003b76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	09db      	lsrs	r3, r3, #7
 8003b64:	60fb      	str	r3, [r7, #12]
        break;
 8003b66:	e006      	b.n	8003b76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	60fb      	str	r3, [r7, #12]
        break;
 8003b6e:	e002      	b.n	8003b76 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003b70:	bf00      	nop
 8003b72:	e000      	b.n	8003b76 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003b74:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003b76:	f7fe fe67 	bl	8002848 <HAL_GetREVID>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d815      	bhi.n	8003bb0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a2b      	ldr	r2, [pc, #172]	@ (8003c34 <ADC_ConfigureBoostMode+0x208>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d908      	bls.n	8003b9e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b9a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003b9c:	e03e      	b.n	8003c1c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bac:	609a      	str	r2, [r3, #8]
}
 8003bae:	e035      	b.n	8003c1c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c38 <ADC_ConfigureBoostMode+0x20c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d808      	bhi.n	8003bd0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003bcc:	609a      	str	r2, [r3, #8]
}
 8003bce:	e025      	b.n	8003c1c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c3c <ADC_ConfigureBoostMode+0x210>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d80a      	bhi.n	8003bee <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bea:	609a      	str	r2, [r3, #8]
}
 8003bec:	e016      	b.n	8003c1c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a13      	ldr	r2, [pc, #76]	@ (8003c40 <ADC_ConfigureBoostMode+0x214>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d80a      	bhi.n	8003c0c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c08:	609a      	str	r2, [r3, #8]
}
 8003c0a:	e007      	b.n	8003c1c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40022000 	.word	0x40022000
 8003c28:	40022100 	.word	0x40022100
 8003c2c:	40022300 	.word	0x40022300
 8003c30:	58026300 	.word	0x58026300
 8003c34:	01312d00 	.word	0x01312d00
 8003c38:	005f5e10 	.word	0x005f5e10
 8003c3c:	00bebc20 	.word	0x00bebc20
 8003c40:	017d7840 	.word	0x017d7840

08003c44 <LL_ADC_IsEnabled>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <LL_ADC_IsEnabled+0x18>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <LL_ADC_IsEnabled+0x1a>
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_ADC_REG_IsConversionOngoing>:
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d101      	bne.n	8003c82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b09f      	sub	sp, #124	@ 0x7c
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e0be      	b.n	8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d102      	bne.n	8003cce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cc8:	4b5b      	ldr	r3, [pc, #364]	@ (8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	e001      	b.n	8003cd2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10b      	bne.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cdc:	f043 0220 	orr.w	r2, r3, #32
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e09d      	b.n	8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff ffb9 	bl	8003c6a <LL_ADC_REG_IsConversionOngoing>
 8003cf8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff ffb3 	bl	8003c6a <LL_ADC_REG_IsConversionOngoing>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d17f      	bne.n	8003e0a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d17c      	bne.n	8003e0a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a47      	ldr	r2, [pc, #284]	@ (8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a46      	ldr	r2, [pc, #280]	@ (8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d101      	bne.n	8003d28 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003d24:	4b45      	ldr	r3, [pc, #276]	@ (8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d26:	e000      	b.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003d28:	4b45      	ldr	r3, [pc, #276]	@ (8003e40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d039      	beq.n	8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d44:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a3a      	ldr	r2, [pc, #232]	@ (8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a38      	ldr	r2, [pc, #224]	@ (8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10e      	bne.n	8003d78 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003d5a:	4836      	ldr	r0, [pc, #216]	@ (8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d5c:	f7ff ff72 	bl	8003c44 <LL_ADC_IsEnabled>
 8003d60:	4604      	mov	r4, r0
 8003d62:	4835      	ldr	r0, [pc, #212]	@ (8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d64:	f7ff ff6e 	bl	8003c44 <LL_ADC_IsEnabled>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4323      	orrs	r3, r4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	e008      	b.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003d78:	4832      	ldr	r0, [pc, #200]	@ (8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d7a:	f7ff ff63 	bl	8003c44 <LL_ADC_IsEnabled>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d047      	beq.n	8003e1e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	4b2d      	ldr	r3, [pc, #180]	@ (8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	6811      	ldr	r1, [r2, #0]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	6892      	ldr	r2, [r2, #8]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	431a      	orrs	r2, r3
 8003da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003da4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003da6:	e03a      	b.n	8003e1e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003db0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003db2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d10e      	bne.n	8003de6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003dc8:	481a      	ldr	r0, [pc, #104]	@ (8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dca:	f7ff ff3b 	bl	8003c44 <LL_ADC_IsEnabled>
 8003dce:	4604      	mov	r4, r0
 8003dd0:	4819      	ldr	r0, [pc, #100]	@ (8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dd2:	f7ff ff37 	bl	8003c44 <LL_ADC_IsEnabled>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4323      	orrs	r3, r4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bf0c      	ite	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	2300      	movne	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e008      	b.n	8003df8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003de6:	4817      	ldr	r0, [pc, #92]	@ (8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003de8:	f7ff ff2c 	bl	8003c44 <LL_ADC_IsEnabled>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bf0c      	ite	eq
 8003df2:	2301      	moveq	r3, #1
 8003df4:	2300      	movne	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d010      	beq.n	8003e1e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	4b11      	ldr	r3, [pc, #68]	@ (8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e06:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e08:	e009      	b.n	8003e1e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0e:	f043 0220 	orr.w	r2, r3, #32
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003e1c:	e000      	b.n	8003e20 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e1e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e28:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	377c      	adds	r7, #124	@ 0x7c
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd90      	pop	{r4, r7, pc}
 8003e34:	40022000 	.word	0x40022000
 8003e38:	40022100 	.word	0x40022100
 8003e3c:	40022300 	.word	0x40022300
 8003e40:	58026300 	.word	0x58026300
 8003e44:	58026000 	.word	0x58026000
 8003e48:	fffff0e0 	.word	0xfffff0e0

08003e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <__NVIC_SetPriorityGrouping+0x40>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e68:	4013      	ands	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e74:	4b06      	ldr	r3, [pc, #24]	@ (8003e90 <__NVIC_SetPriorityGrouping+0x44>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e7a:	4a04      	ldr	r2, [pc, #16]	@ (8003e8c <__NVIC_SetPriorityGrouping+0x40>)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	60d3      	str	r3, [r2, #12]
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000ed00 	.word	0xe000ed00
 8003e90:	05fa0000 	.word	0x05fa0000

08003e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e98:	4b04      	ldr	r3, [pc, #16]	@ (8003eac <__NVIC_GetPriorityGrouping+0x18>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	0a1b      	lsrs	r3, r3, #8
 8003e9e:	f003 0307 	and.w	r3, r3, #7
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	db0b      	blt.n	8003eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	f003 021f 	and.w	r2, r3, #31
 8003ec8:	4907      	ldr	r1, [pc, #28]	@ (8003ee8 <__NVIC_EnableIRQ+0x38>)
 8003eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	e000e100 	.word	0xe000e100

08003eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	6039      	str	r1, [r7, #0]
 8003ef6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	db0a      	blt.n	8003f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	490c      	ldr	r1, [pc, #48]	@ (8003f38 <__NVIC_SetPriority+0x4c>)
 8003f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f0a:	0112      	lsls	r2, r2, #4
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	440b      	add	r3, r1
 8003f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f14:	e00a      	b.n	8003f2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	4908      	ldr	r1, [pc, #32]	@ (8003f3c <__NVIC_SetPriority+0x50>)
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	3b04      	subs	r3, #4
 8003f24:	0112      	lsls	r2, r2, #4
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	440b      	add	r3, r1
 8003f2a:	761a      	strb	r2, [r3, #24]
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	e000e100 	.word	0xe000e100
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b089      	sub	sp, #36	@ 0x24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f1c3 0307 	rsb	r3, r3, #7
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	bf28      	it	cs
 8003f5e:	2304      	movcs	r3, #4
 8003f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3304      	adds	r3, #4
 8003f66:	2b06      	cmp	r3, #6
 8003f68:	d902      	bls.n	8003f70 <NVIC_EncodePriority+0x30>
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	3b03      	subs	r3, #3
 8003f6e:	e000      	b.n	8003f72 <NVIC_EncodePriority+0x32>
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	401a      	ands	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f92:	43d9      	mvns	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f98:	4313      	orrs	r3, r2
         );
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3724      	adds	r7, #36	@ 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff ff4c 	bl	8003e4c <__NVIC_SetPriorityGrouping>
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fca:	f7ff ff63 	bl	8003e94 <__NVIC_GetPriorityGrouping>
 8003fce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	68b9      	ldr	r1, [r7, #8]
 8003fd4:	6978      	ldr	r0, [r7, #20]
 8003fd6:	f7ff ffb3 	bl	8003f40 <NVIC_EncodePriority>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff ff82 	bl	8003eec <__NVIC_SetPriority>
}
 8003fe8:	bf00      	nop
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ff56 	bl	8003eb0 <__NVIC_EnableIRQ>
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004014:	f7fe fc0c 	bl	8002830 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e316      	b.n	8004652 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a66      	ldr	r2, [pc, #408]	@ (80041c4 <HAL_DMA_Init+0x1b8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d04a      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a65      	ldr	r2, [pc, #404]	@ (80041c8 <HAL_DMA_Init+0x1bc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d045      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a63      	ldr	r2, [pc, #396]	@ (80041cc <HAL_DMA_Init+0x1c0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d040      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a62      	ldr	r2, [pc, #392]	@ (80041d0 <HAL_DMA_Init+0x1c4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d03b      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a60      	ldr	r2, [pc, #384]	@ (80041d4 <HAL_DMA_Init+0x1c8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d036      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a5f      	ldr	r2, [pc, #380]	@ (80041d8 <HAL_DMA_Init+0x1cc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d031      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a5d      	ldr	r2, [pc, #372]	@ (80041dc <HAL_DMA_Init+0x1d0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d02c      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a5c      	ldr	r2, [pc, #368]	@ (80041e0 <HAL_DMA_Init+0x1d4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d027      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a5a      	ldr	r2, [pc, #360]	@ (80041e4 <HAL_DMA_Init+0x1d8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d022      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a59      	ldr	r2, [pc, #356]	@ (80041e8 <HAL_DMA_Init+0x1dc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d01d      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a57      	ldr	r2, [pc, #348]	@ (80041ec <HAL_DMA_Init+0x1e0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d018      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a56      	ldr	r2, [pc, #344]	@ (80041f0 <HAL_DMA_Init+0x1e4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d013      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a54      	ldr	r2, [pc, #336]	@ (80041f4 <HAL_DMA_Init+0x1e8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00e      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a53      	ldr	r2, [pc, #332]	@ (80041f8 <HAL_DMA_Init+0x1ec>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d009      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a51      	ldr	r2, [pc, #324]	@ (80041fc <HAL_DMA_Init+0x1f0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d004      	beq.n	80040c4 <HAL_DMA_Init+0xb8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a50      	ldr	r2, [pc, #320]	@ (8004200 <HAL_DMA_Init+0x1f4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d101      	bne.n	80040c8 <HAL_DMA_Init+0xbc>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_DMA_Init+0xbe>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 813b 	beq.w	8004346 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a37      	ldr	r2, [pc, #220]	@ (80041c4 <HAL_DMA_Init+0x1b8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d04a      	beq.n	8004180 <HAL_DMA_Init+0x174>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a36      	ldr	r2, [pc, #216]	@ (80041c8 <HAL_DMA_Init+0x1bc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d045      	beq.n	8004180 <HAL_DMA_Init+0x174>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a34      	ldr	r2, [pc, #208]	@ (80041cc <HAL_DMA_Init+0x1c0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d040      	beq.n	8004180 <HAL_DMA_Init+0x174>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a33      	ldr	r2, [pc, #204]	@ (80041d0 <HAL_DMA_Init+0x1c4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d03b      	beq.n	8004180 <HAL_DMA_Init+0x174>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a31      	ldr	r2, [pc, #196]	@ (80041d4 <HAL_DMA_Init+0x1c8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d036      	beq.n	8004180 <HAL_DMA_Init+0x174>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a30      	ldr	r2, [pc, #192]	@ (80041d8 <HAL_DMA_Init+0x1cc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d031      	beq.n	8004180 <HAL_DMA_Init+0x174>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2e      	ldr	r2, [pc, #184]	@ (80041dc <HAL_DMA_Init+0x1d0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d02c      	beq.n	8004180 <HAL_DMA_Init+0x174>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2d      	ldr	r2, [pc, #180]	@ (80041e0 <HAL_DMA_Init+0x1d4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d027      	beq.n	8004180 <HAL_DMA_Init+0x174>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2b      	ldr	r2, [pc, #172]	@ (80041e4 <HAL_DMA_Init+0x1d8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d022      	beq.n	8004180 <HAL_DMA_Init+0x174>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2a      	ldr	r2, [pc, #168]	@ (80041e8 <HAL_DMA_Init+0x1dc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d01d      	beq.n	8004180 <HAL_DMA_Init+0x174>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a28      	ldr	r2, [pc, #160]	@ (80041ec <HAL_DMA_Init+0x1e0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <HAL_DMA_Init+0x174>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a27      	ldr	r2, [pc, #156]	@ (80041f0 <HAL_DMA_Init+0x1e4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_DMA_Init+0x174>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a25      	ldr	r2, [pc, #148]	@ (80041f4 <HAL_DMA_Init+0x1e8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <HAL_DMA_Init+0x174>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a24      	ldr	r2, [pc, #144]	@ (80041f8 <HAL_DMA_Init+0x1ec>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <HAL_DMA_Init+0x174>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a22      	ldr	r2, [pc, #136]	@ (80041fc <HAL_DMA_Init+0x1f0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_DMA_Init+0x174>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a21      	ldr	r2, [pc, #132]	@ (8004200 <HAL_DMA_Init+0x1f4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d108      	bne.n	8004192 <HAL_DMA_Init+0x186>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e007      	b.n	80041a2 <HAL_DMA_Init+0x196>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041a2:	e02f      	b.n	8004204 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041a4:	f7fe fb44 	bl	8002830 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b05      	cmp	r3, #5
 80041b0:	d928      	bls.n	8004204 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2203      	movs	r2, #3
 80041bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e246      	b.n	8004652 <HAL_DMA_Init+0x646>
 80041c4:	40020010 	.word	0x40020010
 80041c8:	40020028 	.word	0x40020028
 80041cc:	40020040 	.word	0x40020040
 80041d0:	40020058 	.word	0x40020058
 80041d4:	40020070 	.word	0x40020070
 80041d8:	40020088 	.word	0x40020088
 80041dc:	400200a0 	.word	0x400200a0
 80041e0:	400200b8 	.word	0x400200b8
 80041e4:	40020410 	.word	0x40020410
 80041e8:	40020428 	.word	0x40020428
 80041ec:	40020440 	.word	0x40020440
 80041f0:	40020458 	.word	0x40020458
 80041f4:	40020470 	.word	0x40020470
 80041f8:	40020488 	.word	0x40020488
 80041fc:	400204a0 	.word	0x400204a0
 8004200:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1c8      	bne.n	80041a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4b83      	ldr	r3, [pc, #524]	@ (800442c <HAL_DMA_Init+0x420>)
 800421e:	4013      	ands	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800422a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004236:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004242:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	2b04      	cmp	r3, #4
 8004256:	d107      	bne.n	8004268 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004260:	4313      	orrs	r3, r2
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004268:	4b71      	ldr	r3, [pc, #452]	@ (8004430 <HAL_DMA_Init+0x424>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4b71      	ldr	r3, [pc, #452]	@ (8004434 <HAL_DMA_Init+0x428>)
 800426e:	4013      	ands	r3, r2
 8004270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004274:	d328      	bcc.n	80042c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b28      	cmp	r3, #40	@ 0x28
 800427c:	d903      	bls.n	8004286 <HAL_DMA_Init+0x27a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b2e      	cmp	r3, #46	@ 0x2e
 8004284:	d917      	bls.n	80042b6 <HAL_DMA_Init+0x2aa>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b3e      	cmp	r3, #62	@ 0x3e
 800428c:	d903      	bls.n	8004296 <HAL_DMA_Init+0x28a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b42      	cmp	r3, #66	@ 0x42
 8004294:	d90f      	bls.n	80042b6 <HAL_DMA_Init+0x2aa>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b46      	cmp	r3, #70	@ 0x46
 800429c:	d903      	bls.n	80042a6 <HAL_DMA_Init+0x29a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b48      	cmp	r3, #72	@ 0x48
 80042a4:	d907      	bls.n	80042b6 <HAL_DMA_Init+0x2aa>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80042ac:	d905      	bls.n	80042ba <HAL_DMA_Init+0x2ae>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b52      	cmp	r3, #82	@ 0x52
 80042b4:	d801      	bhi.n	80042ba <HAL_DMA_Init+0x2ae>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <HAL_DMA_Init+0x2b0>
 80042ba:	2300      	movs	r3, #0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f023 0307 	bic.w	r3, r3, #7
 80042de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d117      	bne.n	8004322 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00e      	beq.n	8004322 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f002 fb3f 	bl	8006988 <DMA_CheckFifoParam>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2240      	movs	r2, #64	@ 0x40
 8004314:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e197      	b.n	8004652 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f002 fa7a 	bl	8006824 <DMA_CalcBaseAndBitshift>
 8004330:	4603      	mov	r3, r0
 8004332:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	223f      	movs	r2, #63	@ 0x3f
 800433e:	409a      	lsls	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	e0cd      	b.n	80044e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a3b      	ldr	r2, [pc, #236]	@ (8004438 <HAL_DMA_Init+0x42c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d022      	beq.n	8004396 <HAL_DMA_Init+0x38a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a39      	ldr	r2, [pc, #228]	@ (800443c <HAL_DMA_Init+0x430>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d01d      	beq.n	8004396 <HAL_DMA_Init+0x38a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a38      	ldr	r2, [pc, #224]	@ (8004440 <HAL_DMA_Init+0x434>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d018      	beq.n	8004396 <HAL_DMA_Init+0x38a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a36      	ldr	r2, [pc, #216]	@ (8004444 <HAL_DMA_Init+0x438>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <HAL_DMA_Init+0x38a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a35      	ldr	r2, [pc, #212]	@ (8004448 <HAL_DMA_Init+0x43c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <HAL_DMA_Init+0x38a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a33      	ldr	r2, [pc, #204]	@ (800444c <HAL_DMA_Init+0x440>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d009      	beq.n	8004396 <HAL_DMA_Init+0x38a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a32      	ldr	r2, [pc, #200]	@ (8004450 <HAL_DMA_Init+0x444>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_DMA_Init+0x38a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a30      	ldr	r2, [pc, #192]	@ (8004454 <HAL_DMA_Init+0x448>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <HAL_DMA_Init+0x38e>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_DMA_Init+0x390>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8097 	beq.w	80044d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a24      	ldr	r2, [pc, #144]	@ (8004438 <HAL_DMA_Init+0x42c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d021      	beq.n	80043f0 <HAL_DMA_Init+0x3e4>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a22      	ldr	r2, [pc, #136]	@ (800443c <HAL_DMA_Init+0x430>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01c      	beq.n	80043f0 <HAL_DMA_Init+0x3e4>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a21      	ldr	r2, [pc, #132]	@ (8004440 <HAL_DMA_Init+0x434>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d017      	beq.n	80043f0 <HAL_DMA_Init+0x3e4>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004444 <HAL_DMA_Init+0x438>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d012      	beq.n	80043f0 <HAL_DMA_Init+0x3e4>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004448 <HAL_DMA_Init+0x43c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00d      	beq.n	80043f0 <HAL_DMA_Init+0x3e4>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1c      	ldr	r2, [pc, #112]	@ (800444c <HAL_DMA_Init+0x440>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d008      	beq.n	80043f0 <HAL_DMA_Init+0x3e4>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004450 <HAL_DMA_Init+0x444>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <HAL_DMA_Init+0x3e4>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a19      	ldr	r2, [pc, #100]	@ (8004454 <HAL_DMA_Init+0x448>)
 80043ee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4b13      	ldr	r3, [pc, #76]	@ (8004458 <HAL_DMA_Init+0x44c>)
 800440c:	4013      	ands	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b40      	cmp	r3, #64	@ 0x40
 8004416:	d021      	beq.n	800445c <HAL_DMA_Init+0x450>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b80      	cmp	r3, #128	@ 0x80
 800441e:	d102      	bne.n	8004426 <HAL_DMA_Init+0x41a>
 8004420:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004424:	e01b      	b.n	800445e <HAL_DMA_Init+0x452>
 8004426:	2300      	movs	r3, #0
 8004428:	e019      	b.n	800445e <HAL_DMA_Init+0x452>
 800442a:	bf00      	nop
 800442c:	fe10803f 	.word	0xfe10803f
 8004430:	5c001000 	.word	0x5c001000
 8004434:	ffff0000 	.word	0xffff0000
 8004438:	58025408 	.word	0x58025408
 800443c:	5802541c 	.word	0x5802541c
 8004440:	58025430 	.word	0x58025430
 8004444:	58025444 	.word	0x58025444
 8004448:	58025458 	.word	0x58025458
 800444c:	5802546c 	.word	0x5802546c
 8004450:	58025480 	.word	0x58025480
 8004454:	58025494 	.word	0x58025494
 8004458:	fffe000f 	.word	0xfffe000f
 800445c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68d2      	ldr	r2, [r2, #12]
 8004462:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004464:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800446c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004474:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800447c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004484:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800448c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	4b6e      	ldr	r3, [pc, #440]	@ (800465c <HAL_DMA_Init+0x650>)
 80044a4:	4413      	add	r3, r2
 80044a6:	4a6e      	ldr	r2, [pc, #440]	@ (8004660 <HAL_DMA_Init+0x654>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	009a      	lsls	r2, r3, #2
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f002 f9b5 	bl	8006824 <DMA_CalcBaseAndBitshift>
 80044ba:	4603      	mov	r3, r0
 80044bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	2201      	movs	r2, #1
 80044c8:	409a      	lsls	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	e008      	b.n	80044e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2240      	movs	r2, #64	@ 0x40
 80044d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2203      	movs	r2, #3
 80044da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0b7      	b.n	8004652 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a5f      	ldr	r2, [pc, #380]	@ (8004664 <HAL_DMA_Init+0x658>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d072      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004668 <HAL_DMA_Init+0x65c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d06d      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a5c      	ldr	r2, [pc, #368]	@ (800466c <HAL_DMA_Init+0x660>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d068      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a5a      	ldr	r2, [pc, #360]	@ (8004670 <HAL_DMA_Init+0x664>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d063      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a59      	ldr	r2, [pc, #356]	@ (8004674 <HAL_DMA_Init+0x668>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d05e      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a57      	ldr	r2, [pc, #348]	@ (8004678 <HAL_DMA_Init+0x66c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d059      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a56      	ldr	r2, [pc, #344]	@ (800467c <HAL_DMA_Init+0x670>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d054      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a54      	ldr	r2, [pc, #336]	@ (8004680 <HAL_DMA_Init+0x674>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d04f      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a53      	ldr	r2, [pc, #332]	@ (8004684 <HAL_DMA_Init+0x678>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d04a      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a51      	ldr	r2, [pc, #324]	@ (8004688 <HAL_DMA_Init+0x67c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d045      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a50      	ldr	r2, [pc, #320]	@ (800468c <HAL_DMA_Init+0x680>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d040      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a4e      	ldr	r2, [pc, #312]	@ (8004690 <HAL_DMA_Init+0x684>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d03b      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a4d      	ldr	r2, [pc, #308]	@ (8004694 <HAL_DMA_Init+0x688>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d036      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a4b      	ldr	r2, [pc, #300]	@ (8004698 <HAL_DMA_Init+0x68c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d031      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a4a      	ldr	r2, [pc, #296]	@ (800469c <HAL_DMA_Init+0x690>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d02c      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a48      	ldr	r2, [pc, #288]	@ (80046a0 <HAL_DMA_Init+0x694>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d027      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a47      	ldr	r2, [pc, #284]	@ (80046a4 <HAL_DMA_Init+0x698>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d022      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a45      	ldr	r2, [pc, #276]	@ (80046a8 <HAL_DMA_Init+0x69c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01d      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a44      	ldr	r2, [pc, #272]	@ (80046ac <HAL_DMA_Init+0x6a0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d018      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a42      	ldr	r2, [pc, #264]	@ (80046b0 <HAL_DMA_Init+0x6a4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d013      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a41      	ldr	r2, [pc, #260]	@ (80046b4 <HAL_DMA_Init+0x6a8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00e      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a3f      	ldr	r2, [pc, #252]	@ (80046b8 <HAL_DMA_Init+0x6ac>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d009      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a3e      	ldr	r2, [pc, #248]	@ (80046bc <HAL_DMA_Init+0x6b0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d004      	beq.n	80045d2 <HAL_DMA_Init+0x5c6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a3c      	ldr	r2, [pc, #240]	@ (80046c0 <HAL_DMA_Init+0x6b4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d101      	bne.n	80045d6 <HAL_DMA_Init+0x5ca>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <HAL_DMA_Init+0x5cc>
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d032      	beq.n	8004642 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f002 fa4f 	bl	8006a80 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b80      	cmp	r3, #128	@ 0x80
 80045e8:	d102      	bne.n	80045f0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004604:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d010      	beq.n	8004630 <HAL_DMA_Init+0x624>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b08      	cmp	r3, #8
 8004614:	d80c      	bhi.n	8004630 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f002 facc 	bl	8006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	e008      	b.n	8004642 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	a7fdabf8 	.word	0xa7fdabf8
 8004660:	cccccccd 	.word	0xcccccccd
 8004664:	40020010 	.word	0x40020010
 8004668:	40020028 	.word	0x40020028
 800466c:	40020040 	.word	0x40020040
 8004670:	40020058 	.word	0x40020058
 8004674:	40020070 	.word	0x40020070
 8004678:	40020088 	.word	0x40020088
 800467c:	400200a0 	.word	0x400200a0
 8004680:	400200b8 	.word	0x400200b8
 8004684:	40020410 	.word	0x40020410
 8004688:	40020428 	.word	0x40020428
 800468c:	40020440 	.word	0x40020440
 8004690:	40020458 	.word	0x40020458
 8004694:	40020470 	.word	0x40020470
 8004698:	40020488 	.word	0x40020488
 800469c:	400204a0 	.word	0x400204a0
 80046a0:	400204b8 	.word	0x400204b8
 80046a4:	58025408 	.word	0x58025408
 80046a8:	5802541c 	.word	0x5802541c
 80046ac:	58025430 	.word	0x58025430
 80046b0:	58025444 	.word	0x58025444
 80046b4:	58025458 	.word	0x58025458
 80046b8:	5802546c 	.word	0x5802546c
 80046bc:	58025480 	.word	0x58025480
 80046c0:	58025494 	.word	0x58025494

080046c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e226      	b.n	8004b2e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_DMA_Start_IT+0x2a>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e21f      	b.n	8004b2e <HAL_DMA_Start_IT+0x46a>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	f040 820a 	bne.w	8004b18 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a68      	ldr	r2, [pc, #416]	@ (80048b8 <HAL_DMA_Start_IT+0x1f4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d04a      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a66      	ldr	r2, [pc, #408]	@ (80048bc <HAL_DMA_Start_IT+0x1f8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d045      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a65      	ldr	r2, [pc, #404]	@ (80048c0 <HAL_DMA_Start_IT+0x1fc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d040      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a63      	ldr	r2, [pc, #396]	@ (80048c4 <HAL_DMA_Start_IT+0x200>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d03b      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a62      	ldr	r2, [pc, #392]	@ (80048c8 <HAL_DMA_Start_IT+0x204>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d036      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a60      	ldr	r2, [pc, #384]	@ (80048cc <HAL_DMA_Start_IT+0x208>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d031      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a5f      	ldr	r2, [pc, #380]	@ (80048d0 <HAL_DMA_Start_IT+0x20c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d02c      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a5d      	ldr	r2, [pc, #372]	@ (80048d4 <HAL_DMA_Start_IT+0x210>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d027      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a5c      	ldr	r2, [pc, #368]	@ (80048d8 <HAL_DMA_Start_IT+0x214>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d022      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a5a      	ldr	r2, [pc, #360]	@ (80048dc <HAL_DMA_Start_IT+0x218>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d01d      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a59      	ldr	r2, [pc, #356]	@ (80048e0 <HAL_DMA_Start_IT+0x21c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d018      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a57      	ldr	r2, [pc, #348]	@ (80048e4 <HAL_DMA_Start_IT+0x220>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d013      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a56      	ldr	r2, [pc, #344]	@ (80048e8 <HAL_DMA_Start_IT+0x224>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00e      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a54      	ldr	r2, [pc, #336]	@ (80048ec <HAL_DMA_Start_IT+0x228>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d009      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a53      	ldr	r2, [pc, #332]	@ (80048f0 <HAL_DMA_Start_IT+0x22c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d004      	beq.n	80047b2 <HAL_DMA_Start_IT+0xee>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a51      	ldr	r2, [pc, #324]	@ (80048f4 <HAL_DMA_Start_IT+0x230>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d108      	bne.n	80047c4 <HAL_DMA_Start_IT+0x100>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e007      	b.n	80047d4 <HAL_DMA_Start_IT+0x110>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f001 fe76 	bl	80064cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a34      	ldr	r2, [pc, #208]	@ (80048b8 <HAL_DMA_Start_IT+0x1f4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d04a      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a33      	ldr	r2, [pc, #204]	@ (80048bc <HAL_DMA_Start_IT+0x1f8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d045      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a31      	ldr	r2, [pc, #196]	@ (80048c0 <HAL_DMA_Start_IT+0x1fc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d040      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a30      	ldr	r2, [pc, #192]	@ (80048c4 <HAL_DMA_Start_IT+0x200>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d03b      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a2e      	ldr	r2, [pc, #184]	@ (80048c8 <HAL_DMA_Start_IT+0x204>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d036      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a2d      	ldr	r2, [pc, #180]	@ (80048cc <HAL_DMA_Start_IT+0x208>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d031      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2b      	ldr	r2, [pc, #172]	@ (80048d0 <HAL_DMA_Start_IT+0x20c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d02c      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2a      	ldr	r2, [pc, #168]	@ (80048d4 <HAL_DMA_Start_IT+0x210>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d027      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a28      	ldr	r2, [pc, #160]	@ (80048d8 <HAL_DMA_Start_IT+0x214>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d022      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a27      	ldr	r2, [pc, #156]	@ (80048dc <HAL_DMA_Start_IT+0x218>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d01d      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a25      	ldr	r2, [pc, #148]	@ (80048e0 <HAL_DMA_Start_IT+0x21c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d018      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a24      	ldr	r2, [pc, #144]	@ (80048e4 <HAL_DMA_Start_IT+0x220>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a22      	ldr	r2, [pc, #136]	@ (80048e8 <HAL_DMA_Start_IT+0x224>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a21      	ldr	r2, [pc, #132]	@ (80048ec <HAL_DMA_Start_IT+0x228>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d009      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1f      	ldr	r2, [pc, #124]	@ (80048f0 <HAL_DMA_Start_IT+0x22c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_DMA_Start_IT+0x1bc>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1e      	ldr	r2, [pc, #120]	@ (80048f4 <HAL_DMA_Start_IT+0x230>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <HAL_DMA_Start_IT+0x1c0>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_DMA_Start_IT+0x1c2>
 8004884:	2300      	movs	r3, #0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d036      	beq.n	80048f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f023 021e 	bic.w	r2, r3, #30
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0216 	orr.w	r2, r2, #22
 800489c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d03e      	beq.n	8004924 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0208 	orr.w	r2, r2, #8
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	e035      	b.n	8004924 <HAL_DMA_Start_IT+0x260>
 80048b8:	40020010 	.word	0x40020010
 80048bc:	40020028 	.word	0x40020028
 80048c0:	40020040 	.word	0x40020040
 80048c4:	40020058 	.word	0x40020058
 80048c8:	40020070 	.word	0x40020070
 80048cc:	40020088 	.word	0x40020088
 80048d0:	400200a0 	.word	0x400200a0
 80048d4:	400200b8 	.word	0x400200b8
 80048d8:	40020410 	.word	0x40020410
 80048dc:	40020428 	.word	0x40020428
 80048e0:	40020440 	.word	0x40020440
 80048e4:	40020458 	.word	0x40020458
 80048e8:	40020470 	.word	0x40020470
 80048ec:	40020488 	.word	0x40020488
 80048f0:	400204a0 	.word	0x400204a0
 80048f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 020e 	bic.w	r2, r3, #14
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 020a 	orr.w	r2, r2, #10
 800490a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0204 	orr.w	r2, r2, #4
 8004922:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a83      	ldr	r2, [pc, #524]	@ (8004b38 <HAL_DMA_Start_IT+0x474>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d072      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a82      	ldr	r2, [pc, #520]	@ (8004b3c <HAL_DMA_Start_IT+0x478>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d06d      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a80      	ldr	r2, [pc, #512]	@ (8004b40 <HAL_DMA_Start_IT+0x47c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d068      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a7f      	ldr	r2, [pc, #508]	@ (8004b44 <HAL_DMA_Start_IT+0x480>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d063      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a7d      	ldr	r2, [pc, #500]	@ (8004b48 <HAL_DMA_Start_IT+0x484>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d05e      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b4c <HAL_DMA_Start_IT+0x488>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d059      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a7a      	ldr	r2, [pc, #488]	@ (8004b50 <HAL_DMA_Start_IT+0x48c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d054      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a79      	ldr	r2, [pc, #484]	@ (8004b54 <HAL_DMA_Start_IT+0x490>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d04f      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a77      	ldr	r2, [pc, #476]	@ (8004b58 <HAL_DMA_Start_IT+0x494>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d04a      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a76      	ldr	r2, [pc, #472]	@ (8004b5c <HAL_DMA_Start_IT+0x498>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d045      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a74      	ldr	r2, [pc, #464]	@ (8004b60 <HAL_DMA_Start_IT+0x49c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d040      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a73      	ldr	r2, [pc, #460]	@ (8004b64 <HAL_DMA_Start_IT+0x4a0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d03b      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a71      	ldr	r2, [pc, #452]	@ (8004b68 <HAL_DMA_Start_IT+0x4a4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d036      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a70      	ldr	r2, [pc, #448]	@ (8004b6c <HAL_DMA_Start_IT+0x4a8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d031      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004b70 <HAL_DMA_Start_IT+0x4ac>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d02c      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a6d      	ldr	r2, [pc, #436]	@ (8004b74 <HAL_DMA_Start_IT+0x4b0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d027      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a6b      	ldr	r2, [pc, #428]	@ (8004b78 <HAL_DMA_Start_IT+0x4b4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d022      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a6a      	ldr	r2, [pc, #424]	@ (8004b7c <HAL_DMA_Start_IT+0x4b8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d01d      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a68      	ldr	r2, [pc, #416]	@ (8004b80 <HAL_DMA_Start_IT+0x4bc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d018      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a67      	ldr	r2, [pc, #412]	@ (8004b84 <HAL_DMA_Start_IT+0x4c0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d013      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a65      	ldr	r2, [pc, #404]	@ (8004b88 <HAL_DMA_Start_IT+0x4c4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a64      	ldr	r2, [pc, #400]	@ (8004b8c <HAL_DMA_Start_IT+0x4c8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a62      	ldr	r2, [pc, #392]	@ (8004b90 <HAL_DMA_Start_IT+0x4cc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_DMA_Start_IT+0x350>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a61      	ldr	r2, [pc, #388]	@ (8004b94 <HAL_DMA_Start_IT+0x4d0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d101      	bne.n	8004a18 <HAL_DMA_Start_IT+0x354>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <HAL_DMA_Start_IT+0x356>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01a      	beq.n	8004a54 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a3a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a52:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a37      	ldr	r2, [pc, #220]	@ (8004b38 <HAL_DMA_Start_IT+0x474>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d04a      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a36      	ldr	r2, [pc, #216]	@ (8004b3c <HAL_DMA_Start_IT+0x478>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d045      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a34      	ldr	r2, [pc, #208]	@ (8004b40 <HAL_DMA_Start_IT+0x47c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d040      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a33      	ldr	r2, [pc, #204]	@ (8004b44 <HAL_DMA_Start_IT+0x480>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d03b      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a31      	ldr	r2, [pc, #196]	@ (8004b48 <HAL_DMA_Start_IT+0x484>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d036      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a30      	ldr	r2, [pc, #192]	@ (8004b4c <HAL_DMA_Start_IT+0x488>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d031      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a2e      	ldr	r2, [pc, #184]	@ (8004b50 <HAL_DMA_Start_IT+0x48c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d02c      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8004b54 <HAL_DMA_Start_IT+0x490>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d027      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8004b58 <HAL_DMA_Start_IT+0x494>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d022      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b5c <HAL_DMA_Start_IT+0x498>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d01d      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a28      	ldr	r2, [pc, #160]	@ (8004b60 <HAL_DMA_Start_IT+0x49c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d018      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a27      	ldr	r2, [pc, #156]	@ (8004b64 <HAL_DMA_Start_IT+0x4a0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d013      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a25      	ldr	r2, [pc, #148]	@ (8004b68 <HAL_DMA_Start_IT+0x4a4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00e      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a24      	ldr	r2, [pc, #144]	@ (8004b6c <HAL_DMA_Start_IT+0x4a8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d009      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a22      	ldr	r2, [pc, #136]	@ (8004b70 <HAL_DMA_Start_IT+0x4ac>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_DMA_Start_IT+0x430>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a21      	ldr	r2, [pc, #132]	@ (8004b74 <HAL_DMA_Start_IT+0x4b0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d108      	bne.n	8004b06 <HAL_DMA_Start_IT+0x442>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e012      	b.n	8004b2c <HAL_DMA_Start_IT+0x468>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e009      	b.n	8004b2c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40020010 	.word	0x40020010
 8004b3c:	40020028 	.word	0x40020028
 8004b40:	40020040 	.word	0x40020040
 8004b44:	40020058 	.word	0x40020058
 8004b48:	40020070 	.word	0x40020070
 8004b4c:	40020088 	.word	0x40020088
 8004b50:	400200a0 	.word	0x400200a0
 8004b54:	400200b8 	.word	0x400200b8
 8004b58:	40020410 	.word	0x40020410
 8004b5c:	40020428 	.word	0x40020428
 8004b60:	40020440 	.word	0x40020440
 8004b64:	40020458 	.word	0x40020458
 8004b68:	40020470 	.word	0x40020470
 8004b6c:	40020488 	.word	0x40020488
 8004b70:	400204a0 	.word	0x400204a0
 8004b74:	400204b8 	.word	0x400204b8
 8004b78:	58025408 	.word	0x58025408
 8004b7c:	5802541c 	.word	0x5802541c
 8004b80:	58025430 	.word	0x58025430
 8004b84:	58025444 	.word	0x58025444
 8004b88:	58025458 	.word	0x58025458
 8004b8c:	5802546c 	.word	0x5802546c
 8004b90:	58025480 	.word	0x58025480
 8004b94:	58025494 	.word	0x58025494

08004b98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004ba0:	f7fd fe46 	bl	8002830 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e2dc      	b.n	800516a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d008      	beq.n	8004bce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2280      	movs	r2, #128	@ 0x80
 8004bc0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e2cd      	b.n	800516a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a76      	ldr	r2, [pc, #472]	@ (8004dac <HAL_DMA_Abort+0x214>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d04a      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a74      	ldr	r2, [pc, #464]	@ (8004db0 <HAL_DMA_Abort+0x218>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d045      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a73      	ldr	r2, [pc, #460]	@ (8004db4 <HAL_DMA_Abort+0x21c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d040      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a71      	ldr	r2, [pc, #452]	@ (8004db8 <HAL_DMA_Abort+0x220>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d03b      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a70      	ldr	r2, [pc, #448]	@ (8004dbc <HAL_DMA_Abort+0x224>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d036      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc0 <HAL_DMA_Abort+0x228>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d031      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6d      	ldr	r2, [pc, #436]	@ (8004dc4 <HAL_DMA_Abort+0x22c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d02c      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6b      	ldr	r2, [pc, #428]	@ (8004dc8 <HAL_DMA_Abort+0x230>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d027      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6a      	ldr	r2, [pc, #424]	@ (8004dcc <HAL_DMA_Abort+0x234>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d022      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a68      	ldr	r2, [pc, #416]	@ (8004dd0 <HAL_DMA_Abort+0x238>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01d      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a67      	ldr	r2, [pc, #412]	@ (8004dd4 <HAL_DMA_Abort+0x23c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d018      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a65      	ldr	r2, [pc, #404]	@ (8004dd8 <HAL_DMA_Abort+0x240>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a64      	ldr	r2, [pc, #400]	@ (8004ddc <HAL_DMA_Abort+0x244>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00e      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a62      	ldr	r2, [pc, #392]	@ (8004de0 <HAL_DMA_Abort+0x248>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a61      	ldr	r2, [pc, #388]	@ (8004de4 <HAL_DMA_Abort+0x24c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_DMA_Abort+0xd6>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a5f      	ldr	r2, [pc, #380]	@ (8004de8 <HAL_DMA_Abort+0x250>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <HAL_DMA_Abort+0xda>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <HAL_DMA_Abort+0xdc>
 8004c72:	2300      	movs	r3, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d013      	beq.n	8004ca0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 021e 	bic.w	r2, r2, #30
 8004c86:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c96:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	e00a      	b.n	8004cb6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 020e 	bic.w	r2, r2, #14
 8004cae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a3c      	ldr	r2, [pc, #240]	@ (8004dac <HAL_DMA_Abort+0x214>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d072      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a3a      	ldr	r2, [pc, #232]	@ (8004db0 <HAL_DMA_Abort+0x218>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d06d      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a39      	ldr	r2, [pc, #228]	@ (8004db4 <HAL_DMA_Abort+0x21c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d068      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a37      	ldr	r2, [pc, #220]	@ (8004db8 <HAL_DMA_Abort+0x220>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d063      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a36      	ldr	r2, [pc, #216]	@ (8004dbc <HAL_DMA_Abort+0x224>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d05e      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a34      	ldr	r2, [pc, #208]	@ (8004dc0 <HAL_DMA_Abort+0x228>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d059      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a33      	ldr	r2, [pc, #204]	@ (8004dc4 <HAL_DMA_Abort+0x22c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d054      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a31      	ldr	r2, [pc, #196]	@ (8004dc8 <HAL_DMA_Abort+0x230>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d04f      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a30      	ldr	r2, [pc, #192]	@ (8004dcc <HAL_DMA_Abort+0x234>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d04a      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a2e      	ldr	r2, [pc, #184]	@ (8004dd0 <HAL_DMA_Abort+0x238>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d045      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8004dd4 <HAL_DMA_Abort+0x23c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d040      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd8 <HAL_DMA_Abort+0x240>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d03b      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a2a      	ldr	r2, [pc, #168]	@ (8004ddc <HAL_DMA_Abort+0x244>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d036      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a28      	ldr	r2, [pc, #160]	@ (8004de0 <HAL_DMA_Abort+0x248>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d031      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a27      	ldr	r2, [pc, #156]	@ (8004de4 <HAL_DMA_Abort+0x24c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d02c      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a25      	ldr	r2, [pc, #148]	@ (8004de8 <HAL_DMA_Abort+0x250>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d027      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a24      	ldr	r2, [pc, #144]	@ (8004dec <HAL_DMA_Abort+0x254>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d022      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a22      	ldr	r2, [pc, #136]	@ (8004df0 <HAL_DMA_Abort+0x258>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d01d      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a21      	ldr	r2, [pc, #132]	@ (8004df4 <HAL_DMA_Abort+0x25c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d018      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1f      	ldr	r2, [pc, #124]	@ (8004df8 <HAL_DMA_Abort+0x260>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1e      	ldr	r2, [pc, #120]	@ (8004dfc <HAL_DMA_Abort+0x264>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00e      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004e00 <HAL_DMA_Abort+0x268>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1b      	ldr	r2, [pc, #108]	@ (8004e04 <HAL_DMA_Abort+0x26c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d004      	beq.n	8004da6 <HAL_DMA_Abort+0x20e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a19      	ldr	r2, [pc, #100]	@ (8004e08 <HAL_DMA_Abort+0x270>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d132      	bne.n	8004e0c <HAL_DMA_Abort+0x274>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e031      	b.n	8004e0e <HAL_DMA_Abort+0x276>
 8004daa:	bf00      	nop
 8004dac:	40020010 	.word	0x40020010
 8004db0:	40020028 	.word	0x40020028
 8004db4:	40020040 	.word	0x40020040
 8004db8:	40020058 	.word	0x40020058
 8004dbc:	40020070 	.word	0x40020070
 8004dc0:	40020088 	.word	0x40020088
 8004dc4:	400200a0 	.word	0x400200a0
 8004dc8:	400200b8 	.word	0x400200b8
 8004dcc:	40020410 	.word	0x40020410
 8004dd0:	40020428 	.word	0x40020428
 8004dd4:	40020440 	.word	0x40020440
 8004dd8:	40020458 	.word	0x40020458
 8004ddc:	40020470 	.word	0x40020470
 8004de0:	40020488 	.word	0x40020488
 8004de4:	400204a0 	.word	0x400204a0
 8004de8:	400204b8 	.word	0x400204b8
 8004dec:	58025408 	.word	0x58025408
 8004df0:	5802541c 	.word	0x5802541c
 8004df4:	58025430 	.word	0x58025430
 8004df8:	58025444 	.word	0x58025444
 8004dfc:	58025458 	.word	0x58025458
 8004e00:	5802546c 	.word	0x5802546c
 8004e04:	58025480 	.word	0x58025480
 8004e08:	58025494 	.word	0x58025494
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e20:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a6d      	ldr	r2, [pc, #436]	@ (8004fdc <HAL_DMA_Abort+0x444>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d04a      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a6b      	ldr	r2, [pc, #428]	@ (8004fe0 <HAL_DMA_Abort+0x448>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d045      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a6a      	ldr	r2, [pc, #424]	@ (8004fe4 <HAL_DMA_Abort+0x44c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d040      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a68      	ldr	r2, [pc, #416]	@ (8004fe8 <HAL_DMA_Abort+0x450>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d03b      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a67      	ldr	r2, [pc, #412]	@ (8004fec <HAL_DMA_Abort+0x454>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d036      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a65      	ldr	r2, [pc, #404]	@ (8004ff0 <HAL_DMA_Abort+0x458>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d031      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a64      	ldr	r2, [pc, #400]	@ (8004ff4 <HAL_DMA_Abort+0x45c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d02c      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a62      	ldr	r2, [pc, #392]	@ (8004ff8 <HAL_DMA_Abort+0x460>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d027      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a61      	ldr	r2, [pc, #388]	@ (8004ffc <HAL_DMA_Abort+0x464>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d022      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a5f      	ldr	r2, [pc, #380]	@ (8005000 <HAL_DMA_Abort+0x468>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01d      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a5e      	ldr	r2, [pc, #376]	@ (8005004 <HAL_DMA_Abort+0x46c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d018      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a5c      	ldr	r2, [pc, #368]	@ (8005008 <HAL_DMA_Abort+0x470>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800500c <HAL_DMA_Abort+0x474>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a59      	ldr	r2, [pc, #356]	@ (8005010 <HAL_DMA_Abort+0x478>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d009      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a58      	ldr	r2, [pc, #352]	@ (8005014 <HAL_DMA_Abort+0x47c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_DMA_Abort+0x32a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a56      	ldr	r2, [pc, #344]	@ (8005018 <HAL_DMA_Abort+0x480>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d108      	bne.n	8004ed4 <HAL_DMA_Abort+0x33c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e007      	b.n	8004ee4 <HAL_DMA_Abort+0x34c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0201 	bic.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ee4:	e013      	b.n	8004f0e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ee6:	f7fd fca3 	bl	8002830 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b05      	cmp	r3, #5
 8004ef2:	d90c      	bls.n	8004f0e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2203      	movs	r2, #3
 8004efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e12d      	b.n	800516a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e5      	bne.n	8004ee6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004fdc <HAL_DMA_Abort+0x444>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d04a      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe0 <HAL_DMA_Abort+0x448>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d045      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe4 <HAL_DMA_Abort+0x44c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d040      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe8 <HAL_DMA_Abort+0x450>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d03b      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a29      	ldr	r2, [pc, #164]	@ (8004fec <HAL_DMA_Abort+0x454>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d036      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a27      	ldr	r2, [pc, #156]	@ (8004ff0 <HAL_DMA_Abort+0x458>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d031      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a26      	ldr	r2, [pc, #152]	@ (8004ff4 <HAL_DMA_Abort+0x45c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d02c      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a24      	ldr	r2, [pc, #144]	@ (8004ff8 <HAL_DMA_Abort+0x460>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d027      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a23      	ldr	r2, [pc, #140]	@ (8004ffc <HAL_DMA_Abort+0x464>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d022      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a21      	ldr	r2, [pc, #132]	@ (8005000 <HAL_DMA_Abort+0x468>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01d      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a20      	ldr	r2, [pc, #128]	@ (8005004 <HAL_DMA_Abort+0x46c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d018      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8005008 <HAL_DMA_Abort+0x470>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a1d      	ldr	r2, [pc, #116]	@ (800500c <HAL_DMA_Abort+0x474>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8005010 <HAL_DMA_Abort+0x478>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1a      	ldr	r2, [pc, #104]	@ (8005014 <HAL_DMA_Abort+0x47c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_DMA_Abort+0x422>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a18      	ldr	r2, [pc, #96]	@ (8005018 <HAL_DMA_Abort+0x480>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d101      	bne.n	8004fbe <HAL_DMA_Abort+0x426>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <HAL_DMA_Abort+0x428>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d02b      	beq.n	800501c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	223f      	movs	r2, #63	@ 0x3f
 8004fd4:	409a      	lsls	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	609a      	str	r2, [r3, #8]
 8004fda:	e02a      	b.n	8005032 <HAL_DMA_Abort+0x49a>
 8004fdc:	40020010 	.word	0x40020010
 8004fe0:	40020028 	.word	0x40020028
 8004fe4:	40020040 	.word	0x40020040
 8004fe8:	40020058 	.word	0x40020058
 8004fec:	40020070 	.word	0x40020070
 8004ff0:	40020088 	.word	0x40020088
 8004ff4:	400200a0 	.word	0x400200a0
 8004ff8:	400200b8 	.word	0x400200b8
 8004ffc:	40020410 	.word	0x40020410
 8005000:	40020428 	.word	0x40020428
 8005004:	40020440 	.word	0x40020440
 8005008:	40020458 	.word	0x40020458
 800500c:	40020470 	.word	0x40020470
 8005010:	40020488 	.word	0x40020488
 8005014:	400204a0 	.word	0x400204a0
 8005018:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005020:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005026:	f003 031f 	and.w	r3, r3, #31
 800502a:	2201      	movs	r2, #1
 800502c:	409a      	lsls	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a4f      	ldr	r2, [pc, #316]	@ (8005174 <HAL_DMA_Abort+0x5dc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d072      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a4d      	ldr	r2, [pc, #308]	@ (8005178 <HAL_DMA_Abort+0x5e0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d06d      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a4c      	ldr	r2, [pc, #304]	@ (800517c <HAL_DMA_Abort+0x5e4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d068      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a4a      	ldr	r2, [pc, #296]	@ (8005180 <HAL_DMA_Abort+0x5e8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d063      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a49      	ldr	r2, [pc, #292]	@ (8005184 <HAL_DMA_Abort+0x5ec>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d05e      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a47      	ldr	r2, [pc, #284]	@ (8005188 <HAL_DMA_Abort+0x5f0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d059      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a46      	ldr	r2, [pc, #280]	@ (800518c <HAL_DMA_Abort+0x5f4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d054      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a44      	ldr	r2, [pc, #272]	@ (8005190 <HAL_DMA_Abort+0x5f8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d04f      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a43      	ldr	r2, [pc, #268]	@ (8005194 <HAL_DMA_Abort+0x5fc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d04a      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a41      	ldr	r2, [pc, #260]	@ (8005198 <HAL_DMA_Abort+0x600>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d045      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a40      	ldr	r2, [pc, #256]	@ (800519c <HAL_DMA_Abort+0x604>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d040      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a3e      	ldr	r2, [pc, #248]	@ (80051a0 <HAL_DMA_Abort+0x608>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d03b      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a3d      	ldr	r2, [pc, #244]	@ (80051a4 <HAL_DMA_Abort+0x60c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d036      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a3b      	ldr	r2, [pc, #236]	@ (80051a8 <HAL_DMA_Abort+0x610>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d031      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a3a      	ldr	r2, [pc, #232]	@ (80051ac <HAL_DMA_Abort+0x614>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d02c      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a38      	ldr	r2, [pc, #224]	@ (80051b0 <HAL_DMA_Abort+0x618>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d027      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a37      	ldr	r2, [pc, #220]	@ (80051b4 <HAL_DMA_Abort+0x61c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d022      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a35      	ldr	r2, [pc, #212]	@ (80051b8 <HAL_DMA_Abort+0x620>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d01d      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a34      	ldr	r2, [pc, #208]	@ (80051bc <HAL_DMA_Abort+0x624>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d018      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a32      	ldr	r2, [pc, #200]	@ (80051c0 <HAL_DMA_Abort+0x628>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a31      	ldr	r2, [pc, #196]	@ (80051c4 <HAL_DMA_Abort+0x62c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00e      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2f      	ldr	r2, [pc, #188]	@ (80051c8 <HAL_DMA_Abort+0x630>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d009      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2e      	ldr	r2, [pc, #184]	@ (80051cc <HAL_DMA_Abort+0x634>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d004      	beq.n	8005122 <HAL_DMA_Abort+0x58a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a2c      	ldr	r2, [pc, #176]	@ (80051d0 <HAL_DMA_Abort+0x638>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d101      	bne.n	8005126 <HAL_DMA_Abort+0x58e>
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <HAL_DMA_Abort+0x590>
 8005126:	2300      	movs	r3, #0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d015      	beq.n	8005158 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005134:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005148:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800514c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005156:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40020010 	.word	0x40020010
 8005178:	40020028 	.word	0x40020028
 800517c:	40020040 	.word	0x40020040
 8005180:	40020058 	.word	0x40020058
 8005184:	40020070 	.word	0x40020070
 8005188:	40020088 	.word	0x40020088
 800518c:	400200a0 	.word	0x400200a0
 8005190:	400200b8 	.word	0x400200b8
 8005194:	40020410 	.word	0x40020410
 8005198:	40020428 	.word	0x40020428
 800519c:	40020440 	.word	0x40020440
 80051a0:	40020458 	.word	0x40020458
 80051a4:	40020470 	.word	0x40020470
 80051a8:	40020488 	.word	0x40020488
 80051ac:	400204a0 	.word	0x400204a0
 80051b0:	400204b8 	.word	0x400204b8
 80051b4:	58025408 	.word	0x58025408
 80051b8:	5802541c 	.word	0x5802541c
 80051bc:	58025430 	.word	0x58025430
 80051c0:	58025444 	.word	0x58025444
 80051c4:	58025458 	.word	0x58025458
 80051c8:	5802546c 	.word	0x5802546c
 80051cc:	58025480 	.word	0x58025480
 80051d0:	58025494 	.word	0x58025494

080051d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e237      	b.n	8005656 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d004      	beq.n	80051fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2280      	movs	r2, #128	@ 0x80
 80051f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e22c      	b.n	8005656 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a5c      	ldr	r2, [pc, #368]	@ (8005374 <HAL_DMA_Abort_IT+0x1a0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d04a      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a5b      	ldr	r2, [pc, #364]	@ (8005378 <HAL_DMA_Abort_IT+0x1a4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d045      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a59      	ldr	r2, [pc, #356]	@ (800537c <HAL_DMA_Abort_IT+0x1a8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d040      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a58      	ldr	r2, [pc, #352]	@ (8005380 <HAL_DMA_Abort_IT+0x1ac>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d03b      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a56      	ldr	r2, [pc, #344]	@ (8005384 <HAL_DMA_Abort_IT+0x1b0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d036      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a55      	ldr	r2, [pc, #340]	@ (8005388 <HAL_DMA_Abort_IT+0x1b4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d031      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a53      	ldr	r2, [pc, #332]	@ (800538c <HAL_DMA_Abort_IT+0x1b8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d02c      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a52      	ldr	r2, [pc, #328]	@ (8005390 <HAL_DMA_Abort_IT+0x1bc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d027      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a50      	ldr	r2, [pc, #320]	@ (8005394 <HAL_DMA_Abort_IT+0x1c0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d022      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a4f      	ldr	r2, [pc, #316]	@ (8005398 <HAL_DMA_Abort_IT+0x1c4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d01d      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a4d      	ldr	r2, [pc, #308]	@ (800539c <HAL_DMA_Abort_IT+0x1c8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d018      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a4c      	ldr	r2, [pc, #304]	@ (80053a0 <HAL_DMA_Abort_IT+0x1cc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d013      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a4a      	ldr	r2, [pc, #296]	@ (80053a4 <HAL_DMA_Abort_IT+0x1d0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00e      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a49      	ldr	r2, [pc, #292]	@ (80053a8 <HAL_DMA_Abort_IT+0x1d4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d009      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a47      	ldr	r2, [pc, #284]	@ (80053ac <HAL_DMA_Abort_IT+0x1d8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <HAL_DMA_Abort_IT+0xc8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a46      	ldr	r2, [pc, #280]	@ (80053b0 <HAL_DMA_Abort_IT+0x1dc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d101      	bne.n	80052a0 <HAL_DMA_Abort_IT+0xcc>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <HAL_DMA_Abort_IT+0xce>
 80052a0:	2300      	movs	r3, #0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 8086 	beq.w	80053b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2204      	movs	r2, #4
 80052ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005374 <HAL_DMA_Abort_IT+0x1a0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d04a      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a2e      	ldr	r2, [pc, #184]	@ (8005378 <HAL_DMA_Abort_IT+0x1a4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d045      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a2c      	ldr	r2, [pc, #176]	@ (800537c <HAL_DMA_Abort_IT+0x1a8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d040      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005380 <HAL_DMA_Abort_IT+0x1ac>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d03b      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a29      	ldr	r2, [pc, #164]	@ (8005384 <HAL_DMA_Abort_IT+0x1b0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d036      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a28      	ldr	r2, [pc, #160]	@ (8005388 <HAL_DMA_Abort_IT+0x1b4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d031      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a26      	ldr	r2, [pc, #152]	@ (800538c <HAL_DMA_Abort_IT+0x1b8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d02c      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a25      	ldr	r2, [pc, #148]	@ (8005390 <HAL_DMA_Abort_IT+0x1bc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d027      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a23      	ldr	r2, [pc, #140]	@ (8005394 <HAL_DMA_Abort_IT+0x1c0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d022      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a22      	ldr	r2, [pc, #136]	@ (8005398 <HAL_DMA_Abort_IT+0x1c4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d01d      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a20      	ldr	r2, [pc, #128]	@ (800539c <HAL_DMA_Abort_IT+0x1c8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d018      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1f      	ldr	r2, [pc, #124]	@ (80053a0 <HAL_DMA_Abort_IT+0x1cc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d013      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1d      	ldr	r2, [pc, #116]	@ (80053a4 <HAL_DMA_Abort_IT+0x1d0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00e      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1c      	ldr	r2, [pc, #112]	@ (80053a8 <HAL_DMA_Abort_IT+0x1d4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d009      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1a      	ldr	r2, [pc, #104]	@ (80053ac <HAL_DMA_Abort_IT+0x1d8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_DMA_Abort_IT+0x17c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a19      	ldr	r2, [pc, #100]	@ (80053b0 <HAL_DMA_Abort_IT+0x1dc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d108      	bne.n	8005362 <HAL_DMA_Abort_IT+0x18e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	e178      	b.n	8005654 <HAL_DMA_Abort_IT+0x480>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e16f      	b.n	8005654 <HAL_DMA_Abort_IT+0x480>
 8005374:	40020010 	.word	0x40020010
 8005378:	40020028 	.word	0x40020028
 800537c:	40020040 	.word	0x40020040
 8005380:	40020058 	.word	0x40020058
 8005384:	40020070 	.word	0x40020070
 8005388:	40020088 	.word	0x40020088
 800538c:	400200a0 	.word	0x400200a0
 8005390:	400200b8 	.word	0x400200b8
 8005394:	40020410 	.word	0x40020410
 8005398:	40020428 	.word	0x40020428
 800539c:	40020440 	.word	0x40020440
 80053a0:	40020458 	.word	0x40020458
 80053a4:	40020470 	.word	0x40020470
 80053a8:	40020488 	.word	0x40020488
 80053ac:	400204a0 	.word	0x400204a0
 80053b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 020e 	bic.w	r2, r2, #14
 80053c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a6c      	ldr	r2, [pc, #432]	@ (800557c <HAL_DMA_Abort_IT+0x3a8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d04a      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a6b      	ldr	r2, [pc, #428]	@ (8005580 <HAL_DMA_Abort_IT+0x3ac>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d045      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a69      	ldr	r2, [pc, #420]	@ (8005584 <HAL_DMA_Abort_IT+0x3b0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d040      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a68      	ldr	r2, [pc, #416]	@ (8005588 <HAL_DMA_Abort_IT+0x3b4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d03b      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a66      	ldr	r2, [pc, #408]	@ (800558c <HAL_DMA_Abort_IT+0x3b8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d036      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a65      	ldr	r2, [pc, #404]	@ (8005590 <HAL_DMA_Abort_IT+0x3bc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d031      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a63      	ldr	r2, [pc, #396]	@ (8005594 <HAL_DMA_Abort_IT+0x3c0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d02c      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a62      	ldr	r2, [pc, #392]	@ (8005598 <HAL_DMA_Abort_IT+0x3c4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d027      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a60      	ldr	r2, [pc, #384]	@ (800559c <HAL_DMA_Abort_IT+0x3c8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d022      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a5f      	ldr	r2, [pc, #380]	@ (80055a0 <HAL_DMA_Abort_IT+0x3cc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d01d      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a5d      	ldr	r2, [pc, #372]	@ (80055a4 <HAL_DMA_Abort_IT+0x3d0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d018      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a5c      	ldr	r2, [pc, #368]	@ (80055a8 <HAL_DMA_Abort_IT+0x3d4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d013      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a5a      	ldr	r2, [pc, #360]	@ (80055ac <HAL_DMA_Abort_IT+0x3d8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00e      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a59      	ldr	r2, [pc, #356]	@ (80055b0 <HAL_DMA_Abort_IT+0x3dc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d009      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a57      	ldr	r2, [pc, #348]	@ (80055b4 <HAL_DMA_Abort_IT+0x3e0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d004      	beq.n	8005464 <HAL_DMA_Abort_IT+0x290>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a56      	ldr	r2, [pc, #344]	@ (80055b8 <HAL_DMA_Abort_IT+0x3e4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d108      	bne.n	8005476 <HAL_DMA_Abort_IT+0x2a2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	e007      	b.n	8005486 <HAL_DMA_Abort_IT+0x2b2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0201 	bic.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a3c      	ldr	r2, [pc, #240]	@ (800557c <HAL_DMA_Abort_IT+0x3a8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d072      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a3a      	ldr	r2, [pc, #232]	@ (8005580 <HAL_DMA_Abort_IT+0x3ac>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d06d      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a39      	ldr	r2, [pc, #228]	@ (8005584 <HAL_DMA_Abort_IT+0x3b0>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d068      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a37      	ldr	r2, [pc, #220]	@ (8005588 <HAL_DMA_Abort_IT+0x3b4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d063      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a36      	ldr	r2, [pc, #216]	@ (800558c <HAL_DMA_Abort_IT+0x3b8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d05e      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a34      	ldr	r2, [pc, #208]	@ (8005590 <HAL_DMA_Abort_IT+0x3bc>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d059      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a33      	ldr	r2, [pc, #204]	@ (8005594 <HAL_DMA_Abort_IT+0x3c0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d054      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a31      	ldr	r2, [pc, #196]	@ (8005598 <HAL_DMA_Abort_IT+0x3c4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d04f      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a30      	ldr	r2, [pc, #192]	@ (800559c <HAL_DMA_Abort_IT+0x3c8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d04a      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2e      	ldr	r2, [pc, #184]	@ (80055a0 <HAL_DMA_Abort_IT+0x3cc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d045      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a2d      	ldr	r2, [pc, #180]	@ (80055a4 <HAL_DMA_Abort_IT+0x3d0>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d040      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a2b      	ldr	r2, [pc, #172]	@ (80055a8 <HAL_DMA_Abort_IT+0x3d4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d03b      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a2a      	ldr	r2, [pc, #168]	@ (80055ac <HAL_DMA_Abort_IT+0x3d8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d036      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a28      	ldr	r2, [pc, #160]	@ (80055b0 <HAL_DMA_Abort_IT+0x3dc>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d031      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a27      	ldr	r2, [pc, #156]	@ (80055b4 <HAL_DMA_Abort_IT+0x3e0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d02c      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a25      	ldr	r2, [pc, #148]	@ (80055b8 <HAL_DMA_Abort_IT+0x3e4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d027      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a24      	ldr	r2, [pc, #144]	@ (80055bc <HAL_DMA_Abort_IT+0x3e8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d022      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a22      	ldr	r2, [pc, #136]	@ (80055c0 <HAL_DMA_Abort_IT+0x3ec>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01d      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a21      	ldr	r2, [pc, #132]	@ (80055c4 <HAL_DMA_Abort_IT+0x3f0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d018      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1f      	ldr	r2, [pc, #124]	@ (80055c8 <HAL_DMA_Abort_IT+0x3f4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1e      	ldr	r2, [pc, #120]	@ (80055cc <HAL_DMA_Abort_IT+0x3f8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00e      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1c      	ldr	r2, [pc, #112]	@ (80055d0 <HAL_DMA_Abort_IT+0x3fc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d009      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1b      	ldr	r2, [pc, #108]	@ (80055d4 <HAL_DMA_Abort_IT+0x400>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d004      	beq.n	8005576 <HAL_DMA_Abort_IT+0x3a2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a19      	ldr	r2, [pc, #100]	@ (80055d8 <HAL_DMA_Abort_IT+0x404>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d132      	bne.n	80055dc <HAL_DMA_Abort_IT+0x408>
 8005576:	2301      	movs	r3, #1
 8005578:	e031      	b.n	80055de <HAL_DMA_Abort_IT+0x40a>
 800557a:	bf00      	nop
 800557c:	40020010 	.word	0x40020010
 8005580:	40020028 	.word	0x40020028
 8005584:	40020040 	.word	0x40020040
 8005588:	40020058 	.word	0x40020058
 800558c:	40020070 	.word	0x40020070
 8005590:	40020088 	.word	0x40020088
 8005594:	400200a0 	.word	0x400200a0
 8005598:	400200b8 	.word	0x400200b8
 800559c:	40020410 	.word	0x40020410
 80055a0:	40020428 	.word	0x40020428
 80055a4:	40020440 	.word	0x40020440
 80055a8:	40020458 	.word	0x40020458
 80055ac:	40020470 	.word	0x40020470
 80055b0:	40020488 	.word	0x40020488
 80055b4:	400204a0 	.word	0x400204a0
 80055b8:	400204b8 	.word	0x400204b8
 80055bc:	58025408 	.word	0x58025408
 80055c0:	5802541c 	.word	0x5802541c
 80055c4:	58025430 	.word	0x58025430
 80055c8:	58025444 	.word	0x58025444
 80055cc:	58025458 	.word	0x58025458
 80055d0:	5802546c 	.word	0x5802546c
 80055d4:	58025480 	.word	0x58025480
 80055d8:	58025494 	.word	0x58025494
 80055dc:	2300      	movs	r3, #0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d028      	beq.n	8005634 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	2201      	movs	r2, #1
 8005602:	409a      	lsls	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005610:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005628:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005632:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop

08005660 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08a      	sub	sp, #40	@ 0x28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800566c:	4b67      	ldr	r3, [pc, #412]	@ (800580c <HAL_DMA_IRQHandler+0x1ac>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a67      	ldr	r2, [pc, #412]	@ (8005810 <HAL_DMA_IRQHandler+0x1b0>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	0a9b      	lsrs	r3, r3, #10
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005684:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a5f      	ldr	r2, [pc, #380]	@ (8005814 <HAL_DMA_IRQHandler+0x1b4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d04a      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a5d      	ldr	r2, [pc, #372]	@ (8005818 <HAL_DMA_IRQHandler+0x1b8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d045      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a5c      	ldr	r2, [pc, #368]	@ (800581c <HAL_DMA_IRQHandler+0x1bc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d040      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005820 <HAL_DMA_IRQHandler+0x1c0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d03b      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a59      	ldr	r2, [pc, #356]	@ (8005824 <HAL_DMA_IRQHandler+0x1c4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d036      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a57      	ldr	r2, [pc, #348]	@ (8005828 <HAL_DMA_IRQHandler+0x1c8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d031      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a56      	ldr	r2, [pc, #344]	@ (800582c <HAL_DMA_IRQHandler+0x1cc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d02c      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a54      	ldr	r2, [pc, #336]	@ (8005830 <HAL_DMA_IRQHandler+0x1d0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d027      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a53      	ldr	r2, [pc, #332]	@ (8005834 <HAL_DMA_IRQHandler+0x1d4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d022      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a51      	ldr	r2, [pc, #324]	@ (8005838 <HAL_DMA_IRQHandler+0x1d8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01d      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a50      	ldr	r2, [pc, #320]	@ (800583c <HAL_DMA_IRQHandler+0x1dc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d018      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a4e      	ldr	r2, [pc, #312]	@ (8005840 <HAL_DMA_IRQHandler+0x1e0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a4d      	ldr	r2, [pc, #308]	@ (8005844 <HAL_DMA_IRQHandler+0x1e4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a4b      	ldr	r2, [pc, #300]	@ (8005848 <HAL_DMA_IRQHandler+0x1e8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a4a      	ldr	r2, [pc, #296]	@ (800584c <HAL_DMA_IRQHandler+0x1ec>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_DMA_IRQHandler+0xd2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a48      	ldr	r2, [pc, #288]	@ (8005850 <HAL_DMA_IRQHandler+0x1f0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d101      	bne.n	8005736 <HAL_DMA_IRQHandler+0xd6>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <HAL_DMA_IRQHandler+0xd8>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 842b 	beq.w	8005f94 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	2208      	movs	r2, #8
 8005748:	409a      	lsls	r2, r3
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80a2 	beq.w	8005898 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a2e      	ldr	r2, [pc, #184]	@ (8005814 <HAL_DMA_IRQHandler+0x1b4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d04a      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a2d      	ldr	r2, [pc, #180]	@ (8005818 <HAL_DMA_IRQHandler+0x1b8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d045      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a2b      	ldr	r2, [pc, #172]	@ (800581c <HAL_DMA_IRQHandler+0x1bc>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d040      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2a      	ldr	r2, [pc, #168]	@ (8005820 <HAL_DMA_IRQHandler+0x1c0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d03b      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a28      	ldr	r2, [pc, #160]	@ (8005824 <HAL_DMA_IRQHandler+0x1c4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d036      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a27      	ldr	r2, [pc, #156]	@ (8005828 <HAL_DMA_IRQHandler+0x1c8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d031      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a25      	ldr	r2, [pc, #148]	@ (800582c <HAL_DMA_IRQHandler+0x1cc>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d02c      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a24      	ldr	r2, [pc, #144]	@ (8005830 <HAL_DMA_IRQHandler+0x1d0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d027      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a22      	ldr	r2, [pc, #136]	@ (8005834 <HAL_DMA_IRQHandler+0x1d4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d022      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a21      	ldr	r2, [pc, #132]	@ (8005838 <HAL_DMA_IRQHandler+0x1d8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d01d      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1f      	ldr	r2, [pc, #124]	@ (800583c <HAL_DMA_IRQHandler+0x1dc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d018      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005840 <HAL_DMA_IRQHandler+0x1e0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005844 <HAL_DMA_IRQHandler+0x1e4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00e      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1b      	ldr	r2, [pc, #108]	@ (8005848 <HAL_DMA_IRQHandler+0x1e8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d009      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a19      	ldr	r2, [pc, #100]	@ (800584c <HAL_DMA_IRQHandler+0x1ec>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x194>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a18      	ldr	r2, [pc, #96]	@ (8005850 <HAL_DMA_IRQHandler+0x1f0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d12f      	bne.n	8005854 <HAL_DMA_IRQHandler+0x1f4>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	bf14      	ite	ne
 8005802:	2301      	movne	r3, #1
 8005804:	2300      	moveq	r3, #0
 8005806:	b2db      	uxtb	r3, r3
 8005808:	e02e      	b.n	8005868 <HAL_DMA_IRQHandler+0x208>
 800580a:	bf00      	nop
 800580c:	24000004 	.word	0x24000004
 8005810:	1b4e81b5 	.word	0x1b4e81b5
 8005814:	40020010 	.word	0x40020010
 8005818:	40020028 	.word	0x40020028
 800581c:	40020040 	.word	0x40020040
 8005820:	40020058 	.word	0x40020058
 8005824:	40020070 	.word	0x40020070
 8005828:	40020088 	.word	0x40020088
 800582c:	400200a0 	.word	0x400200a0
 8005830:	400200b8 	.word	0x400200b8
 8005834:	40020410 	.word	0x40020410
 8005838:	40020428 	.word	0x40020428
 800583c:	40020440 	.word	0x40020440
 8005840:	40020458 	.word	0x40020458
 8005844:	40020470 	.word	0x40020470
 8005848:	40020488 	.word	0x40020488
 800584c:	400204a0 	.word	0x400204a0
 8005850:	400204b8 	.word	0x400204b8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	bf14      	ite	ne
 8005862:	2301      	movne	r3, #1
 8005864:	2300      	moveq	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d015      	beq.n	8005898 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0204 	bic.w	r2, r2, #4
 800587a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	2208      	movs	r2, #8
 8005886:	409a      	lsls	r2, r3
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005890:	f043 0201 	orr.w	r2, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800589c:	f003 031f 	and.w	r3, r3, #31
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	fa22 f303 	lsr.w	r3, r2, r3
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d06e      	beq.n	800598c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a69      	ldr	r2, [pc, #420]	@ (8005a58 <HAL_DMA_IRQHandler+0x3f8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d04a      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a67      	ldr	r2, [pc, #412]	@ (8005a5c <HAL_DMA_IRQHandler+0x3fc>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d045      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a66      	ldr	r2, [pc, #408]	@ (8005a60 <HAL_DMA_IRQHandler+0x400>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d040      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a64      	ldr	r2, [pc, #400]	@ (8005a64 <HAL_DMA_IRQHandler+0x404>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d03b      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a63      	ldr	r2, [pc, #396]	@ (8005a68 <HAL_DMA_IRQHandler+0x408>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d036      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a61      	ldr	r2, [pc, #388]	@ (8005a6c <HAL_DMA_IRQHandler+0x40c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d031      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a60      	ldr	r2, [pc, #384]	@ (8005a70 <HAL_DMA_IRQHandler+0x410>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d02c      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a5e      	ldr	r2, [pc, #376]	@ (8005a74 <HAL_DMA_IRQHandler+0x414>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d027      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a5d      	ldr	r2, [pc, #372]	@ (8005a78 <HAL_DMA_IRQHandler+0x418>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d022      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a5b      	ldr	r2, [pc, #364]	@ (8005a7c <HAL_DMA_IRQHandler+0x41c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d01d      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a5a      	ldr	r2, [pc, #360]	@ (8005a80 <HAL_DMA_IRQHandler+0x420>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d018      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a58      	ldr	r2, [pc, #352]	@ (8005a84 <HAL_DMA_IRQHandler+0x424>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d013      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a57      	ldr	r2, [pc, #348]	@ (8005a88 <HAL_DMA_IRQHandler+0x428>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00e      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a55      	ldr	r2, [pc, #340]	@ (8005a8c <HAL_DMA_IRQHandler+0x42c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d009      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a54      	ldr	r2, [pc, #336]	@ (8005a90 <HAL_DMA_IRQHandler+0x430>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d004      	beq.n	800594e <HAL_DMA_IRQHandler+0x2ee>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a52      	ldr	r2, [pc, #328]	@ (8005a94 <HAL_DMA_IRQHandler+0x434>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d10a      	bne.n	8005964 <HAL_DMA_IRQHandler+0x304>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005958:	2b00      	cmp	r3, #0
 800595a:	bf14      	ite	ne
 800595c:	2301      	movne	r3, #1
 800595e:	2300      	moveq	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	e003      	b.n	800596c <HAL_DMA_IRQHandler+0x30c>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2300      	movs	r3, #0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00d      	beq.n	800598c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	2201      	movs	r2, #1
 800597a:	409a      	lsls	r2, r3
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005984:	f043 0202 	orr.w	r2, r3, #2
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	2204      	movs	r2, #4
 8005996:	409a      	lsls	r2, r3
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 808f 	beq.w	8005ac0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005a58 <HAL_DMA_IRQHandler+0x3f8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d04a      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a2a      	ldr	r2, [pc, #168]	@ (8005a5c <HAL_DMA_IRQHandler+0x3fc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d045      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a29      	ldr	r2, [pc, #164]	@ (8005a60 <HAL_DMA_IRQHandler+0x400>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d040      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a27      	ldr	r2, [pc, #156]	@ (8005a64 <HAL_DMA_IRQHandler+0x404>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d03b      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a26      	ldr	r2, [pc, #152]	@ (8005a68 <HAL_DMA_IRQHandler+0x408>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d036      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a24      	ldr	r2, [pc, #144]	@ (8005a6c <HAL_DMA_IRQHandler+0x40c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d031      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a23      	ldr	r2, [pc, #140]	@ (8005a70 <HAL_DMA_IRQHandler+0x410>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d02c      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a21      	ldr	r2, [pc, #132]	@ (8005a74 <HAL_DMA_IRQHandler+0x414>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d027      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a20      	ldr	r2, [pc, #128]	@ (8005a78 <HAL_DMA_IRQHandler+0x418>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d022      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a1e      	ldr	r2, [pc, #120]	@ (8005a7c <HAL_DMA_IRQHandler+0x41c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01d      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a80 <HAL_DMA_IRQHandler+0x420>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d018      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1b      	ldr	r2, [pc, #108]	@ (8005a84 <HAL_DMA_IRQHandler+0x424>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a88 <HAL_DMA_IRQHandler+0x428>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00e      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a18      	ldr	r2, [pc, #96]	@ (8005a8c <HAL_DMA_IRQHandler+0x42c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d009      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a17      	ldr	r2, [pc, #92]	@ (8005a90 <HAL_DMA_IRQHandler+0x430>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d004      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x3e2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <HAL_DMA_IRQHandler+0x434>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d12a      	bne.n	8005a98 <HAL_DMA_IRQHandler+0x438>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	bf14      	ite	ne
 8005a50:	2301      	movne	r3, #1
 8005a52:	2300      	moveq	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	e023      	b.n	8005aa0 <HAL_DMA_IRQHandler+0x440>
 8005a58:	40020010 	.word	0x40020010
 8005a5c:	40020028 	.word	0x40020028
 8005a60:	40020040 	.word	0x40020040
 8005a64:	40020058 	.word	0x40020058
 8005a68:	40020070 	.word	0x40020070
 8005a6c:	40020088 	.word	0x40020088
 8005a70:	400200a0 	.word	0x400200a0
 8005a74:	400200b8 	.word	0x400200b8
 8005a78:	40020410 	.word	0x40020410
 8005a7c:	40020428 	.word	0x40020428
 8005a80:	40020440 	.word	0x40020440
 8005a84:	40020458 	.word	0x40020458
 8005a88:	40020470 	.word	0x40020470
 8005a8c:	40020488 	.word	0x40020488
 8005a90:	400204a0 	.word	0x400204a0
 8005a94:	400204b8 	.word	0x400204b8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00d      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	2204      	movs	r2, #4
 8005aae:	409a      	lsls	r2, r3
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab8:	f043 0204 	orr.w	r2, r3, #4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	2210      	movs	r2, #16
 8005aca:	409a      	lsls	r2, r3
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80a6 	beq.w	8005c22 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a85      	ldr	r2, [pc, #532]	@ (8005cf0 <HAL_DMA_IRQHandler+0x690>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d04a      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a83      	ldr	r2, [pc, #524]	@ (8005cf4 <HAL_DMA_IRQHandler+0x694>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d045      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a82      	ldr	r2, [pc, #520]	@ (8005cf8 <HAL_DMA_IRQHandler+0x698>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d040      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a80      	ldr	r2, [pc, #512]	@ (8005cfc <HAL_DMA_IRQHandler+0x69c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d03b      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a7f      	ldr	r2, [pc, #508]	@ (8005d00 <HAL_DMA_IRQHandler+0x6a0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d036      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a7d      	ldr	r2, [pc, #500]	@ (8005d04 <HAL_DMA_IRQHandler+0x6a4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d031      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a7c      	ldr	r2, [pc, #496]	@ (8005d08 <HAL_DMA_IRQHandler+0x6a8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d02c      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a7a      	ldr	r2, [pc, #488]	@ (8005d0c <HAL_DMA_IRQHandler+0x6ac>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d027      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a79      	ldr	r2, [pc, #484]	@ (8005d10 <HAL_DMA_IRQHandler+0x6b0>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d022      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a77      	ldr	r2, [pc, #476]	@ (8005d14 <HAL_DMA_IRQHandler+0x6b4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01d      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a76      	ldr	r2, [pc, #472]	@ (8005d18 <HAL_DMA_IRQHandler+0x6b8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d018      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a74      	ldr	r2, [pc, #464]	@ (8005d1c <HAL_DMA_IRQHandler+0x6bc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a73      	ldr	r2, [pc, #460]	@ (8005d20 <HAL_DMA_IRQHandler+0x6c0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a71      	ldr	r2, [pc, #452]	@ (8005d24 <HAL_DMA_IRQHandler+0x6c4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a70      	ldr	r2, [pc, #448]	@ (8005d28 <HAL_DMA_IRQHandler+0x6c8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x516>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a6e      	ldr	r2, [pc, #440]	@ (8005d2c <HAL_DMA_IRQHandler+0x6cc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d10a      	bne.n	8005b8c <HAL_DMA_IRQHandler+0x52c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	e009      	b.n	8005ba0 <HAL_DMA_IRQHandler+0x540>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	bf14      	ite	ne
 8005b9a:	2301      	movne	r3, #1
 8005b9c:	2300      	moveq	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d03e      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba8:	f003 031f 	and.w	r3, r3, #31
 8005bac:	2210      	movs	r2, #16
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d018      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d108      	bne.n	8005be2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d024      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
 8005be0:	e01f      	b.n	8005c22 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d01b      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4798      	blx	r3
 8005bf2:	e016      	b.n	8005c22 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0208 	bic.w	r2, r2, #8
 8005c10:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 8110 	beq.w	8005e58 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005cf0 <HAL_DMA_IRQHandler+0x690>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d04a      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2b      	ldr	r2, [pc, #172]	@ (8005cf4 <HAL_DMA_IRQHandler+0x694>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d045      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a29      	ldr	r2, [pc, #164]	@ (8005cf8 <HAL_DMA_IRQHandler+0x698>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d040      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a28      	ldr	r2, [pc, #160]	@ (8005cfc <HAL_DMA_IRQHandler+0x69c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d03b      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a26      	ldr	r2, [pc, #152]	@ (8005d00 <HAL_DMA_IRQHandler+0x6a0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d036      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a25      	ldr	r2, [pc, #148]	@ (8005d04 <HAL_DMA_IRQHandler+0x6a4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d031      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a23      	ldr	r2, [pc, #140]	@ (8005d08 <HAL_DMA_IRQHandler+0x6a8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d02c      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a22      	ldr	r2, [pc, #136]	@ (8005d0c <HAL_DMA_IRQHandler+0x6ac>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d027      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a20      	ldr	r2, [pc, #128]	@ (8005d10 <HAL_DMA_IRQHandler+0x6b0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d022      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1f      	ldr	r2, [pc, #124]	@ (8005d14 <HAL_DMA_IRQHandler+0x6b4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d18 <HAL_DMA_IRQHandler+0x6b8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1c      	ldr	r2, [pc, #112]	@ (8005d1c <HAL_DMA_IRQHandler+0x6bc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8005d20 <HAL_DMA_IRQHandler+0x6c0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a19      	ldr	r2, [pc, #100]	@ (8005d24 <HAL_DMA_IRQHandler+0x6c4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a17      	ldr	r2, [pc, #92]	@ (8005d28 <HAL_DMA_IRQHandler+0x6c8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x678>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a16      	ldr	r2, [pc, #88]	@ (8005d2c <HAL_DMA_IRQHandler+0x6cc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d12b      	bne.n	8005d30 <HAL_DMA_IRQHandler+0x6d0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bf14      	ite	ne
 8005ce6:	2301      	movne	r3, #1
 8005ce8:	2300      	moveq	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	e02a      	b.n	8005d44 <HAL_DMA_IRQHandler+0x6e4>
 8005cee:	bf00      	nop
 8005cf0:	40020010 	.word	0x40020010
 8005cf4:	40020028 	.word	0x40020028
 8005cf8:	40020040 	.word	0x40020040
 8005cfc:	40020058 	.word	0x40020058
 8005d00:	40020070 	.word	0x40020070
 8005d04:	40020088 	.word	0x40020088
 8005d08:	400200a0 	.word	0x400200a0
 8005d0c:	400200b8 	.word	0x400200b8
 8005d10:	40020410 	.word	0x40020410
 8005d14:	40020428 	.word	0x40020428
 8005d18:	40020440 	.word	0x40020440
 8005d1c:	40020458 	.word	0x40020458
 8005d20:	40020470 	.word	0x40020470
 8005d24:	40020488 	.word	0x40020488
 8005d28:	400204a0 	.word	0x400204a0
 8005d2c:	400204b8 	.word	0x400204b8
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	bf14      	ite	ne
 8005d3e:	2301      	movne	r3, #1
 8005d40:	2300      	moveq	r3, #0
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8087 	beq.w	8005e58 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	2220      	movs	r2, #32
 8005d54:	409a      	lsls	r2, r3
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d139      	bne.n	8005dda <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0216 	bic.w	r2, r2, #22
 8005d74:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695a      	ldr	r2, [r3, #20]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d84:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <HAL_DMA_IRQHandler+0x736>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0208 	bic.w	r2, r2, #8
 8005da4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	223f      	movs	r2, #63	@ 0x3f
 8005db0:	409a      	lsls	r2, r3
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 834a 	beq.w	8006464 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	4798      	blx	r3
          }
          return;
 8005dd8:	e344      	b.n	8006464 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d018      	beq.n	8005e1a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d108      	bne.n	8005e08 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d02c      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	4798      	blx	r3
 8005e06:	e027      	b.n	8005e58 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d023      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	4798      	blx	r3
 8005e18:	e01e      	b.n	8005e58 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10f      	bne.n	8005e48 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0210 	bic.w	r2, r2, #16
 8005e36:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8306 	beq.w	800646e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8088 	beq.w	8005f80 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2204      	movs	r2, #4
 8005e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a7a      	ldr	r2, [pc, #488]	@ (8006068 <HAL_DMA_IRQHandler+0xa08>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d04a      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a79      	ldr	r2, [pc, #484]	@ (800606c <HAL_DMA_IRQHandler+0xa0c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d045      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a77      	ldr	r2, [pc, #476]	@ (8006070 <HAL_DMA_IRQHandler+0xa10>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d040      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a76      	ldr	r2, [pc, #472]	@ (8006074 <HAL_DMA_IRQHandler+0xa14>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d03b      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a74      	ldr	r2, [pc, #464]	@ (8006078 <HAL_DMA_IRQHandler+0xa18>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d036      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a73      	ldr	r2, [pc, #460]	@ (800607c <HAL_DMA_IRQHandler+0xa1c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d031      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a71      	ldr	r2, [pc, #452]	@ (8006080 <HAL_DMA_IRQHandler+0xa20>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d02c      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a70      	ldr	r2, [pc, #448]	@ (8006084 <HAL_DMA_IRQHandler+0xa24>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d027      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a6e      	ldr	r2, [pc, #440]	@ (8006088 <HAL_DMA_IRQHandler+0xa28>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d022      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a6d      	ldr	r2, [pc, #436]	@ (800608c <HAL_DMA_IRQHandler+0xa2c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d01d      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a6b      	ldr	r2, [pc, #428]	@ (8006090 <HAL_DMA_IRQHandler+0xa30>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a6a      	ldr	r2, [pc, #424]	@ (8006094 <HAL_DMA_IRQHandler+0xa34>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a68      	ldr	r2, [pc, #416]	@ (8006098 <HAL_DMA_IRQHandler+0xa38>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a67      	ldr	r2, [pc, #412]	@ (800609c <HAL_DMA_IRQHandler+0xa3c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a65      	ldr	r2, [pc, #404]	@ (80060a0 <HAL_DMA_IRQHandler+0xa40>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x8b8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a64      	ldr	r2, [pc, #400]	@ (80060a4 <HAL_DMA_IRQHandler+0xa44>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d108      	bne.n	8005f2a <HAL_DMA_IRQHandler+0x8ca>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0201 	bic.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	e007      	b.n	8005f3a <HAL_DMA_IRQHandler+0x8da>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d307      	bcc.n	8005f56 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f2      	bne.n	8005f3a <HAL_DMA_IRQHandler+0x8da>
 8005f54:	e000      	b.n	8005f58 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005f56:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d004      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2203      	movs	r2, #3
 8005f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005f6e:	e003      	b.n	8005f78 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8272 	beq.w	800646e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	4798      	blx	r3
 8005f92:	e26c      	b.n	800646e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a43      	ldr	r2, [pc, #268]	@ (80060a8 <HAL_DMA_IRQHandler+0xa48>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d022      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x984>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a42      	ldr	r2, [pc, #264]	@ (80060ac <HAL_DMA_IRQHandler+0xa4c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d01d      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x984>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a40      	ldr	r2, [pc, #256]	@ (80060b0 <HAL_DMA_IRQHandler+0xa50>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x984>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a3f      	ldr	r2, [pc, #252]	@ (80060b4 <HAL_DMA_IRQHandler+0xa54>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x984>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a3d      	ldr	r2, [pc, #244]	@ (80060b8 <HAL_DMA_IRQHandler+0xa58>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x984>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a3c      	ldr	r2, [pc, #240]	@ (80060bc <HAL_DMA_IRQHandler+0xa5c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x984>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a3a      	ldr	r2, [pc, #232]	@ (80060c0 <HAL_DMA_IRQHandler+0xa60>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x984>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a39      	ldr	r2, [pc, #228]	@ (80060c4 <HAL_DMA_IRQHandler+0xa64>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d101      	bne.n	8005fe8 <HAL_DMA_IRQHandler+0x988>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <HAL_DMA_IRQHandler+0x98a>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 823f 	beq.w	800646e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ffc:	f003 031f 	and.w	r3, r3, #31
 8006000:	2204      	movs	r2, #4
 8006002:	409a      	lsls	r2, r3
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4013      	ands	r3, r2
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80cd 	beq.w	80061a8 <HAL_DMA_IRQHandler+0xb48>
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 80c7 	beq.w	80061a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800601e:	f003 031f 	and.w	r3, r3, #31
 8006022:	2204      	movs	r2, #4
 8006024:	409a      	lsls	r2, r3
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d049      	beq.n	80060c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 8210 	beq.w	8006468 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006050:	e20a      	b.n	8006468 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8206 	beq.w	8006468 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006064:	e200      	b.n	8006468 <HAL_DMA_IRQHandler+0xe08>
 8006066:	bf00      	nop
 8006068:	40020010 	.word	0x40020010
 800606c:	40020028 	.word	0x40020028
 8006070:	40020040 	.word	0x40020040
 8006074:	40020058 	.word	0x40020058
 8006078:	40020070 	.word	0x40020070
 800607c:	40020088 	.word	0x40020088
 8006080:	400200a0 	.word	0x400200a0
 8006084:	400200b8 	.word	0x400200b8
 8006088:	40020410 	.word	0x40020410
 800608c:	40020428 	.word	0x40020428
 8006090:	40020440 	.word	0x40020440
 8006094:	40020458 	.word	0x40020458
 8006098:	40020470 	.word	0x40020470
 800609c:	40020488 	.word	0x40020488
 80060a0:	400204a0 	.word	0x400204a0
 80060a4:	400204b8 	.word	0x400204b8
 80060a8:	58025408 	.word	0x58025408
 80060ac:	5802541c 	.word	0x5802541c
 80060b0:	58025430 	.word	0x58025430
 80060b4:	58025444 	.word	0x58025444
 80060b8:	58025458 	.word	0x58025458
 80060bc:	5802546c 	.word	0x5802546c
 80060c0:	58025480 	.word	0x58025480
 80060c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d160      	bne.n	8006194 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a7f      	ldr	r2, [pc, #508]	@ (80062d4 <HAL_DMA_IRQHandler+0xc74>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d04a      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a7d      	ldr	r2, [pc, #500]	@ (80062d8 <HAL_DMA_IRQHandler+0xc78>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d045      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a7c      	ldr	r2, [pc, #496]	@ (80062dc <HAL_DMA_IRQHandler+0xc7c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d040      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a7a      	ldr	r2, [pc, #488]	@ (80062e0 <HAL_DMA_IRQHandler+0xc80>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d03b      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a79      	ldr	r2, [pc, #484]	@ (80062e4 <HAL_DMA_IRQHandler+0xc84>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d036      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a77      	ldr	r2, [pc, #476]	@ (80062e8 <HAL_DMA_IRQHandler+0xc88>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d031      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a76      	ldr	r2, [pc, #472]	@ (80062ec <HAL_DMA_IRQHandler+0xc8c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d02c      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a74      	ldr	r2, [pc, #464]	@ (80062f0 <HAL_DMA_IRQHandler+0xc90>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d027      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a73      	ldr	r2, [pc, #460]	@ (80062f4 <HAL_DMA_IRQHandler+0xc94>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d022      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a71      	ldr	r2, [pc, #452]	@ (80062f8 <HAL_DMA_IRQHandler+0xc98>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d01d      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a70      	ldr	r2, [pc, #448]	@ (80062fc <HAL_DMA_IRQHandler+0xc9c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d018      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a6e      	ldr	r2, [pc, #440]	@ (8006300 <HAL_DMA_IRQHandler+0xca0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a6d      	ldr	r2, [pc, #436]	@ (8006304 <HAL_DMA_IRQHandler+0xca4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00e      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a6b      	ldr	r2, [pc, #428]	@ (8006308 <HAL_DMA_IRQHandler+0xca8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d009      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a6a      	ldr	r2, [pc, #424]	@ (800630c <HAL_DMA_IRQHandler+0xcac>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d004      	beq.n	8006172 <HAL_DMA_IRQHandler+0xb12>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a68      	ldr	r2, [pc, #416]	@ (8006310 <HAL_DMA_IRQHandler+0xcb0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d108      	bne.n	8006184 <HAL_DMA_IRQHandler+0xb24>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0208 	bic.w	r2, r2, #8
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	e007      	b.n	8006194 <HAL_DMA_IRQHandler+0xb34>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0204 	bic.w	r2, r2, #4
 8006192:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8165 	beq.w	8006468 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061a6:	e15f      	b.n	8006468 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	2202      	movs	r2, #2
 80061b2:	409a      	lsls	r2, r3
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80c5 	beq.w	8006348 <HAL_DMA_IRQHandler+0xce8>
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80bf 	beq.w	8006348 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	2202      	movs	r2, #2
 80061d4:	409a      	lsls	r2, r3
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d018      	beq.n	8006216 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d109      	bne.n	8006202 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 813a 	beq.w	800646c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006200:	e134      	b.n	800646c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8130 	beq.w	800646c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006214:	e12a      	b.n	800646c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	f040 8089 	bne.w	8006334 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a2b      	ldr	r2, [pc, #172]	@ (80062d4 <HAL_DMA_IRQHandler+0xc74>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d04a      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a29      	ldr	r2, [pc, #164]	@ (80062d8 <HAL_DMA_IRQHandler+0xc78>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d045      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a28      	ldr	r2, [pc, #160]	@ (80062dc <HAL_DMA_IRQHandler+0xc7c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d040      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a26      	ldr	r2, [pc, #152]	@ (80062e0 <HAL_DMA_IRQHandler+0xc80>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d03b      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a25      	ldr	r2, [pc, #148]	@ (80062e4 <HAL_DMA_IRQHandler+0xc84>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d036      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a23      	ldr	r2, [pc, #140]	@ (80062e8 <HAL_DMA_IRQHandler+0xc88>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d031      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a22      	ldr	r2, [pc, #136]	@ (80062ec <HAL_DMA_IRQHandler+0xc8c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d02c      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a20      	ldr	r2, [pc, #128]	@ (80062f0 <HAL_DMA_IRQHandler+0xc90>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d027      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1f      	ldr	r2, [pc, #124]	@ (80062f4 <HAL_DMA_IRQHandler+0xc94>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d022      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <HAL_DMA_IRQHandler+0xc98>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d01d      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1c      	ldr	r2, [pc, #112]	@ (80062fc <HAL_DMA_IRQHandler+0xc9c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d018      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1a      	ldr	r2, [pc, #104]	@ (8006300 <HAL_DMA_IRQHandler+0xca0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a19      	ldr	r2, [pc, #100]	@ (8006304 <HAL_DMA_IRQHandler+0xca4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00e      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a17      	ldr	r2, [pc, #92]	@ (8006308 <HAL_DMA_IRQHandler+0xca8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a16      	ldr	r2, [pc, #88]	@ (800630c <HAL_DMA_IRQHandler+0xcac>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xc62>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a14      	ldr	r2, [pc, #80]	@ (8006310 <HAL_DMA_IRQHandler+0xcb0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d128      	bne.n	8006314 <HAL_DMA_IRQHandler+0xcb4>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0214 	bic.w	r2, r2, #20
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e027      	b.n	8006324 <HAL_DMA_IRQHandler+0xcc4>
 80062d4:	40020010 	.word	0x40020010
 80062d8:	40020028 	.word	0x40020028
 80062dc:	40020040 	.word	0x40020040
 80062e0:	40020058 	.word	0x40020058
 80062e4:	40020070 	.word	0x40020070
 80062e8:	40020088 	.word	0x40020088
 80062ec:	400200a0 	.word	0x400200a0
 80062f0:	400200b8 	.word	0x400200b8
 80062f4:	40020410 	.word	0x40020410
 80062f8:	40020428 	.word	0x40020428
 80062fc:	40020440 	.word	0x40020440
 8006300:	40020458 	.word	0x40020458
 8006304:	40020470 	.word	0x40020470
 8006308:	40020488 	.word	0x40020488
 800630c:	400204a0 	.word	0x400204a0
 8006310:	400204b8 	.word	0x400204b8
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 020a 	bic.w	r2, r2, #10
 8006322:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8097 	beq.w	800646c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006346:	e091      	b.n	800646c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800634c:	f003 031f 	and.w	r3, r3, #31
 8006350:	2208      	movs	r2, #8
 8006352:	409a      	lsls	r2, r3
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	4013      	ands	r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8088 	beq.w	800646e <HAL_DMA_IRQHandler+0xe0e>
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8082 	beq.w	800646e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a41      	ldr	r2, [pc, #260]	@ (8006474 <HAL_DMA_IRQHandler+0xe14>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d04a      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a3f      	ldr	r2, [pc, #252]	@ (8006478 <HAL_DMA_IRQHandler+0xe18>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d045      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a3e      	ldr	r2, [pc, #248]	@ (800647c <HAL_DMA_IRQHandler+0xe1c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d040      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a3c      	ldr	r2, [pc, #240]	@ (8006480 <HAL_DMA_IRQHandler+0xe20>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d03b      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a3b      	ldr	r2, [pc, #236]	@ (8006484 <HAL_DMA_IRQHandler+0xe24>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d036      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a39      	ldr	r2, [pc, #228]	@ (8006488 <HAL_DMA_IRQHandler+0xe28>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d031      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a38      	ldr	r2, [pc, #224]	@ (800648c <HAL_DMA_IRQHandler+0xe2c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d02c      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a36      	ldr	r2, [pc, #216]	@ (8006490 <HAL_DMA_IRQHandler+0xe30>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d027      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a35      	ldr	r2, [pc, #212]	@ (8006494 <HAL_DMA_IRQHandler+0xe34>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d022      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a33      	ldr	r2, [pc, #204]	@ (8006498 <HAL_DMA_IRQHandler+0xe38>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d01d      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a32      	ldr	r2, [pc, #200]	@ (800649c <HAL_DMA_IRQHandler+0xe3c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d018      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a30      	ldr	r2, [pc, #192]	@ (80064a0 <HAL_DMA_IRQHandler+0xe40>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d013      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a2f      	ldr	r2, [pc, #188]	@ (80064a4 <HAL_DMA_IRQHandler+0xe44>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00e      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a2d      	ldr	r2, [pc, #180]	@ (80064a8 <HAL_DMA_IRQHandler+0xe48>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d009      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a2c      	ldr	r2, [pc, #176]	@ (80064ac <HAL_DMA_IRQHandler+0xe4c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d004      	beq.n	800640a <HAL_DMA_IRQHandler+0xdaa>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2a      	ldr	r2, [pc, #168]	@ (80064b0 <HAL_DMA_IRQHandler+0xe50>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d108      	bne.n	800641c <HAL_DMA_IRQHandler+0xdbc>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 021c 	bic.w	r2, r2, #28
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e007      	b.n	800642c <HAL_DMA_IRQHandler+0xdcc>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 020e 	bic.w	r2, r2, #14
 800642a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	2201      	movs	r2, #1
 8006436:	409a      	lsls	r2, r3
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d009      	beq.n	800646e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
 8006462:	e004      	b.n	800646e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006464:	bf00      	nop
 8006466:	e002      	b.n	800646e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006468:	bf00      	nop
 800646a:	e000      	b.n	800646e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800646c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800646e:	3728      	adds	r7, #40	@ 0x28
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40020010 	.word	0x40020010
 8006478:	40020028 	.word	0x40020028
 800647c:	40020040 	.word	0x40020040
 8006480:	40020058 	.word	0x40020058
 8006484:	40020070 	.word	0x40020070
 8006488:	40020088 	.word	0x40020088
 800648c:	400200a0 	.word	0x400200a0
 8006490:	400200b8 	.word	0x400200b8
 8006494:	40020410 	.word	0x40020410
 8006498:	40020428 	.word	0x40020428
 800649c:	40020440 	.word	0x40020440
 80064a0:	40020458 	.word	0x40020458
 80064a4:	40020470 	.word	0x40020470
 80064a8:	40020488 	.word	0x40020488
 80064ac:	400204a0 	.word	0x400204a0
 80064b0:	400204b8 	.word	0x400204b8

080064b4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a7f      	ldr	r2, [pc, #508]	@ (80066e8 <DMA_SetConfig+0x21c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d072      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a7d      	ldr	r2, [pc, #500]	@ (80066ec <DMA_SetConfig+0x220>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d06d      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a7c      	ldr	r2, [pc, #496]	@ (80066f0 <DMA_SetConfig+0x224>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d068      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a7a      	ldr	r2, [pc, #488]	@ (80066f4 <DMA_SetConfig+0x228>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d063      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a79      	ldr	r2, [pc, #484]	@ (80066f8 <DMA_SetConfig+0x22c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d05e      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a77      	ldr	r2, [pc, #476]	@ (80066fc <DMA_SetConfig+0x230>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d059      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a76      	ldr	r2, [pc, #472]	@ (8006700 <DMA_SetConfig+0x234>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d054      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a74      	ldr	r2, [pc, #464]	@ (8006704 <DMA_SetConfig+0x238>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d04f      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a73      	ldr	r2, [pc, #460]	@ (8006708 <DMA_SetConfig+0x23c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d04a      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a71      	ldr	r2, [pc, #452]	@ (800670c <DMA_SetConfig+0x240>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d045      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a70      	ldr	r2, [pc, #448]	@ (8006710 <DMA_SetConfig+0x244>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d040      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a6e      	ldr	r2, [pc, #440]	@ (8006714 <DMA_SetConfig+0x248>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d03b      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a6d      	ldr	r2, [pc, #436]	@ (8006718 <DMA_SetConfig+0x24c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d036      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a6b      	ldr	r2, [pc, #428]	@ (800671c <DMA_SetConfig+0x250>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d031      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a6a      	ldr	r2, [pc, #424]	@ (8006720 <DMA_SetConfig+0x254>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d02c      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a68      	ldr	r2, [pc, #416]	@ (8006724 <DMA_SetConfig+0x258>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d027      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a67      	ldr	r2, [pc, #412]	@ (8006728 <DMA_SetConfig+0x25c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d022      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a65      	ldr	r2, [pc, #404]	@ (800672c <DMA_SetConfig+0x260>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01d      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a64      	ldr	r2, [pc, #400]	@ (8006730 <DMA_SetConfig+0x264>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d018      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a62      	ldr	r2, [pc, #392]	@ (8006734 <DMA_SetConfig+0x268>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a61      	ldr	r2, [pc, #388]	@ (8006738 <DMA_SetConfig+0x26c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00e      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a5f      	ldr	r2, [pc, #380]	@ (800673c <DMA_SetConfig+0x270>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d009      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a5e      	ldr	r2, [pc, #376]	@ (8006740 <DMA_SetConfig+0x274>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <DMA_SetConfig+0x10a>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a5c      	ldr	r2, [pc, #368]	@ (8006744 <DMA_SetConfig+0x278>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d101      	bne.n	80065da <DMA_SetConfig+0x10e>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <DMA_SetConfig+0x110>
 80065da:	2300      	movs	r3, #0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00d      	beq.n	80065fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80065e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d004      	beq.n	80065fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80065fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a39      	ldr	r2, [pc, #228]	@ (80066e8 <DMA_SetConfig+0x21c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d04a      	beq.n	800669c <DMA_SetConfig+0x1d0>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a38      	ldr	r2, [pc, #224]	@ (80066ec <DMA_SetConfig+0x220>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d045      	beq.n	800669c <DMA_SetConfig+0x1d0>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a36      	ldr	r2, [pc, #216]	@ (80066f0 <DMA_SetConfig+0x224>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d040      	beq.n	800669c <DMA_SetConfig+0x1d0>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a35      	ldr	r2, [pc, #212]	@ (80066f4 <DMA_SetConfig+0x228>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d03b      	beq.n	800669c <DMA_SetConfig+0x1d0>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a33      	ldr	r2, [pc, #204]	@ (80066f8 <DMA_SetConfig+0x22c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d036      	beq.n	800669c <DMA_SetConfig+0x1d0>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a32      	ldr	r2, [pc, #200]	@ (80066fc <DMA_SetConfig+0x230>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d031      	beq.n	800669c <DMA_SetConfig+0x1d0>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a30      	ldr	r2, [pc, #192]	@ (8006700 <DMA_SetConfig+0x234>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d02c      	beq.n	800669c <DMA_SetConfig+0x1d0>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a2f      	ldr	r2, [pc, #188]	@ (8006704 <DMA_SetConfig+0x238>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d027      	beq.n	800669c <DMA_SetConfig+0x1d0>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a2d      	ldr	r2, [pc, #180]	@ (8006708 <DMA_SetConfig+0x23c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d022      	beq.n	800669c <DMA_SetConfig+0x1d0>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a2c      	ldr	r2, [pc, #176]	@ (800670c <DMA_SetConfig+0x240>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d01d      	beq.n	800669c <DMA_SetConfig+0x1d0>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a2a      	ldr	r2, [pc, #168]	@ (8006710 <DMA_SetConfig+0x244>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d018      	beq.n	800669c <DMA_SetConfig+0x1d0>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a29      	ldr	r2, [pc, #164]	@ (8006714 <DMA_SetConfig+0x248>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d013      	beq.n	800669c <DMA_SetConfig+0x1d0>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a27      	ldr	r2, [pc, #156]	@ (8006718 <DMA_SetConfig+0x24c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00e      	beq.n	800669c <DMA_SetConfig+0x1d0>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a26      	ldr	r2, [pc, #152]	@ (800671c <DMA_SetConfig+0x250>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d009      	beq.n	800669c <DMA_SetConfig+0x1d0>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a24      	ldr	r2, [pc, #144]	@ (8006720 <DMA_SetConfig+0x254>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d004      	beq.n	800669c <DMA_SetConfig+0x1d0>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a23      	ldr	r2, [pc, #140]	@ (8006724 <DMA_SetConfig+0x258>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d101      	bne.n	80066a0 <DMA_SetConfig+0x1d4>
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <DMA_SetConfig+0x1d6>
 80066a0:	2300      	movs	r3, #0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d059      	beq.n	800675a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	223f      	movs	r2, #63	@ 0x3f
 80066b0:	409a      	lsls	r2, r3
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80066c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2b40      	cmp	r3, #64	@ 0x40
 80066d4:	d138      	bne.n	8006748 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80066e6:	e086      	b.n	80067f6 <DMA_SetConfig+0x32a>
 80066e8:	40020010 	.word	0x40020010
 80066ec:	40020028 	.word	0x40020028
 80066f0:	40020040 	.word	0x40020040
 80066f4:	40020058 	.word	0x40020058
 80066f8:	40020070 	.word	0x40020070
 80066fc:	40020088 	.word	0x40020088
 8006700:	400200a0 	.word	0x400200a0
 8006704:	400200b8 	.word	0x400200b8
 8006708:	40020410 	.word	0x40020410
 800670c:	40020428 	.word	0x40020428
 8006710:	40020440 	.word	0x40020440
 8006714:	40020458 	.word	0x40020458
 8006718:	40020470 	.word	0x40020470
 800671c:	40020488 	.word	0x40020488
 8006720:	400204a0 	.word	0x400204a0
 8006724:	400204b8 	.word	0x400204b8
 8006728:	58025408 	.word	0x58025408
 800672c:	5802541c 	.word	0x5802541c
 8006730:	58025430 	.word	0x58025430
 8006734:	58025444 	.word	0x58025444
 8006738:	58025458 	.word	0x58025458
 800673c:	5802546c 	.word	0x5802546c
 8006740:	58025480 	.word	0x58025480
 8006744:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	60da      	str	r2, [r3, #12]
}
 8006758:	e04d      	b.n	80067f6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a29      	ldr	r2, [pc, #164]	@ (8006804 <DMA_SetConfig+0x338>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d022      	beq.n	80067aa <DMA_SetConfig+0x2de>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a27      	ldr	r2, [pc, #156]	@ (8006808 <DMA_SetConfig+0x33c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01d      	beq.n	80067aa <DMA_SetConfig+0x2de>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a26      	ldr	r2, [pc, #152]	@ (800680c <DMA_SetConfig+0x340>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d018      	beq.n	80067aa <DMA_SetConfig+0x2de>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a24      	ldr	r2, [pc, #144]	@ (8006810 <DMA_SetConfig+0x344>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <DMA_SetConfig+0x2de>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a23      	ldr	r2, [pc, #140]	@ (8006814 <DMA_SetConfig+0x348>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <DMA_SetConfig+0x2de>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a21      	ldr	r2, [pc, #132]	@ (8006818 <DMA_SetConfig+0x34c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <DMA_SetConfig+0x2de>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a20      	ldr	r2, [pc, #128]	@ (800681c <DMA_SetConfig+0x350>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <DMA_SetConfig+0x2de>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006820 <DMA_SetConfig+0x354>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <DMA_SetConfig+0x2e2>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <DMA_SetConfig+0x2e4>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d020      	beq.n	80067f6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b8:	f003 031f 	and.w	r3, r3, #31
 80067bc:	2201      	movs	r2, #1
 80067be:	409a      	lsls	r2, r3
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	2b40      	cmp	r3, #64	@ 0x40
 80067d2:	d108      	bne.n	80067e6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	60da      	str	r2, [r3, #12]
}
 80067e4:	e007      	b.n	80067f6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	60da      	str	r2, [r3, #12]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	58025408 	.word	0x58025408
 8006808:	5802541c 	.word	0x5802541c
 800680c:	58025430 	.word	0x58025430
 8006810:	58025444 	.word	0x58025444
 8006814:	58025458 	.word	0x58025458
 8006818:	5802546c 	.word	0x5802546c
 800681c:	58025480 	.word	0x58025480
 8006820:	58025494 	.word	0x58025494

08006824 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a42      	ldr	r2, [pc, #264]	@ (800693c <DMA_CalcBaseAndBitshift+0x118>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d04a      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a41      	ldr	r2, [pc, #260]	@ (8006940 <DMA_CalcBaseAndBitshift+0x11c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d045      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a3f      	ldr	r2, [pc, #252]	@ (8006944 <DMA_CalcBaseAndBitshift+0x120>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d040      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a3e      	ldr	r2, [pc, #248]	@ (8006948 <DMA_CalcBaseAndBitshift+0x124>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d03b      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a3c      	ldr	r2, [pc, #240]	@ (800694c <DMA_CalcBaseAndBitshift+0x128>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d036      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a3b      	ldr	r2, [pc, #236]	@ (8006950 <DMA_CalcBaseAndBitshift+0x12c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d031      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a39      	ldr	r2, [pc, #228]	@ (8006954 <DMA_CalcBaseAndBitshift+0x130>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d02c      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a38      	ldr	r2, [pc, #224]	@ (8006958 <DMA_CalcBaseAndBitshift+0x134>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d027      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a36      	ldr	r2, [pc, #216]	@ (800695c <DMA_CalcBaseAndBitshift+0x138>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d022      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a35      	ldr	r2, [pc, #212]	@ (8006960 <DMA_CalcBaseAndBitshift+0x13c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d01d      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a33      	ldr	r2, [pc, #204]	@ (8006964 <DMA_CalcBaseAndBitshift+0x140>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d018      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a32      	ldr	r2, [pc, #200]	@ (8006968 <DMA_CalcBaseAndBitshift+0x144>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d013      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a30      	ldr	r2, [pc, #192]	@ (800696c <DMA_CalcBaseAndBitshift+0x148>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00e      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006970 <DMA_CalcBaseAndBitshift+0x14c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d009      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006974 <DMA_CalcBaseAndBitshift+0x150>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d004      	beq.n	80068cc <DMA_CalcBaseAndBitshift+0xa8>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006978 <DMA_CalcBaseAndBitshift+0x154>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d101      	bne.n	80068d0 <DMA_CalcBaseAndBitshift+0xac>
 80068cc:	2301      	movs	r3, #1
 80068ce:	e000      	b.n	80068d2 <DMA_CalcBaseAndBitshift+0xae>
 80068d0:	2300      	movs	r3, #0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d024      	beq.n	8006920 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	3b10      	subs	r3, #16
 80068de:	4a27      	ldr	r2, [pc, #156]	@ (800697c <DMA_CalcBaseAndBitshift+0x158>)
 80068e0:	fba2 2303 	umull	r2, r3, r2, r3
 80068e4:	091b      	lsrs	r3, r3, #4
 80068e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	4a24      	ldr	r2, [pc, #144]	@ (8006980 <DMA_CalcBaseAndBitshift+0x15c>)
 80068f0:	5cd3      	ldrb	r3, [r2, r3]
 80068f2:	461a      	mov	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d908      	bls.n	8006910 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	4b1f      	ldr	r3, [pc, #124]	@ (8006984 <DMA_CalcBaseAndBitshift+0x160>)
 8006906:	4013      	ands	r3, r2
 8006908:	1d1a      	adds	r2, r3, #4
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	659a      	str	r2, [r3, #88]	@ 0x58
 800690e:	e00d      	b.n	800692c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	461a      	mov	r2, r3
 8006916:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <DMA_CalcBaseAndBitshift+0x160>)
 8006918:	4013      	ands	r3, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6593      	str	r3, [r2, #88]	@ 0x58
 800691e:	e005      	b.n	800692c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	40020010 	.word	0x40020010
 8006940:	40020028 	.word	0x40020028
 8006944:	40020040 	.word	0x40020040
 8006948:	40020058 	.word	0x40020058
 800694c:	40020070 	.word	0x40020070
 8006950:	40020088 	.word	0x40020088
 8006954:	400200a0 	.word	0x400200a0
 8006958:	400200b8 	.word	0x400200b8
 800695c:	40020410 	.word	0x40020410
 8006960:	40020428 	.word	0x40020428
 8006964:	40020440 	.word	0x40020440
 8006968:	40020458 	.word	0x40020458
 800696c:	40020470 	.word	0x40020470
 8006970:	40020488 	.word	0x40020488
 8006974:	400204a0 	.word	0x400204a0
 8006978:	400204b8 	.word	0x400204b8
 800697c:	aaaaaaab 	.word	0xaaaaaaab
 8006980:	08021a74 	.word	0x08021a74
 8006984:	fffffc00 	.word	0xfffffc00

08006988 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d120      	bne.n	80069de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d858      	bhi.n	8006a56 <DMA_CheckFifoParam+0xce>
 80069a4:	a201      	add	r2, pc, #4	@ (adr r2, 80069ac <DMA_CheckFifoParam+0x24>)
 80069a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069aa:	bf00      	nop
 80069ac:	080069bd 	.word	0x080069bd
 80069b0:	080069cf 	.word	0x080069cf
 80069b4:	080069bd 	.word	0x080069bd
 80069b8:	08006a57 	.word	0x08006a57
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d048      	beq.n	8006a5a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069cc:	e045      	b.n	8006a5a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80069d6:	d142      	bne.n	8006a5e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069dc:	e03f      	b.n	8006a5e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069e6:	d123      	bne.n	8006a30 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d838      	bhi.n	8006a62 <DMA_CheckFifoParam+0xda>
 80069f0:	a201      	add	r2, pc, #4	@ (adr r2, 80069f8 <DMA_CheckFifoParam+0x70>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a09 	.word	0x08006a09
 80069fc:	08006a0f 	.word	0x08006a0f
 8006a00:	08006a09 	.word	0x08006a09
 8006a04:	08006a21 	.word	0x08006a21
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	73fb      	strb	r3, [r7, #15]
        break;
 8006a0c:	e030      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d025      	beq.n	8006a66 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a1e:	e022      	b.n	8006a66 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a28:	d11f      	bne.n	8006a6a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a2e:	e01c      	b.n	8006a6a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d902      	bls.n	8006a3e <DMA_CheckFifoParam+0xb6>
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d003      	beq.n	8006a44 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006a3c:	e018      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	73fb      	strb	r3, [r7, #15]
        break;
 8006a42:	e015      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00e      	beq.n	8006a6e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
    break;
 8006a54:	e00b      	b.n	8006a6e <DMA_CheckFifoParam+0xe6>
        break;
 8006a56:	bf00      	nop
 8006a58:	e00a      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
        break;
 8006a5a:	bf00      	nop
 8006a5c:	e008      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
        break;
 8006a5e:	bf00      	nop
 8006a60:	e006      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
        break;
 8006a62:	bf00      	nop
 8006a64:	e004      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
        break;
 8006a66:	bf00      	nop
 8006a68:	e002      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
        break;
 8006a6a:	bf00      	nop
 8006a6c:	e000      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
    break;
 8006a6e:	bf00      	nop
    }
  }

  return status;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop

08006a80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a38      	ldr	r2, [pc, #224]	@ (8006b74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d022      	beq.n	8006ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a36      	ldr	r2, [pc, #216]	@ (8006b78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d01d      	beq.n	8006ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a35      	ldr	r2, [pc, #212]	@ (8006b7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d018      	beq.n	8006ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a33      	ldr	r2, [pc, #204]	@ (8006b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d013      	beq.n	8006ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a32      	ldr	r2, [pc, #200]	@ (8006b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00e      	beq.n	8006ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a30      	ldr	r2, [pc, #192]	@ (8006b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d009      	beq.n	8006ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a2f      	ldr	r2, [pc, #188]	@ (8006b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d004      	beq.n	8006ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8006b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d101      	bne.n	8006ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01a      	beq.n	8006b1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	3b08      	subs	r3, #8
 8006af0:	4a28      	ldr	r2, [pc, #160]	@ (8006b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	091b      	lsrs	r3, r3, #4
 8006af8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4b26      	ldr	r3, [pc, #152]	@ (8006b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006afe:	4413      	add	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	461a      	mov	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a24      	ldr	r2, [pc, #144]	@ (8006b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006b0c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	2201      	movs	r2, #1
 8006b16:	409a      	lsls	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006b1c:	e024      	b.n	8006b68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	3b10      	subs	r3, #16
 8006b26:	4a1e      	ldr	r2, [pc, #120]	@ (8006ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006b28:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2c:	091b      	lsrs	r3, r3, #4
 8006b2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4a1c      	ldr	r2, [pc, #112]	@ (8006ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d806      	bhi.n	8006b46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d902      	bls.n	8006b46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3308      	adds	r3, #8
 8006b44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4b18      	ldr	r3, [pc, #96]	@ (8006bac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	461a      	mov	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a16      	ldr	r2, [pc, #88]	@ (8006bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006b58:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f003 031f 	and.w	r3, r3, #31
 8006b60:	2201      	movs	r2, #1
 8006b62:	409a      	lsls	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006b68:	bf00      	nop
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	58025408 	.word	0x58025408
 8006b78:	5802541c 	.word	0x5802541c
 8006b7c:	58025430 	.word	0x58025430
 8006b80:	58025444 	.word	0x58025444
 8006b84:	58025458 	.word	0x58025458
 8006b88:	5802546c 	.word	0x5802546c
 8006b8c:	58025480 	.word	0x58025480
 8006b90:	58025494 	.word	0x58025494
 8006b94:	cccccccd 	.word	0xcccccccd
 8006b98:	16009600 	.word	0x16009600
 8006b9c:	58025880 	.word	0x58025880
 8006ba0:	aaaaaaab 	.word	0xaaaaaaab
 8006ba4:	400204b8 	.word	0x400204b8
 8006ba8:	4002040f 	.word	0x4002040f
 8006bac:	10008200 	.word	0x10008200
 8006bb0:	40020880 	.word	0x40020880

08006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d04a      	beq.n	8006c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d847      	bhi.n	8006c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a25      	ldr	r2, [pc, #148]	@ (8006c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d022      	beq.n	8006c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a24      	ldr	r2, [pc, #144]	@ (8006c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d01d      	beq.n	8006c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a22      	ldr	r2, [pc, #136]	@ (8006c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d018      	beq.n	8006c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a21      	ldr	r2, [pc, #132]	@ (8006c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00e      	beq.n	8006c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a1e      	ldr	r2, [pc, #120]	@ (8006c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d009      	beq.n	8006c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a1c      	ldr	r2, [pc, #112]	@ (8006c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d004      	beq.n	8006c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d101      	bne.n	8006c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006c24:	2300      	movs	r3, #0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4b17      	ldr	r3, [pc, #92]	@ (8006c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	461a      	mov	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a15      	ldr	r2, [pc, #84]	@ (8006c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006c3c:	671a      	str	r2, [r3, #112]	@ 0x70
 8006c3e:	e009      	b.n	8006c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4b14      	ldr	r3, [pc, #80]	@ (8006c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a11      	ldr	r2, [pc, #68]	@ (8006c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006c52:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	2201      	movs	r2, #1
 8006c5a:	409a      	lsls	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006c60:	bf00      	nop
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	58025408 	.word	0x58025408
 8006c70:	5802541c 	.word	0x5802541c
 8006c74:	58025430 	.word	0x58025430
 8006c78:	58025444 	.word	0x58025444
 8006c7c:	58025458 	.word	0x58025458
 8006c80:	5802546c 	.word	0x5802546c
 8006c84:	58025480 	.word	0x58025480
 8006c88:	58025494 	.word	0x58025494
 8006c8c:	1600963f 	.word	0x1600963f
 8006c90:	58025940 	.word	0x58025940
 8006c94:	1000823f 	.word	0x1000823f
 8006c98:	40020940 	.word	0x40020940

08006c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b089      	sub	sp, #36	@ 0x24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006caa:	4b89      	ldr	r3, [pc, #548]	@ (8006ed0 <HAL_GPIO_Init+0x234>)
 8006cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006cae:	e194      	b.n	8006fda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8186 	beq.w	8006fd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f003 0303 	and.w	r3, r3, #3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d005      	beq.n	8006ce0 <HAL_GPIO_Init+0x44>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d130      	bne.n	8006d42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	2203      	movs	r2, #3
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	fa02 f303 	lsl.w	r3, r2, r3
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d16:	2201      	movs	r2, #1
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	4013      	ands	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	091b      	lsrs	r3, r3, #4
 8006d2c:	f003 0201 	and.w	r2, r3, #1
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d017      	beq.n	8006d7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	2203      	movs	r2, #3
 8006d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5e:	43db      	mvns	r3, r3
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	4013      	ands	r3, r2
 8006d64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d123      	bne.n	8006dd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	08da      	lsrs	r2, r3, #3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3208      	adds	r2, #8
 8006d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	220f      	movs	r2, #15
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	43db      	mvns	r3, r3
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	4013      	ands	r3, r2
 8006dac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	08da      	lsrs	r2, r3, #3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3208      	adds	r2, #8
 8006dcc:	69b9      	ldr	r1, [r7, #24]
 8006dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	2203      	movs	r2, #3
 8006dde:	fa02 f303 	lsl.w	r3, r2, r3
 8006de2:	43db      	mvns	r3, r3
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	4013      	ands	r3, r2
 8006de8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f003 0203 	and.w	r2, r3, #3
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 80e0 	beq.w	8006fd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e14:	4b2f      	ldr	r3, [pc, #188]	@ (8006ed4 <HAL_GPIO_Init+0x238>)
 8006e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8006ed4 <HAL_GPIO_Init+0x238>)
 8006e1c:	f043 0302 	orr.w	r3, r3, #2
 8006e20:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006e24:	4b2b      	ldr	r3, [pc, #172]	@ (8006ed4 <HAL_GPIO_Init+0x238>)
 8006e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e32:	4a29      	ldr	r2, [pc, #164]	@ (8006ed8 <HAL_GPIO_Init+0x23c>)
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	089b      	lsrs	r3, r3, #2
 8006e38:	3302      	adds	r3, #2
 8006e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	220f      	movs	r2, #15
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	43db      	mvns	r3, r3
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	4013      	ands	r3, r2
 8006e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a20      	ldr	r2, [pc, #128]	@ (8006edc <HAL_GPIO_Init+0x240>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d052      	beq.n	8006f04 <HAL_GPIO_Init+0x268>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a1f      	ldr	r2, [pc, #124]	@ (8006ee0 <HAL_GPIO_Init+0x244>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d031      	beq.n	8006eca <HAL_GPIO_Init+0x22e>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a1e      	ldr	r2, [pc, #120]	@ (8006ee4 <HAL_GPIO_Init+0x248>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d02b      	beq.n	8006ec6 <HAL_GPIO_Init+0x22a>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee8 <HAL_GPIO_Init+0x24c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d025      	beq.n	8006ec2 <HAL_GPIO_Init+0x226>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a1c      	ldr	r2, [pc, #112]	@ (8006eec <HAL_GPIO_Init+0x250>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01f      	beq.n	8006ebe <HAL_GPIO_Init+0x222>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef0 <HAL_GPIO_Init+0x254>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d019      	beq.n	8006eba <HAL_GPIO_Init+0x21e>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a1a      	ldr	r2, [pc, #104]	@ (8006ef4 <HAL_GPIO_Init+0x258>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d013      	beq.n	8006eb6 <HAL_GPIO_Init+0x21a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a19      	ldr	r2, [pc, #100]	@ (8006ef8 <HAL_GPIO_Init+0x25c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00d      	beq.n	8006eb2 <HAL_GPIO_Init+0x216>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a18      	ldr	r2, [pc, #96]	@ (8006efc <HAL_GPIO_Init+0x260>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d007      	beq.n	8006eae <HAL_GPIO_Init+0x212>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a17      	ldr	r2, [pc, #92]	@ (8006f00 <HAL_GPIO_Init+0x264>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d101      	bne.n	8006eaa <HAL_GPIO_Init+0x20e>
 8006ea6:	2309      	movs	r3, #9
 8006ea8:	e02d      	b.n	8006f06 <HAL_GPIO_Init+0x26a>
 8006eaa:	230a      	movs	r3, #10
 8006eac:	e02b      	b.n	8006f06 <HAL_GPIO_Init+0x26a>
 8006eae:	2308      	movs	r3, #8
 8006eb0:	e029      	b.n	8006f06 <HAL_GPIO_Init+0x26a>
 8006eb2:	2307      	movs	r3, #7
 8006eb4:	e027      	b.n	8006f06 <HAL_GPIO_Init+0x26a>
 8006eb6:	2306      	movs	r3, #6
 8006eb8:	e025      	b.n	8006f06 <HAL_GPIO_Init+0x26a>
 8006eba:	2305      	movs	r3, #5
 8006ebc:	e023      	b.n	8006f06 <HAL_GPIO_Init+0x26a>
 8006ebe:	2304      	movs	r3, #4
 8006ec0:	e021      	b.n	8006f06 <HAL_GPIO_Init+0x26a>
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e01f      	b.n	8006f06 <HAL_GPIO_Init+0x26a>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e01d      	b.n	8006f06 <HAL_GPIO_Init+0x26a>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e01b      	b.n	8006f06 <HAL_GPIO_Init+0x26a>
 8006ece:	bf00      	nop
 8006ed0:	58000080 	.word	0x58000080
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	58000400 	.word	0x58000400
 8006edc:	58020000 	.word	0x58020000
 8006ee0:	58020400 	.word	0x58020400
 8006ee4:	58020800 	.word	0x58020800
 8006ee8:	58020c00 	.word	0x58020c00
 8006eec:	58021000 	.word	0x58021000
 8006ef0:	58021400 	.word	0x58021400
 8006ef4:	58021800 	.word	0x58021800
 8006ef8:	58021c00 	.word	0x58021c00
 8006efc:	58022000 	.word	0x58022000
 8006f00:	58022400 	.word	0x58022400
 8006f04:	2300      	movs	r3, #0
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	f002 0203 	and.w	r2, r2, #3
 8006f0c:	0092      	lsls	r2, r2, #2
 8006f0e:	4093      	lsls	r3, r2
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f16:	4938      	ldr	r1, [pc, #224]	@ (8006ff8 <HAL_GPIO_Init+0x35c>)
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	089b      	lsrs	r3, r3, #2
 8006f1c:	3302      	adds	r3, #2
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	43db      	mvns	r3, r3
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	4013      	ands	r3, r2
 8006f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	4013      	ands	r3, r2
 8006f62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006f78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	43db      	mvns	r3, r3
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	43db      	mvns	r3, r3
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f47f ae63 	bne.w	8006cb0 <HAL_GPIO_Init+0x14>
  }
}
 8006fea:	bf00      	nop
 8006fec:	bf00      	nop
 8006fee:	3724      	adds	r7, #36	@ 0x24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	58000400 	.word	0x58000400

08006ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	807b      	strh	r3, [r7, #2]
 8007008:	4613      	mov	r3, r2
 800700a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800700c:	787b      	ldrb	r3, [r7, #1]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007012:	887a      	ldrh	r2, [r7, #2]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007018:	e003      	b.n	8007022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800701a:	887b      	ldrh	r3, [r7, #2]
 800701c:	041a      	lsls	r2, r3, #16
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	619a      	str	r2, [r3, #24]
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	4603      	mov	r3, r0
 8007036:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800703c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007040:	88fb      	ldrh	r3, [r7, #6]
 8007042:	4013      	ands	r3, r2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d008      	beq.n	800705a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007048:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800704c:	88fb      	ldrh	r3, [r7, #6]
 800704e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	4618      	mov	r0, r3
 8007056:	f7fa f931 	bl	80012bc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800706c:	4b19      	ldr	r3, [pc, #100]	@ (80070d4 <HAL_PWREx_ConfigSupply+0x70>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	2b04      	cmp	r3, #4
 8007076:	d00a      	beq.n	800708e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007078:	4b16      	ldr	r3, [pc, #88]	@ (80070d4 <HAL_PWREx_ConfigSupply+0x70>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	429a      	cmp	r2, r3
 8007084:	d001      	beq.n	800708a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e01f      	b.n	80070ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	e01d      	b.n	80070ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800708e:	4b11      	ldr	r3, [pc, #68]	@ (80070d4 <HAL_PWREx_ConfigSupply+0x70>)
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f023 0207 	bic.w	r2, r3, #7
 8007096:	490f      	ldr	r1, [pc, #60]	@ (80070d4 <HAL_PWREx_ConfigSupply+0x70>)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4313      	orrs	r3, r2
 800709c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800709e:	f7fb fbc7 	bl	8002830 <HAL_GetTick>
 80070a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070a4:	e009      	b.n	80070ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80070a6:	f7fb fbc3 	bl	8002830 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070b4:	d901      	bls.n	80070ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e007      	b.n	80070ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070ba:	4b06      	ldr	r3, [pc, #24]	@ (80070d4 <HAL_PWREx_ConfigSupply+0x70>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070c6:	d1ee      	bne.n	80070a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	58024800 	.word	0x58024800

080070d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08c      	sub	sp, #48	@ 0x30
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f000 bc48 	b.w	800797c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 8088 	beq.w	800720a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070fa:	4b99      	ldr	r3, [pc, #612]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007104:	4b96      	ldr	r3, [pc, #600]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007108:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800710a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710c:	2b10      	cmp	r3, #16
 800710e:	d007      	beq.n	8007120 <HAL_RCC_OscConfig+0x48>
 8007110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007112:	2b18      	cmp	r3, #24
 8007114:	d111      	bne.n	800713a <HAL_RCC_OscConfig+0x62>
 8007116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d10c      	bne.n	800713a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007120:	4b8f      	ldr	r3, [pc, #572]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d06d      	beq.n	8007208 <HAL_RCC_OscConfig+0x130>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d169      	bne.n	8007208 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	f000 bc21 	b.w	800797c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007142:	d106      	bne.n	8007152 <HAL_RCC_OscConfig+0x7a>
 8007144:	4b86      	ldr	r3, [pc, #536]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a85      	ldr	r2, [pc, #532]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 800714a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	e02e      	b.n	80071b0 <HAL_RCC_OscConfig+0xd8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10c      	bne.n	8007174 <HAL_RCC_OscConfig+0x9c>
 800715a:	4b81      	ldr	r3, [pc, #516]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a80      	ldr	r2, [pc, #512]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	4b7e      	ldr	r3, [pc, #504]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a7d      	ldr	r2, [pc, #500]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 800716c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	e01d      	b.n	80071b0 <HAL_RCC_OscConfig+0xd8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800717c:	d10c      	bne.n	8007198 <HAL_RCC_OscConfig+0xc0>
 800717e:	4b78      	ldr	r3, [pc, #480]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a77      	ldr	r2, [pc, #476]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	4b75      	ldr	r3, [pc, #468]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a74      	ldr	r2, [pc, #464]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	e00b      	b.n	80071b0 <HAL_RCC_OscConfig+0xd8>
 8007198:	4b71      	ldr	r3, [pc, #452]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a70      	ldr	r2, [pc, #448]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 800719e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	4b6e      	ldr	r3, [pc, #440]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a6d      	ldr	r2, [pc, #436]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80071aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d013      	beq.n	80071e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b8:	f7fb fb3a 	bl	8002830 <HAL_GetTick>
 80071bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071c0:	f7fb fb36 	bl	8002830 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b64      	cmp	r3, #100	@ 0x64
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e3d4      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071d2:	4b63      	ldr	r3, [pc, #396]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0f0      	beq.n	80071c0 <HAL_RCC_OscConfig+0xe8>
 80071de:	e014      	b.n	800720a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e0:	f7fb fb26 	bl	8002830 <HAL_GetTick>
 80071e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071e8:	f7fb fb22 	bl	8002830 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b64      	cmp	r3, #100	@ 0x64
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e3c0      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071fa:	4b59      	ldr	r3, [pc, #356]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f0      	bne.n	80071e8 <HAL_RCC_OscConfig+0x110>
 8007206:	e000      	b.n	800720a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 80ca 	beq.w	80073ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007218:	4b51      	ldr	r3, [pc, #324]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007220:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007222:	4b4f      	ldr	r3, [pc, #316]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007226:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d007      	beq.n	800723e <HAL_RCC_OscConfig+0x166>
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	2b18      	cmp	r3, #24
 8007232:	d156      	bne.n	80072e2 <HAL_RCC_OscConfig+0x20a>
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d151      	bne.n	80072e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800723e:	4b48      	ldr	r3, [pc, #288]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <HAL_RCC_OscConfig+0x17e>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e392      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007256:	4b42      	ldr	r3, [pc, #264]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f023 0219 	bic.w	r2, r3, #25
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	493f      	ldr	r1, [pc, #252]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007264:	4313      	orrs	r3, r2
 8007266:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007268:	f7fb fae2 	bl	8002830 <HAL_GetTick>
 800726c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007270:	f7fb fade 	bl	8002830 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e37c      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007282:	4b37      	ldr	r3, [pc, #220]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f0      	beq.n	8007270 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800728e:	f7fb fadb 	bl	8002848 <HAL_GetREVID>
 8007292:	4603      	mov	r3, r0
 8007294:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007298:	4293      	cmp	r3, r2
 800729a:	d817      	bhi.n	80072cc <HAL_RCC_OscConfig+0x1f4>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b40      	cmp	r3, #64	@ 0x40
 80072a2:	d108      	bne.n	80072b6 <HAL_RCC_OscConfig+0x1de>
 80072a4:	4b2e      	ldr	r3, [pc, #184]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80072ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80072ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072b4:	e07a      	b.n	80073ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b6:	4b2a      	ldr	r3, [pc, #168]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	031b      	lsls	r3, r3, #12
 80072c4:	4926      	ldr	r1, [pc, #152]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072ca:	e06f      	b.n	80073ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072cc:	4b24      	ldr	r3, [pc, #144]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	061b      	lsls	r3, r3, #24
 80072da:	4921      	ldr	r1, [pc, #132]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072e0:	e064      	b.n	80073ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d047      	beq.n	800737a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80072ea:	4b1d      	ldr	r3, [pc, #116]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f023 0219 	bic.w	r2, r3, #25
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	491a      	ldr	r1, [pc, #104]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fc:	f7fb fa98 	bl	8002830 <HAL_GetTick>
 8007300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007304:	f7fb fa94 	bl	8002830 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e332      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007316:	4b12      	ldr	r3, [pc, #72]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0f0      	beq.n	8007304 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007322:	f7fb fa91 	bl	8002848 <HAL_GetREVID>
 8007326:	4603      	mov	r3, r0
 8007328:	f241 0203 	movw	r2, #4099	@ 0x1003
 800732c:	4293      	cmp	r3, r2
 800732e:	d819      	bhi.n	8007364 <HAL_RCC_OscConfig+0x28c>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b40      	cmp	r3, #64	@ 0x40
 8007336:	d108      	bne.n	800734a <HAL_RCC_OscConfig+0x272>
 8007338:	4b09      	ldr	r3, [pc, #36]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007340:	4a07      	ldr	r2, [pc, #28]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 8007342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007346:	6053      	str	r3, [r2, #4]
 8007348:	e030      	b.n	80073ac <HAL_RCC_OscConfig+0x2d4>
 800734a:	4b05      	ldr	r3, [pc, #20]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	031b      	lsls	r3, r3, #12
 8007358:	4901      	ldr	r1, [pc, #4]	@ (8007360 <HAL_RCC_OscConfig+0x288>)
 800735a:	4313      	orrs	r3, r2
 800735c:	604b      	str	r3, [r1, #4]
 800735e:	e025      	b.n	80073ac <HAL_RCC_OscConfig+0x2d4>
 8007360:	58024400 	.word	0x58024400
 8007364:	4b9a      	ldr	r3, [pc, #616]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	061b      	lsls	r3, r3, #24
 8007372:	4997      	ldr	r1, [pc, #604]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007374:	4313      	orrs	r3, r2
 8007376:	604b      	str	r3, [r1, #4]
 8007378:	e018      	b.n	80073ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800737a:	4b95      	ldr	r3, [pc, #596]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a94      	ldr	r2, [pc, #592]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007380:	f023 0301 	bic.w	r3, r3, #1
 8007384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007386:	f7fb fa53 	bl	8002830 <HAL_GetTick>
 800738a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800738c:	e008      	b.n	80073a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800738e:	f7fb fa4f 	bl	8002830 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e2ed      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80073a0:	4b8b      	ldr	r3, [pc, #556]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1f0      	bne.n	800738e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80a9 	beq.w	800750c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073ba:	4b85      	ldr	r3, [pc, #532]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073c4:	4b82      	ldr	r3, [pc, #520]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80073c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d007      	beq.n	80073e0 <HAL_RCC_OscConfig+0x308>
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	2b18      	cmp	r3, #24
 80073d4:	d13a      	bne.n	800744c <HAL_RCC_OscConfig+0x374>
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f003 0303 	and.w	r3, r3, #3
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d135      	bne.n	800744c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80073e0:	4b7b      	ldr	r3, [pc, #492]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <HAL_RCC_OscConfig+0x320>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	2b80      	cmp	r3, #128	@ 0x80
 80073f2:	d001      	beq.n	80073f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e2c1      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073f8:	f7fb fa26 	bl	8002848 <HAL_GetREVID>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007402:	4293      	cmp	r3, r2
 8007404:	d817      	bhi.n	8007436 <HAL_RCC_OscConfig+0x35e>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	2b20      	cmp	r3, #32
 800740c:	d108      	bne.n	8007420 <HAL_RCC_OscConfig+0x348>
 800740e:	4b70      	ldr	r3, [pc, #448]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007416:	4a6e      	ldr	r2, [pc, #440]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800741c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800741e:	e075      	b.n	800750c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007420:	4b6b      	ldr	r3, [pc, #428]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	069b      	lsls	r3, r3, #26
 800742e:	4968      	ldr	r1, [pc, #416]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007430:	4313      	orrs	r3, r2
 8007432:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007434:	e06a      	b.n	800750c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007436:	4b66      	ldr	r3, [pc, #408]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	061b      	lsls	r3, r3, #24
 8007444:	4962      	ldr	r1, [pc, #392]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007446:	4313      	orrs	r3, r2
 8007448:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800744a:	e05f      	b.n	800750c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d042      	beq.n	80074da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007454:	4b5e      	ldr	r3, [pc, #376]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a5d      	ldr	r2, [pc, #372]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 800745a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800745e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007460:	f7fb f9e6 	bl	8002830 <HAL_GetTick>
 8007464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007468:	f7fb f9e2 	bl	8002830 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e280      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800747a:	4b55      	ldr	r3, [pc, #340]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0f0      	beq.n	8007468 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007486:	f7fb f9df 	bl	8002848 <HAL_GetREVID>
 800748a:	4603      	mov	r3, r0
 800748c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007490:	4293      	cmp	r3, r2
 8007492:	d817      	bhi.n	80074c4 <HAL_RCC_OscConfig+0x3ec>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	2b20      	cmp	r3, #32
 800749a:	d108      	bne.n	80074ae <HAL_RCC_OscConfig+0x3d6>
 800749c:	4b4c      	ldr	r3, [pc, #304]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80074a4:	4a4a      	ldr	r2, [pc, #296]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80074a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074aa:	6053      	str	r3, [r2, #4]
 80074ac:	e02e      	b.n	800750c <HAL_RCC_OscConfig+0x434>
 80074ae:	4b48      	ldr	r3, [pc, #288]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	069b      	lsls	r3, r3, #26
 80074bc:	4944      	ldr	r1, [pc, #272]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	604b      	str	r3, [r1, #4]
 80074c2:	e023      	b.n	800750c <HAL_RCC_OscConfig+0x434>
 80074c4:	4b42      	ldr	r3, [pc, #264]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	061b      	lsls	r3, r3, #24
 80074d2:	493f      	ldr	r1, [pc, #252]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60cb      	str	r3, [r1, #12]
 80074d8:	e018      	b.n	800750c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80074da:	4b3d      	ldr	r3, [pc, #244]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a3c      	ldr	r2, [pc, #240]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80074e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e6:	f7fb f9a3 	bl	8002830 <HAL_GetTick>
 80074ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80074ec:	e008      	b.n	8007500 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80074ee:	f7fb f99f 	bl	8002830 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d901      	bls.n	8007500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e23d      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007500:	4b33      	ldr	r3, [pc, #204]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f0      	bne.n	80074ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d036      	beq.n	8007586 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d019      	beq.n	8007554 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007520:	4b2b      	ldr	r3, [pc, #172]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007524:	4a2a      	ldr	r2, [pc, #168]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800752c:	f7fb f980 	bl	8002830 <HAL_GetTick>
 8007530:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007532:	e008      	b.n	8007546 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007534:	f7fb f97c 	bl	8002830 <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	2b02      	cmp	r3, #2
 8007540:	d901      	bls.n	8007546 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e21a      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007546:	4b22      	ldr	r3, [pc, #136]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0f0      	beq.n	8007534 <HAL_RCC_OscConfig+0x45c>
 8007552:	e018      	b.n	8007586 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007554:	4b1e      	ldr	r3, [pc, #120]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 8007556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007558:	4a1d      	ldr	r2, [pc, #116]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 800755a:	f023 0301 	bic.w	r3, r3, #1
 800755e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007560:	f7fb f966 	bl	8002830 <HAL_GetTick>
 8007564:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007566:	e008      	b.n	800757a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007568:	f7fb f962 	bl	8002830 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d901      	bls.n	800757a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e200      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800757a:	4b15      	ldr	r3, [pc, #84]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 800757c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1f0      	bne.n	8007568 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b00      	cmp	r3, #0
 8007590:	d039      	beq.n	8007606 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d01c      	beq.n	80075d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800759a:	4b0d      	ldr	r3, [pc, #52]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a0c      	ldr	r2, [pc, #48]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80075a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80075a6:	f7fb f943 	bl	8002830 <HAL_GetTick>
 80075aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80075ac:	e008      	b.n	80075c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075ae:	f7fb f93f 	bl	8002830 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d901      	bls.n	80075c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e1dd      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80075c0:	4b03      	ldr	r3, [pc, #12]	@ (80075d0 <HAL_RCC_OscConfig+0x4f8>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0f0      	beq.n	80075ae <HAL_RCC_OscConfig+0x4d6>
 80075cc:	e01b      	b.n	8007606 <HAL_RCC_OscConfig+0x52e>
 80075ce:	bf00      	nop
 80075d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80075d4:	4b9b      	ldr	r3, [pc, #620]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a9a      	ldr	r2, [pc, #616]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80075da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80075e0:	f7fb f926 	bl	8002830 <HAL_GetTick>
 80075e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80075e6:	e008      	b.n	80075fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075e8:	f7fb f922 	bl	8002830 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e1c0      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80075fa:	4b92      	ldr	r3, [pc, #584]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1f0      	bne.n	80075e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 8081 	beq.w	8007716 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007614:	4b8c      	ldr	r3, [pc, #560]	@ (8007848 <HAL_RCC_OscConfig+0x770>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a8b      	ldr	r2, [pc, #556]	@ (8007848 <HAL_RCC_OscConfig+0x770>)
 800761a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800761e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007620:	f7fb f906 	bl	8002830 <HAL_GetTick>
 8007624:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007628:	f7fb f902 	bl	8002830 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b64      	cmp	r3, #100	@ 0x64
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e1a0      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800763a:	4b83      	ldr	r3, [pc, #524]	@ (8007848 <HAL_RCC_OscConfig+0x770>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0f0      	beq.n	8007628 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d106      	bne.n	800765c <HAL_RCC_OscConfig+0x584>
 800764e:	4b7d      	ldr	r3, [pc, #500]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007652:	4a7c      	ldr	r2, [pc, #496]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007654:	f043 0301 	orr.w	r3, r3, #1
 8007658:	6713      	str	r3, [r2, #112]	@ 0x70
 800765a:	e02d      	b.n	80076b8 <HAL_RCC_OscConfig+0x5e0>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10c      	bne.n	800767e <HAL_RCC_OscConfig+0x5a6>
 8007664:	4b77      	ldr	r3, [pc, #476]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007668:	4a76      	ldr	r2, [pc, #472]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 800766a:	f023 0301 	bic.w	r3, r3, #1
 800766e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007670:	4b74      	ldr	r3, [pc, #464]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007674:	4a73      	ldr	r2, [pc, #460]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007676:	f023 0304 	bic.w	r3, r3, #4
 800767a:	6713      	str	r3, [r2, #112]	@ 0x70
 800767c:	e01c      	b.n	80076b8 <HAL_RCC_OscConfig+0x5e0>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2b05      	cmp	r3, #5
 8007684:	d10c      	bne.n	80076a0 <HAL_RCC_OscConfig+0x5c8>
 8007686:	4b6f      	ldr	r3, [pc, #444]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800768a:	4a6e      	ldr	r2, [pc, #440]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 800768c:	f043 0304 	orr.w	r3, r3, #4
 8007690:	6713      	str	r3, [r2, #112]	@ 0x70
 8007692:	4b6c      	ldr	r3, [pc, #432]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007696:	4a6b      	ldr	r2, [pc, #428]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007698:	f043 0301 	orr.w	r3, r3, #1
 800769c:	6713      	str	r3, [r2, #112]	@ 0x70
 800769e:	e00b      	b.n	80076b8 <HAL_RCC_OscConfig+0x5e0>
 80076a0:	4b68      	ldr	r3, [pc, #416]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80076a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a4:	4a67      	ldr	r2, [pc, #412]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80076a6:	f023 0301 	bic.w	r3, r3, #1
 80076aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80076ac:	4b65      	ldr	r3, [pc, #404]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80076ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b0:	4a64      	ldr	r2, [pc, #400]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80076b2:	f023 0304 	bic.w	r3, r3, #4
 80076b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d015      	beq.n	80076ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c0:	f7fb f8b6 	bl	8002830 <HAL_GetTick>
 80076c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076c6:	e00a      	b.n	80076de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076c8:	f7fb f8b2 	bl	8002830 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e14e      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076de:	4b59      	ldr	r3, [pc, #356]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80076e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0ee      	beq.n	80076c8 <HAL_RCC_OscConfig+0x5f0>
 80076ea:	e014      	b.n	8007716 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ec:	f7fb f8a0 	bl	8002830 <HAL_GetTick>
 80076f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80076f2:	e00a      	b.n	800770a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f4:	f7fb f89c 	bl	8002830 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007702:	4293      	cmp	r3, r2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e138      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800770a:	4b4e      	ldr	r3, [pc, #312]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 800770c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1ee      	bne.n	80076f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 812d 	beq.w	800797a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007720:	4b48      	ldr	r3, [pc, #288]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007728:	2b18      	cmp	r3, #24
 800772a:	f000 80bd 	beq.w	80078a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007732:	2b02      	cmp	r3, #2
 8007734:	f040 809e 	bne.w	8007874 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007738:	4b42      	ldr	r3, [pc, #264]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a41      	ldr	r2, [pc, #260]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 800773e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007744:	f7fb f874 	bl	8002830 <HAL_GetTick>
 8007748:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800774a:	e008      	b.n	800775e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800774c:	f7fb f870 	bl	8002830 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e10e      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800775e:	4b39      	ldr	r3, [pc, #228]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1f0      	bne.n	800774c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800776a:	4b36      	ldr	r3, [pc, #216]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 800776c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800776e:	4b37      	ldr	r3, [pc, #220]	@ (800784c <HAL_RCC_OscConfig+0x774>)
 8007770:	4013      	ands	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800777a:	0112      	lsls	r2, r2, #4
 800777c:	430a      	orrs	r2, r1
 800777e:	4931      	ldr	r1, [pc, #196]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007780:	4313      	orrs	r3, r2
 8007782:	628b      	str	r3, [r1, #40]	@ 0x28
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007788:	3b01      	subs	r3, #1
 800778a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007792:	3b01      	subs	r3, #1
 8007794:	025b      	lsls	r3, r3, #9
 8007796:	b29b      	uxth	r3, r3
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779e:	3b01      	subs	r3, #1
 80077a0:	041b      	lsls	r3, r3, #16
 80077a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ac:	3b01      	subs	r3, #1
 80077ae:	061b      	lsls	r3, r3, #24
 80077b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80077b4:	4923      	ldr	r1, [pc, #140]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80077ba:	4b22      	ldr	r3, [pc, #136]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80077bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077be:	4a21      	ldr	r2, [pc, #132]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80077c0:	f023 0301 	bic.w	r3, r3, #1
 80077c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80077c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80077c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077ca:	4b21      	ldr	r3, [pc, #132]	@ (8007850 <HAL_RCC_OscConfig+0x778>)
 80077cc:	4013      	ands	r3, r2
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80077d2:	00d2      	lsls	r2, r2, #3
 80077d4:	491b      	ldr	r1, [pc, #108]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80077da:	4b1a      	ldr	r3, [pc, #104]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80077dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077de:	f023 020c 	bic.w	r2, r3, #12
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e6:	4917      	ldr	r1, [pc, #92]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80077ec:	4b15      	ldr	r3, [pc, #84]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80077ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f0:	f023 0202 	bic.w	r2, r3, #2
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f8:	4912      	ldr	r1, [pc, #72]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80077fe:	4b11      	ldr	r3, [pc, #68]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007802:	4a10      	ldr	r2, [pc, #64]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007808:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800780a:	4b0e      	ldr	r3, [pc, #56]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 800780c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800780e:	4a0d      	ldr	r2, [pc, #52]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007814:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007816:	4b0b      	ldr	r3, [pc, #44]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781a:	4a0a      	ldr	r2, [pc, #40]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 800781c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007820:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007822:	4b08      	ldr	r3, [pc, #32]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007826:	4a07      	ldr	r2, [pc, #28]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007828:	f043 0301 	orr.w	r3, r3, #1
 800782c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800782e:	4b05      	ldr	r3, [pc, #20]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a04      	ldr	r2, [pc, #16]	@ (8007844 <HAL_RCC_OscConfig+0x76c>)
 8007834:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783a:	f7fa fff9 	bl	8002830 <HAL_GetTick>
 800783e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007840:	e011      	b.n	8007866 <HAL_RCC_OscConfig+0x78e>
 8007842:	bf00      	nop
 8007844:	58024400 	.word	0x58024400
 8007848:	58024800 	.word	0x58024800
 800784c:	fffffc0c 	.word	0xfffffc0c
 8007850:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007854:	f7fa ffec 	bl	8002830 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e08a      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007866:	4b47      	ldr	r3, [pc, #284]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <HAL_RCC_OscConfig+0x77c>
 8007872:	e082      	b.n	800797a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007874:	4b43      	ldr	r3, [pc, #268]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a42      	ldr	r2, [pc, #264]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 800787a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800787e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007880:	f7fa ffd6 	bl	8002830 <HAL_GetTick>
 8007884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007888:	f7fa ffd2 	bl	8002830 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e070      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800789a:	4b3a      	ldr	r3, [pc, #232]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1f0      	bne.n	8007888 <HAL_RCC_OscConfig+0x7b0>
 80078a6:	e068      	b.n	800797a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80078a8:	4b36      	ldr	r3, [pc, #216]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 80078aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80078ae:	4b35      	ldr	r3, [pc, #212]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 80078b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d031      	beq.n	8007920 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f003 0203 	and.w	r2, r3, #3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d12a      	bne.n	8007920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	091b      	lsrs	r3, r3, #4
 80078ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d122      	bne.n	8007920 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d11a      	bne.n	8007920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	0a5b      	lsrs	r3, r3, #9
 80078ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d111      	bne.n	8007920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	0c1b      	lsrs	r3, r3, #16
 8007900:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007908:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800790a:	429a      	cmp	r2, r3
 800790c:	d108      	bne.n	8007920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	0e1b      	lsrs	r3, r3, #24
 8007912:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800791c:	429a      	cmp	r2, r3
 800791e:	d001      	beq.n	8007924 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e02b      	b.n	800797c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007924:	4b17      	ldr	r3, [pc, #92]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 8007926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007928:	08db      	lsrs	r3, r3, #3
 800792a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800792e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	429a      	cmp	r2, r3
 8007938:	d01f      	beq.n	800797a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800793a:	4b12      	ldr	r3, [pc, #72]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 800793c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793e:	4a11      	ldr	r2, [pc, #68]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 8007940:	f023 0301 	bic.w	r3, r3, #1
 8007944:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007946:	f7fa ff73 	bl	8002830 <HAL_GetTick>
 800794a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800794c:	bf00      	nop
 800794e:	f7fa ff6f 	bl	8002830 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	4293      	cmp	r3, r2
 8007958:	d0f9      	beq.n	800794e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800795a:	4b0a      	ldr	r3, [pc, #40]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 800795c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800795e:	4b0a      	ldr	r3, [pc, #40]	@ (8007988 <HAL_RCC_OscConfig+0x8b0>)
 8007960:	4013      	ands	r3, r2
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007966:	00d2      	lsls	r2, r2, #3
 8007968:	4906      	ldr	r1, [pc, #24]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 800796a:	4313      	orrs	r3, r2
 800796c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800796e:	4b05      	ldr	r3, [pc, #20]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 8007970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007972:	4a04      	ldr	r2, [pc, #16]	@ (8007984 <HAL_RCC_OscConfig+0x8ac>)
 8007974:	f043 0301 	orr.w	r3, r3, #1
 8007978:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3730      	adds	r7, #48	@ 0x30
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	58024400 	.word	0x58024400
 8007988:	ffff0007 	.word	0xffff0007

0800798c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e19c      	b.n	8007cda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079a0:	4b8a      	ldr	r3, [pc, #552]	@ (8007bcc <HAL_RCC_ClockConfig+0x240>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 030f 	and.w	r3, r3, #15
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d910      	bls.n	80079d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ae:	4b87      	ldr	r3, [pc, #540]	@ (8007bcc <HAL_RCC_ClockConfig+0x240>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f023 020f 	bic.w	r2, r3, #15
 80079b6:	4985      	ldr	r1, [pc, #532]	@ (8007bcc <HAL_RCC_ClockConfig+0x240>)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079be:	4b83      	ldr	r3, [pc, #524]	@ (8007bcc <HAL_RCC_ClockConfig+0x240>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d001      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e184      	b.n	8007cda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d010      	beq.n	80079fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691a      	ldr	r2, [r3, #16]
 80079e0:	4b7b      	ldr	r3, [pc, #492]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d908      	bls.n	80079fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80079ec:	4b78      	ldr	r3, [pc, #480]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	4975      	ldr	r1, [pc, #468]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0308 	and.w	r3, r3, #8
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d010      	beq.n	8007a2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695a      	ldr	r2, [r3, #20]
 8007a0e:	4b70      	ldr	r3, [pc, #448]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d908      	bls.n	8007a2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	496a      	ldr	r1, [pc, #424]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d010      	beq.n	8007a5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699a      	ldr	r2, [r3, #24]
 8007a3c:	4b64      	ldr	r3, [pc, #400]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d908      	bls.n	8007a5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a48:	4b61      	ldr	r3, [pc, #388]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	495e      	ldr	r1, [pc, #376]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d010      	beq.n	8007a88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	69da      	ldr	r2, [r3, #28]
 8007a6a:	4b59      	ldr	r3, [pc, #356]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d908      	bls.n	8007a88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a76:	4b56      	ldr	r3, [pc, #344]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	4953      	ldr	r1, [pc, #332]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d010      	beq.n	8007ab6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	4b4d      	ldr	r3, [pc, #308]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	f003 030f 	and.w	r3, r3, #15
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d908      	bls.n	8007ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007aa4:	4b4a      	ldr	r3, [pc, #296]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	f023 020f 	bic.w	r2, r3, #15
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	4947      	ldr	r1, [pc, #284]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d055      	beq.n	8007b6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007ac2:	4b43      	ldr	r3, [pc, #268]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	4940      	ldr	r1, [pc, #256]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d107      	bne.n	8007aec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007adc:	4b3c      	ldr	r3, [pc, #240]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d121      	bne.n	8007b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e0f6      	b.n	8007cda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d107      	bne.n	8007b04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007af4:	4b36      	ldr	r3, [pc, #216]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d115      	bne.n	8007b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e0ea      	b.n	8007cda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d107      	bne.n	8007b1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b0c:	4b30      	ldr	r3, [pc, #192]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d109      	bne.n	8007b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e0de      	b.n	8007cda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e0d6      	b.n	8007cda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b2c:	4b28      	ldr	r3, [pc, #160]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	f023 0207 	bic.w	r2, r3, #7
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	4925      	ldr	r1, [pc, #148]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b3e:	f7fa fe77 	bl	8002830 <HAL_GetTick>
 8007b42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b44:	e00a      	b.n	8007b5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b46:	f7fa fe73 	bl	8002830 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e0be      	b.n	8007cda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	00db      	lsls	r3, r3, #3
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d1eb      	bne.n	8007b46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d010      	beq.n	8007b9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	4b14      	ldr	r3, [pc, #80]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	f003 030f 	and.w	r3, r3, #15
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d208      	bcs.n	8007b9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b8a:	4b11      	ldr	r3, [pc, #68]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	f023 020f 	bic.w	r2, r3, #15
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	490e      	ldr	r1, [pc, #56]	@ (8007bd0 <HAL_RCC_ClockConfig+0x244>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007bcc <HAL_RCC_ClockConfig+0x240>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 030f 	and.w	r3, r3, #15
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d214      	bcs.n	8007bd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007baa:	4b08      	ldr	r3, [pc, #32]	@ (8007bcc <HAL_RCC_ClockConfig+0x240>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f023 020f 	bic.w	r2, r3, #15
 8007bb2:	4906      	ldr	r1, [pc, #24]	@ (8007bcc <HAL_RCC_ClockConfig+0x240>)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bba:	4b04      	ldr	r3, [pc, #16]	@ (8007bcc <HAL_RCC_ClockConfig+0x240>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d005      	beq.n	8007bd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e086      	b.n	8007cda <HAL_RCC_ClockConfig+0x34e>
 8007bcc:	52002000 	.word	0x52002000
 8007bd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d010      	beq.n	8007c02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691a      	ldr	r2, [r3, #16]
 8007be4:	4b3f      	ldr	r3, [pc, #252]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d208      	bcs.n	8007c02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	4939      	ldr	r1, [pc, #228]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0308 	and.w	r3, r3, #8
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d010      	beq.n	8007c30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	695a      	ldr	r2, [r3, #20]
 8007c12:	4b34      	ldr	r3, [pc, #208]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d208      	bcs.n	8007c30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c1e:	4b31      	ldr	r3, [pc, #196]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	492e      	ldr	r1, [pc, #184]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0310 	and.w	r3, r3, #16
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d010      	beq.n	8007c5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	699a      	ldr	r2, [r3, #24]
 8007c40:	4b28      	ldr	r3, [pc, #160]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d208      	bcs.n	8007c5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007c4c:	4b25      	ldr	r3, [pc, #148]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	4922      	ldr	r1, [pc, #136]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d010      	beq.n	8007c8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69da      	ldr	r2, [r3, #28]
 8007c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d208      	bcs.n	8007c8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	4917      	ldr	r1, [pc, #92]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007c8c:	f000 f834 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 8007c90:	4602      	mov	r2, r0
 8007c92:	4b14      	ldr	r3, [pc, #80]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	0a1b      	lsrs	r3, r3, #8
 8007c98:	f003 030f 	and.w	r3, r3, #15
 8007c9c:	4912      	ldr	r1, [pc, #72]	@ (8007ce8 <HAL_RCC_ClockConfig+0x35c>)
 8007c9e:	5ccb      	ldrb	r3, [r1, r3]
 8007ca0:	f003 031f 	and.w	r3, r3, #31
 8007ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007caa:	4b0e      	ldr	r3, [pc, #56]	@ (8007ce4 <HAL_RCC_ClockConfig+0x358>)
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	f003 030f 	and.w	r3, r3, #15
 8007cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8007ce8 <HAL_RCC_ClockConfig+0x35c>)
 8007cb4:	5cd3      	ldrb	r3, [r2, r3]
 8007cb6:	f003 031f 	and.w	r3, r3, #31
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8007cec <HAL_RCC_ClockConfig+0x360>)
 8007cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8007cf0 <HAL_RCC_ClockConfig+0x364>)
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007cca:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf4 <HAL_RCC_ClockConfig+0x368>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fa f8f0 	bl	8001eb4 <HAL_InitTick>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	58024400 	.word	0x58024400
 8007ce8:	08021a64 	.word	0x08021a64
 8007cec:	24000008 	.word	0x24000008
 8007cf0:	24000004 	.word	0x24000004
 8007cf4:	2400000c 	.word	0x2400000c

08007cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b089      	sub	sp, #36	@ 0x24
 8007cfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cfe:	4bb3      	ldr	r3, [pc, #716]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d06:	2b18      	cmp	r3, #24
 8007d08:	f200 8155 	bhi.w	8007fb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8007d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d12:	bf00      	nop
 8007d14:	08007d79 	.word	0x08007d79
 8007d18:	08007fb7 	.word	0x08007fb7
 8007d1c:	08007fb7 	.word	0x08007fb7
 8007d20:	08007fb7 	.word	0x08007fb7
 8007d24:	08007fb7 	.word	0x08007fb7
 8007d28:	08007fb7 	.word	0x08007fb7
 8007d2c:	08007fb7 	.word	0x08007fb7
 8007d30:	08007fb7 	.word	0x08007fb7
 8007d34:	08007d9f 	.word	0x08007d9f
 8007d38:	08007fb7 	.word	0x08007fb7
 8007d3c:	08007fb7 	.word	0x08007fb7
 8007d40:	08007fb7 	.word	0x08007fb7
 8007d44:	08007fb7 	.word	0x08007fb7
 8007d48:	08007fb7 	.word	0x08007fb7
 8007d4c:	08007fb7 	.word	0x08007fb7
 8007d50:	08007fb7 	.word	0x08007fb7
 8007d54:	08007da5 	.word	0x08007da5
 8007d58:	08007fb7 	.word	0x08007fb7
 8007d5c:	08007fb7 	.word	0x08007fb7
 8007d60:	08007fb7 	.word	0x08007fb7
 8007d64:	08007fb7 	.word	0x08007fb7
 8007d68:	08007fb7 	.word	0x08007fb7
 8007d6c:	08007fb7 	.word	0x08007fb7
 8007d70:	08007fb7 	.word	0x08007fb7
 8007d74:	08007dab 	.word	0x08007dab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d78:	4b94      	ldr	r3, [pc, #592]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d009      	beq.n	8007d98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d84:	4b91      	ldr	r3, [pc, #580]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	08db      	lsrs	r3, r3, #3
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	4a90      	ldr	r2, [pc, #576]	@ (8007fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d90:	fa22 f303 	lsr.w	r3, r2, r3
 8007d94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007d96:	e111      	b.n	8007fbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007d98:	4b8d      	ldr	r3, [pc, #564]	@ (8007fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d9a:	61bb      	str	r3, [r7, #24]
      break;
 8007d9c:	e10e      	b.n	8007fbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8007fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007da0:	61bb      	str	r3, [r7, #24]
      break;
 8007da2:	e10b      	b.n	8007fbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007da4:	4b8c      	ldr	r3, [pc, #560]	@ (8007fd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007da6:	61bb      	str	r3, [r7, #24]
      break;
 8007da8:	e108      	b.n	8007fbc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007daa:	4b88      	ldr	r3, [pc, #544]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007db4:	4b85      	ldr	r3, [pc, #532]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db8:	091b      	lsrs	r3, r3, #4
 8007dba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007dc0:	4b82      	ldr	r3, [pc, #520]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007dca:	4b80      	ldr	r3, [pc, #512]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dce:	08db      	lsrs	r3, r3, #3
 8007dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	fb02 f303 	mul.w	r3, r2, r3
 8007dda:	ee07 3a90 	vmov	s15, r3
 8007dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 80e1 	beq.w	8007fb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	f000 8083 	beq.w	8007efc <HAL_RCC_GetSysClockFreq+0x204>
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	f200 80a1 	bhi.w	8007f40 <HAL_RCC_GetSysClockFreq+0x248>
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <HAL_RCC_GetSysClockFreq+0x114>
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d056      	beq.n	8007eb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007e0a:	e099      	b.n	8007f40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0320 	and.w	r3, r3, #32
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d02d      	beq.n	8007e74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e18:	4b6c      	ldr	r3, [pc, #432]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	08db      	lsrs	r3, r3, #3
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	4a6b      	ldr	r2, [pc, #428]	@ (8007fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e24:	fa22 f303 	lsr.w	r3, r2, r3
 8007e28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	ee07 3a90 	vmov	s15, r3
 8007e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e42:	4b62      	ldr	r3, [pc, #392]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007e72:	e087      	b.n	8007f84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	ee07 3a90 	vmov	s15, r3
 8007e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007fe0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e86:	4b51      	ldr	r3, [pc, #324]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8e:	ee07 3a90 	vmov	s15, r3
 8007e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007eb6:	e065      	b.n	8007f84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	ee07 3a90 	vmov	s15, r3
 8007ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eca:	4b40      	ldr	r3, [pc, #256]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ede:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007efa:	e043      	b.n	8007f84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	ee07 3a90 	vmov	s15, r3
 8007f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007fe8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f3e:	e021      	b.n	8007f84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f52:	4b1e      	ldr	r3, [pc, #120]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007f84:	4b11      	ldr	r3, [pc, #68]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f88:	0a5b      	lsrs	r3, r3, #9
 8007f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f8e:	3301      	adds	r3, #1
 8007f90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	ee07 3a90 	vmov	s15, r3
 8007f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fa8:	ee17 3a90 	vmov	r3, s15
 8007fac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007fae:	e005      	b.n	8007fbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61bb      	str	r3, [r7, #24]
      break;
 8007fb4:	e002      	b.n	8007fbc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007fb6:	4b07      	ldr	r3, [pc, #28]	@ (8007fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007fb8:	61bb      	str	r3, [r7, #24]
      break;
 8007fba:	bf00      	nop
  }

  return sysclockfreq;
 8007fbc:	69bb      	ldr	r3, [r7, #24]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3724      	adds	r7, #36	@ 0x24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	58024400 	.word	0x58024400
 8007fd0:	03d09000 	.word	0x03d09000
 8007fd4:	003d0900 	.word	0x003d0900
 8007fd8:	007a1200 	.word	0x007a1200
 8007fdc:	46000000 	.word	0x46000000
 8007fe0:	4c742400 	.word	0x4c742400
 8007fe4:	4a742400 	.word	0x4a742400
 8007fe8:	4af42400 	.word	0x4af42400

08007fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ff2:	f7ff fe81 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	4b10      	ldr	r3, [pc, #64]	@ (800803c <HAL_RCC_GetHCLKFreq+0x50>)
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	0a1b      	lsrs	r3, r3, #8
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	490f      	ldr	r1, [pc, #60]	@ (8008040 <HAL_RCC_GetHCLKFreq+0x54>)
 8008004:	5ccb      	ldrb	r3, [r1, r3]
 8008006:	f003 031f 	and.w	r3, r3, #31
 800800a:	fa22 f303 	lsr.w	r3, r2, r3
 800800e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008010:	4b0a      	ldr	r3, [pc, #40]	@ (800803c <HAL_RCC_GetHCLKFreq+0x50>)
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	f003 030f 	and.w	r3, r3, #15
 8008018:	4a09      	ldr	r2, [pc, #36]	@ (8008040 <HAL_RCC_GetHCLKFreq+0x54>)
 800801a:	5cd3      	ldrb	r3, [r2, r3]
 800801c:	f003 031f 	and.w	r3, r3, #31
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	fa22 f303 	lsr.w	r3, r2, r3
 8008026:	4a07      	ldr	r2, [pc, #28]	@ (8008044 <HAL_RCC_GetHCLKFreq+0x58>)
 8008028:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800802a:	4a07      	ldr	r2, [pc, #28]	@ (8008048 <HAL_RCC_GetHCLKFreq+0x5c>)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008030:	4b04      	ldr	r3, [pc, #16]	@ (8008044 <HAL_RCC_GetHCLKFreq+0x58>)
 8008032:	681b      	ldr	r3, [r3, #0]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	58024400 	.word	0x58024400
 8008040:	08021a64 	.word	0x08021a64
 8008044:	24000008 	.word	0x24000008
 8008048:	24000004 	.word	0x24000004

0800804c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008050:	f7ff ffcc 	bl	8007fec <HAL_RCC_GetHCLKFreq>
 8008054:	4602      	mov	r2, r0
 8008056:	4b06      	ldr	r3, [pc, #24]	@ (8008070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	091b      	lsrs	r3, r3, #4
 800805c:	f003 0307 	and.w	r3, r3, #7
 8008060:	4904      	ldr	r1, [pc, #16]	@ (8008074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008062:	5ccb      	ldrb	r3, [r1, r3]
 8008064:	f003 031f 	and.w	r3, r3, #31
 8008068:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800806c:	4618      	mov	r0, r3
 800806e:	bd80      	pop	{r7, pc}
 8008070:	58024400 	.word	0x58024400
 8008074:	08021a64 	.word	0x08021a64

08008078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800807c:	f7ff ffb6 	bl	8007fec <HAL_RCC_GetHCLKFreq>
 8008080:	4602      	mov	r2, r0
 8008082:	4b06      	ldr	r3, [pc, #24]	@ (800809c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	4904      	ldr	r1, [pc, #16]	@ (80080a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800808e:	5ccb      	ldrb	r3, [r1, r3]
 8008090:	f003 031f 	and.w	r3, r3, #31
 8008094:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008098:	4618      	mov	r0, r3
 800809a:	bd80      	pop	{r7, pc}
 800809c:	58024400 	.word	0x58024400
 80080a0:	08021a64 	.word	0x08021a64

080080a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	223f      	movs	r2, #63	@ 0x3f
 80080b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80080b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008120 <HAL_RCC_GetClockConfig+0x7c>)
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	f003 0207 	and.w	r2, r3, #7
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80080c0:	4b17      	ldr	r3, [pc, #92]	@ (8008120 <HAL_RCC_GetClockConfig+0x7c>)
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80080cc:	4b14      	ldr	r3, [pc, #80]	@ (8008120 <HAL_RCC_GetClockConfig+0x7c>)
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	f003 020f 	and.w	r2, r3, #15
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80080d8:	4b11      	ldr	r3, [pc, #68]	@ (8008120 <HAL_RCC_GetClockConfig+0x7c>)
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80080e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008120 <HAL_RCC_GetClockConfig+0x7c>)
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80080f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008120 <HAL_RCC_GetClockConfig+0x7c>)
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80080fc:	4b08      	ldr	r3, [pc, #32]	@ (8008120 <HAL_RCC_GetClockConfig+0x7c>)
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008108:	4b06      	ldr	r3, [pc, #24]	@ (8008124 <HAL_RCC_GetClockConfig+0x80>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 020f 	and.w	r2, r3, #15
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	601a      	str	r2, [r3, #0]
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	58024400 	.word	0x58024400
 8008124:	52002000 	.word	0x52002000

08008128 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800812c:	b0ca      	sub	sp, #296	@ 0x128
 800812e:	af00      	add	r7, sp, #0
 8008130:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008134:	2300      	movs	r3, #0
 8008136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800813a:	2300      	movs	r3, #0
 800813c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800814c:	2500      	movs	r5, #0
 800814e:	ea54 0305 	orrs.w	r3, r4, r5
 8008152:	d049      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800815a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800815e:	d02f      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008160:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008164:	d828      	bhi.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008166:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800816a:	d01a      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800816c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008170:	d822      	bhi.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800817a:	d007      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800817c:	e01c      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800817e:	4bb8      	ldr	r3, [pc, #736]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008182:	4ab7      	ldr	r2, [pc, #732]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008188:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800818a:	e01a      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800818c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008190:	3308      	adds	r3, #8
 8008192:	2102      	movs	r1, #2
 8008194:	4618      	mov	r0, r3
 8008196:	f002 fb61 	bl	800a85c <RCCEx_PLL2_Config>
 800819a:	4603      	mov	r3, r0
 800819c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081a0:	e00f      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a6:	3328      	adds	r3, #40	@ 0x28
 80081a8:	2102      	movs	r1, #2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f002 fc08 	bl	800a9c0 <RCCEx_PLL3_Config>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081b6:	e004      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081be:	e000      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80081c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10a      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80081ca:	4ba5      	ldr	r3, [pc, #660]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081d8:	4aa1      	ldr	r2, [pc, #644]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081da:	430b      	orrs	r3, r1
 80081dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80081de:	e003      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80081f4:	f04f 0900 	mov.w	r9, #0
 80081f8:	ea58 0309 	orrs.w	r3, r8, r9
 80081fc:	d047      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80081fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008204:	2b04      	cmp	r3, #4
 8008206:	d82a      	bhi.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008208:	a201      	add	r2, pc, #4	@ (adr r2, 8008210 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800820a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820e:	bf00      	nop
 8008210:	08008225 	.word	0x08008225
 8008214:	08008233 	.word	0x08008233
 8008218:	08008249 	.word	0x08008249
 800821c:	08008267 	.word	0x08008267
 8008220:	08008267 	.word	0x08008267
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008224:	4b8e      	ldr	r3, [pc, #568]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008228:	4a8d      	ldr	r2, [pc, #564]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800822a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800822e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008230:	e01a      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008236:	3308      	adds	r3, #8
 8008238:	2100      	movs	r1, #0
 800823a:	4618      	mov	r0, r3
 800823c:	f002 fb0e 	bl	800a85c <RCCEx_PLL2_Config>
 8008240:	4603      	mov	r3, r0
 8008242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008246:	e00f      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824c:	3328      	adds	r3, #40	@ 0x28
 800824e:	2100      	movs	r1, #0
 8008250:	4618      	mov	r0, r3
 8008252:	f002 fbb5 	bl	800a9c0 <RCCEx_PLL3_Config>
 8008256:	4603      	mov	r3, r0
 8008258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800825c:	e004      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008264:	e000      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008270:	4b7b      	ldr	r3, [pc, #492]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008274:	f023 0107 	bic.w	r1, r3, #7
 8008278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800827e:	4a78      	ldr	r2, [pc, #480]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008280:	430b      	orrs	r3, r1
 8008282:	6513      	str	r3, [r2, #80]	@ 0x50
 8008284:	e003      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800828a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800828e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800829a:	f04f 0b00 	mov.w	fp, #0
 800829e:	ea5a 030b 	orrs.w	r3, sl, fp
 80082a2:	d04c      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ae:	d030      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80082b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b4:	d829      	bhi.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80082b8:	d02d      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80082ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80082bc:	d825      	bhi.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082be:	2b80      	cmp	r3, #128	@ 0x80
 80082c0:	d018      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80082c2:	2b80      	cmp	r3, #128	@ 0x80
 80082c4:	d821      	bhi.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80082ca:	2b40      	cmp	r3, #64	@ 0x40
 80082cc:	d007      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80082ce:	e01c      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082d0:	4b63      	ldr	r3, [pc, #396]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d4:	4a62      	ldr	r2, [pc, #392]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80082dc:	e01c      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e2:	3308      	adds	r3, #8
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f002 fab8 	bl	800a85c <RCCEx_PLL2_Config>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80082f2:	e011      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f8:	3328      	adds	r3, #40	@ 0x28
 80082fa:	2100      	movs	r1, #0
 80082fc:	4618      	mov	r0, r3
 80082fe:	f002 fb5f 	bl	800a9c0 <RCCEx_PLL3_Config>
 8008302:	4603      	mov	r3, r0
 8008304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008308:	e006      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008310:	e002      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008312:	bf00      	nop
 8008314:	e000      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10a      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008320:	4b4f      	ldr	r3, [pc, #316]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008324:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800832e:	4a4c      	ldr	r2, [pc, #304]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008330:	430b      	orrs	r3, r1
 8008332:	6513      	str	r3, [r2, #80]	@ 0x50
 8008334:	e003      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800833a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800833e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800834a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800834e:	2300      	movs	r3, #0
 8008350:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008354:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008358:	460b      	mov	r3, r1
 800835a:	4313      	orrs	r3, r2
 800835c:	d053      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800835e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008362:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008366:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800836a:	d035      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800836c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008370:	d82e      	bhi.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008372:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008376:	d031      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008378:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800837c:	d828      	bhi.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800837e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008382:	d01a      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008384:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008388:	d822      	bhi.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800838e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008392:	d007      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008394:	e01c      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008396:	4b32      	ldr	r3, [pc, #200]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839a:	4a31      	ldr	r2, [pc, #196]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800839c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083a2:	e01c      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a8:	3308      	adds	r3, #8
 80083aa:	2100      	movs	r1, #0
 80083ac:	4618      	mov	r0, r3
 80083ae:	f002 fa55 	bl	800a85c <RCCEx_PLL2_Config>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80083b8:	e011      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083be:	3328      	adds	r3, #40	@ 0x28
 80083c0:	2100      	movs	r1, #0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f002 fafc 	bl	800a9c0 <RCCEx_PLL3_Config>
 80083c8:	4603      	mov	r3, r0
 80083ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083ce:	e006      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083d6:	e002      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80083d8:	bf00      	nop
 80083da:	e000      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80083dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10b      	bne.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80083e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80083ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80083f6:	4a1a      	ldr	r2, [pc, #104]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083f8:	430b      	orrs	r3, r1
 80083fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80083fc:	e003      	b.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008412:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008416:	2300      	movs	r3, #0
 8008418:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800841c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008420:	460b      	mov	r3, r1
 8008422:	4313      	orrs	r3, r2
 8008424:	d056      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800842e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008432:	d038      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008434:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008438:	d831      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800843a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800843e:	d034      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008440:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008444:	d82b      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800844a:	d01d      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800844c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008450:	d825      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d006      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008456:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800845a:	d00a      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800845c:	e01f      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800845e:	bf00      	nop
 8008460:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008464:	4ba2      	ldr	r3, [pc, #648]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008468:	4aa1      	ldr	r2, [pc, #644]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800846a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800846e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008470:	e01c      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008476:	3308      	adds	r3, #8
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f002 f9ee 	bl	800a85c <RCCEx_PLL2_Config>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008486:	e011      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848c:	3328      	adds	r3, #40	@ 0x28
 800848e:	2100      	movs	r1, #0
 8008490:	4618      	mov	r0, r3
 8008492:	f002 fa95 	bl	800a9c0 <RCCEx_PLL3_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800849c:	e006      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084a4:	e002      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80084a6:	bf00      	nop
 80084a8:	e000      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80084aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10b      	bne.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084b4:	4b8e      	ldr	r3, [pc, #568]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80084bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80084c4:	4a8a      	ldr	r2, [pc, #552]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084c6:	430b      	orrs	r3, r1
 80084c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80084ca:	e003      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80084d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80084e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80084e4:	2300      	movs	r3, #0
 80084e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80084ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80084ee:	460b      	mov	r3, r1
 80084f0:	4313      	orrs	r3, r2
 80084f2:	d03a      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80084f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084fa:	2b30      	cmp	r3, #48	@ 0x30
 80084fc:	d01f      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80084fe:	2b30      	cmp	r3, #48	@ 0x30
 8008500:	d819      	bhi.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008502:	2b20      	cmp	r3, #32
 8008504:	d00c      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008506:	2b20      	cmp	r3, #32
 8008508:	d815      	bhi.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d019      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800850e:	2b10      	cmp	r3, #16
 8008510:	d111      	bne.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008512:	4b77      	ldr	r3, [pc, #476]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008516:	4a76      	ldr	r2, [pc, #472]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800851c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800851e:	e011      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008524:	3308      	adds	r3, #8
 8008526:	2102      	movs	r1, #2
 8008528:	4618      	mov	r0, r3
 800852a:	f002 f997 	bl	800a85c <RCCEx_PLL2_Config>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008534:	e006      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800853c:	e002      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800853e:	bf00      	nop
 8008540:	e000      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800854c:	4b68      	ldr	r3, [pc, #416]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800854e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008550:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800855a:	4a65      	ldr	r2, [pc, #404]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800855c:	430b      	orrs	r3, r1
 800855e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008560:	e003      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008576:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800857a:	2300      	movs	r3, #0
 800857c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008580:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008584:	460b      	mov	r3, r1
 8008586:	4313      	orrs	r3, r2
 8008588:	d051      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800858a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800858e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008594:	d035      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008596:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800859a:	d82e      	bhi.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800859c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085a0:	d031      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80085a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085a6:	d828      	bhi.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ac:	d01a      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80085ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085b2:	d822      	bhi.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80085b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085bc:	d007      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80085be:	e01c      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085c0:	4b4b      	ldr	r3, [pc, #300]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c4:	4a4a      	ldr	r2, [pc, #296]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085cc:	e01c      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d2:	3308      	adds	r3, #8
 80085d4:	2100      	movs	r1, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f002 f940 	bl	800a85c <RCCEx_PLL2_Config>
 80085dc:	4603      	mov	r3, r0
 80085de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085e2:	e011      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e8:	3328      	adds	r3, #40	@ 0x28
 80085ea:	2100      	movs	r1, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	f002 f9e7 	bl	800a9c0 <RCCEx_PLL3_Config>
 80085f2:	4603      	mov	r3, r0
 80085f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085f8:	e006      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008600:	e002      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008602:	bf00      	nop
 8008604:	e000      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008610:	4b37      	ldr	r3, [pc, #220]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008614:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800861c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800861e:	4a34      	ldr	r2, [pc, #208]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008620:	430b      	orrs	r3, r1
 8008622:	6513      	str	r3, [r2, #80]	@ 0x50
 8008624:	e003      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800862a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800862e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800863a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800863e:	2300      	movs	r3, #0
 8008640:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008644:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008648:	460b      	mov	r3, r1
 800864a:	4313      	orrs	r3, r2
 800864c:	d056      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800864e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008658:	d033      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800865a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800865e:	d82c      	bhi.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008660:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008664:	d02f      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008666:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800866a:	d826      	bhi.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800866c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008670:	d02b      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008672:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008676:	d820      	bhi.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800867c:	d012      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800867e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008682:	d81a      	bhi.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008684:	2b00      	cmp	r3, #0
 8008686:	d022      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800868c:	d115      	bne.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800868e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008692:	3308      	adds	r3, #8
 8008694:	2101      	movs	r1, #1
 8008696:	4618      	mov	r0, r3
 8008698:	f002 f8e0 	bl	800a85c <RCCEx_PLL2_Config>
 800869c:	4603      	mov	r3, r0
 800869e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086a2:	e015      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a8:	3328      	adds	r3, #40	@ 0x28
 80086aa:	2101      	movs	r1, #1
 80086ac:	4618      	mov	r0, r3
 80086ae:	f002 f987 	bl	800a9c0 <RCCEx_PLL3_Config>
 80086b2:	4603      	mov	r3, r0
 80086b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086b8:	e00a      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086c0:	e006      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086c2:	bf00      	nop
 80086c4:	e004      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086c6:	bf00      	nop
 80086c8:	e002      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086ca:	bf00      	nop
 80086cc:	e000      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10d      	bne.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80086d8:	4b05      	ldr	r3, [pc, #20]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80086e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086e6:	4a02      	ldr	r2, [pc, #8]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086e8:	430b      	orrs	r3, r1
 80086ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80086ec:	e006      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80086ee:	bf00      	nop
 80086f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80086fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008704:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800870c:	2300      	movs	r3, #0
 800870e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008712:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008716:	460b      	mov	r3, r1
 8008718:	4313      	orrs	r3, r2
 800871a:	d055      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800871c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008720:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008724:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008728:	d033      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800872a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800872e:	d82c      	bhi.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008734:	d02f      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800873a:	d826      	bhi.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800873c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008740:	d02b      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008742:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008746:	d820      	bhi.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800874c:	d012      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800874e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008752:	d81a      	bhi.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008754:	2b00      	cmp	r3, #0
 8008756:	d022      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800875c:	d115      	bne.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800875e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008762:	3308      	adds	r3, #8
 8008764:	2101      	movs	r1, #1
 8008766:	4618      	mov	r0, r3
 8008768:	f002 f878 	bl	800a85c <RCCEx_PLL2_Config>
 800876c:	4603      	mov	r3, r0
 800876e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008772:	e015      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008778:	3328      	adds	r3, #40	@ 0x28
 800877a:	2101      	movs	r1, #1
 800877c:	4618      	mov	r0, r3
 800877e:	f002 f91f 	bl	800a9c0 <RCCEx_PLL3_Config>
 8008782:	4603      	mov	r3, r0
 8008784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008788:	e00a      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008790:	e006      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008792:	bf00      	nop
 8008794:	e004      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008796:	bf00      	nop
 8008798:	e002      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800879a:	bf00      	nop
 800879c:	e000      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800879e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10b      	bne.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80087a8:	4ba3      	ldr	r3, [pc, #652]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80087b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087b8:	4a9f      	ldr	r2, [pc, #636]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087ba:	430b      	orrs	r3, r1
 80087bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80087be:	e003      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80087c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80087d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087d8:	2300      	movs	r3, #0
 80087da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80087de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80087e2:	460b      	mov	r3, r1
 80087e4:	4313      	orrs	r3, r2
 80087e6:	d037      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80087e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f2:	d00e      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80087f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f8:	d816      	bhi.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d018      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80087fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008802:	d111      	bne.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008804:	4b8c      	ldr	r3, [pc, #560]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008808:	4a8b      	ldr	r2, [pc, #556]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800880a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800880e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008810:	e00f      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008816:	3308      	adds	r3, #8
 8008818:	2101      	movs	r1, #1
 800881a:	4618      	mov	r0, r3
 800881c:	f002 f81e 	bl	800a85c <RCCEx_PLL2_Config>
 8008820:	4603      	mov	r3, r0
 8008822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008826:	e004      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800882e:	e000      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10a      	bne.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800883a:	4b7f      	ldr	r3, [pc, #508]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800883c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800883e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008848:	4a7b      	ldr	r2, [pc, #492]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800884a:	430b      	orrs	r3, r1
 800884c:	6513      	str	r3, [r2, #80]	@ 0x50
 800884e:	e003      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008868:	2300      	movs	r3, #0
 800886a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800886e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008872:	460b      	mov	r3, r1
 8008874:	4313      	orrs	r3, r2
 8008876:	d039      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800887e:	2b03      	cmp	r3, #3
 8008880:	d81c      	bhi.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008882:	a201      	add	r2, pc, #4	@ (adr r2, 8008888 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088c5 	.word	0x080088c5
 800888c:	08008899 	.word	0x08008899
 8008890:	080088a7 	.word	0x080088a7
 8008894:	080088c5 	.word	0x080088c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008898:	4b67      	ldr	r3, [pc, #412]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800889a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889c:	4a66      	ldr	r2, [pc, #408]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800889e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088a4:	e00f      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088aa:	3308      	adds	r3, #8
 80088ac:	2102      	movs	r1, #2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f001 ffd4 	bl	800a85c <RCCEx_PLL2_Config>
 80088b4:	4603      	mov	r3, r0
 80088b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088ba:	e004      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088c2:	e000      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80088c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10a      	bne.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80088ce:	4b5a      	ldr	r3, [pc, #360]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088d2:	f023 0103 	bic.w	r1, r3, #3
 80088d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088dc:	4a56      	ldr	r2, [pc, #344]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088de:	430b      	orrs	r3, r1
 80088e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088e2:	e003      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80088f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088fc:	2300      	movs	r3, #0
 80088fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008902:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008906:	460b      	mov	r3, r1
 8008908:	4313      	orrs	r3, r2
 800890a:	f000 809f 	beq.w	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800890e:	4b4b      	ldr	r3, [pc, #300]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a4a      	ldr	r2, [pc, #296]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008918:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800891a:	f7f9 ff89 	bl	8002830 <HAL_GetTick>
 800891e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008922:	e00b      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008924:	f7f9 ff84 	bl	8002830 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	2b64      	cmp	r3, #100	@ 0x64
 8008932:	d903      	bls.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008934:	2303      	movs	r3, #3
 8008936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800893a:	e005      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800893c:	4b3f      	ldr	r3, [pc, #252]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0ed      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800894c:	2b00      	cmp	r3, #0
 800894e:	d179      	bne.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008950:	4b39      	ldr	r3, [pc, #228]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008952:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008958:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800895c:	4053      	eors	r3, r2
 800895e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008962:	2b00      	cmp	r3, #0
 8008964:	d015      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008966:	4b34      	ldr	r3, [pc, #208]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800896a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800896e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008972:	4b31      	ldr	r3, [pc, #196]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008976:	4a30      	ldr	r2, [pc, #192]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800897c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800897e:	4b2e      	ldr	r3, [pc, #184]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008982:	4a2d      	ldr	r2, [pc, #180]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008988:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800898a:	4a2b      	ldr	r2, [pc, #172]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800898c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008990:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008996:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800899a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800899e:	d118      	bne.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a0:	f7f9 ff46 	bl	8002830 <HAL_GetTick>
 80089a4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089a8:	e00d      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089aa:	f7f9 ff41 	bl	8002830 <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80089b4:	1ad2      	subs	r2, r2, r3
 80089b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d903      	bls.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80089c4:	e005      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089c6:	4b1c      	ldr	r3, [pc, #112]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0eb      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80089d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d129      	bne.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089ea:	d10e      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80089ec:	4b12      	ldr	r3, [pc, #72]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80089f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089fc:	091a      	lsrs	r2, r3, #4
 80089fe:	4b10      	ldr	r3, [pc, #64]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008a00:	4013      	ands	r3, r2
 8008a02:	4a0d      	ldr	r2, [pc, #52]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a04:	430b      	orrs	r3, r1
 8008a06:	6113      	str	r3, [r2, #16]
 8008a08:	e005      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a14:	6113      	str	r3, [r2, #16]
 8008a16:	4b08      	ldr	r3, [pc, #32]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a18:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a26:	4a04      	ldr	r2, [pc, #16]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a2c:	e00e      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008a36:	e009      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008a38:	58024400 	.word	0x58024400
 8008a3c:	58024800 	.word	0x58024800
 8008a40:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	f002 0301 	and.w	r3, r2, #1
 8008a58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a66:	460b      	mov	r3, r1
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	f000 8089 	beq.w	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a74:	2b28      	cmp	r3, #40	@ 0x28
 8008a76:	d86b      	bhi.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008a78:	a201      	add	r2, pc, #4	@ (adr r2, 8008a80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7e:	bf00      	nop
 8008a80:	08008b59 	.word	0x08008b59
 8008a84:	08008b51 	.word	0x08008b51
 8008a88:	08008b51 	.word	0x08008b51
 8008a8c:	08008b51 	.word	0x08008b51
 8008a90:	08008b51 	.word	0x08008b51
 8008a94:	08008b51 	.word	0x08008b51
 8008a98:	08008b51 	.word	0x08008b51
 8008a9c:	08008b51 	.word	0x08008b51
 8008aa0:	08008b25 	.word	0x08008b25
 8008aa4:	08008b51 	.word	0x08008b51
 8008aa8:	08008b51 	.word	0x08008b51
 8008aac:	08008b51 	.word	0x08008b51
 8008ab0:	08008b51 	.word	0x08008b51
 8008ab4:	08008b51 	.word	0x08008b51
 8008ab8:	08008b51 	.word	0x08008b51
 8008abc:	08008b51 	.word	0x08008b51
 8008ac0:	08008b3b 	.word	0x08008b3b
 8008ac4:	08008b51 	.word	0x08008b51
 8008ac8:	08008b51 	.word	0x08008b51
 8008acc:	08008b51 	.word	0x08008b51
 8008ad0:	08008b51 	.word	0x08008b51
 8008ad4:	08008b51 	.word	0x08008b51
 8008ad8:	08008b51 	.word	0x08008b51
 8008adc:	08008b51 	.word	0x08008b51
 8008ae0:	08008b59 	.word	0x08008b59
 8008ae4:	08008b51 	.word	0x08008b51
 8008ae8:	08008b51 	.word	0x08008b51
 8008aec:	08008b51 	.word	0x08008b51
 8008af0:	08008b51 	.word	0x08008b51
 8008af4:	08008b51 	.word	0x08008b51
 8008af8:	08008b51 	.word	0x08008b51
 8008afc:	08008b51 	.word	0x08008b51
 8008b00:	08008b59 	.word	0x08008b59
 8008b04:	08008b51 	.word	0x08008b51
 8008b08:	08008b51 	.word	0x08008b51
 8008b0c:	08008b51 	.word	0x08008b51
 8008b10:	08008b51 	.word	0x08008b51
 8008b14:	08008b51 	.word	0x08008b51
 8008b18:	08008b51 	.word	0x08008b51
 8008b1c:	08008b51 	.word	0x08008b51
 8008b20:	08008b59 	.word	0x08008b59
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b28:	3308      	adds	r3, #8
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 fe95 	bl	800a85c <RCCEx_PLL2_Config>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b38:	e00f      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b3e:	3328      	adds	r3, #40	@ 0x28
 8008b40:	2101      	movs	r1, #1
 8008b42:	4618      	mov	r0, r3
 8008b44:	f001 ff3c 	bl	800a9c0 <RCCEx_PLL3_Config>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b4e:	e004      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b56:	e000      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10a      	bne.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b62:	4bbf      	ldr	r3, [pc, #764]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b70:	4abb      	ldr	r2, [pc, #748]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b72:	430b      	orrs	r3, r1
 8008b74:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b76:	e003      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f002 0302 	and.w	r3, r2, #2
 8008b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b90:	2300      	movs	r3, #0
 8008b92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008b96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	d041      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ba6:	2b05      	cmp	r3, #5
 8008ba8:	d824      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008baa:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb0:	08008bfd 	.word	0x08008bfd
 8008bb4:	08008bc9 	.word	0x08008bc9
 8008bb8:	08008bdf 	.word	0x08008bdf
 8008bbc:	08008bfd 	.word	0x08008bfd
 8008bc0:	08008bfd 	.word	0x08008bfd
 8008bc4:	08008bfd 	.word	0x08008bfd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bcc:	3308      	adds	r3, #8
 8008bce:	2101      	movs	r1, #1
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f001 fe43 	bl	800a85c <RCCEx_PLL2_Config>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008bdc:	e00f      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be2:	3328      	adds	r3, #40	@ 0x28
 8008be4:	2101      	movs	r1, #1
 8008be6:	4618      	mov	r0, r3
 8008be8:	f001 feea 	bl	800a9c0 <RCCEx_PLL3_Config>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008bf2:	e004      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bfa:	e000      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10a      	bne.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c06:	4b96      	ldr	r3, [pc, #600]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c0a:	f023 0107 	bic.w	r1, r3, #7
 8008c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c14:	4a92      	ldr	r2, [pc, #584]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c16:	430b      	orrs	r3, r1
 8008c18:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c1a:	e003      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2c:	f002 0304 	and.w	r3, r2, #4
 8008c30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c34:	2300      	movs	r3, #0
 8008c36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4313      	orrs	r3, r2
 8008c42:	d044      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c4c:	2b05      	cmp	r3, #5
 8008c4e:	d825      	bhi.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008c50:	a201      	add	r2, pc, #4	@ (adr r2, 8008c58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c56:	bf00      	nop
 8008c58:	08008ca5 	.word	0x08008ca5
 8008c5c:	08008c71 	.word	0x08008c71
 8008c60:	08008c87 	.word	0x08008c87
 8008c64:	08008ca5 	.word	0x08008ca5
 8008c68:	08008ca5 	.word	0x08008ca5
 8008c6c:	08008ca5 	.word	0x08008ca5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c74:	3308      	adds	r3, #8
 8008c76:	2101      	movs	r1, #1
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f001 fdef 	bl	800a85c <RCCEx_PLL2_Config>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008c84:	e00f      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c8a:	3328      	adds	r3, #40	@ 0x28
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 fe96 	bl	800a9c0 <RCCEx_PLL3_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008c9a:	e004      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ca2:	e000      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10b      	bne.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cae:	4b6c      	ldr	r3, [pc, #432]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cb2:	f023 0107 	bic.w	r1, r3, #7
 8008cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cbe:	4a68      	ldr	r2, [pc, #416]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cc4:	e003      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	f002 0320 	and.w	r3, r2, #32
 8008cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4313      	orrs	r3, r2
 8008cec:	d055      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cfa:	d033      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d00:	d82c      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d06:	d02f      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d0c:	d826      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d12:	d02b      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008d14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d18:	d820      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d1e:	d012      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d24:	d81a      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d022      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008d2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d2e:	d115      	bne.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d34:	3308      	adds	r3, #8
 8008d36:	2100      	movs	r1, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f001 fd8f 	bl	800a85c <RCCEx_PLL2_Config>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d44:	e015      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d4a:	3328      	adds	r3, #40	@ 0x28
 8008d4c:	2102      	movs	r1, #2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 fe36 	bl	800a9c0 <RCCEx_PLL3_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d5a:	e00a      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d62:	e006      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d64:	bf00      	nop
 8008d66:	e004      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d68:	bf00      	nop
 8008d6a:	e002      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d6c:	bf00      	nop
 8008d6e:	e000      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10b      	bne.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d7a:	4b39      	ldr	r3, [pc, #228]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d8a:	4a35      	ldr	r2, [pc, #212]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d90:	e003      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008daa:	2300      	movs	r3, #0
 8008dac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008db0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4313      	orrs	r3, r2
 8008db8:	d058      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008dc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008dc6:	d033      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008dc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008dcc:	d82c      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd2:	d02f      	beq.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd8:	d826      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008dda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008dde:	d02b      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008de0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008de4:	d820      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008de6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dea:	d012      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008df0:	d81a      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d022      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dfa:	d115      	bne.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e00:	3308      	adds	r3, #8
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f001 fd29 	bl	800a85c <RCCEx_PLL2_Config>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e10:	e015      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e16:	3328      	adds	r3, #40	@ 0x28
 8008e18:	2102      	movs	r1, #2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f001 fdd0 	bl	800a9c0 <RCCEx_PLL3_Config>
 8008e20:	4603      	mov	r3, r0
 8008e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e26:	e00a      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e2e:	e006      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e30:	bf00      	nop
 8008e32:	e004      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e34:	bf00      	nop
 8008e36:	e002      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e38:	bf00      	nop
 8008e3a:	e000      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10e      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e46:	4b06      	ldr	r3, [pc, #24]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e4a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e56:	4a02      	ldr	r2, [pc, #8]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e58:	430b      	orrs	r3, r1
 8008e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e5c:	e006      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008e5e:	bf00      	nop
 8008e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008e86:	460b      	mov	r3, r1
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	d055      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008e98:	d033      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008e9a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008e9e:	d82c      	bhi.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ea4:	d02f      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008eaa:	d826      	bhi.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008eac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008eb0:	d02b      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008eb2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008eb6:	d820      	bhi.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ebc:	d012      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008ebe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ec2:	d81a      	bhi.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d022      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ecc:	d115      	bne.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 fcc0 	bl	800a85c <RCCEx_PLL2_Config>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ee2:	e015      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee8:	3328      	adds	r3, #40	@ 0x28
 8008eea:	2102      	movs	r1, #2
 8008eec:	4618      	mov	r0, r3
 8008eee:	f001 fd67 	bl	800a9c0 <RCCEx_PLL3_Config>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ef8:	e00a      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f00:	e006      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f02:	bf00      	nop
 8008f04:	e004      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f06:	bf00      	nop
 8008f08:	e002      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f0a:	bf00      	nop
 8008f0c:	e000      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10b      	bne.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f18:	4ba1      	ldr	r3, [pc, #644]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f28:	4a9d      	ldr	r2, [pc, #628]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f2a:	430b      	orrs	r3, r1
 8008f2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f2e:	e003      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	f002 0308 	and.w	r3, r2, #8
 8008f44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008f52:	460b      	mov	r3, r1
 8008f54:	4313      	orrs	r3, r2
 8008f56:	d01e      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f64:	d10c      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f6a:	3328      	adds	r3, #40	@ 0x28
 8008f6c:	2102      	movs	r1, #2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f001 fd26 	bl	800a9c0 <RCCEx_PLL3_Config>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d002      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008f80:	4b87      	ldr	r3, [pc, #540]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f90:	4a83      	ldr	r2, [pc, #524]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f92:	430b      	orrs	r3, r1
 8008f94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9e:	f002 0310 	and.w	r3, r2, #16
 8008fa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	d01e      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fc2:	d10c      	bne.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc8:	3328      	adds	r3, #40	@ 0x28
 8008fca:	2102      	movs	r1, #2
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f001 fcf7 	bl	800a9c0 <RCCEx_PLL3_Config>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008fde:	4b70      	ldr	r3, [pc, #448]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fe2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fee:	4a6c      	ldr	r2, [pc, #432]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009004:	2300      	movs	r3, #0
 8009006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800900a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800900e:	460b      	mov	r3, r1
 8009010:	4313      	orrs	r3, r2
 8009012:	d03e      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800901c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009020:	d022      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009026:	d81b      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800902c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009030:	d00b      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009032:	e015      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009038:	3308      	adds	r3, #8
 800903a:	2100      	movs	r1, #0
 800903c:	4618      	mov	r0, r3
 800903e:	f001 fc0d 	bl	800a85c <RCCEx_PLL2_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009048:	e00f      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800904a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800904e:	3328      	adds	r3, #40	@ 0x28
 8009050:	2102      	movs	r1, #2
 8009052:	4618      	mov	r0, r3
 8009054:	f001 fcb4 	bl	800a9c0 <RCCEx_PLL3_Config>
 8009058:	4603      	mov	r3, r0
 800905a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800905e:	e004      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009066:	e000      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800906a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10b      	bne.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009072:	4b4b      	ldr	r3, [pc, #300]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009076:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800907a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800907e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009082:	4a47      	ldr	r2, [pc, #284]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009084:	430b      	orrs	r3, r1
 8009086:	6593      	str	r3, [r2, #88]	@ 0x58
 8009088:	e003      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800908e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800909e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090a0:	2300      	movs	r3, #0
 80090a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80090a8:	460b      	mov	r3, r1
 80090aa:	4313      	orrs	r3, r2
 80090ac:	d03b      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80090ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090ba:	d01f      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80090bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090c0:	d818      	bhi.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80090c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090c6:	d003      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80090c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090cc:	d007      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80090ce:	e011      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090d0:	4b33      	ldr	r3, [pc, #204]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	4a32      	ldr	r2, [pc, #200]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80090dc:	e00f      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e2:	3328      	adds	r3, #40	@ 0x28
 80090e4:	2101      	movs	r1, #1
 80090e6:	4618      	mov	r0, r3
 80090e8:	f001 fc6a 	bl	800a9c0 <RCCEx_PLL3_Config>
 80090ec:	4603      	mov	r3, r0
 80090ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80090f2:	e004      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090fa:	e000      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80090fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10b      	bne.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009106:	4b26      	ldr	r3, [pc, #152]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800910e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009116:	4a22      	ldr	r2, [pc, #136]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009118:	430b      	orrs	r3, r1
 800911a:	6553      	str	r3, [r2, #84]	@ 0x54
 800911c:	e003      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009132:	673b      	str	r3, [r7, #112]	@ 0x70
 8009134:	2300      	movs	r3, #0
 8009136:	677b      	str	r3, [r7, #116]	@ 0x74
 8009138:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800913c:	460b      	mov	r3, r1
 800913e:	4313      	orrs	r3, r2
 8009140:	d034      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800914c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009150:	d007      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009152:	e011      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009154:	4b12      	ldr	r3, [pc, #72]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009158:	4a11      	ldr	r2, [pc, #68]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800915a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800915e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009160:	e00e      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009166:	3308      	adds	r3, #8
 8009168:	2102      	movs	r1, #2
 800916a:	4618      	mov	r0, r3
 800916c:	f001 fb76 	bl	800a85c <RCCEx_PLL2_Config>
 8009170:	4603      	mov	r3, r0
 8009172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009176:	e003      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800917e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10d      	bne.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009188:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800918a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800918c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009196:	4a02      	ldr	r2, [pc, #8]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009198:	430b      	orrs	r3, r1
 800919a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800919c:	e006      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800919e:	bf00      	nop
 80091a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80091b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091ba:	2300      	movs	r3, #0
 80091bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80091c2:	460b      	mov	r3, r1
 80091c4:	4313      	orrs	r3, r2
 80091c6:	d00c      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091cc:	3328      	adds	r3, #40	@ 0x28
 80091ce:	2102      	movs	r1, #2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f001 fbf5 	bl	800a9c0 <RCCEx_PLL3_Config>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80091ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80091f0:	2300      	movs	r3, #0
 80091f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80091f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80091f8:	460b      	mov	r3, r1
 80091fa:	4313      	orrs	r3, r2
 80091fc:	d038      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80091fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009206:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800920a:	d018      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800920c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009210:	d811      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009216:	d014      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800921c:	d80b      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d011      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009226:	d106      	bne.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009228:	4bc3      	ldr	r3, [pc, #780]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800922a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922c:	4ac2      	ldr	r2, [pc, #776]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800922e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009234:	e008      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800923c:	e004      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800923e:	bf00      	nop
 8009240:	e002      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009242:	bf00      	nop
 8009244:	e000      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10b      	bne.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009250:	4bb9      	ldr	r3, [pc, #740]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009254:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800925c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009260:	4ab5      	ldr	r2, [pc, #724]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009262:	430b      	orrs	r3, r1
 8009264:	6553      	str	r3, [r2, #84]	@ 0x54
 8009266:	e003      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800926c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800927c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800927e:	2300      	movs	r3, #0
 8009280:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009282:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009286:	460b      	mov	r3, r1
 8009288:	4313      	orrs	r3, r2
 800928a:	d009      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800928c:	4baa      	ldr	r3, [pc, #680]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800928e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009290:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800929a:	4aa7      	ldr	r2, [pc, #668]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800929c:	430b      	orrs	r3, r1
 800929e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80092a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80092ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80092ae:	2300      	movs	r3, #0
 80092b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80092b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80092b6:	460b      	mov	r3, r1
 80092b8:	4313      	orrs	r3, r2
 80092ba:	d00a      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80092bc:	4b9e      	ldr	r3, [pc, #632]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80092c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80092cc:	4a9a      	ldr	r2, [pc, #616]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092ce:	430b      	orrs	r3, r1
 80092d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80092de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092e0:	2300      	movs	r3, #0
 80092e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80092e8:	460b      	mov	r3, r1
 80092ea:	4313      	orrs	r3, r2
 80092ec:	d009      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092ee:	4b92      	ldr	r3, [pc, #584]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80092f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092fc:	4a8e      	ldr	r2, [pc, #568]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092fe:	430b      	orrs	r3, r1
 8009300:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800930e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009310:	2300      	movs	r3, #0
 8009312:	647b      	str	r3, [r7, #68]	@ 0x44
 8009314:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009318:	460b      	mov	r3, r1
 800931a:	4313      	orrs	r3, r2
 800931c:	d00e      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800931e:	4b86      	ldr	r3, [pc, #536]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	4a85      	ldr	r2, [pc, #532]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009324:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009328:	6113      	str	r3, [r2, #16]
 800932a:	4b83      	ldr	r3, [pc, #524]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800932c:	6919      	ldr	r1, [r3, #16]
 800932e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009332:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009336:	4a80      	ldr	r2, [pc, #512]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009338:	430b      	orrs	r3, r1
 800933a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800933c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009348:	63bb      	str	r3, [r7, #56]	@ 0x38
 800934a:	2300      	movs	r3, #0
 800934c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800934e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009352:	460b      	mov	r3, r1
 8009354:	4313      	orrs	r3, r2
 8009356:	d009      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009358:	4b77      	ldr	r3, [pc, #476]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800935a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800935c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009366:	4a74      	ldr	r2, [pc, #464]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009368:	430b      	orrs	r3, r1
 800936a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800936c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009378:	633b      	str	r3, [r7, #48]	@ 0x30
 800937a:	2300      	movs	r3, #0
 800937c:	637b      	str	r3, [r7, #52]	@ 0x34
 800937e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009382:	460b      	mov	r3, r1
 8009384:	4313      	orrs	r3, r2
 8009386:	d00a      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009388:	4b6b      	ldr	r3, [pc, #428]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800938a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800938c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009398:	4a67      	ldr	r2, [pc, #412]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800939a:	430b      	orrs	r3, r1
 800939c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800939e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a6:	2100      	movs	r1, #0
 80093a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80093b4:	460b      	mov	r3, r1
 80093b6:	4313      	orrs	r3, r2
 80093b8:	d011      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093be:	3308      	adds	r3, #8
 80093c0:	2100      	movs	r1, #0
 80093c2:	4618      	mov	r0, r3
 80093c4:	f001 fa4a 	bl	800a85c <RCCEx_PLL2_Config>
 80093c8:	4603      	mov	r3, r0
 80093ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80093ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80093de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	2100      	movs	r1, #0
 80093e8:	6239      	str	r1, [r7, #32]
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80093f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80093f4:	460b      	mov	r3, r1
 80093f6:	4313      	orrs	r3, r2
 80093f8:	d011      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093fe:	3308      	adds	r3, #8
 8009400:	2101      	movs	r1, #1
 8009402:	4618      	mov	r0, r3
 8009404:	f001 fa2a 	bl	800a85c <RCCEx_PLL2_Config>
 8009408:	4603      	mov	r3, r0
 800940a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800940e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800941a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800941e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	2100      	movs	r1, #0
 8009428:	61b9      	str	r1, [r7, #24]
 800942a:	f003 0304 	and.w	r3, r3, #4
 800942e:	61fb      	str	r3, [r7, #28]
 8009430:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009434:	460b      	mov	r3, r1
 8009436:	4313      	orrs	r3, r2
 8009438:	d011      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800943a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943e:	3308      	adds	r3, #8
 8009440:	2102      	movs	r1, #2
 8009442:	4618      	mov	r0, r3
 8009444:	f001 fa0a 	bl	800a85c <RCCEx_PLL2_Config>
 8009448:	4603      	mov	r3, r0
 800944a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800944e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800945a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800945e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	2100      	movs	r1, #0
 8009468:	6139      	str	r1, [r7, #16]
 800946a:	f003 0308 	and.w	r3, r3, #8
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009474:	460b      	mov	r3, r1
 8009476:	4313      	orrs	r3, r2
 8009478:	d011      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800947a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800947e:	3328      	adds	r3, #40	@ 0x28
 8009480:	2100      	movs	r1, #0
 8009482:	4618      	mov	r0, r3
 8009484:	f001 fa9c 	bl	800a9c0 <RCCEx_PLL3_Config>
 8009488:	4603      	mov	r3, r0
 800948a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800948e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800949a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800949e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	2100      	movs	r1, #0
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	f003 0310 	and.w	r3, r3, #16
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80094b4:	460b      	mov	r3, r1
 80094b6:	4313      	orrs	r3, r2
 80094b8:	d011      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094be:	3328      	adds	r3, #40	@ 0x28
 80094c0:	2101      	movs	r1, #1
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 fa7c 	bl	800a9c0 <RCCEx_PLL3_Config>
 80094c8:	4603      	mov	r3, r0
 80094ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80094ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80094de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	2100      	movs	r1, #0
 80094e8:	6039      	str	r1, [r7, #0]
 80094ea:	f003 0320 	and.w	r3, r3, #32
 80094ee:	607b      	str	r3, [r7, #4]
 80094f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80094f4:	460b      	mov	r3, r1
 80094f6:	4313      	orrs	r3, r2
 80094f8:	d011      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094fe:	3328      	adds	r3, #40	@ 0x28
 8009500:	2102      	movs	r1, #2
 8009502:	4618      	mov	r0, r3
 8009504:	f001 fa5c 	bl	800a9c0 <RCCEx_PLL3_Config>
 8009508:	4603      	mov	r3, r0
 800950a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800950e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800951a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800951e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	e000      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
}
 800952c:	4618      	mov	r0, r3
 800952e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009532:	46bd      	mov	sp, r7
 8009534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009538:	58024400 	.word	0x58024400

0800953c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b090      	sub	sp, #64	@ 0x40
 8009540:	af00      	add	r7, sp, #0
 8009542:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800954a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800954e:	430b      	orrs	r3, r1
 8009550:	f040 8094 	bne.w	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009554:	4b9e      	ldr	r3, [pc, #632]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009558:	f003 0307 	and.w	r3, r3, #7
 800955c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	2b04      	cmp	r3, #4
 8009562:	f200 8087 	bhi.w	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009566:	a201      	add	r2, pc, #4	@ (adr r2, 800956c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956c:	08009581 	.word	0x08009581
 8009570:	080095a9 	.word	0x080095a9
 8009574:	080095d1 	.word	0x080095d1
 8009578:	0800966d 	.word	0x0800966d
 800957c:	080095f9 	.word	0x080095f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009580:	4b93      	ldr	r3, [pc, #588]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009588:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800958c:	d108      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800958e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009592:	4618      	mov	r0, r3
 8009594:	f001 f810 	bl	800a5b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800959c:	f000 bd45 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095a0:	2300      	movs	r3, #0
 80095a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a4:	f000 bd41 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095a8:	4b89      	ldr	r3, [pc, #548]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095b4:	d108      	bne.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095b6:	f107 0318 	add.w	r3, r7, #24
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fd54 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095c4:	f000 bd31 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095cc:	f000 bd2d 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095d0:	4b7f      	ldr	r3, [pc, #508]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095dc:	d108      	bne.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095de:	f107 030c 	add.w	r3, r7, #12
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fe94 	bl	800a310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ec:	f000 bd1d 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095f4:	f000 bd19 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095f8:	4b75      	ldr	r3, [pc, #468]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009600:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009602:	4b73      	ldr	r3, [pc, #460]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	2b04      	cmp	r3, #4
 800960c:	d10c      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800960e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009610:	2b00      	cmp	r3, #0
 8009612:	d109      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009614:	4b6e      	ldr	r3, [pc, #440]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	08db      	lsrs	r3, r3, #3
 800961a:	f003 0303 	and.w	r3, r3, #3
 800961e:	4a6d      	ldr	r2, [pc, #436]	@ (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009620:	fa22 f303 	lsr.w	r3, r2, r3
 8009624:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009626:	e01f      	b.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009628:	4b69      	ldr	r3, [pc, #420]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009634:	d106      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009638:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800963c:	d102      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800963e:	4b66      	ldr	r3, [pc, #408]	@ (80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009642:	e011      	b.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009644:	4b62      	ldr	r3, [pc, #392]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800964c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009650:	d106      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009658:	d102      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800965a:	4b60      	ldr	r3, [pc, #384]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800965c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800965e:	e003      	b.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009664:	f000 bce1 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009668:	f000 bcdf 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800966c:	4b5c      	ldr	r3, [pc, #368]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009670:	f000 bcdb 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009678:	f000 bcd7 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800967c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009680:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009684:	430b      	orrs	r3, r1
 8009686:	f040 80ad 	bne.w	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800968a:	4b51      	ldr	r3, [pc, #324]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800968c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800968e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009692:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800969a:	d056      	beq.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800969c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a2:	f200 8090 	bhi.w	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80096aa:	f000 8088 	beq.w	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80096ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80096b2:	f200 8088 	bhi.w	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b8:	2b80      	cmp	r3, #128	@ 0x80
 80096ba:	d032      	beq.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80096bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096be:	2b80      	cmp	r3, #128	@ 0x80
 80096c0:	f200 8081 	bhi.w	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80096ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096cc:	2b40      	cmp	r3, #64	@ 0x40
 80096ce:	d014      	beq.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80096d0:	e079      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096d2:	4b3f      	ldr	r3, [pc, #252]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096de:	d108      	bne.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 ff67 	bl	800a5b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ee:	f000 bc9c 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f6:	f000 bc98 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096fa:	4b35      	ldr	r3, [pc, #212]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009702:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009706:	d108      	bne.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009708:	f107 0318 	add.w	r3, r7, #24
 800970c:	4618      	mov	r0, r3
 800970e:	f000 fcab 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009716:	f000 bc88 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800971e:	f000 bc84 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009722:	4b2b      	ldr	r3, [pc, #172]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800972a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800972e:	d108      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009730:	f107 030c 	add.w	r3, r7, #12
 8009734:	4618      	mov	r0, r3
 8009736:	f000 fdeb 	bl	800a310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800973e:	f000 bc74 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009746:	f000 bc70 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800974a:	4b21      	ldr	r3, [pc, #132]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800974c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800974e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009752:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009754:	4b1e      	ldr	r3, [pc, #120]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b04      	cmp	r3, #4
 800975e:	d10c      	bne.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009762:	2b00      	cmp	r3, #0
 8009764:	d109      	bne.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009766:	4b1a      	ldr	r3, [pc, #104]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	08db      	lsrs	r3, r3, #3
 800976c:	f003 0303 	and.w	r3, r3, #3
 8009770:	4a18      	ldr	r2, [pc, #96]	@ (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009772:	fa22 f303 	lsr.w	r3, r2, r3
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009778:	e01f      	b.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800977a:	4b15      	ldr	r3, [pc, #84]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009786:	d106      	bne.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800978a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800978e:	d102      	bne.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009790:	4b11      	ldr	r3, [pc, #68]	@ (80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009794:	e011      	b.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009796:	4b0e      	ldr	r3, [pc, #56]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800979e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097a2:	d106      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80097a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097aa:	d102      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097ac:	4b0b      	ldr	r3, [pc, #44]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80097ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097b0:	e003      	b.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097b6:	f000 bc38 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097ba:	f000 bc36 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097be:	4b08      	ldr	r3, [pc, #32]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80097c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c2:	f000 bc32 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ca:	f000 bc2e 	b.w	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097ce:	bf00      	nop
 80097d0:	58024400 	.word	0x58024400
 80097d4:	03d09000 	.word	0x03d09000
 80097d8:	003d0900 	.word	0x003d0900
 80097dc:	007a1200 	.word	0x007a1200
 80097e0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80097e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097e8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80097ec:	430b      	orrs	r3, r1
 80097ee:	f040 809c 	bne.w	800992a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80097f2:	4b9e      	ldr	r3, [pc, #632]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097f6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80097fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80097fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009802:	d054      	beq.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009806:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800980a:	f200 808b 	bhi.w	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800980e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009810:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009814:	f000 8083 	beq.w	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800981e:	f200 8081 	bhi.w	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009824:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009828:	d02f      	beq.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800982a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009830:	d878      	bhi.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009834:	2b00      	cmp	r3, #0
 8009836:	d004      	beq.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800983e:	d012      	beq.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009840:	e070      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009842:	4b8a      	ldr	r3, [pc, #552]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800984a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800984e:	d107      	bne.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009854:	4618      	mov	r0, r3
 8009856:	f000 feaf 	bl	800a5b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800985a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800985e:	e3e4      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009864:	e3e1      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009866:	4b81      	ldr	r3, [pc, #516]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800986e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009872:	d107      	bne.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009874:	f107 0318 	add.w	r3, r7, #24
 8009878:	4618      	mov	r0, r3
 800987a:	f000 fbf5 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009882:	e3d2      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009884:	2300      	movs	r3, #0
 8009886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009888:	e3cf      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800988a:	4b78      	ldr	r3, [pc, #480]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009896:	d107      	bne.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009898:	f107 030c 	add.w	r3, r7, #12
 800989c:	4618      	mov	r0, r3
 800989e:	f000 fd37 	bl	800a310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a6:	e3c0      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ac:	e3bd      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098ae:	4b6f      	ldr	r3, [pc, #444]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80098b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098b8:	4b6c      	ldr	r3, [pc, #432]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0304 	and.w	r3, r3, #4
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	d10c      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80098c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d109      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098ca:	4b68      	ldr	r3, [pc, #416]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	08db      	lsrs	r3, r3, #3
 80098d0:	f003 0303 	and.w	r3, r3, #3
 80098d4:	4a66      	ldr	r2, [pc, #408]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80098d6:	fa22 f303 	lsr.w	r3, r2, r3
 80098da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098dc:	e01e      	b.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098de:	4b63      	ldr	r3, [pc, #396]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ea:	d106      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80098ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098f2:	d102      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098f4:	4b5f      	ldr	r3, [pc, #380]	@ (8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80098f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098f8:	e010      	b.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098fa:	4b5c      	ldr	r3, [pc, #368]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009906:	d106      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800990e:	d102      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009910:	4b59      	ldr	r3, [pc, #356]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009914:	e002      	b.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800991a:	e386      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800991c:	e385      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800991e:	4b57      	ldr	r3, [pc, #348]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009922:	e382      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009928:	e37f      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800992a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800992e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009932:	430b      	orrs	r3, r1
 8009934:	f040 80a7 	bne.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009938:	4b4c      	ldr	r3, [pc, #304]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800993a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800993c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009940:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009944:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009948:	d055      	beq.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800994a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009950:	f200 8096 	bhi.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009956:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800995a:	f000 8084 	beq.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800995e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009960:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009964:	f200 808c 	bhi.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800996e:	d030      	beq.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009972:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009976:	f200 8083 	bhi.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009982:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009986:	d012      	beq.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009988:	e07a      	b.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800998a:	4b38      	ldr	r3, [pc, #224]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009992:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009996:	d107      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800999c:	4618      	mov	r0, r3
 800999e:	f000 fe0b 	bl	800a5b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099a6:	e340      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ac:	e33d      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099ae:	4b2f      	ldr	r3, [pc, #188]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099ba:	d107      	bne.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099bc:	f107 0318 	add.w	r3, r7, #24
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 fb51 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ca:	e32e      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099d0:	e32b      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099d2:	4b26      	ldr	r3, [pc, #152]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099de:	d107      	bne.n	80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099e0:	f107 030c 	add.w	r3, r7, #12
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 fc93 	bl	800a310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ee:	e31c      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f4:	e319      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099f6:	4b1d      	ldr	r3, [pc, #116]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a00:	4b1a      	ldr	r3, [pc, #104]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d10c      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d109      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a12:	4b16      	ldr	r3, [pc, #88]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	08db      	lsrs	r3, r3, #3
 8009a18:	f003 0303 	and.w	r3, r3, #3
 8009a1c:	4a14      	ldr	r2, [pc, #80]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a24:	e01e      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a26:	4b11      	ldr	r3, [pc, #68]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a32:	d106      	bne.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a3a:	d102      	bne.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a40:	e010      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a42:	4b0a      	ldr	r3, [pc, #40]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a4e:	d106      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a56:	d102      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a58:	4b07      	ldr	r3, [pc, #28]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a5c:	e002      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a62:	e2e2      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a64:	e2e1      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a66:	4b05      	ldr	r3, [pc, #20]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a6a:	e2de      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a6c:	58024400 	.word	0x58024400
 8009a70:	03d09000 	.word	0x03d09000
 8009a74:	003d0900 	.word	0x003d0900
 8009a78:	007a1200 	.word	0x007a1200
 8009a7c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a84:	e2d1      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a8a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	f040 809c 	bne.w	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009a94:	4b93      	ldr	r3, [pc, #588]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a98:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009a9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009aa4:	d054      	beq.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009aac:	f200 808b 	bhi.w	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ab6:	f000 8083 	beq.w	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ac0:	f200 8081 	bhi.w	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009aca:	d02f      	beq.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ad2:	d878      	bhi.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d004      	beq.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ae0:	d012      	beq.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009ae2:	e070      	b.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ae4:	4b7f      	ldr	r3, [pc, #508]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009aec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009af0:	d107      	bne.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 fd5e 	bl	800a5b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b00:	e293      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b06:	e290      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b08:	4b76      	ldr	r3, [pc, #472]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b14:	d107      	bne.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b16:	f107 0318 	add.w	r3, r7, #24
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 faa4 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b24:	e281      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b2a:	e27e      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b2c:	4b6d      	ldr	r3, [pc, #436]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b38:	d107      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b3a:	f107 030c 	add.w	r3, r7, #12
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 fbe6 	bl	800a310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b48:	e26f      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b4e:	e26c      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b50:	4b64      	ldr	r3, [pc, #400]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b58:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b5a:	4b62      	ldr	r3, [pc, #392]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0304 	and.w	r3, r3, #4
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	d10c      	bne.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d109      	bne.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	08db      	lsrs	r3, r3, #3
 8009b72:	f003 0303 	and.w	r3, r3, #3
 8009b76:	4a5c      	ldr	r2, [pc, #368]	@ (8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009b78:	fa22 f303 	lsr.w	r3, r2, r3
 8009b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b7e:	e01e      	b.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b80:	4b58      	ldr	r3, [pc, #352]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b8c:	d106      	bne.n	8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b94:	d102      	bne.n	8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b96:	4b55      	ldr	r3, [pc, #340]	@ (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b9a:	e010      	b.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b9c:	4b51      	ldr	r3, [pc, #324]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ba8:	d106      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bb0:	d102      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bb6:	e002      	b.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009bbc:	e235      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bbe:	e234      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bc4:	e231      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bca:	e22e      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	f040 808f 	bne.w	8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009bda:	4b42      	ldr	r3, [pc, #264]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bde:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009be2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009bea:	d06b      	beq.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009bf2:	d874      	bhi.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009bfa:	d056      	beq.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c02:	d86c      	bhi.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c0a:	d03b      	beq.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c12:	d864      	bhi.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c1a:	d021      	beq.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c22:	d85c      	bhi.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d004      	beq.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c30:	d004      	beq.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009c32:	e054      	b.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009c34:	f7fe fa0a 	bl	800804c <HAL_RCC_GetPCLK1Freq>
 8009c38:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c3a:	e1f6      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c3c:	4b29      	ldr	r3, [pc, #164]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c48:	d107      	bne.n	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c4a:	f107 0318 	add.w	r3, r7, #24
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 fa0a 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c58:	e1e7      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c5e:	e1e4      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c60:	4b20      	ldr	r3, [pc, #128]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c6c:	d107      	bne.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c6e:	f107 030c 	add.w	r3, r7, #12
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fb4c 	bl	800a310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c7c:	e1d5      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c82:	e1d2      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c84:	4b17      	ldr	r3, [pc, #92]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 0304 	and.w	r3, r3, #4
 8009c8c:	2b04      	cmp	r3, #4
 8009c8e:	d109      	bne.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c90:	4b14      	ldr	r3, [pc, #80]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	08db      	lsrs	r3, r3, #3
 8009c96:	f003 0303 	and.w	r3, r3, #3
 8009c9a:	4a13      	ldr	r2, [pc, #76]	@ (8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ca2:	e1c2      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca8:	e1bf      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009caa:	4b0e      	ldr	r3, [pc, #56]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cb6:	d102      	bne.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cbc:	e1b5      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc2:	e1b2      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009cc4:	4b07      	ldr	r3, [pc, #28]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ccc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cd0:	d102      	bne.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009cd2:	4b07      	ldr	r3, [pc, #28]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cd6:	e1a8      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cdc:	e1a5      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ce2:	e1a2      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ce4:	58024400 	.word	0x58024400
 8009ce8:	03d09000 	.word	0x03d09000
 8009cec:	003d0900 	.word	0x003d0900
 8009cf0:	007a1200 	.word	0x007a1200
 8009cf4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cfc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009d00:	430b      	orrs	r3, r1
 8009d02:	d173      	bne.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009d04:	4b9c      	ldr	r3, [pc, #624]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009d0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d14:	d02f      	beq.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d1c:	d863      	bhi.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d004      	beq.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d2a:	d012      	beq.n	8009d52 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009d2c:	e05b      	b.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d2e:	4b92      	ldr	r3, [pc, #584]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d3a:	d107      	bne.n	8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d3c:	f107 0318 	add.w	r3, r7, #24
 8009d40:	4618      	mov	r0, r3
 8009d42:	f000 f991 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d4a:	e16e      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d50:	e16b      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d52:	4b89      	ldr	r3, [pc, #548]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d5e:	d107      	bne.n	8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d60:	f107 030c 	add.w	r3, r7, #12
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 fad3 	bl	800a310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d6e:	e15c      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d74:	e159      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d76:	4b80      	ldr	r3, [pc, #512]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d80:	4b7d      	ldr	r3, [pc, #500]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0304 	and.w	r3, r3, #4
 8009d88:	2b04      	cmp	r3, #4
 8009d8a:	d10c      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d109      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d92:	4b79      	ldr	r3, [pc, #484]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	08db      	lsrs	r3, r3, #3
 8009d98:	f003 0303 	and.w	r3, r3, #3
 8009d9c:	4a77      	ldr	r2, [pc, #476]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009da4:	e01e      	b.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009da6:	4b74      	ldr	r3, [pc, #464]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009db2:	d106      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009db6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dba:	d102      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009dbc:	4b70      	ldr	r3, [pc, #448]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dc0:	e010      	b.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dce:	d106      	bne.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dd6:	d102      	bne.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ddc:	e002      	b.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009dde:	2300      	movs	r3, #0
 8009de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009de2:	e122      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009de4:	e121      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dea:	e11e      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009df0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009df4:	430b      	orrs	r3, r1
 8009df6:	d133      	bne.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009df8:	4b5f      	ldr	r3, [pc, #380]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e0e:	d012      	beq.n	8009e36 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009e10:	e023      	b.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e12:	4b59      	ldr	r3, [pc, #356]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e1e:	d107      	bne.n	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 fbc7 	bl	800a5b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e2e:	e0fc      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e30:	2300      	movs	r3, #0
 8009e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e34:	e0f9      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e36:	4b50      	ldr	r3, [pc, #320]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e42:	d107      	bne.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e44:	f107 0318 	add.w	r3, r7, #24
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f000 f90d 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e52:	e0ea      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e54:	2300      	movs	r3, #0
 8009e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e58:	e0e7      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e5e:	e0e4      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e64:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009e68:	430b      	orrs	r3, r1
 8009e6a:	f040 808d 	bne.w	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009e6e:	4b42      	ldr	r3, [pc, #264]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e72:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009e76:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e7e:	d06b      	beq.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e86:	d874      	bhi.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e8e:	d056      	beq.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e96:	d86c      	bhi.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e9e:	d03b      	beq.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ea6:	d864      	bhi.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009eae:	d021      	beq.n	8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009eb6:	d85c      	bhi.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d004      	beq.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ec4:	d004      	beq.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009ec6:	e054      	b.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009ec8:	f000 f8b8 	bl	800a03c <HAL_RCCEx_GetD3PCLK1Freq>
 8009ecc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ece:	e0ac      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ed0:	4b29      	ldr	r3, [pc, #164]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ed8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009edc:	d107      	bne.n	8009eee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ede:	f107 0318 	add.w	r3, r7, #24
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 f8c0 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eec:	e09d      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef2:	e09a      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ef4:	4b20      	ldr	r3, [pc, #128]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f00:	d107      	bne.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f02:	f107 030c 	add.w	r3, r7, #12
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 fa02 	bl	800a310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f10:	e08b      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f12:	2300      	movs	r3, #0
 8009f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f16:	e088      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f18:	4b17      	ldr	r3, [pc, #92]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0304 	and.w	r3, r3, #4
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d109      	bne.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f24:	4b14      	ldr	r3, [pc, #80]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	08db      	lsrs	r3, r3, #3
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	4a13      	ldr	r2, [pc, #76]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009f30:	fa22 f303 	lsr.w	r3, r2, r3
 8009f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f36:	e078      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f3c:	e075      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f4a:	d102      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f50:	e06b      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f52:	2300      	movs	r3, #0
 8009f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f56:	e068      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009f58:	4b07      	ldr	r3, [pc, #28]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f64:	d102      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009f66:	4b07      	ldr	r3, [pc, #28]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f6a:	e05e      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f70:	e05b      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f76:	e058      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f78:	58024400 	.word	0x58024400
 8009f7c:	03d09000 	.word	0x03d09000
 8009f80:	003d0900 	.word	0x003d0900
 8009f84:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f8c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009f90:	430b      	orrs	r3, r1
 8009f92:	d148      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009f94:	4b27      	ldr	r3, [pc, #156]	@ (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fa4:	d02a      	beq.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fac:	d838      	bhi.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d004      	beq.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fba:	d00d      	beq.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009fbc:	e030      	b.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009fbe:	4b1d      	ldr	r3, [pc, #116]	@ (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fca:	d102      	bne.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009fcc:	4b1a      	ldr	r3, [pc, #104]	@ (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fd0:	e02b      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd6:	e028      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fd8:	4b16      	ldr	r3, [pc, #88]	@ (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fe0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fe4:	d107      	bne.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 fae4 	bl	800a5b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ff4:	e019      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ffa:	e016      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ffc:	4b0d      	ldr	r3, [pc, #52]	@ (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a004:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a008:	d107      	bne.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a00a:	f107 0318 	add.w	r3, r7, #24
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 f82a 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a018:	e007      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a01e:	e004      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a020:	2300      	movs	r3, #0
 800a022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a024:	e001      	b.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a026:	2300      	movs	r3, #0
 800a028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a02a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3740      	adds	r7, #64	@ 0x40
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	58024400 	.word	0x58024400
 800a038:	007a1200 	.word	0x007a1200

0800a03c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a040:	f7fd ffd4 	bl	8007fec <HAL_RCC_GetHCLKFreq>
 800a044:	4602      	mov	r2, r0
 800a046:	4b06      	ldr	r3, [pc, #24]	@ (800a060 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	091b      	lsrs	r3, r3, #4
 800a04c:	f003 0307 	and.w	r3, r3, #7
 800a050:	4904      	ldr	r1, [pc, #16]	@ (800a064 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a052:	5ccb      	ldrb	r3, [r1, r3]
 800a054:	f003 031f 	and.w	r3, r3, #31
 800a058:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	58024400 	.word	0x58024400
 800a064:	08021a64 	.word	0x08021a64

0800a068 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a068:	b480      	push	{r7}
 800a06a:	b089      	sub	sp, #36	@ 0x24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a070:	4ba1      	ldr	r3, [pc, #644]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a074:	f003 0303 	and.w	r3, r3, #3
 800a078:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a07a:	4b9f      	ldr	r3, [pc, #636]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a07e:	0b1b      	lsrs	r3, r3, #12
 800a080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a084:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a086:	4b9c      	ldr	r3, [pc, #624]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a08a:	091b      	lsrs	r3, r3, #4
 800a08c:	f003 0301 	and.w	r3, r3, #1
 800a090:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a092:	4b99      	ldr	r3, [pc, #612]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a096:	08db      	lsrs	r3, r3, #3
 800a098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	fb02 f303 	mul.w	r3, r2, r3
 800a0a2:	ee07 3a90 	vmov	s15, r3
 800a0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 8111 	beq.w	800a2d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	f000 8083 	beq.w	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	f200 80a1 	bhi.w	800a208 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d056      	beq.n	800a180 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a0d2:	e099      	b.n	800a208 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0d4:	4b88      	ldr	r3, [pc, #544]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0320 	and.w	r3, r3, #32
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d02d      	beq.n	800a13c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0e0:	4b85      	ldr	r3, [pc, #532]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	08db      	lsrs	r3, r3, #3
 800a0e6:	f003 0303 	and.w	r3, r3, #3
 800a0ea:	4a84      	ldr	r2, [pc, #528]	@ (800a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a0ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	ee07 3a90 	vmov	s15, r3
 800a0f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	ee07 3a90 	vmov	s15, r3
 800a102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a10a:	4b7b      	ldr	r3, [pc, #492]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a10c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a112:	ee07 3a90 	vmov	s15, r3
 800a116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a11e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a136:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a13a:	e087      	b.n	800a24c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a146:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a14a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a14e:	4b6a      	ldr	r3, [pc, #424]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a15e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a162:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a16e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a17e:	e065      	b.n	800a24c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	ee07 3a90 	vmov	s15, r3
 800a186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a192:	4b59      	ldr	r3, [pc, #356]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a19a:	ee07 3a90 	vmov	s15, r3
 800a19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1c2:	e043      	b.n	800a24c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	ee07 3a90 	vmov	s15, r3
 800a1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1d6:	4b48      	ldr	r3, [pc, #288]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1de:	ee07 3a90 	vmov	s15, r3
 800a1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a206:	e021      	b.n	800a24c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	ee07 3a90 	vmov	s15, r3
 800a20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a212:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a21a:	4b37      	ldr	r3, [pc, #220]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a222:	ee07 3a90 	vmov	s15, r3
 800a226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a22a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a22e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a23a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a23e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a24a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a24c:	4b2a      	ldr	r3, [pc, #168]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a24e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a250:	0a5b      	lsrs	r3, r3, #9
 800a252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a256:	ee07 3a90 	vmov	s15, r3
 800a25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a262:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a266:	edd7 6a07 	vldr	s13, [r7, #28]
 800a26a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a26e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a272:	ee17 2a90 	vmov	r2, s15
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a27a:	4b1f      	ldr	r3, [pc, #124]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a27c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a27e:	0c1b      	lsrs	r3, r3, #16
 800a280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a284:	ee07 3a90 	vmov	s15, r3
 800a288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a28c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a290:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a294:	edd7 6a07 	vldr	s13, [r7, #28]
 800a298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a29c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2a0:	ee17 2a90 	vmov	r2, s15
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a2a8:	4b13      	ldr	r3, [pc, #76]	@ (800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ac:	0e1b      	lsrs	r3, r3, #24
 800a2ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2b2:	ee07 3a90 	vmov	s15, r3
 800a2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ce:	ee17 2a90 	vmov	r2, s15
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a2d6:	e008      	b.n	800a2ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	609a      	str	r2, [r3, #8]
}
 800a2ea:	bf00      	nop
 800a2ec:	3724      	adds	r7, #36	@ 0x24
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	58024400 	.word	0x58024400
 800a2fc:	03d09000 	.word	0x03d09000
 800a300:	46000000 	.word	0x46000000
 800a304:	4c742400 	.word	0x4c742400
 800a308:	4a742400 	.word	0x4a742400
 800a30c:	4af42400 	.word	0x4af42400

0800a310 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a310:	b480      	push	{r7}
 800a312:	b089      	sub	sp, #36	@ 0x24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a318:	4ba1      	ldr	r3, [pc, #644]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a31c:	f003 0303 	and.w	r3, r3, #3
 800a320:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a322:	4b9f      	ldr	r3, [pc, #636]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a326:	0d1b      	lsrs	r3, r3, #20
 800a328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a32c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a32e:	4b9c      	ldr	r3, [pc, #624]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a332:	0a1b      	lsrs	r3, r3, #8
 800a334:	f003 0301 	and.w	r3, r3, #1
 800a338:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a33a:	4b99      	ldr	r3, [pc, #612]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a33c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a33e:	08db      	lsrs	r3, r3, #3
 800a340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	fb02 f303 	mul.w	r3, r2, r3
 800a34a:	ee07 3a90 	vmov	s15, r3
 800a34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a352:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 8111 	beq.w	800a580 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	2b02      	cmp	r3, #2
 800a362:	f000 8083 	beq.w	800a46c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	2b02      	cmp	r3, #2
 800a36a:	f200 80a1 	bhi.w	800a4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d003      	beq.n	800a37c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d056      	beq.n	800a428 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a37a:	e099      	b.n	800a4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a37c:	4b88      	ldr	r3, [pc, #544]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0320 	and.w	r3, r3, #32
 800a384:	2b00      	cmp	r3, #0
 800a386:	d02d      	beq.n	800a3e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a388:	4b85      	ldr	r3, [pc, #532]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	08db      	lsrs	r3, r3, #3
 800a38e:	f003 0303 	and.w	r3, r3, #3
 800a392:	4a84      	ldr	r2, [pc, #528]	@ (800a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a394:	fa22 f303 	lsr.w	r3, r2, r3
 800a398:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	ee07 3a90 	vmov	s15, r3
 800a3a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	ee07 3a90 	vmov	s15, r3
 800a3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3b2:	4b7b      	ldr	r3, [pc, #492]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ba:	ee07 3a90 	vmov	s15, r3
 800a3be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a3e2:	e087      	b.n	800a4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	ee07 3a90 	vmov	s15, r3
 800a3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a3f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3f6:	4b6a      	ldr	r3, [pc, #424]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3fe:	ee07 3a90 	vmov	s15, r3
 800a402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a406:	ed97 6a03 	vldr	s12, [r7, #12]
 800a40a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a40e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a426:	e065      	b.n	800a4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	ee07 3a90 	vmov	s15, r3
 800a42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a432:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a43a:	4b59      	ldr	r3, [pc, #356]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a43c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a442:	ee07 3a90 	vmov	s15, r3
 800a446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a44a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a44e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a45a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a45e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a462:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a46a:	e043      	b.n	800a4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	ee07 3a90 	vmov	s15, r3
 800a472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a476:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a47a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a47e:	4b48      	ldr	r3, [pc, #288]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a486:	ee07 3a90 	vmov	s15, r3
 800a48a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a48e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a492:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a49a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a49e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4ae:	e021      	b.n	800a4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	ee07 3a90 	vmov	s15, r3
 800a4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4c2:	4b37      	ldr	r3, [pc, #220]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ca:	ee07 3a90 	vmov	s15, r3
 800a4ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a4f4:	4b2a      	ldr	r3, [pc, #168]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4f8:	0a5b      	lsrs	r3, r3, #9
 800a4fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4fe:	ee07 3a90 	vmov	s15, r3
 800a502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a50a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a50e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a51a:	ee17 2a90 	vmov	r2, s15
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a522:	4b1f      	ldr	r3, [pc, #124]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a526:	0c1b      	lsrs	r3, r3, #16
 800a528:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a52c:	ee07 3a90 	vmov	s15, r3
 800a530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a534:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a538:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a53c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a548:	ee17 2a90 	vmov	r2, s15
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a550:	4b13      	ldr	r3, [pc, #76]	@ (800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a554:	0e1b      	lsrs	r3, r3, #24
 800a556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a55a:	ee07 3a90 	vmov	s15, r3
 800a55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a562:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a56a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a56e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a576:	ee17 2a90 	vmov	r2, s15
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a57e:	e008      	b.n	800a592 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	609a      	str	r2, [r3, #8]
}
 800a592:	bf00      	nop
 800a594:	3724      	adds	r7, #36	@ 0x24
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	58024400 	.word	0x58024400
 800a5a4:	03d09000 	.word	0x03d09000
 800a5a8:	46000000 	.word	0x46000000
 800a5ac:	4c742400 	.word	0x4c742400
 800a5b0:	4a742400 	.word	0x4a742400
 800a5b4:	4af42400 	.word	0x4af42400

0800a5b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b089      	sub	sp, #36	@ 0x24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5c0:	4ba0      	ldr	r3, [pc, #640]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c4:	f003 0303 	and.w	r3, r3, #3
 800a5c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a5ca:	4b9e      	ldr	r3, [pc, #632]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ce:	091b      	lsrs	r3, r3, #4
 800a5d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a5d6:	4b9b      	ldr	r3, [pc, #620]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5da:	f003 0301 	and.w	r3, r3, #1
 800a5de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a5e0:	4b98      	ldr	r3, [pc, #608]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5e4:	08db      	lsrs	r3, r3, #3
 800a5e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	fb02 f303 	mul.w	r3, r2, r3
 800a5f0:	ee07 3a90 	vmov	s15, r3
 800a5f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 8111 	beq.w	800a826 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	2b02      	cmp	r3, #2
 800a608:	f000 8083 	beq.w	800a712 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	2b02      	cmp	r3, #2
 800a610:	f200 80a1 	bhi.w	800a756 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d056      	beq.n	800a6ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a620:	e099      	b.n	800a756 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a622:	4b88      	ldr	r3, [pc, #544]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0320 	and.w	r3, r3, #32
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d02d      	beq.n	800a68a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a62e:	4b85      	ldr	r3, [pc, #532]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	08db      	lsrs	r3, r3, #3
 800a634:	f003 0303 	and.w	r3, r3, #3
 800a638:	4a83      	ldr	r2, [pc, #524]	@ (800a848 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a63a:	fa22 f303 	lsr.w	r3, r2, r3
 800a63e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	ee07 3a90 	vmov	s15, r3
 800a646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	ee07 3a90 	vmov	s15, r3
 800a650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a654:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a658:	4b7a      	ldr	r3, [pc, #488]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a65a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a65c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a660:	ee07 3a90 	vmov	s15, r3
 800a664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a668:	ed97 6a03 	vldr	s12, [r7, #12]
 800a66c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a84c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a670:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a674:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a678:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a67c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a680:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a684:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a688:	e087      	b.n	800a79a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	ee07 3a90 	vmov	s15, r3
 800a690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a694:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a69c:	4b69      	ldr	r3, [pc, #420]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a69e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6a4:	ee07 3a90 	vmov	s15, r3
 800a6a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6b0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a84c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6cc:	e065      	b.n	800a79a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	ee07 3a90 	vmov	s15, r3
 800a6d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a854 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a6dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6e0:	4b58      	ldr	r3, [pc, #352]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e8:	ee07 3a90 	vmov	s15, r3
 800a6ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6f4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a84c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a700:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a70c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a710:	e043      	b.n	800a79a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	ee07 3a90 	vmov	s15, r3
 800a718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a858 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a724:	4b47      	ldr	r3, [pc, #284]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a72c:	ee07 3a90 	vmov	s15, r3
 800a730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a734:	ed97 6a03 	vldr	s12, [r7, #12]
 800a738:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a84c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a73c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a744:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a74c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a750:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a754:	e021      	b.n	800a79a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	ee07 3a90 	vmov	s15, r3
 800a75c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a760:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a768:	4b36      	ldr	r3, [pc, #216]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a76a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a76c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a770:	ee07 3a90 	vmov	s15, r3
 800a774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a778:	ed97 6a03 	vldr	s12, [r7, #12]
 800a77c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a84c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a788:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a78c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a790:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a794:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a798:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a79a:	4b2a      	ldr	r3, [pc, #168]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a79c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a79e:	0a5b      	lsrs	r3, r3, #9
 800a7a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7a4:	ee07 3a90 	vmov	s15, r3
 800a7a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7c0:	ee17 2a90 	vmov	r2, s15
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a7c8:	4b1e      	ldr	r3, [pc, #120]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7cc:	0c1b      	lsrs	r3, r3, #16
 800a7ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7d2:	ee07 3a90 	vmov	s15, r3
 800a7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7ee:	ee17 2a90 	vmov	r2, s15
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a7f6:	4b13      	ldr	r3, [pc, #76]	@ (800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7fa:	0e1b      	lsrs	r3, r3, #24
 800a7fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a800:	ee07 3a90 	vmov	s15, r3
 800a804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a808:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a80c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a810:	edd7 6a07 	vldr	s13, [r7, #28]
 800a814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a81c:	ee17 2a90 	vmov	r2, s15
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a824:	e008      	b.n	800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	609a      	str	r2, [r3, #8]
}
 800a838:	bf00      	nop
 800a83a:	3724      	adds	r7, #36	@ 0x24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	58024400 	.word	0x58024400
 800a848:	03d09000 	.word	0x03d09000
 800a84c:	46000000 	.word	0x46000000
 800a850:	4c742400 	.word	0x4c742400
 800a854:	4a742400 	.word	0x4a742400
 800a858:	4af42400 	.word	0x4af42400

0800a85c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a86a:	4b53      	ldr	r3, [pc, #332]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a86c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a86e:	f003 0303 	and.w	r3, r3, #3
 800a872:	2b03      	cmp	r3, #3
 800a874:	d101      	bne.n	800a87a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	e099      	b.n	800a9ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a87a:	4b4f      	ldr	r3, [pc, #316]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a4e      	ldr	r2, [pc, #312]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a880:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a886:	f7f7 ffd3 	bl	8002830 <HAL_GetTick>
 800a88a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a88c:	e008      	b.n	800a8a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a88e:	f7f7 ffcf 	bl	8002830 <HAL_GetTick>
 800a892:	4602      	mov	r2, r0
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d901      	bls.n	800a8a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e086      	b.n	800a9ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a8a0:	4b45      	ldr	r3, [pc, #276]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1f0      	bne.n	800a88e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a8ac:	4b42      	ldr	r3, [pc, #264]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a8ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	031b      	lsls	r3, r3, #12
 800a8ba:	493f      	ldr	r1, [pc, #252]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	628b      	str	r3, [r1, #40]	@ 0x28
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	025b      	lsls	r3, r3, #9
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	041b      	lsls	r3, r3, #16
 800a8de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a8e2:	431a      	orrs	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	061b      	lsls	r3, r3, #24
 800a8ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a8f0:	4931      	ldr	r1, [pc, #196]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a8f6:	4b30      	ldr	r3, [pc, #192]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	492d      	ldr	r1, [pc, #180]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a904:	4313      	orrs	r3, r2
 800a906:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a908:	4b2b      	ldr	r3, [pc, #172]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a90c:	f023 0220 	bic.w	r2, r3, #32
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	4928      	ldr	r1, [pc, #160]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a916:	4313      	orrs	r3, r2
 800a918:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a91a:	4b27      	ldr	r3, [pc, #156]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a91e:	4a26      	ldr	r2, [pc, #152]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a920:	f023 0310 	bic.w	r3, r3, #16
 800a924:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a926:	4b24      	ldr	r3, [pc, #144]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a92a:	4b24      	ldr	r3, [pc, #144]	@ (800a9bc <RCCEx_PLL2_Config+0x160>)
 800a92c:	4013      	ands	r3, r2
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	69d2      	ldr	r2, [r2, #28]
 800a932:	00d2      	lsls	r2, r2, #3
 800a934:	4920      	ldr	r1, [pc, #128]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a936:	4313      	orrs	r3, r2
 800a938:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a93a:	4b1f      	ldr	r3, [pc, #124]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93e:	4a1e      	ldr	r2, [pc, #120]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a940:	f043 0310 	orr.w	r3, r3, #16
 800a944:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d106      	bne.n	800a95a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a94c:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a950:	4a19      	ldr	r2, [pc, #100]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a952:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a956:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a958:	e00f      	b.n	800a97a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d106      	bne.n	800a96e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a960:	4b15      	ldr	r3, [pc, #84]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a964:	4a14      	ldr	r2, [pc, #80]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a96a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a96c:	e005      	b.n	800a97a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a96e:	4b12      	ldr	r3, [pc, #72]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a972:	4a11      	ldr	r2, [pc, #68]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a978:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a97a:	4b0f      	ldr	r3, [pc, #60]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a0e      	ldr	r2, [pc, #56]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a980:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a986:	f7f7 ff53 	bl	8002830 <HAL_GetTick>
 800a98a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a98c:	e008      	b.n	800a9a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a98e:	f7f7 ff4f 	bl	8002830 <HAL_GetTick>
 800a992:	4602      	mov	r2, r0
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d901      	bls.n	800a9a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	e006      	b.n	800a9ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a9a0:	4b05      	ldr	r3, [pc, #20]	@ (800a9b8 <RCCEx_PLL2_Config+0x15c>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d0f0      	beq.n	800a98e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	58024400 	.word	0x58024400
 800a9bc:	ffff0007 	.word	0xffff0007

0800a9c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a9ce:	4b53      	ldr	r3, [pc, #332]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800a9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d2:	f003 0303 	and.w	r3, r3, #3
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d101      	bne.n	800a9de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e099      	b.n	800ab12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a9de:	4b4f      	ldr	r3, [pc, #316]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a4e      	ldr	r2, [pc, #312]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800a9e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9ea:	f7f7 ff21 	bl	8002830 <HAL_GetTick>
 800a9ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a9f0:	e008      	b.n	800aa04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a9f2:	f7f7 ff1d 	bl	8002830 <HAL_GetTick>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d901      	bls.n	800aa04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	e086      	b.n	800ab12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa04:	4b45      	ldr	r3, [pc, #276]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1f0      	bne.n	800a9f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aa10:	4b42      	ldr	r3, [pc, #264]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aa12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa14:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	051b      	lsls	r3, r3, #20
 800aa1e:	493f      	ldr	r1, [pc, #252]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aa20:	4313      	orrs	r3, r2
 800aa22:	628b      	str	r3, [r1, #40]	@ 0x28
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	3b01      	subs	r3, #1
 800aa34:	025b      	lsls	r3, r3, #9
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	431a      	orrs	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	041b      	lsls	r3, r3, #16
 800aa42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aa46:	431a      	orrs	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	061b      	lsls	r3, r3, #24
 800aa50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aa54:	4931      	ldr	r1, [pc, #196]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aa5a:	4b30      	ldr	r3, [pc, #192]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aa5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	492d      	ldr	r1, [pc, #180]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aa6c:	4b2b      	ldr	r3, [pc, #172]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aa6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa70:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	4928      	ldr	r1, [pc, #160]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aa7e:	4b27      	ldr	r3, [pc, #156]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aa80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa82:	4a26      	ldr	r2, [pc, #152]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aa84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aa8a:	4b24      	ldr	r3, [pc, #144]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aa8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa8e:	4b24      	ldr	r3, [pc, #144]	@ (800ab20 <RCCEx_PLL3_Config+0x160>)
 800aa90:	4013      	ands	r3, r2
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	69d2      	ldr	r2, [r2, #28]
 800aa96:	00d2      	lsls	r2, r2, #3
 800aa98:	4920      	ldr	r1, [pc, #128]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aa9e:	4b1f      	ldr	r3, [pc, #124]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aaa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa2:	4a1e      	ldr	r2, [pc, #120]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aaa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aaa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d106      	bne.n	800aabe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aab0:	4b1a      	ldr	r3, [pc, #104]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab4:	4a19      	ldr	r2, [pc, #100]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aab6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aaba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aabc:	e00f      	b.n	800aade <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d106      	bne.n	800aad2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aac4:	4b15      	ldr	r3, [pc, #84]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac8:	4a14      	ldr	r2, [pc, #80]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aaca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aace:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aad0:	e005      	b.n	800aade <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aad2:	4b12      	ldr	r3, [pc, #72]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad6:	4a11      	ldr	r2, [pc, #68]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aad8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aadc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aade:	4b0f      	ldr	r3, [pc, #60]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a0e      	ldr	r2, [pc, #56]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800aae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaea:	f7f7 fea1 	bl	8002830 <HAL_GetTick>
 800aaee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aaf0:	e008      	b.n	800ab04 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aaf2:	f7f7 fe9d 	bl	8002830 <HAL_GetTick>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	1ad3      	subs	r3, r2, r3
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d901      	bls.n	800ab04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab00:	2303      	movs	r3, #3
 800ab02:	e006      	b.n	800ab12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab04:	4b05      	ldr	r3, [pc, #20]	@ (800ab1c <RCCEx_PLL3_Config+0x15c>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d0f0      	beq.n	800aaf2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	58024400 	.word	0x58024400
 800ab20:	ffff0007 	.word	0xffff0007

0800ab24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e049      	b.n	800abca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d106      	bne.n	800ab50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 f841 	bl	800abd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2202      	movs	r2, #2
 800ab54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4619      	mov	r1, r3
 800ab62:	4610      	mov	r0, r2
 800ab64:	f000 f9e8 	bl	800af38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800abd2:	b480      	push	{r7}
 800abd4:	b083      	sub	sp, #12
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800abda:	bf00      	nop
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
	...

0800abe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d001      	beq.n	800ac00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e054      	b.n	800acaa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68da      	ldr	r2, [r3, #12]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f042 0201 	orr.w	r2, r2, #1
 800ac16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a26      	ldr	r2, [pc, #152]	@ (800acb8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d022      	beq.n	800ac68 <HAL_TIM_Base_Start_IT+0x80>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac2a:	d01d      	beq.n	800ac68 <HAL_TIM_Base_Start_IT+0x80>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a22      	ldr	r2, [pc, #136]	@ (800acbc <HAL_TIM_Base_Start_IT+0xd4>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d018      	beq.n	800ac68 <HAL_TIM_Base_Start_IT+0x80>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a21      	ldr	r2, [pc, #132]	@ (800acc0 <HAL_TIM_Base_Start_IT+0xd8>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d013      	beq.n	800ac68 <HAL_TIM_Base_Start_IT+0x80>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a1f      	ldr	r2, [pc, #124]	@ (800acc4 <HAL_TIM_Base_Start_IT+0xdc>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d00e      	beq.n	800ac68 <HAL_TIM_Base_Start_IT+0x80>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a1e      	ldr	r2, [pc, #120]	@ (800acc8 <HAL_TIM_Base_Start_IT+0xe0>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d009      	beq.n	800ac68 <HAL_TIM_Base_Start_IT+0x80>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a1c      	ldr	r2, [pc, #112]	@ (800accc <HAL_TIM_Base_Start_IT+0xe4>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d004      	beq.n	800ac68 <HAL_TIM_Base_Start_IT+0x80>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a1b      	ldr	r2, [pc, #108]	@ (800acd0 <HAL_TIM_Base_Start_IT+0xe8>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d115      	bne.n	800ac94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	689a      	ldr	r2, [r3, #8]
 800ac6e:	4b19      	ldr	r3, [pc, #100]	@ (800acd4 <HAL_TIM_Base_Start_IT+0xec>)
 800ac70:	4013      	ands	r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2b06      	cmp	r3, #6
 800ac78:	d015      	beq.n	800aca6 <HAL_TIM_Base_Start_IT+0xbe>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac80:	d011      	beq.n	800aca6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f042 0201 	orr.w	r2, r2, #1
 800ac90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac92:	e008      	b.n	800aca6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f042 0201 	orr.w	r2, r2, #1
 800aca2:	601a      	str	r2, [r3, #0]
 800aca4:	e000      	b.n	800aca8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aca6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	40010000 	.word	0x40010000
 800acbc:	40000400 	.word	0x40000400
 800acc0:	40000800 	.word	0x40000800
 800acc4:	40000c00 	.word	0x40000c00
 800acc8:	40010400 	.word	0x40010400
 800accc:	40001800 	.word	0x40001800
 800acd0:	40014000 	.word	0x40014000
 800acd4:	00010007 	.word	0x00010007

0800acd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	f003 0302 	and.w	r3, r3, #2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d020      	beq.n	800ad3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f003 0302 	and.w	r3, r3, #2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d01b      	beq.n	800ad3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f06f 0202 	mvn.w	r2, #2
 800ad0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2201      	movs	r2, #1
 800ad12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	f003 0303 	and.w	r3, r3, #3
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f8e9 	bl	800aefa <HAL_TIM_IC_CaptureCallback>
 800ad28:	e005      	b.n	800ad36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f8db 	bl	800aee6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f8ec 	bl	800af0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	f003 0304 	and.w	r3, r3, #4
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d020      	beq.n	800ad88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f003 0304 	and.w	r3, r3, #4
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d01b      	beq.n	800ad88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f06f 0204 	mvn.w	r2, #4
 800ad58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d003      	beq.n	800ad76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f8c3 	bl	800aefa <HAL_TIM_IC_CaptureCallback>
 800ad74:	e005      	b.n	800ad82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f8b5 	bl	800aee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f8c6 	bl	800af0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f003 0308 	and.w	r3, r3, #8
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d020      	beq.n	800add4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f003 0308 	and.w	r3, r3, #8
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d01b      	beq.n	800add4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f06f 0208 	mvn.w	r2, #8
 800ada4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2204      	movs	r2, #4
 800adaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	69db      	ldr	r3, [r3, #28]
 800adb2:	f003 0303 	and.w	r3, r3, #3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f89d 	bl	800aefa <HAL_TIM_IC_CaptureCallback>
 800adc0:	e005      	b.n	800adce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f88f 	bl	800aee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 f8a0 	bl	800af0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	f003 0310 	and.w	r3, r3, #16
 800adda:	2b00      	cmp	r3, #0
 800addc:	d020      	beq.n	800ae20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f003 0310 	and.w	r3, r3, #16
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d01b      	beq.n	800ae20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f06f 0210 	mvn.w	r2, #16
 800adf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2208      	movs	r2, #8
 800adf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f877 	bl	800aefa <HAL_TIM_IC_CaptureCallback>
 800ae0c:	e005      	b.n	800ae1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f869 	bl	800aee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f87a 	bl	800af0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00c      	beq.n	800ae44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f003 0301 	and.w	r3, r3, #1
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d007      	beq.n	800ae44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f06f 0201 	mvn.w	r2, #1
 800ae3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7f6 fc84 	bl	800174c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d104      	bne.n	800ae58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00c      	beq.n	800ae72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d007      	beq.n	800ae72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ae6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f913 	bl	800b098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00c      	beq.n	800ae96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d007      	beq.n	800ae96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ae8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f90b 	bl	800b0ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00c      	beq.n	800aeba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d007      	beq.n	800aeba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aeb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f834 	bl	800af22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	f003 0320 	and.w	r3, r3, #32
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00c      	beq.n	800aede <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f003 0320 	and.w	r3, r3, #32
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d007      	beq.n	800aede <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f06f 0220 	mvn.w	r2, #32
 800aed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f8d3 	bl	800b084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aede:	bf00      	nop
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b083      	sub	sp, #12
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aeee:	bf00      	nop
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af02:	bf00      	nop
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr

0800af0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af0e:	b480      	push	{r7}
 800af10:	b083      	sub	sp, #12
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af16:	bf00      	nop
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af2a:	bf00      	nop
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
	...

0800af38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a46      	ldr	r2, [pc, #280]	@ (800b064 <TIM_Base_SetConfig+0x12c>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d013      	beq.n	800af78 <TIM_Base_SetConfig+0x40>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af56:	d00f      	beq.n	800af78 <TIM_Base_SetConfig+0x40>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a43      	ldr	r2, [pc, #268]	@ (800b068 <TIM_Base_SetConfig+0x130>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d00b      	beq.n	800af78 <TIM_Base_SetConfig+0x40>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a42      	ldr	r2, [pc, #264]	@ (800b06c <TIM_Base_SetConfig+0x134>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d007      	beq.n	800af78 <TIM_Base_SetConfig+0x40>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a41      	ldr	r2, [pc, #260]	@ (800b070 <TIM_Base_SetConfig+0x138>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d003      	beq.n	800af78 <TIM_Base_SetConfig+0x40>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a40      	ldr	r2, [pc, #256]	@ (800b074 <TIM_Base_SetConfig+0x13c>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d108      	bne.n	800af8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	4313      	orrs	r3, r2
 800af88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a35      	ldr	r2, [pc, #212]	@ (800b064 <TIM_Base_SetConfig+0x12c>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d01f      	beq.n	800afd2 <TIM_Base_SetConfig+0x9a>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af98:	d01b      	beq.n	800afd2 <TIM_Base_SetConfig+0x9a>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a32      	ldr	r2, [pc, #200]	@ (800b068 <TIM_Base_SetConfig+0x130>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d017      	beq.n	800afd2 <TIM_Base_SetConfig+0x9a>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a31      	ldr	r2, [pc, #196]	@ (800b06c <TIM_Base_SetConfig+0x134>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d013      	beq.n	800afd2 <TIM_Base_SetConfig+0x9a>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a30      	ldr	r2, [pc, #192]	@ (800b070 <TIM_Base_SetConfig+0x138>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d00f      	beq.n	800afd2 <TIM_Base_SetConfig+0x9a>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a2f      	ldr	r2, [pc, #188]	@ (800b074 <TIM_Base_SetConfig+0x13c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d00b      	beq.n	800afd2 <TIM_Base_SetConfig+0x9a>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a2e      	ldr	r2, [pc, #184]	@ (800b078 <TIM_Base_SetConfig+0x140>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d007      	beq.n	800afd2 <TIM_Base_SetConfig+0x9a>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a2d      	ldr	r2, [pc, #180]	@ (800b07c <TIM_Base_SetConfig+0x144>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d003      	beq.n	800afd2 <TIM_Base_SetConfig+0x9a>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a2c      	ldr	r2, [pc, #176]	@ (800b080 <TIM_Base_SetConfig+0x148>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d108      	bne.n	800afe4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	4313      	orrs	r3, r2
 800aff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	689a      	ldr	r2, [r3, #8]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a16      	ldr	r2, [pc, #88]	@ (800b064 <TIM_Base_SetConfig+0x12c>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d00f      	beq.n	800b030 <TIM_Base_SetConfig+0xf8>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a18      	ldr	r2, [pc, #96]	@ (800b074 <TIM_Base_SetConfig+0x13c>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d00b      	beq.n	800b030 <TIM_Base_SetConfig+0xf8>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a17      	ldr	r2, [pc, #92]	@ (800b078 <TIM_Base_SetConfig+0x140>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d007      	beq.n	800b030 <TIM_Base_SetConfig+0xf8>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a16      	ldr	r2, [pc, #88]	@ (800b07c <TIM_Base_SetConfig+0x144>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d003      	beq.n	800b030 <TIM_Base_SetConfig+0xf8>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a15      	ldr	r2, [pc, #84]	@ (800b080 <TIM_Base_SetConfig+0x148>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d103      	bne.n	800b038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	691a      	ldr	r2, [r3, #16]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	f003 0301 	and.w	r3, r3, #1
 800b046:	2b01      	cmp	r3, #1
 800b048:	d105      	bne.n	800b056 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	f023 0201 	bic.w	r2, r3, #1
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	611a      	str	r2, [r3, #16]
  }
}
 800b056:	bf00      	nop
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	40010000 	.word	0x40010000
 800b068:	40000400 	.word	0x40000400
 800b06c:	40000800 	.word	0x40000800
 800b070:	40000c00 	.word	0x40000c00
 800b074:	40010400 	.word	0x40010400
 800b078:	40014000 	.word	0x40014000
 800b07c:	40014400 	.word	0x40014400
 800b080:	40014800 	.word	0x40014800

0800b084 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d101      	bne.n	800b0d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e042      	b.n	800b158 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d106      	bne.n	800b0ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f7f7 fa1d 	bl	8002524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2224      	movs	r2, #36	@ 0x24
 800b0ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f022 0201 	bic.w	r2, r2, #1
 800b100:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b106:	2b00      	cmp	r3, #0
 800b108:	d002      	beq.n	800b110 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f001 faea 	bl	800c6e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fd7f 	bl	800bc14 <UART_SetConfig>
 800b116:	4603      	mov	r3, r0
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d101      	bne.n	800b120 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e01b      	b.n	800b158 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b12e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	689a      	ldr	r2, [r3, #8]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b13e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f042 0201 	orr.w	r2, r2, #1
 800b14e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f001 fb69 	bl	800c828 <UART_CheckIdleState>
 800b156:	4603      	mov	r3, r0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08a      	sub	sp, #40	@ 0x28
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	4613      	mov	r3, r2
 800b16c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b174:	2b20      	cmp	r3, #32
 800b176:	d167      	bne.n	800b248 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <HAL_UART_Transmit_DMA+0x24>
 800b17e:	88fb      	ldrh	r3, [r7, #6]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	e060      	b.n	800b24a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	68ba      	ldr	r2, [r7, #8]
 800b18c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	88fa      	ldrh	r2, [r7, #6]
 800b192:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	88fa      	ldrh	r2, [r7, #6]
 800b19a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2221      	movs	r2, #33	@ 0x21
 800b1aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d028      	beq.n	800b208 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1ba:	4a26      	ldr	r2, [pc, #152]	@ (800b254 <HAL_UART_Transmit_DMA+0xf4>)
 800b1bc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1c2:	4a25      	ldr	r2, [pc, #148]	@ (800b258 <HAL_UART_Transmit_DMA+0xf8>)
 800b1c4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1ca:	4a24      	ldr	r2, [pc, #144]	@ (800b25c <HAL_UART_Transmit_DMA+0xfc>)
 800b1cc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1de:	4619      	mov	r1, r3
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	3328      	adds	r3, #40	@ 0x28
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	88fb      	ldrh	r3, [r7, #6]
 800b1ea:	f7f9 fa6b 	bl	80046c4 <HAL_DMA_Start_IT>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d009      	beq.n	800b208 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2210      	movs	r2, #16
 800b1f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2220      	movs	r2, #32
 800b200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e020      	b.n	800b24a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2240      	movs	r2, #64	@ 0x40
 800b20e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3308      	adds	r3, #8
 800b216:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	e853 3f00 	ldrex	r3, [r3]
 800b21e:	613b      	str	r3, [r7, #16]
   return(result);
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b226:	627b      	str	r3, [r7, #36]	@ 0x24
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3308      	adds	r3, #8
 800b22e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b230:	623a      	str	r2, [r7, #32]
 800b232:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b234:	69f9      	ldr	r1, [r7, #28]
 800b236:	6a3a      	ldr	r2, [r7, #32]
 800b238:	e841 2300 	strex	r3, r2, [r1]
 800b23c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1e5      	bne.n	800b210 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	e000      	b.n	800b24a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b248:	2302      	movs	r3, #2
  }
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3728      	adds	r7, #40	@ 0x28
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	0800ccf5 	.word	0x0800ccf5
 800b258:	0800cd8b 	.word	0x0800cd8b
 800b25c:	0800cf0d 	.word	0x0800cf0d

0800b260 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b08a      	sub	sp, #40	@ 0x28
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	4613      	mov	r3, r2
 800b26c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b274:	2b20      	cmp	r3, #32
 800b276:	d137      	bne.n	800b2e8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d002      	beq.n	800b284 <HAL_UART_Receive_DMA+0x24>
 800b27e:	88fb      	ldrh	r3, [r7, #6]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d101      	bne.n	800b288 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	e030      	b.n	800b2ea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a18      	ldr	r2, [pc, #96]	@ (800b2f4 <HAL_UART_Receive_DMA+0x94>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d01f      	beq.n	800b2d8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d018      	beq.n	800b2d8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	e853 3f00 	ldrex	r3, [r3]
 800b2b2:	613b      	str	r3, [r7, #16]
   return(result);
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b2ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c4:	623b      	str	r3, [r7, #32]
 800b2c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c8:	69f9      	ldr	r1, [r7, #28]
 800b2ca:	6a3a      	ldr	r2, [r7, #32]
 800b2cc:	e841 2300 	strex	r3, r2, [r1]
 800b2d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1e6      	bne.n	800b2a6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b2d8:	88fb      	ldrh	r3, [r7, #6]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	68b9      	ldr	r1, [r7, #8]
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f001 fbba 	bl	800ca58 <UART_Start_Receive_DMA>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	e000      	b.n	800b2ea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b2e8:	2302      	movs	r3, #2
  }
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3728      	adds	r7, #40	@ 0x28
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	58000c00 	.word	0x58000c00

0800b2f8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b090      	sub	sp, #64	@ 0x40
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b30e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b31a:	2b80      	cmp	r3, #128	@ 0x80
 800b31c:	d139      	bne.n	800b392 <HAL_UART_DMAStop+0x9a>
 800b31e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b320:	2b21      	cmp	r3, #33	@ 0x21
 800b322:	d136      	bne.n	800b392 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3308      	adds	r3, #8
 800b32a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	e853 3f00 	ldrex	r3, [r3]
 800b332:	61fb      	str	r3, [r7, #28]
   return(result);
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b33a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3308      	adds	r3, #8
 800b342:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b344:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b346:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b34a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b34c:	e841 2300 	strex	r3, r2, [r1]
 800b350:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1e5      	bne.n	800b324 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d015      	beq.n	800b38c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b364:	4618      	mov	r0, r3
 800b366:	f7f9 fc17 	bl	8004b98 <HAL_DMA_Abort>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00d      	beq.n	800b38c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b374:	4618      	mov	r0, r3
 800b376:	f7fb f89d 	bl	80064b4 <HAL_DMA_GetError>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b20      	cmp	r3, #32
 800b37e:	d105      	bne.n	800b38c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2210      	movs	r2, #16
 800b384:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800b388:	2303      	movs	r3, #3
 800b38a:	e047      	b.n	800b41c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f001 fc09 	bl	800cba4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b39c:	2b40      	cmp	r3, #64	@ 0x40
 800b39e:	d13c      	bne.n	800b41a <HAL_UART_DMAStop+0x122>
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a2:	2b22      	cmp	r3, #34	@ 0x22
 800b3a4:	d139      	bne.n	800b41a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	3308      	adds	r3, #8
 800b3ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	e853 3f00 	ldrex	r3, [r3]
 800b3b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	3308      	adds	r3, #8
 800b3c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3c6:	61ba      	str	r2, [r7, #24]
 800b3c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ca:	6979      	ldr	r1, [r7, #20]
 800b3cc:	69ba      	ldr	r2, [r7, #24]
 800b3ce:	e841 2300 	strex	r3, r2, [r1]
 800b3d2:	613b      	str	r3, [r7, #16]
   return(result);
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1e5      	bne.n	800b3a6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d017      	beq.n	800b414 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7f9 fbd4 	bl	8004b98 <HAL_DMA_Abort>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00e      	beq.n	800b414 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fb f859 	bl	80064b4 <HAL_DMA_GetError>
 800b402:	4603      	mov	r3, r0
 800b404:	2b20      	cmp	r3, #32
 800b406:	d105      	bne.n	800b414 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2210      	movs	r2, #16
 800b40c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800b410:	2303      	movs	r3, #3
 800b412:	e003      	b.n	800b41c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f001 fc07 	bl	800cc28 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3740      	adds	r7, #64	@ 0x40
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b0ba      	sub	sp, #232	@ 0xe8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	69db      	ldr	r3, [r3, #28]
 800b432:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b44a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b44e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b452:	4013      	ands	r3, r2
 800b454:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b458:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d11b      	bne.n	800b498 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b464:	f003 0320 	and.w	r3, r3, #32
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d015      	beq.n	800b498 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b470:	f003 0320 	and.w	r3, r3, #32
 800b474:	2b00      	cmp	r3, #0
 800b476:	d105      	bne.n	800b484 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b47c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d009      	beq.n	800b498 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f000 8377 	beq.w	800bb7c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	4798      	blx	r3
      }
      return;
 800b496:	e371      	b.n	800bb7c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 8123 	beq.w	800b6e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b4a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b4a6:	4b8d      	ldr	r3, [pc, #564]	@ (800b6dc <HAL_UART_IRQHandler+0x2b8>)
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d106      	bne.n	800b4bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b4ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b4b2:	4b8b      	ldr	r3, [pc, #556]	@ (800b6e0 <HAL_UART_IRQHandler+0x2bc>)
 800b4b4:	4013      	ands	r3, r2
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f000 8116 	beq.w	800b6e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4c0:	f003 0301 	and.w	r3, r3, #1
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d011      	beq.n	800b4ec <HAL_UART_IRQHandler+0xc8>
 800b4c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00b      	beq.n	800b4ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4e2:	f043 0201 	orr.w	r2, r3, #1
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4f0:	f003 0302 	and.w	r3, r3, #2
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d011      	beq.n	800b51c <HAL_UART_IRQHandler+0xf8>
 800b4f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00b      	beq.n	800b51c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2202      	movs	r2, #2
 800b50a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b512:	f043 0204 	orr.w	r2, r3, #4
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b51c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b520:	f003 0304 	and.w	r3, r3, #4
 800b524:	2b00      	cmp	r3, #0
 800b526:	d011      	beq.n	800b54c <HAL_UART_IRQHandler+0x128>
 800b528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b52c:	f003 0301 	and.w	r3, r3, #1
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00b      	beq.n	800b54c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2204      	movs	r2, #4
 800b53a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b542:	f043 0202 	orr.w	r2, r3, #2
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b550:	f003 0308 	and.w	r3, r3, #8
 800b554:	2b00      	cmp	r3, #0
 800b556:	d017      	beq.n	800b588 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b55c:	f003 0320 	and.w	r3, r3, #32
 800b560:	2b00      	cmp	r3, #0
 800b562:	d105      	bne.n	800b570 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b564:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b568:	4b5c      	ldr	r3, [pc, #368]	@ (800b6dc <HAL_UART_IRQHandler+0x2b8>)
 800b56a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00b      	beq.n	800b588 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2208      	movs	r2, #8
 800b576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b57e:	f043 0208 	orr.w	r2, r3, #8
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b58c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b590:	2b00      	cmp	r3, #0
 800b592:	d012      	beq.n	800b5ba <HAL_UART_IRQHandler+0x196>
 800b594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b598:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00c      	beq.n	800b5ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b5a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5b0:	f043 0220 	orr.w	r2, r3, #32
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 82dd 	beq.w	800bb80 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5ca:	f003 0320 	and.w	r3, r3, #32
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d013      	beq.n	800b5fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5d6:	f003 0320 	and.w	r3, r3, #32
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d105      	bne.n	800b5ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d007      	beq.n	800b5fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b600:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b60e:	2b40      	cmp	r3, #64	@ 0x40
 800b610:	d005      	beq.n	800b61e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b616:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d054      	beq.n	800b6c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f001 fb02 	bl	800cc28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b62e:	2b40      	cmp	r3, #64	@ 0x40
 800b630:	d146      	bne.n	800b6c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	3308      	adds	r3, #8
 800b638:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b640:	e853 3f00 	ldrex	r3, [r3]
 800b644:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b648:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b64c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b650:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3308      	adds	r3, #8
 800b65a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b65e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b662:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b666:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b66a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b66e:	e841 2300 	strex	r3, r2, [r1]
 800b672:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1d9      	bne.n	800b632 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b684:	2b00      	cmp	r3, #0
 800b686:	d017      	beq.n	800b6b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b68e:	4a15      	ldr	r2, [pc, #84]	@ (800b6e4 <HAL_UART_IRQHandler+0x2c0>)
 800b690:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b698:	4618      	mov	r0, r3
 800b69a:	f7f9 fd9b 	bl	80051d4 <HAL_DMA_Abort_IT>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d019      	beq.n	800b6d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6b6:	e00f      	b.n	800b6d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fa95 	bl	800bbe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6be:	e00b      	b.n	800b6d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 fa91 	bl	800bbe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6c6:	e007      	b.n	800b6d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fa8d 	bl	800bbe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b6d6:	e253      	b.n	800bb80 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6d8:	bf00      	nop
    return;
 800b6da:	e251      	b.n	800bb80 <HAL_UART_IRQHandler+0x75c>
 800b6dc:	10000001 	.word	0x10000001
 800b6e0:	04000120 	.word	0x04000120
 800b6e4:	0800cf8d 	.word	0x0800cf8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	f040 81e7 	bne.w	800bac0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6f6:	f003 0310 	and.w	r3, r3, #16
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 81e0 	beq.w	800bac0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b704:	f003 0310 	and.w	r3, r3, #16
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f000 81d9 	beq.w	800bac0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2210      	movs	r2, #16
 800b714:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b720:	2b40      	cmp	r3, #64	@ 0x40
 800b722:	f040 8151 	bne.w	800b9c8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a96      	ldr	r2, [pc, #600]	@ (800b988 <HAL_UART_IRQHandler+0x564>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d068      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a93      	ldr	r2, [pc, #588]	@ (800b98c <HAL_UART_IRQHandler+0x568>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d061      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a91      	ldr	r2, [pc, #580]	@ (800b990 <HAL_UART_IRQHandler+0x56c>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d05a      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a8e      	ldr	r2, [pc, #568]	@ (800b994 <HAL_UART_IRQHandler+0x570>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d053      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a8c      	ldr	r2, [pc, #560]	@ (800b998 <HAL_UART_IRQHandler+0x574>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d04c      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a89      	ldr	r2, [pc, #548]	@ (800b99c <HAL_UART_IRQHandler+0x578>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d045      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a87      	ldr	r2, [pc, #540]	@ (800b9a0 <HAL_UART_IRQHandler+0x57c>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d03e      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a84      	ldr	r2, [pc, #528]	@ (800b9a4 <HAL_UART_IRQHandler+0x580>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d037      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a82      	ldr	r2, [pc, #520]	@ (800b9a8 <HAL_UART_IRQHandler+0x584>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d030      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a7f      	ldr	r2, [pc, #508]	@ (800b9ac <HAL_UART_IRQHandler+0x588>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d029      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a7d      	ldr	r2, [pc, #500]	@ (800b9b0 <HAL_UART_IRQHandler+0x58c>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d022      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a7a      	ldr	r2, [pc, #488]	@ (800b9b4 <HAL_UART_IRQHandler+0x590>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d01b      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a78      	ldr	r2, [pc, #480]	@ (800b9b8 <HAL_UART_IRQHandler+0x594>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d014      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a75      	ldr	r2, [pc, #468]	@ (800b9bc <HAL_UART_IRQHandler+0x598>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d00d      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a73      	ldr	r2, [pc, #460]	@ (800b9c0 <HAL_UART_IRQHandler+0x59c>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d006      	beq.n	800b806 <HAL_UART_IRQHandler+0x3e2>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a70      	ldr	r2, [pc, #448]	@ (800b9c4 <HAL_UART_IRQHandler+0x5a0>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d106      	bne.n	800b814 <HAL_UART_IRQHandler+0x3f0>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	b29b      	uxth	r3, r3
 800b812:	e005      	b.n	800b820 <HAL_UART_IRQHandler+0x3fc>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b824:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 81ab 	beq.w	800bb84 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b834:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b838:	429a      	cmp	r2, r3
 800b83a:	f080 81a3 	bcs.w	800bb84 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b844:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b854:	f000 8087 	beq.w	800b966 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b864:	e853 3f00 	ldrex	r3, [r3]
 800b868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b86c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	461a      	mov	r2, r3
 800b87e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b882:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b886:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b88e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b892:	e841 2300 	strex	r3, r2, [r1]
 800b896:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b89a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1da      	bne.n	800b858 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	3308      	adds	r3, #8
 800b8a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b8ac:	e853 3f00 	ldrex	r3, [r3]
 800b8b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b8b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8b4:	f023 0301 	bic.w	r3, r3, #1
 800b8b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b8c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b8ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b8ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b8d2:	e841 2300 	strex	r3, r2, [r1]
 800b8d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b8d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1e1      	bne.n	800b8a2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	3308      	adds	r3, #8
 800b8e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8e8:	e853 3f00 	ldrex	r3, [r3]
 800b8ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b8ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	3308      	adds	r3, #8
 800b8fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b902:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b904:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b906:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b908:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b90a:	e841 2300 	strex	r3, r2, [r1]
 800b90e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1e3      	bne.n	800b8de <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2220      	movs	r2, #32
 800b91a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b92c:	e853 3f00 	ldrex	r3, [r3]
 800b930:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b934:	f023 0310 	bic.w	r3, r3, #16
 800b938:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	461a      	mov	r2, r3
 800b942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b946:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b948:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b94c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b94e:	e841 2300 	strex	r3, r2, [r1]
 800b952:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1e4      	bne.n	800b924 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b960:	4618      	mov	r0, r3
 800b962:	f7f9 f919 	bl	8004b98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2202      	movs	r2, #2
 800b96a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b978:	b29b      	uxth	r3, r3
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 f93b 	bl	800bbfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b986:	e0fd      	b.n	800bb84 <HAL_UART_IRQHandler+0x760>
 800b988:	40020010 	.word	0x40020010
 800b98c:	40020028 	.word	0x40020028
 800b990:	40020040 	.word	0x40020040
 800b994:	40020058 	.word	0x40020058
 800b998:	40020070 	.word	0x40020070
 800b99c:	40020088 	.word	0x40020088
 800b9a0:	400200a0 	.word	0x400200a0
 800b9a4:	400200b8 	.word	0x400200b8
 800b9a8:	40020410 	.word	0x40020410
 800b9ac:	40020428 	.word	0x40020428
 800b9b0:	40020440 	.word	0x40020440
 800b9b4:	40020458 	.word	0x40020458
 800b9b8:	40020470 	.word	0x40020470
 800b9bc:	40020488 	.word	0x40020488
 800b9c0:	400204a0 	.word	0x400204a0
 800b9c4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 80cf 	beq.w	800bb88 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b9ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 80ca 	beq.w	800bb88 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fc:	e853 3f00 	ldrex	r3, [r3]
 800ba00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	461a      	mov	r2, r3
 800ba12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba16:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba18:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba1e:	e841 2300 	strex	r3, r2, [r1]
 800ba22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1e4      	bne.n	800b9f4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3308      	adds	r3, #8
 800ba30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba34:	e853 3f00 	ldrex	r3, [r3]
 800ba38:	623b      	str	r3, [r7, #32]
   return(result);
 800ba3a:	6a3a      	ldr	r2, [r7, #32]
 800ba3c:	4b55      	ldr	r3, [pc, #340]	@ (800bb94 <HAL_UART_IRQHandler+0x770>)
 800ba3e:	4013      	ands	r3, r2
 800ba40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	3308      	adds	r3, #8
 800ba4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ba4e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba56:	e841 2300 	strex	r3, r2, [r1]
 800ba5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1e3      	bne.n	800ba2a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2220      	movs	r2, #32
 800ba66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	e853 3f00 	ldrex	r3, [r3]
 800ba82:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f023 0310 	bic.w	r3, r3, #16
 800ba8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	461a      	mov	r2, r3
 800ba94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ba98:	61fb      	str	r3, [r7, #28]
 800ba9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba9c:	69b9      	ldr	r1, [r7, #24]
 800ba9e:	69fa      	ldr	r2, [r7, #28]
 800baa0:	e841 2300 	strex	r3, r2, [r1]
 800baa4:	617b      	str	r3, [r7, #20]
   return(result);
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1e4      	bne.n	800ba76 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2202      	movs	r2, #2
 800bab0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bab2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bab6:	4619      	mov	r1, r3
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 f89f 	bl	800bbfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800babe:	e063      	b.n	800bb88 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bac4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00e      	beq.n	800baea <HAL_UART_IRQHandler+0x6c6>
 800bacc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bad0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d008      	beq.n	800baea <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bae0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f001 fa93 	bl	800d00e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bae8:	e051      	b.n	800bb8e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800baea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d014      	beq.n	800bb20 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800baf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bafa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d105      	bne.n	800bb0e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bb02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d008      	beq.n	800bb20 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d03a      	beq.n	800bb8c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	4798      	blx	r3
    }
    return;
 800bb1e:	e035      	b.n	800bb8c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bb20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d009      	beq.n	800bb40 <HAL_UART_IRQHandler+0x71c>
 800bb2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d003      	beq.n	800bb40 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f001 fa3d 	bl	800cfb8 <UART_EndTransmit_IT>
    return;
 800bb3e:	e026      	b.n	800bb8e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bb40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d009      	beq.n	800bb60 <HAL_UART_IRQHandler+0x73c>
 800bb4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d003      	beq.n	800bb60 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f001 fa6c 	bl	800d036 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb5e:	e016      	b.n	800bb8e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bb60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d010      	beq.n	800bb8e <HAL_UART_IRQHandler+0x76a>
 800bb6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	da0c      	bge.n	800bb8e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f001 fa54 	bl	800d022 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb7a:	e008      	b.n	800bb8e <HAL_UART_IRQHandler+0x76a>
      return;
 800bb7c:	bf00      	nop
 800bb7e:	e006      	b.n	800bb8e <HAL_UART_IRQHandler+0x76a>
    return;
 800bb80:	bf00      	nop
 800bb82:	e004      	b.n	800bb8e <HAL_UART_IRQHandler+0x76a>
      return;
 800bb84:	bf00      	nop
 800bb86:	e002      	b.n	800bb8e <HAL_UART_IRQHandler+0x76a>
      return;
 800bb88:	bf00      	nop
 800bb8a:	e000      	b.n	800bb8e <HAL_UART_IRQHandler+0x76a>
    return;
 800bb8c:	bf00      	nop
  }
}
 800bb8e:	37e8      	adds	r7, #232	@ 0xe8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	effffffe 	.word	0xeffffffe

0800bb98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bbc8:	bf00      	nop
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	460b      	mov	r3, r1
 800bc06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc08:	bf00      	nop
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc18:	b092      	sub	sp, #72	@ 0x48
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	689a      	ldr	r2, [r3, #8]
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	431a      	orrs	r2, r3
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	695b      	ldr	r3, [r3, #20]
 800bc32:	431a      	orrs	r2, r3
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	69db      	ldr	r3, [r3, #28]
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	4bbe      	ldr	r3, [pc, #760]	@ (800bf3c <UART_SetConfig+0x328>)
 800bc44:	4013      	ands	r3, r2
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	6812      	ldr	r2, [r2, #0]
 800bc4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bc4c:	430b      	orrs	r3, r1
 800bc4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	68da      	ldr	r2, [r3, #12]
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	430a      	orrs	r2, r1
 800bc64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	699b      	ldr	r3, [r3, #24]
 800bc6a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4ab3      	ldr	r2, [pc, #716]	@ (800bf40 <UART_SetConfig+0x32c>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d004      	beq.n	800bc80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	6a1b      	ldr	r3, [r3, #32]
 800bc7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	689a      	ldr	r2, [r3, #8]
 800bc86:	4baf      	ldr	r3, [pc, #700]	@ (800bf44 <UART_SetConfig+0x330>)
 800bc88:	4013      	ands	r3, r2
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	6812      	ldr	r2, [r2, #0]
 800bc8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bc90:	430b      	orrs	r3, r1
 800bc92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc9a:	f023 010f 	bic.w	r1, r3, #15
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	430a      	orrs	r2, r1
 800bca8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4aa6      	ldr	r2, [pc, #664]	@ (800bf48 <UART_SetConfig+0x334>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d177      	bne.n	800bda4 <UART_SetConfig+0x190>
 800bcb4:	4ba5      	ldr	r3, [pc, #660]	@ (800bf4c <UART_SetConfig+0x338>)
 800bcb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bcbc:	2b28      	cmp	r3, #40	@ 0x28
 800bcbe:	d86d      	bhi.n	800bd9c <UART_SetConfig+0x188>
 800bcc0:	a201      	add	r2, pc, #4	@ (adr r2, 800bcc8 <UART_SetConfig+0xb4>)
 800bcc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc6:	bf00      	nop
 800bcc8:	0800bd6d 	.word	0x0800bd6d
 800bccc:	0800bd9d 	.word	0x0800bd9d
 800bcd0:	0800bd9d 	.word	0x0800bd9d
 800bcd4:	0800bd9d 	.word	0x0800bd9d
 800bcd8:	0800bd9d 	.word	0x0800bd9d
 800bcdc:	0800bd9d 	.word	0x0800bd9d
 800bce0:	0800bd9d 	.word	0x0800bd9d
 800bce4:	0800bd9d 	.word	0x0800bd9d
 800bce8:	0800bd75 	.word	0x0800bd75
 800bcec:	0800bd9d 	.word	0x0800bd9d
 800bcf0:	0800bd9d 	.word	0x0800bd9d
 800bcf4:	0800bd9d 	.word	0x0800bd9d
 800bcf8:	0800bd9d 	.word	0x0800bd9d
 800bcfc:	0800bd9d 	.word	0x0800bd9d
 800bd00:	0800bd9d 	.word	0x0800bd9d
 800bd04:	0800bd9d 	.word	0x0800bd9d
 800bd08:	0800bd7d 	.word	0x0800bd7d
 800bd0c:	0800bd9d 	.word	0x0800bd9d
 800bd10:	0800bd9d 	.word	0x0800bd9d
 800bd14:	0800bd9d 	.word	0x0800bd9d
 800bd18:	0800bd9d 	.word	0x0800bd9d
 800bd1c:	0800bd9d 	.word	0x0800bd9d
 800bd20:	0800bd9d 	.word	0x0800bd9d
 800bd24:	0800bd9d 	.word	0x0800bd9d
 800bd28:	0800bd85 	.word	0x0800bd85
 800bd2c:	0800bd9d 	.word	0x0800bd9d
 800bd30:	0800bd9d 	.word	0x0800bd9d
 800bd34:	0800bd9d 	.word	0x0800bd9d
 800bd38:	0800bd9d 	.word	0x0800bd9d
 800bd3c:	0800bd9d 	.word	0x0800bd9d
 800bd40:	0800bd9d 	.word	0x0800bd9d
 800bd44:	0800bd9d 	.word	0x0800bd9d
 800bd48:	0800bd8d 	.word	0x0800bd8d
 800bd4c:	0800bd9d 	.word	0x0800bd9d
 800bd50:	0800bd9d 	.word	0x0800bd9d
 800bd54:	0800bd9d 	.word	0x0800bd9d
 800bd58:	0800bd9d 	.word	0x0800bd9d
 800bd5c:	0800bd9d 	.word	0x0800bd9d
 800bd60:	0800bd9d 	.word	0x0800bd9d
 800bd64:	0800bd9d 	.word	0x0800bd9d
 800bd68:	0800bd95 	.word	0x0800bd95
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd72:	e222      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bd74:	2304      	movs	r3, #4
 800bd76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd7a:	e21e      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bd7c:	2308      	movs	r3, #8
 800bd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd82:	e21a      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bd84:	2310      	movs	r3, #16
 800bd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd8a:	e216      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bd8c:	2320      	movs	r3, #32
 800bd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd92:	e212      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bd94:	2340      	movs	r3, #64	@ 0x40
 800bd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd9a:	e20e      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bd9c:	2380      	movs	r3, #128	@ 0x80
 800bd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bda2:	e20a      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a69      	ldr	r2, [pc, #420]	@ (800bf50 <UART_SetConfig+0x33c>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d130      	bne.n	800be10 <UART_SetConfig+0x1fc>
 800bdae:	4b67      	ldr	r3, [pc, #412]	@ (800bf4c <UART_SetConfig+0x338>)
 800bdb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdb2:	f003 0307 	and.w	r3, r3, #7
 800bdb6:	2b05      	cmp	r3, #5
 800bdb8:	d826      	bhi.n	800be08 <UART_SetConfig+0x1f4>
 800bdba:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc0 <UART_SetConfig+0x1ac>)
 800bdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc0:	0800bdd9 	.word	0x0800bdd9
 800bdc4:	0800bde1 	.word	0x0800bde1
 800bdc8:	0800bde9 	.word	0x0800bde9
 800bdcc:	0800bdf1 	.word	0x0800bdf1
 800bdd0:	0800bdf9 	.word	0x0800bdf9
 800bdd4:	0800be01 	.word	0x0800be01
 800bdd8:	2300      	movs	r3, #0
 800bdda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdde:	e1ec      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bde0:	2304      	movs	r3, #4
 800bde2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bde6:	e1e8      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bde8:	2308      	movs	r3, #8
 800bdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdee:	e1e4      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bdf0:	2310      	movs	r3, #16
 800bdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdf6:	e1e0      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bdf8:	2320      	movs	r3, #32
 800bdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdfe:	e1dc      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800be00:	2340      	movs	r3, #64	@ 0x40
 800be02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be06:	e1d8      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800be08:	2380      	movs	r3, #128	@ 0x80
 800be0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be0e:	e1d4      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a4f      	ldr	r2, [pc, #316]	@ (800bf54 <UART_SetConfig+0x340>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d130      	bne.n	800be7c <UART_SetConfig+0x268>
 800be1a:	4b4c      	ldr	r3, [pc, #304]	@ (800bf4c <UART_SetConfig+0x338>)
 800be1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be1e:	f003 0307 	and.w	r3, r3, #7
 800be22:	2b05      	cmp	r3, #5
 800be24:	d826      	bhi.n	800be74 <UART_SetConfig+0x260>
 800be26:	a201      	add	r2, pc, #4	@ (adr r2, 800be2c <UART_SetConfig+0x218>)
 800be28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2c:	0800be45 	.word	0x0800be45
 800be30:	0800be4d 	.word	0x0800be4d
 800be34:	0800be55 	.word	0x0800be55
 800be38:	0800be5d 	.word	0x0800be5d
 800be3c:	0800be65 	.word	0x0800be65
 800be40:	0800be6d 	.word	0x0800be6d
 800be44:	2300      	movs	r3, #0
 800be46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be4a:	e1b6      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800be4c:	2304      	movs	r3, #4
 800be4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be52:	e1b2      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800be54:	2308      	movs	r3, #8
 800be56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be5a:	e1ae      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800be5c:	2310      	movs	r3, #16
 800be5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be62:	e1aa      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800be64:	2320      	movs	r3, #32
 800be66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be6a:	e1a6      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800be6c:	2340      	movs	r3, #64	@ 0x40
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be72:	e1a2      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800be74:	2380      	movs	r3, #128	@ 0x80
 800be76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be7a:	e19e      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a35      	ldr	r2, [pc, #212]	@ (800bf58 <UART_SetConfig+0x344>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d130      	bne.n	800bee8 <UART_SetConfig+0x2d4>
 800be86:	4b31      	ldr	r3, [pc, #196]	@ (800bf4c <UART_SetConfig+0x338>)
 800be88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be8a:	f003 0307 	and.w	r3, r3, #7
 800be8e:	2b05      	cmp	r3, #5
 800be90:	d826      	bhi.n	800bee0 <UART_SetConfig+0x2cc>
 800be92:	a201      	add	r2, pc, #4	@ (adr r2, 800be98 <UART_SetConfig+0x284>)
 800be94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be98:	0800beb1 	.word	0x0800beb1
 800be9c:	0800beb9 	.word	0x0800beb9
 800bea0:	0800bec1 	.word	0x0800bec1
 800bea4:	0800bec9 	.word	0x0800bec9
 800bea8:	0800bed1 	.word	0x0800bed1
 800beac:	0800bed9 	.word	0x0800bed9
 800beb0:	2300      	movs	r3, #0
 800beb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beb6:	e180      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800beb8:	2304      	movs	r3, #4
 800beba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bebe:	e17c      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bec0:	2308      	movs	r3, #8
 800bec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bec6:	e178      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bec8:	2310      	movs	r3, #16
 800beca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bece:	e174      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bed0:	2320      	movs	r3, #32
 800bed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bed6:	e170      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bed8:	2340      	movs	r3, #64	@ 0x40
 800beda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bede:	e16c      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bee0:	2380      	movs	r3, #128	@ 0x80
 800bee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bee6:	e168      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a1b      	ldr	r2, [pc, #108]	@ (800bf5c <UART_SetConfig+0x348>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d142      	bne.n	800bf78 <UART_SetConfig+0x364>
 800bef2:	4b16      	ldr	r3, [pc, #88]	@ (800bf4c <UART_SetConfig+0x338>)
 800bef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bef6:	f003 0307 	and.w	r3, r3, #7
 800befa:	2b05      	cmp	r3, #5
 800befc:	d838      	bhi.n	800bf70 <UART_SetConfig+0x35c>
 800befe:	a201      	add	r2, pc, #4	@ (adr r2, 800bf04 <UART_SetConfig+0x2f0>)
 800bf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf04:	0800bf1d 	.word	0x0800bf1d
 800bf08:	0800bf25 	.word	0x0800bf25
 800bf0c:	0800bf2d 	.word	0x0800bf2d
 800bf10:	0800bf35 	.word	0x0800bf35
 800bf14:	0800bf61 	.word	0x0800bf61
 800bf18:	0800bf69 	.word	0x0800bf69
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf22:	e14a      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bf24:	2304      	movs	r3, #4
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf2a:	e146      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bf2c:	2308      	movs	r3, #8
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf32:	e142      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bf34:	2310      	movs	r3, #16
 800bf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf3a:	e13e      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bf3c:	cfff69f3 	.word	0xcfff69f3
 800bf40:	58000c00 	.word	0x58000c00
 800bf44:	11fff4ff 	.word	0x11fff4ff
 800bf48:	40011000 	.word	0x40011000
 800bf4c:	58024400 	.word	0x58024400
 800bf50:	40004400 	.word	0x40004400
 800bf54:	40004800 	.word	0x40004800
 800bf58:	40004c00 	.word	0x40004c00
 800bf5c:	40005000 	.word	0x40005000
 800bf60:	2320      	movs	r3, #32
 800bf62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf66:	e128      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bf68:	2340      	movs	r3, #64	@ 0x40
 800bf6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf6e:	e124      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bf70:	2380      	movs	r3, #128	@ 0x80
 800bf72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf76:	e120      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4acb      	ldr	r2, [pc, #812]	@ (800c2ac <UART_SetConfig+0x698>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d176      	bne.n	800c070 <UART_SetConfig+0x45c>
 800bf82:	4bcb      	ldr	r3, [pc, #812]	@ (800c2b0 <UART_SetConfig+0x69c>)
 800bf84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf8a:	2b28      	cmp	r3, #40	@ 0x28
 800bf8c:	d86c      	bhi.n	800c068 <UART_SetConfig+0x454>
 800bf8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf94 <UART_SetConfig+0x380>)
 800bf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf94:	0800c039 	.word	0x0800c039
 800bf98:	0800c069 	.word	0x0800c069
 800bf9c:	0800c069 	.word	0x0800c069
 800bfa0:	0800c069 	.word	0x0800c069
 800bfa4:	0800c069 	.word	0x0800c069
 800bfa8:	0800c069 	.word	0x0800c069
 800bfac:	0800c069 	.word	0x0800c069
 800bfb0:	0800c069 	.word	0x0800c069
 800bfb4:	0800c041 	.word	0x0800c041
 800bfb8:	0800c069 	.word	0x0800c069
 800bfbc:	0800c069 	.word	0x0800c069
 800bfc0:	0800c069 	.word	0x0800c069
 800bfc4:	0800c069 	.word	0x0800c069
 800bfc8:	0800c069 	.word	0x0800c069
 800bfcc:	0800c069 	.word	0x0800c069
 800bfd0:	0800c069 	.word	0x0800c069
 800bfd4:	0800c049 	.word	0x0800c049
 800bfd8:	0800c069 	.word	0x0800c069
 800bfdc:	0800c069 	.word	0x0800c069
 800bfe0:	0800c069 	.word	0x0800c069
 800bfe4:	0800c069 	.word	0x0800c069
 800bfe8:	0800c069 	.word	0x0800c069
 800bfec:	0800c069 	.word	0x0800c069
 800bff0:	0800c069 	.word	0x0800c069
 800bff4:	0800c051 	.word	0x0800c051
 800bff8:	0800c069 	.word	0x0800c069
 800bffc:	0800c069 	.word	0x0800c069
 800c000:	0800c069 	.word	0x0800c069
 800c004:	0800c069 	.word	0x0800c069
 800c008:	0800c069 	.word	0x0800c069
 800c00c:	0800c069 	.word	0x0800c069
 800c010:	0800c069 	.word	0x0800c069
 800c014:	0800c059 	.word	0x0800c059
 800c018:	0800c069 	.word	0x0800c069
 800c01c:	0800c069 	.word	0x0800c069
 800c020:	0800c069 	.word	0x0800c069
 800c024:	0800c069 	.word	0x0800c069
 800c028:	0800c069 	.word	0x0800c069
 800c02c:	0800c069 	.word	0x0800c069
 800c030:	0800c069 	.word	0x0800c069
 800c034:	0800c061 	.word	0x0800c061
 800c038:	2301      	movs	r3, #1
 800c03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c03e:	e0bc      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c040:	2304      	movs	r3, #4
 800c042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c046:	e0b8      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c048:	2308      	movs	r3, #8
 800c04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c04e:	e0b4      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c050:	2310      	movs	r3, #16
 800c052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c056:	e0b0      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c058:	2320      	movs	r3, #32
 800c05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c05e:	e0ac      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c060:	2340      	movs	r3, #64	@ 0x40
 800c062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c066:	e0a8      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c068:	2380      	movs	r3, #128	@ 0x80
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c06e:	e0a4      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a8f      	ldr	r2, [pc, #572]	@ (800c2b4 <UART_SetConfig+0x6a0>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d130      	bne.n	800c0dc <UART_SetConfig+0x4c8>
 800c07a:	4b8d      	ldr	r3, [pc, #564]	@ (800c2b0 <UART_SetConfig+0x69c>)
 800c07c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c07e:	f003 0307 	and.w	r3, r3, #7
 800c082:	2b05      	cmp	r3, #5
 800c084:	d826      	bhi.n	800c0d4 <UART_SetConfig+0x4c0>
 800c086:	a201      	add	r2, pc, #4	@ (adr r2, 800c08c <UART_SetConfig+0x478>)
 800c088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c08c:	0800c0a5 	.word	0x0800c0a5
 800c090:	0800c0ad 	.word	0x0800c0ad
 800c094:	0800c0b5 	.word	0x0800c0b5
 800c098:	0800c0bd 	.word	0x0800c0bd
 800c09c:	0800c0c5 	.word	0x0800c0c5
 800c0a0:	0800c0cd 	.word	0x0800c0cd
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0aa:	e086      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c0ac:	2304      	movs	r3, #4
 800c0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0b2:	e082      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c0b4:	2308      	movs	r3, #8
 800c0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ba:	e07e      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c0bc:	2310      	movs	r3, #16
 800c0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0c2:	e07a      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c0c4:	2320      	movs	r3, #32
 800c0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ca:	e076      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c0cc:	2340      	movs	r3, #64	@ 0x40
 800c0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0d2:	e072      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c0d4:	2380      	movs	r3, #128	@ 0x80
 800c0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0da:	e06e      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a75      	ldr	r2, [pc, #468]	@ (800c2b8 <UART_SetConfig+0x6a4>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d130      	bne.n	800c148 <UART_SetConfig+0x534>
 800c0e6:	4b72      	ldr	r3, [pc, #456]	@ (800c2b0 <UART_SetConfig+0x69c>)
 800c0e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ea:	f003 0307 	and.w	r3, r3, #7
 800c0ee:	2b05      	cmp	r3, #5
 800c0f0:	d826      	bhi.n	800c140 <UART_SetConfig+0x52c>
 800c0f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0f8 <UART_SetConfig+0x4e4>)
 800c0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f8:	0800c111 	.word	0x0800c111
 800c0fc:	0800c119 	.word	0x0800c119
 800c100:	0800c121 	.word	0x0800c121
 800c104:	0800c129 	.word	0x0800c129
 800c108:	0800c131 	.word	0x0800c131
 800c10c:	0800c139 	.word	0x0800c139
 800c110:	2300      	movs	r3, #0
 800c112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c116:	e050      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c118:	2304      	movs	r3, #4
 800c11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c11e:	e04c      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c120:	2308      	movs	r3, #8
 800c122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c126:	e048      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c128:	2310      	movs	r3, #16
 800c12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c12e:	e044      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c130:	2320      	movs	r3, #32
 800c132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c136:	e040      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c138:	2340      	movs	r3, #64	@ 0x40
 800c13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c13e:	e03c      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c140:	2380      	movs	r3, #128	@ 0x80
 800c142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c146:	e038      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a5b      	ldr	r2, [pc, #364]	@ (800c2bc <UART_SetConfig+0x6a8>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d130      	bne.n	800c1b4 <UART_SetConfig+0x5a0>
 800c152:	4b57      	ldr	r3, [pc, #348]	@ (800c2b0 <UART_SetConfig+0x69c>)
 800c154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c156:	f003 0307 	and.w	r3, r3, #7
 800c15a:	2b05      	cmp	r3, #5
 800c15c:	d826      	bhi.n	800c1ac <UART_SetConfig+0x598>
 800c15e:	a201      	add	r2, pc, #4	@ (adr r2, 800c164 <UART_SetConfig+0x550>)
 800c160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c164:	0800c17d 	.word	0x0800c17d
 800c168:	0800c185 	.word	0x0800c185
 800c16c:	0800c18d 	.word	0x0800c18d
 800c170:	0800c195 	.word	0x0800c195
 800c174:	0800c19d 	.word	0x0800c19d
 800c178:	0800c1a5 	.word	0x0800c1a5
 800c17c:	2302      	movs	r3, #2
 800c17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c182:	e01a      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c184:	2304      	movs	r3, #4
 800c186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c18a:	e016      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c18c:	2308      	movs	r3, #8
 800c18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c192:	e012      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c194:	2310      	movs	r3, #16
 800c196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c19a:	e00e      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c19c:	2320      	movs	r3, #32
 800c19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1a2:	e00a      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c1a4:	2340      	movs	r3, #64	@ 0x40
 800c1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1aa:	e006      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c1ac:	2380      	movs	r3, #128	@ 0x80
 800c1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1b2:	e002      	b.n	800c1ba <UART_SetConfig+0x5a6>
 800c1b4:	2380      	movs	r3, #128	@ 0x80
 800c1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a3f      	ldr	r2, [pc, #252]	@ (800c2bc <UART_SetConfig+0x6a8>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	f040 80f8 	bne.w	800c3b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c1c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c1ca:	2b20      	cmp	r3, #32
 800c1cc:	dc46      	bgt.n	800c25c <UART_SetConfig+0x648>
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	f2c0 8082 	blt.w	800c2d8 <UART_SetConfig+0x6c4>
 800c1d4:	3b02      	subs	r3, #2
 800c1d6:	2b1e      	cmp	r3, #30
 800c1d8:	d87e      	bhi.n	800c2d8 <UART_SetConfig+0x6c4>
 800c1da:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e0 <UART_SetConfig+0x5cc>)
 800c1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e0:	0800c263 	.word	0x0800c263
 800c1e4:	0800c2d9 	.word	0x0800c2d9
 800c1e8:	0800c26b 	.word	0x0800c26b
 800c1ec:	0800c2d9 	.word	0x0800c2d9
 800c1f0:	0800c2d9 	.word	0x0800c2d9
 800c1f4:	0800c2d9 	.word	0x0800c2d9
 800c1f8:	0800c27b 	.word	0x0800c27b
 800c1fc:	0800c2d9 	.word	0x0800c2d9
 800c200:	0800c2d9 	.word	0x0800c2d9
 800c204:	0800c2d9 	.word	0x0800c2d9
 800c208:	0800c2d9 	.word	0x0800c2d9
 800c20c:	0800c2d9 	.word	0x0800c2d9
 800c210:	0800c2d9 	.word	0x0800c2d9
 800c214:	0800c2d9 	.word	0x0800c2d9
 800c218:	0800c28b 	.word	0x0800c28b
 800c21c:	0800c2d9 	.word	0x0800c2d9
 800c220:	0800c2d9 	.word	0x0800c2d9
 800c224:	0800c2d9 	.word	0x0800c2d9
 800c228:	0800c2d9 	.word	0x0800c2d9
 800c22c:	0800c2d9 	.word	0x0800c2d9
 800c230:	0800c2d9 	.word	0x0800c2d9
 800c234:	0800c2d9 	.word	0x0800c2d9
 800c238:	0800c2d9 	.word	0x0800c2d9
 800c23c:	0800c2d9 	.word	0x0800c2d9
 800c240:	0800c2d9 	.word	0x0800c2d9
 800c244:	0800c2d9 	.word	0x0800c2d9
 800c248:	0800c2d9 	.word	0x0800c2d9
 800c24c:	0800c2d9 	.word	0x0800c2d9
 800c250:	0800c2d9 	.word	0x0800c2d9
 800c254:	0800c2d9 	.word	0x0800c2d9
 800c258:	0800c2cb 	.word	0x0800c2cb
 800c25c:	2b40      	cmp	r3, #64	@ 0x40
 800c25e:	d037      	beq.n	800c2d0 <UART_SetConfig+0x6bc>
 800c260:	e03a      	b.n	800c2d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c262:	f7fd feeb 	bl	800a03c <HAL_RCCEx_GetD3PCLK1Freq>
 800c266:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c268:	e03c      	b.n	800c2e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c26a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fd fefa 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c278:	e034      	b.n	800c2e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c27a:	f107 0318 	add.w	r3, r7, #24
 800c27e:	4618      	mov	r0, r3
 800c280:	f7fe f846 	bl	800a310 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c288:	e02c      	b.n	800c2e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c28a:	4b09      	ldr	r3, [pc, #36]	@ (800c2b0 <UART_SetConfig+0x69c>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 0320 	and.w	r3, r3, #32
 800c292:	2b00      	cmp	r3, #0
 800c294:	d016      	beq.n	800c2c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c296:	4b06      	ldr	r3, [pc, #24]	@ (800c2b0 <UART_SetConfig+0x69c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	08db      	lsrs	r3, r3, #3
 800c29c:	f003 0303 	and.w	r3, r3, #3
 800c2a0:	4a07      	ldr	r2, [pc, #28]	@ (800c2c0 <UART_SetConfig+0x6ac>)
 800c2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c2a8:	e01c      	b.n	800c2e4 <UART_SetConfig+0x6d0>
 800c2aa:	bf00      	nop
 800c2ac:	40011400 	.word	0x40011400
 800c2b0:	58024400 	.word	0x58024400
 800c2b4:	40007800 	.word	0x40007800
 800c2b8:	40007c00 	.word	0x40007c00
 800c2bc:	58000c00 	.word	0x58000c00
 800c2c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c2c4:	4b9d      	ldr	r3, [pc, #628]	@ (800c53c <UART_SetConfig+0x928>)
 800c2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2c8:	e00c      	b.n	800c2e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c2ca:	4b9d      	ldr	r3, [pc, #628]	@ (800c540 <UART_SetConfig+0x92c>)
 800c2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2ce:	e009      	b.n	800c2e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2d6:	e005      	b.n	800c2e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c2e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c2e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f000 81de 	beq.w	800c6a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2f0:	4a94      	ldr	r2, [pc, #592]	@ (800c544 <UART_SetConfig+0x930>)
 800c2f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	685a      	ldr	r2, [r3, #4]
 800c304:	4613      	mov	r3, r2
 800c306:	005b      	lsls	r3, r3, #1
 800c308:	4413      	add	r3, r2
 800c30a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d305      	bcc.n	800c31c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c318:	429a      	cmp	r2, r3
 800c31a:	d903      	bls.n	800c324 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c31c:	2301      	movs	r3, #1
 800c31e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c322:	e1c1      	b.n	800c6a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c326:	2200      	movs	r2, #0
 800c328:	60bb      	str	r3, [r7, #8]
 800c32a:	60fa      	str	r2, [r7, #12]
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c330:	4a84      	ldr	r2, [pc, #528]	@ (800c544 <UART_SetConfig+0x930>)
 800c332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c336:	b29b      	uxth	r3, r3
 800c338:	2200      	movs	r2, #0
 800c33a:	603b      	str	r3, [r7, #0]
 800c33c:	607a      	str	r2, [r7, #4]
 800c33e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c346:	f7f4 f883 	bl	8000450 <__aeabi_uldivmod>
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	4610      	mov	r0, r2
 800c350:	4619      	mov	r1, r3
 800c352:	f04f 0200 	mov.w	r2, #0
 800c356:	f04f 0300 	mov.w	r3, #0
 800c35a:	020b      	lsls	r3, r1, #8
 800c35c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c360:	0202      	lsls	r2, r0, #8
 800c362:	6979      	ldr	r1, [r7, #20]
 800c364:	6849      	ldr	r1, [r1, #4]
 800c366:	0849      	lsrs	r1, r1, #1
 800c368:	2000      	movs	r0, #0
 800c36a:	460c      	mov	r4, r1
 800c36c:	4605      	mov	r5, r0
 800c36e:	eb12 0804 	adds.w	r8, r2, r4
 800c372:	eb43 0905 	adc.w	r9, r3, r5
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	469a      	mov	sl, r3
 800c37e:	4693      	mov	fp, r2
 800c380:	4652      	mov	r2, sl
 800c382:	465b      	mov	r3, fp
 800c384:	4640      	mov	r0, r8
 800c386:	4649      	mov	r1, r9
 800c388:	f7f4 f862 	bl	8000450 <__aeabi_uldivmod>
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	4613      	mov	r3, r2
 800c392:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c39a:	d308      	bcc.n	800c3ae <UART_SetConfig+0x79a>
 800c39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3a2:	d204      	bcs.n	800c3ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3aa:	60da      	str	r2, [r3, #12]
 800c3ac:	e17c      	b.n	800c6a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c3b4:	e178      	b.n	800c6a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	69db      	ldr	r3, [r3, #28]
 800c3ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c3be:	f040 80c5 	bne.w	800c54c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c3c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c3c6:	2b20      	cmp	r3, #32
 800c3c8:	dc48      	bgt.n	800c45c <UART_SetConfig+0x848>
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	db7b      	blt.n	800c4c6 <UART_SetConfig+0x8b2>
 800c3ce:	2b20      	cmp	r3, #32
 800c3d0:	d879      	bhi.n	800c4c6 <UART_SetConfig+0x8b2>
 800c3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3d8 <UART_SetConfig+0x7c4>)
 800c3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d8:	0800c463 	.word	0x0800c463
 800c3dc:	0800c46b 	.word	0x0800c46b
 800c3e0:	0800c4c7 	.word	0x0800c4c7
 800c3e4:	0800c4c7 	.word	0x0800c4c7
 800c3e8:	0800c473 	.word	0x0800c473
 800c3ec:	0800c4c7 	.word	0x0800c4c7
 800c3f0:	0800c4c7 	.word	0x0800c4c7
 800c3f4:	0800c4c7 	.word	0x0800c4c7
 800c3f8:	0800c483 	.word	0x0800c483
 800c3fc:	0800c4c7 	.word	0x0800c4c7
 800c400:	0800c4c7 	.word	0x0800c4c7
 800c404:	0800c4c7 	.word	0x0800c4c7
 800c408:	0800c4c7 	.word	0x0800c4c7
 800c40c:	0800c4c7 	.word	0x0800c4c7
 800c410:	0800c4c7 	.word	0x0800c4c7
 800c414:	0800c4c7 	.word	0x0800c4c7
 800c418:	0800c493 	.word	0x0800c493
 800c41c:	0800c4c7 	.word	0x0800c4c7
 800c420:	0800c4c7 	.word	0x0800c4c7
 800c424:	0800c4c7 	.word	0x0800c4c7
 800c428:	0800c4c7 	.word	0x0800c4c7
 800c42c:	0800c4c7 	.word	0x0800c4c7
 800c430:	0800c4c7 	.word	0x0800c4c7
 800c434:	0800c4c7 	.word	0x0800c4c7
 800c438:	0800c4c7 	.word	0x0800c4c7
 800c43c:	0800c4c7 	.word	0x0800c4c7
 800c440:	0800c4c7 	.word	0x0800c4c7
 800c444:	0800c4c7 	.word	0x0800c4c7
 800c448:	0800c4c7 	.word	0x0800c4c7
 800c44c:	0800c4c7 	.word	0x0800c4c7
 800c450:	0800c4c7 	.word	0x0800c4c7
 800c454:	0800c4c7 	.word	0x0800c4c7
 800c458:	0800c4b9 	.word	0x0800c4b9
 800c45c:	2b40      	cmp	r3, #64	@ 0x40
 800c45e:	d02e      	beq.n	800c4be <UART_SetConfig+0x8aa>
 800c460:	e031      	b.n	800c4c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c462:	f7fb fdf3 	bl	800804c <HAL_RCC_GetPCLK1Freq>
 800c466:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c468:	e033      	b.n	800c4d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c46a:	f7fb fe05 	bl	8008078 <HAL_RCC_GetPCLK2Freq>
 800c46e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c470:	e02f      	b.n	800c4d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c476:	4618      	mov	r0, r3
 800c478:	f7fd fdf6 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c480:	e027      	b.n	800c4d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c482:	f107 0318 	add.w	r3, r7, #24
 800c486:	4618      	mov	r0, r3
 800c488:	f7fd ff42 	bl	800a310 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c490:	e01f      	b.n	800c4d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c492:	4b2d      	ldr	r3, [pc, #180]	@ (800c548 <UART_SetConfig+0x934>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f003 0320 	and.w	r3, r3, #32
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d009      	beq.n	800c4b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c49e:	4b2a      	ldr	r3, [pc, #168]	@ (800c548 <UART_SetConfig+0x934>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	08db      	lsrs	r3, r3, #3
 800c4a4:	f003 0303 	and.w	r3, r3, #3
 800c4a8:	4a24      	ldr	r2, [pc, #144]	@ (800c53c <UART_SetConfig+0x928>)
 800c4aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c4b0:	e00f      	b.n	800c4d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c4b2:	4b22      	ldr	r3, [pc, #136]	@ (800c53c <UART_SetConfig+0x928>)
 800c4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4b6:	e00c      	b.n	800c4d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4b8:	4b21      	ldr	r3, [pc, #132]	@ (800c540 <UART_SetConfig+0x92c>)
 800c4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4bc:	e009      	b.n	800c4d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4c4:	e005      	b.n	800c4d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c4d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c4d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 80e7 	beq.w	800c6a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4de:	4a19      	ldr	r2, [pc, #100]	@ (800c544 <UART_SetConfig+0x930>)
 800c4e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4ec:	005a      	lsls	r2, r3, #1
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	085b      	lsrs	r3, r3, #1
 800c4f4:	441a      	add	r2, r3
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c502:	2b0f      	cmp	r3, #15
 800c504:	d916      	bls.n	800c534 <UART_SetConfig+0x920>
 800c506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c50c:	d212      	bcs.n	800c534 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c510:	b29b      	uxth	r3, r3
 800c512:	f023 030f 	bic.w	r3, r3, #15
 800c516:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c51a:	085b      	lsrs	r3, r3, #1
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	f003 0307 	and.w	r3, r3, #7
 800c522:	b29a      	uxth	r2, r3
 800c524:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c526:	4313      	orrs	r3, r2
 800c528:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c530:	60da      	str	r2, [r3, #12]
 800c532:	e0b9      	b.n	800c6a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c53a:	e0b5      	b.n	800c6a8 <UART_SetConfig+0xa94>
 800c53c:	03d09000 	.word	0x03d09000
 800c540:	003d0900 	.word	0x003d0900
 800c544:	08021a7c 	.word	0x08021a7c
 800c548:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c54c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c550:	2b20      	cmp	r3, #32
 800c552:	dc49      	bgt.n	800c5e8 <UART_SetConfig+0x9d4>
 800c554:	2b00      	cmp	r3, #0
 800c556:	db7c      	blt.n	800c652 <UART_SetConfig+0xa3e>
 800c558:	2b20      	cmp	r3, #32
 800c55a:	d87a      	bhi.n	800c652 <UART_SetConfig+0xa3e>
 800c55c:	a201      	add	r2, pc, #4	@ (adr r2, 800c564 <UART_SetConfig+0x950>)
 800c55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c562:	bf00      	nop
 800c564:	0800c5ef 	.word	0x0800c5ef
 800c568:	0800c5f7 	.word	0x0800c5f7
 800c56c:	0800c653 	.word	0x0800c653
 800c570:	0800c653 	.word	0x0800c653
 800c574:	0800c5ff 	.word	0x0800c5ff
 800c578:	0800c653 	.word	0x0800c653
 800c57c:	0800c653 	.word	0x0800c653
 800c580:	0800c653 	.word	0x0800c653
 800c584:	0800c60f 	.word	0x0800c60f
 800c588:	0800c653 	.word	0x0800c653
 800c58c:	0800c653 	.word	0x0800c653
 800c590:	0800c653 	.word	0x0800c653
 800c594:	0800c653 	.word	0x0800c653
 800c598:	0800c653 	.word	0x0800c653
 800c59c:	0800c653 	.word	0x0800c653
 800c5a0:	0800c653 	.word	0x0800c653
 800c5a4:	0800c61f 	.word	0x0800c61f
 800c5a8:	0800c653 	.word	0x0800c653
 800c5ac:	0800c653 	.word	0x0800c653
 800c5b0:	0800c653 	.word	0x0800c653
 800c5b4:	0800c653 	.word	0x0800c653
 800c5b8:	0800c653 	.word	0x0800c653
 800c5bc:	0800c653 	.word	0x0800c653
 800c5c0:	0800c653 	.word	0x0800c653
 800c5c4:	0800c653 	.word	0x0800c653
 800c5c8:	0800c653 	.word	0x0800c653
 800c5cc:	0800c653 	.word	0x0800c653
 800c5d0:	0800c653 	.word	0x0800c653
 800c5d4:	0800c653 	.word	0x0800c653
 800c5d8:	0800c653 	.word	0x0800c653
 800c5dc:	0800c653 	.word	0x0800c653
 800c5e0:	0800c653 	.word	0x0800c653
 800c5e4:	0800c645 	.word	0x0800c645
 800c5e8:	2b40      	cmp	r3, #64	@ 0x40
 800c5ea:	d02e      	beq.n	800c64a <UART_SetConfig+0xa36>
 800c5ec:	e031      	b.n	800c652 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5ee:	f7fb fd2d 	bl	800804c <HAL_RCC_GetPCLK1Freq>
 800c5f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c5f4:	e033      	b.n	800c65e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5f6:	f7fb fd3f 	bl	8008078 <HAL_RCC_GetPCLK2Freq>
 800c5fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c5fc:	e02f      	b.n	800c65e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c602:	4618      	mov	r0, r3
 800c604:	f7fd fd30 	bl	800a068 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c60c:	e027      	b.n	800c65e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c60e:	f107 0318 	add.w	r3, r7, #24
 800c612:	4618      	mov	r0, r3
 800c614:	f7fd fe7c 	bl	800a310 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c61c:	e01f      	b.n	800c65e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c61e:	4b2d      	ldr	r3, [pc, #180]	@ (800c6d4 <UART_SetConfig+0xac0>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f003 0320 	and.w	r3, r3, #32
 800c626:	2b00      	cmp	r3, #0
 800c628:	d009      	beq.n	800c63e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c62a:	4b2a      	ldr	r3, [pc, #168]	@ (800c6d4 <UART_SetConfig+0xac0>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	08db      	lsrs	r3, r3, #3
 800c630:	f003 0303 	and.w	r3, r3, #3
 800c634:	4a28      	ldr	r2, [pc, #160]	@ (800c6d8 <UART_SetConfig+0xac4>)
 800c636:	fa22 f303 	lsr.w	r3, r2, r3
 800c63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c63c:	e00f      	b.n	800c65e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c63e:	4b26      	ldr	r3, [pc, #152]	@ (800c6d8 <UART_SetConfig+0xac4>)
 800c640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c642:	e00c      	b.n	800c65e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c644:	4b25      	ldr	r3, [pc, #148]	@ (800c6dc <UART_SetConfig+0xac8>)
 800c646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c648:	e009      	b.n	800c65e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c64a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c650:	e005      	b.n	800c65e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c652:	2300      	movs	r3, #0
 800c654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c656:	2301      	movs	r3, #1
 800c658:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c65c:	bf00      	nop
    }

    if (pclk != 0U)
 800c65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c660:	2b00      	cmp	r3, #0
 800c662:	d021      	beq.n	800c6a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c668:	4a1d      	ldr	r2, [pc, #116]	@ (800c6e0 <UART_SetConfig+0xacc>)
 800c66a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c66e:	461a      	mov	r2, r3
 800c670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c672:	fbb3 f2f2 	udiv	r2, r3, r2
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	085b      	lsrs	r3, r3, #1
 800c67c:	441a      	add	r2, r3
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	fbb2 f3f3 	udiv	r3, r2, r3
 800c686:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c68a:	2b0f      	cmp	r3, #15
 800c68c:	d909      	bls.n	800c6a2 <UART_SetConfig+0xa8e>
 800c68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c694:	d205      	bcs.n	800c6a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c698:	b29a      	uxth	r2, r3
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	60da      	str	r2, [r3, #12]
 800c6a0:	e002      	b.n	800c6a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c6c4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3748      	adds	r7, #72	@ 0x48
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c6d2:	bf00      	nop
 800c6d4:	58024400 	.word	0x58024400
 800c6d8:	03d09000 	.word	0x03d09000
 800c6dc:	003d0900 	.word	0x003d0900
 800c6e0:	08021a7c 	.word	0x08021a7c

0800c6e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6f0:	f003 0308 	and.w	r3, r3, #8
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00a      	beq.n	800c70e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	430a      	orrs	r2, r1
 800c70c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c712:	f003 0301 	and.w	r3, r3, #1
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00a      	beq.n	800c730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	430a      	orrs	r2, r1
 800c72e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c734:	f003 0302 	and.w	r3, r3, #2
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d00a      	beq.n	800c752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	430a      	orrs	r2, r1
 800c750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c756:	f003 0304 	and.w	r3, r3, #4
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00a      	beq.n	800c774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	430a      	orrs	r2, r1
 800c772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c778:	f003 0310 	and.w	r3, r3, #16
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00a      	beq.n	800c796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	430a      	orrs	r2, r1
 800c794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c79a:	f003 0320 	and.w	r3, r3, #32
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00a      	beq.n	800c7b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	430a      	orrs	r2, r1
 800c7b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d01a      	beq.n	800c7fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	430a      	orrs	r2, r1
 800c7d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7e2:	d10a      	bne.n	800c7fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	430a      	orrs	r2, r1
 800c7f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00a      	beq.n	800c81c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	430a      	orrs	r2, r1
 800c81a:	605a      	str	r2, [r3, #4]
  }
}
 800c81c:	bf00      	nop
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b098      	sub	sp, #96	@ 0x60
 800c82c:	af02      	add	r7, sp, #8
 800c82e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c838:	f7f5 fffa 	bl	8002830 <HAL_GetTick>
 800c83c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 0308 	and.w	r3, r3, #8
 800c848:	2b08      	cmp	r3, #8
 800c84a:	d12f      	bne.n	800c8ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c84c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c854:	2200      	movs	r2, #0
 800c856:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 f88e 	bl	800c97c <UART_WaitOnFlagUntilTimeout>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d022      	beq.n	800c8ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c86e:	e853 3f00 	ldrex	r3, [r3]
 800c872:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c87a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	461a      	mov	r2, r3
 800c882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c884:	647b      	str	r3, [r7, #68]	@ 0x44
 800c886:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c88a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c88c:	e841 2300 	strex	r3, r2, [r1]
 800c890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1e6      	bne.n	800c866 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2220      	movs	r2, #32
 800c89c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	e063      	b.n	800c974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 0304 	and.w	r3, r3, #4
 800c8b6:	2b04      	cmp	r3, #4
 800c8b8:	d149      	bne.n	800c94e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 f857 	bl	800c97c <UART_WaitOnFlagUntilTimeout>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d03c      	beq.n	800c94e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8dc:	e853 3f00 	ldrex	r3, [r3]
 800c8e0:	623b      	str	r3, [r7, #32]
   return(result);
 800c8e2:	6a3b      	ldr	r3, [r7, #32]
 800c8e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8fa:	e841 2300 	strex	r3, r2, [r1]
 800c8fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1e6      	bne.n	800c8d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3308      	adds	r3, #8
 800c90c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	e853 3f00 	ldrex	r3, [r3]
 800c914:	60fb      	str	r3, [r7, #12]
   return(result);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f023 0301 	bic.w	r3, r3, #1
 800c91c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	3308      	adds	r3, #8
 800c924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c926:	61fa      	str	r2, [r7, #28]
 800c928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92a:	69b9      	ldr	r1, [r7, #24]
 800c92c:	69fa      	ldr	r2, [r7, #28]
 800c92e:	e841 2300 	strex	r3, r2, [r1]
 800c932:	617b      	str	r3, [r7, #20]
   return(result);
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1e5      	bne.n	800c906 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2220      	movs	r2, #32
 800c93e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2200      	movs	r2, #0
 800c946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c94a:	2303      	movs	r3, #3
 800c94c:	e012      	b.n	800c974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2220      	movs	r2, #32
 800c952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2220      	movs	r2, #32
 800c95a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3758      	adds	r7, #88	@ 0x58
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	603b      	str	r3, [r7, #0]
 800c988:	4613      	mov	r3, r2
 800c98a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c98c:	e04f      	b.n	800ca2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c994:	d04b      	beq.n	800ca2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c996:	f7f5 ff4b 	bl	8002830 <HAL_GetTick>
 800c99a:	4602      	mov	r2, r0
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	1ad3      	subs	r3, r2, r3
 800c9a0:	69ba      	ldr	r2, [r7, #24]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d302      	bcc.n	800c9ac <UART_WaitOnFlagUntilTimeout+0x30>
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d101      	bne.n	800c9b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c9ac:	2303      	movs	r3, #3
 800c9ae:	e04e      	b.n	800ca4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f003 0304 	and.w	r3, r3, #4
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d037      	beq.n	800ca2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	2b80      	cmp	r3, #128	@ 0x80
 800c9c2:	d034      	beq.n	800ca2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2b40      	cmp	r3, #64	@ 0x40
 800c9c8:	d031      	beq.n	800ca2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	69db      	ldr	r3, [r3, #28]
 800c9d0:	f003 0308 	and.w	r3, r3, #8
 800c9d4:	2b08      	cmp	r3, #8
 800c9d6:	d110      	bne.n	800c9fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2208      	movs	r2, #8
 800c9de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f000 f921 	bl	800cc28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2208      	movs	r2, #8
 800c9ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e029      	b.n	800ca4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	69db      	ldr	r3, [r3, #28]
 800ca00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca08:	d111      	bne.n	800ca2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ca12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca14:	68f8      	ldr	r0, [r7, #12]
 800ca16:	f000 f907 	bl	800cc28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2220      	movs	r2, #32
 800ca1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ca2a:	2303      	movs	r3, #3
 800ca2c:	e00f      	b.n	800ca4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	69da      	ldr	r2, [r3, #28]
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	4013      	ands	r3, r2
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	bf0c      	ite	eq
 800ca3e:	2301      	moveq	r3, #1
 800ca40:	2300      	movne	r3, #0
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	461a      	mov	r2, r3
 800ca46:	79fb      	ldrb	r3, [r7, #7]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d0a0      	beq.n	800c98e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
	...

0800ca58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b096      	sub	sp, #88	@ 0x58
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	4613      	mov	r3, r2
 800ca64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	88fa      	ldrh	r2, [r7, #6]
 800ca70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2222      	movs	r2, #34	@ 0x22
 800ca80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d02d      	beq.n	800caea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca94:	4a40      	ldr	r2, [pc, #256]	@ (800cb98 <UART_Start_Receive_DMA+0x140>)
 800ca96:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca9e:	4a3f      	ldr	r2, [pc, #252]	@ (800cb9c <UART_Start_Receive_DMA+0x144>)
 800caa0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caa8:	4a3d      	ldr	r2, [pc, #244]	@ (800cba0 <UART_Start_Receive_DMA+0x148>)
 800caaa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cab2:	2200      	movs	r2, #0
 800cab4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	3324      	adds	r3, #36	@ 0x24
 800cac2:	4619      	mov	r1, r3
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cac8:	461a      	mov	r2, r3
 800caca:	88fb      	ldrh	r3, [r7, #6]
 800cacc:	f7f7 fdfa 	bl	80046c4 <HAL_DMA_Start_IT>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d009      	beq.n	800caea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2210      	movs	r2, #16
 800cada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2220      	movs	r2, #32
 800cae2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e051      	b.n	800cb8e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d018      	beq.n	800cb24 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cafa:	e853 3f00 	ldrex	r3, [r3]
 800cafe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cb06:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb12:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb18:	e841 2300 	strex	r3, r2, [r1]
 800cb1c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cb1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1e6      	bne.n	800caf2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	3308      	adds	r3, #8
 800cb2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb2e:	e853 3f00 	ldrex	r3, [r3]
 800cb32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb36:	f043 0301 	orr.w	r3, r3, #1
 800cb3a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	3308      	adds	r3, #8
 800cb42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb44:	637a      	str	r2, [r7, #52]	@ 0x34
 800cb46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cb4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb4c:	e841 2300 	strex	r3, r2, [r1]
 800cb50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d1e5      	bne.n	800cb24 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	3308      	adds	r3, #8
 800cb5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	e853 3f00 	ldrex	r3, [r3]
 800cb66:	613b      	str	r3, [r7, #16]
   return(result);
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	3308      	adds	r3, #8
 800cb76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb78:	623a      	str	r2, [r7, #32]
 800cb7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb7c:	69f9      	ldr	r1, [r7, #28]
 800cb7e:	6a3a      	ldr	r2, [r7, #32]
 800cb80:	e841 2300 	strex	r3, r2, [r1]
 800cb84:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1e5      	bne.n	800cb58 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3758      	adds	r7, #88	@ 0x58
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	0800cda7 	.word	0x0800cda7
 800cb9c:	0800cecf 	.word	0x0800cecf
 800cba0:	0800cf0d 	.word	0x0800cf0d

0800cba4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b08f      	sub	sp, #60	@ 0x3c
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb2:	6a3b      	ldr	r3, [r7, #32]
 800cbb4:	e853 3f00 	ldrex	r3, [r3]
 800cbb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cbc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cbcc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbd2:	e841 2300 	strex	r3, r2, [r1]
 800cbd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1e6      	bne.n	800cbac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	3308      	adds	r3, #8
 800cbe4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	e853 3f00 	ldrex	r3, [r3]
 800cbec:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800cbf4:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3308      	adds	r3, #8
 800cbfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbfe:	61ba      	str	r2, [r7, #24]
 800cc00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc02:	6979      	ldr	r1, [r7, #20]
 800cc04:	69ba      	ldr	r2, [r7, #24]
 800cc06:	e841 2300 	strex	r3, r2, [r1]
 800cc0a:	613b      	str	r3, [r7, #16]
   return(result);
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d1e5      	bne.n	800cbde <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2220      	movs	r2, #32
 800cc16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800cc1a:	bf00      	nop
 800cc1c:	373c      	adds	r7, #60	@ 0x3c
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
	...

0800cc28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b095      	sub	sp, #84	@ 0x54
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc38:	e853 3f00 	ldrex	r3, [r3]
 800cc3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc4e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc56:	e841 2300 	strex	r3, r2, [r1]
 800cc5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1e6      	bne.n	800cc30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	3308      	adds	r3, #8
 800cc68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6a:	6a3b      	ldr	r3, [r7, #32]
 800cc6c:	e853 3f00 	ldrex	r3, [r3]
 800cc70:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc72:	69fa      	ldr	r2, [r7, #28]
 800cc74:	4b1e      	ldr	r3, [pc, #120]	@ (800ccf0 <UART_EndRxTransfer+0xc8>)
 800cc76:	4013      	ands	r3, r2
 800cc78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3308      	adds	r3, #8
 800cc80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc8a:	e841 2300 	strex	r3, r2, [r1]
 800cc8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d1e5      	bne.n	800cc62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d118      	bne.n	800ccd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	e853 3f00 	ldrex	r3, [r3]
 800ccaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	f023 0310 	bic.w	r3, r3, #16
 800ccb2:	647b      	str	r3, [r7, #68]	@ 0x44
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	461a      	mov	r2, r3
 800ccba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccbc:	61bb      	str	r3, [r7, #24]
 800ccbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc0:	6979      	ldr	r1, [r7, #20]
 800ccc2:	69ba      	ldr	r2, [r7, #24]
 800ccc4:	e841 2300 	strex	r3, r2, [r1]
 800ccc8:	613b      	str	r3, [r7, #16]
   return(result);
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1e6      	bne.n	800cc9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2220      	movs	r2, #32
 800ccd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cce4:	bf00      	nop
 800cce6:	3754      	adds	r7, #84	@ 0x54
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	effffffe 	.word	0xeffffffe

0800ccf4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b090      	sub	sp, #64	@ 0x40
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd00:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	69db      	ldr	r3, [r3, #28]
 800cd06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd0a:	d037      	beq.n	800cd7c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800cd0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	3308      	adds	r3, #8
 800cd1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1e:	e853 3f00 	ldrex	r3, [r3]
 800cd22:	623b      	str	r3, [r7, #32]
   return(result);
 800cd24:	6a3b      	ldr	r3, [r7, #32]
 800cd26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	3308      	adds	r3, #8
 800cd32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd34:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd3c:	e841 2300 	strex	r3, r2, [r1]
 800cd40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d1e5      	bne.n	800cd14 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	e853 3f00 	ldrex	r3, [r3]
 800cd54:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	461a      	mov	r2, r3
 800cd64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd66:	61fb      	str	r3, [r7, #28]
 800cd68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6a:	69b9      	ldr	r1, [r7, #24]
 800cd6c:	69fa      	ldr	r2, [r7, #28]
 800cd6e:	e841 2300 	strex	r3, r2, [r1]
 800cd72:	617b      	str	r3, [r7, #20]
   return(result);
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1e6      	bne.n	800cd48 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd7a:	e002      	b.n	800cd82 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800cd7c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cd7e:	f7fe ff0b 	bl	800bb98 <HAL_UART_TxCpltCallback>
}
 800cd82:	bf00      	nop
 800cd84:	3740      	adds	r7, #64	@ 0x40
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b084      	sub	sp, #16
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd96:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f7fe ff07 	bl	800bbac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd9e:	bf00      	nop
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b09c      	sub	sp, #112	@ 0x70
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdb2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	69db      	ldr	r3, [r3, #28]
 800cdb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdbc:	d071      	beq.n	800cea2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800cdbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdce:	e853 3f00 	ldrex	r3, [r3]
 800cdd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cdd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cdda:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	461a      	mov	r2, r3
 800cde2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cde4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cde6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cdea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cdec:	e841 2300 	strex	r3, r2, [r1]
 800cdf0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cdf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1e6      	bne.n	800cdc6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	3308      	adds	r3, #8
 800cdfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce02:	e853 3f00 	ldrex	r3, [r3]
 800ce06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ce08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce0a:	f023 0301 	bic.w	r3, r3, #1
 800ce0e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ce10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	3308      	adds	r3, #8
 800ce16:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ce18:	647a      	str	r2, [r7, #68]	@ 0x44
 800ce1a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce20:	e841 2300 	strex	r3, r2, [r1]
 800ce24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1e5      	bne.n	800cdf8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	3308      	adds	r3, #8
 800ce32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce36:	e853 3f00 	ldrex	r3, [r3]
 800ce3a:	623b      	str	r3, [r7, #32]
   return(result);
 800ce3c:	6a3b      	ldr	r3, [r7, #32]
 800ce3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce42:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	3308      	adds	r3, #8
 800ce4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce4c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ce4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce54:	e841 2300 	strex	r3, r2, [r1]
 800ce58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1e5      	bne.n	800ce2c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce62:	2220      	movs	r2, #32
 800ce64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d118      	bne.n	800cea2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	e853 3f00 	ldrex	r3, [r3]
 800ce7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f023 0310 	bic.w	r3, r3, #16
 800ce84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce8e:	61fb      	str	r3, [r7, #28]
 800ce90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce92:	69b9      	ldr	r1, [r7, #24]
 800ce94:	69fa      	ldr	r2, [r7, #28]
 800ce96:	e841 2300 	strex	r3, r2, [r1]
 800ce9a:	617b      	str	r3, [r7, #20]
   return(result);
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1e6      	bne.n	800ce70 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cea4:	2200      	movs	r2, #0
 800cea6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ceaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d107      	bne.n	800cec0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ceb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ceb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ceba:	f7fe fe9f 	bl	800bbfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cebe:	e002      	b.n	800cec6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800cec0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cec2:	f7fe fe7d 	bl	800bbc0 <HAL_UART_RxCpltCallback>
}
 800cec6:	bf00      	nop
 800cec8:	3770      	adds	r7, #112	@ 0x70
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b084      	sub	sp, #16
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ceda:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2201      	movs	r2, #1
 800cee0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d109      	bne.n	800cefe <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cef0:	085b      	lsrs	r3, r3, #1
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	4619      	mov	r1, r3
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	f7fe fe80 	bl	800bbfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cefc:	e002      	b.n	800cf04 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f7fe fe68 	bl	800bbd4 <HAL_UART_RxHalfCpltCallback>
}
 800cf04:	bf00      	nop
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf20:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf28:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf34:	2b80      	cmp	r3, #128	@ 0x80
 800cf36:	d109      	bne.n	800cf4c <UART_DMAError+0x40>
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	2b21      	cmp	r3, #33	@ 0x21
 800cf3c:	d106      	bne.n	800cf4c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800cf46:	6978      	ldr	r0, [r7, #20]
 800cf48:	f7ff fe2c 	bl	800cba4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf56:	2b40      	cmp	r3, #64	@ 0x40
 800cf58:	d109      	bne.n	800cf6e <UART_DMAError+0x62>
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2b22      	cmp	r3, #34	@ 0x22
 800cf5e:	d106      	bne.n	800cf6e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800cf68:	6978      	ldr	r0, [r7, #20]
 800cf6a:	f7ff fe5d 	bl	800cc28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf74:	f043 0210 	orr.w	r2, r3, #16
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cf7e:	6978      	ldr	r0, [r7, #20]
 800cf80:	f7fe fe32 	bl	800bbe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf84:	bf00      	nop
 800cf86:	3718      	adds	r7, #24
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfaa:	68f8      	ldr	r0, [r7, #12]
 800cfac:	f7fe fe1c 	bl	800bbe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfb0:	bf00      	nop
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	e853 3f00 	ldrex	r3, [r3]
 800cfcc:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfd4:	61fb      	str	r3, [r7, #28]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	61bb      	str	r3, [r7, #24]
 800cfe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe2:	6979      	ldr	r1, [r7, #20]
 800cfe4:	69ba      	ldr	r2, [r7, #24]
 800cfe6:	e841 2300 	strex	r3, r2, [r1]
 800cfea:	613b      	str	r3, [r7, #16]
   return(result);
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1e6      	bne.n	800cfc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2220      	movs	r2, #32
 800cff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7fe fdc9 	bl	800bb98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d006:	bf00      	nop
 800d008:	3720      	adds	r7, #32
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d00e:	b480      	push	{r7}
 800d010:	b083      	sub	sp, #12
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d016:	bf00      	nop
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr

0800d022 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d022:	b480      	push	{r7}
 800d024:	b083      	sub	sp, #12
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d02a:	bf00      	nop
 800d02c:	370c      	adds	r7, #12
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr

0800d036 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d036:	b480      	push	{r7}
 800d038:	b083      	sub	sp, #12
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d03e:	bf00      	nop
 800d040:	370c      	adds	r7, #12
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr

0800d04a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d04a:	b480      	push	{r7}
 800d04c:	b085      	sub	sp, #20
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d101      	bne.n	800d060 <HAL_UARTEx_DisableFifoMode+0x16>
 800d05c:	2302      	movs	r3, #2
 800d05e:	e027      	b.n	800d0b0 <HAL_UARTEx_DisableFifoMode+0x66>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2224      	movs	r2, #36	@ 0x24
 800d06c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f022 0201 	bic.w	r2, r2, #1
 800d086:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d08e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	68fa      	ldr	r2, [r7, #12]
 800d09c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2220      	movs	r2, #32
 800d0a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3714      	adds	r7, #20
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d101      	bne.n	800d0d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d0d0:	2302      	movs	r3, #2
 800d0d2:	e02d      	b.n	800d130 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2224      	movs	r2, #36	@ 0x24
 800d0e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f022 0201 	bic.w	r2, r2, #1
 800d0fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	683a      	ldr	r2, [r7, #0]
 800d10c:	430a      	orrs	r2, r1
 800d10e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f84f 	bl	800d1b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2220      	movs	r2, #32
 800d122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d101      	bne.n	800d150 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d14c:	2302      	movs	r3, #2
 800d14e:	e02d      	b.n	800d1ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2224      	movs	r2, #36	@ 0x24
 800d15c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f022 0201 	bic.w	r2, r2, #1
 800d176:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	689b      	ldr	r3, [r3, #8]
 800d17e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	683a      	ldr	r2, [r7, #0]
 800d188:	430a      	orrs	r2, r1
 800d18a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f811 	bl	800d1b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2220      	movs	r2, #32
 800d19e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1aa:	2300      	movs	r3, #0
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b085      	sub	sp, #20
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d108      	bne.n	800d1d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d1d4:	e031      	b.n	800d23a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d1d6:	2310      	movs	r3, #16
 800d1d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d1da:	2310      	movs	r3, #16
 800d1dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	689b      	ldr	r3, [r3, #8]
 800d1e4:	0e5b      	lsrs	r3, r3, #25
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	f003 0307 	and.w	r3, r3, #7
 800d1ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	0f5b      	lsrs	r3, r3, #29
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	f003 0307 	and.w	r3, r3, #7
 800d1fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1fe:	7bbb      	ldrb	r3, [r7, #14]
 800d200:	7b3a      	ldrb	r2, [r7, #12]
 800d202:	4911      	ldr	r1, [pc, #68]	@ (800d248 <UARTEx_SetNbDataToProcess+0x94>)
 800d204:	5c8a      	ldrb	r2, [r1, r2]
 800d206:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d20a:	7b3a      	ldrb	r2, [r7, #12]
 800d20c:	490f      	ldr	r1, [pc, #60]	@ (800d24c <UARTEx_SetNbDataToProcess+0x98>)
 800d20e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d210:	fb93 f3f2 	sdiv	r3, r3, r2
 800d214:	b29a      	uxth	r2, r3
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d21c:	7bfb      	ldrb	r3, [r7, #15]
 800d21e:	7b7a      	ldrb	r2, [r7, #13]
 800d220:	4909      	ldr	r1, [pc, #36]	@ (800d248 <UARTEx_SetNbDataToProcess+0x94>)
 800d222:	5c8a      	ldrb	r2, [r1, r2]
 800d224:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d228:	7b7a      	ldrb	r2, [r7, #13]
 800d22a:	4908      	ldr	r1, [pc, #32]	@ (800d24c <UARTEx_SetNbDataToProcess+0x98>)
 800d22c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d22e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d232:	b29a      	uxth	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d23a:	bf00      	nop
 800d23c:	3714      	adds	r7, #20
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	08021a94 	.word	0x08021a94
 800d24c:	08021a9c 	.word	0x08021a9c

0800d250 <__NVIC_SetPriority>:
{
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	4603      	mov	r3, r0
 800d258:	6039      	str	r1, [r7, #0]
 800d25a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d25c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d260:	2b00      	cmp	r3, #0
 800d262:	db0a      	blt.n	800d27a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	b2da      	uxtb	r2, r3
 800d268:	490c      	ldr	r1, [pc, #48]	@ (800d29c <__NVIC_SetPriority+0x4c>)
 800d26a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d26e:	0112      	lsls	r2, r2, #4
 800d270:	b2d2      	uxtb	r2, r2
 800d272:	440b      	add	r3, r1
 800d274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d278:	e00a      	b.n	800d290 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	4908      	ldr	r1, [pc, #32]	@ (800d2a0 <__NVIC_SetPriority+0x50>)
 800d280:	88fb      	ldrh	r3, [r7, #6]
 800d282:	f003 030f 	and.w	r3, r3, #15
 800d286:	3b04      	subs	r3, #4
 800d288:	0112      	lsls	r2, r2, #4
 800d28a:	b2d2      	uxtb	r2, r2
 800d28c:	440b      	add	r3, r1
 800d28e:	761a      	strb	r2, [r3, #24]
}
 800d290:	bf00      	nop
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr
 800d29c:	e000e100 	.word	0xe000e100
 800d2a0:	e000ed00 	.word	0xe000ed00

0800d2a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d2a8:	4b05      	ldr	r3, [pc, #20]	@ (800d2c0 <SysTick_Handler+0x1c>)
 800d2aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d2ac:	f002 f976 	bl	800f59c <xTaskGetSchedulerState>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d001      	beq.n	800d2ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d2b6:	f003 fa77 	bl	80107a8 <xPortSysTickHandler>
  }
}
 800d2ba:	bf00      	nop
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	e000e010 	.word	0xe000e010

0800d2c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	f06f 0004 	mvn.w	r0, #4
 800d2ce:	f7ff ffbf 	bl	800d250 <__NVIC_SetPriority>
#endif
}
 800d2d2:	bf00      	nop
 800d2d4:	bd80      	pop	{r7, pc}
	...

0800d2d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2de:	f3ef 8305 	mrs	r3, IPSR
 800d2e2:	603b      	str	r3, [r7, #0]
  return(result);
 800d2e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d003      	beq.n	800d2f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d2ea:	f06f 0305 	mvn.w	r3, #5
 800d2ee:	607b      	str	r3, [r7, #4]
 800d2f0:	e00c      	b.n	800d30c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d2f2:	4b0a      	ldr	r3, [pc, #40]	@ (800d31c <osKernelInitialize+0x44>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d105      	bne.n	800d306 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d2fa:	4b08      	ldr	r3, [pc, #32]	@ (800d31c <osKernelInitialize+0x44>)
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d300:	2300      	movs	r3, #0
 800d302:	607b      	str	r3, [r7, #4]
 800d304:	e002      	b.n	800d30c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d306:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d30a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d30c:	687b      	ldr	r3, [r7, #4]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	24032c4c 	.word	0x24032c4c

0800d320 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d326:	f3ef 8305 	mrs	r3, IPSR
 800d32a:	603b      	str	r3, [r7, #0]
  return(result);
 800d32c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d003      	beq.n	800d33a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d332:	f06f 0305 	mvn.w	r3, #5
 800d336:	607b      	str	r3, [r7, #4]
 800d338:	e010      	b.n	800d35c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d33a:	4b0b      	ldr	r3, [pc, #44]	@ (800d368 <osKernelStart+0x48>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d109      	bne.n	800d356 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d342:	f7ff ffbf 	bl	800d2c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d346:	4b08      	ldr	r3, [pc, #32]	@ (800d368 <osKernelStart+0x48>)
 800d348:	2202      	movs	r2, #2
 800d34a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d34c:	f001 fc8a 	bl	800ec64 <vTaskStartScheduler>
      stat = osOK;
 800d350:	2300      	movs	r3, #0
 800d352:	607b      	str	r3, [r7, #4]
 800d354:	e002      	b.n	800d35c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d35a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d35c:	687b      	ldr	r3, [r7, #4]
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3708      	adds	r7, #8
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	24032c4c 	.word	0x24032c4c

0800d36c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b08e      	sub	sp, #56	@ 0x38
 800d370:	af04      	add	r7, sp, #16
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d378:	2300      	movs	r3, #0
 800d37a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d37c:	f3ef 8305 	mrs	r3, IPSR
 800d380:	617b      	str	r3, [r7, #20]
  return(result);
 800d382:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d384:	2b00      	cmp	r3, #0
 800d386:	d17e      	bne.n	800d486 <osThreadNew+0x11a>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d07b      	beq.n	800d486 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d38e:	2380      	movs	r3, #128	@ 0x80
 800d390:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d392:	2318      	movs	r3, #24
 800d394:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d396:	2300      	movs	r3, #0
 800d398:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d39a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d39e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d045      	beq.n	800d432 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d002      	beq.n	800d3b4 <osThreadNew+0x48>
        name = attr->name;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	699b      	ldr	r3, [r3, #24]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d008      	beq.n	800d3da <osThreadNew+0x6e>
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	2b38      	cmp	r3, #56	@ 0x38
 800d3cc:	d805      	bhi.n	800d3da <osThreadNew+0x6e>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	f003 0301 	and.w	r3, r3, #1
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d001      	beq.n	800d3de <osThreadNew+0x72>
        return (NULL);
 800d3da:	2300      	movs	r3, #0
 800d3dc:	e054      	b.n	800d488 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	695b      	ldr	r3, [r3, #20]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d003      	beq.n	800d3ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	089b      	lsrs	r3, r3, #2
 800d3ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00e      	beq.n	800d414 <osThreadNew+0xa8>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	2ba7      	cmp	r3, #167	@ 0xa7
 800d3fc:	d90a      	bls.n	800d414 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d402:	2b00      	cmp	r3, #0
 800d404:	d006      	beq.n	800d414 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	695b      	ldr	r3, [r3, #20]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d002      	beq.n	800d414 <osThreadNew+0xa8>
        mem = 1;
 800d40e:	2301      	movs	r3, #1
 800d410:	61bb      	str	r3, [r7, #24]
 800d412:	e010      	b.n	800d436 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d10c      	bne.n	800d436 <osThreadNew+0xca>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d108      	bne.n	800d436 <osThreadNew+0xca>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d104      	bne.n	800d436 <osThreadNew+0xca>
          mem = 0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	61bb      	str	r3, [r7, #24]
 800d430:	e001      	b.n	800d436 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d432:	2300      	movs	r3, #0
 800d434:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d110      	bne.n	800d45e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d444:	9202      	str	r2, [sp, #8]
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	69fb      	ldr	r3, [r7, #28]
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	6a3a      	ldr	r2, [r7, #32]
 800d450:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f001 fa12 	bl	800e87c <xTaskCreateStatic>
 800d458:	4603      	mov	r3, r0
 800d45a:	613b      	str	r3, [r7, #16]
 800d45c:	e013      	b.n	800d486 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d110      	bne.n	800d486 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d464:	6a3b      	ldr	r3, [r7, #32]
 800d466:	b29a      	uxth	r2, r3
 800d468:	f107 0310 	add.w	r3, r7, #16
 800d46c:	9301      	str	r3, [sp, #4]
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	f001 fa60 	bl	800e93c <xTaskCreate>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d001      	beq.n	800d486 <osThreadNew+0x11a>
            hTask = NULL;
 800d482:	2300      	movs	r3, #0
 800d484:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d486:	693b      	ldr	r3, [r7, #16]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3728      	adds	r7, #40	@ 0x28
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800d490:	b580      	push	{r7, lr}
 800d492:	b088      	sub	sp, #32
 800d494:	af02      	add	r7, sp, #8
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d002      	beq.n	800d4aa <osThreadFlagsSet+0x1a>
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	da03      	bge.n	800d4b2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800d4aa:	f06f 0303 	mvn.w	r3, #3
 800d4ae:	60fb      	str	r3, [r7, #12]
 800d4b0:	e035      	b.n	800d51e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800d4b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d4b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4b8:	f3ef 8305 	mrs	r3, IPSR
 800d4bc:	613b      	str	r3, [r7, #16]
  return(result);
 800d4be:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d01f      	beq.n	800d504 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800d4c8:	f107 0308 	add.w	r3, r7, #8
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6978      	ldr	r0, [r7, #20]
 800d4d6:	f002 fb11 	bl	800fafc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800d4da:	f107 030c 	add.w	r3, r7, #12
 800d4de:	2200      	movs	r2, #0
 800d4e0:	9200      	str	r2, [sp, #0]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	6978      	ldr	r0, [r7, #20]
 800d4e8:	f002 fb08 	bl	800fafc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d015      	beq.n	800d51e <osThreadFlagsSet+0x8e>
 800d4f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d528 <osThreadFlagsSet+0x98>)
 800d4f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4f8:	601a      	str	r2, [r3, #0]
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	f3bf 8f6f 	isb	sy
 800d502:	e00c      	b.n	800d51e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800d504:	2300      	movs	r3, #0
 800d506:	2201      	movs	r2, #1
 800d508:	6839      	ldr	r1, [r7, #0]
 800d50a:	6978      	ldr	r0, [r7, #20]
 800d50c:	f002 fa34 	bl	800f978 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800d510:	f107 030c 	add.w	r3, r7, #12
 800d514:	2200      	movs	r2, #0
 800d516:	2100      	movs	r1, #0
 800d518:	6978      	ldr	r0, [r7, #20]
 800d51a:	f002 fa2d 	bl	800f978 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800d51e:	68fb      	ldr	r3, [r7, #12]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3718      	adds	r7, #24
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	e000ed04 	.word	0xe000ed04

0800d52c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b08c      	sub	sp, #48	@ 0x30
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d538:	f3ef 8305 	mrs	r3, IPSR
 800d53c:	617b      	str	r3, [r7, #20]
  return(result);
 800d53e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800d540:	2b00      	cmp	r3, #0
 800d542:	d003      	beq.n	800d54c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800d544:	f06f 0305 	mvn.w	r3, #5
 800d548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d54a:	e06b      	b.n	800d624 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	da03      	bge.n	800d55a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800d552:	f06f 0303 	mvn.w	r3, #3
 800d556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d558:	e064      	b.n	800d624 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	f003 0302 	and.w	r3, r3, #2
 800d560:	2b00      	cmp	r3, #0
 800d562:	d002      	beq.n	800d56a <osThreadFlagsWait+0x3e>
      clear = 0U;
 800d564:	2300      	movs	r3, #0
 800d566:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d568:	e001      	b.n	800d56e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800d56e:	2300      	movs	r3, #0
 800d570:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800d576:	f001 fc91 	bl	800ee9c <xTaskGetTickCount>
 800d57a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800d57c:	f107 0210 	add.w	r2, r7, #16
 800d580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d582:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d584:	2000      	movs	r0, #0
 800d586:	f002 f997 	bl	800f8b8 <xTaskNotifyWait>
 800d58a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d137      	bne.n	800d602 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800d592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	4013      	ands	r3, r2
 800d598:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	f003 0301 	and.w	r3, r3, #1
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00c      	beq.n	800d5c6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800d5ac:	68fa      	ldr	r2, [r7, #12]
 800d5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b0:	4013      	ands	r3, r2
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d032      	beq.n	800d61e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10f      	bne.n	800d5de <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800d5be:	f06f 0302 	mvn.w	r3, #2
 800d5c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800d5c4:	e02e      	b.n	800d624 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ca:	4013      	ands	r3, r2
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d128      	bne.n	800d622 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d103      	bne.n	800d5de <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800d5d6:	f06f 0302 	mvn.w	r3, #2
 800d5da:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800d5dc:	e022      	b.n	800d624 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800d5de:	f001 fc5d 	bl	800ee9c <xTaskGetTickCount>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	6a3b      	ldr	r3, [r7, #32]
 800d5e6:	1ad3      	subs	r3, r2, r3
 800d5e8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800d5ea:	69ba      	ldr	r2, [r7, #24]
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d902      	bls.n	800d5f8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5f6:	e00e      	b.n	800d616 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800d5f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800d600:	e009      	b.n	800d616 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d103      	bne.n	800d610 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800d608:	f06f 0302 	mvn.w	r3, #2
 800d60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d60e:	e002      	b.n	800d616 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800d610:	f06f 0301 	mvn.w	r3, #1
 800d614:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d1af      	bne.n	800d57c <osThreadFlagsWait+0x50>
 800d61c:	e002      	b.n	800d624 <osThreadFlagsWait+0xf8>
            break;
 800d61e:	bf00      	nop
 800d620:	e000      	b.n	800d624 <osThreadFlagsWait+0xf8>
            break;
 800d622:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800d624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d626:	4618      	mov	r0, r3
 800d628:	3730      	adds	r7, #48	@ 0x30
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d62e:	b580      	push	{r7, lr}
 800d630:	b084      	sub	sp, #16
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d636:	f3ef 8305 	mrs	r3, IPSR
 800d63a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d63c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d003      	beq.n	800d64a <osDelay+0x1c>
    stat = osErrorISR;
 800d642:	f06f 0305 	mvn.w	r3, #5
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	e007      	b.n	800d65a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d64a:	2300      	movs	r3, #0
 800d64c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d002      	beq.n	800d65a <osDelay+0x2c>
      vTaskDelay(ticks);
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f001 facf 	bl	800ebf8 <vTaskDelay>
    }
  }

  return (stat);
 800d65a:	68fb      	ldr	r3, [r7, #12]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3710      	adds	r7, #16
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d664:	b580      	push	{r7, lr}
 800d666:	b088      	sub	sp, #32
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d66c:	2300      	movs	r3, #0
 800d66e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d670:	f3ef 8305 	mrs	r3, IPSR
 800d674:	60bb      	str	r3, [r7, #8]
  return(result);
 800d676:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d174      	bne.n	800d766 <osMutexNew+0x102>
    if (attr != NULL) {
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d003      	beq.n	800d68a <osMutexNew+0x26>
      type = attr->attr_bits;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	61bb      	str	r3, [r7, #24]
 800d688:	e001      	b.n	800d68e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d68a:	2300      	movs	r3, #0
 800d68c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	f003 0301 	and.w	r3, r3, #1
 800d694:	2b00      	cmp	r3, #0
 800d696:	d002      	beq.n	800d69e <osMutexNew+0x3a>
      rmtx = 1U;
 800d698:	2301      	movs	r3, #1
 800d69a:	617b      	str	r3, [r7, #20]
 800d69c:	e001      	b.n	800d6a2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	f003 0308 	and.w	r3, r3, #8
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d15c      	bne.n	800d766 <osMutexNew+0x102>
      mem = -1;
 800d6ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d6b0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d015      	beq.n	800d6e4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d006      	beq.n	800d6ce <osMutexNew+0x6a>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	2b4f      	cmp	r3, #79	@ 0x4f
 800d6c6:	d902      	bls.n	800d6ce <osMutexNew+0x6a>
          mem = 1;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	613b      	str	r3, [r7, #16]
 800d6cc:	e00c      	b.n	800d6e8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d108      	bne.n	800d6e8 <osMutexNew+0x84>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d104      	bne.n	800d6e8 <osMutexNew+0x84>
            mem = 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	613b      	str	r3, [r7, #16]
 800d6e2:	e001      	b.n	800d6e8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d112      	bne.n	800d714 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d007      	beq.n	800d704 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	2004      	movs	r0, #4
 800d6fc:	f000 fb1f 	bl	800dd3e <xQueueCreateMutexStatic>
 800d700:	61f8      	str	r0, [r7, #28]
 800d702:	e016      	b.n	800d732 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	4619      	mov	r1, r3
 800d70a:	2001      	movs	r0, #1
 800d70c:	f000 fb17 	bl	800dd3e <xQueueCreateMutexStatic>
 800d710:	61f8      	str	r0, [r7, #28]
 800d712:	e00e      	b.n	800d732 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10b      	bne.n	800d732 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d004      	beq.n	800d72a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d720:	2004      	movs	r0, #4
 800d722:	f000 faf4 	bl	800dd0e <xQueueCreateMutex>
 800d726:	61f8      	str	r0, [r7, #28]
 800d728:	e003      	b.n	800d732 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d72a:	2001      	movs	r0, #1
 800d72c:	f000 faef 	bl	800dd0e <xQueueCreateMutex>
 800d730:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00c      	beq.n	800d752 <osMutexNew+0xee>
        if (attr != NULL) {
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d003      	beq.n	800d746 <osMutexNew+0xe2>
          name = attr->name;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	60fb      	str	r3, [r7, #12]
 800d744:	e001      	b.n	800d74a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d746:	2300      	movs	r3, #0
 800d748:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d74a:	68f9      	ldr	r1, [r7, #12]
 800d74c:	69f8      	ldr	r0, [r7, #28]
 800d74e:	f001 f837 	bl	800e7c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d006      	beq.n	800d766 <osMutexNew+0x102>
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d003      	beq.n	800d766 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	f043 0301 	orr.w	r3, r3, #1
 800d764:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d766:	69fb      	ldr	r3, [r7, #28]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3720      	adds	r7, #32
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f023 0301 	bic.w	r3, r3, #1
 800d780:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f003 0301 	and.w	r3, r3, #1
 800d788:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d78a:	2300      	movs	r3, #0
 800d78c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d78e:	f3ef 8305 	mrs	r3, IPSR
 800d792:	60bb      	str	r3, [r7, #8]
  return(result);
 800d794:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d796:	2b00      	cmp	r3, #0
 800d798:	d003      	beq.n	800d7a2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800d79a:	f06f 0305 	mvn.w	r3, #5
 800d79e:	617b      	str	r3, [r7, #20]
 800d7a0:	e02c      	b.n	800d7fc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d103      	bne.n	800d7b0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800d7a8:	f06f 0303 	mvn.w	r3, #3
 800d7ac:	617b      	str	r3, [r7, #20]
 800d7ae:	e025      	b.n	800d7fc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d011      	beq.n	800d7da <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d7b6:	6839      	ldr	r1, [r7, #0]
 800d7b8:	6938      	ldr	r0, [r7, #16]
 800d7ba:	f000 fb10 	bl	800ddde <xQueueTakeMutexRecursive>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d01b      	beq.n	800d7fc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d003      	beq.n	800d7d2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d7ca:	f06f 0301 	mvn.w	r3, #1
 800d7ce:	617b      	str	r3, [r7, #20]
 800d7d0:	e014      	b.n	800d7fc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d7d2:	f06f 0302 	mvn.w	r3, #2
 800d7d6:	617b      	str	r3, [r7, #20]
 800d7d8:	e010      	b.n	800d7fc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d7da:	6839      	ldr	r1, [r7, #0]
 800d7dc:	6938      	ldr	r0, [r7, #16]
 800d7de:	f000 fdb7 	bl	800e350 <xQueueSemaphoreTake>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d009      	beq.n	800d7fc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d003      	beq.n	800d7f6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d7ee:	f06f 0301 	mvn.w	r3, #1
 800d7f2:	617b      	str	r3, [r7, #20]
 800d7f4:	e002      	b.n	800d7fc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d7f6:	f06f 0302 	mvn.w	r3, #2
 800d7fa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d7fc:	697b      	ldr	r3, [r7, #20]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3718      	adds	r7, #24
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d806:	b580      	push	{r7, lr}
 800d808:	b086      	sub	sp, #24
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f023 0301 	bic.w	r3, r3, #1
 800d814:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d81e:	2300      	movs	r3, #0
 800d820:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d822:	f3ef 8305 	mrs	r3, IPSR
 800d826:	60bb      	str	r3, [r7, #8]
  return(result);
 800d828:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d003      	beq.n	800d836 <osMutexRelease+0x30>
    stat = osErrorISR;
 800d82e:	f06f 0305 	mvn.w	r3, #5
 800d832:	617b      	str	r3, [r7, #20]
 800d834:	e01f      	b.n	800d876 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d103      	bne.n	800d844 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d83c:	f06f 0303 	mvn.w	r3, #3
 800d840:	617b      	str	r3, [r7, #20]
 800d842:	e018      	b.n	800d876 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d009      	beq.n	800d85e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d84a:	6938      	ldr	r0, [r7, #16]
 800d84c:	f000 fa92 	bl	800dd74 <xQueueGiveMutexRecursive>
 800d850:	4603      	mov	r3, r0
 800d852:	2b01      	cmp	r3, #1
 800d854:	d00f      	beq.n	800d876 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d856:	f06f 0302 	mvn.w	r3, #2
 800d85a:	617b      	str	r3, [r7, #20]
 800d85c:	e00b      	b.n	800d876 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d85e:	2300      	movs	r3, #0
 800d860:	2200      	movs	r2, #0
 800d862:	2100      	movs	r1, #0
 800d864:	6938      	ldr	r0, [r7, #16]
 800d866:	f000 faf1 	bl	800de4c <xQueueGenericSend>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d002      	beq.n	800d876 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d870:	f06f 0302 	mvn.w	r3, #2
 800d874:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d876:	697b      	ldr	r3, [r7, #20]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3718      	adds	r7, #24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	4a07      	ldr	r2, [pc, #28]	@ (800d8ac <vApplicationGetIdleTaskMemory+0x2c>)
 800d890:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	4a06      	ldr	r2, [pc, #24]	@ (800d8b0 <vApplicationGetIdleTaskMemory+0x30>)
 800d896:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2280      	movs	r2, #128	@ 0x80
 800d89c:	601a      	str	r2, [r3, #0]
}
 800d89e:	bf00      	nop
 800d8a0:	3714      	adds	r7, #20
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	24032c50 	.word	0x24032c50
 800d8b0:	24032cf8 	.word	0x24032cf8

0800d8b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d8b4:	b480      	push	{r7}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	4a07      	ldr	r2, [pc, #28]	@ (800d8e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800d8c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	4a06      	ldr	r2, [pc, #24]	@ (800d8e4 <vApplicationGetTimerTaskMemory+0x30>)
 800d8ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d8d2:	601a      	str	r2, [r3, #0]
}
 800d8d4:	bf00      	nop
 800d8d6:	3714      	adds	r7, #20
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr
 800d8e0:	24032ef8 	.word	0x24032ef8
 800d8e4:	24032fa0 	.word	0x24032fa0

0800d8e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f103 0208 	add.w	r2, r3, #8
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d900:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f103 0208 	add.w	r2, r3, #8
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f103 0208 	add.w	r2, r3, #8
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d91c:	bf00      	nop
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d936:	bf00      	nop
 800d938:	370c      	adds	r7, #12
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d942:	b480      	push	{r7}
 800d944:	b085      	sub	sp, #20
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
 800d94a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	689a      	ldr	r2, [r3, #8]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	1c5a      	adds	r2, r3, #1
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	601a      	str	r2, [r3, #0]
}
 800d97e:	bf00      	nop
 800d980:	3714      	adds	r7, #20
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr

0800d98a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d98a:	b480      	push	{r7}
 800d98c:	b085      	sub	sp, #20
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
 800d992:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9a0:	d103      	bne.n	800d9aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	691b      	ldr	r3, [r3, #16]
 800d9a6:	60fb      	str	r3, [r7, #12]
 800d9a8:	e00c      	b.n	800d9c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	3308      	adds	r3, #8
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	e002      	b.n	800d9b8 <vListInsert+0x2e>
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	60fb      	str	r3, [r7, #12]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	68ba      	ldr	r2, [r7, #8]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d2f6      	bcs.n	800d9b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	685a      	ldr	r2, [r3, #4]
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	683a      	ldr	r2, [r7, #0]
 800d9d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	683a      	ldr	r2, [r7, #0]
 800d9de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	1c5a      	adds	r2, r3, #1
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	601a      	str	r2, [r3, #0]
}
 800d9f0:	bf00      	nop
 800d9f2:	3714      	adds	r7, #20
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	691b      	ldr	r3, [r3, #16]
 800da08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	6892      	ldr	r2, [r2, #8]
 800da12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	6852      	ldr	r2, [r2, #4]
 800da1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	429a      	cmp	r2, r3
 800da26:	d103      	bne.n	800da30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	689a      	ldr	r2, [r3, #8]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	1e5a      	subs	r2, r3, #1
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3714      	adds	r7, #20
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10b      	bne.n	800da7c <xQueueGenericReset+0x2c>
	__asm volatile
 800da64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da68:	f383 8811 	msr	BASEPRI, r3
 800da6c:	f3bf 8f6f 	isb	sy
 800da70:	f3bf 8f4f 	dsb	sy
 800da74:	60bb      	str	r3, [r7, #8]
}
 800da76:	bf00      	nop
 800da78:	bf00      	nop
 800da7a:	e7fd      	b.n	800da78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800da7c:	f002 fe04 	bl	8010688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da88:	68f9      	ldr	r1, [r7, #12]
 800da8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800da8c:	fb01 f303 	mul.w	r3, r1, r3
 800da90:	441a      	add	r2, r3
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2200      	movs	r2, #0
 800da9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800daac:	3b01      	subs	r3, #1
 800daae:	68f9      	ldr	r1, [r7, #12]
 800dab0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dab2:	fb01 f303 	mul.w	r3, r1, r3
 800dab6:	441a      	add	r2, r3
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	22ff      	movs	r2, #255	@ 0xff
 800dac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	22ff      	movs	r2, #255	@ 0xff
 800dac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d114      	bne.n	800dafc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	691b      	ldr	r3, [r3, #16]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d01a      	beq.n	800db10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	3310      	adds	r3, #16
 800dade:	4618      	mov	r0, r3
 800dae0:	f001 fb5e 	bl	800f1a0 <xTaskRemoveFromEventList>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d012      	beq.n	800db10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800daea:	4b0d      	ldr	r3, [pc, #52]	@ (800db20 <xQueueGenericReset+0xd0>)
 800daec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daf0:	601a      	str	r2, [r3, #0]
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	f3bf 8f6f 	isb	sy
 800dafa:	e009      	b.n	800db10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	3310      	adds	r3, #16
 800db00:	4618      	mov	r0, r3
 800db02:	f7ff fef1 	bl	800d8e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	3324      	adds	r3, #36	@ 0x24
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7ff feec 	bl	800d8e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800db10:	f002 fdec 	bl	80106ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800db14:	2301      	movs	r3, #1
}
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	e000ed04 	.word	0xe000ed04

0800db24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08e      	sub	sp, #56	@ 0x38
 800db28:	af02      	add	r7, sp, #8
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]
 800db30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d10b      	bne.n	800db50 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800db38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db3c:	f383 8811 	msr	BASEPRI, r3
 800db40:	f3bf 8f6f 	isb	sy
 800db44:	f3bf 8f4f 	dsb	sy
 800db48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800db4a:	bf00      	nop
 800db4c:	bf00      	nop
 800db4e:	e7fd      	b.n	800db4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10b      	bne.n	800db6e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800db56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5a:	f383 8811 	msr	BASEPRI, r3
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	f3bf 8f4f 	dsb	sy
 800db66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800db68:	bf00      	nop
 800db6a:	bf00      	nop
 800db6c:	e7fd      	b.n	800db6a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d002      	beq.n	800db7a <xQueueGenericCreateStatic+0x56>
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <xQueueGenericCreateStatic+0x5a>
 800db7a:	2301      	movs	r3, #1
 800db7c:	e000      	b.n	800db80 <xQueueGenericCreateStatic+0x5c>
 800db7e:	2300      	movs	r3, #0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10b      	bne.n	800db9c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	623b      	str	r3, [r7, #32]
}
 800db96:	bf00      	nop
 800db98:	bf00      	nop
 800db9a:	e7fd      	b.n	800db98 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d102      	bne.n	800dba8 <xQueueGenericCreateStatic+0x84>
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <xQueueGenericCreateStatic+0x88>
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e000      	b.n	800dbae <xQueueGenericCreateStatic+0x8a>
 800dbac:	2300      	movs	r3, #0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10b      	bne.n	800dbca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb6:	f383 8811 	msr	BASEPRI, r3
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	61fb      	str	r3, [r7, #28]
}
 800dbc4:	bf00      	nop
 800dbc6:	bf00      	nop
 800dbc8:	e7fd      	b.n	800dbc6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dbca:	2350      	movs	r3, #80	@ 0x50
 800dbcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	2b50      	cmp	r3, #80	@ 0x50
 800dbd2:	d00b      	beq.n	800dbec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800dbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	61bb      	str	r3, [r7, #24]
}
 800dbe6:	bf00      	nop
 800dbe8:	bf00      	nop
 800dbea:	e7fd      	b.n	800dbe8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dbec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800dbf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d00d      	beq.n	800dc14 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dc00:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800dc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc06:	9300      	str	r3, [sp, #0]
 800dc08:	4613      	mov	r3, r2
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	68b9      	ldr	r1, [r7, #8]
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f000 f840 	bl	800dc94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3730      	adds	r7, #48	@ 0x30
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}

0800dc1e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b08a      	sub	sp, #40	@ 0x28
 800dc22:	af02      	add	r7, sp, #8
 800dc24:	60f8      	str	r0, [r7, #12]
 800dc26:	60b9      	str	r1, [r7, #8]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d10b      	bne.n	800dc4a <xQueueGenericCreate+0x2c>
	__asm volatile
 800dc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	613b      	str	r3, [r7, #16]
}
 800dc44:	bf00      	nop
 800dc46:	bf00      	nop
 800dc48:	e7fd      	b.n	800dc46 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	68ba      	ldr	r2, [r7, #8]
 800dc4e:	fb02 f303 	mul.w	r3, r2, r3
 800dc52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	3350      	adds	r3, #80	@ 0x50
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f002 fe37 	bl	80108cc <pvPortMalloc>
 800dc5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d011      	beq.n	800dc8a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	3350      	adds	r3, #80	@ 0x50
 800dc6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dc70:	69bb      	ldr	r3, [r7, #24]
 800dc72:	2200      	movs	r2, #0
 800dc74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dc78:	79fa      	ldrb	r2, [r7, #7]
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	697a      	ldr	r2, [r7, #20]
 800dc82:	68b9      	ldr	r1, [r7, #8]
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f000 f805 	bl	800dc94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dc8a:	69bb      	ldr	r3, [r7, #24]
	}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3720      	adds	r7, #32
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
 800dca0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d103      	bne.n	800dcb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	69ba      	ldr	r2, [r7, #24]
 800dcac:	601a      	str	r2, [r3, #0]
 800dcae:	e002      	b.n	800dcb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dcbc:	69bb      	ldr	r3, [r7, #24]
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dcc2:	2101      	movs	r1, #1
 800dcc4:	69b8      	ldr	r0, [r7, #24]
 800dcc6:	f7ff fec3 	bl	800da50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	78fa      	ldrb	r2, [r7, #3]
 800dcce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dcd2:	bf00      	nop
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b082      	sub	sp, #8
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00e      	beq.n	800dd06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	2100      	movs	r1, #0
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 f8a3 	bl	800de4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dd06:	bf00      	nop
 800dd08:	3708      	adds	r7, #8
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b086      	sub	sp, #24
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	4603      	mov	r3, r0
 800dd16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	617b      	str	r3, [r7, #20]
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dd20:	79fb      	ldrb	r3, [r7, #7]
 800dd22:	461a      	mov	r2, r3
 800dd24:	6939      	ldr	r1, [r7, #16]
 800dd26:	6978      	ldr	r0, [r7, #20]
 800dd28:	f7ff ff79 	bl	800dc1e <xQueueGenericCreate>
 800dd2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dd2e:	68f8      	ldr	r0, [r7, #12]
 800dd30:	f7ff ffd3 	bl	800dcda <prvInitialiseMutex>

		return xNewQueue;
 800dd34:	68fb      	ldr	r3, [r7, #12]
	}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3718      	adds	r7, #24
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}

0800dd3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b088      	sub	sp, #32
 800dd42:	af02      	add	r7, sp, #8
 800dd44:	4603      	mov	r3, r0
 800dd46:	6039      	str	r1, [r7, #0]
 800dd48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	617b      	str	r3, [r7, #20]
 800dd4e:	2300      	movs	r3, #0
 800dd50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dd52:	79fb      	ldrb	r3, [r7, #7]
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	6939      	ldr	r1, [r7, #16]
 800dd5c:	6978      	ldr	r0, [r7, #20]
 800dd5e:	f7ff fee1 	bl	800db24 <xQueueGenericCreateStatic>
 800dd62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f7ff ffb8 	bl	800dcda <prvInitialiseMutex>

		return xNewQueue;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
	}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3718      	adds	r7, #24
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800dd74:	b590      	push	{r4, r7, lr}
 800dd76:	b087      	sub	sp, #28
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d10b      	bne.n	800dd9e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800dd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd8a:	f383 8811 	msr	BASEPRI, r3
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	f3bf 8f4f 	dsb	sy
 800dd96:	60fb      	str	r3, [r7, #12]
}
 800dd98:	bf00      	nop
 800dd9a:	bf00      	nop
 800dd9c:	e7fd      	b.n	800dd9a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	689c      	ldr	r4, [r3, #8]
 800dda2:	f001 fbeb 	bl	800f57c <xTaskGetCurrentTaskHandle>
 800dda6:	4603      	mov	r3, r0
 800dda8:	429c      	cmp	r4, r3
 800ddaa:	d111      	bne.n	800ddd0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	68db      	ldr	r3, [r3, #12]
 800ddb0:	1e5a      	subs	r2, r3, #1
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d105      	bne.n	800ddca <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	2100      	movs	r1, #0
 800ddc4:	6938      	ldr	r0, [r7, #16]
 800ddc6:	f000 f841 	bl	800de4c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	617b      	str	r3, [r7, #20]
 800ddce:	e001      	b.n	800ddd4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ddd4:	697b      	ldr	r3, [r7, #20]
	}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	371c      	adds	r7, #28
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd90      	pop	{r4, r7, pc}

0800ddde <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ddde:	b590      	push	{r4, r7, lr}
 800dde0:	b087      	sub	sp, #28
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d10b      	bne.n	800de0a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800ddf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	60fb      	str	r3, [r7, #12]
}
 800de04:	bf00      	nop
 800de06:	bf00      	nop
 800de08:	e7fd      	b.n	800de06 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	689c      	ldr	r4, [r3, #8]
 800de0e:	f001 fbb5 	bl	800f57c <xTaskGetCurrentTaskHandle>
 800de12:	4603      	mov	r3, r0
 800de14:	429c      	cmp	r4, r3
 800de16:	d107      	bne.n	800de28 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	1c5a      	adds	r2, r3, #1
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800de22:	2301      	movs	r3, #1
 800de24:	617b      	str	r3, [r7, #20]
 800de26:	e00c      	b.n	800de42 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800de28:	6839      	ldr	r1, [r7, #0]
 800de2a:	6938      	ldr	r0, [r7, #16]
 800de2c:	f000 fa90 	bl	800e350 <xQueueSemaphoreTake>
 800de30:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d004      	beq.n	800de42 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	1c5a      	adds	r2, r3, #1
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800de42:	697b      	ldr	r3, [r7, #20]
	}
 800de44:	4618      	mov	r0, r3
 800de46:	371c      	adds	r7, #28
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd90      	pop	{r4, r7, pc}

0800de4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b08e      	sub	sp, #56	@ 0x38
 800de50:	af00      	add	r7, sp, #0
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	607a      	str	r2, [r7, #4]
 800de58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800de5a:	2300      	movs	r3, #0
 800de5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800de62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10b      	bne.n	800de80 <xQueueGenericSend+0x34>
	__asm volatile
 800de68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de6c:	f383 8811 	msr	BASEPRI, r3
 800de70:	f3bf 8f6f 	isb	sy
 800de74:	f3bf 8f4f 	dsb	sy
 800de78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800de7a:	bf00      	nop
 800de7c:	bf00      	nop
 800de7e:	e7fd      	b.n	800de7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d103      	bne.n	800de8e <xQueueGenericSend+0x42>
 800de86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d101      	bne.n	800de92 <xQueueGenericSend+0x46>
 800de8e:	2301      	movs	r3, #1
 800de90:	e000      	b.n	800de94 <xQueueGenericSend+0x48>
 800de92:	2300      	movs	r3, #0
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10b      	bne.n	800deb0 <xQueueGenericSend+0x64>
	__asm volatile
 800de98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9c:	f383 8811 	msr	BASEPRI, r3
 800dea0:	f3bf 8f6f 	isb	sy
 800dea4:	f3bf 8f4f 	dsb	sy
 800dea8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800deaa:	bf00      	nop
 800deac:	bf00      	nop
 800deae:	e7fd      	b.n	800deac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	2b02      	cmp	r3, #2
 800deb4:	d103      	bne.n	800debe <xQueueGenericSend+0x72>
 800deb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800deba:	2b01      	cmp	r3, #1
 800debc:	d101      	bne.n	800dec2 <xQueueGenericSend+0x76>
 800debe:	2301      	movs	r3, #1
 800dec0:	e000      	b.n	800dec4 <xQueueGenericSend+0x78>
 800dec2:	2300      	movs	r3, #0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d10b      	bne.n	800dee0 <xQueueGenericSend+0x94>
	__asm volatile
 800dec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800decc:	f383 8811 	msr	BASEPRI, r3
 800ded0:	f3bf 8f6f 	isb	sy
 800ded4:	f3bf 8f4f 	dsb	sy
 800ded8:	623b      	str	r3, [r7, #32]
}
 800deda:	bf00      	nop
 800dedc:	bf00      	nop
 800dede:	e7fd      	b.n	800dedc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dee0:	f001 fb5c 	bl	800f59c <xTaskGetSchedulerState>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d102      	bne.n	800def0 <xQueueGenericSend+0xa4>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d101      	bne.n	800def4 <xQueueGenericSend+0xa8>
 800def0:	2301      	movs	r3, #1
 800def2:	e000      	b.n	800def6 <xQueueGenericSend+0xaa>
 800def4:	2300      	movs	r3, #0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10b      	bne.n	800df12 <xQueueGenericSend+0xc6>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	61fb      	str	r3, [r7, #28]
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	e7fd      	b.n	800df0e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df12:	f002 fbb9 	bl	8010688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df1e:	429a      	cmp	r2, r3
 800df20:	d302      	bcc.n	800df28 <xQueueGenericSend+0xdc>
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	2b02      	cmp	r3, #2
 800df26:	d129      	bne.n	800df7c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df28:	683a      	ldr	r2, [r7, #0]
 800df2a:	68b9      	ldr	r1, [r7, #8]
 800df2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df2e:	f000 fb37 	bl	800e5a0 <prvCopyDataToQueue>
 800df32:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d010      	beq.n	800df5e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df3e:	3324      	adds	r3, #36	@ 0x24
 800df40:	4618      	mov	r0, r3
 800df42:	f001 f92d 	bl	800f1a0 <xTaskRemoveFromEventList>
 800df46:	4603      	mov	r3, r0
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d013      	beq.n	800df74 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800df4c:	4b3f      	ldr	r3, [pc, #252]	@ (800e04c <xQueueGenericSend+0x200>)
 800df4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df52:	601a      	str	r2, [r3, #0]
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	e00a      	b.n	800df74 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800df5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df60:	2b00      	cmp	r3, #0
 800df62:	d007      	beq.n	800df74 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800df64:	4b39      	ldr	r3, [pc, #228]	@ (800e04c <xQueueGenericSend+0x200>)
 800df66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df6a:	601a      	str	r2, [r3, #0]
 800df6c:	f3bf 8f4f 	dsb	sy
 800df70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800df74:	f002 fbba 	bl	80106ec <vPortExitCritical>
				return pdPASS;
 800df78:	2301      	movs	r3, #1
 800df7a:	e063      	b.n	800e044 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d103      	bne.n	800df8a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df82:	f002 fbb3 	bl	80106ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800df86:	2300      	movs	r3, #0
 800df88:	e05c      	b.n	800e044 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d106      	bne.n	800df9e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df90:	f107 0314 	add.w	r3, r7, #20
 800df94:	4618      	mov	r0, r3
 800df96:	f001 f98f 	bl	800f2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df9a:	2301      	movs	r3, #1
 800df9c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df9e:	f002 fba5 	bl	80106ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dfa2:	f000 fecf 	bl	800ed44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfa6:	f002 fb6f 	bl	8010688 <vPortEnterCritical>
 800dfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dfb0:	b25b      	sxtb	r3, r3
 800dfb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfb6:	d103      	bne.n	800dfc0 <xQueueGenericSend+0x174>
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dfc6:	b25b      	sxtb	r3, r3
 800dfc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfcc:	d103      	bne.n	800dfd6 <xQueueGenericSend+0x18a>
 800dfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dfd6:	f002 fb89 	bl	80106ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfda:	1d3a      	adds	r2, r7, #4
 800dfdc:	f107 0314 	add.w	r3, r7, #20
 800dfe0:	4611      	mov	r1, r2
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f001 f97e 	bl	800f2e4 <xTaskCheckForTimeOut>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d124      	bne.n	800e038 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dfee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dff0:	f000 fbce 	bl	800e790 <prvIsQueueFull>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d018      	beq.n	800e02c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dffc:	3310      	adds	r3, #16
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	4611      	mov	r1, r2
 800e002:	4618      	mov	r0, r3
 800e004:	f001 f87a 	bl	800f0fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e008:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e00a:	f000 fb59 	bl	800e6c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e00e:	f000 fea7 	bl	800ed60 <xTaskResumeAll>
 800e012:	4603      	mov	r3, r0
 800e014:	2b00      	cmp	r3, #0
 800e016:	f47f af7c 	bne.w	800df12 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e01a:	4b0c      	ldr	r3, [pc, #48]	@ (800e04c <xQueueGenericSend+0x200>)
 800e01c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e020:	601a      	str	r2, [r3, #0]
 800e022:	f3bf 8f4f 	dsb	sy
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	e772      	b.n	800df12 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e02c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e02e:	f000 fb47 	bl	800e6c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e032:	f000 fe95 	bl	800ed60 <xTaskResumeAll>
 800e036:	e76c      	b.n	800df12 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e038:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e03a:	f000 fb41 	bl	800e6c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e03e:	f000 fe8f 	bl	800ed60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e042:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e044:	4618      	mov	r0, r3
 800e046:	3738      	adds	r7, #56	@ 0x38
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}
 800e04c:	e000ed04 	.word	0xe000ed04

0800e050 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b090      	sub	sp, #64	@ 0x40
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
 800e05c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e064:	2b00      	cmp	r3, #0
 800e066:	d10b      	bne.n	800e080 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e06c:	f383 8811 	msr	BASEPRI, r3
 800e070:	f3bf 8f6f 	isb	sy
 800e074:	f3bf 8f4f 	dsb	sy
 800e078:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e07a:	bf00      	nop
 800e07c:	bf00      	nop
 800e07e:	e7fd      	b.n	800e07c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d103      	bne.n	800e08e <xQueueGenericSendFromISR+0x3e>
 800e086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d101      	bne.n	800e092 <xQueueGenericSendFromISR+0x42>
 800e08e:	2301      	movs	r3, #1
 800e090:	e000      	b.n	800e094 <xQueueGenericSendFromISR+0x44>
 800e092:	2300      	movs	r3, #0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10b      	bne.n	800e0b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e09c:	f383 8811 	msr	BASEPRI, r3
 800e0a0:	f3bf 8f6f 	isb	sy
 800e0a4:	f3bf 8f4f 	dsb	sy
 800e0a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e0aa:	bf00      	nop
 800e0ac:	bf00      	nop
 800e0ae:	e7fd      	b.n	800e0ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	2b02      	cmp	r3, #2
 800e0b4:	d103      	bne.n	800e0be <xQueueGenericSendFromISR+0x6e>
 800e0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d101      	bne.n	800e0c2 <xQueueGenericSendFromISR+0x72>
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e000      	b.n	800e0c4 <xQueueGenericSendFromISR+0x74>
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10b      	bne.n	800e0e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0cc:	f383 8811 	msr	BASEPRI, r3
 800e0d0:	f3bf 8f6f 	isb	sy
 800e0d4:	f3bf 8f4f 	dsb	sy
 800e0d8:	623b      	str	r3, [r7, #32]
}
 800e0da:	bf00      	nop
 800e0dc:	bf00      	nop
 800e0de:	e7fd      	b.n	800e0dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e0e0:	f002 fbb2 	bl	8010848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e0e4:	f3ef 8211 	mrs	r2, BASEPRI
 800e0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ec:	f383 8811 	msr	BASEPRI, r3
 800e0f0:	f3bf 8f6f 	isb	sy
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	61fa      	str	r2, [r7, #28]
 800e0fa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e0fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e0fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e108:	429a      	cmp	r2, r3
 800e10a:	d302      	bcc.n	800e112 <xQueueGenericSendFromISR+0xc2>
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	2b02      	cmp	r3, #2
 800e110:	d12f      	bne.n	800e172 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e118:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e11e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e120:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e122:	683a      	ldr	r2, [r7, #0]
 800e124:	68b9      	ldr	r1, [r7, #8]
 800e126:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e128:	f000 fa3a 	bl	800e5a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e12c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e134:	d112      	bne.n	800e15c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d016      	beq.n	800e16c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e140:	3324      	adds	r3, #36	@ 0x24
 800e142:	4618      	mov	r0, r3
 800e144:	f001 f82c 	bl	800f1a0 <xTaskRemoveFromEventList>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d00e      	beq.n	800e16c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d00b      	beq.n	800e16c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2201      	movs	r2, #1
 800e158:	601a      	str	r2, [r3, #0]
 800e15a:	e007      	b.n	800e16c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e15c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e160:	3301      	adds	r3, #1
 800e162:	b2db      	uxtb	r3, r3
 800e164:	b25a      	sxtb	r2, r3
 800e166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e16c:	2301      	movs	r3, #1
 800e16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e170:	e001      	b.n	800e176 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e172:	2300      	movs	r3, #0
 800e174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e178:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e180:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e184:	4618      	mov	r0, r3
 800e186:	3740      	adds	r7, #64	@ 0x40
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08c      	sub	sp, #48	@ 0x30
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e198:	2300      	movs	r3, #0
 800e19a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10b      	bne.n	800e1be <xQueueReceive+0x32>
	__asm volatile
 800e1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1aa:	f383 8811 	msr	BASEPRI, r3
 800e1ae:	f3bf 8f6f 	isb	sy
 800e1b2:	f3bf 8f4f 	dsb	sy
 800e1b6:	623b      	str	r3, [r7, #32]
}
 800e1b8:	bf00      	nop
 800e1ba:	bf00      	nop
 800e1bc:	e7fd      	b.n	800e1ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d103      	bne.n	800e1cc <xQueueReceive+0x40>
 800e1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d101      	bne.n	800e1d0 <xQueueReceive+0x44>
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e000      	b.n	800e1d2 <xQueueReceive+0x46>
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d10b      	bne.n	800e1ee <xQueueReceive+0x62>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	61fb      	str	r3, [r7, #28]
}
 800e1e8:	bf00      	nop
 800e1ea:	bf00      	nop
 800e1ec:	e7fd      	b.n	800e1ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e1ee:	f001 f9d5 	bl	800f59c <xTaskGetSchedulerState>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d102      	bne.n	800e1fe <xQueueReceive+0x72>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <xQueueReceive+0x76>
 800e1fe:	2301      	movs	r3, #1
 800e200:	e000      	b.n	800e204 <xQueueReceive+0x78>
 800e202:	2300      	movs	r3, #0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10b      	bne.n	800e220 <xQueueReceive+0x94>
	__asm volatile
 800e208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e20c:	f383 8811 	msr	BASEPRI, r3
 800e210:	f3bf 8f6f 	isb	sy
 800e214:	f3bf 8f4f 	dsb	sy
 800e218:	61bb      	str	r3, [r7, #24]
}
 800e21a:	bf00      	nop
 800e21c:	bf00      	nop
 800e21e:	e7fd      	b.n	800e21c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e220:	f002 fa32 	bl	8010688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e228:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d01f      	beq.n	800e270 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e230:	68b9      	ldr	r1, [r7, #8]
 800e232:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e234:	f000 fa1e 	bl	800e674 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e23a:	1e5a      	subs	r2, r3, #1
 800e23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e23e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e242:	691b      	ldr	r3, [r3, #16]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00f      	beq.n	800e268 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24a:	3310      	adds	r3, #16
 800e24c:	4618      	mov	r0, r3
 800e24e:	f000 ffa7 	bl	800f1a0 <xTaskRemoveFromEventList>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d007      	beq.n	800e268 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e258:	4b3c      	ldr	r3, [pc, #240]	@ (800e34c <xQueueReceive+0x1c0>)
 800e25a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e25e:	601a      	str	r2, [r3, #0]
 800e260:	f3bf 8f4f 	dsb	sy
 800e264:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e268:	f002 fa40 	bl	80106ec <vPortExitCritical>
				return pdPASS;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e069      	b.n	800e344 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d103      	bne.n	800e27e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e276:	f002 fa39 	bl	80106ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e27a:	2300      	movs	r3, #0
 800e27c:	e062      	b.n	800e344 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e280:	2b00      	cmp	r3, #0
 800e282:	d106      	bne.n	800e292 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e284:	f107 0310 	add.w	r3, r7, #16
 800e288:	4618      	mov	r0, r3
 800e28a:	f001 f815 	bl	800f2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e28e:	2301      	movs	r3, #1
 800e290:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e292:	f002 fa2b 	bl	80106ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e296:	f000 fd55 	bl	800ed44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e29a:	f002 f9f5 	bl	8010688 <vPortEnterCritical>
 800e29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e2a4:	b25b      	sxtb	r3, r3
 800e2a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e2aa:	d103      	bne.n	800e2b4 <xQueueReceive+0x128>
 800e2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e2ba:	b25b      	sxtb	r3, r3
 800e2bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e2c0:	d103      	bne.n	800e2ca <xQueueReceive+0x13e>
 800e2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e2ca:	f002 fa0f 	bl	80106ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2ce:	1d3a      	adds	r2, r7, #4
 800e2d0:	f107 0310 	add.w	r3, r7, #16
 800e2d4:	4611      	mov	r1, r2
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f001 f804 	bl	800f2e4 <xTaskCheckForTimeOut>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d123      	bne.n	800e32a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e2e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2e4:	f000 fa3e 	bl	800e764 <prvIsQueueEmpty>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d017      	beq.n	800e31e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f0:	3324      	adds	r3, #36	@ 0x24
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	4611      	mov	r1, r2
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f000 ff00 	bl	800f0fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e2fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2fe:	f000 f9df 	bl	800e6c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e302:	f000 fd2d 	bl	800ed60 <xTaskResumeAll>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d189      	bne.n	800e220 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e30c:	4b0f      	ldr	r3, [pc, #60]	@ (800e34c <xQueueReceive+0x1c0>)
 800e30e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e312:	601a      	str	r2, [r3, #0]
 800e314:	f3bf 8f4f 	dsb	sy
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	e780      	b.n	800e220 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e31e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e320:	f000 f9ce 	bl	800e6c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e324:	f000 fd1c 	bl	800ed60 <xTaskResumeAll>
 800e328:	e77a      	b.n	800e220 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e32a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e32c:	f000 f9c8 	bl	800e6c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e330:	f000 fd16 	bl	800ed60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e336:	f000 fa15 	bl	800e764 <prvIsQueueEmpty>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	f43f af6f 	beq.w	800e220 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e342:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e344:	4618      	mov	r0, r3
 800e346:	3730      	adds	r7, #48	@ 0x30
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	e000ed04 	.word	0xe000ed04

0800e350 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b08e      	sub	sp, #56	@ 0x38
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e35a:	2300      	movs	r3, #0
 800e35c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e362:	2300      	movs	r3, #0
 800e364:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d10b      	bne.n	800e384 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800e36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e370:	f383 8811 	msr	BASEPRI, r3
 800e374:	f3bf 8f6f 	isb	sy
 800e378:	f3bf 8f4f 	dsb	sy
 800e37c:	623b      	str	r3, [r7, #32]
}
 800e37e:	bf00      	nop
 800e380:	bf00      	nop
 800e382:	e7fd      	b.n	800e380 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00b      	beq.n	800e3a4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	61fb      	str	r3, [r7, #28]
}
 800e39e:	bf00      	nop
 800e3a0:	bf00      	nop
 800e3a2:	e7fd      	b.n	800e3a0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e3a4:	f001 f8fa 	bl	800f59c <xTaskGetSchedulerState>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d102      	bne.n	800e3b4 <xQueueSemaphoreTake+0x64>
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d101      	bne.n	800e3b8 <xQueueSemaphoreTake+0x68>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e000      	b.n	800e3ba <xQueueSemaphoreTake+0x6a>
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10b      	bne.n	800e3d6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800e3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3c2:	f383 8811 	msr	BASEPRI, r3
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	61bb      	str	r3, [r7, #24]
}
 800e3d0:	bf00      	nop
 800e3d2:	bf00      	nop
 800e3d4:	e7fd      	b.n	800e3d2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3d6:	f002 f957 	bl	8010688 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3de:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d024      	beq.n	800e430 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e8:	1e5a      	subs	r2, r3, #1
 800e3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d104      	bne.n	800e400 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e3f6:	f001 fa4b 	bl	800f890 <pvTaskIncrementMutexHeldCount>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00f      	beq.n	800e428 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e40a:	3310      	adds	r3, #16
 800e40c:	4618      	mov	r0, r3
 800e40e:	f000 fec7 	bl	800f1a0 <xTaskRemoveFromEventList>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d007      	beq.n	800e428 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e418:	4b54      	ldr	r3, [pc, #336]	@ (800e56c <xQueueSemaphoreTake+0x21c>)
 800e41a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e41e:	601a      	str	r2, [r3, #0]
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e428:	f002 f960 	bl	80106ec <vPortExitCritical>
				return pdPASS;
 800e42c:	2301      	movs	r3, #1
 800e42e:	e098      	b.n	800e562 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d112      	bne.n	800e45c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00b      	beq.n	800e454 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800e43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e440:	f383 8811 	msr	BASEPRI, r3
 800e444:	f3bf 8f6f 	isb	sy
 800e448:	f3bf 8f4f 	dsb	sy
 800e44c:	617b      	str	r3, [r7, #20]
}
 800e44e:	bf00      	nop
 800e450:	bf00      	nop
 800e452:	e7fd      	b.n	800e450 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e454:	f002 f94a 	bl	80106ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e458:	2300      	movs	r3, #0
 800e45a:	e082      	b.n	800e562 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d106      	bne.n	800e470 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e462:	f107 030c 	add.w	r3, r7, #12
 800e466:	4618      	mov	r0, r3
 800e468:	f000 ff26 	bl	800f2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e46c:	2301      	movs	r3, #1
 800e46e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e470:	f002 f93c 	bl	80106ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e474:	f000 fc66 	bl	800ed44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e478:	f002 f906 	bl	8010688 <vPortEnterCritical>
 800e47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e482:	b25b      	sxtb	r3, r3
 800e484:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e488:	d103      	bne.n	800e492 <xQueueSemaphoreTake+0x142>
 800e48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e48c:	2200      	movs	r2, #0
 800e48e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e494:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e498:	b25b      	sxtb	r3, r3
 800e49a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e49e:	d103      	bne.n	800e4a8 <xQueueSemaphoreTake+0x158>
 800e4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e4a8:	f002 f920 	bl	80106ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e4ac:	463a      	mov	r2, r7
 800e4ae:	f107 030c 	add.w	r3, r7, #12
 800e4b2:	4611      	mov	r1, r2
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f000 ff15 	bl	800f2e4 <xTaskCheckForTimeOut>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d132      	bne.n	800e526 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e4c2:	f000 f94f 	bl	800e764 <prvIsQueueEmpty>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d026      	beq.n	800e51a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d109      	bne.n	800e4e8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e4d4:	f002 f8d8 	bl	8010688 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4da:	689b      	ldr	r3, [r3, #8]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f001 f87b 	bl	800f5d8 <xTaskPriorityInherit>
 800e4e2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e4e4:	f002 f902 	bl	80106ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ea:	3324      	adds	r3, #36	@ 0x24
 800e4ec:	683a      	ldr	r2, [r7, #0]
 800e4ee:	4611      	mov	r1, r2
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f000 fe03 	bl	800f0fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e4f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e4f8:	f000 f8e2 	bl	800e6c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e4fc:	f000 fc30 	bl	800ed60 <xTaskResumeAll>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	f47f af67 	bne.w	800e3d6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e508:	4b18      	ldr	r3, [pc, #96]	@ (800e56c <xQueueSemaphoreTake+0x21c>)
 800e50a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e50e:	601a      	str	r2, [r3, #0]
 800e510:	f3bf 8f4f 	dsb	sy
 800e514:	f3bf 8f6f 	isb	sy
 800e518:	e75d      	b.n	800e3d6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e51a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e51c:	f000 f8d0 	bl	800e6c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e520:	f000 fc1e 	bl	800ed60 <xTaskResumeAll>
 800e524:	e757      	b.n	800e3d6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e526:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e528:	f000 f8ca 	bl	800e6c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e52c:	f000 fc18 	bl	800ed60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e530:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e532:	f000 f917 	bl	800e764 <prvIsQueueEmpty>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f43f af4c 	beq.w	800e3d6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e540:	2b00      	cmp	r3, #0
 800e542:	d00d      	beq.n	800e560 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e544:	f002 f8a0 	bl	8010688 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e548:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e54a:	f000 f811 	bl	800e570 <prvGetDisinheritPriorityAfterTimeout>
 800e54e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e556:	4618      	mov	r0, r3
 800e558:	f001 f916 	bl	800f788 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e55c:	f002 f8c6 	bl	80106ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e560:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e562:	4618      	mov	r0, r3
 800e564:	3738      	adds	r7, #56	@ 0x38
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	bf00      	nop
 800e56c:	e000ed04 	.word	0xe000ed04

0800e570 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d006      	beq.n	800e58e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e58a:	60fb      	str	r3, [r7, #12]
 800e58c:	e001      	b.n	800e592 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e58e:	2300      	movs	r3, #0
 800e590:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e592:	68fb      	ldr	r3, [r7, #12]
	}
 800e594:	4618      	mov	r0, r3
 800e596:	3714      	adds	r7, #20
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr

0800e5a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d10d      	bne.n	800e5da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d14d      	bne.n	800e662 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f001 f86c 	bl	800f6a8 <xTaskPriorityDisinherit>
 800e5d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	609a      	str	r2, [r3, #8]
 800e5d8:	e043      	b.n	800e662 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d119      	bne.n	800e614 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	6858      	ldr	r0, [r3, #4]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	68b9      	ldr	r1, [r7, #8]
 800e5ec:	f012 fa71 	bl	8020ad2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	685a      	ldr	r2, [r3, #4]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5f8:	441a      	add	r2, r3
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	685a      	ldr	r2, [r3, #4]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	689b      	ldr	r3, [r3, #8]
 800e606:	429a      	cmp	r2, r3
 800e608:	d32b      	bcc.n	800e662 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	605a      	str	r2, [r3, #4]
 800e612:	e026      	b.n	800e662 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	68d8      	ldr	r0, [r3, #12]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e61c:	461a      	mov	r2, r3
 800e61e:	68b9      	ldr	r1, [r7, #8]
 800e620:	f012 fa57 	bl	8020ad2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	68da      	ldr	r2, [r3, #12]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e62c:	425b      	negs	r3, r3
 800e62e:	441a      	add	r2, r3
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	68da      	ldr	r2, [r3, #12]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d207      	bcs.n	800e650 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	689a      	ldr	r2, [r3, #8]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e648:	425b      	negs	r3, r3
 800e64a:	441a      	add	r2, r3
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2b02      	cmp	r3, #2
 800e654:	d105      	bne.n	800e662 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d002      	beq.n	800e662 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	3b01      	subs	r3, #1
 800e660:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	1c5a      	adds	r2, r3, #1
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e66a:	697b      	ldr	r3, [r7, #20]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3718      	adds	r7, #24
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e682:	2b00      	cmp	r3, #0
 800e684:	d018      	beq.n	800e6b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	68da      	ldr	r2, [r3, #12]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e68e:	441a      	add	r2, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	68da      	ldr	r2, [r3, #12]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	689b      	ldr	r3, [r3, #8]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d303      	bcc.n	800e6a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	68d9      	ldr	r1, [r3, #12]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	6838      	ldr	r0, [r7, #0]
 800e6b4:	f012 fa0d 	bl	8020ad2 <memcpy>
	}
}
 800e6b8:	bf00      	nop
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e6c8:	f001 ffde 	bl	8010688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e6d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e6d4:	e011      	b.n	800e6fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d012      	beq.n	800e704 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	3324      	adds	r3, #36	@ 0x24
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 fd5c 	bl	800f1a0 <xTaskRemoveFromEventList>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d001      	beq.n	800e6f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e6ee:	f000 fe5d 	bl	800f3ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e6f2:	7bfb      	ldrb	r3, [r7, #15]
 800e6f4:	3b01      	subs	r3, #1
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e6fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	dce9      	bgt.n	800e6d6 <prvUnlockQueue+0x16>
 800e702:	e000      	b.n	800e706 <prvUnlockQueue+0x46>
					break;
 800e704:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	22ff      	movs	r2, #255	@ 0xff
 800e70a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e70e:	f001 ffed 	bl	80106ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e712:	f001 ffb9 	bl	8010688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e71c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e71e:	e011      	b.n	800e744 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	691b      	ldr	r3, [r3, #16]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d012      	beq.n	800e74e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	3310      	adds	r3, #16
 800e72c:	4618      	mov	r0, r3
 800e72e:	f000 fd37 	bl	800f1a0 <xTaskRemoveFromEventList>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d001      	beq.n	800e73c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e738:	f000 fe38 	bl	800f3ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e73c:	7bbb      	ldrb	r3, [r7, #14]
 800e73e:	3b01      	subs	r3, #1
 800e740:	b2db      	uxtb	r3, r3
 800e742:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	dce9      	bgt.n	800e720 <prvUnlockQueue+0x60>
 800e74c:	e000      	b.n	800e750 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e74e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	22ff      	movs	r2, #255	@ 0xff
 800e754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e758:	f001 ffc8 	bl	80106ec <vPortExitCritical>
}
 800e75c:	bf00      	nop
 800e75e:	3710      	adds	r7, #16
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e76c:	f001 ff8c 	bl	8010688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e774:	2b00      	cmp	r3, #0
 800e776:	d102      	bne.n	800e77e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e778:	2301      	movs	r3, #1
 800e77a:	60fb      	str	r3, [r7, #12]
 800e77c:	e001      	b.n	800e782 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e77e:	2300      	movs	r3, #0
 800e780:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e782:	f001 ffb3 	bl	80106ec <vPortExitCritical>

	return xReturn;
 800e786:	68fb      	ldr	r3, [r7, #12]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e798:	f001 ff76 	bl	8010688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d102      	bne.n	800e7ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	60fb      	str	r3, [r7, #12]
 800e7ac:	e001      	b.n	800e7b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e7b2:	f001 ff9b 	bl	80106ec <vPortExitCritical>

	return xReturn;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3710      	adds	r7, #16
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	60fb      	str	r3, [r7, #12]
 800e7ce:	e014      	b.n	800e7fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e7d0:	4a0f      	ldr	r2, [pc, #60]	@ (800e810 <vQueueAddToRegistry+0x50>)
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10b      	bne.n	800e7f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e7dc:	490c      	ldr	r1, [pc, #48]	@ (800e810 <vQueueAddToRegistry+0x50>)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	683a      	ldr	r2, [r7, #0]
 800e7e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e7e6:	4a0a      	ldr	r2, [pc, #40]	@ (800e810 <vQueueAddToRegistry+0x50>)
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	00db      	lsls	r3, r3, #3
 800e7ec:	4413      	add	r3, r2
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e7f2:	e006      	b.n	800e802 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	60fb      	str	r3, [r7, #12]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2b07      	cmp	r3, #7
 800e7fe:	d9e7      	bls.n	800e7d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e800:	bf00      	nop
 800e802:	bf00      	nop
 800e804:	3714      	adds	r7, #20
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	240333a0 	.word	0x240333a0

0800e814 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e824:	f001 ff30 	bl	8010688 <vPortEnterCritical>
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e82e:	b25b      	sxtb	r3, r3
 800e830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e834:	d103      	bne.n	800e83e <vQueueWaitForMessageRestricted+0x2a>
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	2200      	movs	r2, #0
 800e83a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e844:	b25b      	sxtb	r3, r3
 800e846:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e84a:	d103      	bne.n	800e854 <vQueueWaitForMessageRestricted+0x40>
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	2200      	movs	r2, #0
 800e850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e854:	f001 ff4a 	bl	80106ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d106      	bne.n	800e86e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	3324      	adds	r3, #36	@ 0x24
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	68b9      	ldr	r1, [r7, #8]
 800e868:	4618      	mov	r0, r3
 800e86a:	f000 fc6d 	bl	800f148 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e86e:	6978      	ldr	r0, [r7, #20]
 800e870:	f7ff ff26 	bl	800e6c0 <prvUnlockQueue>
	}
 800e874:	bf00      	nop
 800e876:	3718      	adds	r7, #24
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08e      	sub	sp, #56	@ 0x38
 800e880:	af04      	add	r7, sp, #16
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d10b      	bne.n	800e8a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e894:	f383 8811 	msr	BASEPRI, r3
 800e898:	f3bf 8f6f 	isb	sy
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	623b      	str	r3, [r7, #32]
}
 800e8a2:	bf00      	nop
 800e8a4:	bf00      	nop
 800e8a6:	e7fd      	b.n	800e8a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10b      	bne.n	800e8c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b2:	f383 8811 	msr	BASEPRI, r3
 800e8b6:	f3bf 8f6f 	isb	sy
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	61fb      	str	r3, [r7, #28]
}
 800e8c0:	bf00      	nop
 800e8c2:	bf00      	nop
 800e8c4:	e7fd      	b.n	800e8c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e8c6:	23a8      	movs	r3, #168	@ 0xa8
 800e8c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	2ba8      	cmp	r3, #168	@ 0xa8
 800e8ce:	d00b      	beq.n	800e8e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d4:	f383 8811 	msr	BASEPRI, r3
 800e8d8:	f3bf 8f6f 	isb	sy
 800e8dc:	f3bf 8f4f 	dsb	sy
 800e8e0:	61bb      	str	r3, [r7, #24]
}
 800e8e2:	bf00      	nop
 800e8e4:	bf00      	nop
 800e8e6:	e7fd      	b.n	800e8e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e8e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d01e      	beq.n	800e92e <xTaskCreateStatic+0xb2>
 800e8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d01b      	beq.n	800e92e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e902:	2202      	movs	r2, #2
 800e904:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e908:	2300      	movs	r3, #0
 800e90a:	9303      	str	r3, [sp, #12]
 800e90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e90e:	9302      	str	r3, [sp, #8]
 800e910:	f107 0314 	add.w	r3, r7, #20
 800e914:	9301      	str	r3, [sp, #4]
 800e916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e918:	9300      	str	r3, [sp, #0]
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	68b9      	ldr	r1, [r7, #8]
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f000 f851 	bl	800e9c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e926:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e928:	f000 f8f6 	bl	800eb18 <prvAddNewTaskToReadyList>
 800e92c:	e001      	b.n	800e932 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e92e:	2300      	movs	r3, #0
 800e930:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e932:	697b      	ldr	r3, [r7, #20]
	}
 800e934:	4618      	mov	r0, r3
 800e936:	3728      	adds	r7, #40	@ 0x28
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b08c      	sub	sp, #48	@ 0x30
 800e940:	af04      	add	r7, sp, #16
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	603b      	str	r3, [r7, #0]
 800e948:	4613      	mov	r3, r2
 800e94a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e94c:	88fb      	ldrh	r3, [r7, #6]
 800e94e:	009b      	lsls	r3, r3, #2
 800e950:	4618      	mov	r0, r3
 800e952:	f001 ffbb 	bl	80108cc <pvPortMalloc>
 800e956:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d00e      	beq.n	800e97c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e95e:	20a8      	movs	r0, #168	@ 0xa8
 800e960:	f001 ffb4 	bl	80108cc <pvPortMalloc>
 800e964:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d003      	beq.n	800e974 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	697a      	ldr	r2, [r7, #20]
 800e970:	631a      	str	r2, [r3, #48]	@ 0x30
 800e972:	e005      	b.n	800e980 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e974:	6978      	ldr	r0, [r7, #20]
 800e976:	f002 f877 	bl	8010a68 <vPortFree>
 800e97a:	e001      	b.n	800e980 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e97c:	2300      	movs	r3, #0
 800e97e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d017      	beq.n	800e9b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	2200      	movs	r2, #0
 800e98a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e98e:	88fa      	ldrh	r2, [r7, #6]
 800e990:	2300      	movs	r3, #0
 800e992:	9303      	str	r3, [sp, #12]
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	9302      	str	r3, [sp, #8]
 800e998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e99a:	9301      	str	r3, [sp, #4]
 800e99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	68b9      	ldr	r1, [r7, #8]
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f000 f80f 	bl	800e9c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e9aa:	69f8      	ldr	r0, [r7, #28]
 800e9ac:	f000 f8b4 	bl	800eb18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	61bb      	str	r3, [r7, #24]
 800e9b4:	e002      	b.n	800e9bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e9b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e9ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e9bc:	69bb      	ldr	r3, [r7, #24]
	}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3720      	adds	r7, #32
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
	...

0800e9c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b088      	sub	sp, #32
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
 800e9d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	009b      	lsls	r3, r3, #2
 800e9de:	461a      	mov	r2, r3
 800e9e0:	21a5      	movs	r1, #165	@ 0xa5
 800e9e2:	f011 ff57 	bl	8020894 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e9ea:	6879      	ldr	r1, [r7, #4]
 800e9ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e9f0:	440b      	add	r3, r1
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	4413      	add	r3, r2
 800e9f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	f023 0307 	bic.w	r3, r3, #7
 800e9fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ea00:	69bb      	ldr	r3, [r7, #24]
 800ea02:	f003 0307 	and.w	r3, r3, #7
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00b      	beq.n	800ea22 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ea0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea0e:	f383 8811 	msr	BASEPRI, r3
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	f3bf 8f4f 	dsb	sy
 800ea1a:	617b      	str	r3, [r7, #20]
}
 800ea1c:	bf00      	nop
 800ea1e:	bf00      	nop
 800ea20:	e7fd      	b.n	800ea1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d01f      	beq.n	800ea68 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea28:	2300      	movs	r3, #0
 800ea2a:	61fb      	str	r3, [r7, #28]
 800ea2c:	e012      	b.n	800ea54 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	4413      	add	r3, r2
 800ea34:	7819      	ldrb	r1, [r3, #0]
 800ea36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	3334      	adds	r3, #52	@ 0x34
 800ea3e:	460a      	mov	r2, r1
 800ea40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ea42:	68ba      	ldr	r2, [r7, #8]
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	4413      	add	r3, r2
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d006      	beq.n	800ea5c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	3301      	adds	r3, #1
 800ea52:	61fb      	str	r3, [r7, #28]
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	2b0f      	cmp	r3, #15
 800ea58:	d9e9      	bls.n	800ea2e <prvInitialiseNewTask+0x66>
 800ea5a:	e000      	b.n	800ea5e <prvInitialiseNewTask+0x96>
			{
				break;
 800ea5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ea5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea60:	2200      	movs	r2, #0
 800ea62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ea66:	e003      	b.n	800ea70 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ea68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ea70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea72:	2b37      	cmp	r3, #55	@ 0x37
 800ea74:	d901      	bls.n	800ea7a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ea76:	2337      	movs	r3, #55	@ 0x37
 800ea78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ea80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ea86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea88:	2200      	movs	r2, #0
 800ea8a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ea8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea8e:	3304      	adds	r3, #4
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7fe ff49 	bl	800d928 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ea96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea98:	3318      	adds	r3, #24
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fe ff44 	bl	800d928 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eaa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eaa4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eaac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eab4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab8:	2200      	movs	r2, #0
 800eaba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac0:	2200      	movs	r2, #0
 800eac2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac8:	3354      	adds	r3, #84	@ 0x54
 800eaca:	224c      	movs	r2, #76	@ 0x4c
 800eacc:	2100      	movs	r1, #0
 800eace:	4618      	mov	r0, r3
 800ead0:	f011 fee0 	bl	8020894 <memset>
 800ead4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead6:	4a0d      	ldr	r2, [pc, #52]	@ (800eb0c <prvInitialiseNewTask+0x144>)
 800ead8:	659a      	str	r2, [r3, #88]	@ 0x58
 800eada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eadc:	4a0c      	ldr	r2, [pc, #48]	@ (800eb10 <prvInitialiseNewTask+0x148>)
 800eade:	65da      	str	r2, [r3, #92]	@ 0x5c
 800eae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae2:	4a0c      	ldr	r2, [pc, #48]	@ (800eb14 <prvInitialiseNewTask+0x14c>)
 800eae4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eae6:	683a      	ldr	r2, [r7, #0]
 800eae8:	68f9      	ldr	r1, [r7, #12]
 800eaea:	69b8      	ldr	r0, [r7, #24]
 800eaec:	f001 fc9a 	bl	8010424 <pxPortInitialiseStack>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eaf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d002      	beq.n	800eb02 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eafe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb02:	bf00      	nop
 800eb04:	3720      	adds	r7, #32
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	2406949c 	.word	0x2406949c
 800eb10:	24069504 	.word	0x24069504
 800eb14:	2406956c 	.word	0x2406956c

0800eb18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eb20:	f001 fdb2 	bl	8010688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eb24:	4b2d      	ldr	r3, [pc, #180]	@ (800ebdc <prvAddNewTaskToReadyList+0xc4>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	4a2c      	ldr	r2, [pc, #176]	@ (800ebdc <prvAddNewTaskToReadyList+0xc4>)
 800eb2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eb2e:	4b2c      	ldr	r3, [pc, #176]	@ (800ebe0 <prvAddNewTaskToReadyList+0xc8>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d109      	bne.n	800eb4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eb36:	4a2a      	ldr	r2, [pc, #168]	@ (800ebe0 <prvAddNewTaskToReadyList+0xc8>)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eb3c:	4b27      	ldr	r3, [pc, #156]	@ (800ebdc <prvAddNewTaskToReadyList+0xc4>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d110      	bne.n	800eb66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eb44:	f000 fc56 	bl	800f3f4 <prvInitialiseTaskLists>
 800eb48:	e00d      	b.n	800eb66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eb4a:	4b26      	ldr	r3, [pc, #152]	@ (800ebe4 <prvAddNewTaskToReadyList+0xcc>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d109      	bne.n	800eb66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eb52:	4b23      	ldr	r3, [pc, #140]	@ (800ebe0 <prvAddNewTaskToReadyList+0xc8>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d802      	bhi.n	800eb66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eb60:	4a1f      	ldr	r2, [pc, #124]	@ (800ebe0 <prvAddNewTaskToReadyList+0xc8>)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eb66:	4b20      	ldr	r3, [pc, #128]	@ (800ebe8 <prvAddNewTaskToReadyList+0xd0>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	4a1e      	ldr	r2, [pc, #120]	@ (800ebe8 <prvAddNewTaskToReadyList+0xd0>)
 800eb6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eb70:	4b1d      	ldr	r3, [pc, #116]	@ (800ebe8 <prvAddNewTaskToReadyList+0xd0>)
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb7c:	4b1b      	ldr	r3, [pc, #108]	@ (800ebec <prvAddNewTaskToReadyList+0xd4>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d903      	bls.n	800eb8c <prvAddNewTaskToReadyList+0x74>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb88:	4a18      	ldr	r2, [pc, #96]	@ (800ebec <prvAddNewTaskToReadyList+0xd4>)
 800eb8a:	6013      	str	r3, [r2, #0]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb90:	4613      	mov	r3, r2
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	4413      	add	r3, r2
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	4a15      	ldr	r2, [pc, #84]	@ (800ebf0 <prvAddNewTaskToReadyList+0xd8>)
 800eb9a:	441a      	add	r2, r3
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	3304      	adds	r3, #4
 800eba0:	4619      	mov	r1, r3
 800eba2:	4610      	mov	r0, r2
 800eba4:	f7fe fecd 	bl	800d942 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eba8:	f001 fda0 	bl	80106ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ebac:	4b0d      	ldr	r3, [pc, #52]	@ (800ebe4 <prvAddNewTaskToReadyList+0xcc>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d00e      	beq.n	800ebd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ebb4:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe0 <prvAddNewTaskToReadyList+0xc8>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d207      	bcs.n	800ebd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ebc2:	4b0c      	ldr	r3, [pc, #48]	@ (800ebf4 <prvAddNewTaskToReadyList+0xdc>)
 800ebc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebc8:	601a      	str	r2, [r3, #0]
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebd2:	bf00      	nop
 800ebd4:	3708      	adds	r7, #8
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	240338b4 	.word	0x240338b4
 800ebe0:	240333e0 	.word	0x240333e0
 800ebe4:	240338c0 	.word	0x240338c0
 800ebe8:	240338d0 	.word	0x240338d0
 800ebec:	240338bc 	.word	0x240338bc
 800ebf0:	240333e4 	.word	0x240333e4
 800ebf4:	e000ed04 	.word	0xe000ed04

0800ebf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ec00:	2300      	movs	r3, #0
 800ec02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d018      	beq.n	800ec3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ec0a:	4b14      	ldr	r3, [pc, #80]	@ (800ec5c <vTaskDelay+0x64>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d00b      	beq.n	800ec2a <vTaskDelay+0x32>
	__asm volatile
 800ec12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec16:	f383 8811 	msr	BASEPRI, r3
 800ec1a:	f3bf 8f6f 	isb	sy
 800ec1e:	f3bf 8f4f 	dsb	sy
 800ec22:	60bb      	str	r3, [r7, #8]
}
 800ec24:	bf00      	nop
 800ec26:	bf00      	nop
 800ec28:	e7fd      	b.n	800ec26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ec2a:	f000 f88b 	bl	800ed44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ec2e:	2100      	movs	r1, #0
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f001 f849 	bl	800fcc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ec36:	f000 f893 	bl	800ed60 <xTaskResumeAll>
 800ec3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d107      	bne.n	800ec52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ec42:	4b07      	ldr	r3, [pc, #28]	@ (800ec60 <vTaskDelay+0x68>)
 800ec44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec48:	601a      	str	r2, [r3, #0]
 800ec4a:	f3bf 8f4f 	dsb	sy
 800ec4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec52:	bf00      	nop
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	240338dc 	.word	0x240338dc
 800ec60:	e000ed04 	.word	0xe000ed04

0800ec64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b08a      	sub	sp, #40	@ 0x28
 800ec68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ec72:	463a      	mov	r2, r7
 800ec74:	1d39      	adds	r1, r7, #4
 800ec76:	f107 0308 	add.w	r3, r7, #8
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fe fe00 	bl	800d880 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ec80:	6839      	ldr	r1, [r7, #0]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	68ba      	ldr	r2, [r7, #8]
 800ec86:	9202      	str	r2, [sp, #8]
 800ec88:	9301      	str	r3, [sp, #4]
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	2300      	movs	r3, #0
 800ec90:	460a      	mov	r2, r1
 800ec92:	4924      	ldr	r1, [pc, #144]	@ (800ed24 <vTaskStartScheduler+0xc0>)
 800ec94:	4824      	ldr	r0, [pc, #144]	@ (800ed28 <vTaskStartScheduler+0xc4>)
 800ec96:	f7ff fdf1 	bl	800e87c <xTaskCreateStatic>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	4a23      	ldr	r2, [pc, #140]	@ (800ed2c <vTaskStartScheduler+0xc8>)
 800ec9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800eca0:	4b22      	ldr	r3, [pc, #136]	@ (800ed2c <vTaskStartScheduler+0xc8>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d002      	beq.n	800ecae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	617b      	str	r3, [r7, #20]
 800ecac:	e001      	b.n	800ecb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d102      	bne.n	800ecbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ecb8:	f001 f85a 	bl	800fd70 <xTimerCreateTimerTask>
 800ecbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d11b      	bne.n	800ecfc <vTaskStartScheduler+0x98>
	__asm volatile
 800ecc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc8:	f383 8811 	msr	BASEPRI, r3
 800eccc:	f3bf 8f6f 	isb	sy
 800ecd0:	f3bf 8f4f 	dsb	sy
 800ecd4:	613b      	str	r3, [r7, #16]
}
 800ecd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ecd8:	4b15      	ldr	r3, [pc, #84]	@ (800ed30 <vTaskStartScheduler+0xcc>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	3354      	adds	r3, #84	@ 0x54
 800ecde:	4a15      	ldr	r2, [pc, #84]	@ (800ed34 <vTaskStartScheduler+0xd0>)
 800ece0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ece2:	4b15      	ldr	r3, [pc, #84]	@ (800ed38 <vTaskStartScheduler+0xd4>)
 800ece4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ece8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ecea:	4b14      	ldr	r3, [pc, #80]	@ (800ed3c <vTaskStartScheduler+0xd8>)
 800ecec:	2201      	movs	r2, #1
 800ecee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ecf0:	4b13      	ldr	r3, [pc, #76]	@ (800ed40 <vTaskStartScheduler+0xdc>)
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ecf6:	f001 fc23 	bl	8010540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ecfa:	e00f      	b.n	800ed1c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed02:	d10b      	bne.n	800ed1c <vTaskStartScheduler+0xb8>
	__asm volatile
 800ed04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed08:	f383 8811 	msr	BASEPRI, r3
 800ed0c:	f3bf 8f6f 	isb	sy
 800ed10:	f3bf 8f4f 	dsb	sy
 800ed14:	60fb      	str	r3, [r7, #12]
}
 800ed16:	bf00      	nop
 800ed18:	bf00      	nop
 800ed1a:	e7fd      	b.n	800ed18 <vTaskStartScheduler+0xb4>
}
 800ed1c:	bf00      	nop
 800ed1e:	3718      	adds	r7, #24
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	080219c8 	.word	0x080219c8
 800ed28:	0800f3c5 	.word	0x0800f3c5
 800ed2c:	240338d8 	.word	0x240338d8
 800ed30:	240333e0 	.word	0x240333e0
 800ed34:	240013a0 	.word	0x240013a0
 800ed38:	240338d4 	.word	0x240338d4
 800ed3c:	240338c0 	.word	0x240338c0
 800ed40:	240338b8 	.word	0x240338b8

0800ed44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ed44:	b480      	push	{r7}
 800ed46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ed48:	4b04      	ldr	r3, [pc, #16]	@ (800ed5c <vTaskSuspendAll+0x18>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	4a03      	ldr	r2, [pc, #12]	@ (800ed5c <vTaskSuspendAll+0x18>)
 800ed50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ed52:	bf00      	nop
 800ed54:	46bd      	mov	sp, r7
 800ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5a:	4770      	bx	lr
 800ed5c:	240338dc 	.word	0x240338dc

0800ed60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ed66:	2300      	movs	r3, #0
 800ed68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ed6e:	4b42      	ldr	r3, [pc, #264]	@ (800ee78 <xTaskResumeAll+0x118>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d10b      	bne.n	800ed8e <xTaskResumeAll+0x2e>
	__asm volatile
 800ed76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed7a:	f383 8811 	msr	BASEPRI, r3
 800ed7e:	f3bf 8f6f 	isb	sy
 800ed82:	f3bf 8f4f 	dsb	sy
 800ed86:	603b      	str	r3, [r7, #0]
}
 800ed88:	bf00      	nop
 800ed8a:	bf00      	nop
 800ed8c:	e7fd      	b.n	800ed8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ed8e:	f001 fc7b 	bl	8010688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ed92:	4b39      	ldr	r3, [pc, #228]	@ (800ee78 <xTaskResumeAll+0x118>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	3b01      	subs	r3, #1
 800ed98:	4a37      	ldr	r2, [pc, #220]	@ (800ee78 <xTaskResumeAll+0x118>)
 800ed9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed9c:	4b36      	ldr	r3, [pc, #216]	@ (800ee78 <xTaskResumeAll+0x118>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d162      	bne.n	800ee6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eda4:	4b35      	ldr	r3, [pc, #212]	@ (800ee7c <xTaskResumeAll+0x11c>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d05e      	beq.n	800ee6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800edac:	e02f      	b.n	800ee0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edae:	4b34      	ldr	r3, [pc, #208]	@ (800ee80 <xTaskResumeAll+0x120>)
 800edb0:	68db      	ldr	r3, [r3, #12]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3318      	adds	r3, #24
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fe fe1e 	bl	800d9fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	3304      	adds	r3, #4
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fe fe19 	bl	800d9fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edce:	4b2d      	ldr	r3, [pc, #180]	@ (800ee84 <xTaskResumeAll+0x124>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d903      	bls.n	800edde <xTaskResumeAll+0x7e>
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edda:	4a2a      	ldr	r2, [pc, #168]	@ (800ee84 <xTaskResumeAll+0x124>)
 800eddc:	6013      	str	r3, [r2, #0]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ede2:	4613      	mov	r3, r2
 800ede4:	009b      	lsls	r3, r3, #2
 800ede6:	4413      	add	r3, r2
 800ede8:	009b      	lsls	r3, r3, #2
 800edea:	4a27      	ldr	r2, [pc, #156]	@ (800ee88 <xTaskResumeAll+0x128>)
 800edec:	441a      	add	r2, r3
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	3304      	adds	r3, #4
 800edf2:	4619      	mov	r1, r3
 800edf4:	4610      	mov	r0, r2
 800edf6:	f7fe fda4 	bl	800d942 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edfe:	4b23      	ldr	r3, [pc, #140]	@ (800ee8c <xTaskResumeAll+0x12c>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d302      	bcc.n	800ee0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ee08:	4b21      	ldr	r3, [pc, #132]	@ (800ee90 <xTaskResumeAll+0x130>)
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ee80 <xTaskResumeAll+0x120>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1cb      	bne.n	800edae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d001      	beq.n	800ee20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ee1c:	f000 fb8e 	bl	800f53c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ee20:	4b1c      	ldr	r3, [pc, #112]	@ (800ee94 <xTaskResumeAll+0x134>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d010      	beq.n	800ee4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ee2c:	f000 f846 	bl	800eebc <xTaskIncrementTick>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d002      	beq.n	800ee3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ee36:	4b16      	ldr	r3, [pc, #88]	@ (800ee90 <xTaskResumeAll+0x130>)
 800ee38:	2201      	movs	r2, #1
 800ee3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	3b01      	subs	r3, #1
 800ee40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d1f1      	bne.n	800ee2c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ee48:	4b12      	ldr	r3, [pc, #72]	@ (800ee94 <xTaskResumeAll+0x134>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ee4e:	4b10      	ldr	r3, [pc, #64]	@ (800ee90 <xTaskResumeAll+0x130>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d009      	beq.n	800ee6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ee56:	2301      	movs	r3, #1
 800ee58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ee5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ee98 <xTaskResumeAll+0x138>)
 800ee5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee60:	601a      	str	r2, [r3, #0]
 800ee62:	f3bf 8f4f 	dsb	sy
 800ee66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee6a:	f001 fc3f 	bl	80106ec <vPortExitCritical>

	return xAlreadyYielded;
 800ee6e:	68bb      	ldr	r3, [r7, #8]
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3710      	adds	r7, #16
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	240338dc 	.word	0x240338dc
 800ee7c:	240338b4 	.word	0x240338b4
 800ee80:	24033874 	.word	0x24033874
 800ee84:	240338bc 	.word	0x240338bc
 800ee88:	240333e4 	.word	0x240333e4
 800ee8c:	240333e0 	.word	0x240333e0
 800ee90:	240338c8 	.word	0x240338c8
 800ee94:	240338c4 	.word	0x240338c4
 800ee98:	e000ed04 	.word	0xe000ed04

0800ee9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b083      	sub	sp, #12
 800eea0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eea2:	4b05      	ldr	r3, [pc, #20]	@ (800eeb8 <xTaskGetTickCount+0x1c>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eea8:	687b      	ldr	r3, [r7, #4]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	370c      	adds	r7, #12
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr
 800eeb6:	bf00      	nop
 800eeb8:	240338b8 	.word	0x240338b8

0800eebc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b086      	sub	sp, #24
 800eec0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800eec2:	2300      	movs	r3, #0
 800eec4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eec6:	4b4f      	ldr	r3, [pc, #316]	@ (800f004 <xTaskIncrementTick+0x148>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	f040 8090 	bne.w	800eff0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800eed0:	4b4d      	ldr	r3, [pc, #308]	@ (800f008 <xTaskIncrementTick+0x14c>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	3301      	adds	r3, #1
 800eed6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800eed8:	4a4b      	ldr	r2, [pc, #300]	@ (800f008 <xTaskIncrementTick+0x14c>)
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d121      	bne.n	800ef28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800eee4:	4b49      	ldr	r3, [pc, #292]	@ (800f00c <xTaskIncrementTick+0x150>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d00b      	beq.n	800ef06 <xTaskIncrementTick+0x4a>
	__asm volatile
 800eeee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eef2:	f383 8811 	msr	BASEPRI, r3
 800eef6:	f3bf 8f6f 	isb	sy
 800eefa:	f3bf 8f4f 	dsb	sy
 800eefe:	603b      	str	r3, [r7, #0]
}
 800ef00:	bf00      	nop
 800ef02:	bf00      	nop
 800ef04:	e7fd      	b.n	800ef02 <xTaskIncrementTick+0x46>
 800ef06:	4b41      	ldr	r3, [pc, #260]	@ (800f00c <xTaskIncrementTick+0x150>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	60fb      	str	r3, [r7, #12]
 800ef0c:	4b40      	ldr	r3, [pc, #256]	@ (800f010 <xTaskIncrementTick+0x154>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a3e      	ldr	r2, [pc, #248]	@ (800f00c <xTaskIncrementTick+0x150>)
 800ef12:	6013      	str	r3, [r2, #0]
 800ef14:	4a3e      	ldr	r2, [pc, #248]	@ (800f010 <xTaskIncrementTick+0x154>)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	6013      	str	r3, [r2, #0]
 800ef1a:	4b3e      	ldr	r3, [pc, #248]	@ (800f014 <xTaskIncrementTick+0x158>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	4a3c      	ldr	r2, [pc, #240]	@ (800f014 <xTaskIncrementTick+0x158>)
 800ef22:	6013      	str	r3, [r2, #0]
 800ef24:	f000 fb0a 	bl	800f53c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ef28:	4b3b      	ldr	r3, [pc, #236]	@ (800f018 <xTaskIncrementTick+0x15c>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	693a      	ldr	r2, [r7, #16]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d349      	bcc.n	800efc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef32:	4b36      	ldr	r3, [pc, #216]	@ (800f00c <xTaskIncrementTick+0x150>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d104      	bne.n	800ef46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef3c:	4b36      	ldr	r3, [pc, #216]	@ (800f018 <xTaskIncrementTick+0x15c>)
 800ef3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ef42:	601a      	str	r2, [r3, #0]
					break;
 800ef44:	e03f      	b.n	800efc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef46:	4b31      	ldr	r3, [pc, #196]	@ (800f00c <xTaskIncrementTick+0x150>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	68db      	ldr	r3, [r3, #12]
 800ef4c:	68db      	ldr	r3, [r3, #12]
 800ef4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ef56:	693a      	ldr	r2, [r7, #16]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d203      	bcs.n	800ef66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ef5e:	4a2e      	ldr	r2, [pc, #184]	@ (800f018 <xTaskIncrementTick+0x15c>)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ef64:	e02f      	b.n	800efc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	3304      	adds	r3, #4
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fe fd46 	bl	800d9fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d004      	beq.n	800ef82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	3318      	adds	r3, #24
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fe fd3d 	bl	800d9fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef86:	4b25      	ldr	r3, [pc, #148]	@ (800f01c <xTaskIncrementTick+0x160>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d903      	bls.n	800ef96 <xTaskIncrementTick+0xda>
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef92:	4a22      	ldr	r2, [pc, #136]	@ (800f01c <xTaskIncrementTick+0x160>)
 800ef94:	6013      	str	r3, [r2, #0]
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	4413      	add	r3, r2
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	4a1f      	ldr	r2, [pc, #124]	@ (800f020 <xTaskIncrementTick+0x164>)
 800efa4:	441a      	add	r2, r3
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	3304      	adds	r3, #4
 800efaa:	4619      	mov	r1, r3
 800efac:	4610      	mov	r0, r2
 800efae:	f7fe fcc8 	bl	800d942 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efb6:	4b1b      	ldr	r3, [pc, #108]	@ (800f024 <xTaskIncrementTick+0x168>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d3b8      	bcc.n	800ef32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800efc0:	2301      	movs	r3, #1
 800efc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efc4:	e7b5      	b.n	800ef32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800efc6:	4b17      	ldr	r3, [pc, #92]	@ (800f024 <xTaskIncrementTick+0x168>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efcc:	4914      	ldr	r1, [pc, #80]	@ (800f020 <xTaskIncrementTick+0x164>)
 800efce:	4613      	mov	r3, r2
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	4413      	add	r3, r2
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	440b      	add	r3, r1
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d901      	bls.n	800efe2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800efde:	2301      	movs	r3, #1
 800efe0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800efe2:	4b11      	ldr	r3, [pc, #68]	@ (800f028 <xTaskIncrementTick+0x16c>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d007      	beq.n	800effa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800efea:	2301      	movs	r3, #1
 800efec:	617b      	str	r3, [r7, #20]
 800efee:	e004      	b.n	800effa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eff0:	4b0e      	ldr	r3, [pc, #56]	@ (800f02c <xTaskIncrementTick+0x170>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	3301      	adds	r3, #1
 800eff6:	4a0d      	ldr	r2, [pc, #52]	@ (800f02c <xTaskIncrementTick+0x170>)
 800eff8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800effa:	697b      	ldr	r3, [r7, #20]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3718      	adds	r7, #24
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	240338dc 	.word	0x240338dc
 800f008:	240338b8 	.word	0x240338b8
 800f00c:	2403386c 	.word	0x2403386c
 800f010:	24033870 	.word	0x24033870
 800f014:	240338cc 	.word	0x240338cc
 800f018:	240338d4 	.word	0x240338d4
 800f01c:	240338bc 	.word	0x240338bc
 800f020:	240333e4 	.word	0x240333e4
 800f024:	240333e0 	.word	0x240333e0
 800f028:	240338c8 	.word	0x240338c8
 800f02c:	240338c4 	.word	0x240338c4

0800f030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f030:	b480      	push	{r7}
 800f032:	b085      	sub	sp, #20
 800f034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f036:	4b2b      	ldr	r3, [pc, #172]	@ (800f0e4 <vTaskSwitchContext+0xb4>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d003      	beq.n	800f046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f03e:	4b2a      	ldr	r3, [pc, #168]	@ (800f0e8 <vTaskSwitchContext+0xb8>)
 800f040:	2201      	movs	r2, #1
 800f042:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f044:	e047      	b.n	800f0d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f046:	4b28      	ldr	r3, [pc, #160]	@ (800f0e8 <vTaskSwitchContext+0xb8>)
 800f048:	2200      	movs	r2, #0
 800f04a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f04c:	4b27      	ldr	r3, [pc, #156]	@ (800f0ec <vTaskSwitchContext+0xbc>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	60fb      	str	r3, [r7, #12]
 800f052:	e011      	b.n	800f078 <vTaskSwitchContext+0x48>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d10b      	bne.n	800f072 <vTaskSwitchContext+0x42>
	__asm volatile
 800f05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f05e:	f383 8811 	msr	BASEPRI, r3
 800f062:	f3bf 8f6f 	isb	sy
 800f066:	f3bf 8f4f 	dsb	sy
 800f06a:	607b      	str	r3, [r7, #4]
}
 800f06c:	bf00      	nop
 800f06e:	bf00      	nop
 800f070:	e7fd      	b.n	800f06e <vTaskSwitchContext+0x3e>
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	3b01      	subs	r3, #1
 800f076:	60fb      	str	r3, [r7, #12]
 800f078:	491d      	ldr	r1, [pc, #116]	@ (800f0f0 <vTaskSwitchContext+0xc0>)
 800f07a:	68fa      	ldr	r2, [r7, #12]
 800f07c:	4613      	mov	r3, r2
 800f07e:	009b      	lsls	r3, r3, #2
 800f080:	4413      	add	r3, r2
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	440b      	add	r3, r1
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d0e3      	beq.n	800f054 <vTaskSwitchContext+0x24>
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	4613      	mov	r3, r2
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	4413      	add	r3, r2
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	4a16      	ldr	r2, [pc, #88]	@ (800f0f0 <vTaskSwitchContext+0xc0>)
 800f098:	4413      	add	r3, r2
 800f09a:	60bb      	str	r3, [r7, #8]
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	685a      	ldr	r2, [r3, #4]
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	605a      	str	r2, [r3, #4]
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	685a      	ldr	r2, [r3, #4]
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	3308      	adds	r3, #8
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d104      	bne.n	800f0bc <vTaskSwitchContext+0x8c>
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	685a      	ldr	r2, [r3, #4]
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	605a      	str	r2, [r3, #4]
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	4a0c      	ldr	r2, [pc, #48]	@ (800f0f4 <vTaskSwitchContext+0xc4>)
 800f0c4:	6013      	str	r3, [r2, #0]
 800f0c6:	4a09      	ldr	r2, [pc, #36]	@ (800f0ec <vTaskSwitchContext+0xbc>)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f0cc:	4b09      	ldr	r3, [pc, #36]	@ (800f0f4 <vTaskSwitchContext+0xc4>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	3354      	adds	r3, #84	@ 0x54
 800f0d2:	4a09      	ldr	r2, [pc, #36]	@ (800f0f8 <vTaskSwitchContext+0xc8>)
 800f0d4:	6013      	str	r3, [r2, #0]
}
 800f0d6:	bf00      	nop
 800f0d8:	3714      	adds	r7, #20
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop
 800f0e4:	240338dc 	.word	0x240338dc
 800f0e8:	240338c8 	.word	0x240338c8
 800f0ec:	240338bc 	.word	0x240338bc
 800f0f0:	240333e4 	.word	0x240333e4
 800f0f4:	240333e0 	.word	0x240333e0
 800f0f8:	240013a0 	.word	0x240013a0

0800f0fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d10b      	bne.n	800f124 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f110:	f383 8811 	msr	BASEPRI, r3
 800f114:	f3bf 8f6f 	isb	sy
 800f118:	f3bf 8f4f 	dsb	sy
 800f11c:	60fb      	str	r3, [r7, #12]
}
 800f11e:	bf00      	nop
 800f120:	bf00      	nop
 800f122:	e7fd      	b.n	800f120 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f124:	4b07      	ldr	r3, [pc, #28]	@ (800f144 <vTaskPlaceOnEventList+0x48>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	3318      	adds	r3, #24
 800f12a:	4619      	mov	r1, r3
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7fe fc2c 	bl	800d98a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f132:	2101      	movs	r1, #1
 800f134:	6838      	ldr	r0, [r7, #0]
 800f136:	f000 fdc7 	bl	800fcc8 <prvAddCurrentTaskToDelayedList>
}
 800f13a:	bf00      	nop
 800f13c:	3710      	adds	r7, #16
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	240333e0 	.word	0x240333e0

0800f148 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b086      	sub	sp, #24
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d10b      	bne.n	800f172 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f15e:	f383 8811 	msr	BASEPRI, r3
 800f162:	f3bf 8f6f 	isb	sy
 800f166:	f3bf 8f4f 	dsb	sy
 800f16a:	617b      	str	r3, [r7, #20]
}
 800f16c:	bf00      	nop
 800f16e:	bf00      	nop
 800f170:	e7fd      	b.n	800f16e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f172:	4b0a      	ldr	r3, [pc, #40]	@ (800f19c <vTaskPlaceOnEventListRestricted+0x54>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	3318      	adds	r3, #24
 800f178:	4619      	mov	r1, r3
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f7fe fbe1 	bl	800d942 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d002      	beq.n	800f18c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f18a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f18c:	6879      	ldr	r1, [r7, #4]
 800f18e:	68b8      	ldr	r0, [r7, #8]
 800f190:	f000 fd9a 	bl	800fcc8 <prvAddCurrentTaskToDelayedList>
	}
 800f194:	bf00      	nop
 800f196:	3718      	adds	r7, #24
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	240333e0 	.word	0x240333e0

0800f1a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b086      	sub	sp, #24
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d10b      	bne.n	800f1ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ba:	f383 8811 	msr	BASEPRI, r3
 800f1be:	f3bf 8f6f 	isb	sy
 800f1c2:	f3bf 8f4f 	dsb	sy
 800f1c6:	60fb      	str	r3, [r7, #12]
}
 800f1c8:	bf00      	nop
 800f1ca:	bf00      	nop
 800f1cc:	e7fd      	b.n	800f1ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	3318      	adds	r3, #24
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fe fc12 	bl	800d9fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1d8:	4b1d      	ldr	r3, [pc, #116]	@ (800f250 <xTaskRemoveFromEventList+0xb0>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d11d      	bne.n	800f21c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	3304      	adds	r3, #4
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7fe fc09 	bl	800d9fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1ee:	4b19      	ldr	r3, [pc, #100]	@ (800f254 <xTaskRemoveFromEventList+0xb4>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d903      	bls.n	800f1fe <xTaskRemoveFromEventList+0x5e>
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1fa:	4a16      	ldr	r2, [pc, #88]	@ (800f254 <xTaskRemoveFromEventList+0xb4>)
 800f1fc:	6013      	str	r3, [r2, #0]
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f202:	4613      	mov	r3, r2
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	4413      	add	r3, r2
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	4a13      	ldr	r2, [pc, #76]	@ (800f258 <xTaskRemoveFromEventList+0xb8>)
 800f20c:	441a      	add	r2, r3
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	3304      	adds	r3, #4
 800f212:	4619      	mov	r1, r3
 800f214:	4610      	mov	r0, r2
 800f216:	f7fe fb94 	bl	800d942 <vListInsertEnd>
 800f21a:	e005      	b.n	800f228 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	3318      	adds	r3, #24
 800f220:	4619      	mov	r1, r3
 800f222:	480e      	ldr	r0, [pc, #56]	@ (800f25c <xTaskRemoveFromEventList+0xbc>)
 800f224:	f7fe fb8d 	bl	800d942 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f22c:	4b0c      	ldr	r3, [pc, #48]	@ (800f260 <xTaskRemoveFromEventList+0xc0>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f232:	429a      	cmp	r2, r3
 800f234:	d905      	bls.n	800f242 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f236:	2301      	movs	r3, #1
 800f238:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f23a:	4b0a      	ldr	r3, [pc, #40]	@ (800f264 <xTaskRemoveFromEventList+0xc4>)
 800f23c:	2201      	movs	r2, #1
 800f23e:	601a      	str	r2, [r3, #0]
 800f240:	e001      	b.n	800f246 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f242:	2300      	movs	r3, #0
 800f244:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f246:	697b      	ldr	r3, [r7, #20]
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3718      	adds	r7, #24
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	240338dc 	.word	0x240338dc
 800f254:	240338bc 	.word	0x240338bc
 800f258:	240333e4 	.word	0x240333e4
 800f25c:	24033874 	.word	0x24033874
 800f260:	240333e0 	.word	0x240333e0
 800f264:	240338c8 	.word	0x240338c8

0800f268 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d10b      	bne.n	800f28e <vTaskSetTimeOutState+0x26>
	__asm volatile
 800f276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f27a:	f383 8811 	msr	BASEPRI, r3
 800f27e:	f3bf 8f6f 	isb	sy
 800f282:	f3bf 8f4f 	dsb	sy
 800f286:	60fb      	str	r3, [r7, #12]
}
 800f288:	bf00      	nop
 800f28a:	bf00      	nop
 800f28c:	e7fd      	b.n	800f28a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800f28e:	f001 f9fb 	bl	8010688 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f292:	4b07      	ldr	r3, [pc, #28]	@ (800f2b0 <vTaskSetTimeOutState+0x48>)
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f29a:	4b06      	ldr	r3, [pc, #24]	@ (800f2b4 <vTaskSetTimeOutState+0x4c>)
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f2a2:	f001 fa23 	bl	80106ec <vPortExitCritical>
}
 800f2a6:	bf00      	nop
 800f2a8:	3710      	adds	r7, #16
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	240338cc 	.word	0x240338cc
 800f2b4:	240338b8 	.word	0x240338b8

0800f2b8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f2c0:	4b06      	ldr	r3, [pc, #24]	@ (800f2dc <vTaskInternalSetTimeOutState+0x24>)
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f2c8:	4b05      	ldr	r3, [pc, #20]	@ (800f2e0 <vTaskInternalSetTimeOutState+0x28>)
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	605a      	str	r2, [r3, #4]
}
 800f2d0:	bf00      	nop
 800f2d2:	370c      	adds	r7, #12
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr
 800f2dc:	240338cc 	.word	0x240338cc
 800f2e0:	240338b8 	.word	0x240338b8

0800f2e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b088      	sub	sp, #32
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d10b      	bne.n	800f30c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2f8:	f383 8811 	msr	BASEPRI, r3
 800f2fc:	f3bf 8f6f 	isb	sy
 800f300:	f3bf 8f4f 	dsb	sy
 800f304:	613b      	str	r3, [r7, #16]
}
 800f306:	bf00      	nop
 800f308:	bf00      	nop
 800f30a:	e7fd      	b.n	800f308 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d10b      	bne.n	800f32a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f316:	f383 8811 	msr	BASEPRI, r3
 800f31a:	f3bf 8f6f 	isb	sy
 800f31e:	f3bf 8f4f 	dsb	sy
 800f322:	60fb      	str	r3, [r7, #12]
}
 800f324:	bf00      	nop
 800f326:	bf00      	nop
 800f328:	e7fd      	b.n	800f326 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f32a:	f001 f9ad 	bl	8010688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f32e:	4b1d      	ldr	r3, [pc, #116]	@ (800f3a4 <xTaskCheckForTimeOut+0xc0>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	69ba      	ldr	r2, [r7, #24]
 800f33a:	1ad3      	subs	r3, r2, r3
 800f33c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f346:	d102      	bne.n	800f34e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f348:	2300      	movs	r3, #0
 800f34a:	61fb      	str	r3, [r7, #28]
 800f34c:	e023      	b.n	800f396 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	4b15      	ldr	r3, [pc, #84]	@ (800f3a8 <xTaskCheckForTimeOut+0xc4>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	429a      	cmp	r2, r3
 800f358:	d007      	beq.n	800f36a <xTaskCheckForTimeOut+0x86>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	69ba      	ldr	r2, [r7, #24]
 800f360:	429a      	cmp	r2, r3
 800f362:	d302      	bcc.n	800f36a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f364:	2301      	movs	r3, #1
 800f366:	61fb      	str	r3, [r7, #28]
 800f368:	e015      	b.n	800f396 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	697a      	ldr	r2, [r7, #20]
 800f370:	429a      	cmp	r2, r3
 800f372:	d20b      	bcs.n	800f38c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	1ad2      	subs	r2, r2, r3
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f7ff ff99 	bl	800f2b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f386:	2300      	movs	r3, #0
 800f388:	61fb      	str	r3, [r7, #28]
 800f38a:	e004      	b.n	800f396 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	2200      	movs	r2, #0
 800f390:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f392:	2301      	movs	r3, #1
 800f394:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f396:	f001 f9a9 	bl	80106ec <vPortExitCritical>

	return xReturn;
 800f39a:	69fb      	ldr	r3, [r7, #28]
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3720      	adds	r7, #32
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	240338b8 	.word	0x240338b8
 800f3a8:	240338cc 	.word	0x240338cc

0800f3ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f3b0:	4b03      	ldr	r3, [pc, #12]	@ (800f3c0 <vTaskMissedYield+0x14>)
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	601a      	str	r2, [r3, #0]
}
 800f3b6:	bf00      	nop
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr
 800f3c0:	240338c8 	.word	0x240338c8

0800f3c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f3cc:	f000 f852 	bl	800f474 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f3d0:	4b06      	ldr	r3, [pc, #24]	@ (800f3ec <prvIdleTask+0x28>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d9f9      	bls.n	800f3cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800f3d8:	4b05      	ldr	r3, [pc, #20]	@ (800f3f0 <prvIdleTask+0x2c>)
 800f3da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3de:	601a      	str	r2, [r3, #0]
 800f3e0:	f3bf 8f4f 	dsb	sy
 800f3e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f3e8:	e7f0      	b.n	800f3cc <prvIdleTask+0x8>
 800f3ea:	bf00      	nop
 800f3ec:	240333e4 	.word	0x240333e4
 800f3f0:	e000ed04 	.word	0xe000ed04

0800f3f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	607b      	str	r3, [r7, #4]
 800f3fe:	e00c      	b.n	800f41a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	4613      	mov	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	4413      	add	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4a12      	ldr	r2, [pc, #72]	@ (800f454 <prvInitialiseTaskLists+0x60>)
 800f40c:	4413      	add	r3, r2
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fe fa6a 	bl	800d8e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	3301      	adds	r3, #1
 800f418:	607b      	str	r3, [r7, #4]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2b37      	cmp	r3, #55	@ 0x37
 800f41e:	d9ef      	bls.n	800f400 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f420:	480d      	ldr	r0, [pc, #52]	@ (800f458 <prvInitialiseTaskLists+0x64>)
 800f422:	f7fe fa61 	bl	800d8e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f426:	480d      	ldr	r0, [pc, #52]	@ (800f45c <prvInitialiseTaskLists+0x68>)
 800f428:	f7fe fa5e 	bl	800d8e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f42c:	480c      	ldr	r0, [pc, #48]	@ (800f460 <prvInitialiseTaskLists+0x6c>)
 800f42e:	f7fe fa5b 	bl	800d8e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f432:	480c      	ldr	r0, [pc, #48]	@ (800f464 <prvInitialiseTaskLists+0x70>)
 800f434:	f7fe fa58 	bl	800d8e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f438:	480b      	ldr	r0, [pc, #44]	@ (800f468 <prvInitialiseTaskLists+0x74>)
 800f43a:	f7fe fa55 	bl	800d8e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f43e:	4b0b      	ldr	r3, [pc, #44]	@ (800f46c <prvInitialiseTaskLists+0x78>)
 800f440:	4a05      	ldr	r2, [pc, #20]	@ (800f458 <prvInitialiseTaskLists+0x64>)
 800f442:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f444:	4b0a      	ldr	r3, [pc, #40]	@ (800f470 <prvInitialiseTaskLists+0x7c>)
 800f446:	4a05      	ldr	r2, [pc, #20]	@ (800f45c <prvInitialiseTaskLists+0x68>)
 800f448:	601a      	str	r2, [r3, #0]
}
 800f44a:	bf00      	nop
 800f44c:	3708      	adds	r7, #8
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	240333e4 	.word	0x240333e4
 800f458:	24033844 	.word	0x24033844
 800f45c:	24033858 	.word	0x24033858
 800f460:	24033874 	.word	0x24033874
 800f464:	24033888 	.word	0x24033888
 800f468:	240338a0 	.word	0x240338a0
 800f46c:	2403386c 	.word	0x2403386c
 800f470:	24033870 	.word	0x24033870

0800f474 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f47a:	e019      	b.n	800f4b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f47c:	f001 f904 	bl	8010688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f480:	4b10      	ldr	r3, [pc, #64]	@ (800f4c4 <prvCheckTasksWaitingTermination+0x50>)
 800f482:	68db      	ldr	r3, [r3, #12]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	3304      	adds	r3, #4
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fe fab5 	bl	800d9fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f492:	4b0d      	ldr	r3, [pc, #52]	@ (800f4c8 <prvCheckTasksWaitingTermination+0x54>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	3b01      	subs	r3, #1
 800f498:	4a0b      	ldr	r2, [pc, #44]	@ (800f4c8 <prvCheckTasksWaitingTermination+0x54>)
 800f49a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f49c:	4b0b      	ldr	r3, [pc, #44]	@ (800f4cc <prvCheckTasksWaitingTermination+0x58>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	3b01      	subs	r3, #1
 800f4a2:	4a0a      	ldr	r2, [pc, #40]	@ (800f4cc <prvCheckTasksWaitingTermination+0x58>)
 800f4a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f4a6:	f001 f921 	bl	80106ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 f810 	bl	800f4d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f4b0:	4b06      	ldr	r3, [pc, #24]	@ (800f4cc <prvCheckTasksWaitingTermination+0x58>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d1e1      	bne.n	800f47c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f4b8:	bf00      	nop
 800f4ba:	bf00      	nop
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	24033888 	.word	0x24033888
 800f4c8:	240338b4 	.word	0x240338b4
 800f4cc:	2403389c 	.word	0x2403389c

0800f4d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	3354      	adds	r3, #84	@ 0x54
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f011 fa27 	bl	8020930 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d108      	bne.n	800f4fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f001 fab9 	bl	8010a68 <vPortFree>
				vPortFree( pxTCB );
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f001 fab6 	bl	8010a68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f4fc:	e019      	b.n	800f532 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f504:	2b01      	cmp	r3, #1
 800f506:	d103      	bne.n	800f510 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f001 faad 	bl	8010a68 <vPortFree>
	}
 800f50e:	e010      	b.n	800f532 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f516:	2b02      	cmp	r3, #2
 800f518:	d00b      	beq.n	800f532 <prvDeleteTCB+0x62>
	__asm volatile
 800f51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	60fb      	str	r3, [r7, #12]
}
 800f52c:	bf00      	nop
 800f52e:	bf00      	nop
 800f530:	e7fd      	b.n	800f52e <prvDeleteTCB+0x5e>
	}
 800f532:	bf00      	nop
 800f534:	3710      	adds	r7, #16
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
	...

0800f53c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f53c:	b480      	push	{r7}
 800f53e:	b083      	sub	sp, #12
 800f540:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f542:	4b0c      	ldr	r3, [pc, #48]	@ (800f574 <prvResetNextTaskUnblockTime+0x38>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d104      	bne.n	800f556 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f54c:	4b0a      	ldr	r3, [pc, #40]	@ (800f578 <prvResetNextTaskUnblockTime+0x3c>)
 800f54e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f552:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f554:	e008      	b.n	800f568 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f556:	4b07      	ldr	r3, [pc, #28]	@ (800f574 <prvResetNextTaskUnblockTime+0x38>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	4a04      	ldr	r2, [pc, #16]	@ (800f578 <prvResetNextTaskUnblockTime+0x3c>)
 800f566:	6013      	str	r3, [r2, #0]
}
 800f568:	bf00      	nop
 800f56a:	370c      	adds	r7, #12
 800f56c:	46bd      	mov	sp, r7
 800f56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f572:	4770      	bx	lr
 800f574:	2403386c 	.word	0x2403386c
 800f578:	240338d4 	.word	0x240338d4

0800f57c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f57c:	b480      	push	{r7}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f582:	4b05      	ldr	r3, [pc, #20]	@ (800f598 <xTaskGetCurrentTaskHandle+0x1c>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f588:	687b      	ldr	r3, [r7, #4]
	}
 800f58a:	4618      	mov	r0, r3
 800f58c:	370c      	adds	r7, #12
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr
 800f596:	bf00      	nop
 800f598:	240333e0 	.word	0x240333e0

0800f59c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f59c:	b480      	push	{r7}
 800f59e:	b083      	sub	sp, #12
 800f5a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f5a2:	4b0b      	ldr	r3, [pc, #44]	@ (800f5d0 <xTaskGetSchedulerState+0x34>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d102      	bne.n	800f5b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	607b      	str	r3, [r7, #4]
 800f5ae:	e008      	b.n	800f5c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f5b0:	4b08      	ldr	r3, [pc, #32]	@ (800f5d4 <xTaskGetSchedulerState+0x38>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d102      	bne.n	800f5be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f5b8:	2302      	movs	r3, #2
 800f5ba:	607b      	str	r3, [r7, #4]
 800f5bc:	e001      	b.n	800f5c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f5c2:	687b      	ldr	r3, [r7, #4]
	}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr
 800f5d0:	240338c0 	.word	0x240338c0
 800f5d4:	240338dc 	.word	0x240338dc

0800f5d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d051      	beq.n	800f692 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5f2:	4b2a      	ldr	r3, [pc, #168]	@ (800f69c <xTaskPriorityInherit+0xc4>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d241      	bcs.n	800f680 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	699b      	ldr	r3, [r3, #24]
 800f600:	2b00      	cmp	r3, #0
 800f602:	db06      	blt.n	800f612 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f604:	4b25      	ldr	r3, [pc, #148]	@ (800f69c <xTaskPriorityInherit+0xc4>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f60a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	6959      	ldr	r1, [r3, #20]
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f61a:	4613      	mov	r3, r2
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	4413      	add	r3, r2
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	4a1f      	ldr	r2, [pc, #124]	@ (800f6a0 <xTaskPriorityInherit+0xc8>)
 800f624:	4413      	add	r3, r2
 800f626:	4299      	cmp	r1, r3
 800f628:	d122      	bne.n	800f670 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	3304      	adds	r3, #4
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fe f9e4 	bl	800d9fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f634:	4b19      	ldr	r3, [pc, #100]	@ (800f69c <xTaskPriorityInherit+0xc4>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f642:	4b18      	ldr	r3, [pc, #96]	@ (800f6a4 <xTaskPriorityInherit+0xcc>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	429a      	cmp	r2, r3
 800f648:	d903      	bls.n	800f652 <xTaskPriorityInherit+0x7a>
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f64e:	4a15      	ldr	r2, [pc, #84]	@ (800f6a4 <xTaskPriorityInherit+0xcc>)
 800f650:	6013      	str	r3, [r2, #0]
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f656:	4613      	mov	r3, r2
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	4413      	add	r3, r2
 800f65c:	009b      	lsls	r3, r3, #2
 800f65e:	4a10      	ldr	r2, [pc, #64]	@ (800f6a0 <xTaskPriorityInherit+0xc8>)
 800f660:	441a      	add	r2, r3
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	3304      	adds	r3, #4
 800f666:	4619      	mov	r1, r3
 800f668:	4610      	mov	r0, r2
 800f66a:	f7fe f96a 	bl	800d942 <vListInsertEnd>
 800f66e:	e004      	b.n	800f67a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f670:	4b0a      	ldr	r3, [pc, #40]	@ (800f69c <xTaskPriorityInherit+0xc4>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f67a:	2301      	movs	r3, #1
 800f67c:	60fb      	str	r3, [r7, #12]
 800f67e:	e008      	b.n	800f692 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f684:	4b05      	ldr	r3, [pc, #20]	@ (800f69c <xTaskPriorityInherit+0xc4>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d201      	bcs.n	800f692 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f68e:	2301      	movs	r3, #1
 800f690:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f692:	68fb      	ldr	r3, [r7, #12]
	}
 800f694:	4618      	mov	r0, r3
 800f696:	3710      	adds	r7, #16
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	240333e0 	.word	0x240333e0
 800f6a0:	240333e4 	.word	0x240333e4
 800f6a4:	240338bc 	.word	0x240338bc

0800f6a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b086      	sub	sp, #24
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d058      	beq.n	800f770 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f6be:	4b2f      	ldr	r3, [pc, #188]	@ (800f77c <xTaskPriorityDisinherit+0xd4>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	693a      	ldr	r2, [r7, #16]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d00b      	beq.n	800f6e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6cc:	f383 8811 	msr	BASEPRI, r3
 800f6d0:	f3bf 8f6f 	isb	sy
 800f6d4:	f3bf 8f4f 	dsb	sy
 800f6d8:	60fb      	str	r3, [r7, #12]
}
 800f6da:	bf00      	nop
 800f6dc:	bf00      	nop
 800f6de:	e7fd      	b.n	800f6dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d10b      	bne.n	800f700 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6ec:	f383 8811 	msr	BASEPRI, r3
 800f6f0:	f3bf 8f6f 	isb	sy
 800f6f4:	f3bf 8f4f 	dsb	sy
 800f6f8:	60bb      	str	r3, [r7, #8]
}
 800f6fa:	bf00      	nop
 800f6fc:	bf00      	nop
 800f6fe:	e7fd      	b.n	800f6fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f704:	1e5a      	subs	r2, r3, #1
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f712:	429a      	cmp	r2, r3
 800f714:	d02c      	beq.n	800f770 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d128      	bne.n	800f770 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	3304      	adds	r3, #4
 800f722:	4618      	mov	r0, r3
 800f724:	f7fe f96a 	bl	800d9fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f734:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f740:	4b0f      	ldr	r3, [pc, #60]	@ (800f780 <xTaskPriorityDisinherit+0xd8>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	429a      	cmp	r2, r3
 800f746:	d903      	bls.n	800f750 <xTaskPriorityDisinherit+0xa8>
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f74c:	4a0c      	ldr	r2, [pc, #48]	@ (800f780 <xTaskPriorityDisinherit+0xd8>)
 800f74e:	6013      	str	r3, [r2, #0]
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f754:	4613      	mov	r3, r2
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	4413      	add	r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	4a09      	ldr	r2, [pc, #36]	@ (800f784 <xTaskPriorityDisinherit+0xdc>)
 800f75e:	441a      	add	r2, r3
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	3304      	adds	r3, #4
 800f764:	4619      	mov	r1, r3
 800f766:	4610      	mov	r0, r2
 800f768:	f7fe f8eb 	bl	800d942 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f76c:	2301      	movs	r3, #1
 800f76e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f770:	697b      	ldr	r3, [r7, #20]
	}
 800f772:	4618      	mov	r0, r3
 800f774:	3718      	adds	r7, #24
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	240333e0 	.word	0x240333e0
 800f780:	240338bc 	.word	0x240338bc
 800f784:	240333e4 	.word	0x240333e4

0800f788 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b088      	sub	sp, #32
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f796:	2301      	movs	r3, #1
 800f798:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d06c      	beq.n	800f87a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d10b      	bne.n	800f7c0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ac:	f383 8811 	msr	BASEPRI, r3
 800f7b0:	f3bf 8f6f 	isb	sy
 800f7b4:	f3bf 8f4f 	dsb	sy
 800f7b8:	60fb      	str	r3, [r7, #12]
}
 800f7ba:	bf00      	nop
 800f7bc:	bf00      	nop
 800f7be:	e7fd      	b.n	800f7bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7c4:	683a      	ldr	r2, [r7, #0]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d902      	bls.n	800f7d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	61fb      	str	r3, [r7, #28]
 800f7ce:	e002      	b.n	800f7d6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f7d0:	69bb      	ldr	r3, [r7, #24]
 800f7d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7d4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f7d6:	69bb      	ldr	r3, [r7, #24]
 800f7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7da:	69fa      	ldr	r2, [r7, #28]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d04c      	beq.n	800f87a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7e4:	697a      	ldr	r2, [r7, #20]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d147      	bne.n	800f87a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f7ea:	4b26      	ldr	r3, [pc, #152]	@ (800f884 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	69ba      	ldr	r2, [r7, #24]
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d10b      	bne.n	800f80c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7f8:	f383 8811 	msr	BASEPRI, r3
 800f7fc:	f3bf 8f6f 	isb	sy
 800f800:	f3bf 8f4f 	dsb	sy
 800f804:	60bb      	str	r3, [r7, #8]
}
 800f806:	bf00      	nop
 800f808:	bf00      	nop
 800f80a:	e7fd      	b.n	800f808 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f80c:	69bb      	ldr	r3, [r7, #24]
 800f80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f810:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f812:	69bb      	ldr	r3, [r7, #24]
 800f814:	69fa      	ldr	r2, [r7, #28]
 800f816:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f818:	69bb      	ldr	r3, [r7, #24]
 800f81a:	699b      	ldr	r3, [r3, #24]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	db04      	blt.n	800f82a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	6959      	ldr	r1, [r3, #20]
 800f82e:	693a      	ldr	r2, [r7, #16]
 800f830:	4613      	mov	r3, r2
 800f832:	009b      	lsls	r3, r3, #2
 800f834:	4413      	add	r3, r2
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	4a13      	ldr	r2, [pc, #76]	@ (800f888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f83a:	4413      	add	r3, r2
 800f83c:	4299      	cmp	r1, r3
 800f83e:	d11c      	bne.n	800f87a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	3304      	adds	r3, #4
 800f844:	4618      	mov	r0, r3
 800f846:	f7fe f8d9 	bl	800d9fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f84e:	4b0f      	ldr	r3, [pc, #60]	@ (800f88c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	429a      	cmp	r2, r3
 800f854:	d903      	bls.n	800f85e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f85a:	4a0c      	ldr	r2, [pc, #48]	@ (800f88c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f85c:	6013      	str	r3, [r2, #0]
 800f85e:	69bb      	ldr	r3, [r7, #24]
 800f860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f862:	4613      	mov	r3, r2
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	4413      	add	r3, r2
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	4a07      	ldr	r2, [pc, #28]	@ (800f888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f86c:	441a      	add	r2, r3
 800f86e:	69bb      	ldr	r3, [r7, #24]
 800f870:	3304      	adds	r3, #4
 800f872:	4619      	mov	r1, r3
 800f874:	4610      	mov	r0, r2
 800f876:	f7fe f864 	bl	800d942 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f87a:	bf00      	nop
 800f87c:	3720      	adds	r7, #32
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	240333e0 	.word	0x240333e0
 800f888:	240333e4 	.word	0x240333e4
 800f88c:	240338bc 	.word	0x240338bc

0800f890 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f890:	b480      	push	{r7}
 800f892:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f894:	4b07      	ldr	r3, [pc, #28]	@ (800f8b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d004      	beq.n	800f8a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f89c:	4b05      	ldr	r3, [pc, #20]	@ (800f8b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f8a2:	3201      	adds	r2, #1
 800f8a4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f8a6:	4b03      	ldr	r3, [pc, #12]	@ (800f8b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
	}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b2:	4770      	bx	lr
 800f8b4:	240333e0 	.word	0x240333e0

0800f8b8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b086      	sub	sp, #24
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	607a      	str	r2, [r7, #4]
 800f8c4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f8c6:	f000 fedf 	bl	8010688 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f8ca:	4b29      	ldr	r3, [pc, #164]	@ (800f970 <xTaskNotifyWait+0xb8>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d01c      	beq.n	800f912 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f8d8:	4b25      	ldr	r3, [pc, #148]	@ (800f970 <xTaskNotifyWait+0xb8>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	43d2      	mvns	r2, r2
 800f8e4:	400a      	ands	r2, r1
 800f8e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f8ea:	4b21      	ldr	r3, [pc, #132]	@ (800f970 <xTaskNotifyWait+0xb8>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00b      	beq.n	800f912 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f8fa:	2101      	movs	r1, #1
 800f8fc:	6838      	ldr	r0, [r7, #0]
 800f8fe:	f000 f9e3 	bl	800fcc8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f902:	4b1c      	ldr	r3, [pc, #112]	@ (800f974 <xTaskNotifyWait+0xbc>)
 800f904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f908:	601a      	str	r2, [r3, #0]
 800f90a:	f3bf 8f4f 	dsb	sy
 800f90e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f912:	f000 feeb 	bl	80106ec <vPortExitCritical>

		taskENTER_CRITICAL();
 800f916:	f000 feb7 	bl	8010688 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d005      	beq.n	800f92c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f920:	4b13      	ldr	r3, [pc, #76]	@ (800f970 <xTaskNotifyWait+0xb8>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f92c:	4b10      	ldr	r3, [pc, #64]	@ (800f970 <xTaskNotifyWait+0xb8>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f934:	b2db      	uxtb	r3, r3
 800f936:	2b02      	cmp	r3, #2
 800f938:	d002      	beq.n	800f940 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f93a:	2300      	movs	r3, #0
 800f93c:	617b      	str	r3, [r7, #20]
 800f93e:	e00a      	b.n	800f956 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f940:	4b0b      	ldr	r3, [pc, #44]	@ (800f970 <xTaskNotifyWait+0xb8>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f948:	68ba      	ldr	r2, [r7, #8]
 800f94a:	43d2      	mvns	r2, r2
 800f94c:	400a      	ands	r2, r1
 800f94e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800f952:	2301      	movs	r3, #1
 800f954:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f956:	4b06      	ldr	r3, [pc, #24]	@ (800f970 <xTaskNotifyWait+0xb8>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	2200      	movs	r2, #0
 800f95c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f960:	f000 fec4 	bl	80106ec <vPortExitCritical>

		return xReturn;
 800f964:	697b      	ldr	r3, [r7, #20]
	}
 800f966:	4618      	mov	r0, r3
 800f968:	3718      	adds	r7, #24
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	240333e0 	.word	0x240333e0
 800f974:	e000ed04 	.word	0xe000ed04

0800f978 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b08a      	sub	sp, #40	@ 0x28
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	603b      	str	r3, [r7, #0]
 800f984:	4613      	mov	r3, r2
 800f986:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f988:	2301      	movs	r3, #1
 800f98a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d10b      	bne.n	800f9aa <xTaskGenericNotify+0x32>
	__asm volatile
 800f992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f996:	f383 8811 	msr	BASEPRI, r3
 800f99a:	f3bf 8f6f 	isb	sy
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	61bb      	str	r3, [r7, #24]
}
 800f9a4:	bf00      	nop
 800f9a6:	bf00      	nop
 800f9a8:	e7fd      	b.n	800f9a6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f9ae:	f000 fe6b 	bl	8010688 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d004      	beq.n	800f9c2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f9b8:	6a3b      	ldr	r3, [r7, #32]
 800f9ba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f9c2:	6a3b      	ldr	r3, [r7, #32]
 800f9c4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f9c8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f9ca:	6a3b      	ldr	r3, [r7, #32]
 800f9cc:	2202      	movs	r2, #2
 800f9ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f9d2:	79fb      	ldrb	r3, [r7, #7]
 800f9d4:	2b04      	cmp	r3, #4
 800f9d6:	d82e      	bhi.n	800fa36 <xTaskGenericNotify+0xbe>
 800f9d8:	a201      	add	r2, pc, #4	@ (adr r2, 800f9e0 <xTaskGenericNotify+0x68>)
 800f9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9de:	bf00      	nop
 800f9e0:	0800fa5b 	.word	0x0800fa5b
 800f9e4:	0800f9f5 	.word	0x0800f9f5
 800f9e8:	0800fa07 	.word	0x0800fa07
 800f9ec:	0800fa17 	.word	0x0800fa17
 800f9f0:	0800fa21 	.word	0x0800fa21
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f9f4:	6a3b      	ldr	r3, [r7, #32]
 800f9f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	431a      	orrs	r2, r3
 800f9fe:	6a3b      	ldr	r3, [r7, #32]
 800fa00:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800fa04:	e02c      	b.n	800fa60 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fa06:	6a3b      	ldr	r3, [r7, #32]
 800fa08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fa0c:	1c5a      	adds	r2, r3, #1
 800fa0e:	6a3b      	ldr	r3, [r7, #32]
 800fa10:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800fa14:	e024      	b.n	800fa60 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fa16:	6a3b      	ldr	r3, [r7, #32]
 800fa18:	68ba      	ldr	r2, [r7, #8]
 800fa1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800fa1e:	e01f      	b.n	800fa60 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fa20:	7ffb      	ldrb	r3, [r7, #31]
 800fa22:	2b02      	cmp	r3, #2
 800fa24:	d004      	beq.n	800fa30 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fa26:	6a3b      	ldr	r3, [r7, #32]
 800fa28:	68ba      	ldr	r2, [r7, #8]
 800fa2a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fa2e:	e017      	b.n	800fa60 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800fa30:	2300      	movs	r3, #0
 800fa32:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800fa34:	e014      	b.n	800fa60 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fa36:	6a3b      	ldr	r3, [r7, #32]
 800fa38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fa3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa40:	d00d      	beq.n	800fa5e <xTaskGenericNotify+0xe6>
	__asm volatile
 800fa42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa46:	f383 8811 	msr	BASEPRI, r3
 800fa4a:	f3bf 8f6f 	isb	sy
 800fa4e:	f3bf 8f4f 	dsb	sy
 800fa52:	617b      	str	r3, [r7, #20]
}
 800fa54:	bf00      	nop
 800fa56:	bf00      	nop
 800fa58:	e7fd      	b.n	800fa56 <xTaskGenericNotify+0xde>
					break;
 800fa5a:	bf00      	nop
 800fa5c:	e000      	b.n	800fa60 <xTaskGenericNotify+0xe8>

					break;
 800fa5e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fa60:	7ffb      	ldrb	r3, [r7, #31]
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d13b      	bne.n	800fade <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa66:	6a3b      	ldr	r3, [r7, #32]
 800fa68:	3304      	adds	r3, #4
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fd ffc6 	bl	800d9fc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fa70:	6a3b      	ldr	r3, [r7, #32]
 800fa72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa74:	4b1d      	ldr	r3, [pc, #116]	@ (800faec <xTaskGenericNotify+0x174>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d903      	bls.n	800fa84 <xTaskGenericNotify+0x10c>
 800fa7c:	6a3b      	ldr	r3, [r7, #32]
 800fa7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa80:	4a1a      	ldr	r2, [pc, #104]	@ (800faec <xTaskGenericNotify+0x174>)
 800fa82:	6013      	str	r3, [r2, #0]
 800fa84:	6a3b      	ldr	r3, [r7, #32]
 800fa86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa88:	4613      	mov	r3, r2
 800fa8a:	009b      	lsls	r3, r3, #2
 800fa8c:	4413      	add	r3, r2
 800fa8e:	009b      	lsls	r3, r3, #2
 800fa90:	4a17      	ldr	r2, [pc, #92]	@ (800faf0 <xTaskGenericNotify+0x178>)
 800fa92:	441a      	add	r2, r3
 800fa94:	6a3b      	ldr	r3, [r7, #32]
 800fa96:	3304      	adds	r3, #4
 800fa98:	4619      	mov	r1, r3
 800fa9a:	4610      	mov	r0, r2
 800fa9c:	f7fd ff51 	bl	800d942 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800faa0:	6a3b      	ldr	r3, [r7, #32]
 800faa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d00b      	beq.n	800fac0 <xTaskGenericNotify+0x148>
	__asm volatile
 800faa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faac:	f383 8811 	msr	BASEPRI, r3
 800fab0:	f3bf 8f6f 	isb	sy
 800fab4:	f3bf 8f4f 	dsb	sy
 800fab8:	613b      	str	r3, [r7, #16]
}
 800faba:	bf00      	nop
 800fabc:	bf00      	nop
 800fabe:	e7fd      	b.n	800fabc <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fac0:	6a3b      	ldr	r3, [r7, #32]
 800fac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fac4:	4b0b      	ldr	r3, [pc, #44]	@ (800faf4 <xTaskGenericNotify+0x17c>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faca:	429a      	cmp	r2, r3
 800facc:	d907      	bls.n	800fade <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800face:	4b0a      	ldr	r3, [pc, #40]	@ (800faf8 <xTaskGenericNotify+0x180>)
 800fad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fad4:	601a      	str	r2, [r3, #0]
 800fad6:	f3bf 8f4f 	dsb	sy
 800fada:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fade:	f000 fe05 	bl	80106ec <vPortExitCritical>

		return xReturn;
 800fae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3728      	adds	r7, #40	@ 0x28
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}
 800faec:	240338bc 	.word	0x240338bc
 800faf0:	240333e4 	.word	0x240333e4
 800faf4:	240333e0 	.word	0x240333e0
 800faf8:	e000ed04 	.word	0xe000ed04

0800fafc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b08e      	sub	sp, #56	@ 0x38
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	603b      	str	r3, [r7, #0]
 800fb08:	4613      	mov	r3, r2
 800fb0a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d10b      	bne.n	800fb2e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800fb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb1a:	f383 8811 	msr	BASEPRI, r3
 800fb1e:	f3bf 8f6f 	isb	sy
 800fb22:	f3bf 8f4f 	dsb	sy
 800fb26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fb28:	bf00      	nop
 800fb2a:	bf00      	nop
 800fb2c:	e7fd      	b.n	800fb2a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb2e:	f000 fe8b 	bl	8010848 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800fb36:	f3ef 8211 	mrs	r2, BASEPRI
 800fb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb3e:	f383 8811 	msr	BASEPRI, r3
 800fb42:	f3bf 8f6f 	isb	sy
 800fb46:	f3bf 8f4f 	dsb	sy
 800fb4a:	623a      	str	r2, [r7, #32]
 800fb4c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800fb4e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fb50:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d004      	beq.n	800fb62 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fb58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb5a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb64:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800fb68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fb6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb6e:	2202      	movs	r2, #2
 800fb70:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800fb74:	79fb      	ldrb	r3, [r7, #7]
 800fb76:	2b04      	cmp	r3, #4
 800fb78:	d82e      	bhi.n	800fbd8 <xTaskGenericNotifyFromISR+0xdc>
 800fb7a:	a201      	add	r2, pc, #4	@ (adr r2, 800fb80 <xTaskGenericNotifyFromISR+0x84>)
 800fb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb80:	0800fbfd 	.word	0x0800fbfd
 800fb84:	0800fb95 	.word	0x0800fb95
 800fb88:	0800fba7 	.word	0x0800fba7
 800fb8c:	0800fbb7 	.word	0x0800fbb7
 800fb90:	0800fbc1 	.word	0x0800fbc1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb96:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	431a      	orrs	r2, r3
 800fb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800fba4:	e02d      	b.n	800fc02 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fbac:	1c5a      	adds	r2, r3, #1
 800fbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800fbb4:	e025      	b.n	800fc02 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb8:	68ba      	ldr	r2, [r7, #8]
 800fbba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800fbbe:	e020      	b.n	800fc02 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fbc0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fbc4:	2b02      	cmp	r3, #2
 800fbc6:	d004      	beq.n	800fbd2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbca:	68ba      	ldr	r2, [r7, #8]
 800fbcc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fbd0:	e017      	b.n	800fc02 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800fbd6:	e014      	b.n	800fc02 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fbde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fbe2:	d00d      	beq.n	800fc00 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800fbe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbe8:	f383 8811 	msr	BASEPRI, r3
 800fbec:	f3bf 8f6f 	isb	sy
 800fbf0:	f3bf 8f4f 	dsb	sy
 800fbf4:	61bb      	str	r3, [r7, #24]
}
 800fbf6:	bf00      	nop
 800fbf8:	bf00      	nop
 800fbfa:	e7fd      	b.n	800fbf8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800fbfc:	bf00      	nop
 800fbfe:	e000      	b.n	800fc02 <xTaskGenericNotifyFromISR+0x106>
					break;
 800fc00:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fc02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	d147      	bne.n	800fc9a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d00b      	beq.n	800fc2a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800fc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc16:	f383 8811 	msr	BASEPRI, r3
 800fc1a:	f3bf 8f6f 	isb	sy
 800fc1e:	f3bf 8f4f 	dsb	sy
 800fc22:	617b      	str	r3, [r7, #20]
}
 800fc24:	bf00      	nop
 800fc26:	bf00      	nop
 800fc28:	e7fd      	b.n	800fc26 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc2a:	4b21      	ldr	r3, [pc, #132]	@ (800fcb0 <xTaskGenericNotifyFromISR+0x1b4>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d11d      	bne.n	800fc6e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc34:	3304      	adds	r3, #4
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7fd fee0 	bl	800d9fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc40:	4b1c      	ldr	r3, [pc, #112]	@ (800fcb4 <xTaskGenericNotifyFromISR+0x1b8>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d903      	bls.n	800fc50 <xTaskGenericNotifyFromISR+0x154>
 800fc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc4c:	4a19      	ldr	r2, [pc, #100]	@ (800fcb4 <xTaskGenericNotifyFromISR+0x1b8>)
 800fc4e:	6013      	str	r3, [r2, #0]
 800fc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc54:	4613      	mov	r3, r2
 800fc56:	009b      	lsls	r3, r3, #2
 800fc58:	4413      	add	r3, r2
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	4a16      	ldr	r2, [pc, #88]	@ (800fcb8 <xTaskGenericNotifyFromISR+0x1bc>)
 800fc5e:	441a      	add	r2, r3
 800fc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc62:	3304      	adds	r3, #4
 800fc64:	4619      	mov	r1, r3
 800fc66:	4610      	mov	r0, r2
 800fc68:	f7fd fe6b 	bl	800d942 <vListInsertEnd>
 800fc6c:	e005      	b.n	800fc7a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800fc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc70:	3318      	adds	r3, #24
 800fc72:	4619      	mov	r1, r3
 800fc74:	4811      	ldr	r0, [pc, #68]	@ (800fcbc <xTaskGenericNotifyFromISR+0x1c0>)
 800fc76:	f7fd fe64 	bl	800d942 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc7e:	4b10      	ldr	r3, [pc, #64]	@ (800fcc0 <xTaskGenericNotifyFromISR+0x1c4>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d908      	bls.n	800fc9a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800fc88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d002      	beq.n	800fc94 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800fc8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc90:	2201      	movs	r2, #1
 800fc92:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800fc94:	4b0b      	ldr	r3, [pc, #44]	@ (800fcc4 <xTaskGenericNotifyFromISR+0x1c8>)
 800fc96:	2201      	movs	r2, #1
 800fc98:	601a      	str	r2, [r3, #0]
 800fc9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	f383 8811 	msr	BASEPRI, r3
}
 800fca4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800fca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3738      	adds	r7, #56	@ 0x38
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	240338dc 	.word	0x240338dc
 800fcb4:	240338bc 	.word	0x240338bc
 800fcb8:	240333e4 	.word	0x240333e4
 800fcbc:	24033874 	.word	0x24033874
 800fcc0:	240333e0 	.word	0x240333e0
 800fcc4:	240338c8 	.word	0x240338c8

0800fcc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fcd2:	4b21      	ldr	r3, [pc, #132]	@ (800fd58 <prvAddCurrentTaskToDelayedList+0x90>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcd8:	4b20      	ldr	r3, [pc, #128]	@ (800fd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	3304      	adds	r3, #4
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fd fe8c 	bl	800d9fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fcea:	d10a      	bne.n	800fd02 <prvAddCurrentTaskToDelayedList+0x3a>
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d007      	beq.n	800fd02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcf2:	4b1a      	ldr	r3, [pc, #104]	@ (800fd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	3304      	adds	r3, #4
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	4819      	ldr	r0, [pc, #100]	@ (800fd60 <prvAddCurrentTaskToDelayedList+0x98>)
 800fcfc:	f7fd fe21 	bl	800d942 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fd00:	e026      	b.n	800fd50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fd02:	68fa      	ldr	r2, [r7, #12]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	4413      	add	r3, r2
 800fd08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fd0a:	4b14      	ldr	r3, [pc, #80]	@ (800fd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	68ba      	ldr	r2, [r7, #8]
 800fd10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fd12:	68ba      	ldr	r2, [r7, #8]
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d209      	bcs.n	800fd2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd1a:	4b12      	ldr	r3, [pc, #72]	@ (800fd64 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	4b0f      	ldr	r3, [pc, #60]	@ (800fd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	3304      	adds	r3, #4
 800fd24:	4619      	mov	r1, r3
 800fd26:	4610      	mov	r0, r2
 800fd28:	f7fd fe2f 	bl	800d98a <vListInsert>
}
 800fd2c:	e010      	b.n	800fd50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd2e:	4b0e      	ldr	r3, [pc, #56]	@ (800fd68 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	4b0a      	ldr	r3, [pc, #40]	@ (800fd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	3304      	adds	r3, #4
 800fd38:	4619      	mov	r1, r3
 800fd3a:	4610      	mov	r0, r2
 800fd3c:	f7fd fe25 	bl	800d98a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fd40:	4b0a      	ldr	r3, [pc, #40]	@ (800fd6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	68ba      	ldr	r2, [r7, #8]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d202      	bcs.n	800fd50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fd4a:	4a08      	ldr	r2, [pc, #32]	@ (800fd6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	6013      	str	r3, [r2, #0]
}
 800fd50:	bf00      	nop
 800fd52:	3710      	adds	r7, #16
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	240338b8 	.word	0x240338b8
 800fd5c:	240333e0 	.word	0x240333e0
 800fd60:	240338a0 	.word	0x240338a0
 800fd64:	24033870 	.word	0x24033870
 800fd68:	2403386c 	.word	0x2403386c
 800fd6c:	240338d4 	.word	0x240338d4

0800fd70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b08a      	sub	sp, #40	@ 0x28
 800fd74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fd76:	2300      	movs	r3, #0
 800fd78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fd7a:	f000 fb13 	bl	80103a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fd7e:	4b1d      	ldr	r3, [pc, #116]	@ (800fdf4 <xTimerCreateTimerTask+0x84>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d021      	beq.n	800fdca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fd86:	2300      	movs	r3, #0
 800fd88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fd8e:	1d3a      	adds	r2, r7, #4
 800fd90:	f107 0108 	add.w	r1, r7, #8
 800fd94:	f107 030c 	add.w	r3, r7, #12
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7fd fd8b 	bl	800d8b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fd9e:	6879      	ldr	r1, [r7, #4]
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	68fa      	ldr	r2, [r7, #12]
 800fda4:	9202      	str	r2, [sp, #8]
 800fda6:	9301      	str	r3, [sp, #4]
 800fda8:	2302      	movs	r3, #2
 800fdaa:	9300      	str	r3, [sp, #0]
 800fdac:	2300      	movs	r3, #0
 800fdae:	460a      	mov	r2, r1
 800fdb0:	4911      	ldr	r1, [pc, #68]	@ (800fdf8 <xTimerCreateTimerTask+0x88>)
 800fdb2:	4812      	ldr	r0, [pc, #72]	@ (800fdfc <xTimerCreateTimerTask+0x8c>)
 800fdb4:	f7fe fd62 	bl	800e87c <xTaskCreateStatic>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	4a11      	ldr	r2, [pc, #68]	@ (800fe00 <xTimerCreateTimerTask+0x90>)
 800fdbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fdbe:	4b10      	ldr	r3, [pc, #64]	@ (800fe00 <xTimerCreateTimerTask+0x90>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d001      	beq.n	800fdca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d10b      	bne.n	800fde8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800fdd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdd4:	f383 8811 	msr	BASEPRI, r3
 800fdd8:	f3bf 8f6f 	isb	sy
 800fddc:	f3bf 8f4f 	dsb	sy
 800fde0:	613b      	str	r3, [r7, #16]
}
 800fde2:	bf00      	nop
 800fde4:	bf00      	nop
 800fde6:	e7fd      	b.n	800fde4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fde8:	697b      	ldr	r3, [r7, #20]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3718      	adds	r7, #24
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	24033910 	.word	0x24033910
 800fdf8:	080219d0 	.word	0x080219d0
 800fdfc:	0800ff3d 	.word	0x0800ff3d
 800fe00:	24033914 	.word	0x24033914

0800fe04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b08a      	sub	sp, #40	@ 0x28
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	607a      	str	r2, [r7, #4]
 800fe10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fe12:	2300      	movs	r3, #0
 800fe14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d10b      	bne.n	800fe34 <xTimerGenericCommand+0x30>
	__asm volatile
 800fe1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe20:	f383 8811 	msr	BASEPRI, r3
 800fe24:	f3bf 8f6f 	isb	sy
 800fe28:	f3bf 8f4f 	dsb	sy
 800fe2c:	623b      	str	r3, [r7, #32]
}
 800fe2e:	bf00      	nop
 800fe30:	bf00      	nop
 800fe32:	e7fd      	b.n	800fe30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fe34:	4b19      	ldr	r3, [pc, #100]	@ (800fe9c <xTimerGenericCommand+0x98>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d02a      	beq.n	800fe92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	2b05      	cmp	r3, #5
 800fe4c:	dc18      	bgt.n	800fe80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fe4e:	f7ff fba5 	bl	800f59c <xTaskGetSchedulerState>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b02      	cmp	r3, #2
 800fe56:	d109      	bne.n	800fe6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fe58:	4b10      	ldr	r3, [pc, #64]	@ (800fe9c <xTimerGenericCommand+0x98>)
 800fe5a:	6818      	ldr	r0, [r3, #0]
 800fe5c:	f107 0110 	add.w	r1, r7, #16
 800fe60:	2300      	movs	r3, #0
 800fe62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe64:	f7fd fff2 	bl	800de4c <xQueueGenericSend>
 800fe68:	6278      	str	r0, [r7, #36]	@ 0x24
 800fe6a:	e012      	b.n	800fe92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fe6c:	4b0b      	ldr	r3, [pc, #44]	@ (800fe9c <xTimerGenericCommand+0x98>)
 800fe6e:	6818      	ldr	r0, [r3, #0]
 800fe70:	f107 0110 	add.w	r1, r7, #16
 800fe74:	2300      	movs	r3, #0
 800fe76:	2200      	movs	r2, #0
 800fe78:	f7fd ffe8 	bl	800de4c <xQueueGenericSend>
 800fe7c:	6278      	str	r0, [r7, #36]	@ 0x24
 800fe7e:	e008      	b.n	800fe92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fe80:	4b06      	ldr	r3, [pc, #24]	@ (800fe9c <xTimerGenericCommand+0x98>)
 800fe82:	6818      	ldr	r0, [r3, #0]
 800fe84:	f107 0110 	add.w	r1, r7, #16
 800fe88:	2300      	movs	r3, #0
 800fe8a:	683a      	ldr	r2, [r7, #0]
 800fe8c:	f7fe f8e0 	bl	800e050 <xQueueGenericSendFromISR>
 800fe90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fe92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3728      	adds	r7, #40	@ 0x28
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	24033910 	.word	0x24033910

0800fea0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b088      	sub	sp, #32
 800fea4:	af02      	add	r7, sp, #8
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feaa:	4b23      	ldr	r3, [pc, #140]	@ (800ff38 <prvProcessExpiredTimer+0x98>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	68db      	ldr	r3, [r3, #12]
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	3304      	adds	r3, #4
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fd fd9f 	bl	800d9fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fec4:	f003 0304 	and.w	r3, r3, #4
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d023      	beq.n	800ff14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	699a      	ldr	r2, [r3, #24]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	18d1      	adds	r1, r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	683a      	ldr	r2, [r7, #0]
 800fed8:	6978      	ldr	r0, [r7, #20]
 800feda:	f000 f8d5 	bl	8010088 <prvInsertTimerInActiveList>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d020      	beq.n	800ff26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fee4:	2300      	movs	r3, #0
 800fee6:	9300      	str	r3, [sp, #0]
 800fee8:	2300      	movs	r3, #0
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	2100      	movs	r1, #0
 800feee:	6978      	ldr	r0, [r7, #20]
 800fef0:	f7ff ff88 	bl	800fe04 <xTimerGenericCommand>
 800fef4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d114      	bne.n	800ff26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800fefc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff00:	f383 8811 	msr	BASEPRI, r3
 800ff04:	f3bf 8f6f 	isb	sy
 800ff08:	f3bf 8f4f 	dsb	sy
 800ff0c:	60fb      	str	r3, [r7, #12]
}
 800ff0e:	bf00      	nop
 800ff10:	bf00      	nop
 800ff12:	e7fd      	b.n	800ff10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff1a:	f023 0301 	bic.w	r3, r3, #1
 800ff1e:	b2da      	uxtb	r2, r3
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	6a1b      	ldr	r3, [r3, #32]
 800ff2a:	6978      	ldr	r0, [r7, #20]
 800ff2c:	4798      	blx	r3
}
 800ff2e:	bf00      	nop
 800ff30:	3718      	adds	r7, #24
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	24033908 	.word	0x24033908

0800ff3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff44:	f107 0308 	add.w	r3, r7, #8
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f000 f859 	bl	8010000 <prvGetNextExpireTime>
 800ff4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	4619      	mov	r1, r3
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f000 f805 	bl	800ff64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ff5a:	f000 f8d7 	bl	801010c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff5e:	bf00      	nop
 800ff60:	e7f0      	b.n	800ff44 <prvTimerTask+0x8>
	...

0800ff64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ff6e:	f7fe fee9 	bl	800ed44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff72:	f107 0308 	add.w	r3, r7, #8
 800ff76:	4618      	mov	r0, r3
 800ff78:	f000 f866 	bl	8010048 <prvSampleTimeNow>
 800ff7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d130      	bne.n	800ffe6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d10a      	bne.n	800ffa0 <prvProcessTimerOrBlockTask+0x3c>
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d806      	bhi.n	800ffa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ff92:	f7fe fee5 	bl	800ed60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ff96:	68f9      	ldr	r1, [r7, #12]
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7ff ff81 	bl	800fea0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ff9e:	e024      	b.n	800ffea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d008      	beq.n	800ffb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ffa6:	4b13      	ldr	r3, [pc, #76]	@ (800fff4 <prvProcessTimerOrBlockTask+0x90>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d101      	bne.n	800ffb4 <prvProcessTimerOrBlockTask+0x50>
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	e000      	b.n	800ffb6 <prvProcessTimerOrBlockTask+0x52>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ffb8:	4b0f      	ldr	r3, [pc, #60]	@ (800fff8 <prvProcessTimerOrBlockTask+0x94>)
 800ffba:	6818      	ldr	r0, [r3, #0]
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	683a      	ldr	r2, [r7, #0]
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	f7fe fc25 	bl	800e814 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ffca:	f7fe fec9 	bl	800ed60 <xTaskResumeAll>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d10a      	bne.n	800ffea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ffd4:	4b09      	ldr	r3, [pc, #36]	@ (800fffc <prvProcessTimerOrBlockTask+0x98>)
 800ffd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffda:	601a      	str	r2, [r3, #0]
 800ffdc:	f3bf 8f4f 	dsb	sy
 800ffe0:	f3bf 8f6f 	isb	sy
}
 800ffe4:	e001      	b.n	800ffea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ffe6:	f7fe febb 	bl	800ed60 <xTaskResumeAll>
}
 800ffea:	bf00      	nop
 800ffec:	3710      	adds	r7, #16
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop
 800fff4:	2403390c 	.word	0x2403390c
 800fff8:	24033910 	.word	0x24033910
 800fffc:	e000ed04 	.word	0xe000ed04

08010000 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010000:	b480      	push	{r7}
 8010002:	b085      	sub	sp, #20
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010008:	4b0e      	ldr	r3, [pc, #56]	@ (8010044 <prvGetNextExpireTime+0x44>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d101      	bne.n	8010016 <prvGetNextExpireTime+0x16>
 8010012:	2201      	movs	r2, #1
 8010014:	e000      	b.n	8010018 <prvGetNextExpireTime+0x18>
 8010016:	2200      	movs	r2, #0
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d105      	bne.n	8010030 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010024:	4b07      	ldr	r3, [pc, #28]	@ (8010044 <prvGetNextExpireTime+0x44>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	60fb      	str	r3, [r7, #12]
 801002e:	e001      	b.n	8010034 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010030:	2300      	movs	r3, #0
 8010032:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010034:	68fb      	ldr	r3, [r7, #12]
}
 8010036:	4618      	mov	r0, r3
 8010038:	3714      	adds	r7, #20
 801003a:	46bd      	mov	sp, r7
 801003c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop
 8010044:	24033908 	.word	0x24033908

08010048 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010050:	f7fe ff24 	bl	800ee9c <xTaskGetTickCount>
 8010054:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010056:	4b0b      	ldr	r3, [pc, #44]	@ (8010084 <prvSampleTimeNow+0x3c>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	68fa      	ldr	r2, [r7, #12]
 801005c:	429a      	cmp	r2, r3
 801005e:	d205      	bcs.n	801006c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010060:	f000 f93a 	bl	80102d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2201      	movs	r2, #1
 8010068:	601a      	str	r2, [r3, #0]
 801006a:	e002      	b.n	8010072 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010072:	4a04      	ldr	r2, [pc, #16]	@ (8010084 <prvSampleTimeNow+0x3c>)
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010078:	68fb      	ldr	r3, [r7, #12]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	24033918 	.word	0x24033918

08010088 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b086      	sub	sp, #24
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	607a      	str	r2, [r7, #4]
 8010094:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010096:	2300      	movs	r3, #0
 8010098:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	68ba      	ldr	r2, [r7, #8]
 801009e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	68fa      	ldr	r2, [r7, #12]
 80100a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80100a6:	68ba      	ldr	r2, [r7, #8]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d812      	bhi.n	80100d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100ae:	687a      	ldr	r2, [r7, #4]
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	1ad2      	subs	r2, r2, r3
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	699b      	ldr	r3, [r3, #24]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d302      	bcc.n	80100c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80100bc:	2301      	movs	r3, #1
 80100be:	617b      	str	r3, [r7, #20]
 80100c0:	e01b      	b.n	80100fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80100c2:	4b10      	ldr	r3, [pc, #64]	@ (8010104 <prvInsertTimerInActiveList+0x7c>)
 80100c4:	681a      	ldr	r2, [r3, #0]
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	3304      	adds	r3, #4
 80100ca:	4619      	mov	r1, r3
 80100cc:	4610      	mov	r0, r2
 80100ce:	f7fd fc5c 	bl	800d98a <vListInsert>
 80100d2:	e012      	b.n	80100fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d206      	bcs.n	80100ea <prvInsertTimerInActiveList+0x62>
 80100dc:	68ba      	ldr	r2, [r7, #8]
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d302      	bcc.n	80100ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80100e4:	2301      	movs	r3, #1
 80100e6:	617b      	str	r3, [r7, #20]
 80100e8:	e007      	b.n	80100fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80100ea:	4b07      	ldr	r3, [pc, #28]	@ (8010108 <prvInsertTimerInActiveList+0x80>)
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	3304      	adds	r3, #4
 80100f2:	4619      	mov	r1, r3
 80100f4:	4610      	mov	r0, r2
 80100f6:	f7fd fc48 	bl	800d98a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80100fa:	697b      	ldr	r3, [r7, #20]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3718      	adds	r7, #24
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	2403390c 	.word	0x2403390c
 8010108:	24033908 	.word	0x24033908

0801010c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b08e      	sub	sp, #56	@ 0x38
 8010110:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010112:	e0ce      	b.n	80102b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	da19      	bge.n	801014e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801011a:	1d3b      	adds	r3, r7, #4
 801011c:	3304      	adds	r3, #4
 801011e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010122:	2b00      	cmp	r3, #0
 8010124:	d10b      	bne.n	801013e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801012a:	f383 8811 	msr	BASEPRI, r3
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	f3bf 8f4f 	dsb	sy
 8010136:	61fb      	str	r3, [r7, #28]
}
 8010138:	bf00      	nop
 801013a:	bf00      	nop
 801013c:	e7fd      	b.n	801013a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801013e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010144:	6850      	ldr	r0, [r2, #4]
 8010146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010148:	6892      	ldr	r2, [r2, #8]
 801014a:	4611      	mov	r1, r2
 801014c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	f2c0 80ae 	blt.w	80102b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801015a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801015c:	695b      	ldr	r3, [r3, #20]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d004      	beq.n	801016c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010164:	3304      	adds	r3, #4
 8010166:	4618      	mov	r0, r3
 8010168:	f7fd fc48 	bl	800d9fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801016c:	463b      	mov	r3, r7
 801016e:	4618      	mov	r0, r3
 8010170:	f7ff ff6a 	bl	8010048 <prvSampleTimeNow>
 8010174:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2b09      	cmp	r3, #9
 801017a:	f200 8097 	bhi.w	80102ac <prvProcessReceivedCommands+0x1a0>
 801017e:	a201      	add	r2, pc, #4	@ (adr r2, 8010184 <prvProcessReceivedCommands+0x78>)
 8010180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010184:	080101ad 	.word	0x080101ad
 8010188:	080101ad 	.word	0x080101ad
 801018c:	080101ad 	.word	0x080101ad
 8010190:	08010223 	.word	0x08010223
 8010194:	08010237 	.word	0x08010237
 8010198:	08010283 	.word	0x08010283
 801019c:	080101ad 	.word	0x080101ad
 80101a0:	080101ad 	.word	0x080101ad
 80101a4:	08010223 	.word	0x08010223
 80101a8:	08010237 	.word	0x08010237
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80101ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80101b2:	f043 0301 	orr.w	r3, r3, #1
 80101b6:	b2da      	uxtb	r2, r3
 80101b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80101be:	68ba      	ldr	r2, [r7, #8]
 80101c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c2:	699b      	ldr	r3, [r3, #24]
 80101c4:	18d1      	adds	r1, r2, r3
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101cc:	f7ff ff5c 	bl	8010088 <prvInsertTimerInActiveList>
 80101d0:	4603      	mov	r3, r0
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d06c      	beq.n	80102b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d8:	6a1b      	ldr	r3, [r3, #32]
 80101da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80101de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80101e4:	f003 0304 	and.w	r3, r3, #4
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d061      	beq.n	80102b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80101ec:	68ba      	ldr	r2, [r7, #8]
 80101ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101f0:	699b      	ldr	r3, [r3, #24]
 80101f2:	441a      	add	r2, r3
 80101f4:	2300      	movs	r3, #0
 80101f6:	9300      	str	r3, [sp, #0]
 80101f8:	2300      	movs	r3, #0
 80101fa:	2100      	movs	r1, #0
 80101fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101fe:	f7ff fe01 	bl	800fe04 <xTimerGenericCommand>
 8010202:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010204:	6a3b      	ldr	r3, [r7, #32]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d152      	bne.n	80102b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801020a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801020e:	f383 8811 	msr	BASEPRI, r3
 8010212:	f3bf 8f6f 	isb	sy
 8010216:	f3bf 8f4f 	dsb	sy
 801021a:	61bb      	str	r3, [r7, #24]
}
 801021c:	bf00      	nop
 801021e:	bf00      	nop
 8010220:	e7fd      	b.n	801021e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010228:	f023 0301 	bic.w	r3, r3, #1
 801022c:	b2da      	uxtb	r2, r3
 801022e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010230:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010234:	e03d      	b.n	80102b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801023c:	f043 0301 	orr.w	r3, r3, #1
 8010240:	b2da      	uxtb	r2, r3
 8010242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010244:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010248:	68ba      	ldr	r2, [r7, #8]
 801024a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801024c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801024e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010250:	699b      	ldr	r3, [r3, #24]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d10b      	bne.n	801026e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801025a:	f383 8811 	msr	BASEPRI, r3
 801025e:	f3bf 8f6f 	isb	sy
 8010262:	f3bf 8f4f 	dsb	sy
 8010266:	617b      	str	r3, [r7, #20]
}
 8010268:	bf00      	nop
 801026a:	bf00      	nop
 801026c:	e7fd      	b.n	801026a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801026e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010270:	699a      	ldr	r2, [r3, #24]
 8010272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010274:	18d1      	adds	r1, r2, r3
 8010276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801027a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801027c:	f7ff ff04 	bl	8010088 <prvInsertTimerInActiveList>
					break;
 8010280:	e017      	b.n	80102b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010288:	f003 0302 	and.w	r3, r3, #2
 801028c:	2b00      	cmp	r3, #0
 801028e:	d103      	bne.n	8010298 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010292:	f000 fbe9 	bl	8010a68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010296:	e00c      	b.n	80102b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801029a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801029e:	f023 0301 	bic.w	r3, r3, #1
 80102a2:	b2da      	uxtb	r2, r3
 80102a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80102aa:	e002      	b.n	80102b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80102ac:	bf00      	nop
 80102ae:	e000      	b.n	80102b2 <prvProcessReceivedCommands+0x1a6>
					break;
 80102b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80102b2:	4b08      	ldr	r3, [pc, #32]	@ (80102d4 <prvProcessReceivedCommands+0x1c8>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	1d39      	adds	r1, r7, #4
 80102b8:	2200      	movs	r2, #0
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7fd ff66 	bl	800e18c <xQueueReceive>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	f47f af26 	bne.w	8010114 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80102c8:	bf00      	nop
 80102ca:	bf00      	nop
 80102cc:	3730      	adds	r7, #48	@ 0x30
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}
 80102d2:	bf00      	nop
 80102d4:	24033910 	.word	0x24033910

080102d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b088      	sub	sp, #32
 80102dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80102de:	e049      	b.n	8010374 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80102e0:	4b2e      	ldr	r3, [pc, #184]	@ (801039c <prvSwitchTimerLists+0xc4>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	68db      	ldr	r3, [r3, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102ea:	4b2c      	ldr	r3, [pc, #176]	@ (801039c <prvSwitchTimerLists+0xc4>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	68db      	ldr	r3, [r3, #12]
 80102f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	3304      	adds	r3, #4
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7fd fb7f 	bl	800d9fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	6a1b      	ldr	r3, [r3, #32]
 8010302:	68f8      	ldr	r0, [r7, #12]
 8010304:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801030c:	f003 0304 	and.w	r3, r3, #4
 8010310:	2b00      	cmp	r3, #0
 8010312:	d02f      	beq.n	8010374 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	699b      	ldr	r3, [r3, #24]
 8010318:	693a      	ldr	r2, [r7, #16]
 801031a:	4413      	add	r3, r2
 801031c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	429a      	cmp	r2, r3
 8010324:	d90e      	bls.n	8010344 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	68ba      	ldr	r2, [r7, #8]
 801032a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	68fa      	ldr	r2, [r7, #12]
 8010330:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010332:	4b1a      	ldr	r3, [pc, #104]	@ (801039c <prvSwitchTimerLists+0xc4>)
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	3304      	adds	r3, #4
 801033a:	4619      	mov	r1, r3
 801033c:	4610      	mov	r0, r2
 801033e:	f7fd fb24 	bl	800d98a <vListInsert>
 8010342:	e017      	b.n	8010374 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010344:	2300      	movs	r3, #0
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	2300      	movs	r3, #0
 801034a:	693a      	ldr	r2, [r7, #16]
 801034c:	2100      	movs	r1, #0
 801034e:	68f8      	ldr	r0, [r7, #12]
 8010350:	f7ff fd58 	bl	800fe04 <xTimerGenericCommand>
 8010354:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d10b      	bne.n	8010374 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801035c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010360:	f383 8811 	msr	BASEPRI, r3
 8010364:	f3bf 8f6f 	isb	sy
 8010368:	f3bf 8f4f 	dsb	sy
 801036c:	603b      	str	r3, [r7, #0]
}
 801036e:	bf00      	nop
 8010370:	bf00      	nop
 8010372:	e7fd      	b.n	8010370 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010374:	4b09      	ldr	r3, [pc, #36]	@ (801039c <prvSwitchTimerLists+0xc4>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d1b0      	bne.n	80102e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801037e:	4b07      	ldr	r3, [pc, #28]	@ (801039c <prvSwitchTimerLists+0xc4>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010384:	4b06      	ldr	r3, [pc, #24]	@ (80103a0 <prvSwitchTimerLists+0xc8>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	4a04      	ldr	r2, [pc, #16]	@ (801039c <prvSwitchTimerLists+0xc4>)
 801038a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801038c:	4a04      	ldr	r2, [pc, #16]	@ (80103a0 <prvSwitchTimerLists+0xc8>)
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	6013      	str	r3, [r2, #0]
}
 8010392:	bf00      	nop
 8010394:	3718      	adds	r7, #24
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	24033908 	.word	0x24033908
 80103a0:	2403390c 	.word	0x2403390c

080103a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80103aa:	f000 f96d 	bl	8010688 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80103ae:	4b15      	ldr	r3, [pc, #84]	@ (8010404 <prvCheckForValidListAndQueue+0x60>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d120      	bne.n	80103f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80103b6:	4814      	ldr	r0, [pc, #80]	@ (8010408 <prvCheckForValidListAndQueue+0x64>)
 80103b8:	f7fd fa96 	bl	800d8e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80103bc:	4813      	ldr	r0, [pc, #76]	@ (801040c <prvCheckForValidListAndQueue+0x68>)
 80103be:	f7fd fa93 	bl	800d8e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80103c2:	4b13      	ldr	r3, [pc, #76]	@ (8010410 <prvCheckForValidListAndQueue+0x6c>)
 80103c4:	4a10      	ldr	r2, [pc, #64]	@ (8010408 <prvCheckForValidListAndQueue+0x64>)
 80103c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80103c8:	4b12      	ldr	r3, [pc, #72]	@ (8010414 <prvCheckForValidListAndQueue+0x70>)
 80103ca:	4a10      	ldr	r2, [pc, #64]	@ (801040c <prvCheckForValidListAndQueue+0x68>)
 80103cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80103ce:	2300      	movs	r3, #0
 80103d0:	9300      	str	r3, [sp, #0]
 80103d2:	4b11      	ldr	r3, [pc, #68]	@ (8010418 <prvCheckForValidListAndQueue+0x74>)
 80103d4:	4a11      	ldr	r2, [pc, #68]	@ (801041c <prvCheckForValidListAndQueue+0x78>)
 80103d6:	2110      	movs	r1, #16
 80103d8:	200a      	movs	r0, #10
 80103da:	f7fd fba3 	bl	800db24 <xQueueGenericCreateStatic>
 80103de:	4603      	mov	r3, r0
 80103e0:	4a08      	ldr	r2, [pc, #32]	@ (8010404 <prvCheckForValidListAndQueue+0x60>)
 80103e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80103e4:	4b07      	ldr	r3, [pc, #28]	@ (8010404 <prvCheckForValidListAndQueue+0x60>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d005      	beq.n	80103f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80103ec:	4b05      	ldr	r3, [pc, #20]	@ (8010404 <prvCheckForValidListAndQueue+0x60>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	490b      	ldr	r1, [pc, #44]	@ (8010420 <prvCheckForValidListAndQueue+0x7c>)
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7fe f9e4 	bl	800e7c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80103f8:	f000 f978 	bl	80106ec <vPortExitCritical>
}
 80103fc:	bf00      	nop
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}
 8010402:	bf00      	nop
 8010404:	24033910 	.word	0x24033910
 8010408:	240338e0 	.word	0x240338e0
 801040c:	240338f4 	.word	0x240338f4
 8010410:	24033908 	.word	0x24033908
 8010414:	2403390c 	.word	0x2403390c
 8010418:	240339bc 	.word	0x240339bc
 801041c:	2403391c 	.word	0x2403391c
 8010420:	080219d8 	.word	0x080219d8

08010424 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010424:	b480      	push	{r7}
 8010426:	b085      	sub	sp, #20
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	3b04      	subs	r3, #4
 8010434:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801043c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	3b04      	subs	r3, #4
 8010442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	f023 0201 	bic.w	r2, r3, #1
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	3b04      	subs	r3, #4
 8010452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010454:	4a0c      	ldr	r2, [pc, #48]	@ (8010488 <pxPortInitialiseStack+0x64>)
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	3b14      	subs	r3, #20
 801045e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	3b04      	subs	r3, #4
 801046a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f06f 0202 	mvn.w	r2, #2
 8010472:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	3b20      	subs	r3, #32
 8010478:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801047a:	68fb      	ldr	r3, [r7, #12]
}
 801047c:	4618      	mov	r0, r3
 801047e:	3714      	adds	r7, #20
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr
 8010488:	0801048d 	.word	0x0801048d

0801048c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801048c:	b480      	push	{r7}
 801048e:	b085      	sub	sp, #20
 8010490:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010492:	2300      	movs	r3, #0
 8010494:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010496:	4b13      	ldr	r3, [pc, #76]	@ (80104e4 <prvTaskExitError+0x58>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801049e:	d00b      	beq.n	80104b8 <prvTaskExitError+0x2c>
	__asm volatile
 80104a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104a4:	f383 8811 	msr	BASEPRI, r3
 80104a8:	f3bf 8f6f 	isb	sy
 80104ac:	f3bf 8f4f 	dsb	sy
 80104b0:	60fb      	str	r3, [r7, #12]
}
 80104b2:	bf00      	nop
 80104b4:	bf00      	nop
 80104b6:	e7fd      	b.n	80104b4 <prvTaskExitError+0x28>
	__asm volatile
 80104b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104bc:	f383 8811 	msr	BASEPRI, r3
 80104c0:	f3bf 8f6f 	isb	sy
 80104c4:	f3bf 8f4f 	dsb	sy
 80104c8:	60bb      	str	r3, [r7, #8]
}
 80104ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80104cc:	bf00      	nop
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d0fc      	beq.n	80104ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80104d4:	bf00      	nop
 80104d6:	bf00      	nop
 80104d8:	3714      	adds	r7, #20
 80104da:	46bd      	mov	sp, r7
 80104dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e0:	4770      	bx	lr
 80104e2:	bf00      	nop
 80104e4:	24000014 	.word	0x24000014
	...

080104f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80104f0:	4b07      	ldr	r3, [pc, #28]	@ (8010510 <pxCurrentTCBConst2>)
 80104f2:	6819      	ldr	r1, [r3, #0]
 80104f4:	6808      	ldr	r0, [r1, #0]
 80104f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fa:	f380 8809 	msr	PSP, r0
 80104fe:	f3bf 8f6f 	isb	sy
 8010502:	f04f 0000 	mov.w	r0, #0
 8010506:	f380 8811 	msr	BASEPRI, r0
 801050a:	4770      	bx	lr
 801050c:	f3af 8000 	nop.w

08010510 <pxCurrentTCBConst2>:
 8010510:	240333e0 	.word	0x240333e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010514:	bf00      	nop
 8010516:	bf00      	nop

08010518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010518:	4808      	ldr	r0, [pc, #32]	@ (801053c <prvPortStartFirstTask+0x24>)
 801051a:	6800      	ldr	r0, [r0, #0]
 801051c:	6800      	ldr	r0, [r0, #0]
 801051e:	f380 8808 	msr	MSP, r0
 8010522:	f04f 0000 	mov.w	r0, #0
 8010526:	f380 8814 	msr	CONTROL, r0
 801052a:	b662      	cpsie	i
 801052c:	b661      	cpsie	f
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	f3bf 8f6f 	isb	sy
 8010536:	df00      	svc	0
 8010538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801053a:	bf00      	nop
 801053c:	e000ed08 	.word	0xe000ed08

08010540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b086      	sub	sp, #24
 8010544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010546:	4b47      	ldr	r3, [pc, #284]	@ (8010664 <xPortStartScheduler+0x124>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	4a47      	ldr	r2, [pc, #284]	@ (8010668 <xPortStartScheduler+0x128>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d10b      	bne.n	8010568 <xPortStartScheduler+0x28>
	__asm volatile
 8010550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010554:	f383 8811 	msr	BASEPRI, r3
 8010558:	f3bf 8f6f 	isb	sy
 801055c:	f3bf 8f4f 	dsb	sy
 8010560:	613b      	str	r3, [r7, #16]
}
 8010562:	bf00      	nop
 8010564:	bf00      	nop
 8010566:	e7fd      	b.n	8010564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010568:	4b3e      	ldr	r3, [pc, #248]	@ (8010664 <xPortStartScheduler+0x124>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	4a3f      	ldr	r2, [pc, #252]	@ (801066c <xPortStartScheduler+0x12c>)
 801056e:	4293      	cmp	r3, r2
 8010570:	d10b      	bne.n	801058a <xPortStartScheduler+0x4a>
	__asm volatile
 8010572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010576:	f383 8811 	msr	BASEPRI, r3
 801057a:	f3bf 8f6f 	isb	sy
 801057e:	f3bf 8f4f 	dsb	sy
 8010582:	60fb      	str	r3, [r7, #12]
}
 8010584:	bf00      	nop
 8010586:	bf00      	nop
 8010588:	e7fd      	b.n	8010586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801058a:	4b39      	ldr	r3, [pc, #228]	@ (8010670 <xPortStartScheduler+0x130>)
 801058c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	b2db      	uxtb	r3, r3
 8010594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	22ff      	movs	r2, #255	@ 0xff
 801059a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80105a4:	78fb      	ldrb	r3, [r7, #3]
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80105ac:	b2da      	uxtb	r2, r3
 80105ae:	4b31      	ldr	r3, [pc, #196]	@ (8010674 <xPortStartScheduler+0x134>)
 80105b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80105b2:	4b31      	ldr	r3, [pc, #196]	@ (8010678 <xPortStartScheduler+0x138>)
 80105b4:	2207      	movs	r2, #7
 80105b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80105b8:	e009      	b.n	80105ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80105ba:	4b2f      	ldr	r3, [pc, #188]	@ (8010678 <xPortStartScheduler+0x138>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	3b01      	subs	r3, #1
 80105c0:	4a2d      	ldr	r2, [pc, #180]	@ (8010678 <xPortStartScheduler+0x138>)
 80105c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80105c4:	78fb      	ldrb	r3, [r7, #3]
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	005b      	lsls	r3, r3, #1
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80105ce:	78fb      	ldrb	r3, [r7, #3]
 80105d0:	b2db      	uxtb	r3, r3
 80105d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105d6:	2b80      	cmp	r3, #128	@ 0x80
 80105d8:	d0ef      	beq.n	80105ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80105da:	4b27      	ldr	r3, [pc, #156]	@ (8010678 <xPortStartScheduler+0x138>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f1c3 0307 	rsb	r3, r3, #7
 80105e2:	2b04      	cmp	r3, #4
 80105e4:	d00b      	beq.n	80105fe <xPortStartScheduler+0xbe>
	__asm volatile
 80105e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105ea:	f383 8811 	msr	BASEPRI, r3
 80105ee:	f3bf 8f6f 	isb	sy
 80105f2:	f3bf 8f4f 	dsb	sy
 80105f6:	60bb      	str	r3, [r7, #8]
}
 80105f8:	bf00      	nop
 80105fa:	bf00      	nop
 80105fc:	e7fd      	b.n	80105fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80105fe:	4b1e      	ldr	r3, [pc, #120]	@ (8010678 <xPortStartScheduler+0x138>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	021b      	lsls	r3, r3, #8
 8010604:	4a1c      	ldr	r2, [pc, #112]	@ (8010678 <xPortStartScheduler+0x138>)
 8010606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010608:	4b1b      	ldr	r3, [pc, #108]	@ (8010678 <xPortStartScheduler+0x138>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010610:	4a19      	ldr	r2, [pc, #100]	@ (8010678 <xPortStartScheduler+0x138>)
 8010612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	b2da      	uxtb	r2, r3
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801061c:	4b17      	ldr	r3, [pc, #92]	@ (801067c <xPortStartScheduler+0x13c>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	4a16      	ldr	r2, [pc, #88]	@ (801067c <xPortStartScheduler+0x13c>)
 8010622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010628:	4b14      	ldr	r3, [pc, #80]	@ (801067c <xPortStartScheduler+0x13c>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a13      	ldr	r2, [pc, #76]	@ (801067c <xPortStartScheduler+0x13c>)
 801062e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010634:	f000 f8da 	bl	80107ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010638:	4b11      	ldr	r3, [pc, #68]	@ (8010680 <xPortStartScheduler+0x140>)
 801063a:	2200      	movs	r2, #0
 801063c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801063e:	f000 f8f9 	bl	8010834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010642:	4b10      	ldr	r3, [pc, #64]	@ (8010684 <xPortStartScheduler+0x144>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	4a0f      	ldr	r2, [pc, #60]	@ (8010684 <xPortStartScheduler+0x144>)
 8010648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801064c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801064e:	f7ff ff63 	bl	8010518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010652:	f7fe fced 	bl	800f030 <vTaskSwitchContext>
	prvTaskExitError();
 8010656:	f7ff ff19 	bl	801048c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801065a:	2300      	movs	r3, #0
}
 801065c:	4618      	mov	r0, r3
 801065e:	3718      	adds	r7, #24
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}
 8010664:	e000ed00 	.word	0xe000ed00
 8010668:	410fc271 	.word	0x410fc271
 801066c:	410fc270 	.word	0x410fc270
 8010670:	e000e400 	.word	0xe000e400
 8010674:	24033a0c 	.word	0x24033a0c
 8010678:	24033a10 	.word	0x24033a10
 801067c:	e000ed20 	.word	0xe000ed20
 8010680:	24000014 	.word	0x24000014
 8010684:	e000ef34 	.word	0xe000ef34

08010688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
	__asm volatile
 801068e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010692:	f383 8811 	msr	BASEPRI, r3
 8010696:	f3bf 8f6f 	isb	sy
 801069a:	f3bf 8f4f 	dsb	sy
 801069e:	607b      	str	r3, [r7, #4]
}
 80106a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80106a2:	4b10      	ldr	r3, [pc, #64]	@ (80106e4 <vPortEnterCritical+0x5c>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	3301      	adds	r3, #1
 80106a8:	4a0e      	ldr	r2, [pc, #56]	@ (80106e4 <vPortEnterCritical+0x5c>)
 80106aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80106ac:	4b0d      	ldr	r3, [pc, #52]	@ (80106e4 <vPortEnterCritical+0x5c>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d110      	bne.n	80106d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80106b4:	4b0c      	ldr	r3, [pc, #48]	@ (80106e8 <vPortEnterCritical+0x60>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d00b      	beq.n	80106d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80106be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106c2:	f383 8811 	msr	BASEPRI, r3
 80106c6:	f3bf 8f6f 	isb	sy
 80106ca:	f3bf 8f4f 	dsb	sy
 80106ce:	603b      	str	r3, [r7, #0]
}
 80106d0:	bf00      	nop
 80106d2:	bf00      	nop
 80106d4:	e7fd      	b.n	80106d2 <vPortEnterCritical+0x4a>
	}
}
 80106d6:	bf00      	nop
 80106d8:	370c      	adds	r7, #12
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	24000014 	.word	0x24000014
 80106e8:	e000ed04 	.word	0xe000ed04

080106ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80106f2:	4b12      	ldr	r3, [pc, #72]	@ (801073c <vPortExitCritical+0x50>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d10b      	bne.n	8010712 <vPortExitCritical+0x26>
	__asm volatile
 80106fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106fe:	f383 8811 	msr	BASEPRI, r3
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	607b      	str	r3, [r7, #4]
}
 801070c:	bf00      	nop
 801070e:	bf00      	nop
 8010710:	e7fd      	b.n	801070e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010712:	4b0a      	ldr	r3, [pc, #40]	@ (801073c <vPortExitCritical+0x50>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	3b01      	subs	r3, #1
 8010718:	4a08      	ldr	r2, [pc, #32]	@ (801073c <vPortExitCritical+0x50>)
 801071a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801071c:	4b07      	ldr	r3, [pc, #28]	@ (801073c <vPortExitCritical+0x50>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d105      	bne.n	8010730 <vPortExitCritical+0x44>
 8010724:	2300      	movs	r3, #0
 8010726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	f383 8811 	msr	BASEPRI, r3
}
 801072e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010730:	bf00      	nop
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr
 801073c:	24000014 	.word	0x24000014

08010740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010740:	f3ef 8009 	mrs	r0, PSP
 8010744:	f3bf 8f6f 	isb	sy
 8010748:	4b15      	ldr	r3, [pc, #84]	@ (80107a0 <pxCurrentTCBConst>)
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	f01e 0f10 	tst.w	lr, #16
 8010750:	bf08      	it	eq
 8010752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801075a:	6010      	str	r0, [r2, #0]
 801075c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010764:	f380 8811 	msr	BASEPRI, r0
 8010768:	f3bf 8f4f 	dsb	sy
 801076c:	f3bf 8f6f 	isb	sy
 8010770:	f7fe fc5e 	bl	800f030 <vTaskSwitchContext>
 8010774:	f04f 0000 	mov.w	r0, #0
 8010778:	f380 8811 	msr	BASEPRI, r0
 801077c:	bc09      	pop	{r0, r3}
 801077e:	6819      	ldr	r1, [r3, #0]
 8010780:	6808      	ldr	r0, [r1, #0]
 8010782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010786:	f01e 0f10 	tst.w	lr, #16
 801078a:	bf08      	it	eq
 801078c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010790:	f380 8809 	msr	PSP, r0
 8010794:	f3bf 8f6f 	isb	sy
 8010798:	4770      	bx	lr
 801079a:	bf00      	nop
 801079c:	f3af 8000 	nop.w

080107a0 <pxCurrentTCBConst>:
 80107a0:	240333e0 	.word	0x240333e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80107a4:	bf00      	nop
 80107a6:	bf00      	nop

080107a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
	__asm volatile
 80107ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107b2:	f383 8811 	msr	BASEPRI, r3
 80107b6:	f3bf 8f6f 	isb	sy
 80107ba:	f3bf 8f4f 	dsb	sy
 80107be:	607b      	str	r3, [r7, #4]
}
 80107c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80107c2:	f7fe fb7b 	bl	800eebc <xTaskIncrementTick>
 80107c6:	4603      	mov	r3, r0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d003      	beq.n	80107d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80107cc:	4b06      	ldr	r3, [pc, #24]	@ (80107e8 <xPortSysTickHandler+0x40>)
 80107ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107d2:	601a      	str	r2, [r3, #0]
 80107d4:	2300      	movs	r3, #0
 80107d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	f383 8811 	msr	BASEPRI, r3
}
 80107de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80107e0:	bf00      	nop
 80107e2:	3708      	adds	r7, #8
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}
 80107e8:	e000ed04 	.word	0xe000ed04

080107ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80107ec:	b480      	push	{r7}
 80107ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80107f0:	4b0b      	ldr	r3, [pc, #44]	@ (8010820 <vPortSetupTimerInterrupt+0x34>)
 80107f2:	2200      	movs	r2, #0
 80107f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80107f6:	4b0b      	ldr	r3, [pc, #44]	@ (8010824 <vPortSetupTimerInterrupt+0x38>)
 80107f8:	2200      	movs	r2, #0
 80107fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80107fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010828 <vPortSetupTimerInterrupt+0x3c>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	4a0a      	ldr	r2, [pc, #40]	@ (801082c <vPortSetupTimerInterrupt+0x40>)
 8010802:	fba2 2303 	umull	r2, r3, r2, r3
 8010806:	099b      	lsrs	r3, r3, #6
 8010808:	4a09      	ldr	r2, [pc, #36]	@ (8010830 <vPortSetupTimerInterrupt+0x44>)
 801080a:	3b01      	subs	r3, #1
 801080c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801080e:	4b04      	ldr	r3, [pc, #16]	@ (8010820 <vPortSetupTimerInterrupt+0x34>)
 8010810:	2207      	movs	r2, #7
 8010812:	601a      	str	r2, [r3, #0]
}
 8010814:	bf00      	nop
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr
 801081e:	bf00      	nop
 8010820:	e000e010 	.word	0xe000e010
 8010824:	e000e018 	.word	0xe000e018
 8010828:	24000004 	.word	0x24000004
 801082c:	10624dd3 	.word	0x10624dd3
 8010830:	e000e014 	.word	0xe000e014

08010834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010844 <vPortEnableVFP+0x10>
 8010838:	6801      	ldr	r1, [r0, #0]
 801083a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801083e:	6001      	str	r1, [r0, #0]
 8010840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010842:	bf00      	nop
 8010844:	e000ed88 	.word	0xe000ed88

08010848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010848:	b480      	push	{r7}
 801084a:	b085      	sub	sp, #20
 801084c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801084e:	f3ef 8305 	mrs	r3, IPSR
 8010852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2b0f      	cmp	r3, #15
 8010858:	d915      	bls.n	8010886 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801085a:	4a18      	ldr	r2, [pc, #96]	@ (80108bc <vPortValidateInterruptPriority+0x74>)
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	4413      	add	r3, r2
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010864:	4b16      	ldr	r3, [pc, #88]	@ (80108c0 <vPortValidateInterruptPriority+0x78>)
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	7afa      	ldrb	r2, [r7, #11]
 801086a:	429a      	cmp	r2, r3
 801086c:	d20b      	bcs.n	8010886 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801086e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010872:	f383 8811 	msr	BASEPRI, r3
 8010876:	f3bf 8f6f 	isb	sy
 801087a:	f3bf 8f4f 	dsb	sy
 801087e:	607b      	str	r3, [r7, #4]
}
 8010880:	bf00      	nop
 8010882:	bf00      	nop
 8010884:	e7fd      	b.n	8010882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010886:	4b0f      	ldr	r3, [pc, #60]	@ (80108c4 <vPortValidateInterruptPriority+0x7c>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801088e:	4b0e      	ldr	r3, [pc, #56]	@ (80108c8 <vPortValidateInterruptPriority+0x80>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	429a      	cmp	r2, r3
 8010894:	d90b      	bls.n	80108ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801089a:	f383 8811 	msr	BASEPRI, r3
 801089e:	f3bf 8f6f 	isb	sy
 80108a2:	f3bf 8f4f 	dsb	sy
 80108a6:	603b      	str	r3, [r7, #0]
}
 80108a8:	bf00      	nop
 80108aa:	bf00      	nop
 80108ac:	e7fd      	b.n	80108aa <vPortValidateInterruptPriority+0x62>
	}
 80108ae:	bf00      	nop
 80108b0:	3714      	adds	r7, #20
 80108b2:	46bd      	mov	sp, r7
 80108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop
 80108bc:	e000e3f0 	.word	0xe000e3f0
 80108c0:	24033a0c 	.word	0x24033a0c
 80108c4:	e000ed0c 	.word	0xe000ed0c
 80108c8:	24033a10 	.word	0x24033a10

080108cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b08a      	sub	sp, #40	@ 0x28
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80108d4:	2300      	movs	r3, #0
 80108d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80108d8:	f7fe fa34 	bl	800ed44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80108dc:	4b5c      	ldr	r3, [pc, #368]	@ (8010a50 <pvPortMalloc+0x184>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d101      	bne.n	80108e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80108e4:	f000 f924 	bl	8010b30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80108e8:	4b5a      	ldr	r3, [pc, #360]	@ (8010a54 <pvPortMalloc+0x188>)
 80108ea:	681a      	ldr	r2, [r3, #0]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	4013      	ands	r3, r2
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	f040 8095 	bne.w	8010a20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d01e      	beq.n	801093a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80108fc:	2208      	movs	r2, #8
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	4413      	add	r3, r2
 8010902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f003 0307 	and.w	r3, r3, #7
 801090a:	2b00      	cmp	r3, #0
 801090c:	d015      	beq.n	801093a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f023 0307 	bic.w	r3, r3, #7
 8010914:	3308      	adds	r3, #8
 8010916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f003 0307 	and.w	r3, r3, #7
 801091e:	2b00      	cmp	r3, #0
 8010920:	d00b      	beq.n	801093a <pvPortMalloc+0x6e>
	__asm volatile
 8010922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010926:	f383 8811 	msr	BASEPRI, r3
 801092a:	f3bf 8f6f 	isb	sy
 801092e:	f3bf 8f4f 	dsb	sy
 8010932:	617b      	str	r3, [r7, #20]
}
 8010934:	bf00      	nop
 8010936:	bf00      	nop
 8010938:	e7fd      	b.n	8010936 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d06f      	beq.n	8010a20 <pvPortMalloc+0x154>
 8010940:	4b45      	ldr	r3, [pc, #276]	@ (8010a58 <pvPortMalloc+0x18c>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	429a      	cmp	r2, r3
 8010948:	d86a      	bhi.n	8010a20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801094a:	4b44      	ldr	r3, [pc, #272]	@ (8010a5c <pvPortMalloc+0x190>)
 801094c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801094e:	4b43      	ldr	r3, [pc, #268]	@ (8010a5c <pvPortMalloc+0x190>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010954:	e004      	b.n	8010960 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801095a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	429a      	cmp	r2, r3
 8010968:	d903      	bls.n	8010972 <pvPortMalloc+0xa6>
 801096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d1f1      	bne.n	8010956 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010972:	4b37      	ldr	r3, [pc, #220]	@ (8010a50 <pvPortMalloc+0x184>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010978:	429a      	cmp	r2, r3
 801097a:	d051      	beq.n	8010a20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801097c:	6a3b      	ldr	r3, [r7, #32]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2208      	movs	r2, #8
 8010982:	4413      	add	r3, r2
 8010984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	6a3b      	ldr	r3, [r7, #32]
 801098c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010990:	685a      	ldr	r2, [r3, #4]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	1ad2      	subs	r2, r2, r3
 8010996:	2308      	movs	r3, #8
 8010998:	005b      	lsls	r3, r3, #1
 801099a:	429a      	cmp	r2, r3
 801099c:	d920      	bls.n	80109e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801099e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	4413      	add	r3, r2
 80109a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80109a6:	69bb      	ldr	r3, [r7, #24]
 80109a8:	f003 0307 	and.w	r3, r3, #7
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d00b      	beq.n	80109c8 <pvPortMalloc+0xfc>
	__asm volatile
 80109b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109b4:	f383 8811 	msr	BASEPRI, r3
 80109b8:	f3bf 8f6f 	isb	sy
 80109bc:	f3bf 8f4f 	dsb	sy
 80109c0:	613b      	str	r3, [r7, #16]
}
 80109c2:	bf00      	nop
 80109c4:	bf00      	nop
 80109c6:	e7fd      	b.n	80109c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80109c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ca:	685a      	ldr	r2, [r3, #4]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	1ad2      	subs	r2, r2, r3
 80109d0:	69bb      	ldr	r3, [r7, #24]
 80109d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80109d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80109da:	69b8      	ldr	r0, [r7, #24]
 80109dc:	f000 f90c 	bl	8010bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80109e0:	4b1d      	ldr	r3, [pc, #116]	@ (8010a58 <pvPortMalloc+0x18c>)
 80109e2:	681a      	ldr	r2, [r3, #0]
 80109e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	1ad3      	subs	r3, r2, r3
 80109ea:	4a1b      	ldr	r2, [pc, #108]	@ (8010a58 <pvPortMalloc+0x18c>)
 80109ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80109ee:	4b1a      	ldr	r3, [pc, #104]	@ (8010a58 <pvPortMalloc+0x18c>)
 80109f0:	681a      	ldr	r2, [r3, #0]
 80109f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010a60 <pvPortMalloc+0x194>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d203      	bcs.n	8010a02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80109fa:	4b17      	ldr	r3, [pc, #92]	@ (8010a58 <pvPortMalloc+0x18c>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	4a18      	ldr	r2, [pc, #96]	@ (8010a60 <pvPortMalloc+0x194>)
 8010a00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a04:	685a      	ldr	r2, [r3, #4]
 8010a06:	4b13      	ldr	r3, [pc, #76]	@ (8010a54 <pvPortMalloc+0x188>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	431a      	orrs	r2, r3
 8010a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a12:	2200      	movs	r2, #0
 8010a14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010a16:	4b13      	ldr	r3, [pc, #76]	@ (8010a64 <pvPortMalloc+0x198>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	4a11      	ldr	r2, [pc, #68]	@ (8010a64 <pvPortMalloc+0x198>)
 8010a1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010a20:	f7fe f99e 	bl	800ed60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a24:	69fb      	ldr	r3, [r7, #28]
 8010a26:	f003 0307 	and.w	r3, r3, #7
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00b      	beq.n	8010a46 <pvPortMalloc+0x17a>
	__asm volatile
 8010a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	60fb      	str	r3, [r7, #12]
}
 8010a40:	bf00      	nop
 8010a42:	bf00      	nop
 8010a44:	e7fd      	b.n	8010a42 <pvPortMalloc+0x176>
	return pvReturn;
 8010a46:	69fb      	ldr	r3, [r7, #28]
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3728      	adds	r7, #40	@ 0x28
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	2406475c 	.word	0x2406475c
 8010a54:	24064770 	.word	0x24064770
 8010a58:	24064760 	.word	0x24064760
 8010a5c:	24064754 	.word	0x24064754
 8010a60:	24064764 	.word	0x24064764
 8010a64:	24064768 	.word	0x24064768

08010a68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b086      	sub	sp, #24
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d04f      	beq.n	8010b1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010a7a:	2308      	movs	r3, #8
 8010a7c:	425b      	negs	r3, r3
 8010a7e:	697a      	ldr	r2, [r7, #20]
 8010a80:	4413      	add	r3, r2
 8010a82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010a88:	693b      	ldr	r3, [r7, #16]
 8010a8a:	685a      	ldr	r2, [r3, #4]
 8010a8c:	4b25      	ldr	r3, [pc, #148]	@ (8010b24 <vPortFree+0xbc>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	4013      	ands	r3, r2
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d10b      	bne.n	8010aae <vPortFree+0x46>
	__asm volatile
 8010a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a9a:	f383 8811 	msr	BASEPRI, r3
 8010a9e:	f3bf 8f6f 	isb	sy
 8010aa2:	f3bf 8f4f 	dsb	sy
 8010aa6:	60fb      	str	r3, [r7, #12]
}
 8010aa8:	bf00      	nop
 8010aaa:	bf00      	nop
 8010aac:	e7fd      	b.n	8010aaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d00b      	beq.n	8010ace <vPortFree+0x66>
	__asm volatile
 8010ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aba:	f383 8811 	msr	BASEPRI, r3
 8010abe:	f3bf 8f6f 	isb	sy
 8010ac2:	f3bf 8f4f 	dsb	sy
 8010ac6:	60bb      	str	r3, [r7, #8]
}
 8010ac8:	bf00      	nop
 8010aca:	bf00      	nop
 8010acc:	e7fd      	b.n	8010aca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	685a      	ldr	r2, [r3, #4]
 8010ad2:	4b14      	ldr	r3, [pc, #80]	@ (8010b24 <vPortFree+0xbc>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	4013      	ands	r3, r2
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d01e      	beq.n	8010b1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d11a      	bne.n	8010b1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	685a      	ldr	r2, [r3, #4]
 8010ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8010b24 <vPortFree+0xbc>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	43db      	mvns	r3, r3
 8010aee:	401a      	ands	r2, r3
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010af4:	f7fe f926 	bl	800ed44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	685a      	ldr	r2, [r3, #4]
 8010afc:	4b0a      	ldr	r3, [pc, #40]	@ (8010b28 <vPortFree+0xc0>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	4413      	add	r3, r2
 8010b02:	4a09      	ldr	r2, [pc, #36]	@ (8010b28 <vPortFree+0xc0>)
 8010b04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010b06:	6938      	ldr	r0, [r7, #16]
 8010b08:	f000 f876 	bl	8010bf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010b0c:	4b07      	ldr	r3, [pc, #28]	@ (8010b2c <vPortFree+0xc4>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	3301      	adds	r3, #1
 8010b12:	4a06      	ldr	r2, [pc, #24]	@ (8010b2c <vPortFree+0xc4>)
 8010b14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010b16:	f7fe f923 	bl	800ed60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010b1a:	bf00      	nop
 8010b1c:	3718      	adds	r7, #24
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	24064770 	.word	0x24064770
 8010b28:	24064760 	.word	0x24064760
 8010b2c:	2406476c 	.word	0x2406476c

08010b30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010b30:	b480      	push	{r7}
 8010b32:	b085      	sub	sp, #20
 8010b34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010b36:	4b29      	ldr	r3, [pc, #164]	@ (8010bdc <prvHeapInit+0xac>)
 8010b38:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010b3a:	4b29      	ldr	r3, [pc, #164]	@ (8010be0 <prvHeapInit+0xb0>)
 8010b3c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f003 0307 	and.w	r3, r3, #7
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d00c      	beq.n	8010b62 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	3307      	adds	r3, #7
 8010b4c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	f023 0307 	bic.w	r3, r3, #7
 8010b54:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010b56:	68ba      	ldr	r2, [r7, #8]
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	1ad3      	subs	r3, r2, r3
 8010b5c:	4a20      	ldr	r2, [pc, #128]	@ (8010be0 <prvHeapInit+0xb0>)
 8010b5e:	4413      	add	r3, r2
 8010b60:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010b66:	4a1f      	ldr	r2, [pc, #124]	@ (8010be4 <prvHeapInit+0xb4>)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8010be4 <prvHeapInit+0xb4>)
 8010b6e:	2200      	movs	r2, #0
 8010b70:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	68ba      	ldr	r2, [r7, #8]
 8010b76:	4413      	add	r3, r2
 8010b78:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010b7a:	2208      	movs	r2, #8
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	1a9b      	subs	r3, r3, r2
 8010b80:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f023 0307 	bic.w	r3, r3, #7
 8010b88:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	4a16      	ldr	r2, [pc, #88]	@ (8010be8 <prvHeapInit+0xb8>)
 8010b8e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010b90:	4b15      	ldr	r3, [pc, #84]	@ (8010be8 <prvHeapInit+0xb8>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	2200      	movs	r2, #0
 8010b96:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010b98:	4b13      	ldr	r3, [pc, #76]	@ (8010be8 <prvHeapInit+0xb8>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	68fa      	ldr	r2, [r7, #12]
 8010ba8:	1ad2      	subs	r2, r2, r3
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010bae:	4b0e      	ldr	r3, [pc, #56]	@ (8010be8 <prvHeapInit+0xb8>)
 8010bb0:	681a      	ldr	r2, [r3, #0]
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	4a0c      	ldr	r2, [pc, #48]	@ (8010bec <prvHeapInit+0xbc>)
 8010bbc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8010bf0 <prvHeapInit+0xc0>)
 8010bc4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8010bf4 <prvHeapInit+0xc4>)
 8010bc8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010bcc:	601a      	str	r2, [r3, #0]
}
 8010bce:	bf00      	nop
 8010bd0:	3714      	adds	r7, #20
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	00030d40 	.word	0x00030d40
 8010be0:	24033a14 	.word	0x24033a14
 8010be4:	24064754 	.word	0x24064754
 8010be8:	2406475c 	.word	0x2406475c
 8010bec:	24064764 	.word	0x24064764
 8010bf0:	24064760 	.word	0x24064760
 8010bf4:	24064770 	.word	0x24064770

08010bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b085      	sub	sp, #20
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010c00:	4b28      	ldr	r3, [pc, #160]	@ (8010ca4 <prvInsertBlockIntoFreeList+0xac>)
 8010c02:	60fb      	str	r3, [r7, #12]
 8010c04:	e002      	b.n	8010c0c <prvInsertBlockIntoFreeList+0x14>
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	60fb      	str	r3, [r7, #12]
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	687a      	ldr	r2, [r7, #4]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d8f7      	bhi.n	8010c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	68ba      	ldr	r2, [r7, #8]
 8010c20:	4413      	add	r3, r2
 8010c22:	687a      	ldr	r2, [r7, #4]
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d108      	bne.n	8010c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	685a      	ldr	r2, [r3, #4]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	441a      	add	r2, r3
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	68ba      	ldr	r2, [r7, #8]
 8010c44:	441a      	add	r2, r3
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d118      	bne.n	8010c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	4b15      	ldr	r3, [pc, #84]	@ (8010ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d00d      	beq.n	8010c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	685a      	ldr	r2, [r3, #4]
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	441a      	add	r2, r3
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	681a      	ldr	r2, [r3, #0]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	601a      	str	r2, [r3, #0]
 8010c74:	e008      	b.n	8010c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010c76:	4b0c      	ldr	r3, [pc, #48]	@ (8010ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	601a      	str	r2, [r3, #0]
 8010c7e:	e003      	b.n	8010c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	681a      	ldr	r2, [r3, #0]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010c88:	68fa      	ldr	r2, [r7, #12]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d002      	beq.n	8010c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c96:	bf00      	nop
 8010c98:	3714      	adds	r7, #20
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca0:	4770      	bx	lr
 8010ca2:	bf00      	nop
 8010ca4:	24064754 	.word	0x24064754
 8010ca8:	2406475c 	.word	0x2406475c

08010cac <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8010cac:	4b04      	ldr	r3, [pc, #16]	@ (8010cc0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 8010cae:	681a      	ldr	r2, [r3, #0]
 8010cb0:	b10a      	cbz	r2, 8010cb6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xa>
 8010cb2:	4803      	ldr	r0, [pc, #12]	@ (8010cc0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 8010cb4:	4770      	bx	lr
 8010cb6:	4a03      	ldr	r2, [pc, #12]	@ (8010cc4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x18>)
 8010cb8:	4801      	ldr	r0, [pc, #4]	@ (8010cc0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 8010cba:	6812      	ldr	r2, [r2, #0]
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	4770      	bx	lr
 8010cc0:	24000020 	.word	0x24000020
 8010cc4:	24000e10 	.word	0x24000e10

08010cc8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8010cc8:	4a02      	ldr	r2, [pc, #8]	@ (8010cd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 8010cca:	4b03      	ldr	r3, [pc, #12]	@ (8010cd8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 8010ccc:	6812      	ldr	r2, [r2, #0]
 8010cce:	601a      	str	r2, [r3, #0]
 8010cd0:	4770      	bx	lr
 8010cd2:	bf00      	nop
 8010cd4:	24000e10 	.word	0x24000e10
 8010cd8:	24000020 	.word	0x24000020

08010cdc <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 8010cdc:	f004 b8be 	b.w	8014e5c <autoware_control_msgs__msg__Control__init>

08010ce0 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 8010ce0:	f004 b912 	b.w	8014f08 <autoware_control_msgs__msg__Control__fini>

08010ce4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8010ce4:	b510      	push	{r4, lr}
 8010ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8010d18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 8010ce8:	f001 f91e 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010cec:	60e0      	str	r0, [r4, #12]
 8010cee:	f001 f91b 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010cf2:	64a0      	str	r0, [r4, #72]	@ 0x48
 8010cf4:	f000 f81a 	bl	8010d2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 8010cf8:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8010cfc:	f000 f832 	bl	8010d64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8010d00:	4b06      	ldr	r3, [pc, #24]	@ (8010d1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8010d02:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8010d06:	681a      	ldr	r2, [r3, #0]
 8010d08:	b10a      	cbz	r2, 8010d0e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 8010d0a:	4804      	ldr	r0, [pc, #16]	@ (8010d1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8010d0c:	bd10      	pop	{r4, pc}
 8010d0e:	4a04      	ldr	r2, [pc, #16]	@ (8010d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 8010d10:	4802      	ldr	r0, [pc, #8]	@ (8010d1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8010d12:	6812      	ldr	r2, [r2, #0]
 8010d14:	601a      	str	r2, [r3, #0]
 8010d16:	bd10      	pop	{r4, pc}
 8010d18:	2400002c 	.word	0x2400002c
 8010d1c:	2400011c 	.word	0x2400011c
 8010d20:	24000e14 	.word	0x24000e14

08010d24 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 8010d24:	f004 b904 	b.w	8014f30 <autoware_control_msgs__msg__Lateral__init>

08010d28 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 8010d28:	f004 b926 	b.w	8014f78 <autoware_control_msgs__msg__Lateral__fini>

08010d2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 8010d2c:	b510      	push	{r4, lr}
 8010d2e:	4c08      	ldr	r4, [pc, #32]	@ (8010d50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 8010d30:	f001 f8fa 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d34:	60e0      	str	r0, [r4, #12]
 8010d36:	f001 f8f7 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d3a:	4b06      	ldr	r3, [pc, #24]	@ (8010d54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8010d3c:	64a0      	str	r0, [r4, #72]	@ 0x48
 8010d3e:	681a      	ldr	r2, [r3, #0]
 8010d40:	b10a      	cbz	r2, 8010d46 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 8010d42:	4804      	ldr	r0, [pc, #16]	@ (8010d54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8010d44:	bd10      	pop	{r4, pc}
 8010d46:	4a04      	ldr	r2, [pc, #16]	@ (8010d58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 8010d48:	4802      	ldr	r0, [pc, #8]	@ (8010d54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8010d4a:	6812      	ldr	r2, [r2, #0]
 8010d4c:	601a      	str	r2, [r3, #0]
 8010d4e:	bd10      	pop	{r4, pc}
 8010d50:	24000128 	.word	0x24000128
 8010d54:	24000254 	.word	0x24000254
 8010d58:	24000e14 	.word	0x24000e14

08010d5c <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 8010d5c:	f004 b918 	b.w	8014f90 <autoware_control_msgs__msg__Longitudinal__init>

08010d60 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 8010d60:	f004 b93a 	b.w	8014fd8 <autoware_control_msgs__msg__Longitudinal__fini>

08010d64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8010d64:	b510      	push	{r4, lr}
 8010d66:	4c08      	ldr	r4, [pc, #32]	@ (8010d88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 8010d68:	f001 f8de 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d6c:	60e0      	str	r0, [r4, #12]
 8010d6e:	f001 f8db 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d72:	4b06      	ldr	r3, [pc, #24]	@ (8010d8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8010d74:	64a0      	str	r0, [r4, #72]	@ 0x48
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	b10a      	cbz	r2, 8010d7e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 8010d7a:	4804      	ldr	r0, [pc, #16]	@ (8010d8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8010d7c:	bd10      	pop	{r4, pc}
 8010d7e:	4a04      	ldr	r2, [pc, #16]	@ (8010d90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 8010d80:	4802      	ldr	r0, [pc, #8]	@ (8010d8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8010d82:	6812      	ldr	r2, [r2, #0]
 8010d84:	601a      	str	r2, [r3, #0]
 8010d86:	bd10      	pop	{r4, pc}
 8010d88:	24000260 	.word	0x24000260
 8010d8c:	24000404 	.word	0x24000404
 8010d90:	24000e14 	.word	0x24000e14

08010d94 <get_serialized_size_autoware_control_msgs__msg__Control>:
 8010d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d96:	4604      	mov	r4, r0
 8010d98:	b1c8      	cbz	r0, 8010dce <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 8010d9a:	460f      	mov	r7, r1
 8010d9c:	f001 f8d2 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8010da0:	4606      	mov	r6, r0
 8010da2:	f104 0008 	add.w	r0, r4, #8
 8010da6:	443e      	add	r6, r7
 8010da8:	4631      	mov	r1, r6
 8010daa:	f001 f8cb 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8010dae:	4605      	mov	r5, r0
 8010db0:	f104 0010 	add.w	r0, r4, #16
 8010db4:	4435      	add	r5, r6
 8010db6:	4629      	mov	r1, r5
 8010db8:	f000 f8a2 	bl	8010f00 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 8010dbc:	4601      	mov	r1, r0
 8010dbe:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8010dc2:	440d      	add	r5, r1
 8010dc4:	4629      	mov	r1, r5
 8010dc6:	f000 f9a7 	bl	8011118 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8010dca:	1bc0      	subs	r0, r0, r7
 8010dcc:	4428      	add	r0, r5
 8010dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010dd0 <_Control__cdr_deserialize>:
 8010dd0:	b570      	push	{r4, r5, r6, lr}
 8010dd2:	460c      	mov	r4, r1
 8010dd4:	b329      	cbz	r1, 8010e22 <_Control__cdr_deserialize+0x52>
 8010dd6:	4605      	mov	r5, r0
 8010dd8:	f001 f918 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	4621      	mov	r1, r4
 8010de0:	4628      	mov	r0, r5
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	4798      	blx	r3
 8010de8:	f001 f910 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010dec:	4603      	mov	r3, r0
 8010dee:	f104 0108 	add.w	r1, r4, #8
 8010df2:	4628      	mov	r0, r5
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	68db      	ldr	r3, [r3, #12]
 8010df8:	4798      	blx	r3
 8010dfa:	f000 f95b 	bl	80110b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	f104 0110 	add.w	r1, r4, #16
 8010e04:	4628      	mov	r0, r5
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	68db      	ldr	r3, [r3, #12]
 8010e0a:	4798      	blx	r3
 8010e0c:	f000 fa28 	bl	8011260 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8010e10:	4603      	mov	r3, r0
 8010e12:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 8010e16:	4628      	mov	r0, r5
 8010e18:	685b      	ldr	r3, [r3, #4]
 8010e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	4718      	bx	r3
 8010e22:	4608      	mov	r0, r1
 8010e24:	bd70      	pop	{r4, r5, r6, pc}
 8010e26:	bf00      	nop

08010e28 <_Control__cdr_serialize>:
 8010e28:	b338      	cbz	r0, 8010e7a <_Control__cdr_serialize+0x52>
 8010e2a:	b570      	push	{r4, r5, r6, lr}
 8010e2c:	4604      	mov	r4, r0
 8010e2e:	460d      	mov	r5, r1
 8010e30:	f001 f8ec 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e34:	4603      	mov	r3, r0
 8010e36:	4629      	mov	r1, r5
 8010e38:	4620      	mov	r0, r4
 8010e3a:	685b      	ldr	r3, [r3, #4]
 8010e3c:	689b      	ldr	r3, [r3, #8]
 8010e3e:	4798      	blx	r3
 8010e40:	f001 f8e4 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e44:	4603      	mov	r3, r0
 8010e46:	4629      	mov	r1, r5
 8010e48:	f104 0008 	add.w	r0, r4, #8
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	689b      	ldr	r3, [r3, #8]
 8010e50:	4798      	blx	r3
 8010e52:	f000 f92f 	bl	80110b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 8010e56:	4603      	mov	r3, r0
 8010e58:	4629      	mov	r1, r5
 8010e5a:	f104 0010 	add.w	r0, r4, #16
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	689b      	ldr	r3, [r3, #8]
 8010e62:	4798      	blx	r3
 8010e64:	f000 f9fc 	bl	8011260 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	4629      	mov	r1, r5
 8010e6c:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8010e70:	685b      	ldr	r3, [r3, #4]
 8010e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e76:	689b      	ldr	r3, [r3, #8]
 8010e78:	4718      	bx	r3
 8010e7a:	4770      	bx	lr

08010e7c <_Control__get_serialized_size>:
 8010e7c:	b538      	push	{r3, r4, r5, lr}
 8010e7e:	4604      	mov	r4, r0
 8010e80:	b1b8      	cbz	r0, 8010eb2 <_Control__get_serialized_size+0x36>
 8010e82:	2100      	movs	r1, #0
 8010e84:	f001 f85e 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8010e88:	4605      	mov	r5, r0
 8010e8a:	f104 0008 	add.w	r0, r4, #8
 8010e8e:	4629      	mov	r1, r5
 8010e90:	f001 f858 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8010e94:	4601      	mov	r1, r0
 8010e96:	f104 0010 	add.w	r0, r4, #16
 8010e9a:	440d      	add	r5, r1
 8010e9c:	4629      	mov	r1, r5
 8010e9e:	f000 f82f 	bl	8010f00 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 8010ea2:	4601      	mov	r1, r0
 8010ea4:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8010ea8:	440d      	add	r5, r1
 8010eaa:	4629      	mov	r1, r5
 8010eac:	f000 f934 	bl	8011118 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8010eb0:	4428      	add	r0, r5
 8010eb2:	bd38      	pop	{r3, r4, r5, pc}

08010eb4 <_Control__max_serialized_size>:
 8010eb4:	b530      	push	{r4, r5, lr}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	2301      	movs	r3, #1
 8010eba:	2100      	movs	r1, #0
 8010ebc:	f10d 0007 	add.w	r0, sp, #7
 8010ec0:	f88d 3007 	strb.w	r3, [sp, #7]
 8010ec4:	f001 f88e 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8010ec8:	4604      	mov	r4, r0
 8010eca:	f10d 0007 	add.w	r0, sp, #7
 8010ece:	4621      	mov	r1, r4
 8010ed0:	f001 f888 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8010ed4:	4605      	mov	r5, r0
 8010ed6:	f10d 0007 	add.w	r0, sp, #7
 8010eda:	4425      	add	r5, r4
 8010edc:	4629      	mov	r1, r5
 8010ede:	f000 f8c7 	bl	8011070 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	f10d 0007 	add.w	r0, sp, #7
 8010ee8:	442c      	add	r4, r5
 8010eea:	4621      	mov	r1, r4
 8010eec:	f000 f980 	bl	80111f0 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8010ef0:	4420      	add	r0, r4
 8010ef2:	b003      	add	sp, #12
 8010ef4:	bd30      	pop	{r4, r5, pc}
 8010ef6:	bf00      	nop

08010ef8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8010ef8:	4800      	ldr	r0, [pc, #0]	@ (8010efc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 8010efa:	4770      	bx	lr
 8010efc:	24000410 	.word	0x24000410

08010f00 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 8010f00:	b5b0      	push	{r4, r5, r7, lr}
 8010f02:	4604      	mov	r4, r0
 8010f04:	b1f0      	cbz	r0, 8010f44 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 8010f06:	460d      	mov	r5, r1
 8010f08:	f001 f81c 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8010f0c:	4607      	mov	r7, r0
 8010f0e:	f104 0008 	add.w	r0, r4, #8
 8010f12:	442f      	add	r7, r5
 8010f14:	f1c5 0501 	rsb	r5, r5, #1
 8010f18:	4639      	mov	r1, r7
 8010f1a:	f001 f813 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8010f1e:	4407      	add	r7, r0
 8010f20:	2104      	movs	r1, #4
 8010f22:	4638      	mov	r0, r7
 8010f24:	f002 fb12 	bl	801354c <ucdr_alignment>
 8010f28:	2104      	movs	r1, #4
 8010f2a:	1844      	adds	r4, r0, r1
 8010f2c:	443c      	add	r4, r7
 8010f2e:	4620      	mov	r0, r4
 8010f30:	f002 fb0c 	bl	801354c <ucdr_alignment>
 8010f34:	3004      	adds	r0, #4
 8010f36:	2101      	movs	r1, #1
 8010f38:	4404      	add	r4, r0
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f002 fb06 	bl	801354c <ucdr_alignment>
 8010f40:	4428      	add	r0, r5
 8010f42:	4420      	add	r0, r4
 8010f44:	bdb0      	pop	{r4, r5, r7, pc}
 8010f46:	bf00      	nop

08010f48 <_Lateral__cdr_deserialize>:
 8010f48:	b538      	push	{r3, r4, r5, lr}
 8010f4a:	460c      	mov	r4, r1
 8010f4c:	b311      	cbz	r1, 8010f94 <_Lateral__cdr_deserialize+0x4c>
 8010f4e:	4605      	mov	r5, r0
 8010f50:	f001 f85c 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f54:	4603      	mov	r3, r0
 8010f56:	4621      	mov	r1, r4
 8010f58:	4628      	mov	r0, r5
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	4798      	blx	r3
 8010f60:	f001 f854 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f64:	4603      	mov	r3, r0
 8010f66:	f104 0108 	add.w	r1, r4, #8
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	4798      	blx	r3
 8010f72:	f104 0110 	add.w	r1, r4, #16
 8010f76:	4628      	mov	r0, r5
 8010f78:	f002 f86a 	bl	8013050 <ucdr_deserialize_float>
 8010f7c:	f104 0114 	add.w	r1, r4, #20
 8010f80:	4628      	mov	r0, r5
 8010f82:	f002 f865 	bl	8013050 <ucdr_deserialize_float>
 8010f86:	f104 0118 	add.w	r1, r4, #24
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f90:	f001 b856 	b.w	8012040 <ucdr_deserialize_bool>
 8010f94:	4608      	mov	r0, r1
 8010f96:	bd38      	pop	{r3, r4, r5, pc}

08010f98 <_Lateral__cdr_serialize>:
 8010f98:	b318      	cbz	r0, 8010fe2 <_Lateral__cdr_serialize+0x4a>
 8010f9a:	b538      	push	{r3, r4, r5, lr}
 8010f9c:	4604      	mov	r4, r0
 8010f9e:	460d      	mov	r5, r1
 8010fa0:	f001 f834 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	4629      	mov	r1, r5
 8010fa8:	4620      	mov	r0, r4
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	689b      	ldr	r3, [r3, #8]
 8010fae:	4798      	blx	r3
 8010fb0:	f001 f82c 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	4629      	mov	r1, r5
 8010fb8:	f104 0008 	add.w	r0, r4, #8
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	689b      	ldr	r3, [r3, #8]
 8010fc0:	4798      	blx	r3
 8010fc2:	ed94 0a04 	vldr	s0, [r4, #16]
 8010fc6:	4628      	mov	r0, r5
 8010fc8:	f001 ffaa 	bl	8012f20 <ucdr_serialize_float>
 8010fcc:	ed94 0a05 	vldr	s0, [r4, #20]
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	f001 ffa5 	bl	8012f20 <ucdr_serialize_float>
 8010fd6:	7e21      	ldrb	r1, [r4, #24]
 8010fd8:	4628      	mov	r0, r5
 8010fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fde:	f001 b819 	b.w	8012014 <ucdr_serialize_bool>
 8010fe2:	4770      	bx	lr

08010fe4 <_Lateral__get_serialized_size>:
 8010fe4:	b538      	push	{r3, r4, r5, lr}
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	b1d8      	cbz	r0, 8011022 <_Lateral__get_serialized_size+0x3e>
 8010fea:	2100      	movs	r1, #0
 8010fec:	f000 ffaa 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8010ff0:	4605      	mov	r5, r0
 8010ff2:	f104 0008 	add.w	r0, r4, #8
 8010ff6:	4629      	mov	r1, r5
 8010ff8:	f000 ffa4 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8010ffc:	4405      	add	r5, r0
 8010ffe:	2104      	movs	r1, #4
 8011000:	4628      	mov	r0, r5
 8011002:	f002 faa3 	bl	801354c <ucdr_alignment>
 8011006:	2104      	movs	r1, #4
 8011008:	4408      	add	r0, r1
 801100a:	1944      	adds	r4, r0, r5
 801100c:	4620      	mov	r0, r4
 801100e:	f002 fa9d 	bl	801354c <ucdr_alignment>
 8011012:	3004      	adds	r0, #4
 8011014:	2101      	movs	r1, #1
 8011016:	4404      	add	r4, r0
 8011018:	4620      	mov	r0, r4
 801101a:	f002 fa97 	bl	801354c <ucdr_alignment>
 801101e:	3001      	adds	r0, #1
 8011020:	4420      	add	r0, r4
 8011022:	bd38      	pop	{r3, r4, r5, pc}

08011024 <_Lateral__max_serialized_size>:
 8011024:	b530      	push	{r4, r5, lr}
 8011026:	b083      	sub	sp, #12
 8011028:	2501      	movs	r5, #1
 801102a:	2100      	movs	r1, #0
 801102c:	f10d 0007 	add.w	r0, sp, #7
 8011030:	f88d 5007 	strb.w	r5, [sp, #7]
 8011034:	f000 ffd6 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011038:	4604      	mov	r4, r0
 801103a:	f10d 0007 	add.w	r0, sp, #7
 801103e:	4621      	mov	r1, r4
 8011040:	f000 ffd0 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011044:	4404      	add	r4, r0
 8011046:	2104      	movs	r1, #4
 8011048:	4620      	mov	r0, r4
 801104a:	f002 fa7f 	bl	801354c <ucdr_alignment>
 801104e:	2104      	movs	r1, #4
 8011050:	4408      	add	r0, r1
 8011052:	4404      	add	r4, r0
 8011054:	4620      	mov	r0, r4
 8011056:	f002 fa79 	bl	801354c <ucdr_alignment>
 801105a:	3004      	adds	r0, #4
 801105c:	4629      	mov	r1, r5
 801105e:	4404      	add	r4, r0
 8011060:	4620      	mov	r0, r4
 8011062:	f002 fa73 	bl	801354c <ucdr_alignment>
 8011066:	4428      	add	r0, r5
 8011068:	4420      	add	r0, r4
 801106a:	b003      	add	sp, #12
 801106c:	bd30      	pop	{r4, r5, pc}
 801106e:	bf00      	nop

08011070 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 8011070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011072:	2701      	movs	r7, #1
 8011074:	460c      	mov	r4, r1
 8011076:	4606      	mov	r6, r0
 8011078:	7007      	strb	r7, [r0, #0]
 801107a:	f000 ffb3 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 801107e:	4605      	mov	r5, r0
 8011080:	4630      	mov	r0, r6
 8011082:	4425      	add	r5, r4
 8011084:	1b3c      	subs	r4, r7, r4
 8011086:	4629      	mov	r1, r5
 8011088:	f000 ffac 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 801108c:	4405      	add	r5, r0
 801108e:	2104      	movs	r1, #4
 8011090:	4628      	mov	r0, r5
 8011092:	f002 fa5b 	bl	801354c <ucdr_alignment>
 8011096:	2104      	movs	r1, #4
 8011098:	4408      	add	r0, r1
 801109a:	4405      	add	r5, r0
 801109c:	4628      	mov	r0, r5
 801109e:	f002 fa55 	bl	801354c <ucdr_alignment>
 80110a2:	3004      	adds	r0, #4
 80110a4:	4639      	mov	r1, r7
 80110a6:	4405      	add	r5, r0
 80110a8:	4628      	mov	r0, r5
 80110aa:	f002 fa4f 	bl	801354c <ucdr_alignment>
 80110ae:	4420      	add	r0, r4
 80110b0:	4428      	add	r0, r5
 80110b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080110b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 80110b4:	4800      	ldr	r0, [pc, #0]	@ (80110b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 80110b6:	4770      	bx	lr
 80110b8:	24000438 	.word	0x24000438

080110bc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 80110bc:	b570      	push	{r4, r5, r6, lr}
 80110be:	460c      	mov	r4, r1
 80110c0:	4606      	mov	r6, r0
 80110c2:	f000 ff3f 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 80110c6:	4605      	mov	r5, r0
 80110c8:	f106 0008 	add.w	r0, r6, #8
 80110cc:	4425      	add	r5, r4
 80110ce:	f1c4 0401 	rsb	r4, r4, #1
 80110d2:	4629      	mov	r1, r5
 80110d4:	f000 ff36 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 80110d8:	4405      	add	r5, r0
 80110da:	2104      	movs	r1, #4
 80110dc:	4628      	mov	r0, r5
 80110de:	f002 fa35 	bl	801354c <ucdr_alignment>
 80110e2:	2104      	movs	r1, #4
 80110e4:	4408      	add	r0, r1
 80110e6:	4405      	add	r5, r0
 80110e8:	4628      	mov	r0, r5
 80110ea:	f002 fa2f 	bl	801354c <ucdr_alignment>
 80110ee:	2104      	movs	r1, #4
 80110f0:	4408      	add	r0, r1
 80110f2:	1946      	adds	r6, r0, r5
 80110f4:	4630      	mov	r0, r6
 80110f6:	f002 fa29 	bl	801354c <ucdr_alignment>
 80110fa:	1d05      	adds	r5, r0, #4
 80110fc:	2101      	movs	r1, #1
 80110fe:	4435      	add	r5, r6
 8011100:	4628      	mov	r0, r5
 8011102:	f002 fa23 	bl	801354c <ucdr_alignment>
 8011106:	2101      	movs	r1, #1
 8011108:	4408      	add	r0, r1
 801110a:	4405      	add	r5, r0
 801110c:	4628      	mov	r0, r5
 801110e:	f002 fa1d 	bl	801354c <ucdr_alignment>
 8011112:	4420      	add	r0, r4
 8011114:	4428      	add	r0, r5
 8011116:	bd70      	pop	{r4, r5, r6, pc}

08011118 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 8011118:	b108      	cbz	r0, 801111e <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 801111a:	f7ff bfcf 	b.w	80110bc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 801111e:	4770      	bx	lr

08011120 <_Longitudinal__get_serialized_size>:
 8011120:	b110      	cbz	r0, 8011128 <_Longitudinal__get_serialized_size+0x8>
 8011122:	2100      	movs	r1, #0
 8011124:	f7ff bfca 	b.w	80110bc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop

0801112c <_Longitudinal__cdr_deserialize>:
 801112c:	b538      	push	{r3, r4, r5, lr}
 801112e:	460c      	mov	r4, r1
 8011130:	b361      	cbz	r1, 801118c <_Longitudinal__cdr_deserialize+0x60>
 8011132:	4605      	mov	r5, r0
 8011134:	f000 ff6a 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011138:	4603      	mov	r3, r0
 801113a:	4621      	mov	r1, r4
 801113c:	4628      	mov	r0, r5
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	4798      	blx	r3
 8011144:	f000 ff62 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011148:	4603      	mov	r3, r0
 801114a:	f104 0108 	add.w	r1, r4, #8
 801114e:	4628      	mov	r0, r5
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	4798      	blx	r3
 8011156:	f104 0110 	add.w	r1, r4, #16
 801115a:	4628      	mov	r0, r5
 801115c:	f001 ff78 	bl	8013050 <ucdr_deserialize_float>
 8011160:	f104 0114 	add.w	r1, r4, #20
 8011164:	4628      	mov	r0, r5
 8011166:	f001 ff73 	bl	8013050 <ucdr_deserialize_float>
 801116a:	f104 0118 	add.w	r1, r4, #24
 801116e:	4628      	mov	r0, r5
 8011170:	f001 ff6e 	bl	8013050 <ucdr_deserialize_float>
 8011174:	f104 011c 	add.w	r1, r4, #28
 8011178:	4628      	mov	r0, r5
 801117a:	f000 ff61 	bl	8012040 <ucdr_deserialize_bool>
 801117e:	f104 011d 	add.w	r1, r4, #29
 8011182:	4628      	mov	r0, r5
 8011184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011188:	f000 bf5a 	b.w	8012040 <ucdr_deserialize_bool>
 801118c:	4608      	mov	r0, r1
 801118e:	bd38      	pop	{r3, r4, r5, pc}

08011190 <_Longitudinal__cdr_serialize>:
 8011190:	b360      	cbz	r0, 80111ec <_Longitudinal__cdr_serialize+0x5c>
 8011192:	b538      	push	{r3, r4, r5, lr}
 8011194:	4604      	mov	r4, r0
 8011196:	460d      	mov	r5, r1
 8011198:	f000 ff38 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801119c:	4603      	mov	r3, r0
 801119e:	4629      	mov	r1, r5
 80111a0:	4620      	mov	r0, r4
 80111a2:	685b      	ldr	r3, [r3, #4]
 80111a4:	689b      	ldr	r3, [r3, #8]
 80111a6:	4798      	blx	r3
 80111a8:	f000 ff30 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80111ac:	4603      	mov	r3, r0
 80111ae:	4629      	mov	r1, r5
 80111b0:	f104 0008 	add.w	r0, r4, #8
 80111b4:	685b      	ldr	r3, [r3, #4]
 80111b6:	689b      	ldr	r3, [r3, #8]
 80111b8:	4798      	blx	r3
 80111ba:	ed94 0a04 	vldr	s0, [r4, #16]
 80111be:	4628      	mov	r0, r5
 80111c0:	f001 feae 	bl	8012f20 <ucdr_serialize_float>
 80111c4:	ed94 0a05 	vldr	s0, [r4, #20]
 80111c8:	4628      	mov	r0, r5
 80111ca:	f001 fea9 	bl	8012f20 <ucdr_serialize_float>
 80111ce:	ed94 0a06 	vldr	s0, [r4, #24]
 80111d2:	4628      	mov	r0, r5
 80111d4:	f001 fea4 	bl	8012f20 <ucdr_serialize_float>
 80111d8:	7f21      	ldrb	r1, [r4, #28]
 80111da:	4628      	mov	r0, r5
 80111dc:	f000 ff1a 	bl	8012014 <ucdr_serialize_bool>
 80111e0:	7f61      	ldrb	r1, [r4, #29]
 80111e2:	4628      	mov	r0, r5
 80111e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111e8:	f000 bf14 	b.w	8012014 <ucdr_serialize_bool>
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop

080111f0 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 80111f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111f2:	2701      	movs	r7, #1
 80111f4:	460c      	mov	r4, r1
 80111f6:	4606      	mov	r6, r0
 80111f8:	7007      	strb	r7, [r0, #0]
 80111fa:	f000 fef3 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 80111fe:	4605      	mov	r5, r0
 8011200:	4630      	mov	r0, r6
 8011202:	4425      	add	r5, r4
 8011204:	1b3c      	subs	r4, r7, r4
 8011206:	4629      	mov	r1, r5
 8011208:	f000 feec 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 801120c:	4405      	add	r5, r0
 801120e:	2104      	movs	r1, #4
 8011210:	4628      	mov	r0, r5
 8011212:	f002 f99b 	bl	801354c <ucdr_alignment>
 8011216:	2104      	movs	r1, #4
 8011218:	4408      	add	r0, r1
 801121a:	4405      	add	r5, r0
 801121c:	4628      	mov	r0, r5
 801121e:	f002 f995 	bl	801354c <ucdr_alignment>
 8011222:	2104      	movs	r1, #4
 8011224:	4408      	add	r0, r1
 8011226:	1946      	adds	r6, r0, r5
 8011228:	4630      	mov	r0, r6
 801122a:	f002 f98f 	bl	801354c <ucdr_alignment>
 801122e:	1d05      	adds	r5, r0, #4
 8011230:	4639      	mov	r1, r7
 8011232:	4435      	add	r5, r6
 8011234:	4628      	mov	r0, r5
 8011236:	f002 f989 	bl	801354c <ucdr_alignment>
 801123a:	4438      	add	r0, r7
 801123c:	4639      	mov	r1, r7
 801123e:	4405      	add	r5, r0
 8011240:	4628      	mov	r0, r5
 8011242:	f002 f983 	bl	801354c <ucdr_alignment>
 8011246:	4420      	add	r0, r4
 8011248:	4428      	add	r0, r5
 801124a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801124c <_Longitudinal__max_serialized_size>:
 801124c:	b500      	push	{lr}
 801124e:	b083      	sub	sp, #12
 8011250:	2100      	movs	r1, #0
 8011252:	f10d 0007 	add.w	r0, sp, #7
 8011256:	f7ff ffcb 	bl	80111f0 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 801125a:	b003      	add	sp, #12
 801125c:	f85d fb04 	ldr.w	pc, [sp], #4

08011260 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8011260:	4800      	ldr	r0, [pc, #0]	@ (8011264 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 8011262:	4770      	bx	lr
 8011264:	24000460 	.word	0x24000460

08011268 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8011268:	4b04      	ldr	r3, [pc, #16]	@ (801127c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	b10a      	cbz	r2, 8011272 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xa>
 801126e:	4803      	ldr	r0, [pc, #12]	@ (801127c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011270:	4770      	bx	lr
 8011272:	4a03      	ldr	r2, [pc, #12]	@ (8011280 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x18>)
 8011274:	4801      	ldr	r0, [pc, #4]	@ (801127c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011276:	6812      	ldr	r2, [r2, #0]
 8011278:	601a      	str	r2, [r3, #0]
 801127a:	4770      	bx	lr
 801127c:	24000490 	.word	0x24000490
 8011280:	24000e10 	.word	0x24000e10

08011284 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011284:	4b04      	ldr	r3, [pc, #16]	@ (8011298 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 8011286:	4805      	ldr	r0, [pc, #20]	@ (801129c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	4905      	ldr	r1, [pc, #20]	@ (80112a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 801128c:	4a05      	ldr	r2, [pc, #20]	@ (80112a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801128e:	6003      	str	r3, [r0, #0]
 8011290:	600b      	str	r3, [r1, #0]
 8011292:	6013      	str	r3, [r2, #0]
 8011294:	4770      	bx	lr
 8011296:	bf00      	nop
 8011298:	24000e10 	.word	0x24000e10
 801129c:	240004ac 	.word	0x240004ac
 80112a0:	240004b8 	.word	0x240004b8
 80112a4:	24000490 	.word	0x24000490

080112a8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 80112a8:	4b04      	ldr	r3, [pc, #16]	@ (80112bc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	b10a      	cbz	r2, 80112b2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xa>
 80112ae:	4803      	ldr	r0, [pc, #12]	@ (80112bc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 80112b0:	4770      	bx	lr
 80112b2:	4a03      	ldr	r2, [pc, #12]	@ (80112c0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x18>)
 80112b4:	4801      	ldr	r0, [pc, #4]	@ (80112bc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 80112b6:	6812      	ldr	r2, [r2, #0]
 80112b8:	601a      	str	r2, [r3, #0]
 80112ba:	4770      	bx	lr
 80112bc:	240004cc 	.word	0x240004cc
 80112c0:	24000e10 	.word	0x24000e10

080112c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 80112c4:	4a02      	ldr	r2, [pc, #8]	@ (80112d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 80112c6:	4b03      	ldr	r3, [pc, #12]	@ (80112d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 80112c8:	6812      	ldr	r2, [r2, #0]
 80112ca:	601a      	str	r2, [r3, #0]
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop
 80112d0:	24000e10 	.word	0x24000e10
 80112d4:	240004cc 	.word	0x240004cc

080112d8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 80112d8:	4b04      	ldr	r3, [pc, #16]	@ (80112ec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 80112da:	681a      	ldr	r2, [r3, #0]
 80112dc:	b10a      	cbz	r2, 80112e2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xa>
 80112de:	4803      	ldr	r0, [pc, #12]	@ (80112ec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 80112e0:	4770      	bx	lr
 80112e2:	4a03      	ldr	r2, [pc, #12]	@ (80112f0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x18>)
 80112e4:	4801      	ldr	r0, [pc, #4]	@ (80112ec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 80112e6:	6812      	ldr	r2, [r2, #0]
 80112e8:	601a      	str	r2, [r3, #0]
 80112ea:	4770      	bx	lr
 80112ec:	240004e0 	.word	0x240004e0
 80112f0:	24000e10 	.word	0x24000e10

080112f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 80112f4:	4a02      	ldr	r2, [pc, #8]	@ (8011300 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 80112f6:	4b03      	ldr	r3, [pc, #12]	@ (8011304 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 80112f8:	6812      	ldr	r2, [r2, #0]
 80112fa:	601a      	str	r2, [r3, #0]
 80112fc:	4770      	bx	lr
 80112fe:	bf00      	nop
 8011300:	24000e10 	.word	0x24000e10
 8011304:	240004e0 	.word	0x240004e0

08011308 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8011308:	4b04      	ldr	r3, [pc, #16]	@ (801131c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 801130a:	681a      	ldr	r2, [r3, #0]
 801130c:	b10a      	cbz	r2, 8011312 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xa>
 801130e:	4803      	ldr	r0, [pc, #12]	@ (801131c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 8011310:	4770      	bx	lr
 8011312:	4a03      	ldr	r2, [pc, #12]	@ (8011320 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x18>)
 8011314:	4801      	ldr	r0, [pc, #4]	@ (801131c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 8011316:	6812      	ldr	r2, [r2, #0]
 8011318:	601a      	str	r2, [r3, #0]
 801131a:	4770      	bx	lr
 801131c:	240004f4 	.word	0x240004f4
 8011320:	24000e10 	.word	0x24000e10

08011324 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8011324:	4a02      	ldr	r2, [pc, #8]	@ (8011330 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 8011326:	4b03      	ldr	r3, [pc, #12]	@ (8011334 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 8011328:	6812      	ldr	r2, [r2, #0]
 801132a:	601a      	str	r2, [r3, #0]
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	24000e10 	.word	0x24000e10
 8011334:	240004f4 	.word	0x240004f4

08011338 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8011338:	4b04      	ldr	r3, [pc, #16]	@ (801134c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 801133a:	681a      	ldr	r2, [r3, #0]
 801133c:	b10a      	cbz	r2, 8011342 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xa>
 801133e:	4803      	ldr	r0, [pc, #12]	@ (801134c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011340:	4770      	bx	lr
 8011342:	4a03      	ldr	r2, [pc, #12]	@ (8011350 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 8011344:	4801      	ldr	r0, [pc, #4]	@ (801134c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011346:	6812      	ldr	r2, [r2, #0]
 8011348:	601a      	str	r2, [r3, #0]
 801134a:	4770      	bx	lr
 801134c:	24000508 	.word	0x24000508
 8011350:	24000e10 	.word	0x24000e10

08011354 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8011354:	4a02      	ldr	r2, [pc, #8]	@ (8011360 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 8011356:	4b03      	ldr	r3, [pc, #12]	@ (8011364 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 8011358:	6812      	ldr	r2, [r2, #0]
 801135a:	601a      	str	r2, [r3, #0]
 801135c:	4770      	bx	lr
 801135e:	bf00      	nop
 8011360:	24000e10 	.word	0x24000e10
 8011364:	24000508 	.word	0x24000508

08011368 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011368:	4b04      	ldr	r3, [pc, #16]	@ (801137c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 801136a:	681a      	ldr	r2, [r3, #0]
 801136c:	b10a      	cbz	r2, 8011372 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xa>
 801136e:	4803      	ldr	r0, [pc, #12]	@ (801137c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011370:	4770      	bx	lr
 8011372:	4a03      	ldr	r2, [pc, #12]	@ (8011380 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x18>)
 8011374:	4801      	ldr	r0, [pc, #4]	@ (801137c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011376:	6812      	ldr	r2, [r2, #0]
 8011378:	601a      	str	r2, [r3, #0]
 801137a:	4770      	bx	lr
 801137c:	2400051c 	.word	0x2400051c
 8011380:	24000e10 	.word	0x24000e10

08011384 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011384:	4a02      	ldr	r2, [pc, #8]	@ (8011390 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8011386:	4b03      	ldr	r3, [pc, #12]	@ (8011394 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8011388:	6812      	ldr	r2, [r2, #0]
 801138a:	601a      	str	r2, [r3, #0]
 801138c:	4770      	bx	lr
 801138e:	bf00      	nop
 8011390:	24000e10 	.word	0x24000e10
 8011394:	2400051c 	.word	0x2400051c

08011398 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8011398:	4b04      	ldr	r3, [pc, #16]	@ (80113ac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	b10a      	cbz	r2, 80113a2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xa>
 801139e:	4803      	ldr	r0, [pc, #12]	@ (80113ac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 80113a0:	4770      	bx	lr
 80113a2:	4a03      	ldr	r2, [pc, #12]	@ (80113b0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x18>)
 80113a4:	4801      	ldr	r0, [pc, #4]	@ (80113ac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 80113a6:	6812      	ldr	r2, [r2, #0]
 80113a8:	601a      	str	r2, [r3, #0]
 80113aa:	4770      	bx	lr
 80113ac:	24000530 	.word	0x24000530
 80113b0:	24000e10 	.word	0x24000e10

080113b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 80113b4:	4a02      	ldr	r2, [pc, #8]	@ (80113c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 80113b6:	4b03      	ldr	r3, [pc, #12]	@ (80113c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 80113b8:	6812      	ldr	r2, [r2, #0]
 80113ba:	601a      	str	r2, [r3, #0]
 80113bc:	4770      	bx	lr
 80113be:	bf00      	nop
 80113c0:	24000e10 	.word	0x24000e10
 80113c4:	24000530 	.word	0x24000530

080113c8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80113c8:	4b04      	ldr	r3, [pc, #16]	@ (80113dc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	b10a      	cbz	r2, 80113d2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 80113ce:	4803      	ldr	r0, [pc, #12]	@ (80113dc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 80113d0:	4770      	bx	lr
 80113d2:	4a03      	ldr	r2, [pc, #12]	@ (80113e0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 80113d4:	4801      	ldr	r0, [pc, #4]	@ (80113dc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 80113d6:	6812      	ldr	r2, [r2, #0]
 80113d8:	601a      	str	r2, [r3, #0]
 80113da:	4770      	bx	lr
 80113dc:	24000544 	.word	0x24000544
 80113e0:	24000e10 	.word	0x24000e10

080113e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80113e4:	4a02      	ldr	r2, [pc, #8]	@ (80113f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 80113e6:	4b03      	ldr	r3, [pc, #12]	@ (80113f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 80113e8:	6812      	ldr	r2, [r2, #0]
 80113ea:	601a      	str	r2, [r3, #0]
 80113ec:	4770      	bx	lr
 80113ee:	bf00      	nop
 80113f0:	24000e10 	.word	0x24000e10
 80113f4:	24000544 	.word	0x24000544

080113f8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 80113f8:	4b04      	ldr	r3, [pc, #16]	@ (801140c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 80113fa:	681a      	ldr	r2, [r3, #0]
 80113fc:	b10a      	cbz	r2, 8011402 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 80113fe:	4803      	ldr	r0, [pc, #12]	@ (801140c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8011400:	4770      	bx	lr
 8011402:	4a03      	ldr	r2, [pc, #12]	@ (8011410 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 8011404:	4801      	ldr	r0, [pc, #4]	@ (801140c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8011406:	6812      	ldr	r2, [r2, #0]
 8011408:	601a      	str	r2, [r3, #0]
 801140a:	4770      	bx	lr
 801140c:	24000558 	.word	0x24000558
 8011410:	24000e10 	.word	0x24000e10

08011414 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011414:	4a02      	ldr	r2, [pc, #8]	@ (8011420 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 8011416:	4b03      	ldr	r3, [pc, #12]	@ (8011424 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 8011418:	6812      	ldr	r2, [r2, #0]
 801141a:	601a      	str	r2, [r3, #0]
 801141c:	4770      	bx	lr
 801141e:	bf00      	nop
 8011420:	24000e10 	.word	0x24000e10
 8011424:	24000558 	.word	0x24000558

08011428 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8011428:	4b04      	ldr	r3, [pc, #16]	@ (801143c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	b10a      	cbz	r2, 8011432 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xa>
 801142e:	4803      	ldr	r0, [pc, #12]	@ (801143c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 8011430:	4770      	bx	lr
 8011432:	4a03      	ldr	r2, [pc, #12]	@ (8011440 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x18>)
 8011434:	4801      	ldr	r0, [pc, #4]	@ (801143c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 8011436:	6812      	ldr	r2, [r2, #0]
 8011438:	601a      	str	r2, [r3, #0]
 801143a:	4770      	bx	lr
 801143c:	2400056c 	.word	0x2400056c
 8011440:	24000e10 	.word	0x24000e10

08011444 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8011444:	4a02      	ldr	r2, [pc, #8]	@ (8011450 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 8011446:	4b03      	ldr	r3, [pc, #12]	@ (8011454 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 8011448:	6812      	ldr	r2, [r2, #0]
 801144a:	601a      	str	r2, [r3, #0]
 801144c:	4770      	bx	lr
 801144e:	bf00      	nop
 8011450:	24000e10 	.word	0x24000e10
 8011454:	2400056c 	.word	0x2400056c

08011458 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 8011458:	f003 bdca 	b.w	8014ff0 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

0801145c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 801145c:	f003 bdda 	b.w	8015014 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

08011460 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 8011460:	f003 bddc 	b.w	801501c <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

08011464 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 8011464:	f003 bdde 	b.w	8015024 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

08011468 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011468:	b508      	push	{r3, lr}
 801146a:	f000 fd5d 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801146e:	4b06      	ldr	r3, [pc, #24]	@ (8011488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011470:	4906      	ldr	r1, [pc, #24]	@ (801148c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 8011472:	681a      	ldr	r2, [r3, #0]
 8011474:	60c8      	str	r0, [r1, #12]
 8011476:	b10a      	cbz	r2, 801147c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 8011478:	4803      	ldr	r0, [pc, #12]	@ (8011488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801147a:	bd08      	pop	{r3, pc}
 801147c:	4a04      	ldr	r2, [pc, #16]	@ (8011490 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 801147e:	4802      	ldr	r0, [pc, #8]	@ (8011488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011480:	6812      	ldr	r2, [r2, #0]
 8011482:	601a      	str	r2, [r3, #0]
 8011484:	bd08      	pop	{r3, pc}
 8011486:	bf00      	nop
 8011488:	240005f0 	.word	0x240005f0
 801148c:	24000578 	.word	0x24000578
 8011490:	24000e14 	.word	0x24000e14

08011494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8011494:	4b04      	ldr	r3, [pc, #16]	@ (80114a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8011496:	681a      	ldr	r2, [r3, #0]
 8011498:	b10a      	cbz	r2, 801149e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 801149a:	4803      	ldr	r0, [pc, #12]	@ (80114a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 801149c:	4770      	bx	lr
 801149e:	4a03      	ldr	r2, [pc, #12]	@ (80114ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 80114a0:	4801      	ldr	r0, [pc, #4]	@ (80114a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80114a2:	6812      	ldr	r2, [r2, #0]
 80114a4:	601a      	str	r2, [r3, #0]
 80114a6:	4770      	bx	lr
 80114a8:	24000638 	.word	0x24000638
 80114ac:	24000e14 	.word	0x24000e14

080114b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 80114b0:	4b16      	ldr	r3, [pc, #88]	@ (801150c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 80114b2:	681a      	ldr	r2, [r3, #0]
 80114b4:	b510      	push	{r4, lr}
 80114b6:	b132      	cbz	r2, 80114c6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 80114b8:	685c      	ldr	r4, [r3, #4]
 80114ba:	68a3      	ldr	r3, [r4, #8]
 80114bc:	b153      	cbz	r3, 80114d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 80114be:	68e3      	ldr	r3, [r4, #12]
 80114c0:	b1a3      	cbz	r3, 80114ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 80114c2:	4812      	ldr	r0, [pc, #72]	@ (801150c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 80114c4:	bd10      	pop	{r4, pc}
 80114c6:	4a12      	ldr	r2, [pc, #72]	@ (8011510 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 80114c8:	685c      	ldr	r4, [r3, #4]
 80114ca:	6812      	ldr	r2, [r2, #0]
 80114cc:	601a      	str	r2, [r3, #0]
 80114ce:	68a3      	ldr	r3, [r4, #8]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d1f4      	bne.n	80114be <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 80114d4:	f000 fd28 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80114d8:	4b0e      	ldr	r3, [pc, #56]	@ (8011514 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 80114da:	490f      	ldr	r1, [pc, #60]	@ (8011518 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	60c8      	str	r0, [r1, #12]
 80114e0:	b17a      	cbz	r2, 8011502 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	60a3      	str	r3, [r4, #8]
 80114e6:	68e3      	ldr	r3, [r4, #12]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d1ea      	bne.n	80114c2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 80114ec:	4b0b      	ldr	r3, [pc, #44]	@ (801151c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 80114ee:	681a      	ldr	r2, [r3, #0]
 80114f0:	b11a      	cbz	r2, 80114fa <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	4805      	ldr	r0, [pc, #20]	@ (801150c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 80114f6:	60e3      	str	r3, [r4, #12]
 80114f8:	bd10      	pop	{r4, pc}
 80114fa:	4a05      	ldr	r2, [pc, #20]	@ (8011510 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 80114fc:	6812      	ldr	r2, [r2, #0]
 80114fe:	601a      	str	r2, [r3, #0]
 8011500:	e7f7      	b.n	80114f2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 8011502:	4a03      	ldr	r2, [pc, #12]	@ (8011510 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8011504:	6812      	ldr	r2, [r2, #0]
 8011506:	601a      	str	r2, [r3, #0]
 8011508:	e7eb      	b.n	80114e2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 801150a:	bf00      	nop
 801150c:	24000654 	.word	0x24000654
 8011510:	24000e14 	.word	0x24000e14
 8011514:	240005f0 	.word	0x240005f0
 8011518:	24000578 	.word	0x24000578
 801151c:	24000638 	.word	0x24000638

08011520 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 8011520:	f003 bd82 	b.w	8015028 <autoware_vehicle_msgs__msg__ControlModeReport__init>

08011524 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 8011524:	f003 bd92 	b.w	801504c <autoware_vehicle_msgs__msg__ControlModeReport__fini>

08011528 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8011528:	b508      	push	{r3, lr}
 801152a:	f000 fcfd 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801152e:	4b06      	ldr	r3, [pc, #24]	@ (8011548 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8011530:	4906      	ldr	r1, [pc, #24]	@ (801154c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	60c8      	str	r0, [r1, #12]
 8011536:	b10a      	cbz	r2, 801153c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 8011538:	4803      	ldr	r0, [pc, #12]	@ (8011548 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 801153a:	bd08      	pop	{r3, pc}
 801153c:	4a04      	ldr	r2, [pc, #16]	@ (8011550 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 801153e:	4802      	ldr	r0, [pc, #8]	@ (8011548 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8011540:	6812      	ldr	r2, [r2, #0]
 8011542:	601a      	str	r2, [r3, #0]
 8011544:	bd08      	pop	{r3, pc}
 8011546:	bf00      	nop
 8011548:	240006d8 	.word	0x240006d8
 801154c:	24000660 	.word	0x24000660
 8011550:	24000e14 	.word	0x24000e14

08011554 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 8011554:	f003 bd7e 	b.w	8015054 <autoware_vehicle_msgs__msg__GearCommand__init>

08011558 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 8011558:	f003 bd8e 	b.w	8015078 <autoware_vehicle_msgs__msg__GearCommand__fini>

0801155c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 801155c:	b508      	push	{r3, lr}
 801155e:	f000 fce3 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011562:	4b06      	ldr	r3, [pc, #24]	@ (801157c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8011564:	4906      	ldr	r1, [pc, #24]	@ (8011580 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 8011566:	681a      	ldr	r2, [r3, #0]
 8011568:	60c8      	str	r0, [r1, #12]
 801156a:	b10a      	cbz	r2, 8011570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 801156c:	4803      	ldr	r0, [pc, #12]	@ (801157c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 801156e:	bd08      	pop	{r3, pc}
 8011570:	4a04      	ldr	r2, [pc, #16]	@ (8011584 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 8011572:	4802      	ldr	r0, [pc, #8]	@ (801157c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8011574:	6812      	ldr	r2, [r2, #0]
 8011576:	601a      	str	r2, [r3, #0]
 8011578:	bd08      	pop	{r3, pc}
 801157a:	bf00      	nop
 801157c:	2400075c 	.word	0x2400075c
 8011580:	240006e4 	.word	0x240006e4
 8011584:	24000e14 	.word	0x24000e14

08011588 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 8011588:	f003 bd7a 	b.w	8015080 <autoware_vehicle_msgs__msg__GearReport__init>

0801158c <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 801158c:	f003 bd8a 	b.w	80150a4 <autoware_vehicle_msgs__msg__GearReport__fini>

08011590 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8011590:	b508      	push	{r3, lr}
 8011592:	f000 fcc9 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011596:	4b06      	ldr	r3, [pc, #24]	@ (80115b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8011598:	4906      	ldr	r1, [pc, #24]	@ (80115b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 801159a:	681a      	ldr	r2, [r3, #0]
 801159c:	60c8      	str	r0, [r1, #12]
 801159e:	b10a      	cbz	r2, 80115a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 80115a0:	4803      	ldr	r0, [pc, #12]	@ (80115b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 80115a2:	bd08      	pop	{r3, pc}
 80115a4:	4a04      	ldr	r2, [pc, #16]	@ (80115b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 80115a6:	4802      	ldr	r0, [pc, #8]	@ (80115b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 80115a8:	6812      	ldr	r2, [r2, #0]
 80115aa:	601a      	str	r2, [r3, #0]
 80115ac:	bd08      	pop	{r3, pc}
 80115ae:	bf00      	nop
 80115b0:	240007e0 	.word	0x240007e0
 80115b4:	24000768 	.word	0x24000768
 80115b8:	24000e14 	.word	0x24000e14

080115bc <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 80115bc:	f003 bd76 	b.w	80150ac <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

080115c0 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 80115c0:	f003 bd86 	b.w	80150d0 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

080115c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 80115c4:	b508      	push	{r3, lr}
 80115c6:	f000 fcaf 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80115ca:	4b06      	ldr	r3, [pc, #24]	@ (80115e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 80115cc:	4906      	ldr	r1, [pc, #24]	@ (80115e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 80115ce:	681a      	ldr	r2, [r3, #0]
 80115d0:	60c8      	str	r0, [r1, #12]
 80115d2:	b10a      	cbz	r2, 80115d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 80115d4:	4803      	ldr	r0, [pc, #12]	@ (80115e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 80115d6:	bd08      	pop	{r3, pc}
 80115d8:	4a04      	ldr	r2, [pc, #16]	@ (80115ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 80115da:	4802      	ldr	r0, [pc, #8]	@ (80115e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 80115dc:	6812      	ldr	r2, [r2, #0]
 80115de:	601a      	str	r2, [r3, #0]
 80115e0:	bd08      	pop	{r3, pc}
 80115e2:	bf00      	nop
 80115e4:	24000864 	.word	0x24000864
 80115e8:	240007ec 	.word	0x240007ec
 80115ec:	24000e14 	.word	0x24000e14

080115f0 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 80115f0:	f003 bd72 	b.w	80150d8 <autoware_vehicle_msgs__msg__HazardLightsReport__init>

080115f4 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 80115f4:	f003 bd82 	b.w	80150fc <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

080115f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 80115f8:	b508      	push	{r3, lr}
 80115fa:	f000 fc95 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80115fe:	4b06      	ldr	r3, [pc, #24]	@ (8011618 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8011600:	4906      	ldr	r1, [pc, #24]	@ (801161c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8011602:	681a      	ldr	r2, [r3, #0]
 8011604:	60c8      	str	r0, [r1, #12]
 8011606:	b10a      	cbz	r2, 801160c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 8011608:	4803      	ldr	r0, [pc, #12]	@ (8011618 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 801160a:	bd08      	pop	{r3, pc}
 801160c:	4a04      	ldr	r2, [pc, #16]	@ (8011620 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 801160e:	4802      	ldr	r0, [pc, #8]	@ (8011618 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8011610:	6812      	ldr	r2, [r2, #0]
 8011612:	601a      	str	r2, [r3, #0]
 8011614:	bd08      	pop	{r3, pc}
 8011616:	bf00      	nop
 8011618:	240008e8 	.word	0x240008e8
 801161c:	24000870 	.word	0x24000870
 8011620:	24000e14 	.word	0x24000e14

08011624 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8011624:	f003 bd6e 	b.w	8015104 <autoware_vehicle_msgs__msg__SteeringReport__init>

08011628 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 8011628:	f003 bd7e 	b.w	8015128 <autoware_vehicle_msgs__msg__SteeringReport__fini>

0801162c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 801162c:	b508      	push	{r3, lr}
 801162e:	f000 fc7b 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011632:	4b06      	ldr	r3, [pc, #24]	@ (801164c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8011634:	4906      	ldr	r1, [pc, #24]	@ (8011650 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	60c8      	str	r0, [r1, #12]
 801163a:	b10a      	cbz	r2, 8011640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 801163c:	4803      	ldr	r0, [pc, #12]	@ (801164c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 801163e:	bd08      	pop	{r3, pc}
 8011640:	4a04      	ldr	r2, [pc, #16]	@ (8011654 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 8011642:	4802      	ldr	r0, [pc, #8]	@ (801164c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8011644:	6812      	ldr	r2, [r2, #0]
 8011646:	601a      	str	r2, [r3, #0]
 8011648:	bd08      	pop	{r3, pc}
 801164a:	bf00      	nop
 801164c:	2400096c 	.word	0x2400096c
 8011650:	240008f4 	.word	0x240008f4
 8011654:	24000e14 	.word	0x24000e14

08011658 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 8011658:	f003 bd6a 	b.w	8015130 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

0801165c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 801165c:	f003 bd7a 	b.w	8015154 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

08011660 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8011660:	b508      	push	{r3, lr}
 8011662:	f000 fc61 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011666:	4b06      	ldr	r3, [pc, #24]	@ (8011680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8011668:	4906      	ldr	r1, [pc, #24]	@ (8011684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	60c8      	str	r0, [r1, #12]
 801166e:	b10a      	cbz	r2, 8011674 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 8011670:	4803      	ldr	r0, [pc, #12]	@ (8011680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8011672:	bd08      	pop	{r3, pc}
 8011674:	4a04      	ldr	r2, [pc, #16]	@ (8011688 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 8011676:	4802      	ldr	r0, [pc, #8]	@ (8011680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8011678:	6812      	ldr	r2, [r2, #0]
 801167a:	601a      	str	r2, [r3, #0]
 801167c:	bd08      	pop	{r3, pc}
 801167e:	bf00      	nop
 8011680:	240009f0 	.word	0x240009f0
 8011684:	24000978 	.word	0x24000978
 8011688:	24000e14 	.word	0x24000e14

0801168c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 801168c:	f003 bd66 	b.w	801515c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

08011690 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 8011690:	f003 bd76 	b.w	8015180 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

08011694 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011694:	b508      	push	{r3, lr}
 8011696:	f000 fc47 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801169a:	4b06      	ldr	r3, [pc, #24]	@ (80116b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 801169c:	4906      	ldr	r1, [pc, #24]	@ (80116b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 801169e:	681a      	ldr	r2, [r3, #0]
 80116a0:	60c8      	str	r0, [r1, #12]
 80116a2:	b10a      	cbz	r2, 80116a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 80116a4:	4803      	ldr	r0, [pc, #12]	@ (80116b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80116a6:	bd08      	pop	{r3, pc}
 80116a8:	4a04      	ldr	r2, [pc, #16]	@ (80116bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 80116aa:	4802      	ldr	r0, [pc, #8]	@ (80116b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80116ac:	6812      	ldr	r2, [r2, #0]
 80116ae:	601a      	str	r2, [r3, #0]
 80116b0:	bd08      	pop	{r3, pc}
 80116b2:	bf00      	nop
 80116b4:	24000a74 	.word	0x24000a74
 80116b8:	240009fc 	.word	0x240009fc
 80116bc:	24000e14 	.word	0x24000e14

080116c0 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 80116c0:	f003 bd62 	b.w	8015188 <autoware_vehicle_msgs__msg__VelocityReport__init>

080116c4 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 80116c4:	f003 bd72 	b.w	80151ac <autoware_vehicle_msgs__msg__VelocityReport__fini>

080116c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 80116c8:	b508      	push	{r3, lr}
 80116ca:	f003 f8bb 	bl	8014844 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80116ce:	4b06      	ldr	r3, [pc, #24]	@ (80116e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 80116d0:	4906      	ldr	r1, [pc, #24]	@ (80116ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	60c8      	str	r0, [r1, #12]
 80116d6:	b10a      	cbz	r2, 80116dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 80116d8:	4803      	ldr	r0, [pc, #12]	@ (80116e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 80116da:	bd08      	pop	{r3, pc}
 80116dc:	4a04      	ldr	r2, [pc, #16]	@ (80116f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 80116de:	4802      	ldr	r0, [pc, #8]	@ (80116e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 80116e0:	6812      	ldr	r2, [r2, #0]
 80116e2:	601a      	str	r2, [r3, #0]
 80116e4:	bd08      	pop	{r3, pc}
 80116e6:	bf00      	nop
 80116e8:	24000b70 	.word	0x24000b70
 80116ec:	24000a80 	.word	0x24000a80
 80116f0:	24000e14 	.word	0x24000e14

080116f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 80116f4:	4800      	ldr	r0, [pc, #0]	@ (80116f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 80116f6:	4770      	bx	lr
 80116f8:	24000b98 	.word	0x24000b98

080116fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 80116fc:	4800      	ldr	r0, [pc, #0]	@ (8011700 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 80116fe:	4770      	bx	lr
 8011700:	24000ba4 	.word	0x24000ba4

08011704 <_ControlModeCommand_Response__max_serialized_size>:
 8011704:	2101      	movs	r1, #1
 8011706:	2000      	movs	r0, #0
 8011708:	b508      	push	{r3, lr}
 801170a:	f001 ff1f 	bl	801354c <ucdr_alignment>
 801170e:	3001      	adds	r0, #1
 8011710:	bd08      	pop	{r3, pc}
 8011712:	bf00      	nop

08011714 <_ControlModeCommand_Response__cdr_deserialize>:
 8011714:	b109      	cbz	r1, 801171a <_ControlModeCommand_Response__cdr_deserialize+0x6>
 8011716:	f000 bc93 	b.w	8012040 <ucdr_deserialize_bool>
 801171a:	4608      	mov	r0, r1
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop

08011720 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011720:	b538      	push	{r3, r4, r5, lr}
 8011722:	b158      	cbz	r0, 801173c <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8011724:	460d      	mov	r5, r1
 8011726:	f000 fc0d 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 801172a:	2101      	movs	r1, #1
 801172c:	182c      	adds	r4, r5, r0
 801172e:	f1c5 0501 	rsb	r5, r5, #1
 8011732:	4620      	mov	r0, r4
 8011734:	f001 ff0a 	bl	801354c <ucdr_alignment>
 8011738:	4428      	add	r0, r5
 801173a:	4420      	add	r0, r4
 801173c:	bd38      	pop	{r3, r4, r5, pc}
 801173e:	bf00      	nop

08011740 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8011740:	b138      	cbz	r0, 8011752 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 8011742:	b508      	push	{r3, lr}
 8011744:	460b      	mov	r3, r1
 8011746:	2101      	movs	r1, #1
 8011748:	4618      	mov	r0, r3
 801174a:	f001 feff 	bl	801354c <ucdr_alignment>
 801174e:	3001      	adds	r0, #1
 8011750:	bd08      	pop	{r3, pc}
 8011752:	4770      	bx	lr

08011754 <_ControlModeCommand_Request__cdr_deserialize>:
 8011754:	b538      	push	{r3, r4, r5, lr}
 8011756:	460c      	mov	r4, r1
 8011758:	b179      	cbz	r1, 801177a <_ControlModeCommand_Request__cdr_deserialize+0x26>
 801175a:	4605      	mov	r5, r0
 801175c:	f000 fc56 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011760:	4603      	mov	r3, r0
 8011762:	4621      	mov	r1, r4
 8011764:	4628      	mov	r0, r5
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	68db      	ldr	r3, [r3, #12]
 801176a:	4798      	blx	r3
 801176c:	f104 0108 	add.w	r1, r4, #8
 8011770:	4628      	mov	r0, r5
 8011772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011776:	f000 bc91 	b.w	801209c <ucdr_deserialize_uint8_t>
 801177a:	4608      	mov	r0, r1
 801177c:	bd38      	pop	{r3, r4, r5, pc}
 801177e:	bf00      	nop

08011780 <_ControlModeCommand_Request__cdr_serialize>:
 8011780:	b180      	cbz	r0, 80117a4 <_ControlModeCommand_Request__cdr_serialize+0x24>
 8011782:	b538      	push	{r3, r4, r5, lr}
 8011784:	4604      	mov	r4, r0
 8011786:	460d      	mov	r5, r1
 8011788:	f000 fc40 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801178c:	4603      	mov	r3, r0
 801178e:	4629      	mov	r1, r5
 8011790:	4620      	mov	r0, r4
 8011792:	685b      	ldr	r3, [r3, #4]
 8011794:	689b      	ldr	r3, [r3, #8]
 8011796:	4798      	blx	r3
 8011798:	7a21      	ldrb	r1, [r4, #8]
 801179a:	4628      	mov	r0, r5
 801179c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117a0:	f000 bc66 	b.w	8012070 <ucdr_serialize_uint8_t>
 80117a4:	4770      	bx	lr
 80117a6:	bf00      	nop

080117a8 <_ControlModeCommand_Response__cdr_serialize>:
 80117a8:	460a      	mov	r2, r1
 80117aa:	b118      	cbz	r0, 80117b4 <_ControlModeCommand_Response__cdr_serialize+0xc>
 80117ac:	7801      	ldrb	r1, [r0, #0]
 80117ae:	4610      	mov	r0, r2
 80117b0:	f000 bc30 	b.w	8012014 <ucdr_serialize_bool>
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop

080117b8 <_ControlModeCommand_Response__get_serialized_size>:
 80117b8:	b130      	cbz	r0, 80117c8 <_ControlModeCommand_Response__get_serialized_size+0x10>
 80117ba:	2101      	movs	r1, #1
 80117bc:	2000      	movs	r0, #0
 80117be:	b508      	push	{r3, lr}
 80117c0:	f001 fec4 	bl	801354c <ucdr_alignment>
 80117c4:	3001      	adds	r0, #1
 80117c6:	bd08      	pop	{r3, pc}
 80117c8:	4770      	bx	lr
 80117ca:	bf00      	nop

080117cc <_ControlModeCommand_Request__get_serialized_size>:
 80117cc:	b150      	cbz	r0, 80117e4 <_ControlModeCommand_Request__get_serialized_size+0x18>
 80117ce:	2100      	movs	r1, #0
 80117d0:	b510      	push	{r4, lr}
 80117d2:	f000 fbb7 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 80117d6:	4604      	mov	r4, r0
 80117d8:	2101      	movs	r1, #1
 80117da:	f001 feb7 	bl	801354c <ucdr_alignment>
 80117de:	4420      	add	r0, r4
 80117e0:	3001      	adds	r0, #1
 80117e2:	bd10      	pop	{r4, pc}
 80117e4:	4770      	bx	lr
 80117e6:	bf00      	nop

080117e8 <_ControlModeCommand_Request__max_serialized_size>:
 80117e8:	b510      	push	{r4, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	2401      	movs	r4, #1
 80117ee:	2100      	movs	r1, #0
 80117f0:	f10d 0007 	add.w	r0, sp, #7
 80117f4:	f88d 4007 	strb.w	r4, [sp, #7]
 80117f8:	f000 fbf4 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 80117fc:	4621      	mov	r1, r4
 80117fe:	4604      	mov	r4, r0
 8011800:	f001 fea4 	bl	801354c <ucdr_alignment>
 8011804:	4420      	add	r0, r4
 8011806:	3001      	adds	r0, #1
 8011808:	b002      	add	sp, #8
 801180a:	bd10      	pop	{r4, pc}

0801180c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 801180c:	4800      	ldr	r0, [pc, #0]	@ (8011810 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 801180e:	4770      	bx	lr
 8011810:	24000b8c 	.word	0x24000b8c

08011814 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 8011814:	b538      	push	{r3, r4, r5, lr}
 8011816:	b158      	cbz	r0, 8011830 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 8011818:	460d      	mov	r5, r1
 801181a:	f000 fb93 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 801181e:	2101      	movs	r1, #1
 8011820:	182c      	adds	r4, r5, r0
 8011822:	f1c5 0501 	rsb	r5, r5, #1
 8011826:	4620      	mov	r0, r4
 8011828:	f001 fe90 	bl	801354c <ucdr_alignment>
 801182c:	4428      	add	r0, r5
 801182e:	4420      	add	r0, r4
 8011830:	bd38      	pop	{r3, r4, r5, pc}
 8011832:	bf00      	nop

08011834 <_ControlModeReport__cdr_deserialize>:
 8011834:	b538      	push	{r3, r4, r5, lr}
 8011836:	460c      	mov	r4, r1
 8011838:	b179      	cbz	r1, 801185a <_ControlModeReport__cdr_deserialize+0x26>
 801183a:	4605      	mov	r5, r0
 801183c:	f000 fbe6 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011840:	4603      	mov	r3, r0
 8011842:	4621      	mov	r1, r4
 8011844:	4628      	mov	r0, r5
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	4798      	blx	r3
 801184c:	f104 0108 	add.w	r1, r4, #8
 8011850:	4628      	mov	r0, r5
 8011852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011856:	f000 bc21 	b.w	801209c <ucdr_deserialize_uint8_t>
 801185a:	4608      	mov	r0, r1
 801185c:	bd38      	pop	{r3, r4, r5, pc}
 801185e:	bf00      	nop

08011860 <_ControlModeReport__cdr_serialize>:
 8011860:	b180      	cbz	r0, 8011884 <_ControlModeReport__cdr_serialize+0x24>
 8011862:	b538      	push	{r3, r4, r5, lr}
 8011864:	4604      	mov	r4, r0
 8011866:	460d      	mov	r5, r1
 8011868:	f000 fbd0 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801186c:	4603      	mov	r3, r0
 801186e:	4629      	mov	r1, r5
 8011870:	4620      	mov	r0, r4
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	689b      	ldr	r3, [r3, #8]
 8011876:	4798      	blx	r3
 8011878:	7a21      	ldrb	r1, [r4, #8]
 801187a:	4628      	mov	r0, r5
 801187c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011880:	f000 bbf6 	b.w	8012070 <ucdr_serialize_uint8_t>
 8011884:	4770      	bx	lr
 8011886:	bf00      	nop

08011888 <_ControlModeReport__get_serialized_size>:
 8011888:	b150      	cbz	r0, 80118a0 <_ControlModeReport__get_serialized_size+0x18>
 801188a:	2100      	movs	r1, #0
 801188c:	b510      	push	{r4, lr}
 801188e:	f000 fb59 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011892:	4604      	mov	r4, r0
 8011894:	2101      	movs	r1, #1
 8011896:	f001 fe59 	bl	801354c <ucdr_alignment>
 801189a:	4420      	add	r0, r4
 801189c:	3001      	adds	r0, #1
 801189e:	bd10      	pop	{r4, pc}
 80118a0:	4770      	bx	lr
 80118a2:	bf00      	nop

080118a4 <_ControlModeReport__max_serialized_size>:
 80118a4:	b510      	push	{r4, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	2401      	movs	r4, #1
 80118aa:	2100      	movs	r1, #0
 80118ac:	f10d 0007 	add.w	r0, sp, #7
 80118b0:	f88d 4007 	strb.w	r4, [sp, #7]
 80118b4:	f000 fb96 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 80118b8:	4621      	mov	r1, r4
 80118ba:	4604      	mov	r4, r0
 80118bc:	f001 fe46 	bl	801354c <ucdr_alignment>
 80118c0:	4420      	add	r0, r4
 80118c2:	3001      	adds	r0, #1
 80118c4:	b002      	add	sp, #8
 80118c6:	bd10      	pop	{r4, pc}

080118c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 80118c8:	4800      	ldr	r0, [pc, #0]	@ (80118cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 80118ca:	4770      	bx	lr
 80118cc:	24000be8 	.word	0x24000be8

080118d0 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 80118d0:	b538      	push	{r3, r4, r5, lr}
 80118d2:	b158      	cbz	r0, 80118ec <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 80118d4:	460d      	mov	r5, r1
 80118d6:	f000 fb35 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 80118da:	2101      	movs	r1, #1
 80118dc:	182c      	adds	r4, r5, r0
 80118de:	f1c5 0501 	rsb	r5, r5, #1
 80118e2:	4620      	mov	r0, r4
 80118e4:	f001 fe32 	bl	801354c <ucdr_alignment>
 80118e8:	4428      	add	r0, r5
 80118ea:	4420      	add	r0, r4
 80118ec:	bd38      	pop	{r3, r4, r5, pc}
 80118ee:	bf00      	nop

080118f0 <_GearCommand__cdr_deserialize>:
 80118f0:	b538      	push	{r3, r4, r5, lr}
 80118f2:	460c      	mov	r4, r1
 80118f4:	b179      	cbz	r1, 8011916 <_GearCommand__cdr_deserialize+0x26>
 80118f6:	4605      	mov	r5, r0
 80118f8:	f000 fb88 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80118fc:	4603      	mov	r3, r0
 80118fe:	4621      	mov	r1, r4
 8011900:	4628      	mov	r0, r5
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	4798      	blx	r3
 8011908:	f104 0108 	add.w	r1, r4, #8
 801190c:	4628      	mov	r0, r5
 801190e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011912:	f000 bbc3 	b.w	801209c <ucdr_deserialize_uint8_t>
 8011916:	4608      	mov	r0, r1
 8011918:	bd38      	pop	{r3, r4, r5, pc}
 801191a:	bf00      	nop

0801191c <_GearCommand__cdr_serialize>:
 801191c:	b180      	cbz	r0, 8011940 <_GearCommand__cdr_serialize+0x24>
 801191e:	b538      	push	{r3, r4, r5, lr}
 8011920:	4604      	mov	r4, r0
 8011922:	460d      	mov	r5, r1
 8011924:	f000 fb72 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011928:	4603      	mov	r3, r0
 801192a:	4629      	mov	r1, r5
 801192c:	4620      	mov	r0, r4
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	689b      	ldr	r3, [r3, #8]
 8011932:	4798      	blx	r3
 8011934:	7a21      	ldrb	r1, [r4, #8]
 8011936:	4628      	mov	r0, r5
 8011938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801193c:	f000 bb98 	b.w	8012070 <ucdr_serialize_uint8_t>
 8011940:	4770      	bx	lr
 8011942:	bf00      	nop

08011944 <_GearCommand__get_serialized_size>:
 8011944:	b150      	cbz	r0, 801195c <_GearCommand__get_serialized_size+0x18>
 8011946:	2100      	movs	r1, #0
 8011948:	b510      	push	{r4, lr}
 801194a:	f000 fafb 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 801194e:	4604      	mov	r4, r0
 8011950:	2101      	movs	r1, #1
 8011952:	f001 fdfb 	bl	801354c <ucdr_alignment>
 8011956:	4420      	add	r0, r4
 8011958:	3001      	adds	r0, #1
 801195a:	bd10      	pop	{r4, pc}
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop

08011960 <_GearCommand__max_serialized_size>:
 8011960:	b510      	push	{r4, lr}
 8011962:	b082      	sub	sp, #8
 8011964:	2401      	movs	r4, #1
 8011966:	2100      	movs	r1, #0
 8011968:	f10d 0007 	add.w	r0, sp, #7
 801196c:	f88d 4007 	strb.w	r4, [sp, #7]
 8011970:	f000 fb38 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011974:	4621      	mov	r1, r4
 8011976:	4604      	mov	r4, r0
 8011978:	f001 fde8 	bl	801354c <ucdr_alignment>
 801197c:	4420      	add	r0, r4
 801197e:	3001      	adds	r0, #1
 8011980:	b002      	add	sp, #8
 8011982:	bd10      	pop	{r4, pc}

08011984 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8011984:	4800      	ldr	r0, [pc, #0]	@ (8011988 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 8011986:	4770      	bx	lr
 8011988:	24000c10 	.word	0x24000c10

0801198c <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 801198c:	b538      	push	{r3, r4, r5, lr}
 801198e:	b158      	cbz	r0, 80119a8 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 8011990:	460d      	mov	r5, r1
 8011992:	f000 fad7 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011996:	2101      	movs	r1, #1
 8011998:	182c      	adds	r4, r5, r0
 801199a:	f1c5 0501 	rsb	r5, r5, #1
 801199e:	4620      	mov	r0, r4
 80119a0:	f001 fdd4 	bl	801354c <ucdr_alignment>
 80119a4:	4428      	add	r0, r5
 80119a6:	4420      	add	r0, r4
 80119a8:	bd38      	pop	{r3, r4, r5, pc}
 80119aa:	bf00      	nop

080119ac <_GearReport__cdr_deserialize>:
 80119ac:	b538      	push	{r3, r4, r5, lr}
 80119ae:	460c      	mov	r4, r1
 80119b0:	b179      	cbz	r1, 80119d2 <_GearReport__cdr_deserialize+0x26>
 80119b2:	4605      	mov	r5, r0
 80119b4:	f000 fb2a 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80119b8:	4603      	mov	r3, r0
 80119ba:	4621      	mov	r1, r4
 80119bc:	4628      	mov	r0, r5
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	68db      	ldr	r3, [r3, #12]
 80119c2:	4798      	blx	r3
 80119c4:	f104 0108 	add.w	r1, r4, #8
 80119c8:	4628      	mov	r0, r5
 80119ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119ce:	f000 bb65 	b.w	801209c <ucdr_deserialize_uint8_t>
 80119d2:	4608      	mov	r0, r1
 80119d4:	bd38      	pop	{r3, r4, r5, pc}
 80119d6:	bf00      	nop

080119d8 <_GearReport__cdr_serialize>:
 80119d8:	b180      	cbz	r0, 80119fc <_GearReport__cdr_serialize+0x24>
 80119da:	b538      	push	{r3, r4, r5, lr}
 80119dc:	4604      	mov	r4, r0
 80119de:	460d      	mov	r5, r1
 80119e0:	f000 fb14 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80119e4:	4603      	mov	r3, r0
 80119e6:	4629      	mov	r1, r5
 80119e8:	4620      	mov	r0, r4
 80119ea:	685b      	ldr	r3, [r3, #4]
 80119ec:	689b      	ldr	r3, [r3, #8]
 80119ee:	4798      	blx	r3
 80119f0:	7a21      	ldrb	r1, [r4, #8]
 80119f2:	4628      	mov	r0, r5
 80119f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119f8:	f000 bb3a 	b.w	8012070 <ucdr_serialize_uint8_t>
 80119fc:	4770      	bx	lr
 80119fe:	bf00      	nop

08011a00 <_GearReport__get_serialized_size>:
 8011a00:	b150      	cbz	r0, 8011a18 <_GearReport__get_serialized_size+0x18>
 8011a02:	2100      	movs	r1, #0
 8011a04:	b510      	push	{r4, lr}
 8011a06:	f000 fa9d 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	2101      	movs	r1, #1
 8011a0e:	f001 fd9d 	bl	801354c <ucdr_alignment>
 8011a12:	4420      	add	r0, r4
 8011a14:	3001      	adds	r0, #1
 8011a16:	bd10      	pop	{r4, pc}
 8011a18:	4770      	bx	lr
 8011a1a:	bf00      	nop

08011a1c <_GearReport__max_serialized_size>:
 8011a1c:	b510      	push	{r4, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	2401      	movs	r4, #1
 8011a22:	2100      	movs	r1, #0
 8011a24:	f10d 0007 	add.w	r0, sp, #7
 8011a28:	f88d 4007 	strb.w	r4, [sp, #7]
 8011a2c:	f000 fada 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011a30:	4621      	mov	r1, r4
 8011a32:	4604      	mov	r4, r0
 8011a34:	f001 fd8a 	bl	801354c <ucdr_alignment>
 8011a38:	4420      	add	r0, r4
 8011a3a:	3001      	adds	r0, #1
 8011a3c:	b002      	add	sp, #8
 8011a3e:	bd10      	pop	{r4, pc}

08011a40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8011a40:	4800      	ldr	r0, [pc, #0]	@ (8011a44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 8011a42:	4770      	bx	lr
 8011a44:	24000c38 	.word	0x24000c38

08011a48 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8011a48:	b538      	push	{r3, r4, r5, lr}
 8011a4a:	b158      	cbz	r0, 8011a64 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 8011a4c:	460d      	mov	r5, r1
 8011a4e:	f000 fa79 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011a52:	2101      	movs	r1, #1
 8011a54:	182c      	adds	r4, r5, r0
 8011a56:	f1c5 0501 	rsb	r5, r5, #1
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	f001 fd76 	bl	801354c <ucdr_alignment>
 8011a60:	4428      	add	r0, r5
 8011a62:	4420      	add	r0, r4
 8011a64:	bd38      	pop	{r3, r4, r5, pc}
 8011a66:	bf00      	nop

08011a68 <_HazardLightsCommand__cdr_deserialize>:
 8011a68:	b538      	push	{r3, r4, r5, lr}
 8011a6a:	460c      	mov	r4, r1
 8011a6c:	b179      	cbz	r1, 8011a8e <_HazardLightsCommand__cdr_deserialize+0x26>
 8011a6e:	4605      	mov	r5, r0
 8011a70:	f000 facc 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a74:	4603      	mov	r3, r0
 8011a76:	4621      	mov	r1, r4
 8011a78:	4628      	mov	r0, r5
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	68db      	ldr	r3, [r3, #12]
 8011a7e:	4798      	blx	r3
 8011a80:	f104 0108 	add.w	r1, r4, #8
 8011a84:	4628      	mov	r0, r5
 8011a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a8a:	f000 bb07 	b.w	801209c <ucdr_deserialize_uint8_t>
 8011a8e:	4608      	mov	r0, r1
 8011a90:	bd38      	pop	{r3, r4, r5, pc}
 8011a92:	bf00      	nop

08011a94 <_HazardLightsCommand__cdr_serialize>:
 8011a94:	b180      	cbz	r0, 8011ab8 <_HazardLightsCommand__cdr_serialize+0x24>
 8011a96:	b538      	push	{r3, r4, r5, lr}
 8011a98:	4604      	mov	r4, r0
 8011a9a:	460d      	mov	r5, r1
 8011a9c:	f000 fab6 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	4629      	mov	r1, r5
 8011aa4:	4620      	mov	r0, r4
 8011aa6:	685b      	ldr	r3, [r3, #4]
 8011aa8:	689b      	ldr	r3, [r3, #8]
 8011aaa:	4798      	blx	r3
 8011aac:	7a21      	ldrb	r1, [r4, #8]
 8011aae:	4628      	mov	r0, r5
 8011ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ab4:	f000 badc 	b.w	8012070 <ucdr_serialize_uint8_t>
 8011ab8:	4770      	bx	lr
 8011aba:	bf00      	nop

08011abc <_HazardLightsCommand__get_serialized_size>:
 8011abc:	b150      	cbz	r0, 8011ad4 <_HazardLightsCommand__get_serialized_size+0x18>
 8011abe:	2100      	movs	r1, #0
 8011ac0:	b510      	push	{r4, lr}
 8011ac2:	f000 fa3f 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	2101      	movs	r1, #1
 8011aca:	f001 fd3f 	bl	801354c <ucdr_alignment>
 8011ace:	4420      	add	r0, r4
 8011ad0:	3001      	adds	r0, #1
 8011ad2:	bd10      	pop	{r4, pc}
 8011ad4:	4770      	bx	lr
 8011ad6:	bf00      	nop

08011ad8 <_HazardLightsCommand__max_serialized_size>:
 8011ad8:	b510      	push	{r4, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	2401      	movs	r4, #1
 8011ade:	2100      	movs	r1, #0
 8011ae0:	f10d 0007 	add.w	r0, sp, #7
 8011ae4:	f88d 4007 	strb.w	r4, [sp, #7]
 8011ae8:	f000 fa7c 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011aec:	4621      	mov	r1, r4
 8011aee:	4604      	mov	r4, r0
 8011af0:	f001 fd2c 	bl	801354c <ucdr_alignment>
 8011af4:	4420      	add	r0, r4
 8011af6:	3001      	adds	r0, #1
 8011af8:	b002      	add	sp, #8
 8011afa:	bd10      	pop	{r4, pc}

08011afc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8011afc:	4800      	ldr	r0, [pc, #0]	@ (8011b00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 8011afe:	4770      	bx	lr
 8011b00:	24000c60 	.word	0x24000c60

08011b04 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011b04:	b538      	push	{r3, r4, r5, lr}
 8011b06:	b158      	cbz	r0, 8011b20 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 8011b08:	460d      	mov	r5, r1
 8011b0a:	f000 fa1b 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011b0e:	2101      	movs	r1, #1
 8011b10:	182c      	adds	r4, r5, r0
 8011b12:	f1c5 0501 	rsb	r5, r5, #1
 8011b16:	4620      	mov	r0, r4
 8011b18:	f001 fd18 	bl	801354c <ucdr_alignment>
 8011b1c:	4428      	add	r0, r5
 8011b1e:	4420      	add	r0, r4
 8011b20:	bd38      	pop	{r3, r4, r5, pc}
 8011b22:	bf00      	nop

08011b24 <_HazardLightsReport__cdr_deserialize>:
 8011b24:	b538      	push	{r3, r4, r5, lr}
 8011b26:	460c      	mov	r4, r1
 8011b28:	b179      	cbz	r1, 8011b4a <_HazardLightsReport__cdr_deserialize+0x26>
 8011b2a:	4605      	mov	r5, r0
 8011b2c:	f000 fa6e 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b30:	4603      	mov	r3, r0
 8011b32:	4621      	mov	r1, r4
 8011b34:	4628      	mov	r0, r5
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	68db      	ldr	r3, [r3, #12]
 8011b3a:	4798      	blx	r3
 8011b3c:	f104 0108 	add.w	r1, r4, #8
 8011b40:	4628      	mov	r0, r5
 8011b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b46:	f000 baa9 	b.w	801209c <ucdr_deserialize_uint8_t>
 8011b4a:	4608      	mov	r0, r1
 8011b4c:	bd38      	pop	{r3, r4, r5, pc}
 8011b4e:	bf00      	nop

08011b50 <_HazardLightsReport__cdr_serialize>:
 8011b50:	b180      	cbz	r0, 8011b74 <_HazardLightsReport__cdr_serialize+0x24>
 8011b52:	b538      	push	{r3, r4, r5, lr}
 8011b54:	4604      	mov	r4, r0
 8011b56:	460d      	mov	r5, r1
 8011b58:	f000 fa58 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	4629      	mov	r1, r5
 8011b60:	4620      	mov	r0, r4
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	689b      	ldr	r3, [r3, #8]
 8011b66:	4798      	blx	r3
 8011b68:	7a21      	ldrb	r1, [r4, #8]
 8011b6a:	4628      	mov	r0, r5
 8011b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b70:	f000 ba7e 	b.w	8012070 <ucdr_serialize_uint8_t>
 8011b74:	4770      	bx	lr
 8011b76:	bf00      	nop

08011b78 <_HazardLightsReport__get_serialized_size>:
 8011b78:	b150      	cbz	r0, 8011b90 <_HazardLightsReport__get_serialized_size+0x18>
 8011b7a:	2100      	movs	r1, #0
 8011b7c:	b510      	push	{r4, lr}
 8011b7e:	f000 f9e1 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011b82:	4604      	mov	r4, r0
 8011b84:	2101      	movs	r1, #1
 8011b86:	f001 fce1 	bl	801354c <ucdr_alignment>
 8011b8a:	4420      	add	r0, r4
 8011b8c:	3001      	adds	r0, #1
 8011b8e:	bd10      	pop	{r4, pc}
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop

08011b94 <_HazardLightsReport__max_serialized_size>:
 8011b94:	b510      	push	{r4, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	2401      	movs	r4, #1
 8011b9a:	2100      	movs	r1, #0
 8011b9c:	f10d 0007 	add.w	r0, sp, #7
 8011ba0:	f88d 4007 	strb.w	r4, [sp, #7]
 8011ba4:	f000 fa1e 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011ba8:	4621      	mov	r1, r4
 8011baa:	4604      	mov	r4, r0
 8011bac:	f001 fcce 	bl	801354c <ucdr_alignment>
 8011bb0:	4420      	add	r0, r4
 8011bb2:	3001      	adds	r0, #1
 8011bb4:	b002      	add	sp, #8
 8011bb6:	bd10      	pop	{r4, pc}

08011bb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011bb8:	4800      	ldr	r0, [pc, #0]	@ (8011bbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 8011bba:	4770      	bx	lr
 8011bbc:	24000c88 	.word	0x24000c88

08011bc0 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 8011bc0:	b538      	push	{r3, r4, r5, lr}
 8011bc2:	b158      	cbz	r0, 8011bdc <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 8011bc4:	460d      	mov	r5, r1
 8011bc6:	f000 f9bd 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011bca:	2104      	movs	r1, #4
 8011bcc:	182c      	adds	r4, r5, r0
 8011bce:	f1c5 0504 	rsb	r5, r5, #4
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f001 fcba 	bl	801354c <ucdr_alignment>
 8011bd8:	4428      	add	r0, r5
 8011bda:	4420      	add	r0, r4
 8011bdc:	bd38      	pop	{r3, r4, r5, pc}
 8011bde:	bf00      	nop

08011be0 <_SteeringReport__cdr_deserialize>:
 8011be0:	b538      	push	{r3, r4, r5, lr}
 8011be2:	460c      	mov	r4, r1
 8011be4:	b179      	cbz	r1, 8011c06 <_SteeringReport__cdr_deserialize+0x26>
 8011be6:	4605      	mov	r5, r0
 8011be8:	f000 fa10 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011bec:	4603      	mov	r3, r0
 8011bee:	4621      	mov	r1, r4
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	685b      	ldr	r3, [r3, #4]
 8011bf4:	68db      	ldr	r3, [r3, #12]
 8011bf6:	4798      	blx	r3
 8011bf8:	f104 0108 	add.w	r1, r4, #8
 8011bfc:	4628      	mov	r0, r5
 8011bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c02:	f001 ba25 	b.w	8013050 <ucdr_deserialize_float>
 8011c06:	4608      	mov	r0, r1
 8011c08:	bd38      	pop	{r3, r4, r5, pc}
 8011c0a:	bf00      	nop

08011c0c <_SteeringReport__cdr_serialize>:
 8011c0c:	b188      	cbz	r0, 8011c32 <_SteeringReport__cdr_serialize+0x26>
 8011c0e:	b538      	push	{r3, r4, r5, lr}
 8011c10:	4604      	mov	r4, r0
 8011c12:	460d      	mov	r5, r1
 8011c14:	f000 f9fa 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	4629      	mov	r1, r5
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	685b      	ldr	r3, [r3, #4]
 8011c20:	689b      	ldr	r3, [r3, #8]
 8011c22:	4798      	blx	r3
 8011c24:	ed94 0a02 	vldr	s0, [r4, #8]
 8011c28:	4628      	mov	r0, r5
 8011c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c2e:	f001 b977 	b.w	8012f20 <ucdr_serialize_float>
 8011c32:	4770      	bx	lr

08011c34 <_SteeringReport__get_serialized_size>:
 8011c34:	b150      	cbz	r0, 8011c4c <_SteeringReport__get_serialized_size+0x18>
 8011c36:	2100      	movs	r1, #0
 8011c38:	b510      	push	{r4, lr}
 8011c3a:	f000 f983 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011c3e:	4604      	mov	r4, r0
 8011c40:	2104      	movs	r1, #4
 8011c42:	f001 fc83 	bl	801354c <ucdr_alignment>
 8011c46:	4420      	add	r0, r4
 8011c48:	3004      	adds	r0, #4
 8011c4a:	bd10      	pop	{r4, pc}
 8011c4c:	4770      	bx	lr
 8011c4e:	bf00      	nop

08011c50 <_SteeringReport__max_serialized_size>:
 8011c50:	b510      	push	{r4, lr}
 8011c52:	b082      	sub	sp, #8
 8011c54:	2301      	movs	r3, #1
 8011c56:	2100      	movs	r1, #0
 8011c58:	f10d 0007 	add.w	r0, sp, #7
 8011c5c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011c60:	f000 f9c0 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011c64:	4604      	mov	r4, r0
 8011c66:	2104      	movs	r1, #4
 8011c68:	f001 fc70 	bl	801354c <ucdr_alignment>
 8011c6c:	4420      	add	r0, r4
 8011c6e:	3004      	adds	r0, #4
 8011c70:	b002      	add	sp, #8
 8011c72:	bd10      	pop	{r4, pc}

08011c74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8011c74:	4800      	ldr	r0, [pc, #0]	@ (8011c78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 8011c76:	4770      	bx	lr
 8011c78:	24000cb0 	.word	0x24000cb0

08011c7c <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8011c7c:	b538      	push	{r3, r4, r5, lr}
 8011c7e:	b158      	cbz	r0, 8011c98 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 8011c80:	460d      	mov	r5, r1
 8011c82:	f000 f95f 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011c86:	2101      	movs	r1, #1
 8011c88:	182c      	adds	r4, r5, r0
 8011c8a:	f1c5 0501 	rsb	r5, r5, #1
 8011c8e:	4620      	mov	r0, r4
 8011c90:	f001 fc5c 	bl	801354c <ucdr_alignment>
 8011c94:	4428      	add	r0, r5
 8011c96:	4420      	add	r0, r4
 8011c98:	bd38      	pop	{r3, r4, r5, pc}
 8011c9a:	bf00      	nop

08011c9c <_TurnIndicatorsCommand__cdr_deserialize>:
 8011c9c:	b538      	push	{r3, r4, r5, lr}
 8011c9e:	460c      	mov	r4, r1
 8011ca0:	b179      	cbz	r1, 8011cc2 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 8011ca2:	4605      	mov	r5, r0
 8011ca4:	f000 f9b2 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	4621      	mov	r1, r4
 8011cac:	4628      	mov	r0, r5
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	4798      	blx	r3
 8011cb4:	f104 0108 	add.w	r1, r4, #8
 8011cb8:	4628      	mov	r0, r5
 8011cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cbe:	f000 b9ed 	b.w	801209c <ucdr_deserialize_uint8_t>
 8011cc2:	4608      	mov	r0, r1
 8011cc4:	bd38      	pop	{r3, r4, r5, pc}
 8011cc6:	bf00      	nop

08011cc8 <_TurnIndicatorsCommand__cdr_serialize>:
 8011cc8:	b180      	cbz	r0, 8011cec <_TurnIndicatorsCommand__cdr_serialize+0x24>
 8011cca:	b538      	push	{r3, r4, r5, lr}
 8011ccc:	4604      	mov	r4, r0
 8011cce:	460d      	mov	r5, r1
 8011cd0:	f000 f99c 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	4629      	mov	r1, r5
 8011cd8:	4620      	mov	r0, r4
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	689b      	ldr	r3, [r3, #8]
 8011cde:	4798      	blx	r3
 8011ce0:	7a21      	ldrb	r1, [r4, #8]
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ce8:	f000 b9c2 	b.w	8012070 <ucdr_serialize_uint8_t>
 8011cec:	4770      	bx	lr
 8011cee:	bf00      	nop

08011cf0 <_TurnIndicatorsCommand__get_serialized_size>:
 8011cf0:	b150      	cbz	r0, 8011d08 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	b510      	push	{r4, lr}
 8011cf6:	f000 f925 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011cfa:	4604      	mov	r4, r0
 8011cfc:	2101      	movs	r1, #1
 8011cfe:	f001 fc25 	bl	801354c <ucdr_alignment>
 8011d02:	4420      	add	r0, r4
 8011d04:	3001      	adds	r0, #1
 8011d06:	bd10      	pop	{r4, pc}
 8011d08:	4770      	bx	lr
 8011d0a:	bf00      	nop

08011d0c <_TurnIndicatorsCommand__max_serialized_size>:
 8011d0c:	b510      	push	{r4, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	2401      	movs	r4, #1
 8011d12:	2100      	movs	r1, #0
 8011d14:	f10d 0007 	add.w	r0, sp, #7
 8011d18:	f88d 4007 	strb.w	r4, [sp, #7]
 8011d1c:	f000 f962 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011d20:	4621      	mov	r1, r4
 8011d22:	4604      	mov	r4, r0
 8011d24:	f001 fc12 	bl	801354c <ucdr_alignment>
 8011d28:	4420      	add	r0, r4
 8011d2a:	3001      	adds	r0, #1
 8011d2c:	b002      	add	sp, #8
 8011d2e:	bd10      	pop	{r4, pc}

08011d30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8011d30:	4800      	ldr	r0, [pc, #0]	@ (8011d34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 8011d32:	4770      	bx	lr
 8011d34:	24000cd8 	.word	0x24000cd8

08011d38 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011d38:	b538      	push	{r3, r4, r5, lr}
 8011d3a:	b158      	cbz	r0, 8011d54 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 8011d3c:	460d      	mov	r5, r1
 8011d3e:	f000 f901 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011d42:	2101      	movs	r1, #1
 8011d44:	182c      	adds	r4, r5, r0
 8011d46:	f1c5 0501 	rsb	r5, r5, #1
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	f001 fbfe 	bl	801354c <ucdr_alignment>
 8011d50:	4428      	add	r0, r5
 8011d52:	4420      	add	r0, r4
 8011d54:	bd38      	pop	{r3, r4, r5, pc}
 8011d56:	bf00      	nop

08011d58 <_TurnIndicatorsReport__cdr_deserialize>:
 8011d58:	b538      	push	{r3, r4, r5, lr}
 8011d5a:	460c      	mov	r4, r1
 8011d5c:	b179      	cbz	r1, 8011d7e <_TurnIndicatorsReport__cdr_deserialize+0x26>
 8011d5e:	4605      	mov	r5, r0
 8011d60:	f000 f954 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011d64:	4603      	mov	r3, r0
 8011d66:	4621      	mov	r1, r4
 8011d68:	4628      	mov	r0, r5
 8011d6a:	685b      	ldr	r3, [r3, #4]
 8011d6c:	68db      	ldr	r3, [r3, #12]
 8011d6e:	4798      	blx	r3
 8011d70:	f104 0108 	add.w	r1, r4, #8
 8011d74:	4628      	mov	r0, r5
 8011d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d7a:	f000 b98f 	b.w	801209c <ucdr_deserialize_uint8_t>
 8011d7e:	4608      	mov	r0, r1
 8011d80:	bd38      	pop	{r3, r4, r5, pc}
 8011d82:	bf00      	nop

08011d84 <_TurnIndicatorsReport__cdr_serialize>:
 8011d84:	b180      	cbz	r0, 8011da8 <_TurnIndicatorsReport__cdr_serialize+0x24>
 8011d86:	b538      	push	{r3, r4, r5, lr}
 8011d88:	4604      	mov	r4, r0
 8011d8a:	460d      	mov	r5, r1
 8011d8c:	f000 f93e 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011d90:	4603      	mov	r3, r0
 8011d92:	4629      	mov	r1, r5
 8011d94:	4620      	mov	r0, r4
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	689b      	ldr	r3, [r3, #8]
 8011d9a:	4798      	blx	r3
 8011d9c:	7a21      	ldrb	r1, [r4, #8]
 8011d9e:	4628      	mov	r0, r5
 8011da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011da4:	f000 b964 	b.w	8012070 <ucdr_serialize_uint8_t>
 8011da8:	4770      	bx	lr
 8011daa:	bf00      	nop

08011dac <_TurnIndicatorsReport__get_serialized_size>:
 8011dac:	b150      	cbz	r0, 8011dc4 <_TurnIndicatorsReport__get_serialized_size+0x18>
 8011dae:	2100      	movs	r1, #0
 8011db0:	b510      	push	{r4, lr}
 8011db2:	f000 f8c7 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8011db6:	4604      	mov	r4, r0
 8011db8:	2101      	movs	r1, #1
 8011dba:	f001 fbc7 	bl	801354c <ucdr_alignment>
 8011dbe:	4420      	add	r0, r4
 8011dc0:	3001      	adds	r0, #1
 8011dc2:	bd10      	pop	{r4, pc}
 8011dc4:	4770      	bx	lr
 8011dc6:	bf00      	nop

08011dc8 <_TurnIndicatorsReport__max_serialized_size>:
 8011dc8:	b510      	push	{r4, lr}
 8011dca:	b082      	sub	sp, #8
 8011dcc:	2401      	movs	r4, #1
 8011dce:	2100      	movs	r1, #0
 8011dd0:	f10d 0007 	add.w	r0, sp, #7
 8011dd4:	f88d 4007 	strb.w	r4, [sp, #7]
 8011dd8:	f000 f904 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011ddc:	4621      	mov	r1, r4
 8011dde:	4604      	mov	r4, r0
 8011de0:	f001 fbb4 	bl	801354c <ucdr_alignment>
 8011de4:	4420      	add	r0, r4
 8011de6:	3001      	adds	r0, #1
 8011de8:	b002      	add	sp, #8
 8011dea:	bd10      	pop	{r4, pc}

08011dec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011dec:	4800      	ldr	r0, [pc, #0]	@ (8011df0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 8011dee:	4770      	bx	lr
 8011df0:	24000d00 	.word	0x24000d00

08011df4 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 8011df4:	b1c8      	cbz	r0, 8011e2a <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 8011df6:	b570      	push	{r4, r5, r6, lr}
 8011df8:	460d      	mov	r5, r1
 8011dfa:	f002 fd47 	bl	801488c <get_serialized_size_std_msgs__msg__Header>
 8011dfe:	2104      	movs	r1, #4
 8011e00:	182e      	adds	r6, r5, r0
 8011e02:	f1c5 0504 	rsb	r5, r5, #4
 8011e06:	4630      	mov	r0, r6
 8011e08:	f001 fba0 	bl	801354c <ucdr_alignment>
 8011e0c:	2104      	movs	r1, #4
 8011e0e:	1844      	adds	r4, r0, r1
 8011e10:	4434      	add	r4, r6
 8011e12:	4620      	mov	r0, r4
 8011e14:	f001 fb9a 	bl	801354c <ucdr_alignment>
 8011e18:	2104      	movs	r1, #4
 8011e1a:	4408      	add	r0, r1
 8011e1c:	4404      	add	r4, r0
 8011e1e:	4620      	mov	r0, r4
 8011e20:	f001 fb94 	bl	801354c <ucdr_alignment>
 8011e24:	4428      	add	r0, r5
 8011e26:	4420      	add	r0, r4
 8011e28:	bd70      	pop	{r4, r5, r6, pc}
 8011e2a:	4770      	bx	lr

08011e2c <_VelocityReport__cdr_deserialize>:
 8011e2c:	b538      	push	{r3, r4, r5, lr}
 8011e2e:	460c      	mov	r4, r1
 8011e30:	b1c9      	cbz	r1, 8011e66 <_VelocityReport__cdr_deserialize+0x3a>
 8011e32:	4605      	mov	r5, r0
 8011e34:	f002 fdae 	bl	8014994 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	4621      	mov	r1, r4
 8011e3c:	4628      	mov	r0, r5
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	68db      	ldr	r3, [r3, #12]
 8011e42:	4798      	blx	r3
 8011e44:	f104 0114 	add.w	r1, r4, #20
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f001 f901 	bl	8013050 <ucdr_deserialize_float>
 8011e4e:	f104 0118 	add.w	r1, r4, #24
 8011e52:	4628      	mov	r0, r5
 8011e54:	f001 f8fc 	bl	8013050 <ucdr_deserialize_float>
 8011e58:	f104 011c 	add.w	r1, r4, #28
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e62:	f001 b8f5 	b.w	8013050 <ucdr_deserialize_float>
 8011e66:	4608      	mov	r0, r1
 8011e68:	bd38      	pop	{r3, r4, r5, pc}
 8011e6a:	bf00      	nop

08011e6c <_VelocityReport__cdr_serialize>:
 8011e6c:	b1d8      	cbz	r0, 8011ea6 <_VelocityReport__cdr_serialize+0x3a>
 8011e6e:	b538      	push	{r3, r4, r5, lr}
 8011e70:	4604      	mov	r4, r0
 8011e72:	460d      	mov	r5, r1
 8011e74:	f002 fd8e 	bl	8014994 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	4629      	mov	r1, r5
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	4798      	blx	r3
 8011e84:	ed94 0a05 	vldr	s0, [r4, #20]
 8011e88:	4628      	mov	r0, r5
 8011e8a:	f001 f849 	bl	8012f20 <ucdr_serialize_float>
 8011e8e:	ed94 0a06 	vldr	s0, [r4, #24]
 8011e92:	4628      	mov	r0, r5
 8011e94:	f001 f844 	bl	8012f20 <ucdr_serialize_float>
 8011e98:	ed94 0a07 	vldr	s0, [r4, #28]
 8011e9c:	4628      	mov	r0, r5
 8011e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ea2:	f001 b83d 	b.w	8012f20 <ucdr_serialize_float>
 8011ea6:	4770      	bx	lr

08011ea8 <_VelocityReport__get_serialized_size>:
 8011ea8:	b1b0      	cbz	r0, 8011ed8 <_VelocityReport__get_serialized_size+0x30>
 8011eaa:	2100      	movs	r1, #0
 8011eac:	b510      	push	{r4, lr}
 8011eae:	f002 fced 	bl	801488c <get_serialized_size_std_msgs__msg__Header>
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	2104      	movs	r1, #4
 8011eb6:	f001 fb49 	bl	801354c <ucdr_alignment>
 8011eba:	2104      	movs	r1, #4
 8011ebc:	4420      	add	r0, r4
 8011ebe:	1844      	adds	r4, r0, r1
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	f001 fb43 	bl	801354c <ucdr_alignment>
 8011ec6:	2104      	movs	r1, #4
 8011ec8:	4408      	add	r0, r1
 8011eca:	4404      	add	r4, r0
 8011ecc:	4620      	mov	r0, r4
 8011ece:	f001 fb3d 	bl	801354c <ucdr_alignment>
 8011ed2:	3004      	adds	r0, #4
 8011ed4:	4420      	add	r0, r4
 8011ed6:	bd10      	pop	{r4, pc}
 8011ed8:	4770      	bx	lr
 8011eda:	bf00      	nop

08011edc <_VelocityReport__max_serialized_size>:
 8011edc:	b510      	push	{r4, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	2100      	movs	r1, #0
 8011ee4:	f10d 0007 	add.w	r0, sp, #7
 8011ee8:	f88d 3007 	strb.w	r3, [sp, #7]
 8011eec:	f002 fd48 	bl	8014980 <max_serialized_size_std_msgs__msg__Header>
 8011ef0:	4604      	mov	r4, r0
 8011ef2:	2104      	movs	r1, #4
 8011ef4:	f001 fb2a 	bl	801354c <ucdr_alignment>
 8011ef8:	2104      	movs	r1, #4
 8011efa:	4420      	add	r0, r4
 8011efc:	1844      	adds	r4, r0, r1
 8011efe:	4620      	mov	r0, r4
 8011f00:	f001 fb24 	bl	801354c <ucdr_alignment>
 8011f04:	2104      	movs	r1, #4
 8011f06:	4408      	add	r0, r1
 8011f08:	4404      	add	r4, r0
 8011f0a:	4620      	mov	r0, r4
 8011f0c:	f001 fb1e 	bl	801354c <ucdr_alignment>
 8011f10:	3004      	adds	r0, #4
 8011f12:	4420      	add	r0, r4
 8011f14:	b002      	add	sp, #8
 8011f16:	bd10      	pop	{r4, pc}

08011f18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8011f18:	4800      	ldr	r0, [pc, #0]	@ (8011f1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 8011f1a:	4770      	bx	lr
 8011f1c:	24000d28 	.word	0x24000d28

08011f20 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8011f20:	f003 b948 	b.w	80151b4 <builtin_interfaces__msg__Time__init>

08011f24 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8011f24:	f003 b94a 	b.w	80151bc <builtin_interfaces__msg__Time__fini>

08011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011f28:	4b04      	ldr	r3, [pc, #16]	@ (8011f3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011f2a:	681a      	ldr	r2, [r3, #0]
 8011f2c:	b10a      	cbz	r2, 8011f32 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8011f2e:	4803      	ldr	r0, [pc, #12]	@ (8011f3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011f30:	4770      	bx	lr
 8011f32:	4a03      	ldr	r2, [pc, #12]	@ (8011f40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8011f34:	4801      	ldr	r0, [pc, #4]	@ (8011f3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011f36:	6812      	ldr	r2, [r2, #0]
 8011f38:	601a      	str	r2, [r3, #0]
 8011f3a:	4770      	bx	lr
 8011f3c:	24000dc8 	.word	0x24000dc8
 8011f40:	24000e14 	.word	0x24000e14

08011f44 <get_serialized_size_builtin_interfaces__msg__Time>:
 8011f44:	b180      	cbz	r0, 8011f68 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8011f46:	b538      	push	{r3, r4, r5, lr}
 8011f48:	460d      	mov	r5, r1
 8011f4a:	2104      	movs	r1, #4
 8011f4c:	4628      	mov	r0, r5
 8011f4e:	f001 fafd 	bl	801354c <ucdr_alignment>
 8011f52:	1d2b      	adds	r3, r5, #4
 8011f54:	f1c5 0504 	rsb	r5, r5, #4
 8011f58:	2104      	movs	r1, #4
 8011f5a:	181c      	adds	r4, r3, r0
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	f001 faf5 	bl	801354c <ucdr_alignment>
 8011f62:	4428      	add	r0, r5
 8011f64:	4420      	add	r0, r4
 8011f66:	bd38      	pop	{r3, r4, r5, pc}
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop

08011f6c <_Time__cdr_deserialize>:
 8011f6c:	b538      	push	{r3, r4, r5, lr}
 8011f6e:	460c      	mov	r4, r1
 8011f70:	b141      	cbz	r1, 8011f84 <_Time__cdr_deserialize+0x18>
 8011f72:	4605      	mov	r5, r0
 8011f74:	f000 ff44 	bl	8012e00 <ucdr_deserialize_int32_t>
 8011f78:	1d21      	adds	r1, r4, #4
 8011f7a:	4628      	mov	r0, r5
 8011f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f80:	f000 bbbc 	b.w	80126fc <ucdr_deserialize_uint32_t>
 8011f84:	4608      	mov	r0, r1
 8011f86:	bd38      	pop	{r3, r4, r5, pc}

08011f88 <_Time__cdr_serialize>:
 8011f88:	b160      	cbz	r0, 8011fa4 <_Time__cdr_serialize+0x1c>
 8011f8a:	b538      	push	{r3, r4, r5, lr}
 8011f8c:	460d      	mov	r5, r1
 8011f8e:	4604      	mov	r4, r0
 8011f90:	6801      	ldr	r1, [r0, #0]
 8011f92:	4628      	mov	r0, r5
 8011f94:	f000 fe9c 	bl	8012cd0 <ucdr_serialize_int32_t>
 8011f98:	6861      	ldr	r1, [r4, #4]
 8011f9a:	4628      	mov	r0, r5
 8011f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fa0:	f000 ba7c 	b.w	801249c <ucdr_serialize_uint32_t>
 8011fa4:	4770      	bx	lr
 8011fa6:	bf00      	nop

08011fa8 <_Time__get_serialized_size>:
 8011fa8:	b160      	cbz	r0, 8011fc4 <_Time__get_serialized_size+0x1c>
 8011faa:	2104      	movs	r1, #4
 8011fac:	2000      	movs	r0, #0
 8011fae:	b510      	push	{r4, lr}
 8011fb0:	f001 facc 	bl	801354c <ucdr_alignment>
 8011fb4:	2104      	movs	r1, #4
 8011fb6:	1844      	adds	r4, r0, r1
 8011fb8:	4620      	mov	r0, r4
 8011fba:	f001 fac7 	bl	801354c <ucdr_alignment>
 8011fbe:	3004      	adds	r0, #4
 8011fc0:	4420      	add	r0, r4
 8011fc2:	bd10      	pop	{r4, pc}
 8011fc4:	4770      	bx	lr
 8011fc6:	bf00      	nop

08011fc8 <_Time__max_serialized_size>:
 8011fc8:	b510      	push	{r4, lr}
 8011fca:	2104      	movs	r1, #4
 8011fcc:	2000      	movs	r0, #0
 8011fce:	f001 fabd 	bl	801354c <ucdr_alignment>
 8011fd2:	2104      	movs	r1, #4
 8011fd4:	1844      	adds	r4, r0, r1
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f001 fab8 	bl	801354c <ucdr_alignment>
 8011fdc:	3004      	adds	r0, #4
 8011fde:	4420      	add	r0, r4
 8011fe0:	bd10      	pop	{r4, pc}
 8011fe2:	bf00      	nop

08011fe4 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011fe4:	b538      	push	{r3, r4, r5, lr}
 8011fe6:	460c      	mov	r4, r1
 8011fe8:	2301      	movs	r3, #1
 8011fea:	2104      	movs	r1, #4
 8011fec:	1d25      	adds	r5, r4, #4
 8011fee:	7003      	strb	r3, [r0, #0]
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	f1c4 0404 	rsb	r4, r4, #4
 8011ff6:	f001 faa9 	bl	801354c <ucdr_alignment>
 8011ffa:	4405      	add	r5, r0
 8011ffc:	2104      	movs	r1, #4
 8011ffe:	4628      	mov	r0, r5
 8012000:	f001 faa4 	bl	801354c <ucdr_alignment>
 8012004:	4420      	add	r0, r4
 8012006:	4428      	add	r0, r5
 8012008:	bd38      	pop	{r3, r4, r5, pc}
 801200a:	bf00      	nop

0801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801200c:	4800      	ldr	r0, [pc, #0]	@ (8012010 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801200e:	4770      	bx	lr
 8012010:	24000dd4 	.word	0x24000dd4

08012014 <ucdr_serialize_bool>:
 8012014:	b538      	push	{r3, r4, r5, lr}
 8012016:	460d      	mov	r5, r1
 8012018:	2101      	movs	r1, #1
 801201a:	4604      	mov	r4, r0
 801201c:	f001 fa4a 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012020:	b148      	cbz	r0, 8012036 <ucdr_serialize_bool+0x22>
 8012022:	68a3      	ldr	r3, [r4, #8]
 8012024:	2101      	movs	r1, #1
 8012026:	701d      	strb	r5, [r3, #0]
 8012028:	68a2      	ldr	r2, [r4, #8]
 801202a:	6923      	ldr	r3, [r4, #16]
 801202c:	440a      	add	r2, r1
 801202e:	7561      	strb	r1, [r4, #21]
 8012030:	440b      	add	r3, r1
 8012032:	60a2      	str	r2, [r4, #8]
 8012034:	6123      	str	r3, [r4, #16]
 8012036:	7da0      	ldrb	r0, [r4, #22]
 8012038:	f080 0001 	eor.w	r0, r0, #1
 801203c:	bd38      	pop	{r3, r4, r5, pc}
 801203e:	bf00      	nop

08012040 <ucdr_deserialize_bool>:
 8012040:	b538      	push	{r3, r4, r5, lr}
 8012042:	460d      	mov	r5, r1
 8012044:	2101      	movs	r1, #1
 8012046:	4604      	mov	r4, r0
 8012048:	f001 fa34 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 801204c:	b160      	cbz	r0, 8012068 <ucdr_deserialize_bool+0x28>
 801204e:	68a2      	ldr	r2, [r4, #8]
 8012050:	2101      	movs	r1, #1
 8012052:	6923      	ldr	r3, [r4, #16]
 8012054:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012058:	440b      	add	r3, r1
 801205a:	3800      	subs	r0, #0
 801205c:	bf18      	it	ne
 801205e:	2001      	movne	r0, #1
 8012060:	7028      	strb	r0, [r5, #0]
 8012062:	60a2      	str	r2, [r4, #8]
 8012064:	6123      	str	r3, [r4, #16]
 8012066:	7561      	strb	r1, [r4, #21]
 8012068:	7da0      	ldrb	r0, [r4, #22]
 801206a:	f080 0001 	eor.w	r0, r0, #1
 801206e:	bd38      	pop	{r3, r4, r5, pc}

08012070 <ucdr_serialize_uint8_t>:
 8012070:	b538      	push	{r3, r4, r5, lr}
 8012072:	460d      	mov	r5, r1
 8012074:	2101      	movs	r1, #1
 8012076:	4604      	mov	r4, r0
 8012078:	f001 fa1c 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 801207c:	b148      	cbz	r0, 8012092 <ucdr_serialize_uint8_t+0x22>
 801207e:	68a3      	ldr	r3, [r4, #8]
 8012080:	2101      	movs	r1, #1
 8012082:	701d      	strb	r5, [r3, #0]
 8012084:	68a2      	ldr	r2, [r4, #8]
 8012086:	6923      	ldr	r3, [r4, #16]
 8012088:	440a      	add	r2, r1
 801208a:	7561      	strb	r1, [r4, #21]
 801208c:	440b      	add	r3, r1
 801208e:	60a2      	str	r2, [r4, #8]
 8012090:	6123      	str	r3, [r4, #16]
 8012092:	7da0      	ldrb	r0, [r4, #22]
 8012094:	f080 0001 	eor.w	r0, r0, #1
 8012098:	bd38      	pop	{r3, r4, r5, pc}
 801209a:	bf00      	nop

0801209c <ucdr_deserialize_uint8_t>:
 801209c:	b538      	push	{r3, r4, r5, lr}
 801209e:	460d      	mov	r5, r1
 80120a0:	2101      	movs	r1, #1
 80120a2:	4604      	mov	r4, r0
 80120a4:	f001 fa06 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 80120a8:	b150      	cbz	r0, 80120c0 <ucdr_deserialize_uint8_t+0x24>
 80120aa:	68a3      	ldr	r3, [r4, #8]
 80120ac:	2101      	movs	r1, #1
 80120ae:	781b      	ldrb	r3, [r3, #0]
 80120b0:	702b      	strb	r3, [r5, #0]
 80120b2:	68a2      	ldr	r2, [r4, #8]
 80120b4:	6923      	ldr	r3, [r4, #16]
 80120b6:	440a      	add	r2, r1
 80120b8:	7561      	strb	r1, [r4, #21]
 80120ba:	440b      	add	r3, r1
 80120bc:	60a2      	str	r2, [r4, #8]
 80120be:	6123      	str	r3, [r4, #16]
 80120c0:	7da0      	ldrb	r0, [r4, #22]
 80120c2:	f080 0001 	eor.w	r0, r0, #1
 80120c6:	bd38      	pop	{r3, r4, r5, pc}

080120c8 <ucdr_serialize_uint16_t>:
 80120c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120cc:	460b      	mov	r3, r1
 80120ce:	b082      	sub	sp, #8
 80120d0:	4604      	mov	r4, r0
 80120d2:	2102      	movs	r1, #2
 80120d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80120d8:	f001 fa40 	bl	801355c <ucdr_buffer_alignment>
 80120dc:	4601      	mov	r1, r0
 80120de:	4620      	mov	r0, r4
 80120e0:	7d67      	ldrb	r7, [r4, #21]
 80120e2:	f001 fa83 	bl	80135ec <ucdr_advance_buffer>
 80120e6:	2102      	movs	r1, #2
 80120e8:	4620      	mov	r0, r4
 80120ea:	f001 f9d7 	bl	801349c <ucdr_check_buffer_available_for>
 80120ee:	bb78      	cbnz	r0, 8012150 <ucdr_serialize_uint16_t+0x88>
 80120f0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80120f4:	42ab      	cmp	r3, r5
 80120f6:	d926      	bls.n	8012146 <ucdr_serialize_uint16_t+0x7e>
 80120f8:	1b5e      	subs	r6, r3, r5
 80120fa:	60a3      	str	r3, [r4, #8]
 80120fc:	6923      	ldr	r3, [r4, #16]
 80120fe:	4620      	mov	r0, r4
 8012100:	f1c6 0802 	rsb	r8, r6, #2
 8012104:	4433      	add	r3, r6
 8012106:	4641      	mov	r1, r8
 8012108:	6123      	str	r3, [r4, #16]
 801210a:	f001 f9d3 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 801210e:	2800      	cmp	r0, #0
 8012110:	d03b      	beq.n	801218a <ucdr_serialize_uint16_t+0xc2>
 8012112:	7d23      	ldrb	r3, [r4, #20]
 8012114:	2b01      	cmp	r3, #1
 8012116:	d04a      	beq.n	80121ae <ucdr_serialize_uint16_t+0xe6>
 8012118:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801211c:	702b      	strb	r3, [r5, #0]
 801211e:	2e00      	cmp	r6, #0
 8012120:	d040      	beq.n	80121a4 <ucdr_serialize_uint16_t+0xdc>
 8012122:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012126:	706b      	strb	r3, [r5, #1]
 8012128:	6923      	ldr	r3, [r4, #16]
 801212a:	2102      	movs	r1, #2
 801212c:	68a2      	ldr	r2, [r4, #8]
 801212e:	3302      	adds	r3, #2
 8012130:	7da0      	ldrb	r0, [r4, #22]
 8012132:	4442      	add	r2, r8
 8012134:	7561      	strb	r1, [r4, #21]
 8012136:	1b9e      	subs	r6, r3, r6
 8012138:	f080 0001 	eor.w	r0, r0, #1
 801213c:	60a2      	str	r2, [r4, #8]
 801213e:	6126      	str	r6, [r4, #16]
 8012140:	b002      	add	sp, #8
 8012142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012146:	2102      	movs	r1, #2
 8012148:	4620      	mov	r0, r4
 801214a:	f001 f9b3 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 801214e:	b190      	cbz	r0, 8012176 <ucdr_serialize_uint16_t+0xae>
 8012150:	7d23      	ldrb	r3, [r4, #20]
 8012152:	2b01      	cmp	r3, #1
 8012154:	68a3      	ldr	r3, [r4, #8]
 8012156:	d014      	beq.n	8012182 <ucdr_serialize_uint16_t+0xba>
 8012158:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801215c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012160:	7019      	strb	r1, [r3, #0]
 8012162:	68a3      	ldr	r3, [r4, #8]
 8012164:	705a      	strb	r2, [r3, #1]
 8012166:	2102      	movs	r1, #2
 8012168:	68a2      	ldr	r2, [r4, #8]
 801216a:	6923      	ldr	r3, [r4, #16]
 801216c:	440a      	add	r2, r1
 801216e:	7561      	strb	r1, [r4, #21]
 8012170:	440b      	add	r3, r1
 8012172:	60a2      	str	r2, [r4, #8]
 8012174:	6123      	str	r3, [r4, #16]
 8012176:	7da0      	ldrb	r0, [r4, #22]
 8012178:	f080 0001 	eor.w	r0, r0, #1
 801217c:	b002      	add	sp, #8
 801217e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012182:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012186:	801a      	strh	r2, [r3, #0]
 8012188:	e7ed      	b.n	8012166 <ucdr_serialize_uint16_t+0x9e>
 801218a:	68a2      	ldr	r2, [r4, #8]
 801218c:	6923      	ldr	r3, [r4, #16]
 801218e:	7da0      	ldrb	r0, [r4, #22]
 8012190:	1b92      	subs	r2, r2, r6
 8012192:	1b9b      	subs	r3, r3, r6
 8012194:	7567      	strb	r7, [r4, #21]
 8012196:	f080 0001 	eor.w	r0, r0, #1
 801219a:	60a2      	str	r2, [r4, #8]
 801219c:	6123      	str	r3, [r4, #16]
 801219e:	b002      	add	sp, #8
 80121a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121a4:	68a3      	ldr	r3, [r4, #8]
 80121a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121aa:	701a      	strb	r2, [r3, #0]
 80121ac:	e7bc      	b.n	8012128 <ucdr_serialize_uint16_t+0x60>
 80121ae:	4628      	mov	r0, r5
 80121b0:	f10d 0506 	add.w	r5, sp, #6
 80121b4:	4632      	mov	r2, r6
 80121b6:	4629      	mov	r1, r5
 80121b8:	f00e fc8b 	bl	8020ad2 <memcpy>
 80121bc:	4642      	mov	r2, r8
 80121be:	19a9      	adds	r1, r5, r6
 80121c0:	68a0      	ldr	r0, [r4, #8]
 80121c2:	f00e fc86 	bl	8020ad2 <memcpy>
 80121c6:	e7af      	b.n	8012128 <ucdr_serialize_uint16_t+0x60>

080121c8 <ucdr_serialize_endian_uint16_t>:
 80121c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121cc:	4604      	mov	r4, r0
 80121ce:	b083      	sub	sp, #12
 80121d0:	460d      	mov	r5, r1
 80121d2:	2102      	movs	r1, #2
 80121d4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80121d8:	f001 f9c0 	bl	801355c <ucdr_buffer_alignment>
 80121dc:	4601      	mov	r1, r0
 80121de:	4620      	mov	r0, r4
 80121e0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80121e4:	f001 fa02 	bl	80135ec <ucdr_advance_buffer>
 80121e8:	2102      	movs	r1, #2
 80121ea:	4620      	mov	r0, r4
 80121ec:	f001 f956 	bl	801349c <ucdr_check_buffer_available_for>
 80121f0:	bb70      	cbnz	r0, 8012250 <ucdr_serialize_endian_uint16_t+0x88>
 80121f2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80121f6:	42be      	cmp	r6, r7
 80121f8:	d925      	bls.n	8012246 <ucdr_serialize_endian_uint16_t+0x7e>
 80121fa:	6923      	ldr	r3, [r4, #16]
 80121fc:	4620      	mov	r0, r4
 80121fe:	60a6      	str	r6, [r4, #8]
 8012200:	1bf6      	subs	r6, r6, r7
 8012202:	4433      	add	r3, r6
 8012204:	f1c6 0902 	rsb	r9, r6, #2
 8012208:	6123      	str	r3, [r4, #16]
 801220a:	4649      	mov	r1, r9
 801220c:	f001 f952 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012210:	2800      	cmp	r0, #0
 8012212:	d039      	beq.n	8012288 <ucdr_serialize_endian_uint16_t+0xc0>
 8012214:	2d01      	cmp	r5, #1
 8012216:	d04a      	beq.n	80122ae <ucdr_serialize_endian_uint16_t+0xe6>
 8012218:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801221c:	703b      	strb	r3, [r7, #0]
 801221e:	2e00      	cmp	r6, #0
 8012220:	d040      	beq.n	80122a4 <ucdr_serialize_endian_uint16_t+0xdc>
 8012222:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012226:	707b      	strb	r3, [r7, #1]
 8012228:	6923      	ldr	r3, [r4, #16]
 801222a:	2102      	movs	r1, #2
 801222c:	68a2      	ldr	r2, [r4, #8]
 801222e:	7da0      	ldrb	r0, [r4, #22]
 8012230:	3302      	adds	r3, #2
 8012232:	444a      	add	r2, r9
 8012234:	7561      	strb	r1, [r4, #21]
 8012236:	1b9b      	subs	r3, r3, r6
 8012238:	f080 0001 	eor.w	r0, r0, #1
 801223c:	60a2      	str	r2, [r4, #8]
 801223e:	6123      	str	r3, [r4, #16]
 8012240:	b003      	add	sp, #12
 8012242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012246:	2102      	movs	r1, #2
 8012248:	4620      	mov	r0, r4
 801224a:	f001 f933 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 801224e:	b188      	cbz	r0, 8012274 <ucdr_serialize_endian_uint16_t+0xac>
 8012250:	2d01      	cmp	r5, #1
 8012252:	68a3      	ldr	r3, [r4, #8]
 8012254:	d014      	beq.n	8012280 <ucdr_serialize_endian_uint16_t+0xb8>
 8012256:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801225a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801225e:	7019      	strb	r1, [r3, #0]
 8012260:	68a3      	ldr	r3, [r4, #8]
 8012262:	705a      	strb	r2, [r3, #1]
 8012264:	2102      	movs	r1, #2
 8012266:	68a2      	ldr	r2, [r4, #8]
 8012268:	6923      	ldr	r3, [r4, #16]
 801226a:	440a      	add	r2, r1
 801226c:	7561      	strb	r1, [r4, #21]
 801226e:	440b      	add	r3, r1
 8012270:	60a2      	str	r2, [r4, #8]
 8012272:	6123      	str	r3, [r4, #16]
 8012274:	7da0      	ldrb	r0, [r4, #22]
 8012276:	f080 0001 	eor.w	r0, r0, #1
 801227a:	b003      	add	sp, #12
 801227c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012280:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012284:	801a      	strh	r2, [r3, #0]
 8012286:	e7ed      	b.n	8012264 <ucdr_serialize_endian_uint16_t+0x9c>
 8012288:	68a2      	ldr	r2, [r4, #8]
 801228a:	6923      	ldr	r3, [r4, #16]
 801228c:	7da0      	ldrb	r0, [r4, #22]
 801228e:	1b92      	subs	r2, r2, r6
 8012290:	1b9b      	subs	r3, r3, r6
 8012292:	f884 8015 	strb.w	r8, [r4, #21]
 8012296:	f080 0001 	eor.w	r0, r0, #1
 801229a:	60a2      	str	r2, [r4, #8]
 801229c:	6123      	str	r3, [r4, #16]
 801229e:	b003      	add	sp, #12
 80122a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122a4:	68a3      	ldr	r3, [r4, #8]
 80122a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80122aa:	701a      	strb	r2, [r3, #0]
 80122ac:	e7bc      	b.n	8012228 <ucdr_serialize_endian_uint16_t+0x60>
 80122ae:	f10d 0506 	add.w	r5, sp, #6
 80122b2:	4632      	mov	r2, r6
 80122b4:	4638      	mov	r0, r7
 80122b6:	4629      	mov	r1, r5
 80122b8:	f00e fc0b 	bl	8020ad2 <memcpy>
 80122bc:	464a      	mov	r2, r9
 80122be:	19a9      	adds	r1, r5, r6
 80122c0:	68a0      	ldr	r0, [r4, #8]
 80122c2:	f00e fc06 	bl	8020ad2 <memcpy>
 80122c6:	e7af      	b.n	8012228 <ucdr_serialize_endian_uint16_t+0x60>

080122c8 <ucdr_deserialize_uint16_t>:
 80122c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122cc:	4604      	mov	r4, r0
 80122ce:	460d      	mov	r5, r1
 80122d0:	2102      	movs	r1, #2
 80122d2:	f001 f943 	bl	801355c <ucdr_buffer_alignment>
 80122d6:	4601      	mov	r1, r0
 80122d8:	4620      	mov	r0, r4
 80122da:	f894 8015 	ldrb.w	r8, [r4, #21]
 80122de:	f001 f985 	bl	80135ec <ucdr_advance_buffer>
 80122e2:	2102      	movs	r1, #2
 80122e4:	4620      	mov	r0, r4
 80122e6:	f001 f8d9 	bl	801349c <ucdr_check_buffer_available_for>
 80122ea:	bb60      	cbnz	r0, 8012346 <ucdr_deserialize_uint16_t+0x7e>
 80122ec:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80122f0:	42be      	cmp	r6, r7
 80122f2:	d923      	bls.n	801233c <ucdr_deserialize_uint16_t+0x74>
 80122f4:	6923      	ldr	r3, [r4, #16]
 80122f6:	4620      	mov	r0, r4
 80122f8:	60a6      	str	r6, [r4, #8]
 80122fa:	1bf6      	subs	r6, r6, r7
 80122fc:	4433      	add	r3, r6
 80122fe:	f1c6 0902 	rsb	r9, r6, #2
 8012302:	6123      	str	r3, [r4, #16]
 8012304:	4649      	mov	r1, r9
 8012306:	f001 f8d5 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 801230a:	2800      	cmp	r0, #0
 801230c:	d034      	beq.n	8012378 <ucdr_deserialize_uint16_t+0xb0>
 801230e:	7d23      	ldrb	r3, [r4, #20]
 8012310:	2b01      	cmp	r3, #1
 8012312:	d042      	beq.n	801239a <ucdr_deserialize_uint16_t+0xd2>
 8012314:	787b      	ldrb	r3, [r7, #1]
 8012316:	702b      	strb	r3, [r5, #0]
 8012318:	2e00      	cmp	r6, #0
 801231a:	d03a      	beq.n	8012392 <ucdr_deserialize_uint16_t+0xca>
 801231c:	783b      	ldrb	r3, [r7, #0]
 801231e:	706b      	strb	r3, [r5, #1]
 8012320:	6923      	ldr	r3, [r4, #16]
 8012322:	2102      	movs	r1, #2
 8012324:	68a2      	ldr	r2, [r4, #8]
 8012326:	3302      	adds	r3, #2
 8012328:	7da0      	ldrb	r0, [r4, #22]
 801232a:	444a      	add	r2, r9
 801232c:	7561      	strb	r1, [r4, #21]
 801232e:	1b9b      	subs	r3, r3, r6
 8012330:	f080 0001 	eor.w	r0, r0, #1
 8012334:	60a2      	str	r2, [r4, #8]
 8012336:	6123      	str	r3, [r4, #16]
 8012338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801233c:	2102      	movs	r1, #2
 801233e:	4620      	mov	r0, r4
 8012340:	f001 f8b8 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012344:	b180      	cbz	r0, 8012368 <ucdr_deserialize_uint16_t+0xa0>
 8012346:	7d23      	ldrb	r3, [r4, #20]
 8012348:	2b01      	cmp	r3, #1
 801234a:	68a3      	ldr	r3, [r4, #8]
 801234c:	d011      	beq.n	8012372 <ucdr_deserialize_uint16_t+0xaa>
 801234e:	785b      	ldrb	r3, [r3, #1]
 8012350:	702b      	strb	r3, [r5, #0]
 8012352:	68a3      	ldr	r3, [r4, #8]
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	706b      	strb	r3, [r5, #1]
 8012358:	2102      	movs	r1, #2
 801235a:	68a2      	ldr	r2, [r4, #8]
 801235c:	6923      	ldr	r3, [r4, #16]
 801235e:	440a      	add	r2, r1
 8012360:	7561      	strb	r1, [r4, #21]
 8012362:	440b      	add	r3, r1
 8012364:	60a2      	str	r2, [r4, #8]
 8012366:	6123      	str	r3, [r4, #16]
 8012368:	7da0      	ldrb	r0, [r4, #22]
 801236a:	f080 0001 	eor.w	r0, r0, #1
 801236e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012372:	881b      	ldrh	r3, [r3, #0]
 8012374:	802b      	strh	r3, [r5, #0]
 8012376:	e7ef      	b.n	8012358 <ucdr_deserialize_uint16_t+0x90>
 8012378:	68a2      	ldr	r2, [r4, #8]
 801237a:	6923      	ldr	r3, [r4, #16]
 801237c:	1b92      	subs	r2, r2, r6
 801237e:	7da0      	ldrb	r0, [r4, #22]
 8012380:	1b9b      	subs	r3, r3, r6
 8012382:	f884 8015 	strb.w	r8, [r4, #21]
 8012386:	f080 0001 	eor.w	r0, r0, #1
 801238a:	60a2      	str	r2, [r4, #8]
 801238c:	6123      	str	r3, [r4, #16]
 801238e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012392:	68a3      	ldr	r3, [r4, #8]
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	706b      	strb	r3, [r5, #1]
 8012398:	e7c2      	b.n	8012320 <ucdr_deserialize_uint16_t+0x58>
 801239a:	4639      	mov	r1, r7
 801239c:	4632      	mov	r2, r6
 801239e:	4628      	mov	r0, r5
 80123a0:	f00e fb97 	bl	8020ad2 <memcpy>
 80123a4:	464a      	mov	r2, r9
 80123a6:	19a8      	adds	r0, r5, r6
 80123a8:	68a1      	ldr	r1, [r4, #8]
 80123aa:	f00e fb92 	bl	8020ad2 <memcpy>
 80123ae:	e7b7      	b.n	8012320 <ucdr_deserialize_uint16_t+0x58>

080123b0 <ucdr_deserialize_endian_uint16_t>:
 80123b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123b4:	4604      	mov	r4, r0
 80123b6:	460e      	mov	r6, r1
 80123b8:	2102      	movs	r1, #2
 80123ba:	4615      	mov	r5, r2
 80123bc:	f001 f8ce 	bl	801355c <ucdr_buffer_alignment>
 80123c0:	4601      	mov	r1, r0
 80123c2:	4620      	mov	r0, r4
 80123c4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80123c8:	f001 f910 	bl	80135ec <ucdr_advance_buffer>
 80123cc:	2102      	movs	r1, #2
 80123ce:	4620      	mov	r0, r4
 80123d0:	f001 f864 	bl	801349c <ucdr_check_buffer_available_for>
 80123d4:	bb70      	cbnz	r0, 8012434 <ucdr_deserialize_endian_uint16_t+0x84>
 80123d6:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 80123da:	454f      	cmp	r7, r9
 80123dc:	d925      	bls.n	801242a <ucdr_deserialize_endian_uint16_t+0x7a>
 80123de:	6923      	ldr	r3, [r4, #16]
 80123e0:	4620      	mov	r0, r4
 80123e2:	60a7      	str	r7, [r4, #8]
 80123e4:	eba7 0709 	sub.w	r7, r7, r9
 80123e8:	443b      	add	r3, r7
 80123ea:	f1c7 0a02 	rsb	sl, r7, #2
 80123ee:	6123      	str	r3, [r4, #16]
 80123f0:	4651      	mov	r1, sl
 80123f2:	f001 f85f 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 80123f6:	2800      	cmp	r0, #0
 80123f8:	d034      	beq.n	8012464 <ucdr_deserialize_endian_uint16_t+0xb4>
 80123fa:	2e01      	cmp	r6, #1
 80123fc:	d043      	beq.n	8012486 <ucdr_deserialize_endian_uint16_t+0xd6>
 80123fe:	f899 3001 	ldrb.w	r3, [r9, #1]
 8012402:	702b      	strb	r3, [r5, #0]
 8012404:	2f00      	cmp	r7, #0
 8012406:	d03a      	beq.n	801247e <ucdr_deserialize_endian_uint16_t+0xce>
 8012408:	f899 3000 	ldrb.w	r3, [r9]
 801240c:	706b      	strb	r3, [r5, #1]
 801240e:	6923      	ldr	r3, [r4, #16]
 8012410:	2102      	movs	r1, #2
 8012412:	68a2      	ldr	r2, [r4, #8]
 8012414:	3302      	adds	r3, #2
 8012416:	7da0      	ldrb	r0, [r4, #22]
 8012418:	4452      	add	r2, sl
 801241a:	7561      	strb	r1, [r4, #21]
 801241c:	1bdb      	subs	r3, r3, r7
 801241e:	f080 0001 	eor.w	r0, r0, #1
 8012422:	60a2      	str	r2, [r4, #8]
 8012424:	6123      	str	r3, [r4, #16]
 8012426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801242a:	2102      	movs	r1, #2
 801242c:	4620      	mov	r0, r4
 801242e:	f001 f841 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012432:	b178      	cbz	r0, 8012454 <ucdr_deserialize_endian_uint16_t+0xa4>
 8012434:	2e01      	cmp	r6, #1
 8012436:	68a3      	ldr	r3, [r4, #8]
 8012438:	d011      	beq.n	801245e <ucdr_deserialize_endian_uint16_t+0xae>
 801243a:	785b      	ldrb	r3, [r3, #1]
 801243c:	702b      	strb	r3, [r5, #0]
 801243e:	68a3      	ldr	r3, [r4, #8]
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	706b      	strb	r3, [r5, #1]
 8012444:	2102      	movs	r1, #2
 8012446:	68a2      	ldr	r2, [r4, #8]
 8012448:	6923      	ldr	r3, [r4, #16]
 801244a:	440a      	add	r2, r1
 801244c:	7561      	strb	r1, [r4, #21]
 801244e:	440b      	add	r3, r1
 8012450:	60a2      	str	r2, [r4, #8]
 8012452:	6123      	str	r3, [r4, #16]
 8012454:	7da0      	ldrb	r0, [r4, #22]
 8012456:	f080 0001 	eor.w	r0, r0, #1
 801245a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801245e:	881b      	ldrh	r3, [r3, #0]
 8012460:	802b      	strh	r3, [r5, #0]
 8012462:	e7ef      	b.n	8012444 <ucdr_deserialize_endian_uint16_t+0x94>
 8012464:	68a2      	ldr	r2, [r4, #8]
 8012466:	6923      	ldr	r3, [r4, #16]
 8012468:	1bd2      	subs	r2, r2, r7
 801246a:	7da0      	ldrb	r0, [r4, #22]
 801246c:	1bdb      	subs	r3, r3, r7
 801246e:	f884 8015 	strb.w	r8, [r4, #21]
 8012472:	f080 0001 	eor.w	r0, r0, #1
 8012476:	60a2      	str	r2, [r4, #8]
 8012478:	6123      	str	r3, [r4, #16]
 801247a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801247e:	68a3      	ldr	r3, [r4, #8]
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	706b      	strb	r3, [r5, #1]
 8012484:	e7c3      	b.n	801240e <ucdr_deserialize_endian_uint16_t+0x5e>
 8012486:	4649      	mov	r1, r9
 8012488:	463a      	mov	r2, r7
 801248a:	4628      	mov	r0, r5
 801248c:	f00e fb21 	bl	8020ad2 <memcpy>
 8012490:	4652      	mov	r2, sl
 8012492:	19e8      	adds	r0, r5, r7
 8012494:	68a1      	ldr	r1, [r4, #8]
 8012496:	f00e fb1c 	bl	8020ad2 <memcpy>
 801249a:	e7b8      	b.n	801240e <ucdr_deserialize_endian_uint16_t+0x5e>

0801249c <ucdr_serialize_uint32_t>:
 801249c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124a0:	b082      	sub	sp, #8
 80124a2:	4604      	mov	r4, r0
 80124a4:	9101      	str	r1, [sp, #4]
 80124a6:	2104      	movs	r1, #4
 80124a8:	f001 f858 	bl	801355c <ucdr_buffer_alignment>
 80124ac:	4601      	mov	r1, r0
 80124ae:	4620      	mov	r0, r4
 80124b0:	7d67      	ldrb	r7, [r4, #21]
 80124b2:	f001 f89b 	bl	80135ec <ucdr_advance_buffer>
 80124b6:	2104      	movs	r1, #4
 80124b8:	4620      	mov	r0, r4
 80124ba:	f000 ffef 	bl	801349c <ucdr_check_buffer_available_for>
 80124be:	2800      	cmp	r0, #0
 80124c0:	d139      	bne.n	8012536 <ucdr_serialize_uint32_t+0x9a>
 80124c2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80124c6:	42ab      	cmp	r3, r5
 80124c8:	d930      	bls.n	801252c <ucdr_serialize_uint32_t+0x90>
 80124ca:	1b5e      	subs	r6, r3, r5
 80124cc:	60a3      	str	r3, [r4, #8]
 80124ce:	6923      	ldr	r3, [r4, #16]
 80124d0:	4620      	mov	r0, r4
 80124d2:	f1c6 0804 	rsb	r8, r6, #4
 80124d6:	4433      	add	r3, r6
 80124d8:	4641      	mov	r1, r8
 80124da:	6123      	str	r3, [r4, #16]
 80124dc:	f000 ffea 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 80124e0:	2800      	cmp	r0, #0
 80124e2:	d04c      	beq.n	801257e <ucdr_serialize_uint32_t+0xe2>
 80124e4:	7d23      	ldrb	r3, [r4, #20]
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d063      	beq.n	80125b2 <ucdr_serialize_uint32_t+0x116>
 80124ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80124ee:	702b      	strb	r3, [r5, #0]
 80124f0:	2e00      	cmp	r6, #0
 80124f2:	d051      	beq.n	8012598 <ucdr_serialize_uint32_t+0xfc>
 80124f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80124f8:	2e01      	cmp	r6, #1
 80124fa:	706b      	strb	r3, [r5, #1]
 80124fc:	d050      	beq.n	80125a0 <ucdr_serialize_uint32_t+0x104>
 80124fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012502:	2e02      	cmp	r6, #2
 8012504:	70ab      	strb	r3, [r5, #2]
 8012506:	d04f      	beq.n	80125a8 <ucdr_serialize_uint32_t+0x10c>
 8012508:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801250c:	70eb      	strb	r3, [r5, #3]
 801250e:	6923      	ldr	r3, [r4, #16]
 8012510:	2104      	movs	r1, #4
 8012512:	68a2      	ldr	r2, [r4, #8]
 8012514:	3304      	adds	r3, #4
 8012516:	7da0      	ldrb	r0, [r4, #22]
 8012518:	4442      	add	r2, r8
 801251a:	7561      	strb	r1, [r4, #21]
 801251c:	1b9e      	subs	r6, r3, r6
 801251e:	f080 0001 	eor.w	r0, r0, #1
 8012522:	60a2      	str	r2, [r4, #8]
 8012524:	6126      	str	r6, [r4, #16]
 8012526:	b002      	add	sp, #8
 8012528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801252c:	2104      	movs	r1, #4
 801252e:	4620      	mov	r0, r4
 8012530:	f000 ffc0 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012534:	b1d0      	cbz	r0, 801256c <ucdr_serialize_uint32_t+0xd0>
 8012536:	7d23      	ldrb	r3, [r4, #20]
 8012538:	2b01      	cmp	r3, #1
 801253a:	68a3      	ldr	r3, [r4, #8]
 801253c:	d01c      	beq.n	8012578 <ucdr_serialize_uint32_t+0xdc>
 801253e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012542:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012546:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801254a:	7018      	strb	r0, [r3, #0]
 801254c:	68a3      	ldr	r3, [r4, #8]
 801254e:	705a      	strb	r2, [r3, #1]
 8012550:	68a3      	ldr	r3, [r4, #8]
 8012552:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012556:	7099      	strb	r1, [r3, #2]
 8012558:	68a3      	ldr	r3, [r4, #8]
 801255a:	70da      	strb	r2, [r3, #3]
 801255c:	2104      	movs	r1, #4
 801255e:	68a2      	ldr	r2, [r4, #8]
 8012560:	6923      	ldr	r3, [r4, #16]
 8012562:	440a      	add	r2, r1
 8012564:	7561      	strb	r1, [r4, #21]
 8012566:	440b      	add	r3, r1
 8012568:	60a2      	str	r2, [r4, #8]
 801256a:	6123      	str	r3, [r4, #16]
 801256c:	7da0      	ldrb	r0, [r4, #22]
 801256e:	f080 0001 	eor.w	r0, r0, #1
 8012572:	b002      	add	sp, #8
 8012574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012578:	9a01      	ldr	r2, [sp, #4]
 801257a:	601a      	str	r2, [r3, #0]
 801257c:	e7ee      	b.n	801255c <ucdr_serialize_uint32_t+0xc0>
 801257e:	68a2      	ldr	r2, [r4, #8]
 8012580:	6923      	ldr	r3, [r4, #16]
 8012582:	7da0      	ldrb	r0, [r4, #22]
 8012584:	1b92      	subs	r2, r2, r6
 8012586:	1b9b      	subs	r3, r3, r6
 8012588:	7567      	strb	r7, [r4, #21]
 801258a:	f080 0001 	eor.w	r0, r0, #1
 801258e:	60a2      	str	r2, [r4, #8]
 8012590:	6123      	str	r3, [r4, #16]
 8012592:	b002      	add	sp, #8
 8012594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012598:	68a3      	ldr	r3, [r4, #8]
 801259a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801259e:	701a      	strb	r2, [r3, #0]
 80125a0:	68a3      	ldr	r3, [r4, #8]
 80125a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125a6:	701a      	strb	r2, [r3, #0]
 80125a8:	68a3      	ldr	r3, [r4, #8]
 80125aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125ae:	701a      	strb	r2, [r3, #0]
 80125b0:	e7ad      	b.n	801250e <ucdr_serialize_uint32_t+0x72>
 80125b2:	4628      	mov	r0, r5
 80125b4:	ad01      	add	r5, sp, #4
 80125b6:	4632      	mov	r2, r6
 80125b8:	4629      	mov	r1, r5
 80125ba:	f00e fa8a 	bl	8020ad2 <memcpy>
 80125be:	4642      	mov	r2, r8
 80125c0:	19a9      	adds	r1, r5, r6
 80125c2:	68a0      	ldr	r0, [r4, #8]
 80125c4:	f00e fa85 	bl	8020ad2 <memcpy>
 80125c8:	e7a1      	b.n	801250e <ucdr_serialize_uint32_t+0x72>
 80125ca:	bf00      	nop

080125cc <ucdr_serialize_endian_uint32_t>:
 80125cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125d0:	4604      	mov	r4, r0
 80125d2:	b083      	sub	sp, #12
 80125d4:	460d      	mov	r5, r1
 80125d6:	2104      	movs	r1, #4
 80125d8:	9201      	str	r2, [sp, #4]
 80125da:	f000 ffbf 	bl	801355c <ucdr_buffer_alignment>
 80125de:	4601      	mov	r1, r0
 80125e0:	4620      	mov	r0, r4
 80125e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80125e6:	f001 f801 	bl	80135ec <ucdr_advance_buffer>
 80125ea:	2104      	movs	r1, #4
 80125ec:	4620      	mov	r0, r4
 80125ee:	f000 ff55 	bl	801349c <ucdr_check_buffer_available_for>
 80125f2:	2800      	cmp	r0, #0
 80125f4:	d138      	bne.n	8012668 <ucdr_serialize_endian_uint32_t+0x9c>
 80125f6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80125fa:	42b7      	cmp	r7, r6
 80125fc:	d92f      	bls.n	801265e <ucdr_serialize_endian_uint32_t+0x92>
 80125fe:	6923      	ldr	r3, [r4, #16]
 8012600:	4620      	mov	r0, r4
 8012602:	60a7      	str	r7, [r4, #8]
 8012604:	1bbf      	subs	r7, r7, r6
 8012606:	443b      	add	r3, r7
 8012608:	f1c7 0904 	rsb	r9, r7, #4
 801260c:	6123      	str	r3, [r4, #16]
 801260e:	4649      	mov	r1, r9
 8012610:	f000 ff50 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012614:	2800      	cmp	r0, #0
 8012616:	d04a      	beq.n	80126ae <ucdr_serialize_endian_uint32_t+0xe2>
 8012618:	2d01      	cmp	r5, #1
 801261a:	d063      	beq.n	80126e4 <ucdr_serialize_endian_uint32_t+0x118>
 801261c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012620:	7033      	strb	r3, [r6, #0]
 8012622:	2f00      	cmp	r7, #0
 8012624:	d051      	beq.n	80126ca <ucdr_serialize_endian_uint32_t+0xfe>
 8012626:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801262a:	2f01      	cmp	r7, #1
 801262c:	7073      	strb	r3, [r6, #1]
 801262e:	d050      	beq.n	80126d2 <ucdr_serialize_endian_uint32_t+0x106>
 8012630:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012634:	2f02      	cmp	r7, #2
 8012636:	70b3      	strb	r3, [r6, #2]
 8012638:	d04f      	beq.n	80126da <ucdr_serialize_endian_uint32_t+0x10e>
 801263a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801263e:	70f3      	strb	r3, [r6, #3]
 8012640:	6923      	ldr	r3, [r4, #16]
 8012642:	2104      	movs	r1, #4
 8012644:	68a2      	ldr	r2, [r4, #8]
 8012646:	7da0      	ldrb	r0, [r4, #22]
 8012648:	3304      	adds	r3, #4
 801264a:	444a      	add	r2, r9
 801264c:	7561      	strb	r1, [r4, #21]
 801264e:	1bdb      	subs	r3, r3, r7
 8012650:	f080 0001 	eor.w	r0, r0, #1
 8012654:	60a2      	str	r2, [r4, #8]
 8012656:	6123      	str	r3, [r4, #16]
 8012658:	b003      	add	sp, #12
 801265a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801265e:	2104      	movs	r1, #4
 8012660:	4620      	mov	r0, r4
 8012662:	f000 ff27 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012666:	b1c8      	cbz	r0, 801269c <ucdr_serialize_endian_uint32_t+0xd0>
 8012668:	2d01      	cmp	r5, #1
 801266a:	68a3      	ldr	r3, [r4, #8]
 801266c:	d01c      	beq.n	80126a8 <ucdr_serialize_endian_uint32_t+0xdc>
 801266e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012672:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012676:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801267a:	7018      	strb	r0, [r3, #0]
 801267c:	68a3      	ldr	r3, [r4, #8]
 801267e:	705a      	strb	r2, [r3, #1]
 8012680:	68a3      	ldr	r3, [r4, #8]
 8012682:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012686:	7099      	strb	r1, [r3, #2]
 8012688:	68a3      	ldr	r3, [r4, #8]
 801268a:	70da      	strb	r2, [r3, #3]
 801268c:	2104      	movs	r1, #4
 801268e:	68a2      	ldr	r2, [r4, #8]
 8012690:	6923      	ldr	r3, [r4, #16]
 8012692:	440a      	add	r2, r1
 8012694:	7561      	strb	r1, [r4, #21]
 8012696:	440b      	add	r3, r1
 8012698:	60a2      	str	r2, [r4, #8]
 801269a:	6123      	str	r3, [r4, #16]
 801269c:	7da0      	ldrb	r0, [r4, #22]
 801269e:	f080 0001 	eor.w	r0, r0, #1
 80126a2:	b003      	add	sp, #12
 80126a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126a8:	9a01      	ldr	r2, [sp, #4]
 80126aa:	601a      	str	r2, [r3, #0]
 80126ac:	e7ee      	b.n	801268c <ucdr_serialize_endian_uint32_t+0xc0>
 80126ae:	68a2      	ldr	r2, [r4, #8]
 80126b0:	6923      	ldr	r3, [r4, #16]
 80126b2:	7da0      	ldrb	r0, [r4, #22]
 80126b4:	1bd2      	subs	r2, r2, r7
 80126b6:	1bdb      	subs	r3, r3, r7
 80126b8:	f884 8015 	strb.w	r8, [r4, #21]
 80126bc:	f080 0001 	eor.w	r0, r0, #1
 80126c0:	60a2      	str	r2, [r4, #8]
 80126c2:	6123      	str	r3, [r4, #16]
 80126c4:	b003      	add	sp, #12
 80126c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126ca:	68a3      	ldr	r3, [r4, #8]
 80126cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80126d0:	701a      	strb	r2, [r3, #0]
 80126d2:	68a3      	ldr	r3, [r4, #8]
 80126d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80126d8:	701a      	strb	r2, [r3, #0]
 80126da:	68a3      	ldr	r3, [r4, #8]
 80126dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80126e0:	701a      	strb	r2, [r3, #0]
 80126e2:	e7ad      	b.n	8012640 <ucdr_serialize_endian_uint32_t+0x74>
 80126e4:	ad01      	add	r5, sp, #4
 80126e6:	463a      	mov	r2, r7
 80126e8:	4630      	mov	r0, r6
 80126ea:	4629      	mov	r1, r5
 80126ec:	f00e f9f1 	bl	8020ad2 <memcpy>
 80126f0:	464a      	mov	r2, r9
 80126f2:	19e9      	adds	r1, r5, r7
 80126f4:	68a0      	ldr	r0, [r4, #8]
 80126f6:	f00e f9ec 	bl	8020ad2 <memcpy>
 80126fa:	e7a1      	b.n	8012640 <ucdr_serialize_endian_uint32_t+0x74>

080126fc <ucdr_deserialize_uint32_t>:
 80126fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012700:	4604      	mov	r4, r0
 8012702:	460d      	mov	r5, r1
 8012704:	2104      	movs	r1, #4
 8012706:	f000 ff29 	bl	801355c <ucdr_buffer_alignment>
 801270a:	4601      	mov	r1, r0
 801270c:	4620      	mov	r0, r4
 801270e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012712:	f000 ff6b 	bl	80135ec <ucdr_advance_buffer>
 8012716:	2104      	movs	r1, #4
 8012718:	4620      	mov	r0, r4
 801271a:	f000 febf 	bl	801349c <ucdr_check_buffer_available_for>
 801271e:	2800      	cmp	r0, #0
 8012720:	d138      	bne.n	8012794 <ucdr_deserialize_uint32_t+0x98>
 8012722:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012726:	42b7      	cmp	r7, r6
 8012728:	d92f      	bls.n	801278a <ucdr_deserialize_uint32_t+0x8e>
 801272a:	6923      	ldr	r3, [r4, #16]
 801272c:	4620      	mov	r0, r4
 801272e:	60a7      	str	r7, [r4, #8]
 8012730:	1bbf      	subs	r7, r7, r6
 8012732:	443b      	add	r3, r7
 8012734:	f1c7 0904 	rsb	r9, r7, #4
 8012738:	6123      	str	r3, [r4, #16]
 801273a:	4649      	mov	r1, r9
 801273c:	f000 feba 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012740:	2800      	cmp	r0, #0
 8012742:	d046      	beq.n	80127d2 <ucdr_deserialize_uint32_t+0xd6>
 8012744:	7d23      	ldrb	r3, [r4, #20]
 8012746:	2b01      	cmp	r3, #1
 8012748:	d05c      	beq.n	8012804 <ucdr_deserialize_uint32_t+0x108>
 801274a:	78f3      	ldrb	r3, [r6, #3]
 801274c:	702b      	strb	r3, [r5, #0]
 801274e:	2f00      	cmp	r7, #0
 8012750:	d04c      	beq.n	80127ec <ucdr_deserialize_uint32_t+0xf0>
 8012752:	78b3      	ldrb	r3, [r6, #2]
 8012754:	2f01      	cmp	r7, #1
 8012756:	706b      	strb	r3, [r5, #1]
 8012758:	f105 0302 	add.w	r3, r5, #2
 801275c:	d04a      	beq.n	80127f4 <ucdr_deserialize_uint32_t+0xf8>
 801275e:	7873      	ldrb	r3, [r6, #1]
 8012760:	2f02      	cmp	r7, #2
 8012762:	70ab      	strb	r3, [r5, #2]
 8012764:	f105 0303 	add.w	r3, r5, #3
 8012768:	d048      	beq.n	80127fc <ucdr_deserialize_uint32_t+0x100>
 801276a:	7833      	ldrb	r3, [r6, #0]
 801276c:	70eb      	strb	r3, [r5, #3]
 801276e:	6923      	ldr	r3, [r4, #16]
 8012770:	2104      	movs	r1, #4
 8012772:	68a2      	ldr	r2, [r4, #8]
 8012774:	3304      	adds	r3, #4
 8012776:	7da0      	ldrb	r0, [r4, #22]
 8012778:	444a      	add	r2, r9
 801277a:	7561      	strb	r1, [r4, #21]
 801277c:	1bdb      	subs	r3, r3, r7
 801277e:	f080 0001 	eor.w	r0, r0, #1
 8012782:	60a2      	str	r2, [r4, #8]
 8012784:	6123      	str	r3, [r4, #16]
 8012786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801278a:	2104      	movs	r1, #4
 801278c:	4620      	mov	r0, r4
 801278e:	f000 fe91 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012792:	b1b0      	cbz	r0, 80127c2 <ucdr_deserialize_uint32_t+0xc6>
 8012794:	7d23      	ldrb	r3, [r4, #20]
 8012796:	2b01      	cmp	r3, #1
 8012798:	68a3      	ldr	r3, [r4, #8]
 801279a:	d017      	beq.n	80127cc <ucdr_deserialize_uint32_t+0xd0>
 801279c:	78db      	ldrb	r3, [r3, #3]
 801279e:	702b      	strb	r3, [r5, #0]
 80127a0:	68a3      	ldr	r3, [r4, #8]
 80127a2:	789b      	ldrb	r3, [r3, #2]
 80127a4:	706b      	strb	r3, [r5, #1]
 80127a6:	68a3      	ldr	r3, [r4, #8]
 80127a8:	785b      	ldrb	r3, [r3, #1]
 80127aa:	70ab      	strb	r3, [r5, #2]
 80127ac:	68a3      	ldr	r3, [r4, #8]
 80127ae:	781b      	ldrb	r3, [r3, #0]
 80127b0:	70eb      	strb	r3, [r5, #3]
 80127b2:	2104      	movs	r1, #4
 80127b4:	68a2      	ldr	r2, [r4, #8]
 80127b6:	6923      	ldr	r3, [r4, #16]
 80127b8:	440a      	add	r2, r1
 80127ba:	7561      	strb	r1, [r4, #21]
 80127bc:	440b      	add	r3, r1
 80127be:	60a2      	str	r2, [r4, #8]
 80127c0:	6123      	str	r3, [r4, #16]
 80127c2:	7da0      	ldrb	r0, [r4, #22]
 80127c4:	f080 0001 	eor.w	r0, r0, #1
 80127c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	602b      	str	r3, [r5, #0]
 80127d0:	e7ef      	b.n	80127b2 <ucdr_deserialize_uint32_t+0xb6>
 80127d2:	68a2      	ldr	r2, [r4, #8]
 80127d4:	6923      	ldr	r3, [r4, #16]
 80127d6:	1bd2      	subs	r2, r2, r7
 80127d8:	7da0      	ldrb	r0, [r4, #22]
 80127da:	1bdb      	subs	r3, r3, r7
 80127dc:	f884 8015 	strb.w	r8, [r4, #21]
 80127e0:	f080 0001 	eor.w	r0, r0, #1
 80127e4:	60a2      	str	r2, [r4, #8]
 80127e6:	6123      	str	r3, [r4, #16]
 80127e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127ec:	68a3      	ldr	r3, [r4, #8]
 80127ee:	789b      	ldrb	r3, [r3, #2]
 80127f0:	706b      	strb	r3, [r5, #1]
 80127f2:	1cab      	adds	r3, r5, #2
 80127f4:	68a2      	ldr	r2, [r4, #8]
 80127f6:	7852      	ldrb	r2, [r2, #1]
 80127f8:	f803 2b01 	strb.w	r2, [r3], #1
 80127fc:	68a2      	ldr	r2, [r4, #8]
 80127fe:	7812      	ldrb	r2, [r2, #0]
 8012800:	701a      	strb	r2, [r3, #0]
 8012802:	e7b4      	b.n	801276e <ucdr_deserialize_uint32_t+0x72>
 8012804:	4631      	mov	r1, r6
 8012806:	463a      	mov	r2, r7
 8012808:	4628      	mov	r0, r5
 801280a:	f00e f962 	bl	8020ad2 <memcpy>
 801280e:	464a      	mov	r2, r9
 8012810:	19e8      	adds	r0, r5, r7
 8012812:	68a1      	ldr	r1, [r4, #8]
 8012814:	f00e f95d 	bl	8020ad2 <memcpy>
 8012818:	e7a9      	b.n	801276e <ucdr_deserialize_uint32_t+0x72>
 801281a:	bf00      	nop

0801281c <ucdr_deserialize_endian_uint32_t>:
 801281c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012820:	4604      	mov	r4, r0
 8012822:	460e      	mov	r6, r1
 8012824:	2104      	movs	r1, #4
 8012826:	4615      	mov	r5, r2
 8012828:	f000 fe98 	bl	801355c <ucdr_buffer_alignment>
 801282c:	4601      	mov	r1, r0
 801282e:	4620      	mov	r0, r4
 8012830:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012834:	f000 feda 	bl	80135ec <ucdr_advance_buffer>
 8012838:	2104      	movs	r1, #4
 801283a:	4620      	mov	r0, r4
 801283c:	f000 fe2e 	bl	801349c <ucdr_check_buffer_available_for>
 8012840:	2800      	cmp	r0, #0
 8012842:	d13c      	bne.n	80128be <ucdr_deserialize_endian_uint32_t+0xa2>
 8012844:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012848:	42bb      	cmp	r3, r7
 801284a:	d933      	bls.n	80128b4 <ucdr_deserialize_endian_uint32_t+0x98>
 801284c:	eba3 0907 	sub.w	r9, r3, r7
 8012850:	60a3      	str	r3, [r4, #8]
 8012852:	6923      	ldr	r3, [r4, #16]
 8012854:	4620      	mov	r0, r4
 8012856:	f1c9 0a04 	rsb	sl, r9, #4
 801285a:	444b      	add	r3, r9
 801285c:	4651      	mov	r1, sl
 801285e:	6123      	str	r3, [r4, #16]
 8012860:	f000 fe28 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012864:	2800      	cmp	r0, #0
 8012866:	d048      	beq.n	80128fa <ucdr_deserialize_endian_uint32_t+0xde>
 8012868:	2e01      	cmp	r6, #1
 801286a:	d061      	beq.n	8012930 <ucdr_deserialize_endian_uint32_t+0x114>
 801286c:	78fb      	ldrb	r3, [r7, #3]
 801286e:	702b      	strb	r3, [r5, #0]
 8012870:	f1b9 0f00 	cmp.w	r9, #0
 8012874:	d050      	beq.n	8012918 <ucdr_deserialize_endian_uint32_t+0xfc>
 8012876:	78bb      	ldrb	r3, [r7, #2]
 8012878:	f1b9 0f01 	cmp.w	r9, #1
 801287c:	706b      	strb	r3, [r5, #1]
 801287e:	f105 0302 	add.w	r3, r5, #2
 8012882:	d04d      	beq.n	8012920 <ucdr_deserialize_endian_uint32_t+0x104>
 8012884:	787b      	ldrb	r3, [r7, #1]
 8012886:	f1b9 0f02 	cmp.w	r9, #2
 801288a:	70ab      	strb	r3, [r5, #2]
 801288c:	f105 0303 	add.w	r3, r5, #3
 8012890:	d04a      	beq.n	8012928 <ucdr_deserialize_endian_uint32_t+0x10c>
 8012892:	783b      	ldrb	r3, [r7, #0]
 8012894:	70eb      	strb	r3, [r5, #3]
 8012896:	6923      	ldr	r3, [r4, #16]
 8012898:	2104      	movs	r1, #4
 801289a:	68a2      	ldr	r2, [r4, #8]
 801289c:	3304      	adds	r3, #4
 801289e:	7da0      	ldrb	r0, [r4, #22]
 80128a0:	4452      	add	r2, sl
 80128a2:	7561      	strb	r1, [r4, #21]
 80128a4:	eba3 0309 	sub.w	r3, r3, r9
 80128a8:	f080 0001 	eor.w	r0, r0, #1
 80128ac:	60a2      	str	r2, [r4, #8]
 80128ae:	6123      	str	r3, [r4, #16]
 80128b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128b4:	2104      	movs	r1, #4
 80128b6:	4620      	mov	r0, r4
 80128b8:	f000 fdfc 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 80128bc:	b1a8      	cbz	r0, 80128ea <ucdr_deserialize_endian_uint32_t+0xce>
 80128be:	2e01      	cmp	r6, #1
 80128c0:	68a3      	ldr	r3, [r4, #8]
 80128c2:	d017      	beq.n	80128f4 <ucdr_deserialize_endian_uint32_t+0xd8>
 80128c4:	78db      	ldrb	r3, [r3, #3]
 80128c6:	702b      	strb	r3, [r5, #0]
 80128c8:	68a3      	ldr	r3, [r4, #8]
 80128ca:	789b      	ldrb	r3, [r3, #2]
 80128cc:	706b      	strb	r3, [r5, #1]
 80128ce:	68a3      	ldr	r3, [r4, #8]
 80128d0:	785b      	ldrb	r3, [r3, #1]
 80128d2:	70ab      	strb	r3, [r5, #2]
 80128d4:	68a3      	ldr	r3, [r4, #8]
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	70eb      	strb	r3, [r5, #3]
 80128da:	2104      	movs	r1, #4
 80128dc:	68a2      	ldr	r2, [r4, #8]
 80128de:	6923      	ldr	r3, [r4, #16]
 80128e0:	440a      	add	r2, r1
 80128e2:	7561      	strb	r1, [r4, #21]
 80128e4:	440b      	add	r3, r1
 80128e6:	60a2      	str	r2, [r4, #8]
 80128e8:	6123      	str	r3, [r4, #16]
 80128ea:	7da0      	ldrb	r0, [r4, #22]
 80128ec:	f080 0001 	eor.w	r0, r0, #1
 80128f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	602b      	str	r3, [r5, #0]
 80128f8:	e7ef      	b.n	80128da <ucdr_deserialize_endian_uint32_t+0xbe>
 80128fa:	68a2      	ldr	r2, [r4, #8]
 80128fc:	6923      	ldr	r3, [r4, #16]
 80128fe:	eba2 0209 	sub.w	r2, r2, r9
 8012902:	7da0      	ldrb	r0, [r4, #22]
 8012904:	eba3 0309 	sub.w	r3, r3, r9
 8012908:	f884 8015 	strb.w	r8, [r4, #21]
 801290c:	f080 0001 	eor.w	r0, r0, #1
 8012910:	60a2      	str	r2, [r4, #8]
 8012912:	6123      	str	r3, [r4, #16]
 8012914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012918:	68a3      	ldr	r3, [r4, #8]
 801291a:	789b      	ldrb	r3, [r3, #2]
 801291c:	706b      	strb	r3, [r5, #1]
 801291e:	1cab      	adds	r3, r5, #2
 8012920:	68a2      	ldr	r2, [r4, #8]
 8012922:	7852      	ldrb	r2, [r2, #1]
 8012924:	f803 2b01 	strb.w	r2, [r3], #1
 8012928:	68a2      	ldr	r2, [r4, #8]
 801292a:	7812      	ldrb	r2, [r2, #0]
 801292c:	701a      	strb	r2, [r3, #0]
 801292e:	e7b2      	b.n	8012896 <ucdr_deserialize_endian_uint32_t+0x7a>
 8012930:	4639      	mov	r1, r7
 8012932:	464a      	mov	r2, r9
 8012934:	4628      	mov	r0, r5
 8012936:	f00e f8cc 	bl	8020ad2 <memcpy>
 801293a:	4652      	mov	r2, sl
 801293c:	eb05 0009 	add.w	r0, r5, r9
 8012940:	68a1      	ldr	r1, [r4, #8]
 8012942:	f00e f8c6 	bl	8020ad2 <memcpy>
 8012946:	e7a6      	b.n	8012896 <ucdr_deserialize_endian_uint32_t+0x7a>

08012948 <ucdr_serialize_uint64_t>:
 8012948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801294c:	4604      	mov	r4, r0
 801294e:	b082      	sub	sp, #8
 8012950:	2108      	movs	r1, #8
 8012952:	e9cd 2300 	strd	r2, r3, [sp]
 8012956:	f000 fe01 	bl	801355c <ucdr_buffer_alignment>
 801295a:	4601      	mov	r1, r0
 801295c:	4620      	mov	r0, r4
 801295e:	7d67      	ldrb	r7, [r4, #21]
 8012960:	f000 fe44 	bl	80135ec <ucdr_advance_buffer>
 8012964:	2108      	movs	r1, #8
 8012966:	4620      	mov	r0, r4
 8012968:	f000 fd98 	bl	801349c <ucdr_check_buffer_available_for>
 801296c:	2800      	cmp	r0, #0
 801296e:	d14e      	bne.n	8012a0e <ucdr_serialize_uint64_t+0xc6>
 8012970:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012974:	42ab      	cmp	r3, r5
 8012976:	d945      	bls.n	8012a04 <ucdr_serialize_uint64_t+0xbc>
 8012978:	1b5e      	subs	r6, r3, r5
 801297a:	60a3      	str	r3, [r4, #8]
 801297c:	6923      	ldr	r3, [r4, #16]
 801297e:	4620      	mov	r0, r4
 8012980:	f1c6 0808 	rsb	r8, r6, #8
 8012984:	4433      	add	r3, r6
 8012986:	4641      	mov	r1, r8
 8012988:	6123      	str	r3, [r4, #16]
 801298a:	f000 fd93 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 801298e:	2800      	cmp	r0, #0
 8012990:	d074      	beq.n	8012a7c <ucdr_serialize_uint64_t+0x134>
 8012992:	7d23      	ldrb	r3, [r4, #20]
 8012994:	2b01      	cmp	r3, #1
 8012996:	f000 809b 	beq.w	8012ad0 <ucdr_serialize_uint64_t+0x188>
 801299a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801299e:	702b      	strb	r3, [r5, #0]
 80129a0:	2e00      	cmp	r6, #0
 80129a2:	d078      	beq.n	8012a96 <ucdr_serialize_uint64_t+0x14e>
 80129a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80129a8:	2e01      	cmp	r6, #1
 80129aa:	706b      	strb	r3, [r5, #1]
 80129ac:	d077      	beq.n	8012a9e <ucdr_serialize_uint64_t+0x156>
 80129ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80129b2:	2e02      	cmp	r6, #2
 80129b4:	70ab      	strb	r3, [r5, #2]
 80129b6:	d076      	beq.n	8012aa6 <ucdr_serialize_uint64_t+0x15e>
 80129b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80129bc:	2e03      	cmp	r6, #3
 80129be:	70eb      	strb	r3, [r5, #3]
 80129c0:	d075      	beq.n	8012aae <ucdr_serialize_uint64_t+0x166>
 80129c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80129c6:	2e04      	cmp	r6, #4
 80129c8:	712b      	strb	r3, [r5, #4]
 80129ca:	d074      	beq.n	8012ab6 <ucdr_serialize_uint64_t+0x16e>
 80129cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80129d0:	2e05      	cmp	r6, #5
 80129d2:	716b      	strb	r3, [r5, #5]
 80129d4:	d073      	beq.n	8012abe <ucdr_serialize_uint64_t+0x176>
 80129d6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80129da:	2e06      	cmp	r6, #6
 80129dc:	71ab      	strb	r3, [r5, #6]
 80129de:	d072      	beq.n	8012ac6 <ucdr_serialize_uint64_t+0x17e>
 80129e0:	f89d 3000 	ldrb.w	r3, [sp]
 80129e4:	71eb      	strb	r3, [r5, #7]
 80129e6:	6923      	ldr	r3, [r4, #16]
 80129e8:	2108      	movs	r1, #8
 80129ea:	68a2      	ldr	r2, [r4, #8]
 80129ec:	3308      	adds	r3, #8
 80129ee:	7da0      	ldrb	r0, [r4, #22]
 80129f0:	4442      	add	r2, r8
 80129f2:	7561      	strb	r1, [r4, #21]
 80129f4:	1b9e      	subs	r6, r3, r6
 80129f6:	f080 0001 	eor.w	r0, r0, #1
 80129fa:	60a2      	str	r2, [r4, #8]
 80129fc:	6126      	str	r6, [r4, #16]
 80129fe:	b002      	add	sp, #8
 8012a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a04:	2108      	movs	r1, #8
 8012a06:	4620      	mov	r0, r4
 8012a08:	f000 fd54 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012a0c:	b350      	cbz	r0, 8012a64 <ucdr_serialize_uint64_t+0x11c>
 8012a0e:	7d23      	ldrb	r3, [r4, #20]
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d02d      	beq.n	8012a70 <ucdr_serialize_uint64_t+0x128>
 8012a14:	68a3      	ldr	r3, [r4, #8]
 8012a16:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012a1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a1e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012a22:	7018      	strb	r0, [r3, #0]
 8012a24:	68a3      	ldr	r3, [r4, #8]
 8012a26:	705a      	strb	r2, [r3, #1]
 8012a28:	68a3      	ldr	r3, [r4, #8]
 8012a2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a2e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012a32:	7099      	strb	r1, [r3, #2]
 8012a34:	68a3      	ldr	r3, [r4, #8]
 8012a36:	70da      	strb	r2, [r3, #3]
 8012a38:	68a3      	ldr	r3, [r4, #8]
 8012a3a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012a3e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012a42:	7118      	strb	r0, [r3, #4]
 8012a44:	68a3      	ldr	r3, [r4, #8]
 8012a46:	715a      	strb	r2, [r3, #5]
 8012a48:	68a3      	ldr	r3, [r4, #8]
 8012a4a:	f89d 2000 	ldrb.w	r2, [sp]
 8012a4e:	7199      	strb	r1, [r3, #6]
 8012a50:	68a3      	ldr	r3, [r4, #8]
 8012a52:	71da      	strb	r2, [r3, #7]
 8012a54:	2108      	movs	r1, #8
 8012a56:	68a2      	ldr	r2, [r4, #8]
 8012a58:	6923      	ldr	r3, [r4, #16]
 8012a5a:	440a      	add	r2, r1
 8012a5c:	7561      	strb	r1, [r4, #21]
 8012a5e:	440b      	add	r3, r1
 8012a60:	60a2      	str	r2, [r4, #8]
 8012a62:	6123      	str	r3, [r4, #16]
 8012a64:	7da0      	ldrb	r0, [r4, #22]
 8012a66:	f080 0001 	eor.w	r0, r0, #1
 8012a6a:	b002      	add	sp, #8
 8012a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a70:	466b      	mov	r3, sp
 8012a72:	68a2      	ldr	r2, [r4, #8]
 8012a74:	cb03      	ldmia	r3!, {r0, r1}
 8012a76:	6010      	str	r0, [r2, #0]
 8012a78:	6051      	str	r1, [r2, #4]
 8012a7a:	e7eb      	b.n	8012a54 <ucdr_serialize_uint64_t+0x10c>
 8012a7c:	68a2      	ldr	r2, [r4, #8]
 8012a7e:	6923      	ldr	r3, [r4, #16]
 8012a80:	7da0      	ldrb	r0, [r4, #22]
 8012a82:	1b92      	subs	r2, r2, r6
 8012a84:	1b9b      	subs	r3, r3, r6
 8012a86:	7567      	strb	r7, [r4, #21]
 8012a88:	f080 0001 	eor.w	r0, r0, #1
 8012a8c:	60a2      	str	r2, [r4, #8]
 8012a8e:	6123      	str	r3, [r4, #16]
 8012a90:	b002      	add	sp, #8
 8012a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a96:	68a3      	ldr	r3, [r4, #8]
 8012a98:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a9c:	701a      	strb	r2, [r3, #0]
 8012a9e:	68a3      	ldr	r3, [r4, #8]
 8012aa0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012aa4:	701a      	strb	r2, [r3, #0]
 8012aa6:	68a3      	ldr	r3, [r4, #8]
 8012aa8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012aac:	701a      	strb	r2, [r3, #0]
 8012aae:	68a3      	ldr	r3, [r4, #8]
 8012ab0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012ab4:	701a      	strb	r2, [r3, #0]
 8012ab6:	68a3      	ldr	r3, [r4, #8]
 8012ab8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012abc:	701a      	strb	r2, [r3, #0]
 8012abe:	68a3      	ldr	r3, [r4, #8]
 8012ac0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012ac4:	701a      	strb	r2, [r3, #0]
 8012ac6:	68a3      	ldr	r3, [r4, #8]
 8012ac8:	f89d 2000 	ldrb.w	r2, [sp]
 8012acc:	701a      	strb	r2, [r3, #0]
 8012ace:	e78a      	b.n	80129e6 <ucdr_serialize_uint64_t+0x9e>
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	466d      	mov	r5, sp
 8012ad4:	4632      	mov	r2, r6
 8012ad6:	4629      	mov	r1, r5
 8012ad8:	f00d fffb 	bl	8020ad2 <memcpy>
 8012adc:	4642      	mov	r2, r8
 8012ade:	19a9      	adds	r1, r5, r6
 8012ae0:	68a0      	ldr	r0, [r4, #8]
 8012ae2:	f00d fff6 	bl	8020ad2 <memcpy>
 8012ae6:	e77e      	b.n	80129e6 <ucdr_serialize_uint64_t+0x9e>

08012ae8 <ucdr_serialize_int16_t>:
 8012ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aec:	460b      	mov	r3, r1
 8012aee:	b082      	sub	sp, #8
 8012af0:	4604      	mov	r4, r0
 8012af2:	2102      	movs	r1, #2
 8012af4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012af8:	f000 fd30 	bl	801355c <ucdr_buffer_alignment>
 8012afc:	4601      	mov	r1, r0
 8012afe:	4620      	mov	r0, r4
 8012b00:	7d67      	ldrb	r7, [r4, #21]
 8012b02:	f000 fd73 	bl	80135ec <ucdr_advance_buffer>
 8012b06:	2102      	movs	r1, #2
 8012b08:	4620      	mov	r0, r4
 8012b0a:	f000 fcc7 	bl	801349c <ucdr_check_buffer_available_for>
 8012b0e:	bb78      	cbnz	r0, 8012b70 <ucdr_serialize_int16_t+0x88>
 8012b10:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012b14:	42ab      	cmp	r3, r5
 8012b16:	d926      	bls.n	8012b66 <ucdr_serialize_int16_t+0x7e>
 8012b18:	1b5e      	subs	r6, r3, r5
 8012b1a:	60a3      	str	r3, [r4, #8]
 8012b1c:	6923      	ldr	r3, [r4, #16]
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f1c6 0802 	rsb	r8, r6, #2
 8012b24:	4433      	add	r3, r6
 8012b26:	4641      	mov	r1, r8
 8012b28:	6123      	str	r3, [r4, #16]
 8012b2a:	f000 fcc3 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012b2e:	2800      	cmp	r0, #0
 8012b30:	d03b      	beq.n	8012baa <ucdr_serialize_int16_t+0xc2>
 8012b32:	7d23      	ldrb	r3, [r4, #20]
 8012b34:	2b01      	cmp	r3, #1
 8012b36:	d04a      	beq.n	8012bce <ucdr_serialize_int16_t+0xe6>
 8012b38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012b3c:	702b      	strb	r3, [r5, #0]
 8012b3e:	2e00      	cmp	r6, #0
 8012b40:	d040      	beq.n	8012bc4 <ucdr_serialize_int16_t+0xdc>
 8012b42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012b46:	706b      	strb	r3, [r5, #1]
 8012b48:	6923      	ldr	r3, [r4, #16]
 8012b4a:	2102      	movs	r1, #2
 8012b4c:	68a2      	ldr	r2, [r4, #8]
 8012b4e:	3302      	adds	r3, #2
 8012b50:	7da0      	ldrb	r0, [r4, #22]
 8012b52:	4442      	add	r2, r8
 8012b54:	7561      	strb	r1, [r4, #21]
 8012b56:	1b9e      	subs	r6, r3, r6
 8012b58:	f080 0001 	eor.w	r0, r0, #1
 8012b5c:	60a2      	str	r2, [r4, #8]
 8012b5e:	6126      	str	r6, [r4, #16]
 8012b60:	b002      	add	sp, #8
 8012b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b66:	2102      	movs	r1, #2
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f000 fca3 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012b6e:	b190      	cbz	r0, 8012b96 <ucdr_serialize_int16_t+0xae>
 8012b70:	7d23      	ldrb	r3, [r4, #20]
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	68a3      	ldr	r3, [r4, #8]
 8012b76:	d014      	beq.n	8012ba2 <ucdr_serialize_int16_t+0xba>
 8012b78:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012b7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012b80:	7019      	strb	r1, [r3, #0]
 8012b82:	68a3      	ldr	r3, [r4, #8]
 8012b84:	705a      	strb	r2, [r3, #1]
 8012b86:	2102      	movs	r1, #2
 8012b88:	68a2      	ldr	r2, [r4, #8]
 8012b8a:	6923      	ldr	r3, [r4, #16]
 8012b8c:	440a      	add	r2, r1
 8012b8e:	7561      	strb	r1, [r4, #21]
 8012b90:	440b      	add	r3, r1
 8012b92:	60a2      	str	r2, [r4, #8]
 8012b94:	6123      	str	r3, [r4, #16]
 8012b96:	7da0      	ldrb	r0, [r4, #22]
 8012b98:	f080 0001 	eor.w	r0, r0, #1
 8012b9c:	b002      	add	sp, #8
 8012b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ba2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012ba6:	801a      	strh	r2, [r3, #0]
 8012ba8:	e7ed      	b.n	8012b86 <ucdr_serialize_int16_t+0x9e>
 8012baa:	68a2      	ldr	r2, [r4, #8]
 8012bac:	6923      	ldr	r3, [r4, #16]
 8012bae:	7da0      	ldrb	r0, [r4, #22]
 8012bb0:	1b92      	subs	r2, r2, r6
 8012bb2:	1b9b      	subs	r3, r3, r6
 8012bb4:	7567      	strb	r7, [r4, #21]
 8012bb6:	f080 0001 	eor.w	r0, r0, #1
 8012bba:	60a2      	str	r2, [r4, #8]
 8012bbc:	6123      	str	r3, [r4, #16]
 8012bbe:	b002      	add	sp, #8
 8012bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bc4:	68a3      	ldr	r3, [r4, #8]
 8012bc6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012bca:	701a      	strb	r2, [r3, #0]
 8012bcc:	e7bc      	b.n	8012b48 <ucdr_serialize_int16_t+0x60>
 8012bce:	4628      	mov	r0, r5
 8012bd0:	f10d 0506 	add.w	r5, sp, #6
 8012bd4:	4632      	mov	r2, r6
 8012bd6:	4629      	mov	r1, r5
 8012bd8:	f00d ff7b 	bl	8020ad2 <memcpy>
 8012bdc:	4642      	mov	r2, r8
 8012bde:	19a9      	adds	r1, r5, r6
 8012be0:	68a0      	ldr	r0, [r4, #8]
 8012be2:	f00d ff76 	bl	8020ad2 <memcpy>
 8012be6:	e7af      	b.n	8012b48 <ucdr_serialize_int16_t+0x60>

08012be8 <ucdr_deserialize_int16_t>:
 8012be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bec:	4604      	mov	r4, r0
 8012bee:	460d      	mov	r5, r1
 8012bf0:	2102      	movs	r1, #2
 8012bf2:	f000 fcb3 	bl	801355c <ucdr_buffer_alignment>
 8012bf6:	4601      	mov	r1, r0
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012bfe:	f000 fcf5 	bl	80135ec <ucdr_advance_buffer>
 8012c02:	2102      	movs	r1, #2
 8012c04:	4620      	mov	r0, r4
 8012c06:	f000 fc49 	bl	801349c <ucdr_check_buffer_available_for>
 8012c0a:	bb60      	cbnz	r0, 8012c66 <ucdr_deserialize_int16_t+0x7e>
 8012c0c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012c10:	42be      	cmp	r6, r7
 8012c12:	d923      	bls.n	8012c5c <ucdr_deserialize_int16_t+0x74>
 8012c14:	6923      	ldr	r3, [r4, #16]
 8012c16:	4620      	mov	r0, r4
 8012c18:	60a6      	str	r6, [r4, #8]
 8012c1a:	1bf6      	subs	r6, r6, r7
 8012c1c:	4433      	add	r3, r6
 8012c1e:	f1c6 0902 	rsb	r9, r6, #2
 8012c22:	6123      	str	r3, [r4, #16]
 8012c24:	4649      	mov	r1, r9
 8012c26:	f000 fc45 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012c2a:	2800      	cmp	r0, #0
 8012c2c:	d034      	beq.n	8012c98 <ucdr_deserialize_int16_t+0xb0>
 8012c2e:	7d23      	ldrb	r3, [r4, #20]
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d042      	beq.n	8012cba <ucdr_deserialize_int16_t+0xd2>
 8012c34:	787b      	ldrb	r3, [r7, #1]
 8012c36:	702b      	strb	r3, [r5, #0]
 8012c38:	2e00      	cmp	r6, #0
 8012c3a:	d03a      	beq.n	8012cb2 <ucdr_deserialize_int16_t+0xca>
 8012c3c:	783b      	ldrb	r3, [r7, #0]
 8012c3e:	706b      	strb	r3, [r5, #1]
 8012c40:	6923      	ldr	r3, [r4, #16]
 8012c42:	2102      	movs	r1, #2
 8012c44:	68a2      	ldr	r2, [r4, #8]
 8012c46:	3302      	adds	r3, #2
 8012c48:	7da0      	ldrb	r0, [r4, #22]
 8012c4a:	444a      	add	r2, r9
 8012c4c:	7561      	strb	r1, [r4, #21]
 8012c4e:	1b9b      	subs	r3, r3, r6
 8012c50:	f080 0001 	eor.w	r0, r0, #1
 8012c54:	60a2      	str	r2, [r4, #8]
 8012c56:	6123      	str	r3, [r4, #16]
 8012c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c5c:	2102      	movs	r1, #2
 8012c5e:	4620      	mov	r0, r4
 8012c60:	f000 fc28 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012c64:	b180      	cbz	r0, 8012c88 <ucdr_deserialize_int16_t+0xa0>
 8012c66:	7d23      	ldrb	r3, [r4, #20]
 8012c68:	2b01      	cmp	r3, #1
 8012c6a:	68a3      	ldr	r3, [r4, #8]
 8012c6c:	d011      	beq.n	8012c92 <ucdr_deserialize_int16_t+0xaa>
 8012c6e:	785b      	ldrb	r3, [r3, #1]
 8012c70:	702b      	strb	r3, [r5, #0]
 8012c72:	68a3      	ldr	r3, [r4, #8]
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	706b      	strb	r3, [r5, #1]
 8012c78:	2102      	movs	r1, #2
 8012c7a:	68a2      	ldr	r2, [r4, #8]
 8012c7c:	6923      	ldr	r3, [r4, #16]
 8012c7e:	440a      	add	r2, r1
 8012c80:	7561      	strb	r1, [r4, #21]
 8012c82:	440b      	add	r3, r1
 8012c84:	60a2      	str	r2, [r4, #8]
 8012c86:	6123      	str	r3, [r4, #16]
 8012c88:	7da0      	ldrb	r0, [r4, #22]
 8012c8a:	f080 0001 	eor.w	r0, r0, #1
 8012c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c92:	881b      	ldrh	r3, [r3, #0]
 8012c94:	802b      	strh	r3, [r5, #0]
 8012c96:	e7ef      	b.n	8012c78 <ucdr_deserialize_int16_t+0x90>
 8012c98:	68a2      	ldr	r2, [r4, #8]
 8012c9a:	6923      	ldr	r3, [r4, #16]
 8012c9c:	1b92      	subs	r2, r2, r6
 8012c9e:	7da0      	ldrb	r0, [r4, #22]
 8012ca0:	1b9b      	subs	r3, r3, r6
 8012ca2:	f884 8015 	strb.w	r8, [r4, #21]
 8012ca6:	f080 0001 	eor.w	r0, r0, #1
 8012caa:	60a2      	str	r2, [r4, #8]
 8012cac:	6123      	str	r3, [r4, #16]
 8012cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cb2:	68a3      	ldr	r3, [r4, #8]
 8012cb4:	781b      	ldrb	r3, [r3, #0]
 8012cb6:	706b      	strb	r3, [r5, #1]
 8012cb8:	e7c2      	b.n	8012c40 <ucdr_deserialize_int16_t+0x58>
 8012cba:	4639      	mov	r1, r7
 8012cbc:	4632      	mov	r2, r6
 8012cbe:	4628      	mov	r0, r5
 8012cc0:	f00d ff07 	bl	8020ad2 <memcpy>
 8012cc4:	464a      	mov	r2, r9
 8012cc6:	19a8      	adds	r0, r5, r6
 8012cc8:	68a1      	ldr	r1, [r4, #8]
 8012cca:	f00d ff02 	bl	8020ad2 <memcpy>
 8012cce:	e7b7      	b.n	8012c40 <ucdr_deserialize_int16_t+0x58>

08012cd0 <ucdr_serialize_int32_t>:
 8012cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cd4:	b082      	sub	sp, #8
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	9101      	str	r1, [sp, #4]
 8012cda:	2104      	movs	r1, #4
 8012cdc:	f000 fc3e 	bl	801355c <ucdr_buffer_alignment>
 8012ce0:	4601      	mov	r1, r0
 8012ce2:	4620      	mov	r0, r4
 8012ce4:	7d67      	ldrb	r7, [r4, #21]
 8012ce6:	f000 fc81 	bl	80135ec <ucdr_advance_buffer>
 8012cea:	2104      	movs	r1, #4
 8012cec:	4620      	mov	r0, r4
 8012cee:	f000 fbd5 	bl	801349c <ucdr_check_buffer_available_for>
 8012cf2:	2800      	cmp	r0, #0
 8012cf4:	d139      	bne.n	8012d6a <ucdr_serialize_int32_t+0x9a>
 8012cf6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012cfa:	42ab      	cmp	r3, r5
 8012cfc:	d930      	bls.n	8012d60 <ucdr_serialize_int32_t+0x90>
 8012cfe:	1b5e      	subs	r6, r3, r5
 8012d00:	60a3      	str	r3, [r4, #8]
 8012d02:	6923      	ldr	r3, [r4, #16]
 8012d04:	4620      	mov	r0, r4
 8012d06:	f1c6 0804 	rsb	r8, r6, #4
 8012d0a:	4433      	add	r3, r6
 8012d0c:	4641      	mov	r1, r8
 8012d0e:	6123      	str	r3, [r4, #16]
 8012d10:	f000 fbd0 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012d14:	2800      	cmp	r0, #0
 8012d16:	d04c      	beq.n	8012db2 <ucdr_serialize_int32_t+0xe2>
 8012d18:	7d23      	ldrb	r3, [r4, #20]
 8012d1a:	2b01      	cmp	r3, #1
 8012d1c:	d063      	beq.n	8012de6 <ucdr_serialize_int32_t+0x116>
 8012d1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d22:	702b      	strb	r3, [r5, #0]
 8012d24:	2e00      	cmp	r6, #0
 8012d26:	d051      	beq.n	8012dcc <ucdr_serialize_int32_t+0xfc>
 8012d28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d2c:	2e01      	cmp	r6, #1
 8012d2e:	706b      	strb	r3, [r5, #1]
 8012d30:	d050      	beq.n	8012dd4 <ucdr_serialize_int32_t+0x104>
 8012d32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012d36:	2e02      	cmp	r6, #2
 8012d38:	70ab      	strb	r3, [r5, #2]
 8012d3a:	d04f      	beq.n	8012ddc <ucdr_serialize_int32_t+0x10c>
 8012d3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012d40:	70eb      	strb	r3, [r5, #3]
 8012d42:	6923      	ldr	r3, [r4, #16]
 8012d44:	2104      	movs	r1, #4
 8012d46:	68a2      	ldr	r2, [r4, #8]
 8012d48:	3304      	adds	r3, #4
 8012d4a:	7da0      	ldrb	r0, [r4, #22]
 8012d4c:	4442      	add	r2, r8
 8012d4e:	7561      	strb	r1, [r4, #21]
 8012d50:	1b9e      	subs	r6, r3, r6
 8012d52:	f080 0001 	eor.w	r0, r0, #1
 8012d56:	60a2      	str	r2, [r4, #8]
 8012d58:	6126      	str	r6, [r4, #16]
 8012d5a:	b002      	add	sp, #8
 8012d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d60:	2104      	movs	r1, #4
 8012d62:	4620      	mov	r0, r4
 8012d64:	f000 fba6 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012d68:	b1d0      	cbz	r0, 8012da0 <ucdr_serialize_int32_t+0xd0>
 8012d6a:	7d23      	ldrb	r3, [r4, #20]
 8012d6c:	2b01      	cmp	r3, #1
 8012d6e:	68a3      	ldr	r3, [r4, #8]
 8012d70:	d01c      	beq.n	8012dac <ucdr_serialize_int32_t+0xdc>
 8012d72:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012d76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d7a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012d7e:	7018      	strb	r0, [r3, #0]
 8012d80:	68a3      	ldr	r3, [r4, #8]
 8012d82:	705a      	strb	r2, [r3, #1]
 8012d84:	68a3      	ldr	r3, [r4, #8]
 8012d86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d8a:	7099      	strb	r1, [r3, #2]
 8012d8c:	68a3      	ldr	r3, [r4, #8]
 8012d8e:	70da      	strb	r2, [r3, #3]
 8012d90:	2104      	movs	r1, #4
 8012d92:	68a2      	ldr	r2, [r4, #8]
 8012d94:	6923      	ldr	r3, [r4, #16]
 8012d96:	440a      	add	r2, r1
 8012d98:	7561      	strb	r1, [r4, #21]
 8012d9a:	440b      	add	r3, r1
 8012d9c:	60a2      	str	r2, [r4, #8]
 8012d9e:	6123      	str	r3, [r4, #16]
 8012da0:	7da0      	ldrb	r0, [r4, #22]
 8012da2:	f080 0001 	eor.w	r0, r0, #1
 8012da6:	b002      	add	sp, #8
 8012da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dac:	9a01      	ldr	r2, [sp, #4]
 8012dae:	601a      	str	r2, [r3, #0]
 8012db0:	e7ee      	b.n	8012d90 <ucdr_serialize_int32_t+0xc0>
 8012db2:	68a2      	ldr	r2, [r4, #8]
 8012db4:	6923      	ldr	r3, [r4, #16]
 8012db6:	7da0      	ldrb	r0, [r4, #22]
 8012db8:	1b92      	subs	r2, r2, r6
 8012dba:	1b9b      	subs	r3, r3, r6
 8012dbc:	7567      	strb	r7, [r4, #21]
 8012dbe:	f080 0001 	eor.w	r0, r0, #1
 8012dc2:	60a2      	str	r2, [r4, #8]
 8012dc4:	6123      	str	r3, [r4, #16]
 8012dc6:	b002      	add	sp, #8
 8012dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dcc:	68a3      	ldr	r3, [r4, #8]
 8012dce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012dd2:	701a      	strb	r2, [r3, #0]
 8012dd4:	68a3      	ldr	r3, [r4, #8]
 8012dd6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012dda:	701a      	strb	r2, [r3, #0]
 8012ddc:	68a3      	ldr	r3, [r4, #8]
 8012dde:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012de2:	701a      	strb	r2, [r3, #0]
 8012de4:	e7ad      	b.n	8012d42 <ucdr_serialize_int32_t+0x72>
 8012de6:	4628      	mov	r0, r5
 8012de8:	ad01      	add	r5, sp, #4
 8012dea:	4632      	mov	r2, r6
 8012dec:	4629      	mov	r1, r5
 8012dee:	f00d fe70 	bl	8020ad2 <memcpy>
 8012df2:	4642      	mov	r2, r8
 8012df4:	19a9      	adds	r1, r5, r6
 8012df6:	68a0      	ldr	r0, [r4, #8]
 8012df8:	f00d fe6b 	bl	8020ad2 <memcpy>
 8012dfc:	e7a1      	b.n	8012d42 <ucdr_serialize_int32_t+0x72>
 8012dfe:	bf00      	nop

08012e00 <ucdr_deserialize_int32_t>:
 8012e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e04:	4604      	mov	r4, r0
 8012e06:	460d      	mov	r5, r1
 8012e08:	2104      	movs	r1, #4
 8012e0a:	f000 fba7 	bl	801355c <ucdr_buffer_alignment>
 8012e0e:	4601      	mov	r1, r0
 8012e10:	4620      	mov	r0, r4
 8012e12:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012e16:	f000 fbe9 	bl	80135ec <ucdr_advance_buffer>
 8012e1a:	2104      	movs	r1, #4
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	f000 fb3d 	bl	801349c <ucdr_check_buffer_available_for>
 8012e22:	2800      	cmp	r0, #0
 8012e24:	d138      	bne.n	8012e98 <ucdr_deserialize_int32_t+0x98>
 8012e26:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012e2a:	42b7      	cmp	r7, r6
 8012e2c:	d92f      	bls.n	8012e8e <ucdr_deserialize_int32_t+0x8e>
 8012e2e:	6923      	ldr	r3, [r4, #16]
 8012e30:	4620      	mov	r0, r4
 8012e32:	60a7      	str	r7, [r4, #8]
 8012e34:	1bbf      	subs	r7, r7, r6
 8012e36:	443b      	add	r3, r7
 8012e38:	f1c7 0904 	rsb	r9, r7, #4
 8012e3c:	6123      	str	r3, [r4, #16]
 8012e3e:	4649      	mov	r1, r9
 8012e40:	f000 fb38 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d046      	beq.n	8012ed6 <ucdr_deserialize_int32_t+0xd6>
 8012e48:	7d23      	ldrb	r3, [r4, #20]
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d05c      	beq.n	8012f08 <ucdr_deserialize_int32_t+0x108>
 8012e4e:	78f3      	ldrb	r3, [r6, #3]
 8012e50:	702b      	strb	r3, [r5, #0]
 8012e52:	2f00      	cmp	r7, #0
 8012e54:	d04c      	beq.n	8012ef0 <ucdr_deserialize_int32_t+0xf0>
 8012e56:	78b3      	ldrb	r3, [r6, #2]
 8012e58:	2f01      	cmp	r7, #1
 8012e5a:	706b      	strb	r3, [r5, #1]
 8012e5c:	f105 0302 	add.w	r3, r5, #2
 8012e60:	d04a      	beq.n	8012ef8 <ucdr_deserialize_int32_t+0xf8>
 8012e62:	7873      	ldrb	r3, [r6, #1]
 8012e64:	2f02      	cmp	r7, #2
 8012e66:	70ab      	strb	r3, [r5, #2]
 8012e68:	f105 0303 	add.w	r3, r5, #3
 8012e6c:	d048      	beq.n	8012f00 <ucdr_deserialize_int32_t+0x100>
 8012e6e:	7833      	ldrb	r3, [r6, #0]
 8012e70:	70eb      	strb	r3, [r5, #3]
 8012e72:	6923      	ldr	r3, [r4, #16]
 8012e74:	2104      	movs	r1, #4
 8012e76:	68a2      	ldr	r2, [r4, #8]
 8012e78:	3304      	adds	r3, #4
 8012e7a:	7da0      	ldrb	r0, [r4, #22]
 8012e7c:	444a      	add	r2, r9
 8012e7e:	7561      	strb	r1, [r4, #21]
 8012e80:	1bdb      	subs	r3, r3, r7
 8012e82:	f080 0001 	eor.w	r0, r0, #1
 8012e86:	60a2      	str	r2, [r4, #8]
 8012e88:	6123      	str	r3, [r4, #16]
 8012e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e8e:	2104      	movs	r1, #4
 8012e90:	4620      	mov	r0, r4
 8012e92:	f000 fb0f 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012e96:	b1b0      	cbz	r0, 8012ec6 <ucdr_deserialize_int32_t+0xc6>
 8012e98:	7d23      	ldrb	r3, [r4, #20]
 8012e9a:	2b01      	cmp	r3, #1
 8012e9c:	68a3      	ldr	r3, [r4, #8]
 8012e9e:	d017      	beq.n	8012ed0 <ucdr_deserialize_int32_t+0xd0>
 8012ea0:	78db      	ldrb	r3, [r3, #3]
 8012ea2:	702b      	strb	r3, [r5, #0]
 8012ea4:	68a3      	ldr	r3, [r4, #8]
 8012ea6:	789b      	ldrb	r3, [r3, #2]
 8012ea8:	706b      	strb	r3, [r5, #1]
 8012eaa:	68a3      	ldr	r3, [r4, #8]
 8012eac:	785b      	ldrb	r3, [r3, #1]
 8012eae:	70ab      	strb	r3, [r5, #2]
 8012eb0:	68a3      	ldr	r3, [r4, #8]
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	70eb      	strb	r3, [r5, #3]
 8012eb6:	2104      	movs	r1, #4
 8012eb8:	68a2      	ldr	r2, [r4, #8]
 8012eba:	6923      	ldr	r3, [r4, #16]
 8012ebc:	440a      	add	r2, r1
 8012ebe:	7561      	strb	r1, [r4, #21]
 8012ec0:	440b      	add	r3, r1
 8012ec2:	60a2      	str	r2, [r4, #8]
 8012ec4:	6123      	str	r3, [r4, #16]
 8012ec6:	7da0      	ldrb	r0, [r4, #22]
 8012ec8:	f080 0001 	eor.w	r0, r0, #1
 8012ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	602b      	str	r3, [r5, #0]
 8012ed4:	e7ef      	b.n	8012eb6 <ucdr_deserialize_int32_t+0xb6>
 8012ed6:	68a2      	ldr	r2, [r4, #8]
 8012ed8:	6923      	ldr	r3, [r4, #16]
 8012eda:	1bd2      	subs	r2, r2, r7
 8012edc:	7da0      	ldrb	r0, [r4, #22]
 8012ede:	1bdb      	subs	r3, r3, r7
 8012ee0:	f884 8015 	strb.w	r8, [r4, #21]
 8012ee4:	f080 0001 	eor.w	r0, r0, #1
 8012ee8:	60a2      	str	r2, [r4, #8]
 8012eea:	6123      	str	r3, [r4, #16]
 8012eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ef0:	68a3      	ldr	r3, [r4, #8]
 8012ef2:	789b      	ldrb	r3, [r3, #2]
 8012ef4:	706b      	strb	r3, [r5, #1]
 8012ef6:	1cab      	adds	r3, r5, #2
 8012ef8:	68a2      	ldr	r2, [r4, #8]
 8012efa:	7852      	ldrb	r2, [r2, #1]
 8012efc:	f803 2b01 	strb.w	r2, [r3], #1
 8012f00:	68a2      	ldr	r2, [r4, #8]
 8012f02:	7812      	ldrb	r2, [r2, #0]
 8012f04:	701a      	strb	r2, [r3, #0]
 8012f06:	e7b4      	b.n	8012e72 <ucdr_deserialize_int32_t+0x72>
 8012f08:	4631      	mov	r1, r6
 8012f0a:	463a      	mov	r2, r7
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	f00d fde0 	bl	8020ad2 <memcpy>
 8012f12:	464a      	mov	r2, r9
 8012f14:	19e8      	adds	r0, r5, r7
 8012f16:	68a1      	ldr	r1, [r4, #8]
 8012f18:	f00d fddb 	bl	8020ad2 <memcpy>
 8012f1c:	e7a9      	b.n	8012e72 <ucdr_deserialize_int32_t+0x72>
 8012f1e:	bf00      	nop

08012f20 <ucdr_serialize_float>:
 8012f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f24:	4604      	mov	r4, r0
 8012f26:	b082      	sub	sp, #8
 8012f28:	2104      	movs	r1, #4
 8012f2a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012f2e:	f000 fb15 	bl	801355c <ucdr_buffer_alignment>
 8012f32:	4601      	mov	r1, r0
 8012f34:	4620      	mov	r0, r4
 8012f36:	7d67      	ldrb	r7, [r4, #21]
 8012f38:	f000 fb58 	bl	80135ec <ucdr_advance_buffer>
 8012f3c:	2104      	movs	r1, #4
 8012f3e:	4620      	mov	r0, r4
 8012f40:	f000 faac 	bl	801349c <ucdr_check_buffer_available_for>
 8012f44:	2800      	cmp	r0, #0
 8012f46:	d139      	bne.n	8012fbc <ucdr_serialize_float+0x9c>
 8012f48:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012f4c:	42ab      	cmp	r3, r5
 8012f4e:	d930      	bls.n	8012fb2 <ucdr_serialize_float+0x92>
 8012f50:	1b5e      	subs	r6, r3, r5
 8012f52:	60a3      	str	r3, [r4, #8]
 8012f54:	6923      	ldr	r3, [r4, #16]
 8012f56:	4620      	mov	r0, r4
 8012f58:	f1c6 0804 	rsb	r8, r6, #4
 8012f5c:	4433      	add	r3, r6
 8012f5e:	4641      	mov	r1, r8
 8012f60:	6123      	str	r3, [r4, #16]
 8012f62:	f000 faa7 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012f66:	2800      	cmp	r0, #0
 8012f68:	d04c      	beq.n	8013004 <ucdr_serialize_float+0xe4>
 8012f6a:	7d23      	ldrb	r3, [r4, #20]
 8012f6c:	2b01      	cmp	r3, #1
 8012f6e:	d063      	beq.n	8013038 <ucdr_serialize_float+0x118>
 8012f70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012f74:	702b      	strb	r3, [r5, #0]
 8012f76:	2e00      	cmp	r6, #0
 8012f78:	d051      	beq.n	801301e <ucdr_serialize_float+0xfe>
 8012f7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012f7e:	2e01      	cmp	r6, #1
 8012f80:	706b      	strb	r3, [r5, #1]
 8012f82:	d050      	beq.n	8013026 <ucdr_serialize_float+0x106>
 8012f84:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012f88:	2e02      	cmp	r6, #2
 8012f8a:	70ab      	strb	r3, [r5, #2]
 8012f8c:	d04f      	beq.n	801302e <ucdr_serialize_float+0x10e>
 8012f8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012f92:	70eb      	strb	r3, [r5, #3]
 8012f94:	6923      	ldr	r3, [r4, #16]
 8012f96:	2104      	movs	r1, #4
 8012f98:	68a2      	ldr	r2, [r4, #8]
 8012f9a:	3304      	adds	r3, #4
 8012f9c:	7da0      	ldrb	r0, [r4, #22]
 8012f9e:	4442      	add	r2, r8
 8012fa0:	7561      	strb	r1, [r4, #21]
 8012fa2:	1b9e      	subs	r6, r3, r6
 8012fa4:	f080 0001 	eor.w	r0, r0, #1
 8012fa8:	60a2      	str	r2, [r4, #8]
 8012faa:	6126      	str	r6, [r4, #16]
 8012fac:	b002      	add	sp, #8
 8012fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fb2:	2104      	movs	r1, #4
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	f000 fa7d 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8012fba:	b1d0      	cbz	r0, 8012ff2 <ucdr_serialize_float+0xd2>
 8012fbc:	7d23      	ldrb	r3, [r4, #20]
 8012fbe:	2b01      	cmp	r3, #1
 8012fc0:	68a3      	ldr	r3, [r4, #8]
 8012fc2:	d01c      	beq.n	8012ffe <ucdr_serialize_float+0xde>
 8012fc4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012fc8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012fcc:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012fd0:	7018      	strb	r0, [r3, #0]
 8012fd2:	68a3      	ldr	r3, [r4, #8]
 8012fd4:	705a      	strb	r2, [r3, #1]
 8012fd6:	68a3      	ldr	r3, [r4, #8]
 8012fd8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012fdc:	7099      	strb	r1, [r3, #2]
 8012fde:	68a3      	ldr	r3, [r4, #8]
 8012fe0:	70da      	strb	r2, [r3, #3]
 8012fe2:	2104      	movs	r1, #4
 8012fe4:	68a2      	ldr	r2, [r4, #8]
 8012fe6:	6923      	ldr	r3, [r4, #16]
 8012fe8:	440a      	add	r2, r1
 8012fea:	7561      	strb	r1, [r4, #21]
 8012fec:	440b      	add	r3, r1
 8012fee:	60a2      	str	r2, [r4, #8]
 8012ff0:	6123      	str	r3, [r4, #16]
 8012ff2:	7da0      	ldrb	r0, [r4, #22]
 8012ff4:	f080 0001 	eor.w	r0, r0, #1
 8012ff8:	b002      	add	sp, #8
 8012ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ffe:	9a01      	ldr	r2, [sp, #4]
 8013000:	601a      	str	r2, [r3, #0]
 8013002:	e7ee      	b.n	8012fe2 <ucdr_serialize_float+0xc2>
 8013004:	68a2      	ldr	r2, [r4, #8]
 8013006:	6923      	ldr	r3, [r4, #16]
 8013008:	7da0      	ldrb	r0, [r4, #22]
 801300a:	1b92      	subs	r2, r2, r6
 801300c:	1b9b      	subs	r3, r3, r6
 801300e:	7567      	strb	r7, [r4, #21]
 8013010:	f080 0001 	eor.w	r0, r0, #1
 8013014:	60a2      	str	r2, [r4, #8]
 8013016:	6123      	str	r3, [r4, #16]
 8013018:	b002      	add	sp, #8
 801301a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801301e:	68a3      	ldr	r3, [r4, #8]
 8013020:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013024:	701a      	strb	r2, [r3, #0]
 8013026:	68a3      	ldr	r3, [r4, #8]
 8013028:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801302c:	701a      	strb	r2, [r3, #0]
 801302e:	68a3      	ldr	r3, [r4, #8]
 8013030:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013034:	701a      	strb	r2, [r3, #0]
 8013036:	e7ad      	b.n	8012f94 <ucdr_serialize_float+0x74>
 8013038:	4628      	mov	r0, r5
 801303a:	ad01      	add	r5, sp, #4
 801303c:	4632      	mov	r2, r6
 801303e:	4629      	mov	r1, r5
 8013040:	f00d fd47 	bl	8020ad2 <memcpy>
 8013044:	4642      	mov	r2, r8
 8013046:	19a9      	adds	r1, r5, r6
 8013048:	68a0      	ldr	r0, [r4, #8]
 801304a:	f00d fd42 	bl	8020ad2 <memcpy>
 801304e:	e7a1      	b.n	8012f94 <ucdr_serialize_float+0x74>

08013050 <ucdr_deserialize_float>:
 8013050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013054:	4604      	mov	r4, r0
 8013056:	460d      	mov	r5, r1
 8013058:	2104      	movs	r1, #4
 801305a:	f000 fa7f 	bl	801355c <ucdr_buffer_alignment>
 801305e:	4601      	mov	r1, r0
 8013060:	4620      	mov	r0, r4
 8013062:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013066:	f000 fac1 	bl	80135ec <ucdr_advance_buffer>
 801306a:	2104      	movs	r1, #4
 801306c:	4620      	mov	r0, r4
 801306e:	f000 fa15 	bl	801349c <ucdr_check_buffer_available_for>
 8013072:	2800      	cmp	r0, #0
 8013074:	d138      	bne.n	80130e8 <ucdr_deserialize_float+0x98>
 8013076:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801307a:	42b7      	cmp	r7, r6
 801307c:	d92f      	bls.n	80130de <ucdr_deserialize_float+0x8e>
 801307e:	6923      	ldr	r3, [r4, #16]
 8013080:	4620      	mov	r0, r4
 8013082:	60a7      	str	r7, [r4, #8]
 8013084:	1bbf      	subs	r7, r7, r6
 8013086:	443b      	add	r3, r7
 8013088:	f1c7 0904 	rsb	r9, r7, #4
 801308c:	6123      	str	r3, [r4, #16]
 801308e:	4649      	mov	r1, r9
 8013090:	f000 fa10 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8013094:	2800      	cmp	r0, #0
 8013096:	d046      	beq.n	8013126 <ucdr_deserialize_float+0xd6>
 8013098:	7d23      	ldrb	r3, [r4, #20]
 801309a:	2b01      	cmp	r3, #1
 801309c:	d05c      	beq.n	8013158 <ucdr_deserialize_float+0x108>
 801309e:	78f3      	ldrb	r3, [r6, #3]
 80130a0:	702b      	strb	r3, [r5, #0]
 80130a2:	2f00      	cmp	r7, #0
 80130a4:	d04c      	beq.n	8013140 <ucdr_deserialize_float+0xf0>
 80130a6:	78b3      	ldrb	r3, [r6, #2]
 80130a8:	2f01      	cmp	r7, #1
 80130aa:	706b      	strb	r3, [r5, #1]
 80130ac:	f105 0302 	add.w	r3, r5, #2
 80130b0:	d04a      	beq.n	8013148 <ucdr_deserialize_float+0xf8>
 80130b2:	7873      	ldrb	r3, [r6, #1]
 80130b4:	2f02      	cmp	r7, #2
 80130b6:	70ab      	strb	r3, [r5, #2]
 80130b8:	f105 0303 	add.w	r3, r5, #3
 80130bc:	d048      	beq.n	8013150 <ucdr_deserialize_float+0x100>
 80130be:	7833      	ldrb	r3, [r6, #0]
 80130c0:	70eb      	strb	r3, [r5, #3]
 80130c2:	6923      	ldr	r3, [r4, #16]
 80130c4:	2104      	movs	r1, #4
 80130c6:	68a2      	ldr	r2, [r4, #8]
 80130c8:	3304      	adds	r3, #4
 80130ca:	7da0      	ldrb	r0, [r4, #22]
 80130cc:	444a      	add	r2, r9
 80130ce:	7561      	strb	r1, [r4, #21]
 80130d0:	1bdb      	subs	r3, r3, r7
 80130d2:	f080 0001 	eor.w	r0, r0, #1
 80130d6:	60a2      	str	r2, [r4, #8]
 80130d8:	6123      	str	r3, [r4, #16]
 80130da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130de:	2104      	movs	r1, #4
 80130e0:	4620      	mov	r0, r4
 80130e2:	f000 f9e7 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 80130e6:	b1b0      	cbz	r0, 8013116 <ucdr_deserialize_float+0xc6>
 80130e8:	7d23      	ldrb	r3, [r4, #20]
 80130ea:	2b01      	cmp	r3, #1
 80130ec:	68a3      	ldr	r3, [r4, #8]
 80130ee:	d017      	beq.n	8013120 <ucdr_deserialize_float+0xd0>
 80130f0:	78db      	ldrb	r3, [r3, #3]
 80130f2:	702b      	strb	r3, [r5, #0]
 80130f4:	68a3      	ldr	r3, [r4, #8]
 80130f6:	789b      	ldrb	r3, [r3, #2]
 80130f8:	706b      	strb	r3, [r5, #1]
 80130fa:	68a3      	ldr	r3, [r4, #8]
 80130fc:	785b      	ldrb	r3, [r3, #1]
 80130fe:	70ab      	strb	r3, [r5, #2]
 8013100:	68a3      	ldr	r3, [r4, #8]
 8013102:	781b      	ldrb	r3, [r3, #0]
 8013104:	70eb      	strb	r3, [r5, #3]
 8013106:	2104      	movs	r1, #4
 8013108:	68a2      	ldr	r2, [r4, #8]
 801310a:	6923      	ldr	r3, [r4, #16]
 801310c:	440a      	add	r2, r1
 801310e:	7561      	strb	r1, [r4, #21]
 8013110:	440b      	add	r3, r1
 8013112:	60a2      	str	r2, [r4, #8]
 8013114:	6123      	str	r3, [r4, #16]
 8013116:	7da0      	ldrb	r0, [r4, #22]
 8013118:	f080 0001 	eor.w	r0, r0, #1
 801311c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	602b      	str	r3, [r5, #0]
 8013124:	e7ef      	b.n	8013106 <ucdr_deserialize_float+0xb6>
 8013126:	68a2      	ldr	r2, [r4, #8]
 8013128:	6923      	ldr	r3, [r4, #16]
 801312a:	1bd2      	subs	r2, r2, r7
 801312c:	7da0      	ldrb	r0, [r4, #22]
 801312e:	1bdb      	subs	r3, r3, r7
 8013130:	f884 8015 	strb.w	r8, [r4, #21]
 8013134:	f080 0001 	eor.w	r0, r0, #1
 8013138:	60a2      	str	r2, [r4, #8]
 801313a:	6123      	str	r3, [r4, #16]
 801313c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013140:	68a3      	ldr	r3, [r4, #8]
 8013142:	789b      	ldrb	r3, [r3, #2]
 8013144:	706b      	strb	r3, [r5, #1]
 8013146:	1cab      	adds	r3, r5, #2
 8013148:	68a2      	ldr	r2, [r4, #8]
 801314a:	7852      	ldrb	r2, [r2, #1]
 801314c:	f803 2b01 	strb.w	r2, [r3], #1
 8013150:	68a2      	ldr	r2, [r4, #8]
 8013152:	7812      	ldrb	r2, [r2, #0]
 8013154:	701a      	strb	r2, [r3, #0]
 8013156:	e7b4      	b.n	80130c2 <ucdr_deserialize_float+0x72>
 8013158:	4631      	mov	r1, r6
 801315a:	463a      	mov	r2, r7
 801315c:	4628      	mov	r0, r5
 801315e:	f00d fcb8 	bl	8020ad2 <memcpy>
 8013162:	464a      	mov	r2, r9
 8013164:	19e8      	adds	r0, r5, r7
 8013166:	68a1      	ldr	r1, [r4, #8]
 8013168:	f00d fcb3 	bl	8020ad2 <memcpy>
 801316c:	e7a9      	b.n	80130c2 <ucdr_deserialize_float+0x72>
 801316e:	bf00      	nop

08013170 <ucdr_serialize_double>:
 8013170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013174:	4604      	mov	r4, r0
 8013176:	b082      	sub	sp, #8
 8013178:	2108      	movs	r1, #8
 801317a:	ed8d 0b00 	vstr	d0, [sp]
 801317e:	f000 f9ed 	bl	801355c <ucdr_buffer_alignment>
 8013182:	4601      	mov	r1, r0
 8013184:	4620      	mov	r0, r4
 8013186:	7d67      	ldrb	r7, [r4, #21]
 8013188:	f000 fa30 	bl	80135ec <ucdr_advance_buffer>
 801318c:	2108      	movs	r1, #8
 801318e:	4620      	mov	r0, r4
 8013190:	f000 f984 	bl	801349c <ucdr_check_buffer_available_for>
 8013194:	2800      	cmp	r0, #0
 8013196:	d14e      	bne.n	8013236 <ucdr_serialize_double+0xc6>
 8013198:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801319c:	42ab      	cmp	r3, r5
 801319e:	d945      	bls.n	801322c <ucdr_serialize_double+0xbc>
 80131a0:	1b5e      	subs	r6, r3, r5
 80131a2:	60a3      	str	r3, [r4, #8]
 80131a4:	6923      	ldr	r3, [r4, #16]
 80131a6:	4620      	mov	r0, r4
 80131a8:	f1c6 0808 	rsb	r8, r6, #8
 80131ac:	4433      	add	r3, r6
 80131ae:	4641      	mov	r1, r8
 80131b0:	6123      	str	r3, [r4, #16]
 80131b2:	f000 f97f 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 80131b6:	2800      	cmp	r0, #0
 80131b8:	d074      	beq.n	80132a4 <ucdr_serialize_double+0x134>
 80131ba:	7d23      	ldrb	r3, [r4, #20]
 80131bc:	2b01      	cmp	r3, #1
 80131be:	f000 809b 	beq.w	80132f8 <ucdr_serialize_double+0x188>
 80131c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80131c6:	702b      	strb	r3, [r5, #0]
 80131c8:	2e00      	cmp	r6, #0
 80131ca:	d078      	beq.n	80132be <ucdr_serialize_double+0x14e>
 80131cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80131d0:	2e01      	cmp	r6, #1
 80131d2:	706b      	strb	r3, [r5, #1]
 80131d4:	d077      	beq.n	80132c6 <ucdr_serialize_double+0x156>
 80131d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80131da:	2e02      	cmp	r6, #2
 80131dc:	70ab      	strb	r3, [r5, #2]
 80131de:	d076      	beq.n	80132ce <ucdr_serialize_double+0x15e>
 80131e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80131e4:	2e03      	cmp	r6, #3
 80131e6:	70eb      	strb	r3, [r5, #3]
 80131e8:	d075      	beq.n	80132d6 <ucdr_serialize_double+0x166>
 80131ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80131ee:	2e04      	cmp	r6, #4
 80131f0:	712b      	strb	r3, [r5, #4]
 80131f2:	d074      	beq.n	80132de <ucdr_serialize_double+0x16e>
 80131f4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80131f8:	2e05      	cmp	r6, #5
 80131fa:	716b      	strb	r3, [r5, #5]
 80131fc:	d073      	beq.n	80132e6 <ucdr_serialize_double+0x176>
 80131fe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013202:	2e06      	cmp	r6, #6
 8013204:	71ab      	strb	r3, [r5, #6]
 8013206:	d072      	beq.n	80132ee <ucdr_serialize_double+0x17e>
 8013208:	f89d 3000 	ldrb.w	r3, [sp]
 801320c:	71eb      	strb	r3, [r5, #7]
 801320e:	6923      	ldr	r3, [r4, #16]
 8013210:	2108      	movs	r1, #8
 8013212:	68a2      	ldr	r2, [r4, #8]
 8013214:	3308      	adds	r3, #8
 8013216:	7da0      	ldrb	r0, [r4, #22]
 8013218:	4442      	add	r2, r8
 801321a:	7561      	strb	r1, [r4, #21]
 801321c:	1b9e      	subs	r6, r3, r6
 801321e:	f080 0001 	eor.w	r0, r0, #1
 8013222:	60a2      	str	r2, [r4, #8]
 8013224:	6126      	str	r6, [r4, #16]
 8013226:	b002      	add	sp, #8
 8013228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801322c:	2108      	movs	r1, #8
 801322e:	4620      	mov	r0, r4
 8013230:	f000 f940 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8013234:	b350      	cbz	r0, 801328c <ucdr_serialize_double+0x11c>
 8013236:	7d23      	ldrb	r3, [r4, #20]
 8013238:	2b01      	cmp	r3, #1
 801323a:	d02d      	beq.n	8013298 <ucdr_serialize_double+0x128>
 801323c:	68a3      	ldr	r3, [r4, #8]
 801323e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013242:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013246:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801324a:	7018      	strb	r0, [r3, #0]
 801324c:	68a3      	ldr	r3, [r4, #8]
 801324e:	705a      	strb	r2, [r3, #1]
 8013250:	68a3      	ldr	r3, [r4, #8]
 8013252:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013256:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801325a:	7099      	strb	r1, [r3, #2]
 801325c:	68a3      	ldr	r3, [r4, #8]
 801325e:	70da      	strb	r2, [r3, #3]
 8013260:	68a3      	ldr	r3, [r4, #8]
 8013262:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013266:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801326a:	7118      	strb	r0, [r3, #4]
 801326c:	68a3      	ldr	r3, [r4, #8]
 801326e:	715a      	strb	r2, [r3, #5]
 8013270:	68a3      	ldr	r3, [r4, #8]
 8013272:	f89d 2000 	ldrb.w	r2, [sp]
 8013276:	7199      	strb	r1, [r3, #6]
 8013278:	68a3      	ldr	r3, [r4, #8]
 801327a:	71da      	strb	r2, [r3, #7]
 801327c:	2108      	movs	r1, #8
 801327e:	68a2      	ldr	r2, [r4, #8]
 8013280:	6923      	ldr	r3, [r4, #16]
 8013282:	440a      	add	r2, r1
 8013284:	7561      	strb	r1, [r4, #21]
 8013286:	440b      	add	r3, r1
 8013288:	60a2      	str	r2, [r4, #8]
 801328a:	6123      	str	r3, [r4, #16]
 801328c:	7da0      	ldrb	r0, [r4, #22]
 801328e:	f080 0001 	eor.w	r0, r0, #1
 8013292:	b002      	add	sp, #8
 8013294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013298:	466b      	mov	r3, sp
 801329a:	68a2      	ldr	r2, [r4, #8]
 801329c:	cb03      	ldmia	r3!, {r0, r1}
 801329e:	6010      	str	r0, [r2, #0]
 80132a0:	6051      	str	r1, [r2, #4]
 80132a2:	e7eb      	b.n	801327c <ucdr_serialize_double+0x10c>
 80132a4:	68a2      	ldr	r2, [r4, #8]
 80132a6:	6923      	ldr	r3, [r4, #16]
 80132a8:	7da0      	ldrb	r0, [r4, #22]
 80132aa:	1b92      	subs	r2, r2, r6
 80132ac:	1b9b      	subs	r3, r3, r6
 80132ae:	7567      	strb	r7, [r4, #21]
 80132b0:	f080 0001 	eor.w	r0, r0, #1
 80132b4:	60a2      	str	r2, [r4, #8]
 80132b6:	6123      	str	r3, [r4, #16]
 80132b8:	b002      	add	sp, #8
 80132ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132be:	68a3      	ldr	r3, [r4, #8]
 80132c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80132c4:	701a      	strb	r2, [r3, #0]
 80132c6:	68a3      	ldr	r3, [r4, #8]
 80132c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80132cc:	701a      	strb	r2, [r3, #0]
 80132ce:	68a3      	ldr	r3, [r4, #8]
 80132d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80132d4:	701a      	strb	r2, [r3, #0]
 80132d6:	68a3      	ldr	r3, [r4, #8]
 80132d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80132dc:	701a      	strb	r2, [r3, #0]
 80132de:	68a3      	ldr	r3, [r4, #8]
 80132e0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80132e4:	701a      	strb	r2, [r3, #0]
 80132e6:	68a3      	ldr	r3, [r4, #8]
 80132e8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80132ec:	701a      	strb	r2, [r3, #0]
 80132ee:	68a3      	ldr	r3, [r4, #8]
 80132f0:	f89d 2000 	ldrb.w	r2, [sp]
 80132f4:	701a      	strb	r2, [r3, #0]
 80132f6:	e78a      	b.n	801320e <ucdr_serialize_double+0x9e>
 80132f8:	4628      	mov	r0, r5
 80132fa:	466d      	mov	r5, sp
 80132fc:	4632      	mov	r2, r6
 80132fe:	4629      	mov	r1, r5
 8013300:	f00d fbe7 	bl	8020ad2 <memcpy>
 8013304:	4642      	mov	r2, r8
 8013306:	19a9      	adds	r1, r5, r6
 8013308:	68a0      	ldr	r0, [r4, #8]
 801330a:	f00d fbe2 	bl	8020ad2 <memcpy>
 801330e:	e77e      	b.n	801320e <ucdr_serialize_double+0x9e>

08013310 <ucdr_deserialize_double>:
 8013310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013314:	4604      	mov	r4, r0
 8013316:	460d      	mov	r5, r1
 8013318:	2108      	movs	r1, #8
 801331a:	f000 f91f 	bl	801355c <ucdr_buffer_alignment>
 801331e:	4601      	mov	r1, r0
 8013320:	4620      	mov	r0, r4
 8013322:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013326:	f000 f961 	bl	80135ec <ucdr_advance_buffer>
 801332a:	2108      	movs	r1, #8
 801332c:	4620      	mov	r0, r4
 801332e:	f000 f8b5 	bl	801349c <ucdr_check_buffer_available_for>
 8013332:	2800      	cmp	r0, #0
 8013334:	d151      	bne.n	80133da <ucdr_deserialize_double+0xca>
 8013336:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801333a:	42be      	cmp	r6, r7
 801333c:	d948      	bls.n	80133d0 <ucdr_deserialize_double+0xc0>
 801333e:	6923      	ldr	r3, [r4, #16]
 8013340:	4620      	mov	r0, r4
 8013342:	60a6      	str	r6, [r4, #8]
 8013344:	1bf6      	subs	r6, r6, r7
 8013346:	4433      	add	r3, r6
 8013348:	f1c6 0908 	rsb	r9, r6, #8
 801334c:	6123      	str	r3, [r4, #16]
 801334e:	4649      	mov	r1, r9
 8013350:	f000 f8b0 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 8013354:	2800      	cmp	r0, #0
 8013356:	d06d      	beq.n	8013434 <ucdr_deserialize_double+0x124>
 8013358:	7d23      	ldrb	r3, [r4, #20]
 801335a:	2b01      	cmp	r3, #1
 801335c:	f000 8093 	beq.w	8013486 <ucdr_deserialize_double+0x176>
 8013360:	79fb      	ldrb	r3, [r7, #7]
 8013362:	702b      	strb	r3, [r5, #0]
 8013364:	2e00      	cmp	r6, #0
 8013366:	d072      	beq.n	801344e <ucdr_deserialize_double+0x13e>
 8013368:	79bb      	ldrb	r3, [r7, #6]
 801336a:	2e01      	cmp	r6, #1
 801336c:	706b      	strb	r3, [r5, #1]
 801336e:	f105 0302 	add.w	r3, r5, #2
 8013372:	d070      	beq.n	8013456 <ucdr_deserialize_double+0x146>
 8013374:	797b      	ldrb	r3, [r7, #5]
 8013376:	2e02      	cmp	r6, #2
 8013378:	70ab      	strb	r3, [r5, #2]
 801337a:	f105 0303 	add.w	r3, r5, #3
 801337e:	d06e      	beq.n	801345e <ucdr_deserialize_double+0x14e>
 8013380:	793b      	ldrb	r3, [r7, #4]
 8013382:	2e03      	cmp	r6, #3
 8013384:	70eb      	strb	r3, [r5, #3]
 8013386:	f105 0304 	add.w	r3, r5, #4
 801338a:	d06c      	beq.n	8013466 <ucdr_deserialize_double+0x156>
 801338c:	78fb      	ldrb	r3, [r7, #3]
 801338e:	2e04      	cmp	r6, #4
 8013390:	712b      	strb	r3, [r5, #4]
 8013392:	f105 0305 	add.w	r3, r5, #5
 8013396:	d06a      	beq.n	801346e <ucdr_deserialize_double+0x15e>
 8013398:	78bb      	ldrb	r3, [r7, #2]
 801339a:	2e05      	cmp	r6, #5
 801339c:	716b      	strb	r3, [r5, #5]
 801339e:	f105 0306 	add.w	r3, r5, #6
 80133a2:	d068      	beq.n	8013476 <ucdr_deserialize_double+0x166>
 80133a4:	787b      	ldrb	r3, [r7, #1]
 80133a6:	2e06      	cmp	r6, #6
 80133a8:	71ab      	strb	r3, [r5, #6]
 80133aa:	f105 0307 	add.w	r3, r5, #7
 80133ae:	d066      	beq.n	801347e <ucdr_deserialize_double+0x16e>
 80133b0:	783b      	ldrb	r3, [r7, #0]
 80133b2:	71eb      	strb	r3, [r5, #7]
 80133b4:	6923      	ldr	r3, [r4, #16]
 80133b6:	2108      	movs	r1, #8
 80133b8:	68a2      	ldr	r2, [r4, #8]
 80133ba:	3308      	adds	r3, #8
 80133bc:	7da0      	ldrb	r0, [r4, #22]
 80133be:	444a      	add	r2, r9
 80133c0:	7561      	strb	r1, [r4, #21]
 80133c2:	1b9e      	subs	r6, r3, r6
 80133c4:	f080 0001 	eor.w	r0, r0, #1
 80133c8:	60a2      	str	r2, [r4, #8]
 80133ca:	6126      	str	r6, [r4, #16]
 80133cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133d0:	2108      	movs	r1, #8
 80133d2:	4620      	mov	r0, r4
 80133d4:	f000 f86e 	bl	80134b4 <ucdr_check_final_buffer_behavior>
 80133d8:	b310      	cbz	r0, 8013420 <ucdr_deserialize_double+0x110>
 80133da:	7d23      	ldrb	r3, [r4, #20]
 80133dc:	2b01      	cmp	r3, #1
 80133de:	68a3      	ldr	r3, [r4, #8]
 80133e0:	d023      	beq.n	801342a <ucdr_deserialize_double+0x11a>
 80133e2:	79db      	ldrb	r3, [r3, #7]
 80133e4:	702b      	strb	r3, [r5, #0]
 80133e6:	68a3      	ldr	r3, [r4, #8]
 80133e8:	799b      	ldrb	r3, [r3, #6]
 80133ea:	706b      	strb	r3, [r5, #1]
 80133ec:	68a3      	ldr	r3, [r4, #8]
 80133ee:	795b      	ldrb	r3, [r3, #5]
 80133f0:	70ab      	strb	r3, [r5, #2]
 80133f2:	68a3      	ldr	r3, [r4, #8]
 80133f4:	791b      	ldrb	r3, [r3, #4]
 80133f6:	70eb      	strb	r3, [r5, #3]
 80133f8:	68a3      	ldr	r3, [r4, #8]
 80133fa:	78db      	ldrb	r3, [r3, #3]
 80133fc:	712b      	strb	r3, [r5, #4]
 80133fe:	68a3      	ldr	r3, [r4, #8]
 8013400:	789b      	ldrb	r3, [r3, #2]
 8013402:	716b      	strb	r3, [r5, #5]
 8013404:	68a3      	ldr	r3, [r4, #8]
 8013406:	785b      	ldrb	r3, [r3, #1]
 8013408:	71ab      	strb	r3, [r5, #6]
 801340a:	68a3      	ldr	r3, [r4, #8]
 801340c:	781b      	ldrb	r3, [r3, #0]
 801340e:	71eb      	strb	r3, [r5, #7]
 8013410:	2108      	movs	r1, #8
 8013412:	68a2      	ldr	r2, [r4, #8]
 8013414:	6923      	ldr	r3, [r4, #16]
 8013416:	440a      	add	r2, r1
 8013418:	7561      	strb	r1, [r4, #21]
 801341a:	440b      	add	r3, r1
 801341c:	60a2      	str	r2, [r4, #8]
 801341e:	6123      	str	r3, [r4, #16]
 8013420:	7da0      	ldrb	r0, [r4, #22]
 8013422:	f080 0001 	eor.w	r0, r0, #1
 8013426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801342a:	681a      	ldr	r2, [r3, #0]
 801342c:	685b      	ldr	r3, [r3, #4]
 801342e:	602a      	str	r2, [r5, #0]
 8013430:	606b      	str	r3, [r5, #4]
 8013432:	e7ed      	b.n	8013410 <ucdr_deserialize_double+0x100>
 8013434:	68a2      	ldr	r2, [r4, #8]
 8013436:	6923      	ldr	r3, [r4, #16]
 8013438:	1b92      	subs	r2, r2, r6
 801343a:	7da0      	ldrb	r0, [r4, #22]
 801343c:	1b9b      	subs	r3, r3, r6
 801343e:	f884 8015 	strb.w	r8, [r4, #21]
 8013442:	f080 0001 	eor.w	r0, r0, #1
 8013446:	60a2      	str	r2, [r4, #8]
 8013448:	6123      	str	r3, [r4, #16]
 801344a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801344e:	68a3      	ldr	r3, [r4, #8]
 8013450:	799b      	ldrb	r3, [r3, #6]
 8013452:	706b      	strb	r3, [r5, #1]
 8013454:	1cab      	adds	r3, r5, #2
 8013456:	68a2      	ldr	r2, [r4, #8]
 8013458:	7952      	ldrb	r2, [r2, #5]
 801345a:	f803 2b01 	strb.w	r2, [r3], #1
 801345e:	68a2      	ldr	r2, [r4, #8]
 8013460:	7912      	ldrb	r2, [r2, #4]
 8013462:	f803 2b01 	strb.w	r2, [r3], #1
 8013466:	68a2      	ldr	r2, [r4, #8]
 8013468:	78d2      	ldrb	r2, [r2, #3]
 801346a:	f803 2b01 	strb.w	r2, [r3], #1
 801346e:	68a2      	ldr	r2, [r4, #8]
 8013470:	7892      	ldrb	r2, [r2, #2]
 8013472:	f803 2b01 	strb.w	r2, [r3], #1
 8013476:	68a2      	ldr	r2, [r4, #8]
 8013478:	7852      	ldrb	r2, [r2, #1]
 801347a:	f803 2b01 	strb.w	r2, [r3], #1
 801347e:	68a2      	ldr	r2, [r4, #8]
 8013480:	7812      	ldrb	r2, [r2, #0]
 8013482:	701a      	strb	r2, [r3, #0]
 8013484:	e796      	b.n	80133b4 <ucdr_deserialize_double+0xa4>
 8013486:	4639      	mov	r1, r7
 8013488:	4632      	mov	r2, r6
 801348a:	4628      	mov	r0, r5
 801348c:	f00d fb21 	bl	8020ad2 <memcpy>
 8013490:	464a      	mov	r2, r9
 8013492:	19a8      	adds	r0, r5, r6
 8013494:	68a1      	ldr	r1, [r4, #8]
 8013496:	f00d fb1c 	bl	8020ad2 <memcpy>
 801349a:	e78b      	b.n	80133b4 <ucdr_deserialize_double+0xa4>

0801349c <ucdr_check_buffer_available_for>:
 801349c:	7d83      	ldrb	r3, [r0, #22]
 801349e:	b93b      	cbnz	r3, 80134b0 <ucdr_check_buffer_available_for+0x14>
 80134a0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80134a4:	4419      	add	r1, r3
 80134a6:	4288      	cmp	r0, r1
 80134a8:	bf34      	ite	cc
 80134aa:	2000      	movcc	r0, #0
 80134ac:	2001      	movcs	r0, #1
 80134ae:	4770      	bx	lr
 80134b0:	2000      	movs	r0, #0
 80134b2:	4770      	bx	lr

080134b4 <ucdr_check_final_buffer_behavior>:
 80134b4:	7d83      	ldrb	r3, [r0, #22]
 80134b6:	b943      	cbnz	r3, 80134ca <ucdr_check_final_buffer_behavior+0x16>
 80134b8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80134bc:	b510      	push	{r4, lr}
 80134be:	4291      	cmp	r1, r2
 80134c0:	4604      	mov	r4, r0
 80134c2:	d205      	bcs.n	80134d0 <ucdr_check_final_buffer_behavior+0x1c>
 80134c4:	2301      	movs	r3, #1
 80134c6:	4618      	mov	r0, r3
 80134c8:	bd10      	pop	{r4, pc}
 80134ca:	2300      	movs	r3, #0
 80134cc:	4618      	mov	r0, r3
 80134ce:	4770      	bx	lr
 80134d0:	6982      	ldr	r2, [r0, #24]
 80134d2:	b13a      	cbz	r2, 80134e4 <ucdr_check_final_buffer_behavior+0x30>
 80134d4:	69c1      	ldr	r1, [r0, #28]
 80134d6:	4790      	blx	r2
 80134d8:	f080 0301 	eor.w	r3, r0, #1
 80134dc:	75a0      	strb	r0, [r4, #22]
 80134de:	b2db      	uxtb	r3, r3
 80134e0:	4618      	mov	r0, r3
 80134e2:	bd10      	pop	{r4, pc}
 80134e4:	2001      	movs	r0, #1
 80134e6:	75a0      	strb	r0, [r4, #22]
 80134e8:	e7fa      	b.n	80134e0 <ucdr_check_final_buffer_behavior+0x2c>
 80134ea:	bf00      	nop

080134ec <ucdr_set_on_full_buffer_callback>:
 80134ec:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80134f0:	4770      	bx	lr
 80134f2:	bf00      	nop

080134f4 <ucdr_init_buffer_origin_offset_endian>:
 80134f4:	b410      	push	{r4}
 80134f6:	9c01      	ldr	r4, [sp, #4]
 80134f8:	440a      	add	r2, r1
 80134fa:	6001      	str	r1, [r0, #0]
 80134fc:	6042      	str	r2, [r0, #4]
 80134fe:	190a      	adds	r2, r1, r4
 8013500:	441c      	add	r4, r3
 8013502:	6082      	str	r2, [r0, #8]
 8013504:	2200      	movs	r2, #0
 8013506:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801350a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801350e:	7542      	strb	r2, [r0, #21]
 8013510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013514:	7582      	strb	r2, [r0, #22]
 8013516:	7503      	strb	r3, [r0, #20]
 8013518:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801351c:	4770      	bx	lr
 801351e:	bf00      	nop

08013520 <ucdr_init_buffer_origin_offset>:
 8013520:	b510      	push	{r4, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	9c04      	ldr	r4, [sp, #16]
 8013526:	9400      	str	r4, [sp, #0]
 8013528:	2401      	movs	r4, #1
 801352a:	9401      	str	r4, [sp, #4]
 801352c:	f7ff ffe2 	bl	80134f4 <ucdr_init_buffer_origin_offset_endian>
 8013530:	b002      	add	sp, #8
 8013532:	bd10      	pop	{r4, pc}

08013534 <ucdr_init_buffer_origin>:
 8013534:	b510      	push	{r4, lr}
 8013536:	2400      	movs	r4, #0
 8013538:	b082      	sub	sp, #8
 801353a:	9400      	str	r4, [sp, #0]
 801353c:	f7ff fff0 	bl	8013520 <ucdr_init_buffer_origin_offset>
 8013540:	b002      	add	sp, #8
 8013542:	bd10      	pop	{r4, pc}

08013544 <ucdr_init_buffer>:
 8013544:	2300      	movs	r3, #0
 8013546:	f7ff bff5 	b.w	8013534 <ucdr_init_buffer_origin>
 801354a:	bf00      	nop

0801354c <ucdr_alignment>:
 801354c:	fbb0 f2f1 	udiv	r2, r0, r1
 8013550:	fb02 0011 	mls	r0, r2, r1, r0
 8013554:	1e4b      	subs	r3, r1, #1
 8013556:	1a08      	subs	r0, r1, r0
 8013558:	4018      	ands	r0, r3
 801355a:	4770      	bx	lr

0801355c <ucdr_buffer_alignment>:
 801355c:	7d43      	ldrb	r3, [r0, #21]
 801355e:	428b      	cmp	r3, r1
 8013560:	d209      	bcs.n	8013576 <ucdr_buffer_alignment+0x1a>
 8013562:	6903      	ldr	r3, [r0, #16]
 8013564:	1e4a      	subs	r2, r1, #1
 8013566:	fbb3 f0f1 	udiv	r0, r3, r1
 801356a:	fb01 3010 	mls	r0, r1, r0, r3
 801356e:	1a09      	subs	r1, r1, r0
 8013570:	ea01 0002 	and.w	r0, r1, r2
 8013574:	4770      	bx	lr
 8013576:	2000      	movs	r0, #0
 8013578:	4770      	bx	lr
 801357a:	bf00      	nop

0801357c <ucdr_align_to>:
 801357c:	b538      	push	{r3, r4, r5, lr}
 801357e:	4604      	mov	r4, r0
 8013580:	460d      	mov	r5, r1
 8013582:	f7ff ffeb 	bl	801355c <ucdr_buffer_alignment>
 8013586:	68a3      	ldr	r3, [r4, #8]
 8013588:	7565      	strb	r5, [r4, #21]
 801358a:	181a      	adds	r2, r3, r0
 801358c:	6923      	ldr	r3, [r4, #16]
 801358e:	4418      	add	r0, r3
 8013590:	6863      	ldr	r3, [r4, #4]
 8013592:	4293      	cmp	r3, r2
 8013594:	6120      	str	r0, [r4, #16]
 8013596:	bf28      	it	cs
 8013598:	4613      	movcs	r3, r2
 801359a:	60a3      	str	r3, [r4, #8]
 801359c:	bd38      	pop	{r3, r4, r5, pc}
 801359e:	bf00      	nop

080135a0 <ucdr_buffer_length>:
 80135a0:	6882      	ldr	r2, [r0, #8]
 80135a2:	6800      	ldr	r0, [r0, #0]
 80135a4:	1a10      	subs	r0, r2, r0
 80135a6:	4770      	bx	lr

080135a8 <ucdr_buffer_remaining>:
 80135a8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80135ac:	1a10      	subs	r0, r2, r0
 80135ae:	4770      	bx	lr

080135b0 <ucdr_check_final_buffer_behavior_array>:
 80135b0:	b538      	push	{r3, r4, r5, lr}
 80135b2:	7d83      	ldrb	r3, [r0, #22]
 80135b4:	b9a3      	cbnz	r3, 80135e0 <ucdr_check_final_buffer_behavior_array+0x30>
 80135b6:	4604      	mov	r4, r0
 80135b8:	460d      	mov	r5, r1
 80135ba:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80135be:	429a      	cmp	r2, r3
 80135c0:	d300      	bcc.n	80135c4 <ucdr_check_final_buffer_behavior_array+0x14>
 80135c2:	b931      	cbnz	r1, 80135d2 <ucdr_check_final_buffer_behavior_array+0x22>
 80135c4:	4620      	mov	r0, r4
 80135c6:	f7ff ffef 	bl	80135a8 <ucdr_buffer_remaining>
 80135ca:	42a8      	cmp	r0, r5
 80135cc:	bf28      	it	cs
 80135ce:	4628      	movcs	r0, r5
 80135d0:	bd38      	pop	{r3, r4, r5, pc}
 80135d2:	6983      	ldr	r3, [r0, #24]
 80135d4:	b133      	cbz	r3, 80135e4 <ucdr_check_final_buffer_behavior_array+0x34>
 80135d6:	69c1      	ldr	r1, [r0, #28]
 80135d8:	4798      	blx	r3
 80135da:	75a0      	strb	r0, [r4, #22]
 80135dc:	2800      	cmp	r0, #0
 80135de:	d0f1      	beq.n	80135c4 <ucdr_check_final_buffer_behavior_array+0x14>
 80135e0:	2000      	movs	r0, #0
 80135e2:	bd38      	pop	{r3, r4, r5, pc}
 80135e4:	2301      	movs	r3, #1
 80135e6:	7583      	strb	r3, [r0, #22]
 80135e8:	e7fa      	b.n	80135e0 <ucdr_check_final_buffer_behavior_array+0x30>
 80135ea:	bf00      	nop

080135ec <ucdr_advance_buffer>:
 80135ec:	b538      	push	{r3, r4, r5, lr}
 80135ee:	4604      	mov	r4, r0
 80135f0:	460d      	mov	r5, r1
 80135f2:	f7ff ff53 	bl	801349c <ucdr_check_buffer_available_for>
 80135f6:	b178      	cbz	r0, 8013618 <ucdr_advance_buffer+0x2c>
 80135f8:	6923      	ldr	r3, [r4, #16]
 80135fa:	68a2      	ldr	r2, [r4, #8]
 80135fc:	442b      	add	r3, r5
 80135fe:	442a      	add	r2, r5
 8013600:	6123      	str	r3, [r4, #16]
 8013602:	2301      	movs	r3, #1
 8013604:	60a2      	str	r2, [r4, #8]
 8013606:	7563      	strb	r3, [r4, #21]
 8013608:	bd38      	pop	{r3, r4, r5, pc}
 801360a:	68a2      	ldr	r2, [r4, #8]
 801360c:	1a2d      	subs	r5, r5, r0
 801360e:	6923      	ldr	r3, [r4, #16]
 8013610:	4402      	add	r2, r0
 8013612:	4418      	add	r0, r3
 8013614:	60a2      	str	r2, [r4, #8]
 8013616:	6120      	str	r0, [r4, #16]
 8013618:	4629      	mov	r1, r5
 801361a:	2201      	movs	r2, #1
 801361c:	4620      	mov	r0, r4
 801361e:	f7ff ffc7 	bl	80135b0 <ucdr_check_final_buffer_behavior_array>
 8013622:	2800      	cmp	r0, #0
 8013624:	d1f1      	bne.n	801360a <ucdr_advance_buffer+0x1e>
 8013626:	2301      	movs	r3, #1
 8013628:	7563      	strb	r3, [r4, #21]
 801362a:	bd38      	pop	{r3, r4, r5, pc}

0801362c <_rclc_check_for_new_data>:
 801362c:	2800      	cmp	r0, #0
 801362e:	d046      	beq.n	80136be <_rclc_check_for_new_data+0x92>
 8013630:	4603      	mov	r3, r0
 8013632:	b530      	push	{r4, r5, lr}
 8013634:	7802      	ldrb	r2, [r0, #0]
 8013636:	b085      	sub	sp, #20
 8013638:	2a0a      	cmp	r2, #10
 801363a:	d842      	bhi.n	80136c2 <_rclc_check_for_new_data+0x96>
 801363c:	e8df f002 	tbb	[pc, r2]
 8013640:	14181212 	.word	0x14181212
 8013644:	06060614 	.word	0x06060614
 8013648:	2e1a      	.short	0x2e1a
 801364a:	16          	.byte	0x16
 801364b:	00          	.byte	0x00
 801364c:	6a0a      	ldr	r2, [r1, #32]
 801364e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8013650:	2000      	movs	r0, #0
 8013652:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8013656:	1a12      	subs	r2, r2, r0
 8013658:	bf18      	it	ne
 801365a:	2201      	movne	r2, #1
 801365c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8013660:	b005      	add	sp, #20
 8013662:	bd30      	pop	{r4, r5, pc}
 8013664:	680a      	ldr	r2, [r1, #0]
 8013666:	e7f2      	b.n	801364e <_rclc_check_for_new_data+0x22>
 8013668:	698a      	ldr	r2, [r1, #24]
 801366a:	e7f0      	b.n	801364e <_rclc_check_for_new_data+0x22>
 801366c:	688a      	ldr	r2, [r1, #8]
 801366e:	e7ee      	b.n	801364e <_rclc_check_for_new_data+0x22>
 8013670:	690a      	ldr	r2, [r1, #16]
 8013672:	e7ec      	b.n	801364e <_rclc_check_for_new_data+0x22>
 8013674:	685c      	ldr	r4, [r3, #4]
 8013676:	4608      	mov	r0, r1
 8013678:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801367c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013680:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 8013684:	f104 0110 	add.w	r1, r4, #16
 8013688:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801368c:	9500      	str	r5, [sp, #0]
 801368e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8013692:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8013696:	f004 f987 	bl	80179a8 <rcl_action_client_wait_set_get_entities_ready>
 801369a:	e7e1      	b.n	8013660 <_rclc_check_for_new_data+0x34>
 801369c:	685c      	ldr	r4, [r3, #4]
 801369e:	4608      	mov	r0, r1
 80136a0:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 80136a4:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 80136a8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80136ac:	e9cd 2100 	strd	r2, r1, [sp]
 80136b0:	f104 0220 	add.w	r2, r4, #32
 80136b4:	f104 0110 	add.w	r1, r4, #16
 80136b8:	f004 fb90 	bl	8017ddc <rcl_action_server_wait_set_get_entities_ready>
 80136bc:	e7d0      	b.n	8013660 <_rclc_check_for_new_data+0x34>
 80136be:	200b      	movs	r0, #11
 80136c0:	4770      	bx	lr
 80136c2:	2001      	movs	r0, #1
 80136c4:	e7cc      	b.n	8013660 <_rclc_check_for_new_data+0x34>
 80136c6:	bf00      	nop

080136c8 <_rclc_take_new_data>:
 80136c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136ca:	b09b      	sub	sp, #108	@ 0x6c
 80136cc:	2800      	cmp	r0, #0
 80136ce:	f000 8088 	beq.w	80137e2 <_rclc_take_new_data+0x11a>
 80136d2:	7803      	ldrb	r3, [r0, #0]
 80136d4:	4604      	mov	r4, r0
 80136d6:	2b0a      	cmp	r3, #10
 80136d8:	f200 8167 	bhi.w	80139aa <_rclc_take_new_data+0x2e2>
 80136dc:	e8df f003 	tbb	[pc, r3]
 80136e0:	44152d2d 	.word	0x44152d2d
 80136e4:	19191944 	.word	0x19191944
 80136e8:	065a      	.short	0x065a
 80136ea:	15          	.byte	0x15
 80136eb:	00          	.byte	0x00
 80136ec:	6840      	ldr	r0, [r0, #4]
 80136ee:	f890 3020 	ldrb.w	r3, [r0, #32]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	f040 80b2 	bne.w	801385c <_rclc_take_new_data+0x194>
 80136f8:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f040 80e4 	bne.w	80138ca <_rclc_take_new_data+0x202>
 8013702:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8013706:	2b00      	cmp	r3, #0
 8013708:	d16f      	bne.n	80137ea <_rclc_take_new_data+0x122>
 801370a:	2500      	movs	r5, #0
 801370c:	4628      	mov	r0, r5
 801370e:	b01b      	add	sp, #108	@ 0x6c
 8013710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013712:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8013714:	6a0b      	ldr	r3, [r1, #32]
 8013716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d0f5      	beq.n	801370a <_rclc_take_new_data+0x42>
 801371e:	6882      	ldr	r2, [r0, #8]
 8013720:	f100 0110 	add.w	r1, r0, #16
 8013724:	6840      	ldr	r0, [r0, #4]
 8013726:	f002 fdfd 	bl	8016324 <rcl_take_request>
 801372a:	4605      	mov	r5, r0
 801372c:	2800      	cmp	r0, #0
 801372e:	d0ec      	beq.n	801370a <_rclc_take_new_data+0x42>
 8013730:	f240 2359 	movw	r3, #601	@ 0x259
 8013734:	4298      	cmp	r0, r3
 8013736:	d013      	beq.n	8013760 <_rclc_take_new_data+0x98>
 8013738:	e029      	b.n	801378e <_rclc_take_new_data+0xc6>
 801373a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801373c:	680b      	ldr	r3, [r1, #0]
 801373e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d0e1      	beq.n	801370a <_rclc_take_new_data+0x42>
 8013746:	2300      	movs	r3, #0
 8013748:	aa0a      	add	r2, sp, #40	@ 0x28
 801374a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 801374e:	f002 ff2d 	bl	80165ac <rcl_take>
 8013752:	4605      	mov	r5, r0
 8013754:	2800      	cmp	r0, #0
 8013756:	d0d9      	beq.n	801370c <_rclc_take_new_data+0x44>
 8013758:	f240 1391 	movw	r3, #401	@ 0x191
 801375c:	4298      	cmp	r0, r3
 801375e:	d116      	bne.n	801378e <_rclc_take_new_data+0xc6>
 8013760:	2300      	movs	r3, #0
 8013762:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8013766:	e7d1      	b.n	801370c <_rclc_take_new_data+0x44>
 8013768:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801376a:	698b      	ldr	r3, [r1, #24]
 801376c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d0ca      	beq.n	801370a <_rclc_take_new_data+0x42>
 8013774:	6882      	ldr	r2, [r0, #8]
 8013776:	f100 0110 	add.w	r1, r0, #16
 801377a:	6840      	ldr	r0, [r0, #4]
 801377c:	f001 fdb8 	bl	80152f0 <rcl_take_response>
 8013780:	4605      	mov	r5, r0
 8013782:	2800      	cmp	r0, #0
 8013784:	d0c1      	beq.n	801370a <_rclc_take_new_data+0x42>
 8013786:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801378a:	4298      	cmp	r0, r3
 801378c:	d0be      	beq.n	801370c <_rclc_take_new_data+0x44>
 801378e:	f000 ff63 	bl	8014658 <rcutils_reset_error>
 8013792:	e7bb      	b.n	801370c <_rclc_take_new_data+0x44>
 8013794:	6840      	ldr	r0, [r0, #4]
 8013796:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801379a:	2b00      	cmp	r3, #0
 801379c:	d17d      	bne.n	801389a <_rclc_take_new_data+0x1d2>
 801379e:	69c3      	ldr	r3, [r0, #28]
 80137a0:	b11b      	cbz	r3, 80137aa <_rclc_take_new_data+0xe2>
 80137a2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d144      	bne.n	8013834 <_rclc_take_new_data+0x16c>
 80137aa:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	f040 80ac 	bne.w	801390c <_rclc_take_new_data+0x244>
 80137b4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d0a6      	beq.n	801370a <_rclc_take_new_data+0x42>
 80137bc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80137be:	a90a      	add	r1, sp, #40	@ 0x28
 80137c0:	3010      	adds	r0, #16
 80137c2:	f003 ffc9 	bl	8017758 <rcl_action_take_result_response>
 80137c6:	4605      	mov	r5, r0
 80137c8:	2800      	cmp	r0, #0
 80137ca:	d1e0      	bne.n	801378e <_rclc_take_new_data+0xc6>
 80137cc:	6860      	ldr	r0, [r4, #4]
 80137ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80137d2:	f004 fc33 	bl	801803c <rclc_action_find_handle_by_result_request_sequence_number>
 80137d6:	2800      	cmp	r0, #0
 80137d8:	d098      	beq.n	801370c <_rclc_take_new_data+0x44>
 80137da:	2301      	movs	r3, #1
 80137dc:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 80137e0:	e794      	b.n	801370c <_rclc_take_new_data+0x44>
 80137e2:	250b      	movs	r5, #11
 80137e4:	4628      	mov	r0, r5
 80137e6:	b01b      	add	sp, #108	@ 0x6c
 80137e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137ea:	ae04      	add	r6, sp, #16
 80137ec:	3010      	adds	r0, #16
 80137ee:	aa0a      	add	r2, sp, #40	@ 0x28
 80137f0:	4631      	mov	r1, r6
 80137f2:	f004 fa27 	bl	8017c44 <rcl_action_take_cancel_request>
 80137f6:	4605      	mov	r5, r0
 80137f8:	2800      	cmp	r0, #0
 80137fa:	d1c8      	bne.n	801378e <_rclc_take_new_data+0xc6>
 80137fc:	a90a      	add	r1, sp, #40	@ 0x28
 80137fe:	6860      	ldr	r0, [r4, #4]
 8013800:	f004 fbdc 	bl	8017fbc <rclc_action_find_goal_handle_by_uuid>
 8013804:	4607      	mov	r7, r0
 8013806:	2800      	cmp	r0, #0
 8013808:	f000 80bb 	beq.w	8013982 <_rclc_take_new_data+0x2ba>
 801380c:	2101      	movs	r1, #1
 801380e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8013812:	f004 fb5d 	bl	8017ed0 <rcl_action_transition_goal_state>
 8013816:	2803      	cmp	r0, #3
 8013818:	4684      	mov	ip, r0
 801381a:	f040 80a7 	bne.w	801396c <_rclc_take_new_data+0x2a4>
 801381e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8013822:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013826:	e896 0003 	ldmia.w	r6, {r0, r1}
 801382a:	e884 0003 	stmia.w	r4, {r0, r1}
 801382e:	f887 c008 	strb.w	ip, [r7, #8]
 8013832:	e76b      	b.n	801370c <_rclc_take_new_data+0x44>
 8013834:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8013836:	3010      	adds	r0, #16
 8013838:	f004 f80e 	bl	8017858 <rcl_action_take_feedback>
 801383c:	4605      	mov	r5, r0
 801383e:	2800      	cmp	r0, #0
 8013840:	d1a5      	bne.n	801378e <_rclc_take_new_data+0xc6>
 8013842:	6860      	ldr	r0, [r4, #4]
 8013844:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8013846:	f004 fbb9 	bl	8017fbc <rclc_action_find_goal_handle_by_uuid>
 801384a:	4603      	mov	r3, r0
 801384c:	2800      	cmp	r0, #0
 801384e:	f000 80a3 	beq.w	8013998 <_rclc_take_new_data+0x2d0>
 8013852:	2201      	movs	r2, #1
 8013854:	6860      	ldr	r0, [r4, #4]
 8013856:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 801385a:	e7a6      	b.n	80137aa <_rclc_take_new_data+0xe2>
 801385c:	f004 fb88 	bl	8017f70 <rclc_action_take_goal_handle>
 8013860:	4606      	mov	r6, r0
 8013862:	6860      	ldr	r0, [r4, #4]
 8013864:	2e00      	cmp	r6, #0
 8013866:	f43f af47 	beq.w	80136f8 <_rclc_take_new_data+0x30>
 801386a:	6070      	str	r0, [r6, #4]
 801386c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8013870:	69f2      	ldr	r2, [r6, #28]
 8013872:	3010      	adds	r0, #16
 8013874:	f004 f92e 	bl	8017ad4 <rcl_action_take_goal_request>
 8013878:	4605      	mov	r5, r0
 801387a:	2800      	cmp	r0, #0
 801387c:	f040 808e 	bne.w	801399c <_rclc_take_new_data+0x2d4>
 8013880:	69f7      	ldr	r7, [r6, #28]
 8013882:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013884:	7235      	strb	r5, [r6, #8]
 8013886:	f8c6 0009 	str.w	r0, [r6, #9]
 801388a:	f8c6 100d 	str.w	r1, [r6, #13]
 801388e:	6860      	ldr	r0, [r4, #4]
 8013890:	f8c6 2011 	str.w	r2, [r6, #17]
 8013894:	f8c6 3015 	str.w	r3, [r6, #21]
 8013898:	e72e      	b.n	80136f8 <_rclc_take_new_data+0x30>
 801389a:	aa04      	add	r2, sp, #16
 801389c:	a90a      	add	r1, sp, #40	@ 0x28
 801389e:	3010      	adds	r0, #16
 80138a0:	f003 fee2 	bl	8017668 <rcl_action_take_goal_response>
 80138a4:	4605      	mov	r5, r0
 80138a6:	2800      	cmp	r0, #0
 80138a8:	f47f af71 	bne.w	801378e <_rclc_take_new_data+0xc6>
 80138ac:	6860      	ldr	r0, [r4, #4]
 80138ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80138b2:	f004 fbb1 	bl	8018018 <rclc_action_find_handle_by_goal_request_sequence_number>
 80138b6:	b130      	cbz	r0, 80138c6 <_rclc_take_new_data+0x1fe>
 80138b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80138bc:	2201      	movs	r2, #1
 80138be:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80138c2:	f880 2020 	strb.w	r2, [r0, #32]
 80138c6:	6860      	ldr	r0, [r4, #4]
 80138c8:	e769      	b.n	801379e <_rclc_take_new_data+0xd6>
 80138ca:	3010      	adds	r0, #16
 80138cc:	aa04      	add	r2, sp, #16
 80138ce:	a90a      	add	r1, sp, #40	@ 0x28
 80138d0:	f004 f978 	bl	8017bc4 <rcl_action_take_result_request>
 80138d4:	4605      	mov	r5, r0
 80138d6:	2800      	cmp	r0, #0
 80138d8:	f47f af59 	bne.w	801378e <_rclc_take_new_data+0xc6>
 80138dc:	a904      	add	r1, sp, #16
 80138de:	6860      	ldr	r0, [r4, #4]
 80138e0:	f004 fb6c 	bl	8017fbc <rclc_action_find_goal_handle_by_uuid>
 80138e4:	4607      	mov	r7, r0
 80138e6:	b160      	cbz	r0, 8013902 <_rclc_take_new_data+0x23a>
 80138e8:	ad0a      	add	r5, sp, #40	@ 0x28
 80138ea:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 80138ee:	f04f 0c02 	mov.w	ip, #2
 80138f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80138f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80138fa:	e886 0003 	stmia.w	r6, {r0, r1}
 80138fe:	f887 c008 	strb.w	ip, [r7, #8]
 8013902:	6860      	ldr	r0, [r4, #4]
 8013904:	2300      	movs	r3, #0
 8013906:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 801390a:	e6fa      	b.n	8013702 <_rclc_take_new_data+0x3a>
 801390c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8013910:	a90a      	add	r1, sp, #40	@ 0x28
 8013912:	3010      	adds	r0, #16
 8013914:	f003 ff60 	bl	80177d8 <rcl_action_take_cancel_response>
 8013918:	4605      	mov	r5, r0
 801391a:	2800      	cmp	r0, #0
 801391c:	f47f af37 	bne.w	801378e <_rclc_take_new_data+0xc6>
 8013920:	6860      	ldr	r0, [r4, #4]
 8013922:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013926:	f004 fb9b 	bl	8018060 <rclc_action_find_handle_by_cancel_request_sequence_number>
 801392a:	4606      	mov	r6, r0
 801392c:	6860      	ldr	r0, [r4, #4]
 801392e:	2e00      	cmp	r6, #0
 8013930:	f43f af40 	beq.w	80137b4 <_rclc_take_new_data+0xec>
 8013934:	2701      	movs	r7, #1
 8013936:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8013938:	84b7      	strh	r7, [r6, #36]	@ 0x24
 801393a:	2b00      	cmp	r3, #0
 801393c:	f43f af3a 	beq.w	80137b4 <_rclc_take_new_data+0xec>
 8013940:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013942:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8013946:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801394a:	f004 fb37 	bl	8017fbc <rclc_action_find_goal_handle_by_uuid>
 801394e:	b138      	cbz	r0, 8013960 <_rclc_take_new_data+0x298>
 8013950:	6860      	ldr	r0, [r4, #4]
 8013952:	3501      	adds	r5, #1
 8013954:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8013958:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801395a:	42ab      	cmp	r3, r5
 801395c:	d8f0      	bhi.n	8013940 <_rclc_take_new_data+0x278>
 801395e:	e729      	b.n	80137b4 <_rclc_take_new_data+0xec>
 8013960:	6860      	ldr	r0, [r4, #4]
 8013962:	3501      	adds	r5, #1
 8013964:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8013966:	42ab      	cmp	r3, r5
 8013968:	d8ea      	bhi.n	8013940 <_rclc_take_new_data+0x278>
 801396a:	e723      	b.n	80137b4 <_rclc_take_new_data+0xec>
 801396c:	ab06      	add	r3, sp, #24
 801396e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013970:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013974:	2103      	movs	r1, #3
 8013976:	6860      	ldr	r0, [r4, #4]
 8013978:	e896 000c 	ldmia.w	r6, {r2, r3}
 801397c:	f004 fbe4 	bl	8018148 <rclc_action_server_goal_cancel_reject>
 8013980:	e6c4      	b.n	801370c <_rclc_take_new_data+0x44>
 8013982:	ab06      	add	r3, sp, #24
 8013984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013986:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801398a:	2102      	movs	r1, #2
 801398c:	6860      	ldr	r0, [r4, #4]
 801398e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013992:	f004 fbd9 	bl	8018148 <rclc_action_server_goal_cancel_reject>
 8013996:	e6b9      	b.n	801370c <_rclc_take_new_data+0x44>
 8013998:	6860      	ldr	r0, [r4, #4]
 801399a:	e706      	b.n	80137aa <_rclc_take_new_data+0xe2>
 801399c:	4631      	mov	r1, r6
 801399e:	6860      	ldr	r0, [r4, #4]
 80139a0:	f004 faf6 	bl	8017f90 <rclc_action_remove_used_goal_handle>
 80139a4:	f000 fe58 	bl	8014658 <rcutils_reset_error>
 80139a8:	e6b0      	b.n	801370c <_rclc_take_new_data+0x44>
 80139aa:	2501      	movs	r5, #1
 80139ac:	e6ae      	b.n	801370c <_rclc_take_new_data+0x44>
 80139ae:	bf00      	nop

080139b0 <_rclc_execute.part.0>:
 80139b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139b2:	7803      	ldrb	r3, [r0, #0]
 80139b4:	b085      	sub	sp, #20
 80139b6:	4604      	mov	r4, r0
 80139b8:	2b0a      	cmp	r3, #10
 80139ba:	f200 8139 	bhi.w	8013c30 <_rclc_execute.part.0+0x280>
 80139be:	e8df f003 	tbb	[pc, r3]
 80139c2:	4268      	.short	0x4268
 80139c4:	06a75b4d 	.word	0x06a75b4d
 80139c8:	721d0606 	.word	0x721d0606
 80139cc:	62          	.byte	0x62
 80139cd:	00          	.byte	0x00
 80139ce:	2b06      	cmp	r3, #6
 80139d0:	f000 8126 	beq.w	8013c20 <_rclc_execute.part.0+0x270>
 80139d4:	2b07      	cmp	r3, #7
 80139d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80139d8:	f040 811c 	bne.w	8013c14 <_rclc_execute.part.0+0x264>
 80139dc:	f104 0510 	add.w	r5, r4, #16
 80139e0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 80139e4:	6880      	ldr	r0, [r0, #8]
 80139e6:	4798      	blx	r3
 80139e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80139ea:	4629      	mov	r1, r5
 80139ec:	6860      	ldr	r0, [r4, #4]
 80139ee:	f002 fcd9 	bl	80163a4 <rcl_send_response>
 80139f2:	4604      	mov	r4, r0
 80139f4:	b378      	cbz	r0, 8013a56 <_rclc_execute.part.0+0xa6>
 80139f6:	f000 fe2f 	bl	8014658 <rcutils_reset_error>
 80139fa:	e02c      	b.n	8013a56 <_rclc_execute.part.0+0xa6>
 80139fc:	6840      	ldr	r0, [r0, #4]
 80139fe:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	f000 808e 	beq.w	8013b24 <_rclc_execute.part.0+0x174>
 8013a08:	2600      	movs	r6, #0
 8013a0a:	2701      	movs	r7, #1
 8013a0c:	e004      	b.n	8013a18 <_rclc_execute.part.0+0x68>
 8013a0e:	f004 fa89 	bl	8017f24 <rclc_action_send_result_request>
 8013a12:	b998      	cbnz	r0, 8013a3c <_rclc_execute.part.0+0x8c>
 8013a14:	722f      	strb	r7, [r5, #8]
 8013a16:	6860      	ldr	r0, [r4, #4]
 8013a18:	f004 fb34 	bl	8018084 <rclc_action_find_first_handle_with_goal_response>
 8013a1c:	4605      	mov	r5, r0
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d07f      	beq.n	8013b22 <_rclc_execute.part.0+0x172>
 8013a22:	6863      	ldr	r3, [r4, #4]
 8013a24:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013a26:	699b      	ldr	r3, [r3, #24]
 8013a28:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8013a2c:	f885 6020 	strb.w	r6, [r5, #32]
 8013a30:	4798      	blx	r3
 8013a32:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8013a36:	4628      	mov	r0, r5
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d1e8      	bne.n	8013a0e <_rclc_execute.part.0+0x5e>
 8013a3c:	6860      	ldr	r0, [r4, #4]
 8013a3e:	4629      	mov	r1, r5
 8013a40:	f004 faa6 	bl	8017f90 <rclc_action_remove_used_goal_handle>
 8013a44:	e7e7      	b.n	8013a16 <_rclc_execute.part.0+0x66>
 8013a46:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8013a4a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 8013a4e:	b100      	cbz	r0, 8013a52 <_rclc_execute.part.0+0xa2>
 8013a50:	68a0      	ldr	r0, [r4, #8]
 8013a52:	2400      	movs	r4, #0
 8013a54:	4798      	blx	r3
 8013a56:	4620      	mov	r0, r4
 8013a58:	b005      	add	sp, #20
 8013a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a5c:	6840      	ldr	r0, [r0, #4]
 8013a5e:	f002 feb9 	bl	80167d4 <rcl_timer_call>
 8013a62:	f240 3321 	movw	r3, #801	@ 0x321
 8013a66:	4604      	mov	r4, r0
 8013a68:	4298      	cmp	r0, r3
 8013a6a:	d001      	beq.n	8013a70 <_rclc_execute.part.0+0xc0>
 8013a6c:	2800      	cmp	r0, #0
 8013a6e:	d1c2      	bne.n	80139f6 <_rclc_execute.part.0+0x46>
 8013a70:	2400      	movs	r4, #0
 8013a72:	4620      	mov	r0, r4
 8013a74:	b005      	add	sp, #20
 8013a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a78:	2400      	movs	r4, #0
 8013a7a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a7c:	6880      	ldr	r0, [r0, #8]
 8013a7e:	4798      	blx	r3
 8013a80:	4620      	mov	r0, r4
 8013a82:	b005      	add	sp, #20
 8013a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a86:	2400      	movs	r4, #0
 8013a88:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a8a:	4798      	blx	r3
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	b005      	add	sp, #20
 8013a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a92:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8013a96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013a98:	b100      	cbz	r0, 8013a9c <_rclc_execute.part.0+0xec>
 8013a9a:	68a0      	ldr	r0, [r4, #8]
 8013a9c:	2400      	movs	r4, #0
 8013a9e:	4798      	blx	r3
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	b005      	add	sp, #20
 8013aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013aa6:	6840      	ldr	r0, [r0, #4]
 8013aa8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8013aac:	bb3b      	cbnz	r3, 8013afe <_rclc_execute.part.0+0x14e>
 8013aae:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d07d      	beq.n	8013bb2 <_rclc_execute.part.0+0x202>
 8013ab6:	f640 0634 	movw	r6, #2100	@ 0x834
 8013aba:	2701      	movs	r7, #1
 8013abc:	e007      	b.n	8013ace <_rclc_execute.part.0+0x11e>
 8013abe:	4628      	mov	r0, r5
 8013ac0:	f004 faf8 	bl	80180b4 <rclc_action_server_response_goal_request>
 8013ac4:	4629      	mov	r1, r5
 8013ac6:	6860      	ldr	r0, [r4, #4]
 8013ac8:	f004 fa62 	bl	8017f90 <rclc_action_remove_used_goal_handle>
 8013acc:	6860      	ldr	r0, [r4, #4]
 8013ace:	2100      	movs	r1, #0
 8013ad0:	f004 fa8a 	bl	8017fe8 <rclc_action_find_first_handle_by_status>
 8013ad4:	4605      	mov	r5, r0
 8013ad6:	2800      	cmp	r0, #0
 8013ad8:	d068      	beq.n	8013bac <_rclc_execute.part.0+0x1fc>
 8013ada:	6863      	ldr	r3, [r4, #4]
 8013adc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013ade:	699b      	ldr	r3, [r3, #24]
 8013ae0:	4798      	blx	r3
 8013ae2:	42b0      	cmp	r0, r6
 8013ae4:	f04f 0100 	mov.w	r1, #0
 8013ae8:	d1e9      	bne.n	8013abe <_rclc_execute.part.0+0x10e>
 8013aea:	2101      	movs	r1, #1
 8013aec:	4628      	mov	r0, r5
 8013aee:	f004 fae1 	bl	80180b4 <rclc_action_server_response_goal_request>
 8013af2:	722f      	strb	r7, [r5, #8]
 8013af4:	e7ea      	b.n	8013acc <_rclc_execute.part.0+0x11c>
 8013af6:	6848      	ldr	r0, [r1, #4]
 8013af8:	f004 fa4a 	bl	8017f90 <rclc_action_remove_used_goal_handle>
 8013afc:	6860      	ldr	r0, [r4, #4]
 8013afe:	f004 fa7f 	bl	8018000 <rclc_action_find_first_terminated_handle>
 8013b02:	4601      	mov	r1, r0
 8013b04:	2800      	cmp	r0, #0
 8013b06:	d1f6      	bne.n	8013af6 <_rclc_execute.part.0+0x146>
 8013b08:	6860      	ldr	r0, [r4, #4]
 8013b0a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8013b0e:	e7ce      	b.n	8013aae <_rclc_execute.part.0+0xfe>
 8013b10:	2400      	movs	r4, #0
 8013b12:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013b14:	f100 0110 	add.w	r1, r0, #16
 8013b18:	6880      	ldr	r0, [r0, #8]
 8013b1a:	4798      	blx	r3
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	b005      	add	sp, #20
 8013b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b22:	6860      	ldr	r0, [r4, #4]
 8013b24:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013b28:	b18b      	cbz	r3, 8013b4e <_rclc_execute.part.0+0x19e>
 8013b2a:	68c5      	ldr	r5, [r0, #12]
 8013b2c:	b32d      	cbz	r5, 8013b7a <_rclc_execute.part.0+0x1ca>
 8013b2e:	2600      	movs	r6, #0
 8013b30:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8013b34:	b143      	cbz	r3, 8013b48 <_rclc_execute.part.0+0x198>
 8013b36:	69c3      	ldr	r3, [r0, #28]
 8013b38:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8013b3c:	b123      	cbz	r3, 8013b48 <_rclc_execute.part.0+0x198>
 8013b3e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8013b40:	4628      	mov	r0, r5
 8013b42:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013b44:	4798      	blx	r3
 8013b46:	6860      	ldr	r0, [r4, #4]
 8013b48:	682d      	ldr	r5, [r5, #0]
 8013b4a:	2d00      	cmp	r5, #0
 8013b4c:	d1f0      	bne.n	8013b30 <_rclc_execute.part.0+0x180>
 8013b4e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013b52:	b193      	cbz	r3, 8013b7a <_rclc_execute.part.0+0x1ca>
 8013b54:	68c5      	ldr	r5, [r0, #12]
 8013b56:	b185      	cbz	r5, 8013b7a <_rclc_execute.part.0+0x1ca>
 8013b58:	2600      	movs	r6, #0
 8013b5a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8013b5e:	b14b      	cbz	r3, 8013b74 <_rclc_execute.part.0+0x1c4>
 8013b60:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013b62:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8013b66:	b12b      	cbz	r3, 8013b74 <_rclc_execute.part.0+0x1c4>
 8013b68:	4628      	mov	r0, r5
 8013b6a:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8013b6e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013b70:	4798      	blx	r3
 8013b72:	6860      	ldr	r0, [r4, #4]
 8013b74:	682d      	ldr	r5, [r5, #0]
 8013b76:	2d00      	cmp	r5, #0
 8013b78:	d1ef      	bne.n	8013b5a <_rclc_execute.part.0+0x1aa>
 8013b7a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	f43f af76 	beq.w	8013a70 <_rclc_execute.part.0+0xc0>
 8013b84:	2700      	movs	r7, #0
 8013b86:	e00b      	b.n	8013ba0 <_rclc_execute.part.0+0x1f0>
 8013b88:	6863      	ldr	r3, [r4, #4]
 8013b8a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013b8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013b8e:	6a1e      	ldr	r6, [r3, #32]
 8013b90:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8013b94:	47b0      	blx	r6
 8013b96:	6860      	ldr	r0, [r4, #4]
 8013b98:	4629      	mov	r1, r5
 8013b9a:	f004 f9f9 	bl	8017f90 <rclc_action_remove_used_goal_handle>
 8013b9e:	6860      	ldr	r0, [r4, #4]
 8013ba0:	f004 fa7c 	bl	801809c <rclc_action_find_first_handle_with_result_response>
 8013ba4:	4605      	mov	r5, r0
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	d1ee      	bne.n	8013b88 <_rclc_execute.part.0+0x1d8>
 8013baa:	e761      	b.n	8013a70 <_rclc_execute.part.0+0xc0>
 8013bac:	6860      	ldr	r0, [r4, #4]
 8013bae:	f880 5020 	strb.w	r5, [r0, #32]
 8013bb2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	f43f af5a 	beq.w	8013a70 <_rclc_execute.part.0+0xc0>
 8013bbc:	68c5      	ldr	r5, [r0, #12]
 8013bbe:	b1b5      	cbz	r5, 8013bee <_rclc_execute.part.0+0x23e>
 8013bc0:	2602      	movs	r6, #2
 8013bc2:	e001      	b.n	8013bc8 <_rclc_execute.part.0+0x218>
 8013bc4:	682d      	ldr	r5, [r5, #0]
 8013bc6:	b195      	cbz	r5, 8013bee <_rclc_execute.part.0+0x23e>
 8013bc8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8013bcc:	2b03      	cmp	r3, #3
 8013bce:	d1f9      	bne.n	8013bc4 <_rclc_execute.part.0+0x214>
 8013bd0:	69c3      	ldr	r3, [r0, #28]
 8013bd2:	4628      	mov	r0, r5
 8013bd4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013bd6:	4798      	blx	r3
 8013bd8:	4603      	mov	r3, r0
 8013bda:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8013bde:	4628      	mov	r0, r5
 8013be0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8013be4:	b143      	cbz	r3, 8013bf8 <_rclc_execute.part.0+0x248>
 8013be6:	f004 fa83 	bl	80180f0 <rclc_action_server_goal_cancel_accept>
 8013bea:	6860      	ldr	r0, [r4, #4]
 8013bec:	e7ea      	b.n	8013bc4 <_rclc_execute.part.0+0x214>
 8013bee:	2300      	movs	r3, #0
 8013bf0:	461c      	mov	r4, r3
 8013bf2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8013bf6:	e72e      	b.n	8013a56 <_rclc_execute.part.0+0xa6>
 8013bf8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8013bfa:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8013bfe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013c02:	2101      	movs	r1, #1
 8013c04:	6860      	ldr	r0, [r4, #4]
 8013c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c0a:	f004 fa9d 	bl	8018148 <rclc_action_server_goal_cancel_reject>
 8013c0e:	722e      	strb	r6, [r5, #8]
 8013c10:	6860      	ldr	r0, [r4, #4]
 8013c12:	e7d7      	b.n	8013bc4 <_rclc_execute.part.0+0x214>
 8013c14:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8013c16:	f104 0510 	add.w	r5, r4, #16
 8013c1a:	6880      	ldr	r0, [r0, #8]
 8013c1c:	4798      	blx	r3
 8013c1e:	e6e3      	b.n	80139e8 <_rclc_execute.part.0+0x38>
 8013c20:	f100 0510 	add.w	r5, r0, #16
 8013c24:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013c26:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8013c28:	4629      	mov	r1, r5
 8013c2a:	6880      	ldr	r0, [r0, #8]
 8013c2c:	4798      	blx	r3
 8013c2e:	e6db      	b.n	80139e8 <_rclc_execute.part.0+0x38>
 8013c30:	2401      	movs	r4, #1
 8013c32:	e710      	b.n	8013a56 <_rclc_execute.part.0+0xa6>

08013c34 <rclc_executor_trigger_any>:
 8013c34:	2800      	cmp	r0, #0
 8013c36:	d03d      	beq.n	8013cb4 <rclc_executor_trigger_any+0x80>
 8013c38:	2900      	cmp	r1, #0
 8013c3a:	d03c      	beq.n	8013cb6 <rclc_executor_trigger_any+0x82>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8013c42:	2200      	movs	r2, #0
 8013c44:	2800      	cmp	r0, #0
 8013c46:	d035      	beq.n	8013cb4 <rclc_executor_trigger_any+0x80>
 8013c48:	b430      	push	{r4, r5}
 8013c4a:	f893 c000 	ldrb.w	ip, [r3]
 8013c4e:	f1bc 0f08 	cmp.w	ip, #8
 8013c52:	d11d      	bne.n	8013c90 <rclc_executor_trigger_any+0x5c>
 8013c54:	685c      	ldr	r4, [r3, #4]
 8013c56:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8013c58:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8013c5c:	d105      	bne.n	8013c6a <rclc_executor_trigger_any+0x36>
 8013c5e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8013c62:	b910      	cbnz	r0, 8013c6a <rclc_executor_trigger_any+0x36>
 8013c64:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8013c68:	b128      	cbz	r0, 8013c76 <rclc_executor_trigger_any+0x42>
 8013c6a:	bc30      	pop	{r4, r5}
 8013c6c:	4770      	bx	lr
 8013c6e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8013c72:	2800      	cmp	r0, #0
 8013c74:	d1f9      	bne.n	8013c6a <rclc_executor_trigger_any+0x36>
 8013c76:	3201      	adds	r2, #1
 8013c78:	3340      	adds	r3, #64	@ 0x40
 8013c7a:	4291      	cmp	r1, r2
 8013c7c:	d017      	beq.n	8013cae <rclc_executor_trigger_any+0x7a>
 8013c7e:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8013c82:	2800      	cmp	r0, #0
 8013c84:	d0f1      	beq.n	8013c6a <rclc_executor_trigger_any+0x36>
 8013c86:	f893 c000 	ldrb.w	ip, [r3]
 8013c8a:	f1bc 0f08 	cmp.w	ip, #8
 8013c8e:	d0e1      	beq.n	8013c54 <rclc_executor_trigger_any+0x20>
 8013c90:	f1bc 0f09 	cmp.w	ip, #9
 8013c94:	d1eb      	bne.n	8013c6e <rclc_executor_trigger_any+0x3a>
 8013c96:	685c      	ldr	r4, [r3, #4]
 8013c98:	6a25      	ldr	r5, [r4, #32]
 8013c9a:	2d00      	cmp	r5, #0
 8013c9c:	d1e5      	bne.n	8013c6a <rclc_executor_trigger_any+0x36>
 8013c9e:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	d1e1      	bne.n	8013c6a <rclc_executor_trigger_any+0x36>
 8013ca6:	3201      	adds	r2, #1
 8013ca8:	3340      	adds	r3, #64	@ 0x40
 8013caa:	4291      	cmp	r1, r2
 8013cac:	d1e7      	bne.n	8013c7e <rclc_executor_trigger_any+0x4a>
 8013cae:	2000      	movs	r0, #0
 8013cb0:	bc30      	pop	{r4, r5}
 8013cb2:	4770      	bx	lr
 8013cb4:	4770      	bx	lr
 8013cb6:	4608      	mov	r0, r1
 8013cb8:	4770      	bx	lr
 8013cba:	bf00      	nop

08013cbc <rclc_executor_get_zero_initialized_executor>:
 8013cbc:	b510      	push	{r4, lr}
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	2288      	movs	r2, #136	@ 0x88
 8013cc2:	4902      	ldr	r1, [pc, #8]	@ (8013ccc <rclc_executor_get_zero_initialized_executor+0x10>)
 8013cc4:	f00c ff05 	bl	8020ad2 <memcpy>
 8013cc8:	4620      	mov	r0, r4
 8013cca:	bd10      	pop	{r4, pc}
 8013ccc:	08022c80 	.word	0x08022c80

08013cd0 <rclc_executor_init>:
 8013cd0:	2900      	cmp	r1, #0
 8013cd2:	d06a      	beq.n	8013daa <rclc_executor_init+0xda>
 8013cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cd8:	4605      	mov	r5, r0
 8013cda:	b0b0      	sub	sp, #192	@ 0xc0
 8013cdc:	2800      	cmp	r0, #0
 8013cde:	d05c      	beq.n	8013d9a <rclc_executor_init+0xca>
 8013ce0:	4616      	mov	r6, r2
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	4688      	mov	r8, r1
 8013ce6:	461f      	mov	r7, r3
 8013ce8:	f000 fc92 	bl	8014610 <rcutils_allocator_is_valid>
 8013cec:	2e00      	cmp	r6, #0
 8013cee:	d054      	beq.n	8013d9a <rclc_executor_init+0xca>
 8013cf0:	f080 0401 	eor.w	r4, r0, #1
 8013cf4:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8013cf8:	d14f      	bne.n	8013d9a <rclc_executor_init+0xca>
 8013cfa:	2288      	movs	r2, #136	@ 0x88
 8013cfc:	4930      	ldr	r1, [pc, #192]	@ (8013dc0 <rclc_executor_init+0xf0>)
 8013cfe:	a80e      	add	r0, sp, #56	@ 0x38
 8013d00:	f00c fee7 	bl	8020ad2 <memcpy>
 8013d04:	a90e      	add	r1, sp, #56	@ 0x38
 8013d06:	2288      	movs	r2, #136	@ 0x88
 8013d08:	4628      	mov	r0, r5
 8013d0a:	f00c fee2 	bl	8020ad2 <memcpy>
 8013d0e:	4668      	mov	r0, sp
 8013d10:	f8c5 8000 	str.w	r8, [r5]
 8013d14:	60ae      	str	r6, [r5, #8]
 8013d16:	f002 fed3 	bl	8016ac0 <rcl_get_zero_initialized_wait_set>
 8013d1a:	46ec      	mov	ip, sp
 8013d1c:	f105 0e14 	add.w	lr, r5, #20
 8013d20:	f8d7 8000 	ldr.w	r8, [r7]
 8013d24:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d30:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d38:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8013db8 <rclc_executor_init+0xe8>
 8013d3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d40:	f8dc 3000 	ldr.w	r3, [ip]
 8013d44:	01b0      	lsls	r0, r6, #6
 8013d46:	6939      	ldr	r1, [r7, #16]
 8013d48:	f8ce 3000 	str.w	r3, [lr]
 8013d4c:	612f      	str	r7, [r5, #16]
 8013d4e:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8013d52:	47c0      	blx	r8
 8013d54:	6068      	str	r0, [r5, #4]
 8013d56:	b908      	cbnz	r0, 8013d5c <rclc_executor_init+0x8c>
 8013d58:	e029      	b.n	8013dae <rclc_executor_init+0xde>
 8013d5a:	6868      	ldr	r0, [r5, #4]
 8013d5c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8013d60:	3401      	adds	r4, #1
 8013d62:	4631      	mov	r1, r6
 8013d64:	f000 fac0 	bl	80142e8 <rclc_executor_handle_init>
 8013d68:	42a6      	cmp	r6, r4
 8013d6a:	d8f6      	bhi.n	8013d5a <rclc_executor_init+0x8a>
 8013d6c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8013d70:	f000 faae 	bl	80142d0 <rclc_executor_handle_counters_zero_init>
 8013d74:	4a13      	ldr	r2, [pc, #76]	@ (8013dc4 <rclc_executor_init+0xf4>)
 8013d76:	2300      	movs	r3, #0
 8013d78:	6868      	ldr	r0, [r5, #4]
 8013d7a:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 8013d7e:	b168      	cbz	r0, 8013d9c <rclc_executor_init+0xcc>
 8013d80:	68ab      	ldr	r3, [r5, #8]
 8013d82:	b173      	cbz	r3, 8013da2 <rclc_executor_init+0xd2>
 8013d84:	692a      	ldr	r2, [r5, #16]
 8013d86:	fab2 f382 	clz	r3, r2
 8013d8a:	095b      	lsrs	r3, r3, #5
 8013d8c:	b14a      	cbz	r2, 8013da2 <rclc_executor_init+0xd2>
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 8013d94:	b030      	add	sp, #192	@ 0xc0
 8013d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d9a:	200b      	movs	r0, #11
 8013d9c:	b030      	add	sp, #192	@ 0xc0
 8013d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013da2:	2000      	movs	r0, #0
 8013da4:	b030      	add	sp, #192	@ 0xc0
 8013da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013daa:	200b      	movs	r0, #11
 8013dac:	4770      	bx	lr
 8013dae:	200a      	movs	r0, #10
 8013db0:	e7f4      	b.n	8013d9c <rclc_executor_init+0xcc>
 8013db2:	bf00      	nop
 8013db4:	f3af 8000 	nop.w
 8013db8:	3b9aca00 	.word	0x3b9aca00
 8013dbc:	00000000 	.word	0x00000000
 8013dc0:	08022c80 	.word	0x08022c80
 8013dc4:	08013c35 	.word	0x08013c35

08013dc8 <rclc_executor_add_subscription>:
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	bf18      	it	ne
 8013dcc:	2a00      	cmpne	r2, #0
 8013dce:	b570      	push	{r4, r5, r6, lr}
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	bf0c      	ite	eq
 8013dd4:	2001      	moveq	r0, #1
 8013dd6:	2000      	movne	r0, #0
 8013dd8:	f89d c010 	ldrb.w	ip, [sp, #16]
 8013ddc:	2900      	cmp	r1, #0
 8013dde:	bf08      	it	eq
 8013de0:	f040 0001 	orreq.w	r0, r0, #1
 8013de4:	bb28      	cbnz	r0, 8013e32 <rclc_executor_add_subscription+0x6a>
 8013de6:	fab4 f584 	clz	r5, r4
 8013dea:	096d      	lsrs	r5, r5, #5
 8013dec:	b30c      	cbz	r4, 8013e32 <rclc_executor_add_subscription+0x6a>
 8013dee:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8013df2:	4286      	cmp	r6, r0
 8013df4:	d301      	bcc.n	8013dfa <rclc_executor_add_subscription+0x32>
 8013df6:	2001      	movs	r0, #1
 8013df8:	bd70      	pop	{r4, r5, r6, pc}
 8013dfa:	6860      	ldr	r0, [r4, #4]
 8013dfc:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8013e00:	f800 500e 	strb.w	r5, [r0, lr]
 8013e04:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8013e08:	3601      	adds	r6, #1
 8013e0a:	6303      	str	r3, [r0, #48]	@ 0x30
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8013e10:	f104 0514 	add.w	r5, r4, #20
 8013e14:	f880 c001 	strb.w	ip, [r0, #1]
 8013e18:	8703      	strh	r3, [r0, #56]	@ 0x38
 8013e1a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8013e1e:	4628      	mov	r0, r5
 8013e20:	60e6      	str	r6, [r4, #12]
 8013e22:	f002 fe61 	bl	8016ae8 <rcl_wait_set_is_valid>
 8013e26:	b930      	cbnz	r0, 8013e36 <rclc_executor_add_subscription+0x6e>
 8013e28:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8013e2a:	2000      	movs	r0, #0
 8013e2c:	3301      	adds	r3, #1
 8013e2e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013e30:	bd70      	pop	{r4, r5, r6, pc}
 8013e32:	200b      	movs	r0, #11
 8013e34:	bd70      	pop	{r4, r5, r6, pc}
 8013e36:	4628      	mov	r0, r5
 8013e38:	f002 fe5c 	bl	8016af4 <rcl_wait_set_fini>
 8013e3c:	2800      	cmp	r0, #0
 8013e3e:	d0f3      	beq.n	8013e28 <rclc_executor_add_subscription+0x60>
 8013e40:	bd70      	pop	{r4, r5, r6, pc}
 8013e42:	bf00      	nop

08013e44 <rclc_executor_add_service>:
 8013e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e46:	9d06      	ldr	r5, [sp, #24]
 8013e48:	4604      	mov	r4, r0
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	bf18      	it	ne
 8013e4e:	2d00      	cmpne	r5, #0
 8013e50:	bf0c      	ite	eq
 8013e52:	2001      	moveq	r0, #1
 8013e54:	2000      	movne	r0, #0
 8013e56:	2a00      	cmp	r2, #0
 8013e58:	bf08      	it	eq
 8013e5a:	f040 0001 	orreq.w	r0, r0, #1
 8013e5e:	2900      	cmp	r1, #0
 8013e60:	bf08      	it	eq
 8013e62:	f040 0001 	orreq.w	r0, r0, #1
 8013e66:	bb40      	cbnz	r0, 8013eba <rclc_executor_add_service+0x76>
 8013e68:	fab4 f684 	clz	r6, r4
 8013e6c:	0976      	lsrs	r6, r6, #5
 8013e6e:	b324      	cbz	r4, 8013eba <rclc_executor_add_service+0x76>
 8013e70:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8013e74:	42b8      	cmp	r0, r7
 8013e76:	d301      	bcc.n	8013e7c <rclc_executor_add_service+0x38>
 8013e78:	2001      	movs	r0, #1
 8013e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e7c:	6867      	ldr	r7, [r4, #4]
 8013e7e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8013e82:	f100 0c01 	add.w	ip, r0, #1
 8013e86:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 8013e8a:	6283      	str	r3, [r0, #40]	@ 0x28
 8013e8c:	2305      	movs	r3, #5
 8013e8e:	6305      	str	r5, [r0, #48]	@ 0x30
 8013e90:	f104 0514 	add.w	r5, r4, #20
 8013e94:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8013e98:	f827 300e 	strh.w	r3, [r7, lr]
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	62c6      	str	r6, [r0, #44]	@ 0x2c
 8013ea0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8013ea4:	4628      	mov	r0, r5
 8013ea6:	f8c4 c00c 	str.w	ip, [r4, #12]
 8013eaa:	f002 fe1d 	bl	8016ae8 <rcl_wait_set_is_valid>
 8013eae:	b930      	cbnz	r0, 8013ebe <rclc_executor_add_service+0x7a>
 8013eb0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8013eb2:	2000      	movs	r0, #0
 8013eb4:	3301      	adds	r3, #1
 8013eb6:	6563      	str	r3, [r4, #84]	@ 0x54
 8013eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013eba:	200b      	movs	r0, #11
 8013ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ebe:	4628      	mov	r0, r5
 8013ec0:	f002 fe18 	bl	8016af4 <rcl_wait_set_fini>
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	d0f3      	beq.n	8013eb0 <rclc_executor_add_service+0x6c>
 8013ec8:	e7d7      	b.n	8013e7a <rclc_executor_add_service+0x36>
 8013eca:	bf00      	nop

08013ecc <rclc_executor_prepare>:
 8013ecc:	2800      	cmp	r0, #0
 8013ece:	d044      	beq.n	8013f5a <rclc_executor_prepare+0x8e>
 8013ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ed2:	f100 0514 	add.w	r5, r0, #20
 8013ed6:	b09b      	sub	sp, #108	@ 0x6c
 8013ed8:	4604      	mov	r4, r0
 8013eda:	4628      	mov	r0, r5
 8013edc:	f002 fe04 	bl	8016ae8 <rcl_wait_set_is_valid>
 8013ee0:	b110      	cbz	r0, 8013ee8 <rclc_executor_prepare+0x1c>
 8013ee2:	2000      	movs	r0, #0
 8013ee4:	b01b      	add	sp, #108	@ 0x6c
 8013ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ee8:	4628      	mov	r0, r5
 8013eea:	f002 fe03 	bl	8016af4 <rcl_wait_set_fini>
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	d130      	bne.n	8013f54 <rclc_executor_prepare+0x88>
 8013ef2:	a80c      	add	r0, sp, #48	@ 0x30
 8013ef4:	ae04      	add	r6, sp, #16
 8013ef6:	f002 fde3 	bl	8016ac0 <rcl_get_zero_initialized_wait_set>
 8013efa:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8013efe:	46ae      	mov	lr, r5
 8013f00:	6927      	ldr	r7, [r4, #16]
 8013f02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f1a:	f8dc 3000 	ldr.w	r3, [ip]
 8013f1e:	f8ce 3000 	str.w	r3, [lr]
 8013f22:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013f24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	4628      	mov	r0, r5
 8013f2a:	6822      	ldr	r2, [r4, #0]
 8013f2c:	6033      	str	r3, [r6, #0]
 8013f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013f30:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8013f32:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013f36:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8013f3a:	e9cd 2100 	strd	r2, r1, [sp]
 8013f3e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8013f40:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013f42:	f003 f8d7 	bl	80170f4 <rcl_wait_set_init>
 8013f46:	2800      	cmp	r0, #0
 8013f48:	d0cc      	beq.n	8013ee4 <rclc_executor_prepare+0x18>
 8013f4a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013f4c:	f000 fb84 	bl	8014658 <rcutils_reset_error>
 8013f50:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013f52:	e7c7      	b.n	8013ee4 <rclc_executor_prepare+0x18>
 8013f54:	f000 fb80 	bl	8014658 <rcutils_reset_error>
 8013f58:	e7cb      	b.n	8013ef2 <rclc_executor_prepare+0x26>
 8013f5a:	200b      	movs	r0, #11
 8013f5c:	4770      	bx	lr
 8013f5e:	bf00      	nop

08013f60 <rclc_executor_spin_some.part.0>:
 8013f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f64:	4605      	mov	r5, r0
 8013f66:	4691      	mov	r9, r2
 8013f68:	4698      	mov	r8, r3
 8013f6a:	f7ff ffaf 	bl	8013ecc <rclc_executor_prepare>
 8013f6e:	f105 0614 	add.w	r6, r5, #20
 8013f72:	4630      	mov	r0, r6
 8013f74:	f002 fe8a 	bl	8016c8c <rcl_wait_set_clear>
 8013f78:	4607      	mov	r7, r0
 8013f7a:	2800      	cmp	r0, #0
 8013f7c:	f040 80a8 	bne.w	80140d0 <rclc_executor_spin_some.part.0+0x170>
 8013f80:	68ab      	ldr	r3, [r5, #8]
 8013f82:	b30b      	cbz	r3, 8013fc8 <rclc_executor_spin_some.part.0+0x68>
 8013f84:	4604      	mov	r4, r0
 8013f86:	6869      	ldr	r1, [r5, #4]
 8013f88:	01a2      	lsls	r2, r4, #6
 8013f8a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8013f8e:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8013f92:	b1cb      	cbz	r3, 8013fc8 <rclc_executor_spin_some.part.0+0x68>
 8013f94:	5c8b      	ldrb	r3, [r1, r2]
 8013f96:	2b0a      	cmp	r3, #10
 8013f98:	f200 80de 	bhi.w	8014158 <rclc_executor_spin_some.part.0+0x1f8>
 8013f9c:	e8df f003 	tbb	[pc, r3]
 8013fa0:	8da99d9d 	.word	0x8da99d9d
 8013fa4:	0606068d 	.word	0x0606068d
 8013fa8:	c1ce      	.short	0xc1ce
 8013faa:	b5          	.byte	0xb5
 8013fab:	00          	.byte	0x00
 8013fac:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8013fb0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013fb4:	4630      	mov	r0, r6
 8013fb6:	f003 f9b9 	bl	801732c <rcl_wait_set_add_service>
 8013fba:	2800      	cmp	r0, #0
 8013fbc:	f040 8087 	bne.w	80140ce <rclc_executor_spin_some.part.0+0x16e>
 8013fc0:	3401      	adds	r4, #1
 8013fc2:	68ab      	ldr	r3, [r5, #8]
 8013fc4:	429c      	cmp	r4, r3
 8013fc6:	d3de      	bcc.n	8013f86 <rclc_executor_spin_some.part.0+0x26>
 8013fc8:	4643      	mov	r3, r8
 8013fca:	464a      	mov	r2, r9
 8013fcc:	4630      	mov	r0, r6
 8013fce:	f003 f9db 	bl	8017388 <rcl_wait>
 8013fd2:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	f000 80c6 	beq.w	8014168 <rclc_executor_spin_some.part.0+0x208>
 8013fdc:	2b01      	cmp	r3, #1
 8013fde:	f040 80bb 	bne.w	8014158 <rclc_executor_spin_some.part.0+0x1f8>
 8013fe2:	68ab      	ldr	r3, [r5, #8]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	f000 8159 	beq.w	801429c <rclc_executor_spin_some.part.0+0x33c>
 8013fea:	2400      	movs	r4, #0
 8013fec:	f240 1991 	movw	r9, #401	@ 0x191
 8013ff0:	46a0      	mov	r8, r4
 8013ff2:	e00a      	b.n	801400a <rclc_executor_spin_some.part.0+0xaa>
 8013ff4:	f7ff fb1a 	bl	801362c <_rclc_check_for_new_data>
 8013ff8:	4604      	mov	r4, r0
 8013ffa:	b110      	cbz	r0, 8014002 <rclc_executor_spin_some.part.0+0xa2>
 8013ffc:	4548      	cmp	r0, r9
 8013ffe:	f040 80b1 	bne.w	8014164 <rclc_executor_spin_some.part.0+0x204>
 8014002:	68ab      	ldr	r3, [r5, #8]
 8014004:	4598      	cmp	r8, r3
 8014006:	f080 8126 	bcs.w	8014256 <rclc_executor_spin_some.part.0+0x2f6>
 801400a:	686a      	ldr	r2, [r5, #4]
 801400c:	4631      	mov	r1, r6
 801400e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014012:	f108 0801 	add.w	r8, r8, #1
 8014016:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801401a:	f1bc 0f00 	cmp.w	ip, #0
 801401e:	d1e9      	bne.n	8013ff4 <rclc_executor_spin_some.part.0+0x94>
 8014020:	4619      	mov	r1, r3
 8014022:	4610      	mov	r0, r2
 8014024:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8014028:	4798      	blx	r3
 801402a:	2800      	cmp	r0, #0
 801402c:	f000 809a 	beq.w	8014164 <rclc_executor_spin_some.part.0+0x204>
 8014030:	68ab      	ldr	r3, [r5, #8]
 8014032:	2b00      	cmp	r3, #0
 8014034:	f000 8096 	beq.w	8014164 <rclc_executor_spin_some.part.0+0x204>
 8014038:	f04f 0800 	mov.w	r8, #0
 801403c:	f240 1991 	movw	r9, #401	@ 0x191
 8014040:	e009      	b.n	8014056 <rclc_executor_spin_some.part.0+0xf6>
 8014042:	f7ff fb41 	bl	80136c8 <_rclc_take_new_data>
 8014046:	4604      	mov	r4, r0
 8014048:	b110      	cbz	r0, 8014050 <rclc_executor_spin_some.part.0+0xf0>
 801404a:	4548      	cmp	r0, r9
 801404c:	f040 808a 	bne.w	8014164 <rclc_executor_spin_some.part.0+0x204>
 8014050:	68ab      	ldr	r3, [r5, #8]
 8014052:	4598      	cmp	r8, r3
 8014054:	d209      	bcs.n	801406a <rclc_executor_spin_some.part.0+0x10a>
 8014056:	6868      	ldr	r0, [r5, #4]
 8014058:	4631      	mov	r1, r6
 801405a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 801405e:	f108 0801 	add.w	r8, r8, #1
 8014062:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8014066:	2a00      	cmp	r2, #0
 8014068:	d1eb      	bne.n	8014042 <rclc_executor_spin_some.part.0+0xe2>
 801406a:	2b00      	cmp	r3, #0
 801406c:	d07a      	beq.n	8014164 <rclc_executor_spin_some.part.0+0x204>
 801406e:	2600      	movs	r6, #0
 8014070:	e00e      	b.n	8014090 <rclc_executor_spin_some.part.0+0x130>
 8014072:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014076:	2a08      	cmp	r2, #8
 8014078:	f000 80fc 	beq.w	8014274 <rclc_executor_spin_some.part.0+0x314>
 801407c:	2a09      	cmp	r2, #9
 801407e:	f000 80ee 	beq.w	801425e <rclc_executor_spin_some.part.0+0x2fe>
 8014082:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8014086:	b98a      	cbnz	r2, 80140ac <rclc_executor_spin_some.part.0+0x14c>
 8014088:	3601      	adds	r6, #1
 801408a:	429e      	cmp	r6, r3
 801408c:	d267      	bcs.n	801415e <rclc_executor_spin_some.part.0+0x1fe>
 801408e:	2400      	movs	r4, #0
 8014090:	686a      	ldr	r2, [r5, #4]
 8014092:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014096:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801409a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 801409e:	2900      	cmp	r1, #0
 80140a0:	d060      	beq.n	8014164 <rclc_executor_spin_some.part.0+0x204>
 80140a2:	7841      	ldrb	r1, [r0, #1]
 80140a4:	2900      	cmp	r1, #0
 80140a6:	d0e4      	beq.n	8014072 <rclc_executor_spin_some.part.0+0x112>
 80140a8:	2901      	cmp	r1, #1
 80140aa:	d1ed      	bne.n	8014088 <rclc_executor_spin_some.part.0+0x128>
 80140ac:	f7ff fc80 	bl	80139b0 <_rclc_execute.part.0>
 80140b0:	2800      	cmp	r0, #0
 80140b2:	f040 80b5 	bne.w	8014220 <rclc_executor_spin_some.part.0+0x2c0>
 80140b6:	68ab      	ldr	r3, [r5, #8]
 80140b8:	e7e6      	b.n	8014088 <rclc_executor_spin_some.part.0+0x128>
 80140ba:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80140be:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80140c2:	4630      	mov	r0, r6
 80140c4:	f003 f906 	bl	80172d4 <rcl_wait_set_add_client>
 80140c8:	2800      	cmp	r0, #0
 80140ca:	f43f af79 	beq.w	8013fc0 <rclc_executor_spin_some.part.0+0x60>
 80140ce:	4607      	mov	r7, r0
 80140d0:	f000 fac2 	bl	8014658 <rcutils_reset_error>
 80140d4:	4638      	mov	r0, r7
 80140d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140da:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80140de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80140e2:	4630      	mov	r0, r6
 80140e4:	f002 fda6 	bl	8016c34 <rcl_wait_set_add_subscription>
 80140e8:	2800      	cmp	r0, #0
 80140ea:	f43f af69 	beq.w	8013fc0 <rclc_executor_spin_some.part.0+0x60>
 80140ee:	4607      	mov	r7, r0
 80140f0:	e7ee      	b.n	80140d0 <rclc_executor_spin_some.part.0+0x170>
 80140f2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80140f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80140fa:	4630      	mov	r0, r6
 80140fc:	f003 f8ba 	bl	8017274 <rcl_wait_set_add_timer>
 8014100:	2800      	cmp	r0, #0
 8014102:	f43f af5d 	beq.w	8013fc0 <rclc_executor_spin_some.part.0+0x60>
 8014106:	4607      	mov	r7, r0
 8014108:	e7e2      	b.n	80140d0 <rclc_executor_spin_some.part.0+0x170>
 801410a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801410e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014112:	4630      	mov	r0, r6
 8014114:	f003 f882 	bl	801721c <rcl_wait_set_add_guard_condition>
 8014118:	2800      	cmp	r0, #0
 801411a:	f43f af51 	beq.w	8013fc0 <rclc_executor_spin_some.part.0+0x60>
 801411e:	4607      	mov	r7, r0
 8014120:	e7d6      	b.n	80140d0 <rclc_executor_spin_some.part.0+0x170>
 8014122:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014126:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801412a:	4630      	mov	r0, r6
 801412c:	3110      	adds	r1, #16
 801412e:	f003 fe01 	bl	8017d34 <rcl_action_wait_set_add_action_server>
 8014132:	2800      	cmp	r0, #0
 8014134:	f43f af44 	beq.w	8013fc0 <rclc_executor_spin_some.part.0+0x60>
 8014138:	4607      	mov	r7, r0
 801413a:	e7c9      	b.n	80140d0 <rclc_executor_spin_some.part.0+0x170>
 801413c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014140:	2300      	movs	r3, #0
 8014142:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014146:	4630      	mov	r0, r6
 8014148:	3110      	adds	r1, #16
 801414a:	f003 fbc9 	bl	80178e0 <rcl_action_wait_set_add_action_client>
 801414e:	2800      	cmp	r0, #0
 8014150:	f43f af36 	beq.w	8013fc0 <rclc_executor_spin_some.part.0+0x60>
 8014154:	4607      	mov	r7, r0
 8014156:	e7bb      	b.n	80140d0 <rclc_executor_spin_some.part.0+0x170>
 8014158:	2701      	movs	r7, #1
 801415a:	f000 fa7d 	bl	8014658 <rcutils_reset_error>
 801415e:	4638      	mov	r0, r7
 8014160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014164:	4627      	mov	r7, r4
 8014166:	e7fa      	b.n	801415e <rclc_executor_spin_some.part.0+0x1fe>
 8014168:	68ab      	ldr	r3, [r5, #8]
 801416a:	2b00      	cmp	r3, #0
 801416c:	f000 8093 	beq.w	8014296 <rclc_executor_spin_some.part.0+0x336>
 8014170:	2400      	movs	r4, #0
 8014172:	f240 1991 	movw	r9, #401	@ 0x191
 8014176:	46a0      	mov	r8, r4
 8014178:	e008      	b.n	801418c <rclc_executor_spin_some.part.0+0x22c>
 801417a:	f7ff fa57 	bl	801362c <_rclc_check_for_new_data>
 801417e:	4604      	mov	r4, r0
 8014180:	b108      	cbz	r0, 8014186 <rclc_executor_spin_some.part.0+0x226>
 8014182:	4548      	cmp	r0, r9
 8014184:	d1ee      	bne.n	8014164 <rclc_executor_spin_some.part.0+0x204>
 8014186:	68ab      	ldr	r3, [r5, #8]
 8014188:	4598      	cmp	r8, r3
 801418a:	d266      	bcs.n	801425a <rclc_executor_spin_some.part.0+0x2fa>
 801418c:	686a      	ldr	r2, [r5, #4]
 801418e:	4631      	mov	r1, r6
 8014190:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014194:	f108 0801 	add.w	r8, r8, #1
 8014198:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801419c:	f1bc 0f00 	cmp.w	ip, #0
 80141a0:	d1eb      	bne.n	801417a <rclc_executor_spin_some.part.0+0x21a>
 80141a2:	4619      	mov	r1, r3
 80141a4:	4610      	mov	r0, r2
 80141a6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80141aa:	4798      	blx	r3
 80141ac:	2800      	cmp	r0, #0
 80141ae:	d0d9      	beq.n	8014164 <rclc_executor_spin_some.part.0+0x204>
 80141b0:	68ab      	ldr	r3, [r5, #8]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d0d6      	beq.n	8014164 <rclc_executor_spin_some.part.0+0x204>
 80141b6:	f04f 0a00 	mov.w	sl, #0
 80141ba:	f240 1891 	movw	r8, #401	@ 0x191
 80141be:	f240 2959 	movw	r9, #601	@ 0x259
 80141c2:	e00e      	b.n	80141e2 <rclc_executor_spin_some.part.0+0x282>
 80141c4:	f813 300b 	ldrb.w	r3, [r3, fp]
 80141c8:	2b08      	cmp	r3, #8
 80141ca:	d034      	beq.n	8014236 <rclc_executor_spin_some.part.0+0x2d6>
 80141cc:	2b09      	cmp	r3, #9
 80141ce:	d029      	beq.n	8014224 <rclc_executor_spin_some.part.0+0x2c4>
 80141d0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80141d4:	bb03      	cbnz	r3, 8014218 <rclc_executor_spin_some.part.0+0x2b8>
 80141d6:	f10a 0a01 	add.w	sl, sl, #1
 80141da:	68ab      	ldr	r3, [r5, #8]
 80141dc:	459a      	cmp	sl, r3
 80141de:	d2be      	bcs.n	801415e <rclc_executor_spin_some.part.0+0x1fe>
 80141e0:	2400      	movs	r4, #0
 80141e2:	6868      	ldr	r0, [r5, #4]
 80141e4:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 80141e8:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 80141ec:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d0b7      	beq.n	8014164 <rclc_executor_spin_some.part.0+0x204>
 80141f4:	4631      	mov	r1, r6
 80141f6:	f7ff fa67 	bl	80136c8 <_rclc_take_new_data>
 80141fa:	2800      	cmp	r0, #0
 80141fc:	bf18      	it	ne
 80141fe:	4540      	cmpne	r0, r8
 8014200:	d001      	beq.n	8014206 <rclc_executor_spin_some.part.0+0x2a6>
 8014202:	4548      	cmp	r0, r9
 8014204:	d10c      	bne.n	8014220 <rclc_executor_spin_some.part.0+0x2c0>
 8014206:	686b      	ldr	r3, [r5, #4]
 8014208:	eb13 000b 	adds.w	r0, r3, fp
 801420c:	d021      	beq.n	8014252 <rclc_executor_spin_some.part.0+0x2f2>
 801420e:	7842      	ldrb	r2, [r0, #1]
 8014210:	2a00      	cmp	r2, #0
 8014212:	d0d7      	beq.n	80141c4 <rclc_executor_spin_some.part.0+0x264>
 8014214:	2a01      	cmp	r2, #1
 8014216:	d1de      	bne.n	80141d6 <rclc_executor_spin_some.part.0+0x276>
 8014218:	f7ff fbca 	bl	80139b0 <_rclc_execute.part.0>
 801421c:	2800      	cmp	r0, #0
 801421e:	d0da      	beq.n	80141d6 <rclc_executor_spin_some.part.0+0x276>
 8014220:	4607      	mov	r7, r0
 8014222:	e79c      	b.n	801415e <rclc_executor_spin_some.part.0+0x1fe>
 8014224:	6843      	ldr	r3, [r0, #4]
 8014226:	6a1a      	ldr	r2, [r3, #32]
 8014228:	2a00      	cmp	r2, #0
 801422a:	d1f5      	bne.n	8014218 <rclc_executor_spin_some.part.0+0x2b8>
 801422c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8014230:	2b00      	cmp	r3, #0
 8014232:	d0d0      	beq.n	80141d6 <rclc_executor_spin_some.part.0+0x276>
 8014234:	e7f0      	b.n	8014218 <rclc_executor_spin_some.part.0+0x2b8>
 8014236:	6843      	ldr	r3, [r0, #4]
 8014238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801423a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801423e:	d1eb      	bne.n	8014218 <rclc_executor_spin_some.part.0+0x2b8>
 8014240:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8014244:	2a00      	cmp	r2, #0
 8014246:	d1e7      	bne.n	8014218 <rclc_executor_spin_some.part.0+0x2b8>
 8014248:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801424c:	2b00      	cmp	r3, #0
 801424e:	d0c2      	beq.n	80141d6 <rclc_executor_spin_some.part.0+0x276>
 8014250:	e7e2      	b.n	8014218 <rclc_executor_spin_some.part.0+0x2b8>
 8014252:	270b      	movs	r7, #11
 8014254:	e783      	b.n	801415e <rclc_executor_spin_some.part.0+0x1fe>
 8014256:	686a      	ldr	r2, [r5, #4]
 8014258:	e6e2      	b.n	8014020 <rclc_executor_spin_some.part.0+0xc0>
 801425a:	686a      	ldr	r2, [r5, #4]
 801425c:	e7a1      	b.n	80141a2 <rclc_executor_spin_some.part.0+0x242>
 801425e:	6842      	ldr	r2, [r0, #4]
 8014260:	6a11      	ldr	r1, [r2, #32]
 8014262:	2900      	cmp	r1, #0
 8014264:	f47f af22 	bne.w	80140ac <rclc_executor_spin_some.part.0+0x14c>
 8014268:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 801426c:	2a00      	cmp	r2, #0
 801426e:	f43f af0b 	beq.w	8014088 <rclc_executor_spin_some.part.0+0x128>
 8014272:	e71b      	b.n	80140ac <rclc_executor_spin_some.part.0+0x14c>
 8014274:	6842      	ldr	r2, [r0, #4]
 8014276:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8014278:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 801427c:	f47f af16 	bne.w	80140ac <rclc_executor_spin_some.part.0+0x14c>
 8014280:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8014284:	2900      	cmp	r1, #0
 8014286:	f47f af11 	bne.w	80140ac <rclc_executor_spin_some.part.0+0x14c>
 801428a:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 801428e:	2a00      	cmp	r2, #0
 8014290:	f43f aefa 	beq.w	8014088 <rclc_executor_spin_some.part.0+0x128>
 8014294:	e70a      	b.n	80140ac <rclc_executor_spin_some.part.0+0x14c>
 8014296:	686a      	ldr	r2, [r5, #4]
 8014298:	461c      	mov	r4, r3
 801429a:	e782      	b.n	80141a2 <rclc_executor_spin_some.part.0+0x242>
 801429c:	686a      	ldr	r2, [r5, #4]
 801429e:	461c      	mov	r4, r3
 80142a0:	e6be      	b.n	8014020 <rclc_executor_spin_some.part.0+0xc0>
 80142a2:	bf00      	nop

080142a4 <rclc_executor_spin_some>:
 80142a4:	b190      	cbz	r0, 80142cc <rclc_executor_spin_some+0x28>
 80142a6:	b570      	push	{r4, r5, r6, lr}
 80142a8:	4604      	mov	r4, r0
 80142aa:	6800      	ldr	r0, [r0, #0]
 80142ac:	4616      	mov	r6, r2
 80142ae:	461d      	mov	r5, r3
 80142b0:	f001 f87a 	bl	80153a8 <rcl_context_is_valid>
 80142b4:	b130      	cbz	r0, 80142c4 <rclc_executor_spin_some+0x20>
 80142b6:	4632      	mov	r2, r6
 80142b8:	462b      	mov	r3, r5
 80142ba:	4620      	mov	r0, r4
 80142bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142c0:	f7ff be4e 	b.w	8013f60 <rclc_executor_spin_some.part.0>
 80142c4:	f000 f9c8 	bl	8014658 <rcutils_reset_error>
 80142c8:	2001      	movs	r0, #1
 80142ca:	bd70      	pop	{r4, r5, r6, pc}
 80142cc:	200b      	movs	r0, #11
 80142ce:	4770      	bx	lr

080142d0 <rclc_executor_handle_counters_zero_init>:
 80142d0:	b130      	cbz	r0, 80142e0 <rclc_executor_handle_counters_zero_init+0x10>
 80142d2:	2220      	movs	r2, #32
 80142d4:	2100      	movs	r1, #0
 80142d6:	b508      	push	{r3, lr}
 80142d8:	f00c fadc 	bl	8020894 <memset>
 80142dc:	2000      	movs	r0, #0
 80142de:	bd08      	pop	{r3, pc}
 80142e0:	200b      	movs	r0, #11
 80142e2:	4770      	bx	lr
 80142e4:	0000      	movs	r0, r0
	...

080142e8 <rclc_executor_handle_init>:
 80142e8:	4603      	mov	r3, r0
 80142ea:	b178      	cbz	r0, 801430c <rclc_executor_handle_init+0x24>
 80142ec:	2200      	movs	r2, #0
 80142ee:	f04f 0c0b 	mov.w	ip, #11
 80142f2:	6341      	str	r1, [r0, #52]	@ 0x34
 80142f4:	4610      	mov	r0, r2
 80142f6:	f8a3 c000 	strh.w	ip, [r3]
 80142fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80142fc:	871a      	strh	r2, [r3, #56]	@ 0x38
 80142fe:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8014310 <rclc_executor_handle_init+0x28>
 8014302:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8014306:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 801430a:	4770      	bx	lr
 801430c:	200b      	movs	r0, #11
 801430e:	4770      	bx	lr
	...

08014318 <rclc_support_init>:
 8014318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801431c:	b086      	sub	sp, #24
 801431e:	b3bb      	cbz	r3, 8014390 <rclc_support_init+0x78>
 8014320:	4606      	mov	r6, r0
 8014322:	b3a8      	cbz	r0, 8014390 <rclc_support_init+0x78>
 8014324:	461c      	mov	r4, r3
 8014326:	460f      	mov	r7, r1
 8014328:	4690      	mov	r8, r2
 801432a:	f001 f9a9 	bl	8015680 <rcl_get_zero_initialized_init_options>
 801432e:	f104 050c 	add.w	r5, r4, #12
 8014332:	9005      	str	r0, [sp, #20]
 8014334:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014338:	e88d 0003 	stmia.w	sp, {r0, r1}
 801433c:	a805      	add	r0, sp, #20
 801433e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014342:	f001 f99f 	bl	8015684 <rcl_init_options_init>
 8014346:	4605      	mov	r5, r0
 8014348:	b9e0      	cbnz	r0, 8014384 <rclc_support_init+0x6c>
 801434a:	ad02      	add	r5, sp, #8
 801434c:	4628      	mov	r0, r5
 801434e:	f001 f821 	bl	8015394 <rcl_get_zero_initialized_context>
 8014352:	4633      	mov	r3, r6
 8014354:	aa05      	add	r2, sp, #20
 8014356:	e895 0003 	ldmia.w	r5, {r0, r1}
 801435a:	e886 0003 	stmia.w	r6, {r0, r1}
 801435e:	4641      	mov	r1, r8
 8014360:	4638      	mov	r0, r7
 8014362:	f001 f887 	bl	8015474 <rcl_init>
 8014366:	4605      	mov	r5, r0
 8014368:	b9b8      	cbnz	r0, 801439a <rclc_support_init+0x82>
 801436a:	4622      	mov	r2, r4
 801436c:	f106 010c 	add.w	r1, r6, #12
 8014370:	2003      	movs	r0, #3
 8014372:	60b4      	str	r4, [r6, #8]
 8014374:	f002 f99a 	bl	80166ac <rcl_clock_init>
 8014378:	4605      	mov	r5, r0
 801437a:	b970      	cbnz	r0, 801439a <rclc_support_init+0x82>
 801437c:	a805      	add	r0, sp, #20
 801437e:	f001 f9e7 	bl	8015750 <rcl_init_options_fini>
 8014382:	b108      	cbz	r0, 8014388 <rclc_support_init+0x70>
 8014384:	f000 f968 	bl	8014658 <rcutils_reset_error>
 8014388:	4628      	mov	r0, r5
 801438a:	b006      	add	sp, #24
 801438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014390:	250b      	movs	r5, #11
 8014392:	4628      	mov	r0, r5
 8014394:	b006      	add	sp, #24
 8014396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801439a:	f000 f95d 	bl	8014658 <rcutils_reset_error>
 801439e:	a805      	add	r0, sp, #20
 80143a0:	f001 f9d6 	bl	8015750 <rcl_init_options_fini>
 80143a4:	2800      	cmp	r0, #0
 80143a6:	d0ef      	beq.n	8014388 <rclc_support_init+0x70>
 80143a8:	e7ec      	b.n	8014384 <rclc_support_init+0x6c>
 80143aa:	bf00      	nop

080143ac <rclc_node_init_default>:
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	bf18      	it	ne
 80143b0:	2a00      	cmpne	r2, #0
 80143b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143b6:	4616      	mov	r6, r2
 80143b8:	bf0c      	ite	eq
 80143ba:	2201      	moveq	r2, #1
 80143bc:	2200      	movne	r2, #0
 80143be:	b0a1      	sub	sp, #132	@ 0x84
 80143c0:	2900      	cmp	r1, #0
 80143c2:	bf08      	it	eq
 80143c4:	f042 0201 	orreq.w	r2, r2, #1
 80143c8:	bb22      	cbnz	r2, 8014414 <rclc_node_init_default+0x68>
 80143ca:	4604      	mov	r4, r0
 80143cc:	b310      	cbz	r0, 8014414 <rclc_node_init_default+0x68>
 80143ce:	f10d 0810 	add.w	r8, sp, #16
 80143d2:	461f      	mov	r7, r3
 80143d4:	460d      	mov	r5, r1
 80143d6:	f10d 0918 	add.w	r9, sp, #24
 80143da:	4640      	mov	r0, r8
 80143dc:	f001 fa72 	bl	80158c4 <rcl_get_zero_initialized_node>
 80143e0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80143e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80143e8:	4648      	mov	r0, r9
 80143ea:	f001 fbe5 	bl	8015bb8 <rcl_node_get_default_options>
 80143ee:	4640      	mov	r0, r8
 80143f0:	f001 fa68 	bl	80158c4 <rcl_get_zero_initialized_node>
 80143f4:	f8cd 9000 	str.w	r9, [sp]
 80143f8:	463b      	mov	r3, r7
 80143fa:	4632      	mov	r2, r6
 80143fc:	e898 0003 	ldmia.w	r8, {r0, r1}
 8014400:	e884 0003 	stmia.w	r4, {r0, r1}
 8014404:	4629      	mov	r1, r5
 8014406:	4620      	mov	r0, r4
 8014408:	f001 fa66 	bl	80158d8 <rcl_node_init>
 801440c:	b930      	cbnz	r0, 801441c <rclc_node_init_default+0x70>
 801440e:	b021      	add	sp, #132	@ 0x84
 8014410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014414:	200b      	movs	r0, #11
 8014416:	b021      	add	sp, #132	@ 0x84
 8014418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801441c:	9003      	str	r0, [sp, #12]
 801441e:	f000 f91b 	bl	8014658 <rcutils_reset_error>
 8014422:	f000 f919 	bl	8014658 <rcutils_reset_error>
 8014426:	9803      	ldr	r0, [sp, #12]
 8014428:	b021      	add	sp, #132	@ 0x84
 801442a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801442e:	bf00      	nop

08014430 <rclc_publisher_init_default>:
 8014430:	2b00      	cmp	r3, #0
 8014432:	bf18      	it	ne
 8014434:	2a00      	cmpne	r2, #0
 8014436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801443a:	4616      	mov	r6, r2
 801443c:	bf0c      	ite	eq
 801443e:	2201      	moveq	r2, #1
 8014440:	2200      	movne	r2, #0
 8014442:	b0a0      	sub	sp, #128	@ 0x80
 8014444:	2900      	cmp	r1, #0
 8014446:	bf08      	it	eq
 8014448:	f042 0201 	orreq.w	r2, r2, #1
 801444c:	bb1a      	cbnz	r2, 8014496 <rclc_publisher_init_default+0x66>
 801444e:	4604      	mov	r4, r0
 8014450:	b308      	cbz	r0, 8014496 <rclc_publisher_init_default+0x66>
 8014452:	f10d 0810 	add.w	r8, sp, #16
 8014456:	461f      	mov	r7, r3
 8014458:	460d      	mov	r5, r1
 801445a:	f001 fcb3 	bl	8015dc4 <rcl_get_zero_initialized_publisher>
 801445e:	6020      	str	r0, [r4, #0]
 8014460:	4640      	mov	r0, r8
 8014462:	f001 fd4f 	bl	8015f04 <rcl_publisher_get_default_options>
 8014466:	2250      	movs	r2, #80	@ 0x50
 8014468:	490d      	ldr	r1, [pc, #52]	@ (80144a0 <rclc_publisher_init_default+0x70>)
 801446a:	4640      	mov	r0, r8
 801446c:	f00c fb31 	bl	8020ad2 <memcpy>
 8014470:	463b      	mov	r3, r7
 8014472:	4632      	mov	r2, r6
 8014474:	4629      	mov	r1, r5
 8014476:	4620      	mov	r0, r4
 8014478:	f8cd 8000 	str.w	r8, [sp]
 801447c:	f001 fca8 	bl	8015dd0 <rcl_publisher_init>
 8014480:	b910      	cbnz	r0, 8014488 <rclc_publisher_init_default+0x58>
 8014482:	b020      	add	sp, #128	@ 0x80
 8014484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014488:	9003      	str	r0, [sp, #12]
 801448a:	f000 f8e5 	bl	8014658 <rcutils_reset_error>
 801448e:	9803      	ldr	r0, [sp, #12]
 8014490:	b020      	add	sp, #128	@ 0x80
 8014492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014496:	200b      	movs	r0, #11
 8014498:	b020      	add	sp, #128	@ 0x80
 801449a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801449e:	bf00      	nop
 80144a0:	08022d08 	.word	0x08022d08

080144a4 <rclc_service_init_default>:
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	bf18      	it	ne
 80144a8:	2a00      	cmpne	r2, #0
 80144aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144ae:	4616      	mov	r6, r2
 80144b0:	bf0c      	ite	eq
 80144b2:	2201      	moveq	r2, #1
 80144b4:	2200      	movne	r2, #0
 80144b6:	b09e      	sub	sp, #120	@ 0x78
 80144b8:	2900      	cmp	r1, #0
 80144ba:	bf08      	it	eq
 80144bc:	f042 0201 	orreq.w	r2, r2, #1
 80144c0:	bb1a      	cbnz	r2, 801450a <rclc_service_init_default+0x66>
 80144c2:	4604      	mov	r4, r0
 80144c4:	b308      	cbz	r0, 801450a <rclc_service_init_default+0x66>
 80144c6:	f10d 0810 	add.w	r8, sp, #16
 80144ca:	461f      	mov	r7, r3
 80144cc:	460d      	mov	r5, r1
 80144ce:	f001 fe67 	bl	80161a0 <rcl_get_zero_initialized_service>
 80144d2:	6020      	str	r0, [r4, #0]
 80144d4:	4640      	mov	r0, r8
 80144d6:	f001 fefb 	bl	80162d0 <rcl_service_get_default_options>
 80144da:	2250      	movs	r2, #80	@ 0x50
 80144dc:	490d      	ldr	r1, [pc, #52]	@ (8014514 <rclc_service_init_default+0x70>)
 80144de:	4640      	mov	r0, r8
 80144e0:	f00c faf7 	bl	8020ad2 <memcpy>
 80144e4:	463b      	mov	r3, r7
 80144e6:	4632      	mov	r2, r6
 80144e8:	4629      	mov	r1, r5
 80144ea:	4620      	mov	r0, r4
 80144ec:	f8cd 8000 	str.w	r8, [sp]
 80144f0:	f001 fe5c 	bl	80161ac <rcl_service_init>
 80144f4:	b910      	cbnz	r0, 80144fc <rclc_service_init_default+0x58>
 80144f6:	b01e      	add	sp, #120	@ 0x78
 80144f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144fc:	9003      	str	r0, [sp, #12]
 80144fe:	f000 f8ab 	bl	8014658 <rcutils_reset_error>
 8014502:	9803      	ldr	r0, [sp, #12]
 8014504:	b01e      	add	sp, #120	@ 0x78
 8014506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801450a:	200b      	movs	r0, #11
 801450c:	b01e      	add	sp, #120	@ 0x78
 801450e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014512:	bf00      	nop
 8014514:	08022d58 	.word	0x08022d58

08014518 <rclc_subscription_init_default>:
 8014518:	2b00      	cmp	r3, #0
 801451a:	bf18      	it	ne
 801451c:	2a00      	cmpne	r2, #0
 801451e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014522:	4616      	mov	r6, r2
 8014524:	bf0c      	ite	eq
 8014526:	2201      	moveq	r2, #1
 8014528:	2200      	movne	r2, #0
 801452a:	b0a0      	sub	sp, #128	@ 0x80
 801452c:	2900      	cmp	r1, #0
 801452e:	bf08      	it	eq
 8014530:	f042 0201 	orreq.w	r2, r2, #1
 8014534:	bb1a      	cbnz	r2, 801457e <rclc_subscription_init_default+0x66>
 8014536:	4604      	mov	r4, r0
 8014538:	b308      	cbz	r0, 801457e <rclc_subscription_init_default+0x66>
 801453a:	f10d 0810 	add.w	r8, sp, #16
 801453e:	461f      	mov	r7, r3
 8014540:	460d      	mov	r5, r1
 8014542:	f001 ff51 	bl	80163e8 <rcl_get_zero_initialized_subscription>
 8014546:	6020      	str	r0, [r4, #0]
 8014548:	4640      	mov	r0, r8
 801454a:	f002 f801 	bl	8016550 <rcl_subscription_get_default_options>
 801454e:	2250      	movs	r2, #80	@ 0x50
 8014550:	490d      	ldr	r1, [pc, #52]	@ (8014588 <rclc_subscription_init_default+0x70>)
 8014552:	4640      	mov	r0, r8
 8014554:	f00c fabd 	bl	8020ad2 <memcpy>
 8014558:	463b      	mov	r3, r7
 801455a:	4632      	mov	r2, r6
 801455c:	4629      	mov	r1, r5
 801455e:	4620      	mov	r0, r4
 8014560:	f8cd 8000 	str.w	r8, [sp]
 8014564:	f001 ff46 	bl	80163f4 <rcl_subscription_init>
 8014568:	b910      	cbnz	r0, 8014570 <rclc_subscription_init_default+0x58>
 801456a:	b020      	add	sp, #128	@ 0x80
 801456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014570:	9003      	str	r0, [sp, #12]
 8014572:	f000 f871 	bl	8014658 <rcutils_reset_error>
 8014576:	9803      	ldr	r0, [sp, #12]
 8014578:	b020      	add	sp, #128	@ 0x80
 801457a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801457e:	200b      	movs	r0, #11
 8014580:	b020      	add	sp, #128	@ 0x80
 8014582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014586:	bf00      	nop
 8014588:	08022da8 	.word	0x08022da8

0801458c <__default_zero_allocate>:
 801458c:	f00b bcaa 	b.w	801fee4 <calloc>

08014590 <__default_reallocate>:
 8014590:	f00b be48 	b.w	8020224 <realloc>

08014594 <__default_deallocate>:
 8014594:	f00b bd24 	b.w	801ffe0 <free>

08014598 <__default_allocate>:
 8014598:	f00b bd1a 	b.w	801ffd0 <malloc>

0801459c <rcutils_get_zero_initialized_allocator>:
 801459c:	b510      	push	{r4, lr}
 801459e:	4c05      	ldr	r4, [pc, #20]	@ (80145b4 <rcutils_get_zero_initialized_allocator+0x18>)
 80145a0:	4686      	mov	lr, r0
 80145a2:	4684      	mov	ip, r0
 80145a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80145aa:	6823      	ldr	r3, [r4, #0]
 80145ac:	4670      	mov	r0, lr
 80145ae:	f8cc 3000 	str.w	r3, [ip]
 80145b2:	bd10      	pop	{r4, pc}
 80145b4:	08022df8 	.word	0x08022df8

080145b8 <rcutils_set_default_allocator>:
 80145b8:	b1a8      	cbz	r0, 80145e6 <rcutils_set_default_allocator+0x2e>
 80145ba:	6802      	ldr	r2, [r0, #0]
 80145bc:	b1a2      	cbz	r2, 80145e8 <rcutils_set_default_allocator+0x30>
 80145be:	6841      	ldr	r1, [r0, #4]
 80145c0:	b1a1      	cbz	r1, 80145ec <rcutils_set_default_allocator+0x34>
 80145c2:	b410      	push	{r4}
 80145c4:	68c4      	ldr	r4, [r0, #12]
 80145c6:	b164      	cbz	r4, 80145e2 <rcutils_set_default_allocator+0x2a>
 80145c8:	6880      	ldr	r0, [r0, #8]
 80145ca:	b138      	cbz	r0, 80145dc <rcutils_set_default_allocator+0x24>
 80145cc:	4b08      	ldr	r3, [pc, #32]	@ (80145f0 <rcutils_set_default_allocator+0x38>)
 80145ce:	601a      	str	r2, [r3, #0]
 80145d0:	2200      	movs	r2, #0
 80145d2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80145d6:	2001      	movs	r0, #1
 80145d8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80145dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145e0:	4770      	bx	lr
 80145e2:	4620      	mov	r0, r4
 80145e4:	e7fa      	b.n	80145dc <rcutils_set_default_allocator+0x24>
 80145e6:	4770      	bx	lr
 80145e8:	4610      	mov	r0, r2
 80145ea:	4770      	bx	lr
 80145ec:	4608      	mov	r0, r1
 80145ee:	4770      	bx	lr
 80145f0:	24000dfc 	.word	0x24000dfc

080145f4 <rcutils_get_default_allocator>:
 80145f4:	b510      	push	{r4, lr}
 80145f6:	4c05      	ldr	r4, [pc, #20]	@ (801460c <rcutils_get_default_allocator+0x18>)
 80145f8:	4686      	mov	lr, r0
 80145fa:	4684      	mov	ip, r0
 80145fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014602:	6823      	ldr	r3, [r4, #0]
 8014604:	4670      	mov	r0, lr
 8014606:	f8cc 3000 	str.w	r3, [ip]
 801460a:	bd10      	pop	{r4, pc}
 801460c:	24000dfc 	.word	0x24000dfc

08014610 <rcutils_allocator_is_valid>:
 8014610:	b158      	cbz	r0, 801462a <rcutils_allocator_is_valid+0x1a>
 8014612:	6803      	ldr	r3, [r0, #0]
 8014614:	b143      	cbz	r3, 8014628 <rcutils_allocator_is_valid+0x18>
 8014616:	6843      	ldr	r3, [r0, #4]
 8014618:	b133      	cbz	r3, 8014628 <rcutils_allocator_is_valid+0x18>
 801461a:	68c3      	ldr	r3, [r0, #12]
 801461c:	b123      	cbz	r3, 8014628 <rcutils_allocator_is_valid+0x18>
 801461e:	6880      	ldr	r0, [r0, #8]
 8014620:	3800      	subs	r0, #0
 8014622:	bf18      	it	ne
 8014624:	2001      	movne	r0, #1
 8014626:	4770      	bx	lr
 8014628:	4618      	mov	r0, r3
 801462a:	4770      	bx	lr

0801462c <rcutils_get_error_string>:
 801462c:	4b06      	ldr	r3, [pc, #24]	@ (8014648 <rcutils_get_error_string+0x1c>)
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	b13b      	cbz	r3, 8014642 <rcutils_get_error_string+0x16>
 8014632:	4b06      	ldr	r3, [pc, #24]	@ (801464c <rcutils_get_error_string+0x20>)
 8014634:	781a      	ldrb	r2, [r3, #0]
 8014636:	b90a      	cbnz	r2, 801463c <rcutils_get_error_string+0x10>
 8014638:	2201      	movs	r2, #1
 801463a:	701a      	strb	r2, [r3, #0]
 801463c:	4b04      	ldr	r3, [pc, #16]	@ (8014650 <rcutils_get_error_string+0x24>)
 801463e:	7818      	ldrb	r0, [r3, #0]
 8014640:	4770      	bx	lr
 8014642:	4b04      	ldr	r3, [pc, #16]	@ (8014654 <rcutils_get_error_string+0x28>)
 8014644:	7818      	ldrb	r0, [r3, #0]
 8014646:	4770      	bx	lr
 8014648:	24064774 	.word	0x24064774
 801464c:	24064789 	.word	0x24064789
 8014650:	24064788 	.word	0x24064788
 8014654:	08022e0c 	.word	0x08022e0c

08014658 <rcutils_reset_error>:
 8014658:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8014678 <rcutils_reset_error+0x20>
 801465c:	2300      	movs	r3, #0
 801465e:	4a08      	ldr	r2, [pc, #32]	@ (8014680 <rcutils_reset_error+0x28>)
 8014660:	4808      	ldr	r0, [pc, #32]	@ (8014684 <rcutils_reset_error+0x2c>)
 8014662:	8013      	strh	r3, [r2, #0]
 8014664:	4908      	ldr	r1, [pc, #32]	@ (8014688 <rcutils_reset_error+0x30>)
 8014666:	7003      	strb	r3, [r0, #0]
 8014668:	700b      	strb	r3, [r1, #0]
 801466a:	ed82 7b02 	vstr	d7, [r2, #8]
 801466e:	4a07      	ldr	r2, [pc, #28]	@ (801468c <rcutils_reset_error+0x34>)
 8014670:	7013      	strb	r3, [r2, #0]
 8014672:	4770      	bx	lr
 8014674:	f3af 8000 	nop.w
	...
 8014680:	24064778 	.word	0x24064778
 8014684:	24064789 	.word	0x24064789
 8014688:	24064788 	.word	0x24064788
 801468c:	24064774 	.word	0x24064774

08014690 <rcutils_system_time_now>:
 8014690:	b300      	cbz	r0, 80146d4 <rcutils_system_time_now+0x44>
 8014692:	b570      	push	{r4, r5, r6, lr}
 8014694:	b084      	sub	sp, #16
 8014696:	4604      	mov	r4, r0
 8014698:	2001      	movs	r0, #1
 801469a:	4669      	mov	r1, sp
 801469c:	f7ed fb74 	bl	8001d88 <clock_gettime>
 80146a0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80146a4:	2900      	cmp	r1, #0
 80146a6:	db12      	blt.n	80146ce <rcutils_system_time_now+0x3e>
 80146a8:	ea53 0201 	orrs.w	r2, r3, r1
 80146ac:	9d02      	ldr	r5, [sp, #8]
 80146ae:	d101      	bne.n	80146b4 <rcutils_system_time_now+0x24>
 80146b0:	2d00      	cmp	r5, #0
 80146b2:	db0c      	blt.n	80146ce <rcutils_system_time_now+0x3e>
 80146b4:	4e08      	ldr	r6, [pc, #32]	@ (80146d8 <rcutils_system_time_now+0x48>)
 80146b6:	2000      	movs	r0, #0
 80146b8:	fba3 3206 	umull	r3, r2, r3, r6
 80146bc:	195b      	adds	r3, r3, r5
 80146be:	fb06 2201 	mla	r2, r6, r1, r2
 80146c2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80146c6:	e9c4 3200 	strd	r3, r2, [r4]
 80146ca:	b004      	add	sp, #16
 80146cc:	bd70      	pop	{r4, r5, r6, pc}
 80146ce:	2002      	movs	r0, #2
 80146d0:	b004      	add	sp, #16
 80146d2:	bd70      	pop	{r4, r5, r6, pc}
 80146d4:	200b      	movs	r0, #11
 80146d6:	4770      	bx	lr
 80146d8:	3b9aca00 	.word	0x3b9aca00

080146dc <rcutils_steady_time_now>:
 80146dc:	b300      	cbz	r0, 8014720 <rcutils_steady_time_now+0x44>
 80146de:	b570      	push	{r4, r5, r6, lr}
 80146e0:	b084      	sub	sp, #16
 80146e2:	4604      	mov	r4, r0
 80146e4:	2000      	movs	r0, #0
 80146e6:	4669      	mov	r1, sp
 80146e8:	f7ed fb4e 	bl	8001d88 <clock_gettime>
 80146ec:	e9dd 3100 	ldrd	r3, r1, [sp]
 80146f0:	2900      	cmp	r1, #0
 80146f2:	db12      	blt.n	801471a <rcutils_steady_time_now+0x3e>
 80146f4:	ea53 0201 	orrs.w	r2, r3, r1
 80146f8:	9d02      	ldr	r5, [sp, #8]
 80146fa:	d101      	bne.n	8014700 <rcutils_steady_time_now+0x24>
 80146fc:	2d00      	cmp	r5, #0
 80146fe:	db0c      	blt.n	801471a <rcutils_steady_time_now+0x3e>
 8014700:	4e08      	ldr	r6, [pc, #32]	@ (8014724 <rcutils_steady_time_now+0x48>)
 8014702:	2000      	movs	r0, #0
 8014704:	fba3 3206 	umull	r3, r2, r3, r6
 8014708:	195b      	adds	r3, r3, r5
 801470a:	fb06 2201 	mla	r2, r6, r1, r2
 801470e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8014712:	e9c4 3200 	strd	r3, r2, [r4]
 8014716:	b004      	add	sp, #16
 8014718:	bd70      	pop	{r4, r5, r6, pc}
 801471a:	2002      	movs	r0, #2
 801471c:	b004      	add	sp, #16
 801471e:	bd70      	pop	{r4, r5, r6, pc}
 8014720:	200b      	movs	r0, #11
 8014722:	4770      	bx	lr
 8014724:	3b9aca00 	.word	0x3b9aca00

08014728 <rmw_uros_set_custom_transport>:
 8014728:	b470      	push	{r4, r5, r6}
 801472a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801472e:	b162      	cbz	r2, 801474a <rmw_uros_set_custom_transport+0x22>
 8014730:	b15b      	cbz	r3, 801474a <rmw_uros_set_custom_transport+0x22>
 8014732:	b155      	cbz	r5, 801474a <rmw_uros_set_custom_transport+0x22>
 8014734:	b14e      	cbz	r6, 801474a <rmw_uros_set_custom_transport+0x22>
 8014736:	4c06      	ldr	r4, [pc, #24]	@ (8014750 <rmw_uros_set_custom_transport+0x28>)
 8014738:	7020      	strb	r0, [r4, #0]
 801473a:	2000      	movs	r0, #0
 801473c:	6166      	str	r6, [r4, #20]
 801473e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8014742:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014746:	bc70      	pop	{r4, r5, r6}
 8014748:	4770      	bx	lr
 801474a:	200b      	movs	r0, #11
 801474c:	bc70      	pop	{r4, r5, r6}
 801474e:	4770      	bx	lr
 8014750:	2406478c 	.word	0x2406478c

08014754 <get_message_typesupport_handle>:
 8014754:	6883      	ldr	r3, [r0, #8]
 8014756:	4718      	bx	r3

08014758 <get_message_typesupport_handle_function>:
 8014758:	b510      	push	{r4, lr}
 801475a:	4604      	mov	r4, r0
 801475c:	6800      	ldr	r0, [r0, #0]
 801475e:	f7eb fdbf 	bl	80002e0 <strcmp>
 8014762:	2800      	cmp	r0, #0
 8014764:	bf0c      	ite	eq
 8014766:	4620      	moveq	r0, r4
 8014768:	2000      	movne	r0, #0
 801476a:	bd10      	pop	{r4, pc}

0801476c <get_service_typesupport_handle>:
 801476c:	6883      	ldr	r3, [r0, #8]
 801476e:	4718      	bx	r3

08014770 <get_service_typesupport_handle_function>:
 8014770:	b510      	push	{r4, lr}
 8014772:	4604      	mov	r4, r0
 8014774:	6800      	ldr	r0, [r0, #0]
 8014776:	f7eb fdb3 	bl	80002e0 <strcmp>
 801477a:	2800      	cmp	r0, #0
 801477c:	bf0c      	ite	eq
 801477e:	4620      	moveq	r0, r4
 8014780:	2000      	movne	r0, #0
 8014782:	bd10      	pop	{r4, pc}

08014784 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014788:	6805      	ldr	r5, [r0, #0]
 801478a:	4604      	mov	r4, r0
 801478c:	460e      	mov	r6, r1
 801478e:	4628      	mov	r0, r5
 8014790:	f7eb fda6 	bl	80002e0 <strcmp>
 8014794:	b1c8      	cbz	r0, 80147ca <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8014796:	4b11      	ldr	r3, [pc, #68]	@ (80147dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	429d      	cmp	r5, r3
 801479c:	d112      	bne.n	80147c4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801479e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80147a2:	f8d8 4000 	ldr.w	r4, [r8]
 80147a6:	b16c      	cbz	r4, 80147c4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80147a8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80147ac:	2700      	movs	r7, #0
 80147ae:	3d04      	subs	r5, #4
 80147b0:	4631      	mov	r1, r6
 80147b2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80147b6:	f7eb fd93 	bl	80002e0 <strcmp>
 80147ba:	00bb      	lsls	r3, r7, #2
 80147bc:	b140      	cbz	r0, 80147d0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80147be:	3701      	adds	r7, #1
 80147c0:	42bc      	cmp	r4, r7
 80147c2:	d1f5      	bne.n	80147b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80147c4:	2000      	movs	r0, #0
 80147c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ca:	4620      	mov	r0, r4
 80147cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80147d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147d8:	58d3      	ldr	r3, [r2, r3]
 80147da:	4718      	bx	r3
 80147dc:	24000e10 	.word	0x24000e10

080147e0 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80147e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147e4:	6805      	ldr	r5, [r0, #0]
 80147e6:	4604      	mov	r4, r0
 80147e8:	460e      	mov	r6, r1
 80147ea:	4628      	mov	r0, r5
 80147ec:	f7eb fd78 	bl	80002e0 <strcmp>
 80147f0:	b1c8      	cbz	r0, 8014826 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80147f2:	4b11      	ldr	r3, [pc, #68]	@ (8014838 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	429d      	cmp	r5, r3
 80147f8:	d112      	bne.n	8014820 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80147fa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80147fe:	f8d8 4000 	ldr.w	r4, [r8]
 8014802:	b16c      	cbz	r4, 8014820 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8014804:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014808:	2700      	movs	r7, #0
 801480a:	3d04      	subs	r5, #4
 801480c:	4631      	mov	r1, r6
 801480e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014812:	f7eb fd65 	bl	80002e0 <strcmp>
 8014816:	00bb      	lsls	r3, r7, #2
 8014818:	b140      	cbz	r0, 801482c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 801481a:	3701      	adds	r7, #1
 801481c:	42bc      	cmp	r4, r7
 801481e:	d1f5      	bne.n	801480c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8014820:	2000      	movs	r0, #0
 8014822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014826:	4620      	mov	r0, r4
 8014828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801482c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014834:	58d3      	ldr	r3, [r2, r3]
 8014836:	4718      	bx	r3
 8014838:	24000e10 	.word	0x24000e10

0801483c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 801483c:	f006 b8be 	b.w	801a9bc <std_msgs__msg__Header__init>

08014840 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8014840:	f006 b8e0 	b.w	801aa04 <std_msgs__msg__Header__fini>

08014844 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8014844:	b508      	push	{r3, lr}
 8014846:	f7fd fb6f 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801484a:	4b06      	ldr	r3, [pc, #24]	@ (8014864 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801484c:	4906      	ldr	r1, [pc, #24]	@ (8014868 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 801484e:	681a      	ldr	r2, [r3, #0]
 8014850:	60c8      	str	r0, [r1, #12]
 8014852:	b10a      	cbz	r2, 8014858 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8014854:	4803      	ldr	r0, [pc, #12]	@ (8014864 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8014856:	bd08      	pop	{r3, pc}
 8014858:	4a04      	ldr	r2, [pc, #16]	@ (801486c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 801485a:	4802      	ldr	r0, [pc, #8]	@ (8014864 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801485c:	6812      	ldr	r2, [r2, #0]
 801485e:	601a      	str	r2, [r3, #0]
 8014860:	bd08      	pop	{r3, pc}
 8014862:	bf00      	nop
 8014864:	24000e90 	.word	0x24000e90
 8014868:	24000e18 	.word	0x24000e18
 801486c:	24000e14 	.word	0x24000e14

08014870 <_Header__max_serialized_size>:
 8014870:	b500      	push	{lr}
 8014872:	b083      	sub	sp, #12
 8014874:	2301      	movs	r3, #1
 8014876:	2100      	movs	r1, #0
 8014878:	f10d 0007 	add.w	r0, sp, #7
 801487c:	f88d 3007 	strb.w	r3, [sp, #7]
 8014880:	f7fd fbb0 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8014884:	b003      	add	sp, #12
 8014886:	f85d fb04 	ldr.w	pc, [sp], #4
 801488a:	bf00      	nop

0801488c <get_serialized_size_std_msgs__msg__Header>:
 801488c:	b570      	push	{r4, r5, r6, lr}
 801488e:	4605      	mov	r5, r0
 8014890:	b168      	cbz	r0, 80148ae <get_serialized_size_std_msgs__msg__Header+0x22>
 8014892:	460c      	mov	r4, r1
 8014894:	f7fd fb56 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8014898:	2104      	movs	r1, #4
 801489a:	1826      	adds	r6, r4, r0
 801489c:	f1c4 0405 	rsb	r4, r4, #5
 80148a0:	4630      	mov	r0, r6
 80148a2:	f7fe fe53 	bl	801354c <ucdr_alignment>
 80148a6:	68e9      	ldr	r1, [r5, #12]
 80148a8:	440c      	add	r4, r1
 80148aa:	4404      	add	r4, r0
 80148ac:	19a0      	adds	r0, r4, r6
 80148ae:	bd70      	pop	{r4, r5, r6, pc}

080148b0 <_Header__cdr_deserialize>:
 80148b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148b2:	460c      	mov	r4, r1
 80148b4:	b083      	sub	sp, #12
 80148b6:	b1e9      	cbz	r1, 80148f4 <_Header__cdr_deserialize+0x44>
 80148b8:	4606      	mov	r6, r0
 80148ba:	f7fd fba7 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80148be:	4603      	mov	r3, r0
 80148c0:	4621      	mov	r1, r4
 80148c2:	4630      	mov	r0, r6
 80148c4:	685b      	ldr	r3, [r3, #4]
 80148c6:	68db      	ldr	r3, [r3, #12]
 80148c8:	4798      	blx	r3
 80148ca:	6927      	ldr	r7, [r4, #16]
 80148cc:	ab01      	add	r3, sp, #4
 80148ce:	68a1      	ldr	r1, [r4, #8]
 80148d0:	463a      	mov	r2, r7
 80148d2:	4630      	mov	r0, r6
 80148d4:	f000 fc86 	bl	80151e4 <ucdr_deserialize_sequence_char>
 80148d8:	9b01      	ldr	r3, [sp, #4]
 80148da:	4605      	mov	r5, r0
 80148dc:	b920      	cbnz	r0, 80148e8 <_Header__cdr_deserialize+0x38>
 80148de:	429f      	cmp	r7, r3
 80148e0:	d30c      	bcc.n	80148fc <_Header__cdr_deserialize+0x4c>
 80148e2:	4628      	mov	r0, r5
 80148e4:	b003      	add	sp, #12
 80148e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148e8:	b103      	cbz	r3, 80148ec <_Header__cdr_deserialize+0x3c>
 80148ea:	3b01      	subs	r3, #1
 80148ec:	4628      	mov	r0, r5
 80148ee:	60e3      	str	r3, [r4, #12]
 80148f0:	b003      	add	sp, #12
 80148f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148f4:	460d      	mov	r5, r1
 80148f6:	4628      	mov	r0, r5
 80148f8:	b003      	add	sp, #12
 80148fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148fc:	2101      	movs	r1, #1
 80148fe:	4630      	mov	r0, r6
 8014900:	75b5      	strb	r5, [r6, #22]
 8014902:	7571      	strb	r1, [r6, #21]
 8014904:	60e5      	str	r5, [r4, #12]
 8014906:	f7fe fe39 	bl	801357c <ucdr_align_to>
 801490a:	4630      	mov	r0, r6
 801490c:	9901      	ldr	r1, [sp, #4]
 801490e:	f7fe fe6d 	bl	80135ec <ucdr_advance_buffer>
 8014912:	4628      	mov	r0, r5
 8014914:	b003      	add	sp, #12
 8014916:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014918 <_Header__cdr_serialize>:
 8014918:	b308      	cbz	r0, 801495e <_Header__cdr_serialize+0x46>
 801491a:	b570      	push	{r4, r5, r6, lr}
 801491c:	4604      	mov	r4, r0
 801491e:	460d      	mov	r5, r1
 8014920:	f7fd fb74 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014924:	4603      	mov	r3, r0
 8014926:	4629      	mov	r1, r5
 8014928:	4620      	mov	r0, r4
 801492a:	685b      	ldr	r3, [r3, #4]
 801492c:	689b      	ldr	r3, [r3, #8]
 801492e:	4798      	blx	r3
 8014930:	68a6      	ldr	r6, [r4, #8]
 8014932:	b15e      	cbz	r6, 801494c <_Header__cdr_serialize+0x34>
 8014934:	4630      	mov	r0, r6
 8014936:	f7eb fcdd 	bl	80002f4 <strlen>
 801493a:	4603      	mov	r3, r0
 801493c:	1c42      	adds	r2, r0, #1
 801493e:	4631      	mov	r1, r6
 8014940:	4628      	mov	r0, r5
 8014942:	60e3      	str	r3, [r4, #12]
 8014944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014948:	f000 bc3a 	b.w	80151c0 <ucdr_serialize_sequence_char>
 801494c:	4633      	mov	r3, r6
 801494e:	4632      	mov	r2, r6
 8014950:	4631      	mov	r1, r6
 8014952:	4628      	mov	r0, r5
 8014954:	60e3      	str	r3, [r4, #12]
 8014956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801495a:	f000 bc31 	b.w	80151c0 <ucdr_serialize_sequence_char>
 801495e:	4770      	bx	lr

08014960 <_Header__get_serialized_size>:
 8014960:	b538      	push	{r3, r4, r5, lr}
 8014962:	4604      	mov	r4, r0
 8014964:	b150      	cbz	r0, 801497c <_Header__get_serialized_size+0x1c>
 8014966:	2100      	movs	r1, #0
 8014968:	f7fd faec 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 801496c:	2104      	movs	r1, #4
 801496e:	4605      	mov	r5, r0
 8014970:	f7fe fdec 	bl	801354c <ucdr_alignment>
 8014974:	68e2      	ldr	r2, [r4, #12]
 8014976:	3205      	adds	r2, #5
 8014978:	1953      	adds	r3, r2, r5
 801497a:	4418      	add	r0, r3
 801497c:	bd38      	pop	{r3, r4, r5, pc}
 801497e:	bf00      	nop

08014980 <max_serialized_size_std_msgs__msg__Header>:
 8014980:	2301      	movs	r3, #1
 8014982:	b510      	push	{r4, lr}
 8014984:	7003      	strb	r3, [r0, #0]
 8014986:	4604      	mov	r4, r0
 8014988:	f7fd fb2c 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 801498c:	2300      	movs	r3, #0
 801498e:	7023      	strb	r3, [r4, #0]
 8014990:	bd10      	pop	{r4, pc}
 8014992:	bf00      	nop

08014994 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8014994:	4800      	ldr	r0, [pc, #0]	@ (8014998 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8014996:	4770      	bx	lr
 8014998:	24000e9c 	.word	0x24000e9c

0801499c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 801499c:	4b04      	ldr	r3, [pc, #16]	@ (80149b0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 801499e:	681a      	ldr	r2, [r3, #0]
 80149a0:	b10a      	cbz	r2, 80149a6 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 80149a2:	4803      	ldr	r0, [pc, #12]	@ (80149b0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80149a4:	4770      	bx	lr
 80149a6:	4a03      	ldr	r2, [pc, #12]	@ (80149b4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 80149a8:	4801      	ldr	r0, [pc, #4]	@ (80149b0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80149aa:	6812      	ldr	r2, [r2, #0]
 80149ac:	601a      	str	r2, [r3, #0]
 80149ae:	4770      	bx	lr
 80149b0:	24000ecc 	.word	0x24000ecc
 80149b4:	24000e10 	.word	0x24000e10

080149b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80149b8:	4a02      	ldr	r2, [pc, #8]	@ (80149c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 80149ba:	4b03      	ldr	r3, [pc, #12]	@ (80149c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 80149bc:	6812      	ldr	r2, [r2, #0]
 80149be:	601a      	str	r2, [r3, #0]
 80149c0:	4770      	bx	lr
 80149c2:	bf00      	nop
 80149c4:	24000e10 	.word	0x24000e10
 80149c8:	24000ecc 	.word	0x24000ecc

080149cc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80149cc:	4b04      	ldr	r3, [pc, #16]	@ (80149e0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80149ce:	681a      	ldr	r2, [r3, #0]
 80149d0:	b10a      	cbz	r2, 80149d6 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 80149d2:	4803      	ldr	r0, [pc, #12]	@ (80149e0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80149d4:	4770      	bx	lr
 80149d6:	4a03      	ldr	r2, [pc, #12]	@ (80149e4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 80149d8:	4801      	ldr	r0, [pc, #4]	@ (80149e0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80149da:	6812      	ldr	r2, [r2, #0]
 80149dc:	601a      	str	r2, [r3, #0]
 80149de:	4770      	bx	lr
 80149e0:	24000ee0 	.word	0x24000ee0
 80149e4:	24000e10 	.word	0x24000e10

080149e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80149e8:	4a02      	ldr	r2, [pc, #8]	@ (80149f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 80149ea:	4b03      	ldr	r3, [pc, #12]	@ (80149f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 80149ec:	6812      	ldr	r2, [r2, #0]
 80149ee:	601a      	str	r2, [r3, #0]
 80149f0:	4770      	bx	lr
 80149f2:	bf00      	nop
 80149f4:	24000e10 	.word	0x24000e10
 80149f8:	24000ee0 	.word	0x24000ee0

080149fc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80149fc:	4b04      	ldr	r3, [pc, #16]	@ (8014a10 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80149fe:	681a      	ldr	r2, [r3, #0]
 8014a00:	b10a      	cbz	r2, 8014a06 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 8014a02:	4803      	ldr	r0, [pc, #12]	@ (8014a10 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8014a04:	4770      	bx	lr
 8014a06:	4a03      	ldr	r2, [pc, #12]	@ (8014a14 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 8014a08:	4801      	ldr	r0, [pc, #4]	@ (8014a10 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8014a0a:	6812      	ldr	r2, [r2, #0]
 8014a0c:	601a      	str	r2, [r3, #0]
 8014a0e:	4770      	bx	lr
 8014a10:	24000ef4 	.word	0x24000ef4
 8014a14:	24000e10 	.word	0x24000e10

08014a18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8014a18:	4a02      	ldr	r2, [pc, #8]	@ (8014a24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 8014a1a:	4b03      	ldr	r3, [pc, #12]	@ (8014a28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8014a1c:	6812      	ldr	r2, [r2, #0]
 8014a1e:	601a      	str	r2, [r3, #0]
 8014a20:	4770      	bx	lr
 8014a22:	bf00      	nop
 8014a24:	24000e10 	.word	0x24000e10
 8014a28:	24000ef4 	.word	0x24000ef4

08014a2c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8014a2c:	4b04      	ldr	r3, [pc, #16]	@ (8014a40 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8014a2e:	681a      	ldr	r2, [r3, #0]
 8014a30:	b10a      	cbz	r2, 8014a36 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 8014a32:	4803      	ldr	r0, [pc, #12]	@ (8014a40 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8014a34:	4770      	bx	lr
 8014a36:	4a03      	ldr	r2, [pc, #12]	@ (8014a44 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 8014a38:	4801      	ldr	r0, [pc, #4]	@ (8014a40 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8014a3a:	6812      	ldr	r2, [r2, #0]
 8014a3c:	601a      	str	r2, [r3, #0]
 8014a3e:	4770      	bx	lr
 8014a40:	24000f08 	.word	0x24000f08
 8014a44:	24000e10 	.word	0x24000e10

08014a48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8014a48:	4a02      	ldr	r2, [pc, #8]	@ (8014a54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8014a4a:	4b03      	ldr	r3, [pc, #12]	@ (8014a58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8014a4c:	6812      	ldr	r2, [r2, #0]
 8014a4e:	601a      	str	r2, [r3, #0]
 8014a50:	4770      	bx	lr
 8014a52:	bf00      	nop
 8014a54:	24000e10 	.word	0x24000e10
 8014a58:	24000f08 	.word	0x24000f08

08014a5c <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8014a5c:	f005 bfde 	b.w	801aa1c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

08014a60 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 8014a60:	f006 b800 	b.w	801aa64 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08014a64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8014a64:	b510      	push	{r4, lr}
 8014a66:	4c08      	ldr	r4, [pc, #32]	@ (8014a88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8014a68:	f7ff feec 	bl	8014844 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8014a6c:	60e0      	str	r0, [r4, #12]
 8014a6e:	f006 f865 	bl	801ab3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8014a72:	4b06      	ldr	r3, [pc, #24]	@ (8014a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8014a74:	64a0      	str	r0, [r4, #72]	@ 0x48
 8014a76:	681a      	ldr	r2, [r3, #0]
 8014a78:	b10a      	cbz	r2, 8014a7e <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 8014a7a:	4804      	ldr	r0, [pc, #16]	@ (8014a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8014a7c:	bd10      	pop	{r4, pc}
 8014a7e:	4a04      	ldr	r2, [pc, #16]	@ (8014a90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 8014a80:	4802      	ldr	r0, [pc, #8]	@ (8014a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8014a82:	6812      	ldr	r2, [r2, #0]
 8014a84:	601a      	str	r2, [r3, #0]
 8014a86:	bd10      	pop	{r4, pc}
 8014a88:	24000f14 	.word	0x24000f14
 8014a8c:	24000f8c 	.word	0x24000f8c
 8014a90:	24000e14 	.word	0x24000e14

08014a94 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 8014a94:	f005 bff2 	b.w	801aa7c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

08014a98 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 8014a98:	f006 b814 	b.w	801aac4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08014a9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8014a9c:	b510      	push	{r4, lr}
 8014a9e:	4c08      	ldr	r4, [pc, #32]	@ (8014ac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 8014aa0:	f7ff fed0 	bl	8014844 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8014aa4:	60e0      	str	r0, [r4, #12]
 8014aa6:	f006 f85b 	bl	801ab60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8014aaa:	4b06      	ldr	r3, [pc, #24]	@ (8014ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8014aac:	64a0      	str	r0, [r4, #72]	@ 0x48
 8014aae:	681a      	ldr	r2, [r3, #0]
 8014ab0:	b10a      	cbz	r2, 8014ab6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 8014ab2:	4804      	ldr	r0, [pc, #16]	@ (8014ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8014ab4:	bd10      	pop	{r4, pc}
 8014ab6:	4a04      	ldr	r2, [pc, #16]	@ (8014ac8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 8014ab8:	4802      	ldr	r0, [pc, #8]	@ (8014ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8014aba:	6812      	ldr	r2, [r2, #0]
 8014abc:	601a      	str	r2, [r3, #0]
 8014abe:	bd10      	pop	{r4, pc}
 8014ac0:	24000f98 	.word	0x24000f98
 8014ac4:	24001010 	.word	0x24001010
 8014ac8:	24000e14 	.word	0x24000e14

08014acc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 8014acc:	f006 b806 	b.w	801aadc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

08014ad0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 8014ad0:	f006 b816 	b.w	801ab00 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

08014ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8014ad4:	b508      	push	{r3, lr}
 8014ad6:	f7fd fa27 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014ada:	4b06      	ldr	r3, [pc, #24]	@ (8014af4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8014adc:	4906      	ldr	r1, [pc, #24]	@ (8014af8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 8014ade:	681a      	ldr	r2, [r3, #0]
 8014ae0:	60c8      	str	r0, [r1, #12]
 8014ae2:	b10a      	cbz	r2, 8014ae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8014ae4:	4803      	ldr	r0, [pc, #12]	@ (8014af4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8014ae6:	bd08      	pop	{r3, pc}
 8014ae8:	4a04      	ldr	r2, [pc, #16]	@ (8014afc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 8014aea:	4802      	ldr	r0, [pc, #8]	@ (8014af4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8014aec:	6812      	ldr	r2, [r2, #0]
 8014aee:	601a      	str	r2, [r3, #0]
 8014af0:	bd08      	pop	{r3, pc}
 8014af2:	bf00      	nop
 8014af4:	24001094 	.word	0x24001094
 8014af8:	2400101c 	.word	0x2400101c
 8014afc:	24000e14 	.word	0x24000e14

08014b00 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8014b00:	f006 b802 	b.w	801ab08 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08014b04 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8014b04:	f006 b812 	b.w	801ab2c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08014b08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8014b08:	b508      	push	{r3, lr}
 8014b0a:	f7fd fa0d 	bl	8011f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014b0e:	4b06      	ldr	r3, [pc, #24]	@ (8014b28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8014b10:	4906      	ldr	r1, [pc, #24]	@ (8014b2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 8014b12:	681a      	ldr	r2, [r3, #0]
 8014b14:	60c8      	str	r0, [r1, #12]
 8014b16:	b10a      	cbz	r2, 8014b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8014b18:	4803      	ldr	r0, [pc, #12]	@ (8014b28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8014b1a:	bd08      	pop	{r3, pc}
 8014b1c:	4a04      	ldr	r2, [pc, #16]	@ (8014b30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 8014b1e:	4802      	ldr	r0, [pc, #8]	@ (8014b28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8014b20:	6812      	ldr	r2, [r2, #0]
 8014b22:	601a      	str	r2, [r3, #0]
 8014b24:	bd08      	pop	{r3, pc}
 8014b26:	bf00      	nop
 8014b28:	24001118 	.word	0x24001118
 8014b2c:	240010a0 	.word	0x240010a0
 8014b30:	24000e14 	.word	0x24000e14

08014b34 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8014b34:	b538      	push	{r3, r4, r5, lr}
 8014b36:	4604      	mov	r4, r0
 8014b38:	b150      	cbz	r0, 8014b50 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8014b3a:	460d      	mov	r5, r1
 8014b3c:	f7ff fea6 	bl	801488c <get_serialized_size_std_msgs__msg__Header>
 8014b40:	4603      	mov	r3, r0
 8014b42:	f104 0018 	add.w	r0, r4, #24
 8014b46:	461c      	mov	r4, r3
 8014b48:	18e9      	adds	r1, r5, r3
 8014b4a:	f006 f817 	bl	801ab7c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8014b4e:	4420      	add	r0, r4
 8014b50:	bd38      	pop	{r3, r4, r5, pc}
 8014b52:	bf00      	nop

08014b54 <_ActuationCommandStamped__cdr_deserialize>:
 8014b54:	b570      	push	{r4, r5, r6, lr}
 8014b56:	460c      	mov	r4, r1
 8014b58:	b199      	cbz	r1, 8014b82 <_ActuationCommandStamped__cdr_deserialize+0x2e>
 8014b5a:	4605      	mov	r5, r0
 8014b5c:	f7ff ff1a 	bl	8014994 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8014b60:	4603      	mov	r3, r0
 8014b62:	4621      	mov	r1, r4
 8014b64:	4628      	mov	r0, r5
 8014b66:	685b      	ldr	r3, [r3, #4]
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	4798      	blx	r3
 8014b6c:	f006 f88e 	bl	801ac8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8014b70:	4603      	mov	r3, r0
 8014b72:	f104 0118 	add.w	r1, r4, #24
 8014b76:	4628      	mov	r0, r5
 8014b78:	685b      	ldr	r3, [r3, #4]
 8014b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b7e:	68db      	ldr	r3, [r3, #12]
 8014b80:	4718      	bx	r3
 8014b82:	4608      	mov	r0, r1
 8014b84:	bd70      	pop	{r4, r5, r6, pc}
 8014b86:	bf00      	nop

08014b88 <_ActuationCommandStamped__cdr_serialize>:
 8014b88:	b510      	push	{r4, lr}
 8014b8a:	b082      	sub	sp, #8
 8014b8c:	9101      	str	r1, [sp, #4]
 8014b8e:	b1a0      	cbz	r0, 8014bba <_ActuationCommandStamped__cdr_serialize+0x32>
 8014b90:	4604      	mov	r4, r0
 8014b92:	f7ff feff 	bl	8014994 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8014b96:	4603      	mov	r3, r0
 8014b98:	9901      	ldr	r1, [sp, #4]
 8014b9a:	4620      	mov	r0, r4
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	689b      	ldr	r3, [r3, #8]
 8014ba0:	4798      	blx	r3
 8014ba2:	f006 f873 	bl	801ac8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	9901      	ldr	r1, [sp, #4]
 8014baa:	f104 0018 	add.w	r0, r4, #24
 8014bae:	685b      	ldr	r3, [r3, #4]
 8014bb0:	689b      	ldr	r3, [r3, #8]
 8014bb2:	b002      	add	sp, #8
 8014bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bb8:	4718      	bx	r3
 8014bba:	b002      	add	sp, #8
 8014bbc:	bd10      	pop	{r4, pc}
 8014bbe:	bf00      	nop

08014bc0 <_ActuationCommandStamped__get_serialized_size>:
 8014bc0:	b510      	push	{r4, lr}
 8014bc2:	4604      	mov	r4, r0
 8014bc4:	b148      	cbz	r0, 8014bda <_ActuationCommandStamped__get_serialized_size+0x1a>
 8014bc6:	2100      	movs	r1, #0
 8014bc8:	f7ff fe60 	bl	801488c <get_serialized_size_std_msgs__msg__Header>
 8014bcc:	4601      	mov	r1, r0
 8014bce:	f104 0018 	add.w	r0, r4, #24
 8014bd2:	460c      	mov	r4, r1
 8014bd4:	f005 ffd2 	bl	801ab7c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8014bd8:	4420      	add	r0, r4
 8014bda:	bd10      	pop	{r4, pc}

08014bdc <_ActuationCommandStamped__max_serialized_size>:
 8014bdc:	b510      	push	{r4, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	2301      	movs	r3, #1
 8014be2:	2100      	movs	r1, #0
 8014be4:	f10d 0007 	add.w	r0, sp, #7
 8014be8:	f88d 3007 	strb.w	r3, [sp, #7]
 8014bec:	f7ff fec8 	bl	8014980 <max_serialized_size_std_msgs__msg__Header>
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	f10d 0007 	add.w	r0, sp, #7
 8014bf6:	4621      	mov	r1, r4
 8014bf8:	f006 f82e 	bl	801ac58 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8014bfc:	4420      	add	r0, r4
 8014bfe:	b002      	add	sp, #8
 8014c00:	bd10      	pop	{r4, pc}
 8014c02:	bf00      	nop

08014c04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8014c04:	4800      	ldr	r0, [pc, #0]	@ (8014c08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 8014c06:	4770      	bx	lr
 8014c08:	24001124 	.word	0x24001124

08014c0c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8014c0c:	b538      	push	{r3, r4, r5, lr}
 8014c0e:	4604      	mov	r4, r0
 8014c10:	b150      	cbz	r0, 8014c28 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 8014c12:	460d      	mov	r5, r1
 8014c14:	f7ff fe3a 	bl	801488c <get_serialized_size_std_msgs__msg__Header>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	f104 0018 	add.w	r0, r4, #24
 8014c1e:	461c      	mov	r4, r3
 8014c20:	18e9      	adds	r1, r5, r3
 8014c22:	f006 f837 	bl	801ac94 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8014c26:	4420      	add	r0, r4
 8014c28:	bd38      	pop	{r3, r4, r5, pc}
 8014c2a:	bf00      	nop

08014c2c <_ActuationStatusStamped__cdr_deserialize>:
 8014c2c:	b570      	push	{r4, r5, r6, lr}
 8014c2e:	460c      	mov	r4, r1
 8014c30:	b199      	cbz	r1, 8014c5a <_ActuationStatusStamped__cdr_deserialize+0x2e>
 8014c32:	4605      	mov	r5, r0
 8014c34:	f7ff feae 	bl	8014994 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	4621      	mov	r1, r4
 8014c3c:	4628      	mov	r0, r5
 8014c3e:	685b      	ldr	r3, [r3, #4]
 8014c40:	68db      	ldr	r3, [r3, #12]
 8014c42:	4798      	blx	r3
 8014c44:	f006 f8ae 	bl	801ada4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	f104 0118 	add.w	r1, r4, #24
 8014c4e:	4628      	mov	r0, r5
 8014c50:	685b      	ldr	r3, [r3, #4]
 8014c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	4718      	bx	r3
 8014c5a:	4608      	mov	r0, r1
 8014c5c:	bd70      	pop	{r4, r5, r6, pc}
 8014c5e:	bf00      	nop

08014c60 <_ActuationStatusStamped__cdr_serialize>:
 8014c60:	b510      	push	{r4, lr}
 8014c62:	b082      	sub	sp, #8
 8014c64:	9101      	str	r1, [sp, #4]
 8014c66:	b1a0      	cbz	r0, 8014c92 <_ActuationStatusStamped__cdr_serialize+0x32>
 8014c68:	4604      	mov	r4, r0
 8014c6a:	f7ff fe93 	bl	8014994 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	9901      	ldr	r1, [sp, #4]
 8014c72:	4620      	mov	r0, r4
 8014c74:	685b      	ldr	r3, [r3, #4]
 8014c76:	689b      	ldr	r3, [r3, #8]
 8014c78:	4798      	blx	r3
 8014c7a:	f006 f893 	bl	801ada4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	9901      	ldr	r1, [sp, #4]
 8014c82:	f104 0018 	add.w	r0, r4, #24
 8014c86:	685b      	ldr	r3, [r3, #4]
 8014c88:	689b      	ldr	r3, [r3, #8]
 8014c8a:	b002      	add	sp, #8
 8014c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c90:	4718      	bx	r3
 8014c92:	b002      	add	sp, #8
 8014c94:	bd10      	pop	{r4, pc}
 8014c96:	bf00      	nop

08014c98 <_ActuationStatusStamped__get_serialized_size>:
 8014c98:	b510      	push	{r4, lr}
 8014c9a:	4604      	mov	r4, r0
 8014c9c:	b148      	cbz	r0, 8014cb2 <_ActuationStatusStamped__get_serialized_size+0x1a>
 8014c9e:	2100      	movs	r1, #0
 8014ca0:	f7ff fdf4 	bl	801488c <get_serialized_size_std_msgs__msg__Header>
 8014ca4:	4601      	mov	r1, r0
 8014ca6:	f104 0018 	add.w	r0, r4, #24
 8014caa:	460c      	mov	r4, r1
 8014cac:	f005 fff2 	bl	801ac94 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8014cb0:	4420      	add	r0, r4
 8014cb2:	bd10      	pop	{r4, pc}

08014cb4 <_ActuationStatusStamped__max_serialized_size>:
 8014cb4:	b510      	push	{r4, lr}
 8014cb6:	b082      	sub	sp, #8
 8014cb8:	2301      	movs	r3, #1
 8014cba:	2100      	movs	r1, #0
 8014cbc:	f10d 0007 	add.w	r0, sp, #7
 8014cc0:	f88d 3007 	strb.w	r3, [sp, #7]
 8014cc4:	f7ff fe5c 	bl	8014980 <max_serialized_size_std_msgs__msg__Header>
 8014cc8:	4604      	mov	r4, r0
 8014cca:	f10d 0007 	add.w	r0, sp, #7
 8014cce:	4621      	mov	r1, r4
 8014cd0:	f006 f84e 	bl	801ad70 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8014cd4:	4420      	add	r0, r4
 8014cd6:	b002      	add	sp, #8
 8014cd8:	bd10      	pop	{r4, pc}
 8014cda:	bf00      	nop

08014cdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8014cdc:	4800      	ldr	r0, [pc, #0]	@ (8014ce0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 8014cde:	4770      	bx	lr
 8014ce0:	2400114c 	.word	0x2400114c

08014ce4 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8014ce4:	b538      	push	{r3, r4, r5, lr}
 8014ce6:	b158      	cbz	r0, 8014d00 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 8014ce8:	460d      	mov	r5, r1
 8014cea:	f7fd f92b 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8014cee:	2104      	movs	r1, #4
 8014cf0:	182c      	adds	r4, r5, r0
 8014cf2:	f1c5 0504 	rsb	r5, r5, #4
 8014cf6:	4620      	mov	r0, r4
 8014cf8:	f7fe fc28 	bl	801354c <ucdr_alignment>
 8014cfc:	4428      	add	r0, r5
 8014cfe:	4420      	add	r0, r4
 8014d00:	bd38      	pop	{r3, r4, r5, pc}
 8014d02:	bf00      	nop

08014d04 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8014d04:	b538      	push	{r3, r4, r5, lr}
 8014d06:	460c      	mov	r4, r1
 8014d08:	b179      	cbz	r1, 8014d2a <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 8014d0a:	4605      	mov	r5, r0
 8014d0c:	f7fd f97e 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014d10:	4603      	mov	r3, r0
 8014d12:	4621      	mov	r1, r4
 8014d14:	4628      	mov	r0, r5
 8014d16:	685b      	ldr	r3, [r3, #4]
 8014d18:	68db      	ldr	r3, [r3, #12]
 8014d1a:	4798      	blx	r3
 8014d1c:	f104 0108 	add.w	r1, r4, #8
 8014d20:	4628      	mov	r0, r5
 8014d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d26:	f7fe b993 	b.w	8013050 <ucdr_deserialize_float>
 8014d2a:	4608      	mov	r0, r1
 8014d2c:	bd38      	pop	{r3, r4, r5, pc}
 8014d2e:	bf00      	nop

08014d30 <_SteeringWheelStatusStamped__cdr_serialize>:
 8014d30:	b188      	cbz	r0, 8014d56 <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 8014d32:	b538      	push	{r3, r4, r5, lr}
 8014d34:	4604      	mov	r4, r0
 8014d36:	460d      	mov	r5, r1
 8014d38:	f7fd f968 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	4629      	mov	r1, r5
 8014d40:	4620      	mov	r0, r4
 8014d42:	685b      	ldr	r3, [r3, #4]
 8014d44:	689b      	ldr	r3, [r3, #8]
 8014d46:	4798      	blx	r3
 8014d48:	ed94 0a02 	vldr	s0, [r4, #8]
 8014d4c:	4628      	mov	r0, r5
 8014d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d52:	f7fe b8e5 	b.w	8012f20 <ucdr_serialize_float>
 8014d56:	4770      	bx	lr

08014d58 <_SteeringWheelStatusStamped__get_serialized_size>:
 8014d58:	b150      	cbz	r0, 8014d70 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 8014d5a:	2100      	movs	r1, #0
 8014d5c:	b510      	push	{r4, lr}
 8014d5e:	f7fd f8f1 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8014d62:	4604      	mov	r4, r0
 8014d64:	2104      	movs	r1, #4
 8014d66:	f7fe fbf1 	bl	801354c <ucdr_alignment>
 8014d6a:	4420      	add	r0, r4
 8014d6c:	3004      	adds	r0, #4
 8014d6e:	bd10      	pop	{r4, pc}
 8014d70:	4770      	bx	lr
 8014d72:	bf00      	nop

08014d74 <_SteeringWheelStatusStamped__max_serialized_size>:
 8014d74:	b510      	push	{r4, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	2301      	movs	r3, #1
 8014d7a:	2100      	movs	r1, #0
 8014d7c:	f10d 0007 	add.w	r0, sp, #7
 8014d80:	f88d 3007 	strb.w	r3, [sp, #7]
 8014d84:	f7fd f92e 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8014d88:	4604      	mov	r4, r0
 8014d8a:	2104      	movs	r1, #4
 8014d8c:	f7fe fbde 	bl	801354c <ucdr_alignment>
 8014d90:	4420      	add	r0, r4
 8014d92:	3004      	adds	r0, #4
 8014d94:	b002      	add	sp, #8
 8014d96:	bd10      	pop	{r4, pc}

08014d98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8014d98:	4800      	ldr	r0, [pc, #0]	@ (8014d9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 8014d9a:	4770      	bx	lr
 8014d9c:	24001174 	.word	0x24001174

08014da0 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8014da0:	b538      	push	{r3, r4, r5, lr}
 8014da2:	b158      	cbz	r0, 8014dbc <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8014da4:	460d      	mov	r5, r1
 8014da6:	f7fd f8cd 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8014daa:	2101      	movs	r1, #1
 8014dac:	182c      	adds	r4, r5, r0
 8014dae:	f1c5 0501 	rsb	r5, r5, #1
 8014db2:	4620      	mov	r0, r4
 8014db4:	f7fe fbca 	bl	801354c <ucdr_alignment>
 8014db8:	4428      	add	r0, r5
 8014dba:	4420      	add	r0, r4
 8014dbc:	bd38      	pop	{r3, r4, r5, pc}
 8014dbe:	bf00      	nop

08014dc0 <_VehicleEmergencyStamped__cdr_deserialize>:
 8014dc0:	b538      	push	{r3, r4, r5, lr}
 8014dc2:	460c      	mov	r4, r1
 8014dc4:	b179      	cbz	r1, 8014de6 <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 8014dc6:	4605      	mov	r5, r0
 8014dc8:	f7fd f920 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	4621      	mov	r1, r4
 8014dd0:	4628      	mov	r0, r5
 8014dd2:	685b      	ldr	r3, [r3, #4]
 8014dd4:	68db      	ldr	r3, [r3, #12]
 8014dd6:	4798      	blx	r3
 8014dd8:	f104 0108 	add.w	r1, r4, #8
 8014ddc:	4628      	mov	r0, r5
 8014dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014de2:	f7fd b92d 	b.w	8012040 <ucdr_deserialize_bool>
 8014de6:	4608      	mov	r0, r1
 8014de8:	bd38      	pop	{r3, r4, r5, pc}
 8014dea:	bf00      	nop

08014dec <_VehicleEmergencyStamped__cdr_serialize>:
 8014dec:	b180      	cbz	r0, 8014e10 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8014dee:	b538      	push	{r3, r4, r5, lr}
 8014df0:	4604      	mov	r4, r0
 8014df2:	460d      	mov	r5, r1
 8014df4:	f7fd f90a 	bl	801200c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	4629      	mov	r1, r5
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	685b      	ldr	r3, [r3, #4]
 8014e00:	689b      	ldr	r3, [r3, #8]
 8014e02:	4798      	blx	r3
 8014e04:	7a21      	ldrb	r1, [r4, #8]
 8014e06:	4628      	mov	r0, r5
 8014e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e0c:	f7fd b902 	b.w	8012014 <ucdr_serialize_bool>
 8014e10:	4770      	bx	lr
 8014e12:	bf00      	nop

08014e14 <_VehicleEmergencyStamped__get_serialized_size>:
 8014e14:	b150      	cbz	r0, 8014e2c <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8014e16:	2100      	movs	r1, #0
 8014e18:	b510      	push	{r4, lr}
 8014e1a:	f7fd f893 	bl	8011f44 <get_serialized_size_builtin_interfaces__msg__Time>
 8014e1e:	4604      	mov	r4, r0
 8014e20:	2101      	movs	r1, #1
 8014e22:	f7fe fb93 	bl	801354c <ucdr_alignment>
 8014e26:	4420      	add	r0, r4
 8014e28:	3001      	adds	r0, #1
 8014e2a:	bd10      	pop	{r4, pc}
 8014e2c:	4770      	bx	lr
 8014e2e:	bf00      	nop

08014e30 <_VehicleEmergencyStamped__max_serialized_size>:
 8014e30:	b510      	push	{r4, lr}
 8014e32:	b082      	sub	sp, #8
 8014e34:	2401      	movs	r4, #1
 8014e36:	2100      	movs	r1, #0
 8014e38:	f10d 0007 	add.w	r0, sp, #7
 8014e3c:	f88d 4007 	strb.w	r4, [sp, #7]
 8014e40:	f7fd f8d0 	bl	8011fe4 <max_serialized_size_builtin_interfaces__msg__Time>
 8014e44:	4621      	mov	r1, r4
 8014e46:	4604      	mov	r4, r0
 8014e48:	f7fe fb80 	bl	801354c <ucdr_alignment>
 8014e4c:	4420      	add	r0, r4
 8014e4e:	3001      	adds	r0, #1
 8014e50:	b002      	add	sp, #8
 8014e52:	bd10      	pop	{r4, pc}

08014e54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8014e54:	4800      	ldr	r0, [pc, #0]	@ (8014e58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8014e56:	4770      	bx	lr
 8014e58:	2400119c 	.word	0x2400119c

08014e5c <autoware_control_msgs__msg__Control__init>:
 8014e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e60:	4605      	mov	r5, r0
 8014e62:	b3c0      	cbz	r0, 8014ed6 <autoware_control_msgs__msg__Control__init+0x7a>
 8014e64:	f000 f9a6 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 8014e68:	4604      	mov	r4, r0
 8014e6a:	b310      	cbz	r0, 8014eb2 <autoware_control_msgs__msg__Control__init+0x56>
 8014e6c:	f105 0608 	add.w	r6, r5, #8
 8014e70:	4630      	mov	r0, r6
 8014e72:	f000 f99f 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 8014e76:	4604      	mov	r4, r0
 8014e78:	2800      	cmp	r0, #0
 8014e7a:	d040      	beq.n	8014efe <autoware_control_msgs__msg__Control__init+0xa2>
 8014e7c:	f105 0710 	add.w	r7, r5, #16
 8014e80:	4638      	mov	r0, r7
 8014e82:	f000 f855 	bl	8014f30 <autoware_control_msgs__msg__Lateral__init>
 8014e86:	4604      	mov	r4, r0
 8014e88:	b348      	cbz	r0, 8014ede <autoware_control_msgs__msg__Control__init+0x82>
 8014e8a:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 8014e8e:	4640      	mov	r0, r8
 8014e90:	f000 f87e 	bl	8014f90 <autoware_control_msgs__msg__Longitudinal__init>
 8014e94:	4604      	mov	r4, r0
 8014e96:	b9d8      	cbnz	r0, 8014ed0 <autoware_control_msgs__msg__Control__init+0x74>
 8014e98:	4628      	mov	r0, r5
 8014e9a:	f000 f98f 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014e9e:	4630      	mov	r0, r6
 8014ea0:	f000 f98c 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014ea4:	4638      	mov	r0, r7
 8014ea6:	f000 f867 	bl	8014f78 <autoware_control_msgs__msg__Lateral__fini>
 8014eaa:	4640      	mov	r0, r8
 8014eac:	f000 f894 	bl	8014fd8 <autoware_control_msgs__msg__Longitudinal__fini>
 8014eb0:	e00e      	b.n	8014ed0 <autoware_control_msgs__msg__Control__init+0x74>
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	f000 f982 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014eb8:	f105 0008 	add.w	r0, r5, #8
 8014ebc:	f000 f97e 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014ec0:	f105 0010 	add.w	r0, r5, #16
 8014ec4:	f000 f858 	bl	8014f78 <autoware_control_msgs__msg__Lateral__fini>
 8014ec8:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8014ecc:	f000 f884 	bl	8014fd8 <autoware_control_msgs__msg__Longitudinal__fini>
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ed6:	4604      	mov	r4, r0
 8014ed8:	4620      	mov	r0, r4
 8014eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ede:	4628      	mov	r0, r5
 8014ee0:	f000 f96c 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014ee4:	4630      	mov	r0, r6
 8014ee6:	f000 f969 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014eea:	4638      	mov	r0, r7
 8014eec:	f000 f844 	bl	8014f78 <autoware_control_msgs__msg__Lateral__fini>
 8014ef0:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8014ef4:	f000 f870 	bl	8014fd8 <autoware_control_msgs__msg__Longitudinal__fini>
 8014ef8:	4620      	mov	r0, r4
 8014efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014efe:	4628      	mov	r0, r5
 8014f00:	f000 f95c 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014f04:	4630      	mov	r0, r6
 8014f06:	e7d9      	b.n	8014ebc <autoware_control_msgs__msg__Control__init+0x60>

08014f08 <autoware_control_msgs__msg__Control__fini>:
 8014f08:	b188      	cbz	r0, 8014f2e <autoware_control_msgs__msg__Control__fini+0x26>
 8014f0a:	b510      	push	{r4, lr}
 8014f0c:	4604      	mov	r4, r0
 8014f0e:	f000 f955 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014f12:	f104 0008 	add.w	r0, r4, #8
 8014f16:	f000 f951 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014f1a:	f104 0010 	add.w	r0, r4, #16
 8014f1e:	f000 f82b 	bl	8014f78 <autoware_control_msgs__msg__Lateral__fini>
 8014f22:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8014f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f2a:	f000 b855 	b.w	8014fd8 <autoware_control_msgs__msg__Longitudinal__fini>
 8014f2e:	4770      	bx	lr

08014f30 <autoware_control_msgs__msg__Lateral__init>:
 8014f30:	b570      	push	{r4, r5, r6, lr}
 8014f32:	4605      	mov	r5, r0
 8014f34:	b1a8      	cbz	r0, 8014f62 <autoware_control_msgs__msg__Lateral__init+0x32>
 8014f36:	f000 f93d 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	b140      	cbz	r0, 8014f50 <autoware_control_msgs__msg__Lateral__init+0x20>
 8014f3e:	f105 0608 	add.w	r6, r5, #8
 8014f42:	4630      	mov	r0, r6
 8014f44:	f000 f936 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 8014f48:	4604      	mov	r4, r0
 8014f4a:	b168      	cbz	r0, 8014f68 <autoware_control_msgs__msg__Lateral__init+0x38>
 8014f4c:	4620      	mov	r0, r4
 8014f4e:	bd70      	pop	{r4, r5, r6, pc}
 8014f50:	4628      	mov	r0, r5
 8014f52:	f000 f933 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014f56:	f105 0008 	add.w	r0, r5, #8
 8014f5a:	f000 f92f 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014f5e:	4620      	mov	r0, r4
 8014f60:	bd70      	pop	{r4, r5, r6, pc}
 8014f62:	4604      	mov	r4, r0
 8014f64:	4620      	mov	r0, r4
 8014f66:	bd70      	pop	{r4, r5, r6, pc}
 8014f68:	4628      	mov	r0, r5
 8014f6a:	f000 f927 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014f6e:	4630      	mov	r0, r6
 8014f70:	f000 f924 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014f74:	e7ea      	b.n	8014f4c <autoware_control_msgs__msg__Lateral__init+0x1c>
 8014f76:	bf00      	nop

08014f78 <autoware_control_msgs__msg__Lateral__fini>:
 8014f78:	b148      	cbz	r0, 8014f8e <autoware_control_msgs__msg__Lateral__fini+0x16>
 8014f7a:	b510      	push	{r4, lr}
 8014f7c:	4604      	mov	r4, r0
 8014f7e:	f000 f91d 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014f82:	f104 0008 	add.w	r0, r4, #8
 8014f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f8a:	f000 b917 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 8014f8e:	4770      	bx	lr

08014f90 <autoware_control_msgs__msg__Longitudinal__init>:
 8014f90:	b570      	push	{r4, r5, r6, lr}
 8014f92:	4605      	mov	r5, r0
 8014f94:	b1a8      	cbz	r0, 8014fc2 <autoware_control_msgs__msg__Longitudinal__init+0x32>
 8014f96:	f000 f90d 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 8014f9a:	4604      	mov	r4, r0
 8014f9c:	b140      	cbz	r0, 8014fb0 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 8014f9e:	f105 0608 	add.w	r6, r5, #8
 8014fa2:	4630      	mov	r0, r6
 8014fa4:	f000 f906 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 8014fa8:	4604      	mov	r4, r0
 8014faa:	b168      	cbz	r0, 8014fc8 <autoware_control_msgs__msg__Longitudinal__init+0x38>
 8014fac:	4620      	mov	r0, r4
 8014fae:	bd70      	pop	{r4, r5, r6, pc}
 8014fb0:	4628      	mov	r0, r5
 8014fb2:	f000 f903 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014fb6:	f105 0008 	add.w	r0, r5, #8
 8014fba:	f000 f8ff 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	bd70      	pop	{r4, r5, r6, pc}
 8014fc2:	4604      	mov	r4, r0
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	bd70      	pop	{r4, r5, r6, pc}
 8014fc8:	4628      	mov	r0, r5
 8014fca:	f000 f8f7 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014fce:	4630      	mov	r0, r6
 8014fd0:	f000 f8f4 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014fd4:	e7ea      	b.n	8014fac <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 8014fd6:	bf00      	nop

08014fd8 <autoware_control_msgs__msg__Longitudinal__fini>:
 8014fd8:	b148      	cbz	r0, 8014fee <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 8014fda:	b510      	push	{r4, lr}
 8014fdc:	4604      	mov	r4, r0
 8014fde:	f000 f8ed 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8014fe2:	f104 0008 	add.w	r0, r4, #8
 8014fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fea:	f000 b8e7 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 8014fee:	4770      	bx	lr

08014ff0 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8014ff0:	b538      	push	{r3, r4, r5, lr}
 8014ff2:	4604      	mov	r4, r0
 8014ff4:	b128      	cbz	r0, 8015002 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8014ff6:	f000 f8dd 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 8014ffa:	4605      	mov	r5, r0
 8014ffc:	b120      	cbz	r0, 8015008 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8014ffe:	4628      	mov	r0, r5
 8015000:	bd38      	pop	{r3, r4, r5, pc}
 8015002:	4605      	mov	r5, r0
 8015004:	4628      	mov	r0, r5
 8015006:	bd38      	pop	{r3, r4, r5, pc}
 8015008:	4620      	mov	r0, r4
 801500a:	f000 f8d7 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 801500e:	4628      	mov	r0, r5
 8015010:	bd38      	pop	{r3, r4, r5, pc}
 8015012:	bf00      	nop

08015014 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8015014:	b108      	cbz	r0, 801501a <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8015016:	f000 b8d1 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 801501a:	4770      	bx	lr

0801501c <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 801501c:	3800      	subs	r0, #0
 801501e:	bf18      	it	ne
 8015020:	2001      	movne	r0, #1
 8015022:	4770      	bx	lr

08015024 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8015024:	4770      	bx	lr
 8015026:	bf00      	nop

08015028 <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 8015028:	b538      	push	{r3, r4, r5, lr}
 801502a:	4604      	mov	r4, r0
 801502c:	b128      	cbz	r0, 801503a <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 801502e:	f000 f8c1 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 8015032:	4605      	mov	r5, r0
 8015034:	b120      	cbz	r0, 8015040 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 8015036:	4628      	mov	r0, r5
 8015038:	bd38      	pop	{r3, r4, r5, pc}
 801503a:	4605      	mov	r5, r0
 801503c:	4628      	mov	r0, r5
 801503e:	bd38      	pop	{r3, r4, r5, pc}
 8015040:	4620      	mov	r0, r4
 8015042:	f000 f8bb 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8015046:	4628      	mov	r0, r5
 8015048:	bd38      	pop	{r3, r4, r5, pc}
 801504a:	bf00      	nop

0801504c <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 801504c:	b108      	cbz	r0, 8015052 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 801504e:	f000 b8b5 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 8015052:	4770      	bx	lr

08015054 <autoware_vehicle_msgs__msg__GearCommand__init>:
 8015054:	b538      	push	{r3, r4, r5, lr}
 8015056:	4604      	mov	r4, r0
 8015058:	b128      	cbz	r0, 8015066 <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 801505a:	f000 f8ab 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 801505e:	4605      	mov	r5, r0
 8015060:	b120      	cbz	r0, 801506c <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 8015062:	4628      	mov	r0, r5
 8015064:	bd38      	pop	{r3, r4, r5, pc}
 8015066:	4605      	mov	r5, r0
 8015068:	4628      	mov	r0, r5
 801506a:	bd38      	pop	{r3, r4, r5, pc}
 801506c:	4620      	mov	r0, r4
 801506e:	f000 f8a5 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8015072:	4628      	mov	r0, r5
 8015074:	bd38      	pop	{r3, r4, r5, pc}
 8015076:	bf00      	nop

08015078 <autoware_vehicle_msgs__msg__GearCommand__fini>:
 8015078:	b108      	cbz	r0, 801507e <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 801507a:	f000 b89f 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 801507e:	4770      	bx	lr

08015080 <autoware_vehicle_msgs__msg__GearReport__init>:
 8015080:	b538      	push	{r3, r4, r5, lr}
 8015082:	4604      	mov	r4, r0
 8015084:	b128      	cbz	r0, 8015092 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 8015086:	f000 f895 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 801508a:	4605      	mov	r5, r0
 801508c:	b120      	cbz	r0, 8015098 <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 801508e:	4628      	mov	r0, r5
 8015090:	bd38      	pop	{r3, r4, r5, pc}
 8015092:	4605      	mov	r5, r0
 8015094:	4628      	mov	r0, r5
 8015096:	bd38      	pop	{r3, r4, r5, pc}
 8015098:	4620      	mov	r0, r4
 801509a:	f000 f88f 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 801509e:	4628      	mov	r0, r5
 80150a0:	bd38      	pop	{r3, r4, r5, pc}
 80150a2:	bf00      	nop

080150a4 <autoware_vehicle_msgs__msg__GearReport__fini>:
 80150a4:	b108      	cbz	r0, 80150aa <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 80150a6:	f000 b889 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 80150aa:	4770      	bx	lr

080150ac <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 80150ac:	b538      	push	{r3, r4, r5, lr}
 80150ae:	4604      	mov	r4, r0
 80150b0:	b128      	cbz	r0, 80150be <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 80150b2:	f000 f87f 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 80150b6:	4605      	mov	r5, r0
 80150b8:	b120      	cbz	r0, 80150c4 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 80150ba:	4628      	mov	r0, r5
 80150bc:	bd38      	pop	{r3, r4, r5, pc}
 80150be:	4605      	mov	r5, r0
 80150c0:	4628      	mov	r0, r5
 80150c2:	bd38      	pop	{r3, r4, r5, pc}
 80150c4:	4620      	mov	r0, r4
 80150c6:	f000 f879 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 80150ca:	4628      	mov	r0, r5
 80150cc:	bd38      	pop	{r3, r4, r5, pc}
 80150ce:	bf00      	nop

080150d0 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 80150d0:	b108      	cbz	r0, 80150d6 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 80150d2:	f000 b873 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 80150d6:	4770      	bx	lr

080150d8 <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 80150d8:	b538      	push	{r3, r4, r5, lr}
 80150da:	4604      	mov	r4, r0
 80150dc:	b128      	cbz	r0, 80150ea <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 80150de:	f000 f869 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 80150e2:	4605      	mov	r5, r0
 80150e4:	b120      	cbz	r0, 80150f0 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 80150e6:	4628      	mov	r0, r5
 80150e8:	bd38      	pop	{r3, r4, r5, pc}
 80150ea:	4605      	mov	r5, r0
 80150ec:	4628      	mov	r0, r5
 80150ee:	bd38      	pop	{r3, r4, r5, pc}
 80150f0:	4620      	mov	r0, r4
 80150f2:	f000 f863 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 80150f6:	4628      	mov	r0, r5
 80150f8:	bd38      	pop	{r3, r4, r5, pc}
 80150fa:	bf00      	nop

080150fc <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 80150fc:	b108      	cbz	r0, 8015102 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 80150fe:	f000 b85d 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 8015102:	4770      	bx	lr

08015104 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 8015104:	b538      	push	{r3, r4, r5, lr}
 8015106:	4604      	mov	r4, r0
 8015108:	b128      	cbz	r0, 8015116 <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 801510a:	f000 f853 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 801510e:	4605      	mov	r5, r0
 8015110:	b120      	cbz	r0, 801511c <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 8015112:	4628      	mov	r0, r5
 8015114:	bd38      	pop	{r3, r4, r5, pc}
 8015116:	4605      	mov	r5, r0
 8015118:	4628      	mov	r0, r5
 801511a:	bd38      	pop	{r3, r4, r5, pc}
 801511c:	4620      	mov	r0, r4
 801511e:	f000 f84d 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 8015122:	4628      	mov	r0, r5
 8015124:	bd38      	pop	{r3, r4, r5, pc}
 8015126:	bf00      	nop

08015128 <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 8015128:	b108      	cbz	r0, 801512e <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 801512a:	f000 b847 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 801512e:	4770      	bx	lr

08015130 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8015130:	b538      	push	{r3, r4, r5, lr}
 8015132:	4604      	mov	r4, r0
 8015134:	b128      	cbz	r0, 8015142 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 8015136:	f000 f83d 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 801513a:	4605      	mov	r5, r0
 801513c:	b120      	cbz	r0, 8015148 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 801513e:	4628      	mov	r0, r5
 8015140:	bd38      	pop	{r3, r4, r5, pc}
 8015142:	4605      	mov	r5, r0
 8015144:	4628      	mov	r0, r5
 8015146:	bd38      	pop	{r3, r4, r5, pc}
 8015148:	4620      	mov	r0, r4
 801514a:	f000 f837 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 801514e:	4628      	mov	r0, r5
 8015150:	bd38      	pop	{r3, r4, r5, pc}
 8015152:	bf00      	nop

08015154 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8015154:	b108      	cbz	r0, 801515a <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8015156:	f000 b831 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 801515a:	4770      	bx	lr

0801515c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 801515c:	b538      	push	{r3, r4, r5, lr}
 801515e:	4604      	mov	r4, r0
 8015160:	b128      	cbz	r0, 801516e <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 8015162:	f000 f827 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 8015166:	4605      	mov	r5, r0
 8015168:	b120      	cbz	r0, 8015174 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 801516a:	4628      	mov	r0, r5
 801516c:	bd38      	pop	{r3, r4, r5, pc}
 801516e:	4605      	mov	r5, r0
 8015170:	4628      	mov	r0, r5
 8015172:	bd38      	pop	{r3, r4, r5, pc}
 8015174:	4620      	mov	r0, r4
 8015176:	f000 f821 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 801517a:	4628      	mov	r0, r5
 801517c:	bd38      	pop	{r3, r4, r5, pc}
 801517e:	bf00      	nop

08015180 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8015180:	b108      	cbz	r0, 8015186 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8015182:	f000 b81b 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 8015186:	4770      	bx	lr

08015188 <autoware_vehicle_msgs__msg__VelocityReport__init>:
 8015188:	b538      	push	{r3, r4, r5, lr}
 801518a:	4604      	mov	r4, r0
 801518c:	b128      	cbz	r0, 801519a <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 801518e:	f005 fc15 	bl	801a9bc <std_msgs__msg__Header__init>
 8015192:	4605      	mov	r5, r0
 8015194:	b120      	cbz	r0, 80151a0 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 8015196:	4628      	mov	r0, r5
 8015198:	bd38      	pop	{r3, r4, r5, pc}
 801519a:	4605      	mov	r5, r0
 801519c:	4628      	mov	r0, r5
 801519e:	bd38      	pop	{r3, r4, r5, pc}
 80151a0:	4620      	mov	r0, r4
 80151a2:	f005 fc2f 	bl	801aa04 <std_msgs__msg__Header__fini>
 80151a6:	4628      	mov	r0, r5
 80151a8:	bd38      	pop	{r3, r4, r5, pc}
 80151aa:	bf00      	nop

080151ac <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 80151ac:	b108      	cbz	r0, 80151b2 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 80151ae:	f005 bc29 	b.w	801aa04 <std_msgs__msg__Header__fini>
 80151b2:	4770      	bx	lr

080151b4 <builtin_interfaces__msg__Time__init>:
 80151b4:	3800      	subs	r0, #0
 80151b6:	bf18      	it	ne
 80151b8:	2001      	movne	r0, #1
 80151ba:	4770      	bx	lr

080151bc <builtin_interfaces__msg__Time__fini>:
 80151bc:	4770      	bx	lr
 80151be:	bf00      	nop

080151c0 <ucdr_serialize_sequence_char>:
 80151c0:	b570      	push	{r4, r5, r6, lr}
 80151c2:	4615      	mov	r5, r2
 80151c4:	460e      	mov	r6, r1
 80151c6:	7d01      	ldrb	r1, [r0, #20]
 80151c8:	4604      	mov	r4, r0
 80151ca:	f7fd f9ff 	bl	80125cc <ucdr_serialize_endian_uint32_t>
 80151ce:	b90d      	cbnz	r5, 80151d4 <ucdr_serialize_sequence_char+0x14>
 80151d0:	2001      	movs	r0, #1
 80151d2:	bd70      	pop	{r4, r5, r6, pc}
 80151d4:	462b      	mov	r3, r5
 80151d6:	4632      	mov	r2, r6
 80151d8:	7d21      	ldrb	r1, [r4, #20]
 80151da:	4620      	mov	r0, r4
 80151dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151e0:	f005 bde4 	b.w	801adac <ucdr_serialize_endian_array_char>

080151e4 <ucdr_deserialize_sequence_char>:
 80151e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151e8:	461d      	mov	r5, r3
 80151ea:	4616      	mov	r6, r2
 80151ec:	460f      	mov	r7, r1
 80151ee:	461a      	mov	r2, r3
 80151f0:	7d01      	ldrb	r1, [r0, #20]
 80151f2:	4604      	mov	r4, r0
 80151f4:	f7fd fb12 	bl	801281c <ucdr_deserialize_endian_uint32_t>
 80151f8:	682b      	ldr	r3, [r5, #0]
 80151fa:	429e      	cmp	r6, r3
 80151fc:	d201      	bcs.n	8015202 <ucdr_deserialize_sequence_char+0x1e>
 80151fe:	2201      	movs	r2, #1
 8015200:	75a2      	strb	r2, [r4, #22]
 8015202:	b913      	cbnz	r3, 801520a <ucdr_deserialize_sequence_char+0x26>
 8015204:	2001      	movs	r0, #1
 8015206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801520a:	463a      	mov	r2, r7
 801520c:	7d21      	ldrb	r1, [r4, #20]
 801520e:	4620      	mov	r0, r4
 8015210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015214:	f005 bdfc 	b.w	801ae10 <ucdr_deserialize_endian_array_char>

08015218 <ucdr_serialize_sequence_uint8_t>:
 8015218:	b570      	push	{r4, r5, r6, lr}
 801521a:	4615      	mov	r5, r2
 801521c:	460e      	mov	r6, r1
 801521e:	7d01      	ldrb	r1, [r0, #20]
 8015220:	4604      	mov	r4, r0
 8015222:	f7fd f9d3 	bl	80125cc <ucdr_serialize_endian_uint32_t>
 8015226:	b90d      	cbnz	r5, 801522c <ucdr_serialize_sequence_uint8_t+0x14>
 8015228:	2001      	movs	r0, #1
 801522a:	bd70      	pop	{r4, r5, r6, pc}
 801522c:	462b      	mov	r3, r5
 801522e:	4632      	mov	r2, r6
 8015230:	7d21      	ldrb	r1, [r4, #20]
 8015232:	4620      	mov	r0, r4
 8015234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015238:	f005 be50 	b.w	801aedc <ucdr_serialize_endian_array_uint8_t>

0801523c <ucdr_deserialize_sequence_uint8_t>:
 801523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015240:	461d      	mov	r5, r3
 8015242:	4616      	mov	r6, r2
 8015244:	460f      	mov	r7, r1
 8015246:	461a      	mov	r2, r3
 8015248:	7d01      	ldrb	r1, [r0, #20]
 801524a:	4604      	mov	r4, r0
 801524c:	f7fd fae6 	bl	801281c <ucdr_deserialize_endian_uint32_t>
 8015250:	682b      	ldr	r3, [r5, #0]
 8015252:	429e      	cmp	r6, r3
 8015254:	d201      	bcs.n	801525a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8015256:	2201      	movs	r2, #1
 8015258:	75a2      	strb	r2, [r4, #22]
 801525a:	b913      	cbnz	r3, 8015262 <ucdr_deserialize_sequence_uint8_t+0x26>
 801525c:	2001      	movs	r0, #1
 801525e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015262:	463a      	mov	r2, r7
 8015264:	7d21      	ldrb	r1, [r4, #20]
 8015266:	4620      	mov	r0, r4
 8015268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801526c:	f005 be9c 	b.w	801afa8 <ucdr_deserialize_endian_array_uint8_t>

08015270 <rcl_client_get_rmw_handle>:
 8015270:	b118      	cbz	r0, 801527a <rcl_client_get_rmw_handle+0xa>
 8015272:	6800      	ldr	r0, [r0, #0]
 8015274:	b108      	cbz	r0, 801527a <rcl_client_get_rmw_handle+0xa>
 8015276:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801527a:	4770      	bx	lr

0801527c <rcl_send_request>:
 801527c:	b570      	push	{r4, r5, r6, lr}
 801527e:	b082      	sub	sp, #8
 8015280:	b1f8      	cbz	r0, 80152c2 <rcl_send_request+0x46>
 8015282:	4604      	mov	r4, r0
 8015284:	6800      	ldr	r0, [r0, #0]
 8015286:	b1e0      	cbz	r0, 80152c2 <rcl_send_request+0x46>
 8015288:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801528c:	b1cb      	cbz	r3, 80152c2 <rcl_send_request+0x46>
 801528e:	460e      	mov	r6, r1
 8015290:	b1e1      	cbz	r1, 80152cc <rcl_send_request+0x50>
 8015292:	4615      	mov	r5, r2
 8015294:	b1d2      	cbz	r2, 80152cc <rcl_send_request+0x50>
 8015296:	2105      	movs	r1, #5
 8015298:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801529c:	f002 ff74 	bl	8018188 <__atomic_load_8>
 80152a0:	4602      	mov	r2, r0
 80152a2:	460b      	mov	r3, r1
 80152a4:	4631      	mov	r1, r6
 80152a6:	e9c5 2300 	strd	r2, r3, [r5]
 80152aa:	6823      	ldr	r3, [r4, #0]
 80152ac:	462a      	mov	r2, r5
 80152ae:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80152b2:	f004 f991 	bl	80195d8 <rmw_send_request>
 80152b6:	4606      	mov	r6, r0
 80152b8:	b160      	cbz	r0, 80152d4 <rcl_send_request+0x58>
 80152ba:	2601      	movs	r6, #1
 80152bc:	4630      	mov	r0, r6
 80152be:	b002      	add	sp, #8
 80152c0:	bd70      	pop	{r4, r5, r6, pc}
 80152c2:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80152c6:	4630      	mov	r0, r6
 80152c8:	b002      	add	sp, #8
 80152ca:	bd70      	pop	{r4, r5, r6, pc}
 80152cc:	260b      	movs	r6, #11
 80152ce:	4630      	mov	r0, r6
 80152d0:	b002      	add	sp, #8
 80152d2:	bd70      	pop	{r4, r5, r6, pc}
 80152d4:	6820      	ldr	r0, [r4, #0]
 80152d6:	2105      	movs	r1, #5
 80152d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80152dc:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80152e0:	9100      	str	r1, [sp, #0]
 80152e2:	f002 ffbd 	bl	8018260 <__atomic_exchange_8>
 80152e6:	4630      	mov	r0, r6
 80152e8:	b002      	add	sp, #8
 80152ea:	bd70      	pop	{r4, r5, r6, pc}
 80152ec:	0000      	movs	r0, r0
	...

080152f0 <rcl_take_response>:
 80152f0:	b570      	push	{r4, r5, r6, lr}
 80152f2:	468e      	mov	lr, r1
 80152f4:	b08c      	sub	sp, #48	@ 0x30
 80152f6:	460c      	mov	r4, r1
 80152f8:	4616      	mov	r6, r2
 80152fa:	f10d 0c18 	add.w	ip, sp, #24
 80152fe:	4605      	mov	r5, r0
 8015300:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015304:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015308:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801530c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015310:	b35d      	cbz	r5, 801536a <rcl_take_response+0x7a>
 8015312:	682b      	ldr	r3, [r5, #0]
 8015314:	b34b      	cbz	r3, 801536a <rcl_take_response+0x7a>
 8015316:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801531a:	b330      	cbz	r0, 801536a <rcl_take_response+0x7a>
 801531c:	b346      	cbz	r6, 8015370 <rcl_take_response+0x80>
 801531e:	2300      	movs	r3, #0
 8015320:	4632      	mov	r2, r6
 8015322:	a902      	add	r1, sp, #8
 8015324:	f88d 3007 	strb.w	r3, [sp, #7]
 8015328:	f10d 0307 	add.w	r3, sp, #7
 801532c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8015378 <rcl_take_response+0x88>
 8015330:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015334:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015338:	f004 fa56 	bl	80197e8 <rmw_take_response>
 801533c:	4605      	mov	r5, r0
 801533e:	b9c8      	cbnz	r0, 8015374 <rcl_take_response+0x84>
 8015340:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015344:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8015348:	2a00      	cmp	r2, #0
 801534a:	bf08      	it	eq
 801534c:	461d      	moveq	r5, r3
 801534e:	f10d 0e18 	add.w	lr, sp, #24
 8015352:	46a4      	mov	ip, r4
 8015354:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015358:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801535c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015360:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015364:	4628      	mov	r0, r5
 8015366:	b00c      	add	sp, #48	@ 0x30
 8015368:	bd70      	pop	{r4, r5, r6, pc}
 801536a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801536e:	e7ee      	b.n	801534e <rcl_take_response+0x5e>
 8015370:	250b      	movs	r5, #11
 8015372:	e7ec      	b.n	801534e <rcl_take_response+0x5e>
 8015374:	2501      	movs	r5, #1
 8015376:	e7ea      	b.n	801534e <rcl_take_response+0x5e>
	...

08015380 <rcl_client_is_valid>:
 8015380:	b130      	cbz	r0, 8015390 <rcl_client_is_valid+0x10>
 8015382:	6800      	ldr	r0, [r0, #0]
 8015384:	b120      	cbz	r0, 8015390 <rcl_client_is_valid+0x10>
 8015386:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801538a:	3800      	subs	r0, #0
 801538c:	bf18      	it	ne
 801538e:	2001      	movne	r0, #1
 8015390:	4770      	bx	lr
 8015392:	bf00      	nop

08015394 <rcl_get_zero_initialized_context>:
 8015394:	4a03      	ldr	r2, [pc, #12]	@ (80153a4 <rcl_get_zero_initialized_context+0x10>)
 8015396:	4603      	mov	r3, r0
 8015398:	e892 0003 	ldmia.w	r2, {r0, r1}
 801539c:	e883 0003 	stmia.w	r3, {r0, r1}
 80153a0:	4618      	mov	r0, r3
 80153a2:	4770      	bx	lr
 80153a4:	08023408 	.word	0x08023408

080153a8 <rcl_context_is_valid>:
 80153a8:	b118      	cbz	r0, 80153b2 <rcl_context_is_valid+0xa>
 80153aa:	6840      	ldr	r0, [r0, #4]
 80153ac:	3800      	subs	r0, #0
 80153ae:	bf18      	it	ne
 80153b0:	2001      	movne	r0, #1
 80153b2:	4770      	bx	lr

080153b4 <__cleanup_context>:
 80153b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153b8:	4606      	mov	r6, r0
 80153ba:	2300      	movs	r3, #0
 80153bc:	6800      	ldr	r0, [r0, #0]
 80153be:	6073      	str	r3, [r6, #4]
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d049      	beq.n	8015458 <__cleanup_context+0xa4>
 80153c4:	6947      	ldr	r7, [r0, #20]
 80153c6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80153ca:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80153ce:	b137      	cbz	r7, 80153de <__cleanup_context+0x2a>
 80153d0:	3014      	adds	r0, #20
 80153d2:	f000 f9bd 	bl	8015750 <rcl_init_options_fini>
 80153d6:	4607      	mov	r7, r0
 80153d8:	2800      	cmp	r0, #0
 80153da:	d144      	bne.n	8015466 <__cleanup_context+0xb2>
 80153dc:	6830      	ldr	r0, [r6, #0]
 80153de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80153e0:	b143      	cbz	r3, 80153f4 <__cleanup_context+0x40>
 80153e2:	3028      	adds	r0, #40	@ 0x28
 80153e4:	f003 fe64 	bl	80190b0 <rmw_context_fini>
 80153e8:	b118      	cbz	r0, 80153f2 <__cleanup_context+0x3e>
 80153ea:	2f00      	cmp	r7, #0
 80153ec:	d03e      	beq.n	801546c <__cleanup_context+0xb8>
 80153ee:	f7ff f933 	bl	8014658 <rcutils_reset_error>
 80153f2:	6830      	ldr	r0, [r6, #0]
 80153f4:	6a03      	ldr	r3, [r0, #32]
 80153f6:	b1db      	cbz	r3, 8015430 <__cleanup_context+0x7c>
 80153f8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80153fc:	2a01      	cmp	r2, #1
 80153fe:	f17c 0100 	sbcs.w	r1, ip, #0
 8015402:	db11      	blt.n	8015428 <__cleanup_context+0x74>
 8015404:	2400      	movs	r4, #0
 8015406:	4625      	mov	r5, r4
 8015408:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801540c:	4649      	mov	r1, r9
 801540e:	b1b8      	cbz	r0, 8015440 <__cleanup_context+0x8c>
 8015410:	47c0      	blx	r8
 8015412:	6833      	ldr	r3, [r6, #0]
 8015414:	3401      	adds	r4, #1
 8015416:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801541a:	f145 0500 	adc.w	r5, r5, #0
 801541e:	6a1b      	ldr	r3, [r3, #32]
 8015420:	4294      	cmp	r4, r2
 8015422:	eb75 010c 	sbcs.w	r1, r5, ip
 8015426:	dbef      	blt.n	8015408 <__cleanup_context+0x54>
 8015428:	4618      	mov	r0, r3
 801542a:	4649      	mov	r1, r9
 801542c:	47c0      	blx	r8
 801542e:	6830      	ldr	r0, [r6, #0]
 8015430:	4649      	mov	r1, r9
 8015432:	47c0      	blx	r8
 8015434:	2300      	movs	r3, #0
 8015436:	4638      	mov	r0, r7
 8015438:	e9c6 3300 	strd	r3, r3, [r6]
 801543c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015440:	3401      	adds	r4, #1
 8015442:	f145 0500 	adc.w	r5, r5, #0
 8015446:	4294      	cmp	r4, r2
 8015448:	eb75 010c 	sbcs.w	r1, r5, ip
 801544c:	dbdc      	blt.n	8015408 <__cleanup_context+0x54>
 801544e:	4618      	mov	r0, r3
 8015450:	4649      	mov	r1, r9
 8015452:	47c0      	blx	r8
 8015454:	6830      	ldr	r0, [r6, #0]
 8015456:	e7eb      	b.n	8015430 <__cleanup_context+0x7c>
 8015458:	4607      	mov	r7, r0
 801545a:	2300      	movs	r3, #0
 801545c:	4638      	mov	r0, r7
 801545e:	e9c6 3300 	strd	r3, r3, [r6]
 8015462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015466:	f7ff f8f7 	bl	8014658 <rcutils_reset_error>
 801546a:	e7b7      	b.n	80153dc <__cleanup_context+0x28>
 801546c:	f009 f9e6 	bl	801e83c <rcl_convert_rmw_ret_to_rcl_ret>
 8015470:	4607      	mov	r7, r0
 8015472:	e7bc      	b.n	80153ee <__cleanup_context+0x3a>

08015474 <rcl_init>:
 8015474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015478:	1e05      	subs	r5, r0, #0
 801547a:	b09e      	sub	sp, #120	@ 0x78
 801547c:	460e      	mov	r6, r1
 801547e:	4690      	mov	r8, r2
 8015480:	461f      	mov	r7, r3
 8015482:	f340 809f 	ble.w	80155c4 <rcl_init+0x150>
 8015486:	2900      	cmp	r1, #0
 8015488:	f000 809f 	beq.w	80155ca <rcl_init+0x156>
 801548c:	f1a1 0e04 	sub.w	lr, r1, #4
 8015490:	f04f 0c00 	mov.w	ip, #0
 8015494:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015498:	f10c 0c01 	add.w	ip, ip, #1
 801549c:	2c00      	cmp	r4, #0
 801549e:	f000 8094 	beq.w	80155ca <rcl_init+0x156>
 80154a2:	4565      	cmp	r5, ip
 80154a4:	d1f6      	bne.n	8015494 <rcl_init+0x20>
 80154a6:	f1b8 0f00 	cmp.w	r8, #0
 80154aa:	f000 808e 	beq.w	80155ca <rcl_init+0x156>
 80154ae:	f8d8 4000 	ldr.w	r4, [r8]
 80154b2:	2c00      	cmp	r4, #0
 80154b4:	f000 8089 	beq.w	80155ca <rcl_init+0x156>
 80154b8:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80154bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154c2:	6823      	ldr	r3, [r4, #0]
 80154c4:	a819      	add	r0, sp, #100	@ 0x64
 80154c6:	f8cc 3000 	str.w	r3, [ip]
 80154ca:	f7ff f8a1 	bl	8014610 <rcutils_allocator_is_valid>
 80154ce:	f080 0001 	eor.w	r0, r0, #1
 80154d2:	b2c0      	uxtb	r0, r0
 80154d4:	2800      	cmp	r0, #0
 80154d6:	d178      	bne.n	80155ca <rcl_init+0x156>
 80154d8:	2f00      	cmp	r7, #0
 80154da:	d076      	beq.n	80155ca <rcl_init+0x156>
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d178      	bne.n	80155d4 <rcl_init+0x160>
 80154e2:	2178      	movs	r1, #120	@ 0x78
 80154e4:	2001      	movs	r0, #1
 80154e6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80154ea:	4798      	blx	r3
 80154ec:	4604      	mov	r4, r0
 80154ee:	6038      	str	r0, [r7, #0]
 80154f0:	2800      	cmp	r0, #0
 80154f2:	f000 80b6 	beq.w	8015662 <rcl_init+0x1ee>
 80154f6:	a802      	add	r0, sp, #8
 80154f8:	f003 f9ba 	bl	8018870 <rmw_get_zero_initialized_context>
 80154fc:	a902      	add	r1, sp, #8
 80154fe:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015502:	2250      	movs	r2, #80	@ 0x50
 8015504:	f00b fae5 	bl	8020ad2 <memcpy>
 8015508:	ac19      	add	r4, sp, #100	@ 0x64
 801550a:	f8d7 e000 	ldr.w	lr, [r7]
 801550e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015510:	46f4      	mov	ip, lr
 8015512:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015516:	6823      	ldr	r3, [r4, #0]
 8015518:	f10e 0114 	add.w	r1, lr, #20
 801551c:	4640      	mov	r0, r8
 801551e:	f8cc 3000 	str.w	r3, [ip]
 8015522:	f000 f93f 	bl	80157a4 <rcl_init_options_copy>
 8015526:	4604      	mov	r4, r0
 8015528:	2800      	cmp	r0, #0
 801552a:	d144      	bne.n	80155b6 <rcl_init+0x142>
 801552c:	f8d7 9000 	ldr.w	r9, [r7]
 8015530:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015534:	f8c9 0020 	str.w	r0, [r9, #32]
 8015538:	f8c9 5018 	str.w	r5, [r9, #24]
 801553c:	f8c9 801c 	str.w	r8, [r9, #28]
 8015540:	2d00      	cmp	r5, #0
 8015542:	d04e      	beq.n	80155e2 <rcl_init+0x16e>
 8015544:	2e00      	cmp	r6, #0
 8015546:	d04c      	beq.n	80155e2 <rcl_init+0x16e>
 8015548:	2104      	movs	r1, #4
 801554a:	4628      	mov	r0, r5
 801554c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8015550:	4798      	blx	r3
 8015552:	f8c9 0020 	str.w	r0, [r9, #32]
 8015556:	f8d7 9000 	ldr.w	r9, [r7]
 801555a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801555e:	46ca      	mov	sl, r9
 8015560:	b343      	cbz	r3, 80155b4 <rcl_init+0x140>
 8015562:	2d01      	cmp	r5, #1
 8015564:	f178 0300 	sbcs.w	r3, r8, #0
 8015568:	db3b      	blt.n	80155e2 <rcl_init+0x16e>
 801556a:	2400      	movs	r4, #0
 801556c:	3e04      	subs	r6, #4
 801556e:	46a1      	mov	r9, r4
 8015570:	e00b      	b.n	801558a <rcl_init+0x116>
 8015572:	6831      	ldr	r1, [r6, #0]
 8015574:	f00b faad 	bl	8020ad2 <memcpy>
 8015578:	3401      	adds	r4, #1
 801557a:	f149 0900 	adc.w	r9, r9, #0
 801557e:	45c8      	cmp	r8, r9
 8015580:	bf08      	it	eq
 8015582:	42a5      	cmpeq	r5, r4
 8015584:	d02b      	beq.n	80155de <rcl_init+0x16a>
 8015586:	f8d7 a000 	ldr.w	sl, [r7]
 801558a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801558e:	f7ea feb1 	bl	80002f4 <strlen>
 8015592:	1c42      	adds	r2, r0, #1
 8015594:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015596:	4610      	mov	r0, r2
 8015598:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801559a:	f8da a020 	ldr.w	sl, [sl, #32]
 801559e:	9201      	str	r2, [sp, #4]
 80155a0:	4798      	blx	r3
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80155a8:	6a1b      	ldr	r3, [r3, #32]
 80155aa:	9a01      	ldr	r2, [sp, #4]
 80155ac:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80155b0:	2800      	cmp	r0, #0
 80155b2:	d1de      	bne.n	8015572 <rcl_init+0xfe>
 80155b4:	240a      	movs	r4, #10
 80155b6:	4638      	mov	r0, r7
 80155b8:	f7ff fefc 	bl	80153b4 <__cleanup_context>
 80155bc:	4620      	mov	r0, r4
 80155be:	b01e      	add	sp, #120	@ 0x78
 80155c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155c4:	2900      	cmp	r1, #0
 80155c6:	f43f af6e 	beq.w	80154a6 <rcl_init+0x32>
 80155ca:	240b      	movs	r4, #11
 80155cc:	4620      	mov	r0, r4
 80155ce:	b01e      	add	sp, #120	@ 0x78
 80155d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155d4:	2464      	movs	r4, #100	@ 0x64
 80155d6:	4620      	mov	r0, r4
 80155d8:	b01e      	add	sp, #120	@ 0x78
 80155da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155de:	f8d7 9000 	ldr.w	r9, [r7]
 80155e2:	4926      	ldr	r1, [pc, #152]	@ (801567c <rcl_init+0x208>)
 80155e4:	680b      	ldr	r3, [r1, #0]
 80155e6:	3301      	adds	r3, #1
 80155e8:	d036      	beq.n	8015658 <rcl_init+0x1e4>
 80155ea:	461a      	mov	r2, r3
 80155ec:	2400      	movs	r4, #0
 80155ee:	600b      	str	r3, [r1, #0]
 80155f0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80155f4:	607b      	str	r3, [r7, #4]
 80155f6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80155f8:	3301      	adds	r3, #1
 80155fa:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80155fe:	d034      	beq.n	801566a <rcl_init+0x1f6>
 8015600:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8015604:	b93b      	cbnz	r3, 8015616 <rcl_init+0x1a2>
 8015606:	3030      	adds	r0, #48	@ 0x30
 8015608:	f000 f93a 	bl	8015880 <rcl_get_localhost_only>
 801560c:	4604      	mov	r4, r0
 801560e:	2800      	cmp	r0, #0
 8015610:	d1d1      	bne.n	80155b6 <rcl_init+0x142>
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	6958      	ldr	r0, [r3, #20]
 8015616:	aa18      	add	r2, sp, #96	@ 0x60
 8015618:	a917      	add	r1, sp, #92	@ 0x5c
 801561a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801561c:	f001 fa3e 	bl	8016a9c <rcl_validate_enclave_name>
 8015620:	4604      	mov	r4, r0
 8015622:	2800      	cmp	r0, #0
 8015624:	d1c7      	bne.n	80155b6 <rcl_init+0x142>
 8015626:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015628:	b9eb      	cbnz	r3, 8015666 <rcl_init+0x1f2>
 801562a:	6839      	ldr	r1, [r7, #0]
 801562c:	694b      	ldr	r3, [r1, #20]
 801562e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015632:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8015634:	f000 fd62 	bl	80160fc <rcl_get_security_options_from_environment>
 8015638:	4604      	mov	r4, r0
 801563a:	2800      	cmp	r0, #0
 801563c:	d1bb      	bne.n	80155b6 <rcl_init+0x142>
 801563e:	6839      	ldr	r1, [r7, #0]
 8015640:	6948      	ldr	r0, [r1, #20]
 8015642:	3128      	adds	r1, #40	@ 0x28
 8015644:	3018      	adds	r0, #24
 8015646:	f003 fbfd 	bl	8018e44 <rmw_init>
 801564a:	4604      	mov	r4, r0
 801564c:	2800      	cmp	r0, #0
 801564e:	d0bd      	beq.n	80155cc <rcl_init+0x158>
 8015650:	f009 f8f4 	bl	801e83c <rcl_convert_rmw_ret_to_rcl_ret>
 8015654:	4604      	mov	r4, r0
 8015656:	e7ae      	b.n	80155b6 <rcl_init+0x142>
 8015658:	2201      	movs	r2, #1
 801565a:	461c      	mov	r4, r3
 801565c:	600a      	str	r2, [r1, #0]
 801565e:	4613      	mov	r3, r2
 8015660:	e7c6      	b.n	80155f0 <rcl_init+0x17c>
 8015662:	240a      	movs	r4, #10
 8015664:	e7b2      	b.n	80155cc <rcl_init+0x158>
 8015666:	2401      	movs	r4, #1
 8015668:	e7a5      	b.n	80155b6 <rcl_init+0x142>
 801566a:	3024      	adds	r0, #36	@ 0x24
 801566c:	f009 f8fa 	bl	801e864 <rcl_get_default_domain_id>
 8015670:	4604      	mov	r4, r0
 8015672:	2800      	cmp	r0, #0
 8015674:	d19f      	bne.n	80155b6 <rcl_init+0x142>
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	6958      	ldr	r0, [r3, #20]
 801567a:	e7c1      	b.n	8015600 <rcl_init+0x18c>
 801567c:	240647a8 	.word	0x240647a8

08015680 <rcl_get_zero_initialized_init_options>:
 8015680:	2000      	movs	r0, #0
 8015682:	4770      	bx	lr

08015684 <rcl_init_options_init>:
 8015684:	b084      	sub	sp, #16
 8015686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015688:	b097      	sub	sp, #92	@ 0x5c
 801568a:	ae1d      	add	r6, sp, #116	@ 0x74
 801568c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8015690:	2800      	cmp	r0, #0
 8015692:	d058      	beq.n	8015746 <rcl_init_options_init+0xc2>
 8015694:	6803      	ldr	r3, [r0, #0]
 8015696:	4605      	mov	r5, r0
 8015698:	b133      	cbz	r3, 80156a8 <rcl_init_options_init+0x24>
 801569a:	2464      	movs	r4, #100	@ 0x64
 801569c:	4620      	mov	r0, r4
 801569e:	b017      	add	sp, #92	@ 0x5c
 80156a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80156a4:	b004      	add	sp, #16
 80156a6:	4770      	bx	lr
 80156a8:	4630      	mov	r0, r6
 80156aa:	f7fe ffb1 	bl	8014610 <rcutils_allocator_is_valid>
 80156ae:	2800      	cmp	r0, #0
 80156b0:	d049      	beq.n	8015746 <rcl_init_options_init+0xc2>
 80156b2:	46b4      	mov	ip, r6
 80156b4:	ac11      	add	r4, sp, #68	@ 0x44
 80156b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80156ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156bc:	f8dc 3000 	ldr.w	r3, [ip]
 80156c0:	2050      	movs	r0, #80	@ 0x50
 80156c2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80156c4:	6023      	str	r3, [r4, #0]
 80156c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80156c8:	4798      	blx	r3
 80156ca:	4604      	mov	r4, r0
 80156cc:	6028      	str	r0, [r5, #0]
 80156ce:	2800      	cmp	r0, #0
 80156d0:	d03b      	beq.n	801574a <rcl_init_options_init+0xc6>
 80156d2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80156d6:	4686      	mov	lr, r0
 80156d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80156dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80156e0:	f8dc 3000 	ldr.w	r3, [ip]
 80156e4:	a802      	add	r0, sp, #8
 80156e6:	f8ce 3000 	str.w	r3, [lr]
 80156ea:	f003 f8d5 	bl	8018898 <rmw_get_zero_initialized_init_options>
 80156ee:	f10d 0e08 	add.w	lr, sp, #8
 80156f2:	f104 0c18 	add.w	ip, r4, #24
 80156f6:	682f      	ldr	r7, [r5, #0]
 80156f8:	ac20      	add	r4, sp, #128	@ 0x80
 80156fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80156fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015702:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015706:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801570a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801570e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015712:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015716:	e88c 0003 	stmia.w	ip, {r0, r1}
 801571a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801571e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015722:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8015726:	f107 0018 	add.w	r0, r7, #24
 801572a:	f003 fa8d 	bl	8018c48 <rmw_init_options_init>
 801572e:	4604      	mov	r4, r0
 8015730:	2800      	cmp	r0, #0
 8015732:	d0b3      	beq.n	801569c <rcl_init_options_init+0x18>
 8015734:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8015736:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015738:	6828      	ldr	r0, [r5, #0]
 801573a:	4798      	blx	r3
 801573c:	4620      	mov	r0, r4
 801573e:	f009 f87d 	bl	801e83c <rcl_convert_rmw_ret_to_rcl_ret>
 8015742:	4604      	mov	r4, r0
 8015744:	e7aa      	b.n	801569c <rcl_init_options_init+0x18>
 8015746:	240b      	movs	r4, #11
 8015748:	e7a8      	b.n	801569c <rcl_init_options_init+0x18>
 801574a:	240a      	movs	r4, #10
 801574c:	e7a6      	b.n	801569c <rcl_init_options_init+0x18>
 801574e:	bf00      	nop

08015750 <rcl_init_options_fini>:
 8015750:	b530      	push	{r4, r5, lr}
 8015752:	b087      	sub	sp, #28
 8015754:	b1f0      	cbz	r0, 8015794 <rcl_init_options_fini+0x44>
 8015756:	6803      	ldr	r3, [r0, #0]
 8015758:	4604      	mov	r4, r0
 801575a:	b1db      	cbz	r3, 8015794 <rcl_init_options_fini+0x44>
 801575c:	469c      	mov	ip, r3
 801575e:	f10d 0e04 	add.w	lr, sp, #4
 8015762:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015766:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801576a:	f8dc 3000 	ldr.w	r3, [ip]
 801576e:	a801      	add	r0, sp, #4
 8015770:	f8ce 3000 	str.w	r3, [lr]
 8015774:	f7fe ff4c 	bl	8014610 <rcutils_allocator_is_valid>
 8015778:	b160      	cbz	r0, 8015794 <rcl_init_options_fini+0x44>
 801577a:	6820      	ldr	r0, [r4, #0]
 801577c:	3018      	adds	r0, #24
 801577e:	f003 fb1d 	bl	8018dbc <rmw_init_options_fini>
 8015782:	4605      	mov	r5, r0
 8015784:	b950      	cbnz	r0, 801579c <rcl_init_options_fini+0x4c>
 8015786:	6820      	ldr	r0, [r4, #0]
 8015788:	9b02      	ldr	r3, [sp, #8]
 801578a:	9905      	ldr	r1, [sp, #20]
 801578c:	4798      	blx	r3
 801578e:	4628      	mov	r0, r5
 8015790:	b007      	add	sp, #28
 8015792:	bd30      	pop	{r4, r5, pc}
 8015794:	250b      	movs	r5, #11
 8015796:	4628      	mov	r0, r5
 8015798:	b007      	add	sp, #28
 801579a:	bd30      	pop	{r4, r5, pc}
 801579c:	f009 f84e 	bl	801e83c <rcl_convert_rmw_ret_to_rcl_ret>
 80157a0:	4605      	mov	r5, r0
 80157a2:	e7f8      	b.n	8015796 <rcl_init_options_fini+0x46>

080157a4 <rcl_init_options_copy>:
 80157a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157a8:	b094      	sub	sp, #80	@ 0x50
 80157aa:	2800      	cmp	r0, #0
 80157ac:	d05b      	beq.n	8015866 <rcl_init_options_copy+0xc2>
 80157ae:	4604      	mov	r4, r0
 80157b0:	6800      	ldr	r0, [r0, #0]
 80157b2:	2800      	cmp	r0, #0
 80157b4:	d057      	beq.n	8015866 <rcl_init_options_copy+0xc2>
 80157b6:	460e      	mov	r6, r1
 80157b8:	f7fe ff2a 	bl	8014610 <rcutils_allocator_is_valid>
 80157bc:	2e00      	cmp	r6, #0
 80157be:	d052      	beq.n	8015866 <rcl_init_options_copy+0xc2>
 80157c0:	f080 0001 	eor.w	r0, r0, #1
 80157c4:	b2c0      	uxtb	r0, r0
 80157c6:	2800      	cmp	r0, #0
 80157c8:	d14d      	bne.n	8015866 <rcl_init_options_copy+0xc2>
 80157ca:	6833      	ldr	r3, [r6, #0]
 80157cc:	b123      	cbz	r3, 80157d8 <rcl_init_options_copy+0x34>
 80157ce:	2464      	movs	r4, #100	@ 0x64
 80157d0:	4620      	mov	r0, r4
 80157d2:	b014      	add	sp, #80	@ 0x50
 80157d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157d8:	6827      	ldr	r7, [r4, #0]
 80157da:	ad0f      	add	r5, sp, #60	@ 0x3c
 80157dc:	46bc      	mov	ip, r7
 80157de:	f8d7 8000 	ldr.w	r8, [r7]
 80157e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80157e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80157e8:	f8dc 3000 	ldr.w	r3, [ip]
 80157ec:	2050      	movs	r0, #80	@ 0x50
 80157ee:	4619      	mov	r1, r3
 80157f0:	602b      	str	r3, [r5, #0]
 80157f2:	47c0      	blx	r8
 80157f4:	4605      	mov	r5, r0
 80157f6:	6030      	str	r0, [r6, #0]
 80157f8:	b3d0      	cbz	r0, 8015870 <rcl_init_options_copy+0xcc>
 80157fa:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80157fe:	4686      	mov	lr, r0
 8015800:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015804:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015808:	f8dc 3000 	ldr.w	r3, [ip]
 801580c:	4668      	mov	r0, sp
 801580e:	f8ce 3000 	str.w	r3, [lr]
 8015812:	f003 f841 	bl	8018898 <rmw_get_zero_initialized_init_options>
 8015816:	46ee      	mov	lr, sp
 8015818:	f105 0c18 	add.w	ip, r5, #24
 801581c:	6824      	ldr	r4, [r4, #0]
 801581e:	6835      	ldr	r5, [r6, #0]
 8015820:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015824:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015828:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801582c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015830:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015834:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015838:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801583c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015840:	f104 0018 	add.w	r0, r4, #24
 8015844:	f105 0118 	add.w	r1, r5, #24
 8015848:	f003 fa66 	bl	8018d18 <rmw_init_options_copy>
 801584c:	4604      	mov	r4, r0
 801584e:	2800      	cmp	r0, #0
 8015850:	d0be      	beq.n	80157d0 <rcl_init_options_copy+0x2c>
 8015852:	f7fe feeb 	bl	801462c <rcutils_get_error_string>
 8015856:	f7fe feff 	bl	8014658 <rcutils_reset_error>
 801585a:	4630      	mov	r0, r6
 801585c:	f7ff ff78 	bl	8015750 <rcl_init_options_fini>
 8015860:	b140      	cbz	r0, 8015874 <rcl_init_options_copy+0xd0>
 8015862:	4604      	mov	r4, r0
 8015864:	e7b4      	b.n	80157d0 <rcl_init_options_copy+0x2c>
 8015866:	240b      	movs	r4, #11
 8015868:	4620      	mov	r0, r4
 801586a:	b014      	add	sp, #80	@ 0x50
 801586c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015870:	240a      	movs	r4, #10
 8015872:	e7ad      	b.n	80157d0 <rcl_init_options_copy+0x2c>
 8015874:	4620      	mov	r0, r4
 8015876:	b014      	add	sp, #80	@ 0x50
 8015878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801587c:	f008 bfde 	b.w	801e83c <rcl_convert_rmw_ret_to_rcl_ret>

08015880 <rcl_get_localhost_only>:
 8015880:	b510      	push	{r4, lr}
 8015882:	2300      	movs	r3, #0
 8015884:	b082      	sub	sp, #8
 8015886:	9301      	str	r3, [sp, #4]
 8015888:	b1b8      	cbz	r0, 80158ba <rcl_get_localhost_only+0x3a>
 801588a:	4604      	mov	r4, r0
 801588c:	a901      	add	r1, sp, #4
 801588e:	480c      	ldr	r0, [pc, #48]	@ (80158c0 <rcl_get_localhost_only+0x40>)
 8015890:	f002 fd1e 	bl	80182d0 <rcutils_get_env>
 8015894:	b110      	cbz	r0, 801589c <rcl_get_localhost_only+0x1c>
 8015896:	2001      	movs	r0, #1
 8015898:	b002      	add	sp, #8
 801589a:	bd10      	pop	{r4, pc}
 801589c:	9b01      	ldr	r3, [sp, #4]
 801589e:	b113      	cbz	r3, 80158a6 <rcl_get_localhost_only+0x26>
 80158a0:	781a      	ldrb	r2, [r3, #0]
 80158a2:	2a31      	cmp	r2, #49	@ 0x31
 80158a4:	d004      	beq.n	80158b0 <rcl_get_localhost_only+0x30>
 80158a6:	2302      	movs	r3, #2
 80158a8:	2000      	movs	r0, #0
 80158aa:	7023      	strb	r3, [r4, #0]
 80158ac:	b002      	add	sp, #8
 80158ae:	bd10      	pop	{r4, pc}
 80158b0:	785b      	ldrb	r3, [r3, #1]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d1f7      	bne.n	80158a6 <rcl_get_localhost_only+0x26>
 80158b6:	2301      	movs	r3, #1
 80158b8:	e7f6      	b.n	80158a8 <rcl_get_localhost_only+0x28>
 80158ba:	200b      	movs	r0, #11
 80158bc:	b002      	add	sp, #8
 80158be:	bd10      	pop	{r4, pc}
 80158c0:	08023410 	.word	0x08023410

080158c4 <rcl_get_zero_initialized_node>:
 80158c4:	4a03      	ldr	r2, [pc, #12]	@ (80158d4 <rcl_get_zero_initialized_node+0x10>)
 80158c6:	4603      	mov	r3, r0
 80158c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80158cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80158d0:	4618      	mov	r0, r3
 80158d2:	4770      	bx	lr
 80158d4:	08023440 	.word	0x08023440

080158d8 <rcl_node_init>:
 80158d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158dc:	b0a9      	sub	sp, #164	@ 0xa4
 80158de:	4604      	mov	r4, r0
 80158e0:	460e      	mov	r6, r1
 80158e2:	4615      	mov	r5, r2
 80158e4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80158e8:	a823      	add	r0, sp, #140	@ 0x8c
 80158ea:	461f      	mov	r7, r3
 80158ec:	f009 f9e0 	bl	801ecb0 <rcl_guard_condition_get_default_options>
 80158f0:	f1b8 0f00 	cmp.w	r8, #0
 80158f4:	f000 80f3 	beq.w	8015ade <rcl_node_init+0x206>
 80158f8:	4640      	mov	r0, r8
 80158fa:	f7fe fe89 	bl	8014610 <rcutils_allocator_is_valid>
 80158fe:	2d00      	cmp	r5, #0
 8015900:	bf18      	it	ne
 8015902:	2c00      	cmpne	r4, #0
 8015904:	f080 0001 	eor.w	r0, r0, #1
 8015908:	bf0c      	ite	eq
 801590a:	f04f 0c01 	moveq.w	ip, #1
 801590e:	f04f 0c00 	movne.w	ip, #0
 8015912:	2e00      	cmp	r6, #0
 8015914:	bf08      	it	eq
 8015916:	f04c 0c01 	orreq.w	ip, ip, #1
 801591a:	ea4c 0c00 	orr.w	ip, ip, r0
 801591e:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 8015922:	f040 80dc 	bne.w	8015ade <rcl_node_init+0x206>
 8015926:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801592a:	f1ba 0f00 	cmp.w	sl, #0
 801592e:	f040 80fc 	bne.w	8015b2a <rcl_node_init+0x252>
 8015932:	2f00      	cmp	r7, #0
 8015934:	f000 80d3 	beq.w	8015ade <rcl_node_init+0x206>
 8015938:	4638      	mov	r0, r7
 801593a:	f7ff fd35 	bl	80153a8 <rcl_context_is_valid>
 801593e:	4683      	mov	fp, r0
 8015940:	2800      	cmp	r0, #0
 8015942:	f000 80d2 	beq.w	8015aea <rcl_node_init+0x212>
 8015946:	4652      	mov	r2, sl
 8015948:	4630      	mov	r0, r6
 801594a:	a922      	add	r1, sp, #136	@ 0x88
 801594c:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8015950:	f003 f8d0 	bl	8018af4 <rmw_validate_node_name>
 8015954:	4682      	mov	sl, r0
 8015956:	2800      	cmp	r0, #0
 8015958:	f040 80c3 	bne.w	8015ae2 <rcl_node_init+0x20a>
 801595c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801595e:	2800      	cmp	r0, #0
 8015960:	f040 80f1 	bne.w	8015b46 <rcl_node_init+0x26e>
 8015964:	4628      	mov	r0, r5
 8015966:	f7ea fcc5 	bl	80002f4 <strlen>
 801596a:	2800      	cmp	r0, #0
 801596c:	f040 80c0 	bne.w	8015af0 <rcl_node_init+0x218>
 8015970:	4d79      	ldr	r5, [pc, #484]	@ (8015b58 <rcl_node_init+0x280>)
 8015972:	a922      	add	r1, sp, #136	@ 0x88
 8015974:	2200      	movs	r2, #0
 8015976:	4628      	mov	r0, r5
 8015978:	f003 f89e 	bl	8018ab8 <rmw_validate_namespace>
 801597c:	4682      	mov	sl, r0
 801597e:	2800      	cmp	r0, #0
 8015980:	f040 80af 	bne.w	8015ae2 <rcl_node_init+0x20a>
 8015984:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015986:	2800      	cmp	r0, #0
 8015988:	f040 80d5 	bne.w	8015b36 <rcl_node_init+0x25e>
 801598c:	f8d8 3000 	ldr.w	r3, [r8]
 8015990:	2078      	movs	r0, #120	@ 0x78
 8015992:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015996:	4798      	blx	r3
 8015998:	4682      	mov	sl, r0
 801599a:	6060      	str	r0, [r4, #4]
 801599c:	2800      	cmp	r0, #0
 801599e:	f000 80cf 	beq.w	8015b40 <rcl_node_init+0x268>
 80159a2:	2200      	movs	r2, #0
 80159a4:	2300      	movs	r3, #0
 80159a6:	a808      	add	r0, sp, #32
 80159a8:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 80159ac:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 80159b0:	f000 f902 	bl	8015bb8 <rcl_node_get_default_options>
 80159b4:	a908      	add	r1, sp, #32
 80159b6:	4650      	mov	r0, sl
 80159b8:	2268      	movs	r2, #104	@ 0x68
 80159ba:	f00b f88a 	bl	8020ad2 <memcpy>
 80159be:	6861      	ldr	r1, [r4, #4]
 80159c0:	4640      	mov	r0, r8
 80159c2:	6027      	str	r7, [r4, #0]
 80159c4:	f000 f906 	bl	8015bd4 <rcl_node_options_copy>
 80159c8:	2800      	cmp	r0, #0
 80159ca:	d158      	bne.n	8015a7e <rcl_node_init+0x1a6>
 80159cc:	4628      	mov	r0, r5
 80159ce:	f7ea fc91 	bl	80002f4 <strlen>
 80159d2:	4428      	add	r0, r5
 80159d4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80159d8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80159dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80159de:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80159e2:	9300      	str	r3, [sp, #0]
 80159e4:	bf0c      	ite	eq
 80159e6:	4b5d      	ldreq	r3, [pc, #372]	@ (8015b5c <rcl_node_init+0x284>)
 80159e8:	4b5d      	ldrne	r3, [pc, #372]	@ (8015b60 <rcl_node_init+0x288>)
 80159ea:	9302      	str	r3, [sp, #8]
 80159ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80159f0:	9301      	str	r3, [sp, #4]
 80159f2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80159f6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80159fa:	f002 fc91 	bl	8018320 <rcutils_format_string_limit>
 80159fe:	6823      	ldr	r3, [r4, #0]
 8015a00:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8015a04:	4631      	mov	r1, r6
 8015a06:	6818      	ldr	r0, [r3, #0]
 8015a08:	462a      	mov	r2, r5
 8015a0a:	6866      	ldr	r6, [r4, #4]
 8015a0c:	3028      	adds	r0, #40	@ 0x28
 8015a0e:	f003 fc01 	bl	8019214 <rmw_create_node>
 8015a12:	6863      	ldr	r3, [r4, #4]
 8015a14:	66b0      	str	r0, [r6, #104]	@ 0x68
 8015a16:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	d032      	beq.n	8015a82 <rcl_node_init+0x1aa>
 8015a1c:	f003 fc8a 	bl	8019334 <rmw_node_get_graph_guard_condition>
 8015a20:	4682      	mov	sl, r0
 8015a22:	b360      	cbz	r0, 8015a7e <rcl_node_init+0x1a6>
 8015a24:	f8d8 3000 	ldr.w	r3, [r8]
 8015a28:	2008      	movs	r0, #8
 8015a2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a2e:	6866      	ldr	r6, [r4, #4]
 8015a30:	4798      	blx	r3
 8015a32:	6863      	ldr	r3, [r4, #4]
 8015a34:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8015a36:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8015a3a:	f1bb 0f00 	cmp.w	fp, #0
 8015a3e:	d020      	beq.n	8015a82 <rcl_node_init+0x1aa>
 8015a40:	a806      	add	r0, sp, #24
 8015a42:	ae23      	add	r6, sp, #140	@ 0x8c
 8015a44:	f009 f8a8 	bl	801eb98 <rcl_get_zero_initialized_guard_condition>
 8015a48:	a806      	add	r0, sp, #24
 8015a4a:	6863      	ldr	r3, [r4, #4]
 8015a4c:	46c4      	mov	ip, r8
 8015a4e:	c803      	ldmia	r0, {r0, r1}
 8015a50:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8015a54:	e88b 0003 	stmia.w	fp, {r0, r1}
 8015a58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015a5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015a5e:	f8dc 3000 	ldr.w	r3, [ip]
 8015a62:	6033      	str	r3, [r6, #0]
 8015a64:	ab28      	add	r3, sp, #160	@ 0xa0
 8015a66:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8015a6a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015a6e:	4651      	mov	r1, sl
 8015a70:	463a      	mov	r2, r7
 8015a72:	4670      	mov	r0, lr
 8015a74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015a76:	f009 f899 	bl	801ebac <rcl_guard_condition_init_from_rmw>
 8015a7a:	4682      	mov	sl, r0
 8015a7c:	b328      	cbz	r0, 8015aca <rcl_node_init+0x1f2>
 8015a7e:	6863      	ldr	r3, [r4, #4]
 8015a80:	b1f3      	cbz	r3, 8015ac0 <rcl_node_init+0x1e8>
 8015a82:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8015a84:	b128      	cbz	r0, 8015a92 <rcl_node_init+0x1ba>
 8015a86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a8a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a8e:	4798      	blx	r3
 8015a90:	6863      	ldr	r3, [r4, #4]
 8015a92:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8015a94:	b110      	cbz	r0, 8015a9c <rcl_node_init+0x1c4>
 8015a96:	f003 fbcf 	bl	8019238 <rmw_destroy_node>
 8015a9a:	6863      	ldr	r3, [r4, #4]
 8015a9c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015a9e:	b148      	cbz	r0, 8015ab4 <rcl_node_init+0x1dc>
 8015aa0:	f009 f8e0 	bl	801ec64 <rcl_guard_condition_fini>
 8015aa4:	6863      	ldr	r3, [r4, #4]
 8015aa6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015aaa:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015aac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ab0:	4798      	blx	r3
 8015ab2:	6863      	ldr	r3, [r4, #4]
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015aba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015abe:	4798      	blx	r3
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	f04f 0a01 	mov.w	sl, #1
 8015ac6:	e9c4 3300 	strd	r3, r3, [r4]
 8015aca:	f1b9 0f00 	cmp.w	r9, #0
 8015ace:	d008      	beq.n	8015ae2 <rcl_node_init+0x20a>
 8015ad0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ad4:	4628      	mov	r0, r5
 8015ad6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015ada:	4798      	blx	r3
 8015adc:	e001      	b.n	8015ae2 <rcl_node_init+0x20a>
 8015ade:	f04f 0a0b 	mov.w	sl, #11
 8015ae2:	4650      	mov	r0, sl
 8015ae4:	b029      	add	sp, #164	@ 0xa4
 8015ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aea:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8015aee:	e7f8      	b.n	8015ae2 <rcl_node_init+0x20a>
 8015af0:	782b      	ldrb	r3, [r5, #0]
 8015af2:	2b2f      	cmp	r3, #47	@ 0x2f
 8015af4:	f43f af3d 	beq.w	8015972 <rcl_node_init+0x9a>
 8015af8:	9503      	str	r5, [sp, #12]
 8015afa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015afe:	9300      	str	r3, [sp, #0]
 8015b00:	4b18      	ldr	r3, [pc, #96]	@ (8015b64 <rcl_node_init+0x28c>)
 8015b02:	9302      	str	r3, [sp, #8]
 8015b04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015b08:	9301      	str	r3, [sp, #4]
 8015b0a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015b0e:	f002 fc07 	bl	8018320 <rcutils_format_string_limit>
 8015b12:	4605      	mov	r5, r0
 8015b14:	b1e0      	cbz	r0, 8015b50 <rcl_node_init+0x278>
 8015b16:	2200      	movs	r2, #0
 8015b18:	a922      	add	r1, sp, #136	@ 0x88
 8015b1a:	9222      	str	r2, [sp, #136]	@ 0x88
 8015b1c:	f002 ffcc 	bl	8018ab8 <rmw_validate_namespace>
 8015b20:	4682      	mov	sl, r0
 8015b22:	2800      	cmp	r0, #0
 8015b24:	d1d4      	bne.n	8015ad0 <rcl_node_init+0x1f8>
 8015b26:	46d9      	mov	r9, fp
 8015b28:	e72c      	b.n	8015984 <rcl_node_init+0xac>
 8015b2a:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8015b2e:	4650      	mov	r0, sl
 8015b30:	b029      	add	sp, #164	@ 0xa4
 8015b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b36:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 8015b3a:	f002 ffcf 	bl	8018adc <rmw_namespace_validation_result_string>
 8015b3e:	e7c4      	b.n	8015aca <rcl_node_init+0x1f2>
 8015b40:	f04f 0a0a 	mov.w	sl, #10
 8015b44:	e7c1      	b.n	8015aca <rcl_node_init+0x1f2>
 8015b46:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 8015b4a:	f003 f827 	bl	8018b9c <rmw_node_name_validation_result_string>
 8015b4e:	e7c8      	b.n	8015ae2 <rcl_node_init+0x20a>
 8015b50:	f04f 0a0a 	mov.w	sl, #10
 8015b54:	e7c5      	b.n	8015ae2 <rcl_node_init+0x20a>
 8015b56:	bf00      	nop
 8015b58:	08023428 	.word	0x08023428
 8015b5c:	08023430 	.word	0x08023430
 8015b60:	08023438 	.word	0x08023438
 8015b64:	0802342c 	.word	0x0802342c

08015b68 <rcl_node_is_valid>:
 8015b68:	b130      	cbz	r0, 8015b78 <rcl_node_is_valid+0x10>
 8015b6a:	6843      	ldr	r3, [r0, #4]
 8015b6c:	b123      	cbz	r3, 8015b78 <rcl_node_is_valid+0x10>
 8015b6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b70:	b113      	cbz	r3, 8015b78 <rcl_node_is_valid+0x10>
 8015b72:	6800      	ldr	r0, [r0, #0]
 8015b74:	f7ff bc18 	b.w	80153a8 <rcl_context_is_valid>
 8015b78:	2000      	movs	r0, #0
 8015b7a:	4770      	bx	lr

08015b7c <rcl_node_get_name>:
 8015b7c:	b120      	cbz	r0, 8015b88 <rcl_node_get_name+0xc>
 8015b7e:	6840      	ldr	r0, [r0, #4]
 8015b80:	b110      	cbz	r0, 8015b88 <rcl_node_get_name+0xc>
 8015b82:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015b84:	b100      	cbz	r0, 8015b88 <rcl_node_get_name+0xc>
 8015b86:	6880      	ldr	r0, [r0, #8]
 8015b88:	4770      	bx	lr
 8015b8a:	bf00      	nop

08015b8c <rcl_node_get_namespace>:
 8015b8c:	b120      	cbz	r0, 8015b98 <rcl_node_get_namespace+0xc>
 8015b8e:	6840      	ldr	r0, [r0, #4]
 8015b90:	b110      	cbz	r0, 8015b98 <rcl_node_get_namespace+0xc>
 8015b92:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015b94:	b100      	cbz	r0, 8015b98 <rcl_node_get_namespace+0xc>
 8015b96:	68c0      	ldr	r0, [r0, #12]
 8015b98:	4770      	bx	lr
 8015b9a:	bf00      	nop

08015b9c <rcl_node_get_options>:
 8015b9c:	b128      	cbz	r0, 8015baa <rcl_node_get_options+0xe>
 8015b9e:	6840      	ldr	r0, [r0, #4]
 8015ba0:	b118      	cbz	r0, 8015baa <rcl_node_get_options+0xe>
 8015ba2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	bf08      	it	eq
 8015ba8:	2000      	moveq	r0, #0
 8015baa:	4770      	bx	lr

08015bac <rcl_node_get_rmw_handle>:
 8015bac:	b110      	cbz	r0, 8015bb4 <rcl_node_get_rmw_handle+0x8>
 8015bae:	6840      	ldr	r0, [r0, #4]
 8015bb0:	b100      	cbz	r0, 8015bb4 <rcl_node_get_rmw_handle+0x8>
 8015bb2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015bb4:	4770      	bx	lr
 8015bb6:	bf00      	nop

08015bb8 <rcl_node_get_default_options>:
 8015bb8:	b510      	push	{r4, lr}
 8015bba:	4604      	mov	r4, r0
 8015bbc:	2268      	movs	r2, #104	@ 0x68
 8015bbe:	2100      	movs	r1, #0
 8015bc0:	f00a fe68 	bl	8020894 <memset>
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	f7fe fd15 	bl	80145f4 <rcutils_get_default_allocator>
 8015bca:	2301      	movs	r3, #1
 8015bcc:	4620      	mov	r0, r4
 8015bce:	7523      	strb	r3, [r4, #20]
 8015bd0:	bd10      	pop	{r4, pc}
 8015bd2:	bf00      	nop

08015bd4 <rcl_node_options_copy>:
 8015bd4:	2800      	cmp	r0, #0
 8015bd6:	bf18      	it	ne
 8015bd8:	4288      	cmpne	r0, r1
 8015bda:	d01b      	beq.n	8015c14 <rcl_node_options_copy+0x40>
 8015bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bde:	fab1 f681 	clz	r6, r1
 8015be2:	460c      	mov	r4, r1
 8015be4:	0976      	lsrs	r6, r6, #5
 8015be6:	b199      	cbz	r1, 8015c10 <rcl_node_options_copy+0x3c>
 8015be8:	4605      	mov	r5, r0
 8015bea:	8a87      	ldrh	r7, [r0, #20]
 8015bec:	4684      	mov	ip, r0
 8015bee:	468e      	mov	lr, r1
 8015bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015bf2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015bf6:	682b      	ldr	r3, [r5, #0]
 8015bf8:	2250      	movs	r2, #80	@ 0x50
 8015bfa:	f10c 0118 	add.w	r1, ip, #24
 8015bfe:	f104 0018 	add.w	r0, r4, #24
 8015c02:	f8ce 3000 	str.w	r3, [lr]
 8015c06:	82a7      	strh	r7, [r4, #20]
 8015c08:	f00a ff63 	bl	8020ad2 <memcpy>
 8015c0c:	4630      	mov	r0, r6
 8015c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c10:	200b      	movs	r0, #11
 8015c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c14:	200b      	movs	r0, #11
 8015c16:	4770      	bx	lr

08015c18 <rcl_node_resolve_name>:
 8015c18:	b082      	sub	sp, #8
 8015c1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c1e:	b091      	sub	sp, #68	@ 0x44
 8015c20:	ac1a      	add	r4, sp, #104	@ 0x68
 8015c22:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8015c26:	e884 000c 	stmia.w	r4, {r2, r3}
 8015c2a:	2800      	cmp	r0, #0
 8015c2c:	d03d      	beq.n	8015caa <rcl_node_resolve_name+0x92>
 8015c2e:	460c      	mov	r4, r1
 8015c30:	4605      	mov	r5, r0
 8015c32:	f7ff ffb3 	bl	8015b9c <rcl_node_get_options>
 8015c36:	2800      	cmp	r0, #0
 8015c38:	d03a      	beq.n	8015cb0 <rcl_node_resolve_name+0x98>
 8015c3a:	4628      	mov	r0, r5
 8015c3c:	f7ff ff9e 	bl	8015b7c <rcl_node_get_name>
 8015c40:	4606      	mov	r6, r0
 8015c42:	4628      	mov	r0, r5
 8015c44:	ad0b      	add	r5, sp, #44	@ 0x2c
 8015c46:	f7ff ffa1 	bl	8015b8c <rcl_node_get_namespace>
 8015c4a:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8015c4e:	4607      	mov	r7, r0
 8015c50:	46ac      	mov	ip, r5
 8015c52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c5a:	f8de 3000 	ldr.w	r3, [lr]
 8015c5e:	f8cc 3000 	str.w	r3, [ip]
 8015c62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015c64:	b30b      	cbz	r3, 8015caa <rcl_node_resolve_name+0x92>
 8015c66:	4689      	mov	r9, r1
 8015c68:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8015c6c:	f002 fcd0 	bl	8018610 <rcutils_get_zero_initialized_string_map>
 8015c70:	ab10      	add	r3, sp, #64	@ 0x40
 8015c72:	9008      	str	r0, [sp, #32]
 8015c74:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015c78:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015c7c:	2100      	movs	r1, #0
 8015c7e:	a808      	add	r0, sp, #32
 8015c80:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015c84:	f002 fd3a 	bl	80186fc <rcutils_string_map_init>
 8015c88:	4683      	mov	fp, r0
 8015c8a:	b1a0      	cbz	r0, 8015cb6 <rcl_node_resolve_name+0x9e>
 8015c8c:	f7fe fcce 	bl	801462c <rcutils_get_error_string>
 8015c90:	f7fe fce2 	bl	8014658 <rcutils_reset_error>
 8015c94:	f1bb 0f0a 	cmp.w	fp, #10
 8015c98:	bf18      	it	ne
 8015c9a:	f04f 0b01 	movne.w	fp, #1
 8015c9e:	4658      	mov	r0, fp
 8015ca0:	b011      	add	sp, #68	@ 0x44
 8015ca2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ca6:	b002      	add	sp, #8
 8015ca8:	4770      	bx	lr
 8015caa:	f04f 0b0b 	mov.w	fp, #11
 8015cae:	e7f6      	b.n	8015c9e <rcl_node_resolve_name+0x86>
 8015cb0:	f04f 0b01 	mov.w	fp, #1
 8015cb4:	e7f3      	b.n	8015c9e <rcl_node_resolve_name+0x86>
 8015cb6:	9009      	str	r0, [sp, #36]	@ 0x24
 8015cb8:	9007      	str	r0, [sp, #28]
 8015cba:	a808      	add	r0, sp, #32
 8015cbc:	f008 ff66 	bl	801eb8c <rcl_get_default_topic_name_substitutions>
 8015cc0:	4683      	mov	fp, r0
 8015cc2:	b180      	cbz	r0, 8015ce6 <rcl_node_resolve_name+0xce>
 8015cc4:	280a      	cmp	r0, #10
 8015cc6:	a808      	add	r0, sp, #32
 8015cc8:	bf18      	it	ne
 8015cca:	f04f 0b01 	movne.w	fp, #1
 8015cce:	f002 fd55 	bl	801877c <rcutils_string_map_fini>
 8015cd2:	4604      	mov	r4, r0
 8015cd4:	2800      	cmp	r0, #0
 8015cd6:	d15b      	bne.n	8015d90 <rcl_node_resolve_name+0x178>
 8015cd8:	4651      	mov	r1, sl
 8015cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015cdc:	47c8      	blx	r9
 8015cde:	4651      	mov	r1, sl
 8015ce0:	4620      	mov	r0, r4
 8015ce2:	47c8      	blx	r9
 8015ce4:	e7db      	b.n	8015c9e <rcl_node_resolve_name+0x86>
 8015ce6:	ab09      	add	r3, sp, #36	@ 0x24
 8015ce8:	46ec      	mov	ip, sp
 8015cea:	9305      	str	r3, [sp, #20]
 8015cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015cee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015cf2:	682b      	ldr	r3, [r5, #0]
 8015cf4:	463a      	mov	r2, r7
 8015cf6:	4631      	mov	r1, r6
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	f8cc 3000 	str.w	r3, [ip]
 8015cfe:	ab08      	add	r3, sp, #32
 8015d00:	f008 fde4 	bl	801e8cc <rcl_expand_topic_name>
 8015d04:	4683      	mov	fp, r0
 8015d06:	b9d8      	cbnz	r0, 8015d40 <rcl_node_resolve_name+0x128>
 8015d08:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8015d0e:	a90a      	add	r1, sp, #40	@ 0x28
 8015d10:	4620      	mov	r0, r4
 8015d12:	f002 fe01 	bl	8018918 <rmw_validate_full_topic_name>
 8015d16:	bb50      	cbnz	r0, 8015d6e <rcl_node_resolve_name+0x156>
 8015d18:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015d1a:	2d00      	cmp	r5, #0
 8015d1c:	d140      	bne.n	8015da0 <rcl_node_resolve_name+0x188>
 8015d1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015d20:	a808      	add	r0, sp, #32
 8015d22:	601c      	str	r4, [r3, #0]
 8015d24:	f002 fd2a 	bl	801877c <rcutils_string_map_fini>
 8015d28:	4683      	mov	fp, r0
 8015d2a:	2800      	cmp	r0, #0
 8015d2c:	d043      	beq.n	8015db6 <rcl_node_resolve_name+0x19e>
 8015d2e:	f7fe fc7d 	bl	801462c <rcutils_get_error_string>
 8015d32:	46a8      	mov	r8, r5
 8015d34:	f04f 0b01 	mov.w	fp, #1
 8015d38:	462c      	mov	r4, r5
 8015d3a:	f7fe fc8d 	bl	8014658 <rcutils_reset_error>
 8015d3e:	e00a      	b.n	8015d56 <rcl_node_resolve_name+0x13e>
 8015d40:	2867      	cmp	r0, #103	@ 0x67
 8015d42:	bf14      	ite	ne
 8015d44:	f04f 0800 	movne.w	r8, #0
 8015d48:	f008 0801 	andeq.w	r8, r8, #1
 8015d4c:	9c07      	ldr	r4, [sp, #28]
 8015d4e:	a808      	add	r0, sp, #32
 8015d50:	f002 fd14 	bl	801877c <rcutils_string_map_fini>
 8015d54:	bb50      	cbnz	r0, 8015dac <rcl_node_resolve_name+0x194>
 8015d56:	4651      	mov	r1, sl
 8015d58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015d5a:	47c8      	blx	r9
 8015d5c:	4651      	mov	r1, sl
 8015d5e:	4620      	mov	r0, r4
 8015d60:	47c8      	blx	r9
 8015d62:	f1b8 0f00 	cmp.w	r8, #0
 8015d66:	bf18      	it	ne
 8015d68:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8015d6c:	e797      	b.n	8015c9e <rcl_node_resolve_name+0x86>
 8015d6e:	f7fe fc5d 	bl	801462c <rcutils_get_error_string>
 8015d72:	f7fe fc71 	bl	8014658 <rcutils_reset_error>
 8015d76:	a808      	add	r0, sp, #32
 8015d78:	f002 fd00 	bl	801877c <rcutils_string_map_fini>
 8015d7c:	b998      	cbnz	r0, 8015da6 <rcl_node_resolve_name+0x18e>
 8015d7e:	4651      	mov	r1, sl
 8015d80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015d82:	47c8      	blx	r9
 8015d84:	4651      	mov	r1, sl
 8015d86:	4620      	mov	r0, r4
 8015d88:	f04f 0b01 	mov.w	fp, #1
 8015d8c:	47c8      	blx	r9
 8015d8e:	e786      	b.n	8015c9e <rcl_node_resolve_name+0x86>
 8015d90:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015d94:	f7fe fc4a 	bl	801462c <rcutils_get_error_string>
 8015d98:	f7fe fc5e 	bl	8014658 <rcutils_reset_error>
 8015d9c:	4644      	mov	r4, r8
 8015d9e:	e7da      	b.n	8015d56 <rcl_node_resolve_name+0x13e>
 8015da0:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8015da4:	e7d3      	b.n	8015d4e <rcl_node_resolve_name+0x136>
 8015da6:	46d8      	mov	r8, fp
 8015da8:	f04f 0b01 	mov.w	fp, #1
 8015dac:	f7fe fc3e 	bl	801462c <rcutils_get_error_string>
 8015db0:	f7fe fc52 	bl	8014658 <rcutils_reset_error>
 8015db4:	e7cf      	b.n	8015d56 <rcl_node_resolve_name+0x13e>
 8015db6:	4651      	mov	r1, sl
 8015db8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015dba:	47c8      	blx	r9
 8015dbc:	4651      	mov	r1, sl
 8015dbe:	4658      	mov	r0, fp
 8015dc0:	47c8      	blx	r9
 8015dc2:	e76c      	b.n	8015c9e <rcl_node_resolve_name+0x86>

08015dc4 <rcl_get_zero_initialized_publisher>:
 8015dc4:	4b01      	ldr	r3, [pc, #4]	@ (8015dcc <rcl_get_zero_initialized_publisher+0x8>)
 8015dc6:	6818      	ldr	r0, [r3, #0]
 8015dc8:	4770      	bx	lr
 8015dca:	bf00      	nop
 8015dcc:	08023448 	.word	0x08023448

08015dd0 <rcl_publisher_init>:
 8015dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dd4:	b088      	sub	sp, #32
 8015dd6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8015dd8:	2e00      	cmp	r6, #0
 8015dda:	d06b      	beq.n	8015eb4 <rcl_publisher_init+0xe4>
 8015ddc:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 8015de0:	4605      	mov	r5, r0
 8015de2:	460f      	mov	r7, r1
 8015de4:	4690      	mov	r8, r2
 8015de6:	4650      	mov	r0, sl
 8015de8:	4699      	mov	r9, r3
 8015dea:	f7fe fc11 	bl	8014610 <rcutils_allocator_is_valid>
 8015dee:	f080 0401 	eor.w	r4, r0, #1
 8015df2:	b2e4      	uxtb	r4, r4
 8015df4:	2c00      	cmp	r4, #0
 8015df6:	d15d      	bne.n	8015eb4 <rcl_publisher_init+0xe4>
 8015df8:	2d00      	cmp	r5, #0
 8015dfa:	d05b      	beq.n	8015eb4 <rcl_publisher_init+0xe4>
 8015dfc:	682b      	ldr	r3, [r5, #0]
 8015dfe:	b123      	cbz	r3, 8015e0a <rcl_publisher_init+0x3a>
 8015e00:	2464      	movs	r4, #100	@ 0x64
 8015e02:	4620      	mov	r0, r4
 8015e04:	b008      	add	sp, #32
 8015e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e0a:	4638      	mov	r0, r7
 8015e0c:	f7ff feac 	bl	8015b68 <rcl_node_is_valid>
 8015e10:	2800      	cmp	r0, #0
 8015e12:	d054      	beq.n	8015ebe <rcl_publisher_init+0xee>
 8015e14:	f1b8 0f00 	cmp.w	r8, #0
 8015e18:	d04c      	beq.n	8015eb4 <rcl_publisher_init+0xe4>
 8015e1a:	fab9 f389 	clz	r3, r9
 8015e1e:	095b      	lsrs	r3, r3, #5
 8015e20:	f1b9 0f00 	cmp.w	r9, #0
 8015e24:	d046      	beq.n	8015eb4 <rcl_publisher_init+0xe4>
 8015e26:	aa07      	add	r2, sp, #28
 8015e28:	9307      	str	r3, [sp, #28]
 8015e2a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8015e2e:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8015e32:	9205      	str	r2, [sp, #20]
 8015e34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015e38:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015e3c:	4649      	mov	r1, r9
 8015e3e:	4638      	mov	r0, r7
 8015e40:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8015e44:	f7ff fee8 	bl	8015c18 <rcl_node_resolve_name>
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	d14f      	bne.n	8015eec <rcl_publisher_init+0x11c>
 8015e4c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8015e4e:	20c8      	movs	r0, #200	@ 0xc8
 8015e50:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015e52:	4798      	blx	r3
 8015e54:	6028      	str	r0, [r5, #0]
 8015e56:	2800      	cmp	r0, #0
 8015e58:	d050      	beq.n	8015efc <rcl_publisher_init+0x12c>
 8015e5a:	4638      	mov	r0, r7
 8015e5c:	f7ff fea6 	bl	8015bac <rcl_node_get_rmw_handle>
 8015e60:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8015e64:	4641      	mov	r1, r8
 8015e66:	9a07      	ldr	r2, [sp, #28]
 8015e68:	9300      	str	r3, [sp, #0]
 8015e6a:	4633      	mov	r3, r6
 8015e6c:	682c      	ldr	r4, [r5, #0]
 8015e6e:	f003 fa67 	bl	8019340 <rmw_create_publisher>
 8015e72:	682b      	ldr	r3, [r5, #0]
 8015e74:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8015e78:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8015e7c:	b370      	cbz	r0, 8015edc <rcl_publisher_init+0x10c>
 8015e7e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8015e82:	f003 fb41 	bl	8019508 <rmw_publisher_get_actual_qos>
 8015e86:	682b      	ldr	r3, [r5, #0]
 8015e88:	4604      	mov	r4, r0
 8015e8a:	b9d0      	cbnz	r0, 8015ec2 <rcl_publisher_init+0xf2>
 8015e8c:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8015e90:	4631      	mov	r1, r6
 8015e92:	4618      	mov	r0, r3
 8015e94:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8015e98:	2270      	movs	r2, #112	@ 0x70
 8015e9a:	f00a fe1a 	bl	8020ad2 <memcpy>
 8015e9e:	683a      	ldr	r2, [r7, #0]
 8015ea0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8015ea4:	9807      	ldr	r0, [sp, #28]
 8015ea6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015ea8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015eaa:	4798      	blx	r3
 8015eac:	4620      	mov	r0, r4
 8015eae:	b008      	add	sp, #32
 8015eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eb4:	240b      	movs	r4, #11
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	b008      	add	sp, #32
 8015eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ebe:	24c8      	movs	r4, #200	@ 0xc8
 8015ec0:	e79f      	b.n	8015e02 <rcl_publisher_init+0x32>
 8015ec2:	b1cb      	cbz	r3, 8015ef8 <rcl_publisher_init+0x128>
 8015ec4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8015ec8:	b142      	cbz	r2, 8015edc <rcl_publisher_init+0x10c>
 8015eca:	4638      	mov	r0, r7
 8015ecc:	f7ff fe6e 	bl	8015bac <rcl_node_get_rmw_handle>
 8015ed0:	682b      	ldr	r3, [r5, #0]
 8015ed2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8015ed6:	f003 fb2b 	bl	8019530 <rmw_destroy_publisher>
 8015eda:	682b      	ldr	r3, [r5, #0]
 8015edc:	4618      	mov	r0, r3
 8015ede:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8015ee0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015ee2:	2401      	movs	r4, #1
 8015ee4:	4790      	blx	r2
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	602b      	str	r3, [r5, #0]
 8015eea:	e7db      	b.n	8015ea4 <rcl_publisher_init+0xd4>
 8015eec:	2867      	cmp	r0, #103	@ 0x67
 8015eee:	d007      	beq.n	8015f00 <rcl_publisher_init+0x130>
 8015ef0:	2869      	cmp	r0, #105	@ 0x69
 8015ef2:	d005      	beq.n	8015f00 <rcl_publisher_init+0x130>
 8015ef4:	280a      	cmp	r0, #10
 8015ef6:	d001      	beq.n	8015efc <rcl_publisher_init+0x12c>
 8015ef8:	2401      	movs	r4, #1
 8015efa:	e7d3      	b.n	8015ea4 <rcl_publisher_init+0xd4>
 8015efc:	240a      	movs	r4, #10
 8015efe:	e7d1      	b.n	8015ea4 <rcl_publisher_init+0xd4>
 8015f00:	2467      	movs	r4, #103	@ 0x67
 8015f02:	e7cf      	b.n	8015ea4 <rcl_publisher_init+0xd4>

08015f04 <rcl_publisher_get_default_options>:
 8015f04:	b570      	push	{r4, r5, r6, lr}
 8015f06:	4d14      	ldr	r5, [pc, #80]	@ (8015f58 <rcl_publisher_get_default_options+0x54>)
 8015f08:	b088      	sub	sp, #32
 8015f0a:	4604      	mov	r4, r0
 8015f0c:	2250      	movs	r2, #80	@ 0x50
 8015f0e:	4913      	ldr	r1, [pc, #76]	@ (8015f5c <rcl_publisher_get_default_options+0x58>)
 8015f10:	4628      	mov	r0, r5
 8015f12:	f00a fdde 	bl	8020ad2 <memcpy>
 8015f16:	a802      	add	r0, sp, #8
 8015f18:	f7fe fb6c 	bl	80145f4 <rcutils_get_default_allocator>
 8015f1c:	f10d 0c08 	add.w	ip, sp, #8
 8015f20:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8015f24:	466e      	mov	r6, sp
 8015f26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f2a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015f2e:	f8dc 3000 	ldr.w	r3, [ip]
 8015f32:	4630      	mov	r0, r6
 8015f34:	f8ce 3000 	str.w	r3, [lr]
 8015f38:	f002 fcbe 	bl	80188b8 <rmw_get_default_publisher_options>
 8015f3c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8015f40:	2270      	movs	r2, #112	@ 0x70
 8015f42:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015f46:	e883 0003 	stmia.w	r3, {r0, r1}
 8015f4a:	4629      	mov	r1, r5
 8015f4c:	4620      	mov	r0, r4
 8015f4e:	f00a fdc0 	bl	8020ad2 <memcpy>
 8015f52:	4620      	mov	r0, r4
 8015f54:	b008      	add	sp, #32
 8015f56:	bd70      	pop	{r4, r5, r6, pc}
 8015f58:	240647b0 	.word	0x240647b0
 8015f5c:	08023450 	.word	0x08023450

08015f60 <rcl_publisher_is_valid>:
 8015f60:	b1a0      	cbz	r0, 8015f8c <rcl_publisher_is_valid+0x2c>
 8015f62:	6803      	ldr	r3, [r0, #0]
 8015f64:	b510      	push	{r4, lr}
 8015f66:	4604      	mov	r4, r0
 8015f68:	b173      	cbz	r3, 8015f88 <rcl_publisher_is_valid+0x28>
 8015f6a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8015f6e:	b15a      	cbz	r2, 8015f88 <rcl_publisher_is_valid+0x28>
 8015f70:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8015f74:	f7ff fa18 	bl	80153a8 <rcl_context_is_valid>
 8015f78:	b130      	cbz	r0, 8015f88 <rcl_publisher_is_valid+0x28>
 8015f7a:	6823      	ldr	r3, [r4, #0]
 8015f7c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8015f80:	3800      	subs	r0, #0
 8015f82:	bf18      	it	ne
 8015f84:	2001      	movne	r0, #1
 8015f86:	bd10      	pop	{r4, pc}
 8015f88:	2000      	movs	r0, #0
 8015f8a:	bd10      	pop	{r4, pc}
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	4770      	bx	lr

08015f90 <rcl_publisher_is_valid_except_context>:
 8015f90:	b130      	cbz	r0, 8015fa0 <rcl_publisher_is_valid_except_context+0x10>
 8015f92:	6800      	ldr	r0, [r0, #0]
 8015f94:	b120      	cbz	r0, 8015fa0 <rcl_publisher_is_valid_except_context+0x10>
 8015f96:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8015f9a:	3800      	subs	r0, #0
 8015f9c:	bf18      	it	ne
 8015f9e:	2001      	movne	r0, #1
 8015fa0:	4770      	bx	lr
 8015fa2:	bf00      	nop

08015fa4 <exact_match_lookup>:
 8015fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fa6:	f102 0708 	add.w	r7, r2, #8
 8015faa:	460b      	mov	r3, r1
 8015fac:	b085      	sub	sp, #20
 8015fae:	4614      	mov	r4, r2
 8015fb0:	4606      	mov	r6, r0
 8015fb2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015fb6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015fba:	4618      	mov	r0, r3
 8015fbc:	4919      	ldr	r1, [pc, #100]	@ (8016024 <exact_match_lookup+0x80>)
 8015fbe:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015fc2:	f002 f99f 	bl	8018304 <rcutils_join_path>
 8015fc6:	7833      	ldrb	r3, [r6, #0]
 8015fc8:	4605      	mov	r5, r0
 8015fca:	2b2f      	cmp	r3, #47	@ 0x2f
 8015fcc:	d023      	beq.n	8016016 <exact_match_lookup+0x72>
 8015fce:	f104 030c 	add.w	r3, r4, #12
 8015fd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015fd6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015fda:	1c70      	adds	r0, r6, #1
 8015fdc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015fe0:	f002 f996 	bl	8018310 <rcutils_to_native_path>
 8015fe4:	4606      	mov	r6, r0
 8015fe6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015fea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015fee:	4631      	mov	r1, r6
 8015ff0:	4628      	mov	r0, r5
 8015ff2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015ff6:	f002 f985 	bl	8018304 <rcutils_join_path>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	4630      	mov	r0, r6
 8015ffe:	6862      	ldr	r2, [r4, #4]
 8016000:	461e      	mov	r6, r3
 8016002:	6921      	ldr	r1, [r4, #16]
 8016004:	4790      	blx	r2
 8016006:	4628      	mov	r0, r5
 8016008:	4635      	mov	r5, r6
 801600a:	6863      	ldr	r3, [r4, #4]
 801600c:	6921      	ldr	r1, [r4, #16]
 801600e:	4798      	blx	r3
 8016010:	4628      	mov	r0, r5
 8016012:	b005      	add	sp, #20
 8016014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016016:	7873      	ldrb	r3, [r6, #1]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d1d8      	bne.n	8015fce <exact_match_lookup+0x2a>
 801601c:	4628      	mov	r0, r5
 801601e:	b005      	add	sp, #20
 8016020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016022:	bf00      	nop
 8016024:	080234dc 	.word	0x080234dc

08016028 <rcl_get_secure_root>:
 8016028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801602c:	b085      	sub	sp, #20
 801602e:	b168      	cbz	r0, 801604c <rcl_get_secure_root+0x24>
 8016030:	4607      	mov	r7, r0
 8016032:	4608      	mov	r0, r1
 8016034:	460c      	mov	r4, r1
 8016036:	f7fe faeb 	bl	8014610 <rcutils_allocator_is_valid>
 801603a:	b138      	cbz	r0, 801604c <rcl_get_secure_root+0x24>
 801603c:	2300      	movs	r3, #0
 801603e:	482d      	ldr	r0, [pc, #180]	@ (80160f4 <rcl_get_secure_root+0xcc>)
 8016040:	a903      	add	r1, sp, #12
 8016042:	9303      	str	r3, [sp, #12]
 8016044:	f002 f944 	bl	80182d0 <rcutils_get_env>
 8016048:	4605      	mov	r5, r0
 801604a:	b120      	cbz	r0, 8016056 <rcl_get_secure_root+0x2e>
 801604c:	2500      	movs	r5, #0
 801604e:	4628      	mov	r0, r5
 8016050:	b005      	add	sp, #20
 8016052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016056:	9b03      	ldr	r3, [sp, #12]
 8016058:	781a      	ldrb	r2, [r3, #0]
 801605a:	2a00      	cmp	r2, #0
 801605c:	d0f6      	beq.n	801604c <rcl_get_secure_root+0x24>
 801605e:	f104 090c 	add.w	r9, r4, #12
 8016062:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016066:	e88d 0003 	stmia.w	sp, {r0, r1}
 801606a:	4618      	mov	r0, r3
 801606c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016070:	f002 fa90 	bl	8018594 <rcutils_strdup>
 8016074:	4680      	mov	r8, r0
 8016076:	2800      	cmp	r0, #0
 8016078:	d0e8      	beq.n	801604c <rcl_get_secure_root+0x24>
 801607a:	a903      	add	r1, sp, #12
 801607c:	481e      	ldr	r0, [pc, #120]	@ (80160f8 <rcl_get_secure_root+0xd0>)
 801607e:	9503      	str	r5, [sp, #12]
 8016080:	f002 f926 	bl	80182d0 <rcutils_get_env>
 8016084:	b160      	cbz	r0, 80160a0 <rcl_get_secure_root+0x78>
 8016086:	2600      	movs	r6, #0
 8016088:	4630      	mov	r0, r6
 801608a:	6863      	ldr	r3, [r4, #4]
 801608c:	6921      	ldr	r1, [r4, #16]
 801608e:	4798      	blx	r3
 8016090:	4640      	mov	r0, r8
 8016092:	6863      	ldr	r3, [r4, #4]
 8016094:	6921      	ldr	r1, [r4, #16]
 8016096:	4798      	blx	r3
 8016098:	4628      	mov	r0, r5
 801609a:	b005      	add	sp, #20
 801609c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160a0:	9b03      	ldr	r3, [sp, #12]
 80160a2:	781e      	ldrb	r6, [r3, #0]
 80160a4:	b1f6      	cbz	r6, 80160e4 <rcl_get_secure_root+0xbc>
 80160a6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80160aa:	e88d 0003 	stmia.w	sp, {r0, r1}
 80160ae:	4618      	mov	r0, r3
 80160b0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80160b4:	f002 fa6e 	bl	8018594 <rcutils_strdup>
 80160b8:	4606      	mov	r6, r0
 80160ba:	2800      	cmp	r0, #0
 80160bc:	d0e3      	beq.n	8016086 <rcl_get_secure_root+0x5e>
 80160be:	4622      	mov	r2, r4
 80160c0:	4641      	mov	r1, r8
 80160c2:	f7ff ff6f 	bl	8015fa4 <exact_match_lookup>
 80160c6:	4605      	mov	r5, r0
 80160c8:	2d00      	cmp	r5, #0
 80160ca:	d0dd      	beq.n	8016088 <rcl_get_secure_root+0x60>
 80160cc:	4628      	mov	r0, r5
 80160ce:	f002 f917 	bl	8018300 <rcutils_is_directory>
 80160d2:	4603      	mov	r3, r0
 80160d4:	2800      	cmp	r0, #0
 80160d6:	d1d7      	bne.n	8016088 <rcl_get_secure_root+0x60>
 80160d8:	4628      	mov	r0, r5
 80160da:	6921      	ldr	r1, [r4, #16]
 80160dc:	461d      	mov	r5, r3
 80160de:	6863      	ldr	r3, [r4, #4]
 80160e0:	4798      	blx	r3
 80160e2:	e7d1      	b.n	8016088 <rcl_get_secure_root+0x60>
 80160e4:	4622      	mov	r2, r4
 80160e6:	4638      	mov	r0, r7
 80160e8:	4641      	mov	r1, r8
 80160ea:	f7ff ff5b 	bl	8015fa4 <exact_match_lookup>
 80160ee:	4605      	mov	r5, r0
 80160f0:	e7ea      	b.n	80160c8 <rcl_get_secure_root+0xa0>
 80160f2:	bf00      	nop
 80160f4:	080234e8 	.word	0x080234e8
 80160f8:	08023500 	.word	0x08023500

080160fc <rcl_get_security_options_from_environment>:
 80160fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016100:	b082      	sub	sp, #8
 8016102:	2300      	movs	r3, #0
 8016104:	4606      	mov	r6, r0
 8016106:	460f      	mov	r7, r1
 8016108:	4821      	ldr	r0, [pc, #132]	@ (8016190 <rcl_get_security_options_from_environment+0x94>)
 801610a:	a901      	add	r1, sp, #4
 801610c:	4690      	mov	r8, r2
 801610e:	9301      	str	r3, [sp, #4]
 8016110:	f002 f8de 	bl	80182d0 <rcutils_get_env>
 8016114:	b120      	cbz	r0, 8016120 <rcl_get_security_options_from_environment+0x24>
 8016116:	2501      	movs	r5, #1
 8016118:	4628      	mov	r0, r5
 801611a:	b002      	add	sp, #8
 801611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016120:	4604      	mov	r4, r0
 8016122:	491c      	ldr	r1, [pc, #112]	@ (8016194 <rcl_get_security_options_from_environment+0x98>)
 8016124:	9801      	ldr	r0, [sp, #4]
 8016126:	f7ea f8db 	bl	80002e0 <strcmp>
 801612a:	4605      	mov	r5, r0
 801612c:	b9f0      	cbnz	r0, 801616c <rcl_get_security_options_from_environment+0x70>
 801612e:	9001      	str	r0, [sp, #4]
 8016130:	f1b8 0f00 	cmp.w	r8, #0
 8016134:	d021      	beq.n	801617a <rcl_get_security_options_from_environment+0x7e>
 8016136:	a901      	add	r1, sp, #4
 8016138:	4817      	ldr	r0, [pc, #92]	@ (8016198 <rcl_get_security_options_from_environment+0x9c>)
 801613a:	f002 f8c9 	bl	80182d0 <rcutils_get_env>
 801613e:	2800      	cmp	r0, #0
 8016140:	d1e9      	bne.n	8016116 <rcl_get_security_options_from_environment+0x1a>
 8016142:	4916      	ldr	r1, [pc, #88]	@ (801619c <rcl_get_security_options_from_environment+0xa0>)
 8016144:	9801      	ldr	r0, [sp, #4]
 8016146:	f7ea f8cb 	bl	80002e0 <strcmp>
 801614a:	4603      	mov	r3, r0
 801614c:	4639      	mov	r1, r7
 801614e:	4630      	mov	r0, r6
 8016150:	fab3 f383 	clz	r3, r3
 8016154:	095b      	lsrs	r3, r3, #5
 8016156:	f888 3000 	strb.w	r3, [r8]
 801615a:	f7ff ff65 	bl	8016028 <rcl_get_secure_root>
 801615e:	b170      	cbz	r0, 801617e <rcl_get_security_options_from_environment+0x82>
 8016160:	f8c8 0004 	str.w	r0, [r8, #4]
 8016164:	4628      	mov	r0, r5
 8016166:	b002      	add	sp, #8
 8016168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801616c:	4625      	mov	r5, r4
 801616e:	f888 4000 	strb.w	r4, [r8]
 8016172:	4628      	mov	r0, r5
 8016174:	b002      	add	sp, #8
 8016176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801617a:	250b      	movs	r5, #11
 801617c:	e7cc      	b.n	8016118 <rcl_get_security_options_from_environment+0x1c>
 801617e:	f898 5000 	ldrb.w	r5, [r8]
 8016182:	f1a5 0501 	sub.w	r5, r5, #1
 8016186:	fab5 f585 	clz	r5, r5
 801618a:	096d      	lsrs	r5, r5, #5
 801618c:	e7c4      	b.n	8016118 <rcl_get_security_options_from_environment+0x1c>
 801618e:	bf00      	nop
 8016190:	080234a0 	.word	0x080234a0
 8016194:	080234b4 	.word	0x080234b4
 8016198:	080234bc 	.word	0x080234bc
 801619c:	080234d4 	.word	0x080234d4

080161a0 <rcl_get_zero_initialized_service>:
 80161a0:	4b01      	ldr	r3, [pc, #4]	@ (80161a8 <rcl_get_zero_initialized_service+0x8>)
 80161a2:	6818      	ldr	r0, [r3, #0]
 80161a4:	4770      	bx	lr
 80161a6:	bf00      	nop
 80161a8:	08023520 	.word	0x08023520

080161ac <rcl_service_init>:
 80161ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161b0:	b088      	sub	sp, #32
 80161b2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80161b4:	b1ff      	cbz	r7, 80161f6 <rcl_service_init+0x4a>
 80161b6:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 80161ba:	4605      	mov	r5, r0
 80161bc:	460e      	mov	r6, r1
 80161be:	4691      	mov	r9, r2
 80161c0:	4650      	mov	r0, sl
 80161c2:	4698      	mov	r8, r3
 80161c4:	f7fe fa24 	bl	8014610 <rcutils_allocator_is_valid>
 80161c8:	f080 0401 	eor.w	r4, r0, #1
 80161cc:	b2e4      	uxtb	r4, r4
 80161ce:	b994      	cbnz	r4, 80161f6 <rcl_service_init+0x4a>
 80161d0:	b18d      	cbz	r5, 80161f6 <rcl_service_init+0x4a>
 80161d2:	4630      	mov	r0, r6
 80161d4:	f7ff fcc8 	bl	8015b68 <rcl_node_is_valid>
 80161d8:	2800      	cmp	r0, #0
 80161da:	d05d      	beq.n	8016298 <rcl_service_init+0xec>
 80161dc:	f1b8 0f00 	cmp.w	r8, #0
 80161e0:	d009      	beq.n	80161f6 <rcl_service_init+0x4a>
 80161e2:	f1b9 0f00 	cmp.w	r9, #0
 80161e6:	d006      	beq.n	80161f6 <rcl_service_init+0x4a>
 80161e8:	682b      	ldr	r3, [r5, #0]
 80161ea:	b14b      	cbz	r3, 8016200 <rcl_service_init+0x54>
 80161ec:	2464      	movs	r4, #100	@ 0x64
 80161ee:	4620      	mov	r0, r4
 80161f0:	b008      	add	sp, #32
 80161f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161f6:	240b      	movs	r4, #11
 80161f8:	4620      	mov	r0, r4
 80161fa:	b008      	add	sp, #32
 80161fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016200:	aa07      	add	r2, sp, #28
 8016202:	9304      	str	r3, [sp, #16]
 8016204:	9307      	str	r3, [sp, #28]
 8016206:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801620a:	9205      	str	r2, [sp, #20]
 801620c:	2201      	movs	r2, #1
 801620e:	9203      	str	r2, [sp, #12]
 8016210:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016214:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016218:	4641      	mov	r1, r8
 801621a:	4630      	mov	r0, r6
 801621c:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8016220:	f7ff fcfa 	bl	8015c18 <rcl_node_resolve_name>
 8016224:	2800      	cmp	r0, #0
 8016226:	d146      	bne.n	80162b6 <rcl_service_init+0x10a>
 8016228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801622a:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801622e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8016230:	4798      	blx	r3
 8016232:	6028      	str	r0, [r5, #0]
 8016234:	2800      	cmp	r0, #0
 8016236:	d046      	beq.n	80162c6 <rcl_service_init+0x11a>
 8016238:	4630      	mov	r0, r6
 801623a:	f7ff fcb7 	bl	8015bac <rcl_node_get_rmw_handle>
 801623e:	463b      	mov	r3, r7
 8016240:	4649      	mov	r1, r9
 8016242:	9a07      	ldr	r2, [sp, #28]
 8016244:	682c      	ldr	r4, [r5, #0]
 8016246:	f003 fb17 	bl	8019878 <rmw_create_service>
 801624a:	682b      	ldr	r3, [r5, #0]
 801624c:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108
 8016250:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016254:	b338      	cbz	r0, 80162a6 <rcl_service_init+0xfa>
 8016256:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 801625a:	f003 fc3f 	bl	8019adc <rmw_service_request_subscription_get_actual_qos>
 801625e:	bb00      	cbnz	r0, 80162a2 <rcl_service_init+0xf6>
 8016260:	682b      	ldr	r3, [r5, #0]
 8016262:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8016266:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801626a:	f003 fc23 	bl	8019ab4 <rmw_service_response_publisher_get_actual_qos>
 801626e:	4604      	mov	r4, r0
 8016270:	b9b8      	cbnz	r0, 80162a2 <rcl_service_init+0xf6>
 8016272:	6828      	ldr	r0, [r5, #0]
 8016274:	2268      	movs	r2, #104	@ 0x68
 8016276:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801627a:	4639      	mov	r1, r7
 801627c:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8016280:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8016284:	f00a fc25 	bl	8020ad2 <memcpy>
 8016288:	9807      	ldr	r0, [sp, #28]
 801628a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801628c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801628e:	4798      	blx	r3
 8016290:	4620      	mov	r0, r4
 8016292:	b008      	add	sp, #32
 8016294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016298:	24c8      	movs	r4, #200	@ 0xc8
 801629a:	4620      	mov	r0, r4
 801629c:	b008      	add	sp, #32
 801629e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162a2:	682b      	ldr	r3, [r5, #0]
 80162a4:	b16b      	cbz	r3, 80162c2 <rcl_service_init+0x116>
 80162a6:	4618      	mov	r0, r3
 80162a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80162aa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80162ac:	2401      	movs	r4, #1
 80162ae:	4790      	blx	r2
 80162b0:	2300      	movs	r3, #0
 80162b2:	602b      	str	r3, [r5, #0]
 80162b4:	e7e8      	b.n	8016288 <rcl_service_init+0xdc>
 80162b6:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 80162ba:	2b01      	cmp	r3, #1
 80162bc:	d905      	bls.n	80162ca <rcl_service_init+0x11e>
 80162be:	280a      	cmp	r0, #10
 80162c0:	d001      	beq.n	80162c6 <rcl_service_init+0x11a>
 80162c2:	2401      	movs	r4, #1
 80162c4:	e7e0      	b.n	8016288 <rcl_service_init+0xdc>
 80162c6:	240a      	movs	r4, #10
 80162c8:	e7de      	b.n	8016288 <rcl_service_init+0xdc>
 80162ca:	2468      	movs	r4, #104	@ 0x68
 80162cc:	e7dc      	b.n	8016288 <rcl_service_init+0xdc>
 80162ce:	bf00      	nop

080162d0 <rcl_service_get_default_options>:
 80162d0:	b530      	push	{r4, r5, lr}
 80162d2:	4d0f      	ldr	r5, [pc, #60]	@ (8016310 <rcl_service_get_default_options+0x40>)
 80162d4:	b087      	sub	sp, #28
 80162d6:	4604      	mov	r4, r0
 80162d8:	2250      	movs	r2, #80	@ 0x50
 80162da:	490e      	ldr	r1, [pc, #56]	@ (8016314 <rcl_service_get_default_options+0x44>)
 80162dc:	4628      	mov	r0, r5
 80162de:	f00a fbf8 	bl	8020ad2 <memcpy>
 80162e2:	4668      	mov	r0, sp
 80162e4:	f7fe f986 	bl	80145f4 <rcutils_get_default_allocator>
 80162e8:	46ec      	mov	ip, sp
 80162ea:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80162ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80162f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80162f6:	f8dc 3000 	ldr.w	r3, [ip]
 80162fa:	2268      	movs	r2, #104	@ 0x68
 80162fc:	4629      	mov	r1, r5
 80162fe:	4620      	mov	r0, r4
 8016300:	f8ce 3000 	str.w	r3, [lr]
 8016304:	f00a fbe5 	bl	8020ad2 <memcpy>
 8016308:	4620      	mov	r0, r4
 801630a:	b007      	add	sp, #28
 801630c:	bd30      	pop	{r4, r5, pc}
 801630e:	bf00      	nop
 8016310:	24064820 	.word	0x24064820
 8016314:	08023528 	.word	0x08023528

08016318 <rcl_service_get_rmw_handle>:
 8016318:	b118      	cbz	r0, 8016322 <rcl_service_get_rmw_handle+0xa>
 801631a:	6800      	ldr	r0, [r0, #0]
 801631c:	b108      	cbz	r0, 8016322 <rcl_service_get_rmw_handle+0xa>
 801631e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016322:	4770      	bx	lr

08016324 <rcl_take_request>:
 8016324:	b570      	push	{r4, r5, r6, lr}
 8016326:	468e      	mov	lr, r1
 8016328:	b08c      	sub	sp, #48	@ 0x30
 801632a:	460c      	mov	r4, r1
 801632c:	4616      	mov	r6, r2
 801632e:	f10d 0c18 	add.w	ip, sp, #24
 8016332:	4605      	mov	r5, r0
 8016334:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016338:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801633c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016340:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016344:	b30d      	cbz	r5, 801638a <rcl_take_request+0x66>
 8016346:	682b      	ldr	r3, [r5, #0]
 8016348:	b1fb      	cbz	r3, 801638a <rcl_take_request+0x66>
 801634a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801634e:	b1e0      	cbz	r0, 801638a <rcl_take_request+0x66>
 8016350:	b336      	cbz	r6, 80163a0 <rcl_take_request+0x7c>
 8016352:	2300      	movs	r3, #0
 8016354:	4632      	mov	r2, r6
 8016356:	a902      	add	r1, sp, #8
 8016358:	f88d 3007 	strb.w	r3, [sp, #7]
 801635c:	f10d 0307 	add.w	r3, sp, #7
 8016360:	f003 f988 	bl	8019674 <rmw_take_request>
 8016364:	4605      	mov	r5, r0
 8016366:	b198      	cbz	r0, 8016390 <rcl_take_request+0x6c>
 8016368:	280a      	cmp	r0, #10
 801636a:	bf18      	it	ne
 801636c:	2501      	movne	r5, #1
 801636e:	f10d 0e18 	add.w	lr, sp, #24
 8016372:	46a4      	mov	ip, r4
 8016374:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016378:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801637c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016380:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016384:	4628      	mov	r0, r5
 8016386:	b00c      	add	sp, #48	@ 0x30
 8016388:	bd70      	pop	{r4, r5, r6, pc}
 801638a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801638e:	e7ee      	b.n	801636e <rcl_take_request+0x4a>
 8016390:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016394:	f240 2359 	movw	r3, #601	@ 0x259
 8016398:	2a00      	cmp	r2, #0
 801639a:	bf08      	it	eq
 801639c:	461d      	moveq	r5, r3
 801639e:	e7e6      	b.n	801636e <rcl_take_request+0x4a>
 80163a0:	250b      	movs	r5, #11
 80163a2:	e7e4      	b.n	801636e <rcl_take_request+0x4a>

080163a4 <rcl_send_response>:
 80163a4:	b170      	cbz	r0, 80163c4 <rcl_send_response+0x20>
 80163a6:	6800      	ldr	r0, [r0, #0]
 80163a8:	b160      	cbz	r0, 80163c4 <rcl_send_response+0x20>
 80163aa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80163ae:	b148      	cbz	r0, 80163c4 <rcl_send_response+0x20>
 80163b0:	b169      	cbz	r1, 80163ce <rcl_send_response+0x2a>
 80163b2:	b510      	push	{r4, lr}
 80163b4:	b14a      	cbz	r2, 80163ca <rcl_send_response+0x26>
 80163b6:	f003 f9bb 	bl	8019730 <rmw_send_response>
 80163ba:	b110      	cbz	r0, 80163c2 <rcl_send_response+0x1e>
 80163bc:	2802      	cmp	r0, #2
 80163be:	bf18      	it	ne
 80163c0:	2001      	movne	r0, #1
 80163c2:	bd10      	pop	{r4, pc}
 80163c4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80163c8:	4770      	bx	lr
 80163ca:	200b      	movs	r0, #11
 80163cc:	bd10      	pop	{r4, pc}
 80163ce:	200b      	movs	r0, #11
 80163d0:	4770      	bx	lr
 80163d2:	bf00      	nop

080163d4 <rcl_service_is_valid>:
 80163d4:	b130      	cbz	r0, 80163e4 <rcl_service_is_valid+0x10>
 80163d6:	6800      	ldr	r0, [r0, #0]
 80163d8:	b120      	cbz	r0, 80163e4 <rcl_service_is_valid+0x10>
 80163da:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80163de:	3800      	subs	r0, #0
 80163e0:	bf18      	it	ne
 80163e2:	2001      	movne	r0, #1
 80163e4:	4770      	bx	lr
 80163e6:	bf00      	nop

080163e8 <rcl_get_zero_initialized_subscription>:
 80163e8:	4b01      	ldr	r3, [pc, #4]	@ (80163f0 <rcl_get_zero_initialized_subscription+0x8>)
 80163ea:	6818      	ldr	r0, [r3, #0]
 80163ec:	4770      	bx	lr
 80163ee:	bf00      	nop
 80163f0:	08023578 	.word	0x08023578

080163f4 <rcl_subscription_init>:
 80163f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163f8:	b088      	sub	sp, #32
 80163fa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80163fc:	b1ff      	cbz	r7, 801643e <rcl_subscription_init+0x4a>
 80163fe:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 8016402:	4605      	mov	r5, r0
 8016404:	460e      	mov	r6, r1
 8016406:	4691      	mov	r9, r2
 8016408:	4650      	mov	r0, sl
 801640a:	4698      	mov	r8, r3
 801640c:	f7fe f900 	bl	8014610 <rcutils_allocator_is_valid>
 8016410:	f080 0401 	eor.w	r4, r0, #1
 8016414:	b2e4      	uxtb	r4, r4
 8016416:	b994      	cbnz	r4, 801643e <rcl_subscription_init+0x4a>
 8016418:	b18d      	cbz	r5, 801643e <rcl_subscription_init+0x4a>
 801641a:	4630      	mov	r0, r6
 801641c:	f7ff fba4 	bl	8015b68 <rcl_node_is_valid>
 8016420:	2800      	cmp	r0, #0
 8016422:	d055      	beq.n	80164d0 <rcl_subscription_init+0xdc>
 8016424:	f1b9 0f00 	cmp.w	r9, #0
 8016428:	d009      	beq.n	801643e <rcl_subscription_init+0x4a>
 801642a:	f1b8 0f00 	cmp.w	r8, #0
 801642e:	d006      	beq.n	801643e <rcl_subscription_init+0x4a>
 8016430:	682b      	ldr	r3, [r5, #0]
 8016432:	b14b      	cbz	r3, 8016448 <rcl_subscription_init+0x54>
 8016434:	2464      	movs	r4, #100	@ 0x64
 8016436:	4620      	mov	r0, r4
 8016438:	b008      	add	sp, #32
 801643a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801643e:	240b      	movs	r4, #11
 8016440:	4620      	mov	r0, r4
 8016442:	b008      	add	sp, #32
 8016444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016448:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801644c:	aa07      	add	r2, sp, #28
 801644e:	9307      	str	r3, [sp, #28]
 8016450:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8016454:	9205      	str	r2, [sp, #20]
 8016456:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801645a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801645e:	4641      	mov	r1, r8
 8016460:	4630      	mov	r0, r6
 8016462:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8016466:	f7ff fbd7 	bl	8015c18 <rcl_node_resolve_name>
 801646a:	2800      	cmp	r0, #0
 801646c:	d15f      	bne.n	801652e <rcl_subscription_init+0x13a>
 801646e:	21c8      	movs	r1, #200	@ 0xc8
 8016470:	2001      	movs	r0, #1
 8016472:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 8016476:	4798      	blx	r3
 8016478:	6028      	str	r0, [r5, #0]
 801647a:	2800      	cmp	r0, #0
 801647c:	d05f      	beq.n	801653e <rcl_subscription_init+0x14a>
 801647e:	4630      	mov	r0, r6
 8016480:	f7ff fb94 	bl	8015bac <rcl_node_get_rmw_handle>
 8016484:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8016488:	4649      	mov	r1, r9
 801648a:	9a07      	ldr	r2, [sp, #28]
 801648c:	9300      	str	r3, [sp, #0]
 801648e:	463b      	mov	r3, r7
 8016490:	682c      	ldr	r4, [r5, #0]
 8016492:	f003 fb37 	bl	8019b04 <rmw_create_subscription>
 8016496:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 801649a:	682c      	ldr	r4, [r5, #0]
 801649c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 80164a0:	b348      	cbz	r0, 80164f6 <rcl_subscription_init+0x102>
 80164a2:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 80164a6:	f003 fc23 	bl	8019cf0 <rmw_subscription_get_actual_qos>
 80164aa:	4604      	mov	r4, r0
 80164ac:	b9a8      	cbnz	r0, 80164da <rcl_subscription_init+0xe6>
 80164ae:	6828      	ldr	r0, [r5, #0]
 80164b0:	2270      	movs	r2, #112	@ 0x70
 80164b2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80164b6:	4639      	mov	r1, r7
 80164b8:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80164bc:	f00a fb09 	bl	8020ad2 <memcpy>
 80164c0:	9807      	ldr	r0, [sp, #28]
 80164c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164c4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80164c6:	4798      	blx	r3
 80164c8:	4620      	mov	r0, r4
 80164ca:	b008      	add	sp, #32
 80164cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164d0:	24c8      	movs	r4, #200	@ 0xc8
 80164d2:	4620      	mov	r0, r4
 80164d4:	b008      	add	sp, #32
 80164d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164da:	682c      	ldr	r4, [r5, #0]
 80164dc:	b36c      	cbz	r4, 801653a <rcl_subscription_init+0x146>
 80164de:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 80164e2:	b14b      	cbz	r3, 80164f8 <rcl_subscription_init+0x104>
 80164e4:	4630      	mov	r0, r6
 80164e6:	f7ff fb61 	bl	8015bac <rcl_node_get_rmw_handle>
 80164ea:	682b      	ldr	r3, [r5, #0]
 80164ec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80164f0:	f003 fc12 	bl	8019d18 <rmw_destroy_subscription>
 80164f4:	682c      	ldr	r4, [r5, #0]
 80164f6:	b194      	cbz	r4, 801651e <rcl_subscription_init+0x12a>
 80164f8:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 80164fc:	4630      	mov	r0, r6
 80164fe:	f7fe f887 	bl	8014610 <rcutils_allocator_is_valid>
 8016502:	b158      	cbz	r0, 801651c <rcl_subscription_init+0x128>
 8016504:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8016506:	b148      	cbz	r0, 801651c <rcl_subscription_init+0x128>
 8016508:	4631      	mov	r1, r6
 801650a:	f002 f9dd 	bl	80188c8 <rmw_subscription_content_filter_options_fini>
 801650e:	4606      	mov	r6, r0
 8016510:	b9c8      	cbnz	r0, 8016546 <rcl_subscription_init+0x152>
 8016512:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016514:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8016516:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8016518:	4798      	blx	r3
 801651a:	66e6      	str	r6, [r4, #108]	@ 0x6c
 801651c:	682c      	ldr	r4, [r5, #0]
 801651e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016520:	4620      	mov	r0, r4
 8016522:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8016524:	2401      	movs	r4, #1
 8016526:	4798      	blx	r3
 8016528:	2300      	movs	r3, #0
 801652a:	602b      	str	r3, [r5, #0]
 801652c:	e7c8      	b.n	80164c0 <rcl_subscription_init+0xcc>
 801652e:	2867      	cmp	r0, #103	@ 0x67
 8016530:	d007      	beq.n	8016542 <rcl_subscription_init+0x14e>
 8016532:	2869      	cmp	r0, #105	@ 0x69
 8016534:	d005      	beq.n	8016542 <rcl_subscription_init+0x14e>
 8016536:	280a      	cmp	r0, #10
 8016538:	d001      	beq.n	801653e <rcl_subscription_init+0x14a>
 801653a:	2401      	movs	r4, #1
 801653c:	e7c0      	b.n	80164c0 <rcl_subscription_init+0xcc>
 801653e:	240a      	movs	r4, #10
 8016540:	e7be      	b.n	80164c0 <rcl_subscription_init+0xcc>
 8016542:	2467      	movs	r4, #103	@ 0x67
 8016544:	e7bc      	b.n	80164c0 <rcl_subscription_init+0xcc>
 8016546:	f008 f979 	bl	801e83c <rcl_convert_rmw_ret_to_rcl_ret>
 801654a:	682c      	ldr	r4, [r5, #0]
 801654c:	e7e7      	b.n	801651e <rcl_subscription_init+0x12a>
 801654e:	bf00      	nop

08016550 <rcl_subscription_get_default_options>:
 8016550:	b570      	push	{r4, r5, r6, lr}
 8016552:	4d14      	ldr	r5, [pc, #80]	@ (80165a4 <rcl_subscription_get_default_options+0x54>)
 8016554:	b08a      	sub	sp, #40	@ 0x28
 8016556:	4604      	mov	r4, r0
 8016558:	2250      	movs	r2, #80	@ 0x50
 801655a:	4913      	ldr	r1, [pc, #76]	@ (80165a8 <rcl_subscription_get_default_options+0x58>)
 801655c:	4628      	mov	r0, r5
 801655e:	f00a fab8 	bl	8020ad2 <memcpy>
 8016562:	a804      	add	r0, sp, #16
 8016564:	f7fe f846 	bl	80145f4 <rcutils_get_default_allocator>
 8016568:	f10d 0c10 	add.w	ip, sp, #16
 801656c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8016570:	466e      	mov	r6, sp
 8016572:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016576:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801657a:	f8dc 3000 	ldr.w	r3, [ip]
 801657e:	4630      	mov	r0, r6
 8016580:	f8ce 3000 	str.w	r3, [lr]
 8016584:	f002 f9ba 	bl	80188fc <rmw_get_default_subscription_options>
 8016588:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801658c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016590:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016594:	2270      	movs	r2, #112	@ 0x70
 8016596:	4629      	mov	r1, r5
 8016598:	4620      	mov	r0, r4
 801659a:	f00a fa9a 	bl	8020ad2 <memcpy>
 801659e:	4620      	mov	r0, r4
 80165a0:	b00a      	add	sp, #40	@ 0x28
 80165a2:	bd70      	pop	{r4, r5, r6, pc}
 80165a4:	24064888 	.word	0x24064888
 80165a8:	08023580 	.word	0x08023580

080165ac <rcl_take>:
 80165ac:	2800      	cmp	r0, #0
 80165ae:	d049      	beq.n	8016644 <rcl_take+0x98>
 80165b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165b4:	4615      	mov	r5, r2
 80165b6:	6802      	ldr	r2, [r0, #0]
 80165b8:	b0a4      	sub	sp, #144	@ 0x90
 80165ba:	4604      	mov	r4, r0
 80165bc:	2a00      	cmp	r2, #0
 80165be:	d039      	beq.n	8016634 <rcl_take+0x88>
 80165c0:	461f      	mov	r7, r3
 80165c2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80165c6:	b3ab      	cbz	r3, 8016634 <rcl_take+0x88>
 80165c8:	460e      	mov	r6, r1
 80165ca:	2900      	cmp	r1, #0
 80165cc:	d038      	beq.n	8016640 <rcl_take+0x94>
 80165ce:	2d00      	cmp	r5, #0
 80165d0:	d03c      	beq.n	801664c <rcl_take+0xa0>
 80165d2:	a802      	add	r0, sp, #8
 80165d4:	f04f 0800 	mov.w	r8, #0
 80165d8:	f002 f996 	bl	8018908 <rmw_get_zero_initialized_message_info>
 80165dc:	f10d 0c08 	add.w	ip, sp, #8
 80165e0:	46ae      	mov	lr, r5
 80165e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80165e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80165ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80165ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80165f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80165f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80165fa:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80165fe:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8016602:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8016606:	462b      	mov	r3, r5
 8016608:	6820      	ldr	r0, [r4, #0]
 801660a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801660e:	4631      	mov	r1, r6
 8016610:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016614:	9700      	str	r7, [sp, #0]
 8016616:	f003 fbe1 	bl	8019ddc <rmw_take_with_info>
 801661a:	4603      	mov	r3, r0
 801661c:	b9c0      	cbnz	r0, 8016650 <rcl_take+0xa4>
 801661e:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8016622:	f240 1291 	movw	r2, #401	@ 0x191
 8016626:	2900      	cmp	r1, #0
 8016628:	bf08      	it	eq
 801662a:	4613      	moveq	r3, r2
 801662c:	4618      	mov	r0, r3
 801662e:	b024      	add	sp, #144	@ 0x90
 8016630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016634:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016638:	4618      	mov	r0, r3
 801663a:	b024      	add	sp, #144	@ 0x90
 801663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016640:	230b      	movs	r3, #11
 8016642:	e7f3      	b.n	801662c <rcl_take+0x80>
 8016644:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016648:	4618      	mov	r0, r3
 801664a:	4770      	bx	lr
 801664c:	ad14      	add	r5, sp, #80	@ 0x50
 801664e:	e7c0      	b.n	80165d2 <rcl_take+0x26>
 8016650:	f008 f8f4 	bl	801e83c <rcl_convert_rmw_ret_to_rcl_ret>
 8016654:	4603      	mov	r3, r0
 8016656:	e7e9      	b.n	801662c <rcl_take+0x80>

08016658 <rcl_subscription_get_rmw_handle>:
 8016658:	b118      	cbz	r0, 8016662 <rcl_subscription_get_rmw_handle+0xa>
 801665a:	6800      	ldr	r0, [r0, #0]
 801665c:	b108      	cbz	r0, 8016662 <rcl_subscription_get_rmw_handle+0xa>
 801665e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016662:	4770      	bx	lr

08016664 <rcl_subscription_is_valid>:
 8016664:	b130      	cbz	r0, 8016674 <rcl_subscription_is_valid+0x10>
 8016666:	6800      	ldr	r0, [r0, #0]
 8016668:	b120      	cbz	r0, 8016674 <rcl_subscription_is_valid+0x10>
 801666a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801666e:	3800      	subs	r0, #0
 8016670:	bf18      	it	ne
 8016672:	2001      	movne	r0, #1
 8016674:	4770      	bx	lr
 8016676:	bf00      	nop

08016678 <rcl_get_system_time>:
 8016678:	4608      	mov	r0, r1
 801667a:	f7fe b809 	b.w	8014690 <rcutils_system_time_now>
 801667e:	bf00      	nop

08016680 <rcl_get_steady_time>:
 8016680:	4608      	mov	r0, r1
 8016682:	f7fe b82b 	b.w	80146dc <rcutils_steady_time_now>
 8016686:	bf00      	nop

08016688 <rcl_get_ros_time>:
 8016688:	7a03      	ldrb	r3, [r0, #8]
 801668a:	b510      	push	{r4, lr}
 801668c:	460c      	mov	r4, r1
 801668e:	b143      	cbz	r3, 80166a2 <rcl_get_ros_time+0x1a>
 8016690:	2105      	movs	r1, #5
 8016692:	f001 fd79 	bl	8018188 <__atomic_load_8>
 8016696:	4602      	mov	r2, r0
 8016698:	460b      	mov	r3, r1
 801669a:	2000      	movs	r0, #0
 801669c:	e9c4 2300 	strd	r2, r3, [r4]
 80166a0:	bd10      	pop	{r4, pc}
 80166a2:	4608      	mov	r0, r1
 80166a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166a8:	f7fd bff2 	b.w	8014690 <rcutils_system_time_now>

080166ac <rcl_clock_init>:
 80166ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ae:	4605      	mov	r5, r0
 80166b0:	4610      	mov	r0, r2
 80166b2:	4614      	mov	r4, r2
 80166b4:	460e      	mov	r6, r1
 80166b6:	f7fd ffab 	bl	8014610 <rcutils_allocator_is_valid>
 80166ba:	b128      	cbz	r0, 80166c8 <rcl_clock_init+0x1c>
 80166bc:	2d03      	cmp	r5, #3
 80166be:	d803      	bhi.n	80166c8 <rcl_clock_init+0x1c>
 80166c0:	e8df f005 	tbb	[pc, r5]
 80166c4:	0659301f 	.word	0x0659301f
 80166c8:	f04f 0c0b 	mov.w	ip, #11
 80166cc:	4660      	mov	r0, ip
 80166ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166d0:	2c00      	cmp	r4, #0
 80166d2:	d0f9      	beq.n	80166c8 <rcl_clock_init+0x1c>
 80166d4:	fab6 f386 	clz	r3, r6
 80166d8:	095b      	lsrs	r3, r3, #5
 80166da:	2e00      	cmp	r6, #0
 80166dc:	d0f4      	beq.n	80166c8 <rcl_clock_init+0x1c>
 80166de:	6133      	str	r3, [r6, #16]
 80166e0:	469c      	mov	ip, r3
 80166e2:	f106 0514 	add.w	r5, r6, #20
 80166e6:	4f32      	ldr	r7, [pc, #200]	@ (80167b0 <rcl_clock_init+0x104>)
 80166e8:	f04f 0e03 	mov.w	lr, #3
 80166ec:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80166f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80166f4:	6823      	ldr	r3, [r4, #0]
 80166f6:	4660      	mov	r0, ip
 80166f8:	602b      	str	r3, [r5, #0]
 80166fa:	60f7      	str	r7, [r6, #12]
 80166fc:	f886 e000 	strb.w	lr, [r6]
 8016700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016702:	2e00      	cmp	r6, #0
 8016704:	d0e0      	beq.n	80166c8 <rcl_clock_init+0x1c>
 8016706:	2300      	movs	r3, #0
 8016708:	f106 0514 	add.w	r5, r6, #20
 801670c:	7033      	strb	r3, [r6, #0]
 801670e:	469c      	mov	ip, r3
 8016710:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016714:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8016718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801671a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801671c:	6823      	ldr	r3, [r4, #0]
 801671e:	4660      	mov	r0, ip
 8016720:	602b      	str	r3, [r5, #0]
 8016722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016724:	2c00      	cmp	r4, #0
 8016726:	d0cf      	beq.n	80166c8 <rcl_clock_init+0x1c>
 8016728:	fab6 f586 	clz	r5, r6
 801672c:	096d      	lsrs	r5, r5, #5
 801672e:	2e00      	cmp	r6, #0
 8016730:	d0ca      	beq.n	80166c8 <rcl_clock_init+0x1c>
 8016732:	46a6      	mov	lr, r4
 8016734:	7035      	strb	r5, [r6, #0]
 8016736:	f106 0c14 	add.w	ip, r6, #20
 801673a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801673e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8016742:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8016746:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801674a:	f8de 3000 	ldr.w	r3, [lr]
 801674e:	2010      	movs	r0, #16
 8016750:	f8cc 3000 	str.w	r3, [ip]
 8016754:	6823      	ldr	r3, [r4, #0]
 8016756:	6921      	ldr	r1, [r4, #16]
 8016758:	4798      	blx	r3
 801675a:	6130      	str	r0, [r6, #16]
 801675c:	b320      	cbz	r0, 80167a8 <rcl_clock_init+0xfc>
 801675e:	2200      	movs	r2, #0
 8016760:	2300      	movs	r3, #0
 8016762:	46ac      	mov	ip, r5
 8016764:	7205      	strb	r5, [r0, #8]
 8016766:	e9c0 2300 	strd	r2, r3, [r0]
 801676a:	4a12      	ldr	r2, [pc, #72]	@ (80167b4 <rcl_clock_init+0x108>)
 801676c:	2301      	movs	r3, #1
 801676e:	4660      	mov	r0, ip
 8016770:	60f2      	str	r2, [r6, #12]
 8016772:	7033      	strb	r3, [r6, #0]
 8016774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016776:	2c00      	cmp	r4, #0
 8016778:	d0a6      	beq.n	80166c8 <rcl_clock_init+0x1c>
 801677a:	fab6 f386 	clz	r3, r6
 801677e:	095b      	lsrs	r3, r3, #5
 8016780:	2e00      	cmp	r6, #0
 8016782:	d0a1      	beq.n	80166c8 <rcl_clock_init+0x1c>
 8016784:	6133      	str	r3, [r6, #16]
 8016786:	469c      	mov	ip, r3
 8016788:	f106 0514 	add.w	r5, r6, #20
 801678c:	f8df e028 	ldr.w	lr, [pc, #40]	@ 80167b8 <rcl_clock_init+0x10c>
 8016790:	2702      	movs	r7, #2
 8016792:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801679a:	6823      	ldr	r3, [r4, #0]
 801679c:	4660      	mov	r0, ip
 801679e:	602b      	str	r3, [r5, #0]
 80167a0:	f8c6 e00c 	str.w	lr, [r6, #12]
 80167a4:	7037      	strb	r7, [r6, #0]
 80167a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167a8:	f04f 0c0a 	mov.w	ip, #10
 80167ac:	e78e      	b.n	80166cc <rcl_clock_init+0x20>
 80167ae:	bf00      	nop
 80167b0:	08016681 	.word	0x08016681
 80167b4:	08016689 	.word	0x08016689
 80167b8:	08016679 	.word	0x08016679

080167bc <rcl_clock_get_now>:
 80167bc:	b140      	cbz	r0, 80167d0 <rcl_clock_get_now+0x14>
 80167be:	b139      	cbz	r1, 80167d0 <rcl_clock_get_now+0x14>
 80167c0:	7803      	ldrb	r3, [r0, #0]
 80167c2:	b11b      	cbz	r3, 80167cc <rcl_clock_get_now+0x10>
 80167c4:	68c3      	ldr	r3, [r0, #12]
 80167c6:	b10b      	cbz	r3, 80167cc <rcl_clock_get_now+0x10>
 80167c8:	6900      	ldr	r0, [r0, #16]
 80167ca:	4718      	bx	r3
 80167cc:	2001      	movs	r0, #1
 80167ce:	4770      	bx	lr
 80167d0:	200b      	movs	r0, #11
 80167d2:	4770      	bx	lr

080167d4 <rcl_timer_call>:
 80167d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167d8:	b087      	sub	sp, #28
 80167da:	2800      	cmp	r0, #0
 80167dc:	d06c      	beq.n	80168b8 <rcl_timer_call+0xe4>
 80167de:	6803      	ldr	r3, [r0, #0]
 80167e0:	4604      	mov	r4, r0
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d062      	beq.n	80168ac <rcl_timer_call+0xd8>
 80167e6:	f3bf 8f5b 	dmb	ish
 80167ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80167ee:	f3bf 8f5b 	dmb	ish
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d14f      	bne.n	8016896 <rcl_timer_call+0xc2>
 80167f6:	6803      	ldr	r3, [r0, #0]
 80167f8:	a904      	add	r1, sp, #16
 80167fa:	6818      	ldr	r0, [r3, #0]
 80167fc:	f7ff ffde 	bl	80167bc <rcl_clock_get_now>
 8016800:	4605      	mov	r5, r0
 8016802:	2800      	cmp	r0, #0
 8016804:	d149      	bne.n	801689a <rcl_timer_call+0xc6>
 8016806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801680a:	2b00      	cmp	r3, #0
 801680c:	db49      	blt.n	80168a2 <rcl_timer_call+0xce>
 801680e:	2605      	movs	r6, #5
 8016810:	6820      	ldr	r0, [r4, #0]
 8016812:	9600      	str	r6, [sp, #0]
 8016814:	3020      	adds	r0, #32
 8016816:	f001 fd23 	bl	8018260 <__atomic_exchange_8>
 801681a:	6823      	ldr	r3, [r4, #0]
 801681c:	4680      	mov	r8, r0
 801681e:	f3bf 8f5b 	dmb	ish
 8016822:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8016826:	f3bf 8f5b 	dmb	ish
 801682a:	6820      	ldr	r0, [r4, #0]
 801682c:	4689      	mov	r9, r1
 801682e:	4631      	mov	r1, r6
 8016830:	3028      	adds	r0, #40	@ 0x28
 8016832:	f001 fca9 	bl	8018188 <__atomic_load_8>
 8016836:	460f      	mov	r7, r1
 8016838:	4631      	mov	r1, r6
 801683a:	4606      	mov	r6, r0
 801683c:	6820      	ldr	r0, [r4, #0]
 801683e:	3018      	adds	r0, #24
 8016840:	f001 fca2 	bl	8018188 <__atomic_load_8>
 8016844:	4602      	mov	r2, r0
 8016846:	9804      	ldr	r0, [sp, #16]
 8016848:	460b      	mov	r3, r1
 801684a:	18b6      	adds	r6, r6, r2
 801684c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8016850:	4692      	mov	sl, r2
 8016852:	eb47 0701 	adc.w	r7, r7, r1
 8016856:	4286      	cmp	r6, r0
 8016858:	eb77 010c 	sbcs.w	r1, r7, ip
 801685c:	da04      	bge.n	8016868 <rcl_timer_call+0x94>
 801685e:	ea53 0102 	orrs.w	r1, r3, r2
 8016862:	d12e      	bne.n	80168c2 <rcl_timer_call+0xee>
 8016864:	4606      	mov	r6, r0
 8016866:	4667      	mov	r7, ip
 8016868:	6820      	ldr	r0, [r4, #0]
 801686a:	2105      	movs	r1, #5
 801686c:	4632      	mov	r2, r6
 801686e:	463b      	mov	r3, r7
 8016870:	3028      	adds	r0, #40	@ 0x28
 8016872:	9100      	str	r1, [sp, #0]
 8016874:	f001 fcbe 	bl	80181f4 <__atomic_store_8>
 8016878:	f1bb 0f00 	cmp.w	fp, #0
 801687c:	d00d      	beq.n	801689a <rcl_timer_call+0xc6>
 801687e:	9a04      	ldr	r2, [sp, #16]
 8016880:	4620      	mov	r0, r4
 8016882:	9b05      	ldr	r3, [sp, #20]
 8016884:	ebb2 0208 	subs.w	r2, r2, r8
 8016888:	eb63 0309 	sbc.w	r3, r3, r9
 801688c:	47d8      	blx	fp
 801688e:	4628      	mov	r0, r5
 8016890:	b007      	add	sp, #28
 8016892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016896:	f240 3521 	movw	r5, #801	@ 0x321
 801689a:	4628      	mov	r0, r5
 801689c:	b007      	add	sp, #28
 801689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168a2:	2501      	movs	r5, #1
 80168a4:	4628      	mov	r0, r5
 80168a6:	b007      	add	sp, #28
 80168a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ac:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80168b0:	4628      	mov	r0, r5
 80168b2:	b007      	add	sp, #28
 80168b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168b8:	250b      	movs	r5, #11
 80168ba:	4628      	mov	r0, r5
 80168bc:	b007      	add	sp, #28
 80168be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168c2:	1b80      	subs	r0, r0, r6
 80168c4:	eb6c 0107 	sbc.w	r1, ip, r7
 80168c8:	3801      	subs	r0, #1
 80168ca:	f161 0100 	sbc.w	r1, r1, #0
 80168ce:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80168d2:	f7e9 fd6d 	bl	80003b0 <__aeabi_ldivmod>
 80168d6:	9b02      	ldr	r3, [sp, #8]
 80168d8:	3001      	adds	r0, #1
 80168da:	f141 0100 	adc.w	r1, r1, #0
 80168de:	fb00 f303 	mul.w	r3, r0, r3
 80168e2:	fb01 330a 	mla	r3, r1, sl, r3
 80168e6:	fba0 0a0a 	umull	r0, sl, r0, sl
 80168ea:	1986      	adds	r6, r0, r6
 80168ec:	4453      	add	r3, sl
 80168ee:	eb43 0707 	adc.w	r7, r3, r7
 80168f2:	e7b9      	b.n	8016868 <rcl_timer_call+0x94>

080168f4 <rcl_timer_is_ready>:
 80168f4:	b570      	push	{r4, r5, r6, lr}
 80168f6:	b082      	sub	sp, #8
 80168f8:	b380      	cbz	r0, 801695c <rcl_timer_is_ready+0x68>
 80168fa:	6803      	ldr	r3, [r0, #0]
 80168fc:	4604      	mov	r4, r0
 80168fe:	b38b      	cbz	r3, 8016964 <rcl_timer_is_ready+0x70>
 8016900:	460d      	mov	r5, r1
 8016902:	b359      	cbz	r1, 801695c <rcl_timer_is_ready+0x68>
 8016904:	f3bf 8f5b 	dmb	ish
 8016908:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801690c:	f3bf 8f5b 	dmb	ish
 8016910:	b953      	cbnz	r3, 8016928 <rcl_timer_is_ready+0x34>
 8016912:	6803      	ldr	r3, [r0, #0]
 8016914:	4669      	mov	r1, sp
 8016916:	6818      	ldr	r0, [r3, #0]
 8016918:	f7ff ff50 	bl	80167bc <rcl_clock_get_now>
 801691c:	4606      	mov	r6, r0
 801691e:	b148      	cbz	r0, 8016934 <rcl_timer_is_ready+0x40>
 8016920:	f240 3321 	movw	r3, #801	@ 0x321
 8016924:	4298      	cmp	r0, r3
 8016926:	d102      	bne.n	801692e <rcl_timer_is_ready+0x3a>
 8016928:	2300      	movs	r3, #0
 801692a:	461e      	mov	r6, r3
 801692c:	702b      	strb	r3, [r5, #0]
 801692e:	4630      	mov	r0, r6
 8016930:	b002      	add	sp, #8
 8016932:	bd70      	pop	{r4, r5, r6, pc}
 8016934:	6820      	ldr	r0, [r4, #0]
 8016936:	2105      	movs	r1, #5
 8016938:	3028      	adds	r0, #40	@ 0x28
 801693a:	f001 fc25 	bl	8018188 <__atomic_load_8>
 801693e:	9b00      	ldr	r3, [sp, #0]
 8016940:	1ac0      	subs	r0, r0, r3
 8016942:	9b01      	ldr	r3, [sp, #4]
 8016944:	eb61 0103 	sbc.w	r1, r1, r3
 8016948:	2801      	cmp	r0, #1
 801694a:	4630      	mov	r0, r6
 801694c:	f171 0300 	sbcs.w	r3, r1, #0
 8016950:	bfb4      	ite	lt
 8016952:	2301      	movlt	r3, #1
 8016954:	2300      	movge	r3, #0
 8016956:	702b      	strb	r3, [r5, #0]
 8016958:	b002      	add	sp, #8
 801695a:	bd70      	pop	{r4, r5, r6, pc}
 801695c:	260b      	movs	r6, #11
 801695e:	4630      	mov	r0, r6
 8016960:	b002      	add	sp, #8
 8016962:	bd70      	pop	{r4, r5, r6, pc}
 8016964:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016968:	e7e1      	b.n	801692e <rcl_timer_is_ready+0x3a>
 801696a:	bf00      	nop

0801696c <rcl_timer_get_time_until_next_call>:
 801696c:	b570      	push	{r4, r5, r6, lr}
 801696e:	b082      	sub	sp, #8
 8016970:	b330      	cbz	r0, 80169c0 <rcl_timer_get_time_until_next_call+0x54>
 8016972:	6803      	ldr	r3, [r0, #0]
 8016974:	4604      	mov	r4, r0
 8016976:	b33b      	cbz	r3, 80169c8 <rcl_timer_get_time_until_next_call+0x5c>
 8016978:	460d      	mov	r5, r1
 801697a:	b309      	cbz	r1, 80169c0 <rcl_timer_get_time_until_next_call+0x54>
 801697c:	f3bf 8f5b 	dmb	ish
 8016980:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016984:	f3bf 8f5b 	dmb	ish
 8016988:	b9ab      	cbnz	r3, 80169b6 <rcl_timer_get_time_until_next_call+0x4a>
 801698a:	6803      	ldr	r3, [r0, #0]
 801698c:	4669      	mov	r1, sp
 801698e:	6818      	ldr	r0, [r3, #0]
 8016990:	f7ff ff14 	bl	80167bc <rcl_clock_get_now>
 8016994:	4606      	mov	r6, r0
 8016996:	b958      	cbnz	r0, 80169b0 <rcl_timer_get_time_until_next_call+0x44>
 8016998:	6820      	ldr	r0, [r4, #0]
 801699a:	2105      	movs	r1, #5
 801699c:	3028      	adds	r0, #40	@ 0x28
 801699e:	f001 fbf3 	bl	8018188 <__atomic_load_8>
 80169a2:	9b00      	ldr	r3, [sp, #0]
 80169a4:	1ac0      	subs	r0, r0, r3
 80169a6:	9b01      	ldr	r3, [sp, #4]
 80169a8:	eb61 0103 	sbc.w	r1, r1, r3
 80169ac:	6028      	str	r0, [r5, #0]
 80169ae:	6069      	str	r1, [r5, #4]
 80169b0:	4630      	mov	r0, r6
 80169b2:	b002      	add	sp, #8
 80169b4:	bd70      	pop	{r4, r5, r6, pc}
 80169b6:	f240 3621 	movw	r6, #801	@ 0x321
 80169ba:	4630      	mov	r0, r6
 80169bc:	b002      	add	sp, #8
 80169be:	bd70      	pop	{r4, r5, r6, pc}
 80169c0:	260b      	movs	r6, #11
 80169c2:	4630      	mov	r0, r6
 80169c4:	b002      	add	sp, #8
 80169c6:	bd70      	pop	{r4, r5, r6, pc}
 80169c8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80169cc:	e7f0      	b.n	80169b0 <rcl_timer_get_time_until_next_call+0x44>
 80169ce:	bf00      	nop

080169d0 <rcl_timer_get_guard_condition>:
 80169d0:	b130      	cbz	r0, 80169e0 <rcl_timer_get_guard_condition+0x10>
 80169d2:	6800      	ldr	r0, [r0, #0]
 80169d4:	b120      	cbz	r0, 80169e0 <rcl_timer_get_guard_condition+0x10>
 80169d6:	68c3      	ldr	r3, [r0, #12]
 80169d8:	b10b      	cbz	r3, 80169de <rcl_timer_get_guard_condition+0xe>
 80169da:	3008      	adds	r0, #8
 80169dc:	4770      	bx	lr
 80169de:	4618      	mov	r0, r3
 80169e0:	4770      	bx	lr
 80169e2:	bf00      	nop

080169e4 <rcl_validate_enclave_name_with_size>:
 80169e4:	2800      	cmp	r0, #0
 80169e6:	d049      	beq.n	8016a7c <rcl_validate_enclave_name_with_size+0x98>
 80169e8:	b570      	push	{r4, r5, r6, lr}
 80169ea:	4615      	mov	r5, r2
 80169ec:	b0c2      	sub	sp, #264	@ 0x108
 80169ee:	b19a      	cbz	r2, 8016a18 <rcl_validate_enclave_name_with_size+0x34>
 80169f0:	461e      	mov	r6, r3
 80169f2:	466a      	mov	r2, sp
 80169f4:	ab01      	add	r3, sp, #4
 80169f6:	460c      	mov	r4, r1
 80169f8:	f002 f80a 	bl	8018a10 <rmw_validate_namespace_with_size>
 80169fc:	4684      	mov	ip, r0
 80169fe:	b9b8      	cbnz	r0, 8016a30 <rcl_validate_enclave_name_with_size+0x4c>
 8016a00:	9900      	ldr	r1, [sp, #0]
 8016a02:	b171      	cbz	r1, 8016a22 <rcl_validate_enclave_name_with_size+0x3e>
 8016a04:	2907      	cmp	r1, #7
 8016a06:	d019      	beq.n	8016a3c <rcl_validate_enclave_name_with_size+0x58>
 8016a08:	1e4b      	subs	r3, r1, #1
 8016a0a:	2b05      	cmp	r3, #5
 8016a0c:	d83a      	bhi.n	8016a84 <rcl_validate_enclave_name_with_size+0xa0>
 8016a0e:	e8df f003 	tbb	[pc, r3]
 8016a12:	2926      	.short	0x2926
 8016a14:	1d322f2c 	.word	0x1d322f2c
 8016a18:	f04f 0c0b 	mov.w	ip, #11
 8016a1c:	4660      	mov	r0, ip
 8016a1e:	b042      	add	sp, #264	@ 0x108
 8016a20:	bd70      	pop	{r4, r5, r6, pc}
 8016a22:	2907      	cmp	r1, #7
 8016a24:	d00a      	beq.n	8016a3c <rcl_validate_enclave_name_with_size+0x58>
 8016a26:	2300      	movs	r3, #0
 8016a28:	4660      	mov	r0, ip
 8016a2a:	602b      	str	r3, [r5, #0]
 8016a2c:	b042      	add	sp, #264	@ 0x108
 8016a2e:	bd70      	pop	{r4, r5, r6, pc}
 8016a30:	f007 ff04 	bl	801e83c <rcl_convert_rmw_ret_to_rcl_ret>
 8016a34:	4684      	mov	ip, r0
 8016a36:	4660      	mov	r0, ip
 8016a38:	b042      	add	sp, #264	@ 0x108
 8016a3a:	bd70      	pop	{r4, r5, r6, pc}
 8016a3c:	2cff      	cmp	r4, #255	@ 0xff
 8016a3e:	d9f2      	bls.n	8016a26 <rcl_validate_enclave_name_with_size+0x42>
 8016a40:	6029      	str	r1, [r5, #0]
 8016a42:	2e00      	cmp	r6, #0
 8016a44:	d0ea      	beq.n	8016a1c <rcl_validate_enclave_name_with_size+0x38>
 8016a46:	23fe      	movs	r3, #254	@ 0xfe
 8016a48:	6033      	str	r3, [r6, #0]
 8016a4a:	e7e7      	b.n	8016a1c <rcl_validate_enclave_name_with_size+0x38>
 8016a4c:	2306      	movs	r3, #6
 8016a4e:	602b      	str	r3, [r5, #0]
 8016a50:	2e00      	cmp	r6, #0
 8016a52:	d0e3      	beq.n	8016a1c <rcl_validate_enclave_name_with_size+0x38>
 8016a54:	9b01      	ldr	r3, [sp, #4]
 8016a56:	4660      	mov	r0, ip
 8016a58:	6033      	str	r3, [r6, #0]
 8016a5a:	b042      	add	sp, #264	@ 0x108
 8016a5c:	bd70      	pop	{r4, r5, r6, pc}
 8016a5e:	2301      	movs	r3, #1
 8016a60:	602b      	str	r3, [r5, #0]
 8016a62:	e7f5      	b.n	8016a50 <rcl_validate_enclave_name_with_size+0x6c>
 8016a64:	2302      	movs	r3, #2
 8016a66:	602b      	str	r3, [r5, #0]
 8016a68:	e7f2      	b.n	8016a50 <rcl_validate_enclave_name_with_size+0x6c>
 8016a6a:	2303      	movs	r3, #3
 8016a6c:	602b      	str	r3, [r5, #0]
 8016a6e:	e7ef      	b.n	8016a50 <rcl_validate_enclave_name_with_size+0x6c>
 8016a70:	2304      	movs	r3, #4
 8016a72:	602b      	str	r3, [r5, #0]
 8016a74:	e7ec      	b.n	8016a50 <rcl_validate_enclave_name_with_size+0x6c>
 8016a76:	2305      	movs	r3, #5
 8016a78:	602b      	str	r3, [r5, #0]
 8016a7a:	e7e9      	b.n	8016a50 <rcl_validate_enclave_name_with_size+0x6c>
 8016a7c:	f04f 0c0b 	mov.w	ip, #11
 8016a80:	4660      	mov	r0, ip
 8016a82:	4770      	bx	lr
 8016a84:	460b      	mov	r3, r1
 8016a86:	4a04      	ldr	r2, [pc, #16]	@ (8016a98 <rcl_validate_enclave_name_with_size+0xb4>)
 8016a88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016a8c:	a802      	add	r0, sp, #8
 8016a8e:	f001 fd33 	bl	80184f8 <rcutils_snprintf>
 8016a92:	f04f 0c01 	mov.w	ip, #1
 8016a96:	e7c1      	b.n	8016a1c <rcl_validate_enclave_name_with_size+0x38>
 8016a98:	080235d0 	.word	0x080235d0

08016a9c <rcl_validate_enclave_name>:
 8016a9c:	b168      	cbz	r0, 8016aba <rcl_validate_enclave_name+0x1e>
 8016a9e:	b570      	push	{r4, r5, r6, lr}
 8016aa0:	460d      	mov	r5, r1
 8016aa2:	4616      	mov	r6, r2
 8016aa4:	4604      	mov	r4, r0
 8016aa6:	f7e9 fc25 	bl	80002f4 <strlen>
 8016aaa:	4633      	mov	r3, r6
 8016aac:	4601      	mov	r1, r0
 8016aae:	462a      	mov	r2, r5
 8016ab0:	4620      	mov	r0, r4
 8016ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ab6:	f7ff bf95 	b.w	80169e4 <rcl_validate_enclave_name_with_size>
 8016aba:	200b      	movs	r0, #11
 8016abc:	4770      	bx	lr
 8016abe:	bf00      	nop

08016ac0 <rcl_get_zero_initialized_wait_set>:
 8016ac0:	b510      	push	{r4, lr}
 8016ac2:	4c08      	ldr	r4, [pc, #32]	@ (8016ae4 <rcl_get_zero_initialized_wait_set+0x24>)
 8016ac4:	4686      	mov	lr, r0
 8016ac6:	4684      	mov	ip, r0
 8016ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016aca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ad0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ad6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ada:	6823      	ldr	r3, [r4, #0]
 8016adc:	4670      	mov	r0, lr
 8016ade:	f8cc 3000 	str.w	r3, [ip]
 8016ae2:	bd10      	pop	{r4, pc}
 8016ae4:	08023630 	.word	0x08023630

08016ae8 <rcl_wait_set_is_valid>:
 8016ae8:	b118      	cbz	r0, 8016af2 <rcl_wait_set_is_valid+0xa>
 8016aea:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8016aec:	3800      	subs	r0, #0
 8016aee:	bf18      	it	ne
 8016af0:	2001      	movne	r0, #1
 8016af2:	4770      	bx	lr

08016af4 <rcl_wait_set_fini>:
 8016af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016af8:	b082      	sub	sp, #8
 8016afa:	2800      	cmp	r0, #0
 8016afc:	f000 8095 	beq.w	8016c2a <rcl_wait_set_fini+0x136>
 8016b00:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016b02:	4604      	mov	r4, r0
 8016b04:	2e00      	cmp	r6, #0
 8016b06:	f000 808c 	beq.w	8016c22 <rcl_wait_set_fini+0x12e>
 8016b0a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8016b0c:	f003 fb40 	bl	801a190 <rmw_destroy_wait_set>
 8016b10:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b12:	1e06      	subs	r6, r0, #0
 8016b14:	bf18      	it	ne
 8016b16:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8016b1a:	2d00      	cmp	r5, #0
 8016b1c:	f000 8081 	beq.w	8016c22 <rcl_wait_set_fini+0x12e>
 8016b20:	2700      	movs	r7, #0
 8016b22:	6820      	ldr	r0, [r4, #0]
 8016b24:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016b28:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b2a:	6067      	str	r7, [r4, #4]
 8016b2c:	602f      	str	r7, [r5, #0]
 8016b2e:	b120      	cbz	r0, 8016b3a <rcl_wait_set_fini+0x46>
 8016b30:	9101      	str	r1, [sp, #4]
 8016b32:	47c0      	blx	r8
 8016b34:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b36:	9901      	ldr	r1, [sp, #4]
 8016b38:	6027      	str	r7, [r4, #0]
 8016b3a:	68a8      	ldr	r0, [r5, #8]
 8016b3c:	b120      	cbz	r0, 8016b48 <rcl_wait_set_fini+0x54>
 8016b3e:	47c0      	blx	r8
 8016b40:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b42:	2300      	movs	r3, #0
 8016b44:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016b48:	f04f 0800 	mov.w	r8, #0
 8016b4c:	68a0      	ldr	r0, [r4, #8]
 8016b4e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016b50:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b52:	f8c4 800c 	str.w	r8, [r4, #12]
 8016b56:	f8c5 800c 	str.w	r8, [r5, #12]
 8016b5a:	b128      	cbz	r0, 8016b68 <rcl_wait_set_fini+0x74>
 8016b5c:	47b8      	blx	r7
 8016b5e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b60:	f8c4 8008 	str.w	r8, [r4, #8]
 8016b64:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016b66:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b68:	f04f 0800 	mov.w	r8, #0
 8016b6c:	6968      	ldr	r0, [r5, #20]
 8016b6e:	f8c5 8010 	str.w	r8, [r5, #16]
 8016b72:	b128      	cbz	r0, 8016b80 <rcl_wait_set_fini+0x8c>
 8016b74:	47b8      	blx	r7
 8016b76:	f8c5 8014 	str.w	r8, [r5, #20]
 8016b7a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b7c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016b7e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b80:	f04f 0800 	mov.w	r8, #0
 8016b84:	6920      	ldr	r0, [r4, #16]
 8016b86:	f8c4 8014 	str.w	r8, [r4, #20]
 8016b8a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8016b8e:	b128      	cbz	r0, 8016b9c <rcl_wait_set_fini+0xa8>
 8016b90:	47b8      	blx	r7
 8016b92:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b94:	f8c4 8010 	str.w	r8, [r4, #16]
 8016b98:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016b9a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b9c:	f04f 0800 	mov.w	r8, #0
 8016ba0:	69a0      	ldr	r0, [r4, #24]
 8016ba2:	f8c4 801c 	str.w	r8, [r4, #28]
 8016ba6:	f8c5 8018 	str.w	r8, [r5, #24]
 8016baa:	b128      	cbz	r0, 8016bb8 <rcl_wait_set_fini+0xc4>
 8016bac:	9101      	str	r1, [sp, #4]
 8016bae:	47b8      	blx	r7
 8016bb0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016bb2:	9901      	ldr	r1, [sp, #4]
 8016bb4:	f8c4 8018 	str.w	r8, [r4, #24]
 8016bb8:	6a28      	ldr	r0, [r5, #32]
 8016bba:	b120      	cbz	r0, 8016bc6 <rcl_wait_set_fini+0xd2>
 8016bbc:	47b8      	blx	r7
 8016bbe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8016bc6:	2700      	movs	r7, #0
 8016bc8:	6a20      	ldr	r0, [r4, #32]
 8016bca:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016bce:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016bd0:	6267      	str	r7, [r4, #36]	@ 0x24
 8016bd2:	626f      	str	r7, [r5, #36]	@ 0x24
 8016bd4:	b120      	cbz	r0, 8016be0 <rcl_wait_set_fini+0xec>
 8016bd6:	9101      	str	r1, [sp, #4]
 8016bd8:	47c0      	blx	r8
 8016bda:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016bdc:	9901      	ldr	r1, [sp, #4]
 8016bde:	6227      	str	r7, [r4, #32]
 8016be0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8016be2:	b120      	cbz	r0, 8016bee <rcl_wait_set_fini+0xfa>
 8016be4:	47c0      	blx	r8
 8016be6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016be8:	2300      	movs	r3, #0
 8016bea:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8016bee:	2700      	movs	r7, #0
 8016bf0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016bf2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016bf6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016bf8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8016bfa:	632f      	str	r7, [r5, #48]	@ 0x30
 8016bfc:	b120      	cbz	r0, 8016c08 <rcl_wait_set_fini+0x114>
 8016bfe:	9101      	str	r1, [sp, #4]
 8016c00:	47c0      	blx	r8
 8016c02:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016c04:	9901      	ldr	r1, [sp, #4]
 8016c06:	62a7      	str	r7, [r4, #40]	@ 0x28
 8016c08:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8016c0a:	b120      	cbz	r0, 8016c16 <rcl_wait_set_fini+0x122>
 8016c0c:	47c0      	blx	r8
 8016c0e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016c10:	2300      	movs	r3, #0
 8016c12:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8016c16:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016c18:	4628      	mov	r0, r5
 8016c1a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016c1c:	4798      	blx	r3
 8016c1e:	2300      	movs	r3, #0
 8016c20:	6323      	str	r3, [r4, #48]	@ 0x30
 8016c22:	4630      	mov	r0, r6
 8016c24:	b002      	add	sp, #8
 8016c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c2a:	260b      	movs	r6, #11
 8016c2c:	4630      	mov	r0, r6
 8016c2e:	b002      	add	sp, #8
 8016c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016c34 <rcl_wait_set_add_subscription>:
 8016c34:	b318      	cbz	r0, 8016c7e <rcl_wait_set_add_subscription+0x4a>
 8016c36:	b538      	push	{r3, r4, r5, lr}
 8016c38:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016c3a:	4604      	mov	r4, r0
 8016c3c:	b30b      	cbz	r3, 8016c82 <rcl_wait_set_add_subscription+0x4e>
 8016c3e:	b319      	cbz	r1, 8016c88 <rcl_wait_set_add_subscription+0x54>
 8016c40:	681d      	ldr	r5, [r3, #0]
 8016c42:	6840      	ldr	r0, [r0, #4]
 8016c44:	4285      	cmp	r5, r0
 8016c46:	d217      	bcs.n	8016c78 <rcl_wait_set_add_subscription+0x44>
 8016c48:	1c68      	adds	r0, r5, #1
 8016c4a:	6018      	str	r0, [r3, #0]
 8016c4c:	6823      	ldr	r3, [r4, #0]
 8016c4e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8016c52:	b102      	cbz	r2, 8016c56 <rcl_wait_set_add_subscription+0x22>
 8016c54:	6015      	str	r5, [r2, #0]
 8016c56:	4608      	mov	r0, r1
 8016c58:	f7ff fcfe 	bl	8016658 <rcl_subscription_get_rmw_handle>
 8016c5c:	b150      	cbz	r0, 8016c74 <rcl_wait_set_add_subscription+0x40>
 8016c5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c60:	6842      	ldr	r2, [r0, #4]
 8016c62:	2000      	movs	r0, #0
 8016c64:	689b      	ldr	r3, [r3, #8]
 8016c66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016c6a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016c6c:	6853      	ldr	r3, [r2, #4]
 8016c6e:	3301      	adds	r3, #1
 8016c70:	6053      	str	r3, [r2, #4]
 8016c72:	bd38      	pop	{r3, r4, r5, pc}
 8016c74:	2001      	movs	r0, #1
 8016c76:	bd38      	pop	{r3, r4, r5, pc}
 8016c78:	f240 3086 	movw	r0, #902	@ 0x386
 8016c7c:	bd38      	pop	{r3, r4, r5, pc}
 8016c7e:	200b      	movs	r0, #11
 8016c80:	4770      	bx	lr
 8016c82:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016c86:	bd38      	pop	{r3, r4, r5, pc}
 8016c88:	200b      	movs	r0, #11
 8016c8a:	bd38      	pop	{r3, r4, r5, pc}

08016c8c <rcl_wait_set_clear>:
 8016c8c:	2800      	cmp	r0, #0
 8016c8e:	d074      	beq.n	8016d7a <rcl_wait_set_clear+0xee>
 8016c90:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016c92:	b510      	push	{r4, lr}
 8016c94:	4604      	mov	r4, r0
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d071      	beq.n	8016d7e <rcl_wait_set_clear+0xf2>
 8016c9a:	6800      	ldr	r0, [r0, #0]
 8016c9c:	b138      	cbz	r0, 8016cae <rcl_wait_set_clear+0x22>
 8016c9e:	6862      	ldr	r2, [r4, #4]
 8016ca0:	2100      	movs	r1, #0
 8016ca2:	0092      	lsls	r2, r2, #2
 8016ca4:	f009 fdf6 	bl	8020894 <memset>
 8016ca8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016caa:	2200      	movs	r2, #0
 8016cac:	601a      	str	r2, [r3, #0]
 8016cae:	68a0      	ldr	r0, [r4, #8]
 8016cb0:	b138      	cbz	r0, 8016cc2 <rcl_wait_set_clear+0x36>
 8016cb2:	68e2      	ldr	r2, [r4, #12]
 8016cb4:	2100      	movs	r1, #0
 8016cb6:	0092      	lsls	r2, r2, #2
 8016cb8:	f009 fdec 	bl	8020894 <memset>
 8016cbc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016cbe:	2200      	movs	r2, #0
 8016cc0:	60da      	str	r2, [r3, #12]
 8016cc2:	69a0      	ldr	r0, [r4, #24]
 8016cc4:	b138      	cbz	r0, 8016cd6 <rcl_wait_set_clear+0x4a>
 8016cc6:	69e2      	ldr	r2, [r4, #28]
 8016cc8:	2100      	movs	r1, #0
 8016cca:	0092      	lsls	r2, r2, #2
 8016ccc:	f009 fde2 	bl	8020894 <memset>
 8016cd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	619a      	str	r2, [r3, #24]
 8016cd6:	6a20      	ldr	r0, [r4, #32]
 8016cd8:	b138      	cbz	r0, 8016cea <rcl_wait_set_clear+0x5e>
 8016cda:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016cdc:	2100      	movs	r1, #0
 8016cde:	0092      	lsls	r2, r2, #2
 8016ce0:	f009 fdd8 	bl	8020894 <memset>
 8016ce4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	625a      	str	r2, [r3, #36]	@ 0x24
 8016cea:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016cec:	b138      	cbz	r0, 8016cfe <rcl_wait_set_clear+0x72>
 8016cee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8016cf0:	2100      	movs	r1, #0
 8016cf2:	0092      	lsls	r2, r2, #2
 8016cf4:	f009 fdce 	bl	8020894 <memset>
 8016cf8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8016cfe:	6920      	ldr	r0, [r4, #16]
 8016d00:	b138      	cbz	r0, 8016d12 <rcl_wait_set_clear+0x86>
 8016d02:	6962      	ldr	r2, [r4, #20]
 8016d04:	2100      	movs	r1, #0
 8016d06:	0092      	lsls	r2, r2, #2
 8016d08:	f009 fdc4 	bl	8020894 <memset>
 8016d0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d0e:	2200      	movs	r2, #0
 8016d10:	641a      	str	r2, [r3, #64]	@ 0x40
 8016d12:	6898      	ldr	r0, [r3, #8]
 8016d14:	b138      	cbz	r0, 8016d26 <rcl_wait_set_clear+0x9a>
 8016d16:	685a      	ldr	r2, [r3, #4]
 8016d18:	2100      	movs	r1, #0
 8016d1a:	0092      	lsls	r2, r2, #2
 8016d1c:	f009 fdba 	bl	8020894 <memset>
 8016d20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d22:	2200      	movs	r2, #0
 8016d24:	605a      	str	r2, [r3, #4]
 8016d26:	6958      	ldr	r0, [r3, #20]
 8016d28:	b138      	cbz	r0, 8016d3a <rcl_wait_set_clear+0xae>
 8016d2a:	691a      	ldr	r2, [r3, #16]
 8016d2c:	2100      	movs	r1, #0
 8016d2e:	0092      	lsls	r2, r2, #2
 8016d30:	f009 fdb0 	bl	8020894 <memset>
 8016d34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d36:	2200      	movs	r2, #0
 8016d38:	611a      	str	r2, [r3, #16]
 8016d3a:	6a18      	ldr	r0, [r3, #32]
 8016d3c:	b138      	cbz	r0, 8016d4e <rcl_wait_set_clear+0xc2>
 8016d3e:	69da      	ldr	r2, [r3, #28]
 8016d40:	2100      	movs	r1, #0
 8016d42:	0092      	lsls	r2, r2, #2
 8016d44:	f009 fda6 	bl	8020894 <memset>
 8016d48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	61da      	str	r2, [r3, #28]
 8016d4e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8016d50:	b138      	cbz	r0, 8016d62 <rcl_wait_set_clear+0xd6>
 8016d52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016d54:	2100      	movs	r1, #0
 8016d56:	0092      	lsls	r2, r2, #2
 8016d58:	f009 fd9c 	bl	8020894 <memset>
 8016d5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d5e:	2200      	movs	r2, #0
 8016d60:	629a      	str	r2, [r3, #40]	@ 0x28
 8016d62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016d64:	b140      	cbz	r0, 8016d78 <rcl_wait_set_clear+0xec>
 8016d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016d68:	2100      	movs	r1, #0
 8016d6a:	0092      	lsls	r2, r2, #2
 8016d6c:	f009 fd92 	bl	8020894 <memset>
 8016d70:	2300      	movs	r3, #0
 8016d72:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016d74:	4618      	mov	r0, r3
 8016d76:	6353      	str	r3, [r2, #52]	@ 0x34
 8016d78:	bd10      	pop	{r4, pc}
 8016d7a:	200b      	movs	r0, #11
 8016d7c:	4770      	bx	lr
 8016d7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016d82:	bd10      	pop	{r4, pc}

08016d84 <rcl_wait_set_resize>:
 8016d84:	2800      	cmp	r0, #0
 8016d86:	f000 8180 	beq.w	801708a <rcl_wait_set_resize+0x306>
 8016d8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d8e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8016d90:	b083      	sub	sp, #12
 8016d92:	4605      	mov	r5, r0
 8016d94:	2c00      	cmp	r4, #0
 8016d96:	f000 817a 	beq.w	801708e <rcl_wait_set_resize+0x30a>
 8016d9a:	f04f 0900 	mov.w	r9, #0
 8016d9e:	461f      	mov	r7, r3
 8016da0:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8016da4:	4688      	mov	r8, r1
 8016da6:	4616      	mov	r6, r2
 8016da8:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8016dac:	f8c0 9004 	str.w	r9, [r0, #4]
 8016db0:	f8c4 9000 	str.w	r9, [r4]
 8016db4:	2900      	cmp	r1, #0
 8016db6:	f000 80bf 	beq.w	8016f38 <rcl_wait_set_resize+0x1b4>
 8016dba:	008c      	lsls	r4, r1, #2
 8016dbc:	4652      	mov	r2, sl
 8016dbe:	6800      	ldr	r0, [r0, #0]
 8016dc0:	4621      	mov	r1, r4
 8016dc2:	9301      	str	r3, [sp, #4]
 8016dc4:	4798      	blx	r3
 8016dc6:	9b01      	ldr	r3, [sp, #4]
 8016dc8:	6028      	str	r0, [r5, #0]
 8016dca:	2800      	cmp	r0, #0
 8016dcc:	f000 80f6 	beq.w	8016fbc <rcl_wait_set_resize+0x238>
 8016dd0:	4622      	mov	r2, r4
 8016dd2:	4649      	mov	r1, r9
 8016dd4:	9301      	str	r3, [sp, #4]
 8016dd6:	f009 fd5d 	bl	8020894 <memset>
 8016dda:	f8c5 8004 	str.w	r8, [r5, #4]
 8016dde:	4652      	mov	r2, sl
 8016de0:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8016de4:	4621      	mov	r1, r4
 8016de6:	9b01      	ldr	r3, [sp, #4]
 8016de8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016dec:	f8c8 9004 	str.w	r9, [r8, #4]
 8016df0:	4798      	blx	r3
 8016df2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016df4:	f8c8 0008 	str.w	r0, [r8, #8]
 8016df8:	689b      	ldr	r3, [r3, #8]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	f000 814a 	beq.w	8017094 <rcl_wait_set_resize+0x310>
 8016e00:	4622      	mov	r2, r4
 8016e02:	4649      	mov	r1, r9
 8016e04:	4618      	mov	r0, r3
 8016e06:	f009 fd45 	bl	8020894 <memset>
 8016e0a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e0c:	f04f 0800 	mov.w	r8, #0
 8016e10:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016e14:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8016e18:	f8c5 800c 	str.w	r8, [r5, #12]
 8016e1c:	f8c4 800c 	str.w	r8, [r4, #12]
 8016e20:	2e00      	cmp	r6, #0
 8016e22:	f040 809b 	bne.w	8016f5c <rcl_wait_set_resize+0x1d8>
 8016e26:	68a8      	ldr	r0, [r5, #8]
 8016e28:	b128      	cbz	r0, 8016e36 <rcl_wait_set_resize+0xb2>
 8016e2a:	4649      	mov	r1, r9
 8016e2c:	4790      	blx	r2
 8016e2e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e30:	60ae      	str	r6, [r5, #8]
 8016e32:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016e36:	f04f 0800 	mov.w	r8, #0
 8016e3a:	19f6      	adds	r6, r6, r7
 8016e3c:	f8c4 8010 	str.w	r8, [r4, #16]
 8016e40:	f040 80a2 	bne.w	8016f88 <rcl_wait_set_resize+0x204>
 8016e44:	6960      	ldr	r0, [r4, #20]
 8016e46:	b130      	cbz	r0, 8016e56 <rcl_wait_set_resize+0xd2>
 8016e48:	4649      	mov	r1, r9
 8016e4a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8016e4c:	4798      	blx	r3
 8016e4e:	6166      	str	r6, [r4, #20]
 8016e50:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e52:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016e56:	2600      	movs	r6, #0
 8016e58:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016e5c:	616e      	str	r6, [r5, #20]
 8016e5e:	6426      	str	r6, [r4, #64]	@ 0x40
 8016e60:	2f00      	cmp	r7, #0
 8016e62:	f040 80af 	bne.w	8016fc4 <rcl_wait_set_resize+0x240>
 8016e66:	6928      	ldr	r0, [r5, #16]
 8016e68:	b138      	cbz	r0, 8016e7a <rcl_wait_set_resize+0xf6>
 8016e6a:	4649      	mov	r1, r9
 8016e6c:	47d0      	blx	sl
 8016e6e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e70:	612f      	str	r7, [r5, #16]
 8016e72:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016e76:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016e7a:	2600      	movs	r6, #0
 8016e7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016e7e:	61ee      	str	r6, [r5, #28]
 8016e80:	61a6      	str	r6, [r4, #24]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	f040 8093 	bne.w	8016fae <rcl_wait_set_resize+0x22a>
 8016e88:	69a8      	ldr	r0, [r5, #24]
 8016e8a:	b120      	cbz	r0, 8016e96 <rcl_wait_set_resize+0x112>
 8016e8c:	4649      	mov	r1, r9
 8016e8e:	47d0      	blx	sl
 8016e90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016e92:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e94:	61ab      	str	r3, [r5, #24]
 8016e96:	6a20      	ldr	r0, [r4, #32]
 8016e98:	b128      	cbz	r0, 8016ea6 <rcl_wait_set_resize+0x122>
 8016e9a:	4649      	mov	r1, r9
 8016e9c:	47d0      	blx	sl
 8016e9e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8016ea6:	2600      	movs	r6, #0
 8016ea8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016eaa:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8016eac:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016eb0:	626e      	str	r6, [r5, #36]	@ 0x24
 8016eb2:	6266      	str	r6, [r4, #36]	@ 0x24
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	f000 8098 	beq.w	8016fea <rcl_wait_set_resize+0x266>
 8016eba:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016ebe:	463a      	mov	r2, r7
 8016ec0:	6a28      	ldr	r0, [r5, #32]
 8016ec2:	4651      	mov	r1, sl
 8016ec4:	47c8      	blx	r9
 8016ec6:	6228      	str	r0, [r5, #32]
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	d077      	beq.n	8016fbc <rcl_wait_set_resize+0x238>
 8016ecc:	4652      	mov	r2, sl
 8016ece:	4631      	mov	r1, r6
 8016ed0:	f009 fce0 	bl	8020894 <memset>
 8016ed4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ed8:	463a      	mov	r2, r7
 8016eda:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016edc:	4651      	mov	r1, sl
 8016ede:	626b      	str	r3, [r5, #36]	@ 0x24
 8016ee0:	62a6      	str	r6, [r4, #40]	@ 0x28
 8016ee2:	47c8      	blx	r9
 8016ee4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016ee6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8016ee8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8016eea:	2c00      	cmp	r4, #0
 8016eec:	f000 80f2 	beq.w	80170d4 <rcl_wait_set_resize+0x350>
 8016ef0:	4620      	mov	r0, r4
 8016ef2:	4652      	mov	r2, sl
 8016ef4:	4631      	mov	r1, r6
 8016ef6:	f009 fccd 	bl	8020894 <memset>
 8016efa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016efc:	2600      	movs	r6, #0
 8016efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f00:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8016f02:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016f06:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8016f08:	6326      	str	r6, [r4, #48]	@ 0x30
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	f040 8097 	bne.w	801703e <rcl_wait_set_resize+0x2ba>
 8016f10:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016f12:	b120      	cbz	r0, 8016f1e <rcl_wait_set_resize+0x19a>
 8016f14:	4639      	mov	r1, r7
 8016f16:	47c0      	blx	r8
 8016f18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f1a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f1c:	62ab      	str	r3, [r5, #40]	@ 0x28
 8016f1e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8016f20:	2800      	cmp	r0, #0
 8016f22:	d04c      	beq.n	8016fbe <rcl_wait_set_resize+0x23a>
 8016f24:	4639      	mov	r1, r7
 8016f26:	47c0      	blx	r8
 8016f28:	2300      	movs	r3, #0
 8016f2a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 8016f32:	b003      	add	sp, #12
 8016f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f38:	6800      	ldr	r0, [r0, #0]
 8016f3a:	b120      	cbz	r0, 8016f46 <rcl_wait_set_resize+0x1c2>
 8016f3c:	4651      	mov	r1, sl
 8016f3e:	47d8      	blx	fp
 8016f40:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f42:	f8c5 8000 	str.w	r8, [r5]
 8016f46:	68a0      	ldr	r0, [r4, #8]
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	f43f af5f 	beq.w	8016e0c <rcl_wait_set_resize+0x88>
 8016f4e:	4651      	mov	r1, sl
 8016f50:	47d8      	blx	fp
 8016f52:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f54:	2300      	movs	r3, #0
 8016f56:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8016f5a:	e757      	b.n	8016e0c <rcl_wait_set_resize+0x88>
 8016f5c:	00b4      	lsls	r4, r6, #2
 8016f5e:	464a      	mov	r2, r9
 8016f60:	68a8      	ldr	r0, [r5, #8]
 8016f62:	4621      	mov	r1, r4
 8016f64:	4798      	blx	r3
 8016f66:	60a8      	str	r0, [r5, #8]
 8016f68:	b340      	cbz	r0, 8016fbc <rcl_wait_set_resize+0x238>
 8016f6a:	4622      	mov	r2, r4
 8016f6c:	4641      	mov	r1, r8
 8016f6e:	f009 fc91 	bl	8020894 <memset>
 8016f72:	f04f 0800 	mov.w	r8, #0
 8016f76:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f78:	60ee      	str	r6, [r5, #12]
 8016f7a:	19f6      	adds	r6, r6, r7
 8016f7c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016f80:	f8c4 8010 	str.w	r8, [r4, #16]
 8016f84:	f43f af5e 	beq.w	8016e44 <rcl_wait_set_resize+0xc0>
 8016f88:	00b6      	lsls	r6, r6, #2
 8016f8a:	464a      	mov	r2, r9
 8016f8c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8016f8e:	6960      	ldr	r0, [r4, #20]
 8016f90:	4631      	mov	r1, r6
 8016f92:	4798      	blx	r3
 8016f94:	4681      	mov	r9, r0
 8016f96:	6160      	str	r0, [r4, #20]
 8016f98:	2800      	cmp	r0, #0
 8016f9a:	f000 8084 	beq.w	80170a6 <rcl_wait_set_resize+0x322>
 8016f9e:	4632      	mov	r2, r6
 8016fa0:	4641      	mov	r1, r8
 8016fa2:	f009 fc77 	bl	8020894 <memset>
 8016fa6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016fa8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016fac:	e753      	b.n	8016e56 <rcl_wait_set_resize+0xd2>
 8016fae:	009c      	lsls	r4, r3, #2
 8016fb0:	464a      	mov	r2, r9
 8016fb2:	69a8      	ldr	r0, [r5, #24]
 8016fb4:	4621      	mov	r1, r4
 8016fb6:	47c0      	blx	r8
 8016fb8:	61a8      	str	r0, [r5, #24]
 8016fba:	bb40      	cbnz	r0, 801700e <rcl_wait_set_resize+0x28a>
 8016fbc:	200a      	movs	r0, #10
 8016fbe:	b003      	add	sp, #12
 8016fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fc4:	00bc      	lsls	r4, r7, #2
 8016fc6:	464a      	mov	r2, r9
 8016fc8:	6928      	ldr	r0, [r5, #16]
 8016fca:	4621      	mov	r1, r4
 8016fcc:	47c0      	blx	r8
 8016fce:	6128      	str	r0, [r5, #16]
 8016fd0:	2800      	cmp	r0, #0
 8016fd2:	d0f3      	beq.n	8016fbc <rcl_wait_set_resize+0x238>
 8016fd4:	4622      	mov	r2, r4
 8016fd6:	4631      	mov	r1, r6
 8016fd8:	f009 fc5c 	bl	8020894 <memset>
 8016fdc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016fde:	616f      	str	r7, [r5, #20]
 8016fe0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016fe4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016fe8:	e747      	b.n	8016e7a <rcl_wait_set_resize+0xf6>
 8016fea:	6a28      	ldr	r0, [r5, #32]
 8016fec:	b120      	cbz	r0, 8016ff8 <rcl_wait_set_resize+0x274>
 8016fee:	4639      	mov	r1, r7
 8016ff0:	47c0      	blx	r8
 8016ff2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ff4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016ff6:	622b      	str	r3, [r5, #32]
 8016ff8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016ffa:	2800      	cmp	r0, #0
 8016ffc:	f43f af7e 	beq.w	8016efc <rcl_wait_set_resize+0x178>
 8017000:	4639      	mov	r1, r7
 8017002:	47c0      	blx	r8
 8017004:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017006:	2300      	movs	r3, #0
 8017008:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801700c:	e776      	b.n	8016efc <rcl_wait_set_resize+0x178>
 801700e:	4622      	mov	r2, r4
 8017010:	4631      	mov	r1, r6
 8017012:	f009 fc3f 	bl	8020894 <memset>
 8017016:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8017018:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801701a:	464a      	mov	r2, r9
 801701c:	6a38      	ldr	r0, [r7, #32]
 801701e:	4621      	mov	r1, r4
 8017020:	61eb      	str	r3, [r5, #28]
 8017022:	61fe      	str	r6, [r7, #28]
 8017024:	47c0      	blx	r8
 8017026:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017028:	6238      	str	r0, [r7, #32]
 801702a:	6a1f      	ldr	r7, [r3, #32]
 801702c:	2f00      	cmp	r7, #0
 801702e:	d04a      	beq.n	80170c6 <rcl_wait_set_resize+0x342>
 8017030:	4622      	mov	r2, r4
 8017032:	4631      	mov	r1, r6
 8017034:	4638      	mov	r0, r7
 8017036:	f009 fc2d 	bl	8020894 <memset>
 801703a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801703c:	e733      	b.n	8016ea6 <rcl_wait_set_resize+0x122>
 801703e:	009c      	lsls	r4, r3, #2
 8017040:	463a      	mov	r2, r7
 8017042:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017044:	4621      	mov	r1, r4
 8017046:	47c8      	blx	r9
 8017048:	62a8      	str	r0, [r5, #40]	@ 0x28
 801704a:	2800      	cmp	r0, #0
 801704c:	d0b6      	beq.n	8016fbc <rcl_wait_set_resize+0x238>
 801704e:	4622      	mov	r2, r4
 8017050:	4631      	mov	r1, r6
 8017052:	f009 fc1f 	bl	8020894 <memset>
 8017056:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801705a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801705c:	463a      	mov	r2, r7
 801705e:	4621      	mov	r1, r4
 8017060:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8017064:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8017066:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801706a:	47c8      	blx	r9
 801706c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801706e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8017072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017074:	2b00      	cmp	r3, #0
 8017076:	d034      	beq.n	80170e2 <rcl_wait_set_resize+0x35e>
 8017078:	4622      	mov	r2, r4
 801707a:	4631      	mov	r1, r6
 801707c:	4618      	mov	r0, r3
 801707e:	f009 fc09 	bl	8020894 <memset>
 8017082:	4630      	mov	r0, r6
 8017084:	b003      	add	sp, #12
 8017086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801708a:	200b      	movs	r0, #11
 801708c:	4770      	bx	lr
 801708e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017092:	e794      	b.n	8016fbe <rcl_wait_set_resize+0x23a>
 8017094:	6828      	ldr	r0, [r5, #0]
 8017096:	4651      	mov	r1, sl
 8017098:	9301      	str	r3, [sp, #4]
 801709a:	47d8      	blx	fp
 801709c:	9b01      	ldr	r3, [sp, #4]
 801709e:	200a      	movs	r0, #10
 80170a0:	e9c5 3300 	strd	r3, r3, [r5]
 80170a4:	e78b      	b.n	8016fbe <rcl_wait_set_resize+0x23a>
 80170a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80170a8:	68a8      	ldr	r0, [r5, #8]
 80170aa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80170ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80170ae:	4798      	blx	r3
 80170b0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80170b2:	6928      	ldr	r0, [r5, #16]
 80170b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80170b6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80170b8:	e9c5 9902 	strd	r9, r9, [r5, #8]
 80170bc:	4790      	blx	r2
 80170be:	200a      	movs	r0, #10
 80170c0:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80170c4:	e77b      	b.n	8016fbe <rcl_wait_set_resize+0x23a>
 80170c6:	69a8      	ldr	r0, [r5, #24]
 80170c8:	4649      	mov	r1, r9
 80170ca:	47d0      	blx	sl
 80170cc:	200a      	movs	r0, #10
 80170ce:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80170d2:	e774      	b.n	8016fbe <rcl_wait_set_resize+0x23a>
 80170d4:	6a28      	ldr	r0, [r5, #32]
 80170d6:	4639      	mov	r1, r7
 80170d8:	47c0      	blx	r8
 80170da:	200a      	movs	r0, #10
 80170dc:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80170e0:	e76d      	b.n	8016fbe <rcl_wait_set_resize+0x23a>
 80170e2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80170e4:	4639      	mov	r1, r7
 80170e6:	9301      	str	r3, [sp, #4]
 80170e8:	47c0      	blx	r8
 80170ea:	9b01      	ldr	r3, [sp, #4]
 80170ec:	200a      	movs	r0, #10
 80170ee:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80170f2:	e764      	b.n	8016fbe <rcl_wait_set_resize+0x23a>

080170f4 <rcl_wait_set_init>:
 80170f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170f8:	b085      	sub	sp, #20
 80170fa:	4605      	mov	r5, r0
 80170fc:	460e      	mov	r6, r1
 80170fe:	4617      	mov	r7, r2
 8017100:	a812      	add	r0, sp, #72	@ 0x48
 8017102:	4698      	mov	r8, r3
 8017104:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8017108:	f7fd fa82 	bl	8014610 <rcutils_allocator_is_valid>
 801710c:	2d00      	cmp	r5, #0
 801710e:	d072      	beq.n	80171f6 <rcl_wait_set_init+0x102>
 8017110:	f080 0001 	eor.w	r0, r0, #1
 8017114:	b2c0      	uxtb	r0, r0
 8017116:	2800      	cmp	r0, #0
 8017118:	d16d      	bne.n	80171f6 <rcl_wait_set_init+0x102>
 801711a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801711e:	f1ba 0f00 	cmp.w	sl, #0
 8017122:	d004      	beq.n	801712e <rcl_wait_set_init+0x3a>
 8017124:	2464      	movs	r4, #100	@ 0x64
 8017126:	4620      	mov	r0, r4
 8017128:	b005      	add	sp, #20
 801712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801712e:	f1b9 0f00 	cmp.w	r9, #0
 8017132:	d060      	beq.n	80171f6 <rcl_wait_set_init+0x102>
 8017134:	4648      	mov	r0, r9
 8017136:	f7fe f937 	bl	80153a8 <rcl_context_is_valid>
 801713a:	2800      	cmp	r0, #0
 801713c:	d068      	beq.n	8017210 <rcl_wait_set_init+0x11c>
 801713e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017140:	205c      	movs	r0, #92	@ 0x5c
 8017142:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8017144:	4798      	blx	r3
 8017146:	6328      	str	r0, [r5, #48]	@ 0x30
 8017148:	2800      	cmp	r0, #0
 801714a:	d063      	beq.n	8017214 <rcl_wait_set_init+0x120>
 801714c:	225c      	movs	r2, #92	@ 0x5c
 801714e:	4651      	mov	r1, sl
 8017150:	f009 fba0 	bl	8020894 <memset>
 8017154:	ac12      	add	r4, sp, #72	@ 0x48
 8017156:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 801715a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801715e:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 8017162:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 8017166:	eb03 0e02 	add.w	lr, r3, r2
 801716a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801716c:	f8d9 9000 	ldr.w	r9, [r9]
 8017170:	449e      	add	lr, r3
 8017172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017174:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8017178:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801717c:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8017180:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 8017184:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 8017188:	44be      	add	lr, r7
 801718a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801718e:	6823      	ldr	r3, [r4, #0]
 8017190:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8017194:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8017198:	f8cc 3000 	str.w	r3, [ip]
 801719c:	f002 ffee 	bl	801a17c <rmw_create_wait_set>
 80171a0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80171a2:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 80171a6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80171a8:	b350      	cbz	r0, 8017200 <rcl_wait_set_init+0x10c>
 80171aa:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80171ac:	4643      	mov	r3, r8
 80171ae:	463a      	mov	r2, r7
 80171b0:	4631      	mov	r1, r6
 80171b2:	9402      	str	r4, [sp, #8]
 80171b4:	4628      	mov	r0, r5
 80171b6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80171b8:	9401      	str	r4, [sp, #4]
 80171ba:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80171bc:	9400      	str	r4, [sp, #0]
 80171be:	f7ff fde1 	bl	8016d84 <rcl_wait_set_resize>
 80171c2:	4604      	mov	r4, r0
 80171c4:	2800      	cmp	r0, #0
 80171c6:	d0ae      	beq.n	8017126 <rcl_wait_set_init+0x32>
 80171c8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80171ca:	bb2b      	cbnz	r3, 8017218 <rcl_wait_set_init+0x124>
 80171cc:	2600      	movs	r6, #0
 80171ce:	4628      	mov	r0, r5
 80171d0:	4633      	mov	r3, r6
 80171d2:	4632      	mov	r2, r6
 80171d4:	4631      	mov	r1, r6
 80171d6:	9600      	str	r6, [sp, #0]
 80171d8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80171dc:	f7ff fdd2 	bl	8016d84 <rcl_wait_set_resize>
 80171e0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80171e2:	2800      	cmp	r0, #0
 80171e4:	d09f      	beq.n	8017126 <rcl_wait_set_init+0x32>
 80171e6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80171e8:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80171ea:	4798      	blx	r3
 80171ec:	4620      	mov	r0, r4
 80171ee:	632e      	str	r6, [r5, #48]	@ 0x30
 80171f0:	b005      	add	sp, #20
 80171f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171f6:	240b      	movs	r4, #11
 80171f8:	4620      	mov	r0, r4
 80171fa:	b005      	add	sp, #20
 80171fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017200:	2401      	movs	r4, #1
 8017202:	f002 ffc5 	bl	801a190 <rmw_destroy_wait_set>
 8017206:	2800      	cmp	r0, #0
 8017208:	bf18      	it	ne
 801720a:	f44f 7461 	movne.w	r4, #900	@ 0x384
 801720e:	e7dd      	b.n	80171cc <rcl_wait_set_init+0xd8>
 8017210:	2465      	movs	r4, #101	@ 0x65
 8017212:	e788      	b.n	8017126 <rcl_wait_set_init+0x32>
 8017214:	240a      	movs	r4, #10
 8017216:	e786      	b.n	8017126 <rcl_wait_set_init+0x32>
 8017218:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801721a:	e7f2      	b.n	8017202 <rcl_wait_set_init+0x10e>

0801721c <rcl_wait_set_add_guard_condition>:
 801721c:	b318      	cbz	r0, 8017266 <rcl_wait_set_add_guard_condition+0x4a>
 801721e:	b538      	push	{r3, r4, r5, lr}
 8017220:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017222:	4604      	mov	r4, r0
 8017224:	b30b      	cbz	r3, 801726a <rcl_wait_set_add_guard_condition+0x4e>
 8017226:	b319      	cbz	r1, 8017270 <rcl_wait_set_add_guard_condition+0x54>
 8017228:	68dd      	ldr	r5, [r3, #12]
 801722a:	68c0      	ldr	r0, [r0, #12]
 801722c:	4285      	cmp	r5, r0
 801722e:	d217      	bcs.n	8017260 <rcl_wait_set_add_guard_condition+0x44>
 8017230:	1c68      	adds	r0, r5, #1
 8017232:	60d8      	str	r0, [r3, #12]
 8017234:	68a3      	ldr	r3, [r4, #8]
 8017236:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801723a:	b102      	cbz	r2, 801723e <rcl_wait_set_add_guard_condition+0x22>
 801723c:	6015      	str	r5, [r2, #0]
 801723e:	4608      	mov	r0, r1
 8017240:	f007 fd52 	bl	801ece8 <rcl_guard_condition_get_rmw_handle>
 8017244:	b150      	cbz	r0, 801725c <rcl_wait_set_add_guard_condition+0x40>
 8017246:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017248:	6842      	ldr	r2, [r0, #4]
 801724a:	2000      	movs	r0, #0
 801724c:	695b      	ldr	r3, [r3, #20]
 801724e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017252:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017254:	6913      	ldr	r3, [r2, #16]
 8017256:	3301      	adds	r3, #1
 8017258:	6113      	str	r3, [r2, #16]
 801725a:	bd38      	pop	{r3, r4, r5, pc}
 801725c:	2001      	movs	r0, #1
 801725e:	bd38      	pop	{r3, r4, r5, pc}
 8017260:	f240 3086 	movw	r0, #902	@ 0x386
 8017264:	bd38      	pop	{r3, r4, r5, pc}
 8017266:	200b      	movs	r0, #11
 8017268:	4770      	bx	lr
 801726a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801726e:	bd38      	pop	{r3, r4, r5, pc}
 8017270:	200b      	movs	r0, #11
 8017272:	bd38      	pop	{r3, r4, r5, pc}

08017274 <rcl_wait_set_add_timer>:
 8017274:	b328      	cbz	r0, 80172c2 <rcl_wait_set_add_timer+0x4e>
 8017276:	b538      	push	{r3, r4, r5, lr}
 8017278:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801727a:	4604      	mov	r4, r0
 801727c:	b31b      	cbz	r3, 80172c6 <rcl_wait_set_add_timer+0x52>
 801727e:	b329      	cbz	r1, 80172cc <rcl_wait_set_add_timer+0x58>
 8017280:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8017282:	6965      	ldr	r5, [r4, #20]
 8017284:	42a8      	cmp	r0, r5
 8017286:	d219      	bcs.n	80172bc <rcl_wait_set_add_timer+0x48>
 8017288:	1c45      	adds	r5, r0, #1
 801728a:	641d      	str	r5, [r3, #64]	@ 0x40
 801728c:	6923      	ldr	r3, [r4, #16]
 801728e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8017292:	b102      	cbz	r2, 8017296 <rcl_wait_set_add_timer+0x22>
 8017294:	6010      	str	r0, [r2, #0]
 8017296:	4608      	mov	r0, r1
 8017298:	f7ff fb9a 	bl	80169d0 <rcl_timer_get_guard_condition>
 801729c:	b168      	cbz	r0, 80172ba <rcl_wait_set_add_timer+0x46>
 801729e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80172a0:	68e3      	ldr	r3, [r4, #12]
 80172a2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80172a4:	3b01      	subs	r3, #1
 80172a6:	441d      	add	r5, r3
 80172a8:	f007 fd1e 	bl	801ece8 <rcl_guard_condition_get_rmw_handle>
 80172ac:	b180      	cbz	r0, 80172d0 <rcl_wait_set_add_timer+0x5c>
 80172ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80172b0:	6842      	ldr	r2, [r0, #4]
 80172b2:	2000      	movs	r0, #0
 80172b4:	695b      	ldr	r3, [r3, #20]
 80172b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80172ba:	bd38      	pop	{r3, r4, r5, pc}
 80172bc:	f240 3086 	movw	r0, #902	@ 0x386
 80172c0:	bd38      	pop	{r3, r4, r5, pc}
 80172c2:	200b      	movs	r0, #11
 80172c4:	4770      	bx	lr
 80172c6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80172ca:	bd38      	pop	{r3, r4, r5, pc}
 80172cc:	200b      	movs	r0, #11
 80172ce:	bd38      	pop	{r3, r4, r5, pc}
 80172d0:	2001      	movs	r0, #1
 80172d2:	bd38      	pop	{r3, r4, r5, pc}

080172d4 <rcl_wait_set_add_client>:
 80172d4:	b318      	cbz	r0, 801731e <rcl_wait_set_add_client+0x4a>
 80172d6:	b538      	push	{r3, r4, r5, lr}
 80172d8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80172da:	4604      	mov	r4, r0
 80172dc:	b30b      	cbz	r3, 8017322 <rcl_wait_set_add_client+0x4e>
 80172de:	b319      	cbz	r1, 8017328 <rcl_wait_set_add_client+0x54>
 80172e0:	699d      	ldr	r5, [r3, #24]
 80172e2:	69c0      	ldr	r0, [r0, #28]
 80172e4:	4285      	cmp	r5, r0
 80172e6:	d217      	bcs.n	8017318 <rcl_wait_set_add_client+0x44>
 80172e8:	1c68      	adds	r0, r5, #1
 80172ea:	6198      	str	r0, [r3, #24]
 80172ec:	69a3      	ldr	r3, [r4, #24]
 80172ee:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80172f2:	b102      	cbz	r2, 80172f6 <rcl_wait_set_add_client+0x22>
 80172f4:	6015      	str	r5, [r2, #0]
 80172f6:	4608      	mov	r0, r1
 80172f8:	f7fd ffba 	bl	8015270 <rcl_client_get_rmw_handle>
 80172fc:	b150      	cbz	r0, 8017314 <rcl_wait_set_add_client+0x40>
 80172fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017300:	6842      	ldr	r2, [r0, #4]
 8017302:	2000      	movs	r0, #0
 8017304:	6a1b      	ldr	r3, [r3, #32]
 8017306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801730a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801730c:	69d3      	ldr	r3, [r2, #28]
 801730e:	3301      	adds	r3, #1
 8017310:	61d3      	str	r3, [r2, #28]
 8017312:	bd38      	pop	{r3, r4, r5, pc}
 8017314:	2001      	movs	r0, #1
 8017316:	bd38      	pop	{r3, r4, r5, pc}
 8017318:	f240 3086 	movw	r0, #902	@ 0x386
 801731c:	bd38      	pop	{r3, r4, r5, pc}
 801731e:	200b      	movs	r0, #11
 8017320:	4770      	bx	lr
 8017322:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017326:	bd38      	pop	{r3, r4, r5, pc}
 8017328:	200b      	movs	r0, #11
 801732a:	bd38      	pop	{r3, r4, r5, pc}

0801732c <rcl_wait_set_add_service>:
 801732c:	b318      	cbz	r0, 8017376 <rcl_wait_set_add_service+0x4a>
 801732e:	b538      	push	{r3, r4, r5, lr}
 8017330:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017332:	4604      	mov	r4, r0
 8017334:	b30b      	cbz	r3, 801737a <rcl_wait_set_add_service+0x4e>
 8017336:	b319      	cbz	r1, 8017380 <rcl_wait_set_add_service+0x54>
 8017338:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801733a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801733c:	4285      	cmp	r5, r0
 801733e:	d217      	bcs.n	8017370 <rcl_wait_set_add_service+0x44>
 8017340:	1c68      	adds	r0, r5, #1
 8017342:	6258      	str	r0, [r3, #36]	@ 0x24
 8017344:	6a23      	ldr	r3, [r4, #32]
 8017346:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801734a:	b102      	cbz	r2, 801734e <rcl_wait_set_add_service+0x22>
 801734c:	6015      	str	r5, [r2, #0]
 801734e:	4608      	mov	r0, r1
 8017350:	f7fe ffe2 	bl	8016318 <rcl_service_get_rmw_handle>
 8017354:	b150      	cbz	r0, 801736c <rcl_wait_set_add_service+0x40>
 8017356:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017358:	6842      	ldr	r2, [r0, #4]
 801735a:	2000      	movs	r0, #0
 801735c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801735e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017362:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017364:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8017366:	3301      	adds	r3, #1
 8017368:	6293      	str	r3, [r2, #40]	@ 0x28
 801736a:	bd38      	pop	{r3, r4, r5, pc}
 801736c:	2001      	movs	r0, #1
 801736e:	bd38      	pop	{r3, r4, r5, pc}
 8017370:	f240 3086 	movw	r0, #902	@ 0x386
 8017374:	bd38      	pop	{r3, r4, r5, pc}
 8017376:	200b      	movs	r0, #11
 8017378:	4770      	bx	lr
 801737a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801737e:	bd38      	pop	{r3, r4, r5, pc}
 8017380:	200b      	movs	r0, #11
 8017382:	bd38      	pop	{r3, r4, r5, pc}
 8017384:	0000      	movs	r0, r0
	...

08017388 <rcl_wait>:
 8017388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801738c:	ed2d 8b02 	vpush	{d8}
 8017390:	b08d      	sub	sp, #52	@ 0x34
 8017392:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017396:	2800      	cmp	r0, #0
 8017398:	f000 814f 	beq.w	801763a <rcl_wait+0x2b2>
 801739c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801739e:	4605      	mov	r5, r0
 80173a0:	2e00      	cmp	r6, #0
 80173a2:	f000 811a 	beq.w	80175da <rcl_wait+0x252>
 80173a6:	6843      	ldr	r3, [r0, #4]
 80173a8:	b983      	cbnz	r3, 80173cc <rcl_wait+0x44>
 80173aa:	68eb      	ldr	r3, [r5, #12]
 80173ac:	b973      	cbnz	r3, 80173cc <rcl_wait+0x44>
 80173ae:	696b      	ldr	r3, [r5, #20]
 80173b0:	b963      	cbnz	r3, 80173cc <rcl_wait+0x44>
 80173b2:	69eb      	ldr	r3, [r5, #28]
 80173b4:	b953      	cbnz	r3, 80173cc <rcl_wait+0x44>
 80173b6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80173b8:	b943      	cbnz	r3, 80173cc <rcl_wait+0x44>
 80173ba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80173bc:	b933      	cbnz	r3, 80173cc <rcl_wait+0x44>
 80173be:	f240 3085 	movw	r0, #901	@ 0x385
 80173c2:	b00d      	add	sp, #52	@ 0x34
 80173c4:	ecbd 8b02 	vpop	{d8}
 80173c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173cc:	9b04      	ldr	r3, [sp, #16]
 80173ce:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80173d0:	2b01      	cmp	r3, #1
 80173d2:	9b05      	ldr	r3, [sp, #20]
 80173d4:	f173 0300 	sbcs.w	r3, r3, #0
 80173d8:	f2c0 80f8 	blt.w	80175cc <rcl_wait+0x244>
 80173dc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80173e0:	2a00      	cmp	r2, #0
 80173e2:	f000 810f 	beq.w	8017604 <rcl_wait+0x27c>
 80173e6:	2400      	movs	r4, #0
 80173e8:	4613      	mov	r3, r2
 80173ea:	f240 3921 	movw	r9, #801	@ 0x321
 80173ee:	4632      	mov	r2, r6
 80173f0:	46a2      	mov	sl, r4
 80173f2:	46a3      	mov	fp, r4
 80173f4:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8017658 <rcl_wait+0x2d0>
 80173f8:	e014      	b.n	8017424 <rcl_wait+0x9c>
 80173fa:	2800      	cmp	r0, #0
 80173fc:	d1e1      	bne.n	80173c2 <rcl_wait+0x3a>
 80173fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017402:	4542      	cmp	r2, r8
 8017404:	eb73 0107 	sbcs.w	r1, r3, r7
 8017408:	da03      	bge.n	8017412 <rcl_wait+0x8a>
 801740a:	4690      	mov	r8, r2
 801740c:	461f      	mov	r7, r3
 801740e:	f04f 0b01 	mov.w	fp, #1
 8017412:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017414:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017416:	3401      	adds	r4, #1
 8017418:	f14a 0a00 	adc.w	sl, sl, #0
 801741c:	429c      	cmp	r4, r3
 801741e:	f17a 0100 	sbcs.w	r1, sl, #0
 8017422:	d228      	bcs.n	8017476 <rcl_wait+0xee>
 8017424:	6928      	ldr	r0, [r5, #16]
 8017426:	a908      	add	r1, sp, #32
 8017428:	00a6      	lsls	r6, r4, #2
 801742a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801742e:	2800      	cmp	r0, #0
 8017430:	d0f1      	beq.n	8017416 <rcl_wait+0x8e>
 8017432:	68eb      	ldr	r3, [r5, #12]
 8017434:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8017438:	4423      	add	r3, r4
 801743a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801743e:	f1be 0f00 	cmp.w	lr, #0
 8017442:	d006      	beq.n	8017452 <rcl_wait+0xca>
 8017444:	6913      	ldr	r3, [r2, #16]
 8017446:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801744a:	3301      	adds	r3, #1
 801744c:	6113      	str	r3, [r2, #16]
 801744e:	692b      	ldr	r3, [r5, #16]
 8017450:	5998      	ldr	r0, [r3, r6]
 8017452:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017456:	f7ff fa89 	bl	801696c <rcl_timer_get_time_until_next_call>
 801745a:	4548      	cmp	r0, r9
 801745c:	d1cd      	bne.n	80173fa <rcl_wait+0x72>
 801745e:	692b      	ldr	r3, [r5, #16]
 8017460:	2200      	movs	r2, #0
 8017462:	3401      	adds	r4, #1
 8017464:	519a      	str	r2, [r3, r6]
 8017466:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017468:	f14a 0a00 	adc.w	sl, sl, #0
 801746c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801746e:	429c      	cmp	r4, r3
 8017470:	f17a 0100 	sbcs.w	r1, sl, #0
 8017474:	d3d6      	bcc.n	8017424 <rcl_wait+0x9c>
 8017476:	4659      	mov	r1, fp
 8017478:	4616      	mov	r6, r2
 801747a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801747e:	4313      	orrs	r3, r2
 8017480:	f040 80b4 	bne.w	80175ec <rcl_wait+0x264>
 8017484:	2300      	movs	r3, #0
 8017486:	2200      	movs	r2, #0
 8017488:	460c      	mov	r4, r1
 801748a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801748e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017492:	ab08      	add	r3, sp, #32
 8017494:	9302      	str	r3, [sp, #8]
 8017496:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801749a:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801749c:	f106 0110 	add.w	r1, r6, #16
 80174a0:	9300      	str	r3, [sp, #0]
 80174a2:	1d30      	adds	r0, r6, #4
 80174a4:	f106 031c 	add.w	r3, r6, #28
 80174a8:	9201      	str	r2, [sp, #4]
 80174aa:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80174ae:	f002 fd01 	bl	8019eb4 <rmw_wait>
 80174b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80174b4:	4680      	mov	r8, r0
 80174b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80174b8:	b1e2      	cbz	r2, 80174f4 <rcl_wait+0x16c>
 80174ba:	f04f 0900 	mov.w	r9, #0
 80174be:	464f      	mov	r7, r9
 80174c0:	692a      	ldr	r2, [r5, #16]
 80174c2:	f10d 011f 	add.w	r1, sp, #31
 80174c6:	ea4f 0689 	mov.w	r6, r9, lsl #2
 80174ca:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 80174ce:	b160      	cbz	r0, 80174ea <rcl_wait+0x162>
 80174d0:	f88d 701f 	strb.w	r7, [sp, #31]
 80174d4:	f7ff fa0e 	bl	80168f4 <rcl_timer_is_ready>
 80174d8:	2800      	cmp	r0, #0
 80174da:	f47f af72 	bne.w	80173c2 <rcl_wait+0x3a>
 80174de:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80174e2:	b90b      	cbnz	r3, 80174e8 <rcl_wait+0x160>
 80174e4:	692a      	ldr	r2, [r5, #16]
 80174e6:	5193      	str	r3, [r2, r6]
 80174e8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80174ea:	f109 0901 	add.w	r9, r9, #1
 80174ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80174f0:	454a      	cmp	r2, r9
 80174f2:	d8e5      	bhi.n	80174c0 <rcl_wait+0x138>
 80174f4:	f038 0002 	bics.w	r0, r8, #2
 80174f8:	d176      	bne.n	80175e8 <rcl_wait+0x260>
 80174fa:	686f      	ldr	r7, [r5, #4]
 80174fc:	b17f      	cbz	r7, 801751e <rcl_wait+0x196>
 80174fe:	4602      	mov	r2, r0
 8017500:	e002      	b.n	8017508 <rcl_wait+0x180>
 8017502:	3201      	adds	r2, #1
 8017504:	42ba      	cmp	r2, r7
 8017506:	d00a      	beq.n	801751e <rcl_wait+0x196>
 8017508:	6899      	ldr	r1, [r3, #8]
 801750a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801750e:	2900      	cmp	r1, #0
 8017510:	d1f7      	bne.n	8017502 <rcl_wait+0x17a>
 8017512:	682e      	ldr	r6, [r5, #0]
 8017514:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017518:	3201      	adds	r2, #1
 801751a:	42ba      	cmp	r2, r7
 801751c:	d1f4      	bne.n	8017508 <rcl_wait+0x180>
 801751e:	68ef      	ldr	r7, [r5, #12]
 8017520:	b17f      	cbz	r7, 8017542 <rcl_wait+0x1ba>
 8017522:	2200      	movs	r2, #0
 8017524:	e002      	b.n	801752c <rcl_wait+0x1a4>
 8017526:	3201      	adds	r2, #1
 8017528:	42ba      	cmp	r2, r7
 801752a:	d00a      	beq.n	8017542 <rcl_wait+0x1ba>
 801752c:	6959      	ldr	r1, [r3, #20]
 801752e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017532:	2900      	cmp	r1, #0
 8017534:	d1f7      	bne.n	8017526 <rcl_wait+0x19e>
 8017536:	68ae      	ldr	r6, [r5, #8]
 8017538:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801753c:	3201      	adds	r2, #1
 801753e:	42ba      	cmp	r2, r7
 8017540:	d1f4      	bne.n	801752c <rcl_wait+0x1a4>
 8017542:	69ef      	ldr	r7, [r5, #28]
 8017544:	b17f      	cbz	r7, 8017566 <rcl_wait+0x1de>
 8017546:	2200      	movs	r2, #0
 8017548:	e002      	b.n	8017550 <rcl_wait+0x1c8>
 801754a:	3201      	adds	r2, #1
 801754c:	42ba      	cmp	r2, r7
 801754e:	d00a      	beq.n	8017566 <rcl_wait+0x1de>
 8017550:	6a19      	ldr	r1, [r3, #32]
 8017552:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017556:	2900      	cmp	r1, #0
 8017558:	d1f7      	bne.n	801754a <rcl_wait+0x1c2>
 801755a:	69ae      	ldr	r6, [r5, #24]
 801755c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017560:	3201      	adds	r2, #1
 8017562:	42ba      	cmp	r2, r7
 8017564:	d1f4      	bne.n	8017550 <rcl_wait+0x1c8>
 8017566:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8017568:	b17f      	cbz	r7, 801758a <rcl_wait+0x202>
 801756a:	2200      	movs	r2, #0
 801756c:	e002      	b.n	8017574 <rcl_wait+0x1ec>
 801756e:	3201      	adds	r2, #1
 8017570:	42ba      	cmp	r2, r7
 8017572:	d00a      	beq.n	801758a <rcl_wait+0x202>
 8017574:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8017576:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801757a:	2900      	cmp	r1, #0
 801757c:	d1f7      	bne.n	801756e <rcl_wait+0x1e6>
 801757e:	6a2e      	ldr	r6, [r5, #32]
 8017580:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017584:	3201      	adds	r2, #1
 8017586:	42ba      	cmp	r2, r7
 8017588:	d1f4      	bne.n	8017574 <rcl_wait+0x1ec>
 801758a:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 801758c:	b17f      	cbz	r7, 80175ae <rcl_wait+0x226>
 801758e:	2200      	movs	r2, #0
 8017590:	e002      	b.n	8017598 <rcl_wait+0x210>
 8017592:	3201      	adds	r2, #1
 8017594:	42ba      	cmp	r2, r7
 8017596:	d00a      	beq.n	80175ae <rcl_wait+0x226>
 8017598:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801759a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801759e:	2900      	cmp	r1, #0
 80175a0:	d1f7      	bne.n	8017592 <rcl_wait+0x20a>
 80175a2:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 80175a4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80175a8:	3201      	adds	r2, #1
 80175aa:	42ba      	cmp	r2, r7
 80175ac:	d1f4      	bne.n	8017598 <rcl_wait+0x210>
 80175ae:	f1b8 0f02 	cmp.w	r8, #2
 80175b2:	f47f af06 	bne.w	80173c2 <rcl_wait+0x3a>
 80175b6:	f084 0301 	eor.w	r3, r4, #1
 80175ba:	b2db      	uxtb	r3, r3
 80175bc:	2b00      	cmp	r3, #0
 80175be:	bf18      	it	ne
 80175c0:	2002      	movne	r0, #2
 80175c2:	b00d      	add	sp, #52	@ 0x34
 80175c4:	ecbd 8b02 	vpop	{d8}
 80175c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175cc:	2a00      	cmp	r2, #0
 80175ce:	d03a      	beq.n	8017646 <rcl_wait+0x2be>
 80175d0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80175d4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80175d8:	e705      	b.n	80173e6 <rcl_wait+0x5e>
 80175da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80175de:	b00d      	add	sp, #52	@ 0x34
 80175e0:	ecbd 8b02 	vpop	{d8}
 80175e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175e8:	2001      	movs	r0, #1
 80175ea:	e6ea      	b.n	80173c2 <rcl_wait+0x3a>
 80175ec:	9b04      	ldr	r3, [sp, #16]
 80175ee:	460c      	mov	r4, r1
 80175f0:	2b01      	cmp	r3, #1
 80175f2:	9b05      	ldr	r3, [sp, #20]
 80175f4:	f173 0300 	sbcs.w	r3, r3, #0
 80175f8:	bfa8      	it	ge
 80175fa:	f044 0401 	orrge.w	r4, r4, #1
 80175fe:	b914      	cbnz	r4, 8017606 <rcl_wait+0x27e>
 8017600:	4623      	mov	r3, r4
 8017602:	e747      	b.n	8017494 <rcl_wait+0x10c>
 8017604:	4611      	mov	r1, r2
 8017606:	2f00      	cmp	r7, #0
 8017608:	da02      	bge.n	8017610 <rcl_wait+0x288>
 801760a:	f04f 0800 	mov.w	r8, #0
 801760e:	4647      	mov	r7, r8
 8017610:	460c      	mov	r4, r1
 8017612:	4640      	mov	r0, r8
 8017614:	4639      	mov	r1, r7
 8017616:	a312      	add	r3, pc, #72	@ (adr r3, 8017660 <rcl_wait+0x2d8>)
 8017618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801761c:	f7e8 fec8 	bl	80003b0 <__aeabi_ldivmod>
 8017620:	a30f      	add	r3, pc, #60	@ (adr r3, 8017660 <rcl_wait+0x2d8>)
 8017622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801762a:	4640      	mov	r0, r8
 801762c:	4639      	mov	r1, r7
 801762e:	f7e8 febf 	bl	80003b0 <__aeabi_ldivmod>
 8017632:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017636:	ab08      	add	r3, sp, #32
 8017638:	e72c      	b.n	8017494 <rcl_wait+0x10c>
 801763a:	200b      	movs	r0, #11
 801763c:	b00d      	add	sp, #52	@ 0x34
 801763e:	ecbd 8b02 	vpop	{d8}
 8017642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017646:	4611      	mov	r1, r2
 8017648:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801764c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017650:	e713      	b.n	801747a <rcl_wait+0xf2>
 8017652:	bf00      	nop
 8017654:	f3af 8000 	nop.w
 8017658:	ffffffff 	.word	0xffffffff
 801765c:	7fffffff 	.word	0x7fffffff
 8017660:	3b9aca00 	.word	0x3b9aca00
 8017664:	00000000 	.word	0x00000000

08017668 <rcl_action_take_goal_response>:
 8017668:	2800      	cmp	r0, #0
 801766a:	d039      	beq.n	80176e0 <rcl_action_take_goal_response+0x78>
 801766c:	b570      	push	{r4, r5, r6, lr}
 801766e:	4604      	mov	r4, r0
 8017670:	6800      	ldr	r0, [r0, #0]
 8017672:	b380      	cbz	r0, 80176d6 <rcl_action_take_goal_response+0x6e>
 8017674:	460e      	mov	r6, r1
 8017676:	4615      	mov	r5, r2
 8017678:	f7fd fe82 	bl	8015380 <rcl_client_is_valid>
 801767c:	b330      	cbz	r0, 80176cc <rcl_action_take_goal_response+0x64>
 801767e:	6820      	ldr	r0, [r4, #0]
 8017680:	3004      	adds	r0, #4
 8017682:	f7fd fe7d 	bl	8015380 <rcl_client_is_valid>
 8017686:	b308      	cbz	r0, 80176cc <rcl_action_take_goal_response+0x64>
 8017688:	6820      	ldr	r0, [r4, #0]
 801768a:	3008      	adds	r0, #8
 801768c:	f7fd fe78 	bl	8015380 <rcl_client_is_valid>
 8017690:	b1e0      	cbz	r0, 80176cc <rcl_action_take_goal_response+0x64>
 8017692:	6820      	ldr	r0, [r4, #0]
 8017694:	300c      	adds	r0, #12
 8017696:	f7fe ffe5 	bl	8016664 <rcl_subscription_is_valid>
 801769a:	b1b8      	cbz	r0, 80176cc <rcl_action_take_goal_response+0x64>
 801769c:	6820      	ldr	r0, [r4, #0]
 801769e:	3010      	adds	r0, #16
 80176a0:	f7fe ffe0 	bl	8016664 <rcl_subscription_is_valid>
 80176a4:	b190      	cbz	r0, 80176cc <rcl_action_take_goal_response+0x64>
 80176a6:	b1cd      	cbz	r5, 80176dc <rcl_action_take_goal_response+0x74>
 80176a8:	b1c6      	cbz	r6, 80176dc <rcl_action_take_goal_response+0x74>
 80176aa:	462a      	mov	r2, r5
 80176ac:	4631      	mov	r1, r6
 80176ae:	6820      	ldr	r0, [r4, #0]
 80176b0:	f7fd fe1e 	bl	80152f0 <rcl_take_response>
 80176b4:	b148      	cbz	r0, 80176ca <rcl_action_take_goal_response+0x62>
 80176b6:	280a      	cmp	r0, #10
 80176b8:	d007      	beq.n	80176ca <rcl_action_take_goal_response+0x62>
 80176ba:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80176be:	f640 0337 	movw	r3, #2103	@ 0x837
 80176c2:	4290      	cmp	r0, r2
 80176c4:	bf0c      	ite	eq
 80176c6:	4618      	moveq	r0, r3
 80176c8:	2001      	movne	r0, #1
 80176ca:	bd70      	pop	{r4, r5, r6, pc}
 80176cc:	f7fc ffc4 	bl	8014658 <rcutils_reset_error>
 80176d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80176d4:	bd70      	pop	{r4, r5, r6, pc}
 80176d6:	f640 0036 	movw	r0, #2102	@ 0x836
 80176da:	bd70      	pop	{r4, r5, r6, pc}
 80176dc:	200b      	movs	r0, #11
 80176de:	bd70      	pop	{r4, r5, r6, pc}
 80176e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80176e4:	4770      	bx	lr
 80176e6:	bf00      	nop

080176e8 <rcl_action_send_result_request>:
 80176e8:	b390      	cbz	r0, 8017750 <rcl_action_send_result_request+0x68>
 80176ea:	b570      	push	{r4, r5, r6, lr}
 80176ec:	4604      	mov	r4, r0
 80176ee:	6800      	ldr	r0, [r0, #0]
 80176f0:	b348      	cbz	r0, 8017746 <rcl_action_send_result_request+0x5e>
 80176f2:	460e      	mov	r6, r1
 80176f4:	4615      	mov	r5, r2
 80176f6:	f7fd fe43 	bl	8015380 <rcl_client_is_valid>
 80176fa:	b1f8      	cbz	r0, 801773c <rcl_action_send_result_request+0x54>
 80176fc:	6820      	ldr	r0, [r4, #0]
 80176fe:	3004      	adds	r0, #4
 8017700:	f7fd fe3e 	bl	8015380 <rcl_client_is_valid>
 8017704:	b1d0      	cbz	r0, 801773c <rcl_action_send_result_request+0x54>
 8017706:	6820      	ldr	r0, [r4, #0]
 8017708:	3008      	adds	r0, #8
 801770a:	f7fd fe39 	bl	8015380 <rcl_client_is_valid>
 801770e:	b1a8      	cbz	r0, 801773c <rcl_action_send_result_request+0x54>
 8017710:	6820      	ldr	r0, [r4, #0]
 8017712:	300c      	adds	r0, #12
 8017714:	f7fe ffa6 	bl	8016664 <rcl_subscription_is_valid>
 8017718:	b180      	cbz	r0, 801773c <rcl_action_send_result_request+0x54>
 801771a:	6820      	ldr	r0, [r4, #0]
 801771c:	3010      	adds	r0, #16
 801771e:	f7fe ffa1 	bl	8016664 <rcl_subscription_is_valid>
 8017722:	b158      	cbz	r0, 801773c <rcl_action_send_result_request+0x54>
 8017724:	b195      	cbz	r5, 801774c <rcl_action_send_result_request+0x64>
 8017726:	b18e      	cbz	r6, 801774c <rcl_action_send_result_request+0x64>
 8017728:	6820      	ldr	r0, [r4, #0]
 801772a:	462a      	mov	r2, r5
 801772c:	4631      	mov	r1, r6
 801772e:	3008      	adds	r0, #8
 8017730:	f7fd fda4 	bl	801527c <rcl_send_request>
 8017734:	3800      	subs	r0, #0
 8017736:	bf18      	it	ne
 8017738:	2001      	movne	r0, #1
 801773a:	bd70      	pop	{r4, r5, r6, pc}
 801773c:	f7fc ff8c 	bl	8014658 <rcutils_reset_error>
 8017740:	f640 0036 	movw	r0, #2102	@ 0x836
 8017744:	bd70      	pop	{r4, r5, r6, pc}
 8017746:	f640 0036 	movw	r0, #2102	@ 0x836
 801774a:	bd70      	pop	{r4, r5, r6, pc}
 801774c:	200b      	movs	r0, #11
 801774e:	bd70      	pop	{r4, r5, r6, pc}
 8017750:	f640 0036 	movw	r0, #2102	@ 0x836
 8017754:	4770      	bx	lr
 8017756:	bf00      	nop

08017758 <rcl_action_take_result_response>:
 8017758:	2800      	cmp	r0, #0
 801775a:	d03a      	beq.n	80177d2 <rcl_action_take_result_response+0x7a>
 801775c:	b570      	push	{r4, r5, r6, lr}
 801775e:	4604      	mov	r4, r0
 8017760:	6800      	ldr	r0, [r0, #0]
 8017762:	b388      	cbz	r0, 80177c8 <rcl_action_take_result_response+0x70>
 8017764:	460e      	mov	r6, r1
 8017766:	4615      	mov	r5, r2
 8017768:	f7fd fe0a 	bl	8015380 <rcl_client_is_valid>
 801776c:	b338      	cbz	r0, 80177be <rcl_action_take_result_response+0x66>
 801776e:	6820      	ldr	r0, [r4, #0]
 8017770:	3004      	adds	r0, #4
 8017772:	f7fd fe05 	bl	8015380 <rcl_client_is_valid>
 8017776:	b310      	cbz	r0, 80177be <rcl_action_take_result_response+0x66>
 8017778:	6820      	ldr	r0, [r4, #0]
 801777a:	3008      	adds	r0, #8
 801777c:	f7fd fe00 	bl	8015380 <rcl_client_is_valid>
 8017780:	b1e8      	cbz	r0, 80177be <rcl_action_take_result_response+0x66>
 8017782:	6820      	ldr	r0, [r4, #0]
 8017784:	300c      	adds	r0, #12
 8017786:	f7fe ff6d 	bl	8016664 <rcl_subscription_is_valid>
 801778a:	b1c0      	cbz	r0, 80177be <rcl_action_take_result_response+0x66>
 801778c:	6820      	ldr	r0, [r4, #0]
 801778e:	3010      	adds	r0, #16
 8017790:	f7fe ff68 	bl	8016664 <rcl_subscription_is_valid>
 8017794:	b198      	cbz	r0, 80177be <rcl_action_take_result_response+0x66>
 8017796:	b1d5      	cbz	r5, 80177ce <rcl_action_take_result_response+0x76>
 8017798:	b1ce      	cbz	r6, 80177ce <rcl_action_take_result_response+0x76>
 801779a:	6820      	ldr	r0, [r4, #0]
 801779c:	462a      	mov	r2, r5
 801779e:	4631      	mov	r1, r6
 80177a0:	3008      	adds	r0, #8
 80177a2:	f7fd fda5 	bl	80152f0 <rcl_take_response>
 80177a6:	b148      	cbz	r0, 80177bc <rcl_action_take_result_response+0x64>
 80177a8:	280a      	cmp	r0, #10
 80177aa:	d007      	beq.n	80177bc <rcl_action_take_result_response+0x64>
 80177ac:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80177b0:	f640 0337 	movw	r3, #2103	@ 0x837
 80177b4:	4290      	cmp	r0, r2
 80177b6:	bf0c      	ite	eq
 80177b8:	4618      	moveq	r0, r3
 80177ba:	2001      	movne	r0, #1
 80177bc:	bd70      	pop	{r4, r5, r6, pc}
 80177be:	f7fc ff4b 	bl	8014658 <rcutils_reset_error>
 80177c2:	f640 0036 	movw	r0, #2102	@ 0x836
 80177c6:	bd70      	pop	{r4, r5, r6, pc}
 80177c8:	f640 0036 	movw	r0, #2102	@ 0x836
 80177cc:	bd70      	pop	{r4, r5, r6, pc}
 80177ce:	200b      	movs	r0, #11
 80177d0:	bd70      	pop	{r4, r5, r6, pc}
 80177d2:	f640 0036 	movw	r0, #2102	@ 0x836
 80177d6:	4770      	bx	lr

080177d8 <rcl_action_take_cancel_response>:
 80177d8:	2800      	cmp	r0, #0
 80177da:	d03a      	beq.n	8017852 <rcl_action_take_cancel_response+0x7a>
 80177dc:	b570      	push	{r4, r5, r6, lr}
 80177de:	4604      	mov	r4, r0
 80177e0:	6800      	ldr	r0, [r0, #0]
 80177e2:	b388      	cbz	r0, 8017848 <rcl_action_take_cancel_response+0x70>
 80177e4:	460e      	mov	r6, r1
 80177e6:	4615      	mov	r5, r2
 80177e8:	f7fd fdca 	bl	8015380 <rcl_client_is_valid>
 80177ec:	b338      	cbz	r0, 801783e <rcl_action_take_cancel_response+0x66>
 80177ee:	6820      	ldr	r0, [r4, #0]
 80177f0:	3004      	adds	r0, #4
 80177f2:	f7fd fdc5 	bl	8015380 <rcl_client_is_valid>
 80177f6:	b310      	cbz	r0, 801783e <rcl_action_take_cancel_response+0x66>
 80177f8:	6820      	ldr	r0, [r4, #0]
 80177fa:	3008      	adds	r0, #8
 80177fc:	f7fd fdc0 	bl	8015380 <rcl_client_is_valid>
 8017800:	b1e8      	cbz	r0, 801783e <rcl_action_take_cancel_response+0x66>
 8017802:	6820      	ldr	r0, [r4, #0]
 8017804:	300c      	adds	r0, #12
 8017806:	f7fe ff2d 	bl	8016664 <rcl_subscription_is_valid>
 801780a:	b1c0      	cbz	r0, 801783e <rcl_action_take_cancel_response+0x66>
 801780c:	6820      	ldr	r0, [r4, #0]
 801780e:	3010      	adds	r0, #16
 8017810:	f7fe ff28 	bl	8016664 <rcl_subscription_is_valid>
 8017814:	b198      	cbz	r0, 801783e <rcl_action_take_cancel_response+0x66>
 8017816:	b1d5      	cbz	r5, 801784e <rcl_action_take_cancel_response+0x76>
 8017818:	b1ce      	cbz	r6, 801784e <rcl_action_take_cancel_response+0x76>
 801781a:	6820      	ldr	r0, [r4, #0]
 801781c:	462a      	mov	r2, r5
 801781e:	4631      	mov	r1, r6
 8017820:	3004      	adds	r0, #4
 8017822:	f7fd fd65 	bl	80152f0 <rcl_take_response>
 8017826:	b148      	cbz	r0, 801783c <rcl_action_take_cancel_response+0x64>
 8017828:	280a      	cmp	r0, #10
 801782a:	d007      	beq.n	801783c <rcl_action_take_cancel_response+0x64>
 801782c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017830:	f640 0337 	movw	r3, #2103	@ 0x837
 8017834:	4290      	cmp	r0, r2
 8017836:	bf0c      	ite	eq
 8017838:	4618      	moveq	r0, r3
 801783a:	2001      	movne	r0, #1
 801783c:	bd70      	pop	{r4, r5, r6, pc}
 801783e:	f7fc ff0b 	bl	8014658 <rcutils_reset_error>
 8017842:	f640 0036 	movw	r0, #2102	@ 0x836
 8017846:	bd70      	pop	{r4, r5, r6, pc}
 8017848:	f640 0036 	movw	r0, #2102	@ 0x836
 801784c:	bd70      	pop	{r4, r5, r6, pc}
 801784e:	200b      	movs	r0, #11
 8017850:	bd70      	pop	{r4, r5, r6, pc}
 8017852:	f640 0036 	movw	r0, #2102	@ 0x836
 8017856:	4770      	bx	lr

08017858 <rcl_action_take_feedback>:
 8017858:	2800      	cmp	r0, #0
 801785a:	d038      	beq.n	80178ce <rcl_action_take_feedback+0x76>
 801785c:	b530      	push	{r4, r5, lr}
 801785e:	4604      	mov	r4, r0
 8017860:	6800      	ldr	r0, [r0, #0]
 8017862:	b091      	sub	sp, #68	@ 0x44
 8017864:	b378      	cbz	r0, 80178c6 <rcl_action_take_feedback+0x6e>
 8017866:	460d      	mov	r5, r1
 8017868:	f7fd fd8a 	bl	8015380 <rcl_client_is_valid>
 801786c:	b328      	cbz	r0, 80178ba <rcl_action_take_feedback+0x62>
 801786e:	6820      	ldr	r0, [r4, #0]
 8017870:	3004      	adds	r0, #4
 8017872:	f7fd fd85 	bl	8015380 <rcl_client_is_valid>
 8017876:	b300      	cbz	r0, 80178ba <rcl_action_take_feedback+0x62>
 8017878:	6820      	ldr	r0, [r4, #0]
 801787a:	3008      	adds	r0, #8
 801787c:	f7fd fd80 	bl	8015380 <rcl_client_is_valid>
 8017880:	b1d8      	cbz	r0, 80178ba <rcl_action_take_feedback+0x62>
 8017882:	6820      	ldr	r0, [r4, #0]
 8017884:	300c      	adds	r0, #12
 8017886:	f7fe feed 	bl	8016664 <rcl_subscription_is_valid>
 801788a:	b1b0      	cbz	r0, 80178ba <rcl_action_take_feedback+0x62>
 801788c:	6820      	ldr	r0, [r4, #0]
 801788e:	3010      	adds	r0, #16
 8017890:	f7fe fee8 	bl	8016664 <rcl_subscription_is_valid>
 8017894:	b188      	cbz	r0, 80178ba <rcl_action_take_feedback+0x62>
 8017896:	b1ed      	cbz	r5, 80178d4 <rcl_action_take_feedback+0x7c>
 8017898:	6820      	ldr	r0, [r4, #0]
 801789a:	2300      	movs	r3, #0
 801789c:	466a      	mov	r2, sp
 801789e:	4629      	mov	r1, r5
 80178a0:	300c      	adds	r0, #12
 80178a2:	f7fe fe83 	bl	80165ac <rcl_take>
 80178a6:	b160      	cbz	r0, 80178c2 <rcl_action_take_feedback+0x6a>
 80178a8:	f240 1391 	movw	r3, #401	@ 0x191
 80178ac:	4298      	cmp	r0, r3
 80178ae:	d014      	beq.n	80178da <rcl_action_take_feedback+0x82>
 80178b0:	280a      	cmp	r0, #10
 80178b2:	bf18      	it	ne
 80178b4:	2001      	movne	r0, #1
 80178b6:	b011      	add	sp, #68	@ 0x44
 80178b8:	bd30      	pop	{r4, r5, pc}
 80178ba:	f7fc fecd 	bl	8014658 <rcutils_reset_error>
 80178be:	f640 0036 	movw	r0, #2102	@ 0x836
 80178c2:	b011      	add	sp, #68	@ 0x44
 80178c4:	bd30      	pop	{r4, r5, pc}
 80178c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80178ca:	b011      	add	sp, #68	@ 0x44
 80178cc:	bd30      	pop	{r4, r5, pc}
 80178ce:	f640 0036 	movw	r0, #2102	@ 0x836
 80178d2:	4770      	bx	lr
 80178d4:	200b      	movs	r0, #11
 80178d6:	b011      	add	sp, #68	@ 0x44
 80178d8:	bd30      	pop	{r4, r5, pc}
 80178da:	f640 0037 	movw	r0, #2103	@ 0x837
 80178de:	e7f0      	b.n	80178c2 <rcl_action_take_feedback+0x6a>

080178e0 <rcl_action_wait_set_add_action_client>:
 80178e0:	2800      	cmp	r0, #0
 80178e2:	d048      	beq.n	8017976 <rcl_action_wait_set_add_action_client+0x96>
 80178e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178e6:	460c      	mov	r4, r1
 80178e8:	2900      	cmp	r1, #0
 80178ea:	d03c      	beq.n	8017966 <rcl_action_wait_set_add_action_client+0x86>
 80178ec:	4605      	mov	r5, r0
 80178ee:	6808      	ldr	r0, [r1, #0]
 80178f0:	2800      	cmp	r0, #0
 80178f2:	d038      	beq.n	8017966 <rcl_action_wait_set_add_action_client+0x86>
 80178f4:	4617      	mov	r7, r2
 80178f6:	461e      	mov	r6, r3
 80178f8:	f7fd fd42 	bl	8015380 <rcl_client_is_valid>
 80178fc:	b3b0      	cbz	r0, 801796c <rcl_action_wait_set_add_action_client+0x8c>
 80178fe:	6820      	ldr	r0, [r4, #0]
 8017900:	3004      	adds	r0, #4
 8017902:	f7fd fd3d 	bl	8015380 <rcl_client_is_valid>
 8017906:	b388      	cbz	r0, 801796c <rcl_action_wait_set_add_action_client+0x8c>
 8017908:	6820      	ldr	r0, [r4, #0]
 801790a:	3008      	adds	r0, #8
 801790c:	f7fd fd38 	bl	8015380 <rcl_client_is_valid>
 8017910:	b360      	cbz	r0, 801796c <rcl_action_wait_set_add_action_client+0x8c>
 8017912:	6820      	ldr	r0, [r4, #0]
 8017914:	300c      	adds	r0, #12
 8017916:	f7fe fea5 	bl	8016664 <rcl_subscription_is_valid>
 801791a:	b338      	cbz	r0, 801796c <rcl_action_wait_set_add_action_client+0x8c>
 801791c:	6820      	ldr	r0, [r4, #0]
 801791e:	3010      	adds	r0, #16
 8017920:	f7fe fea0 	bl	8016664 <rcl_subscription_is_valid>
 8017924:	b310      	cbz	r0, 801796c <rcl_action_wait_set_add_action_client+0x8c>
 8017926:	6821      	ldr	r1, [r4, #0]
 8017928:	4628      	mov	r0, r5
 801792a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801792e:	f7ff fcd1 	bl	80172d4 <rcl_wait_set_add_client>
 8017932:	b9b8      	cbnz	r0, 8017964 <rcl_action_wait_set_add_action_client+0x84>
 8017934:	6821      	ldr	r1, [r4, #0]
 8017936:	4628      	mov	r0, r5
 8017938:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801793c:	3104      	adds	r1, #4
 801793e:	f7ff fcc9 	bl	80172d4 <rcl_wait_set_add_client>
 8017942:	b978      	cbnz	r0, 8017964 <rcl_action_wait_set_add_action_client+0x84>
 8017944:	6821      	ldr	r1, [r4, #0]
 8017946:	4628      	mov	r0, r5
 8017948:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801794c:	3108      	adds	r1, #8
 801794e:	f7ff fcc1 	bl	80172d4 <rcl_wait_set_add_client>
 8017952:	b938      	cbnz	r0, 8017964 <rcl_action_wait_set_add_action_client+0x84>
 8017954:	6821      	ldr	r1, [r4, #0]
 8017956:	4628      	mov	r0, r5
 8017958:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801795c:	310c      	adds	r1, #12
 801795e:	f7ff f969 	bl	8016c34 <rcl_wait_set_add_subscription>
 8017962:	b158      	cbz	r0, 801797c <rcl_action_wait_set_add_action_client+0x9c>
 8017964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017966:	f640 0036 	movw	r0, #2102	@ 0x836
 801796a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801796c:	f7fc fe74 	bl	8014658 <rcutils_reset_error>
 8017970:	f640 0036 	movw	r0, #2102	@ 0x836
 8017974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017976:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801797a:	4770      	bx	lr
 801797c:	6821      	ldr	r1, [r4, #0]
 801797e:	4628      	mov	r0, r5
 8017980:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8017984:	3110      	adds	r1, #16
 8017986:	f7ff f955 	bl	8016c34 <rcl_wait_set_add_subscription>
 801798a:	2800      	cmp	r0, #0
 801798c:	d1ea      	bne.n	8017964 <rcl_action_wait_set_add_action_client+0x84>
 801798e:	b11f      	cbz	r7, 8017998 <rcl_action_wait_set_add_action_client+0xb8>
 8017990:	6823      	ldr	r3, [r4, #0]
 8017992:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8017996:	603b      	str	r3, [r7, #0]
 8017998:	2e00      	cmp	r6, #0
 801799a:	d0e3      	beq.n	8017964 <rcl_action_wait_set_add_action_client+0x84>
 801799c:	6823      	ldr	r3, [r4, #0]
 801799e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80179a2:	6033      	str	r3, [r6, #0]
 80179a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179a6:	bf00      	nop

080179a8 <rcl_action_client_wait_set_get_entities_ready>:
 80179a8:	2800      	cmp	r0, #0
 80179aa:	d050      	beq.n	8017a4e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80179ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179b0:	460c      	mov	r4, r1
 80179b2:	2900      	cmp	r1, #0
 80179b4:	d03e      	beq.n	8017a34 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80179b6:	4605      	mov	r5, r0
 80179b8:	6808      	ldr	r0, [r1, #0]
 80179ba:	2800      	cmp	r0, #0
 80179bc:	d03a      	beq.n	8017a34 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80179be:	4616      	mov	r6, r2
 80179c0:	461f      	mov	r7, r3
 80179c2:	f7fd fcdd 	bl	8015380 <rcl_client_is_valid>
 80179c6:	2800      	cmp	r0, #0
 80179c8:	d038      	beq.n	8017a3c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80179ca:	6820      	ldr	r0, [r4, #0]
 80179cc:	3004      	adds	r0, #4
 80179ce:	f7fd fcd7 	bl	8015380 <rcl_client_is_valid>
 80179d2:	2800      	cmp	r0, #0
 80179d4:	d032      	beq.n	8017a3c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80179d6:	6820      	ldr	r0, [r4, #0]
 80179d8:	3008      	adds	r0, #8
 80179da:	f7fd fcd1 	bl	8015380 <rcl_client_is_valid>
 80179de:	b368      	cbz	r0, 8017a3c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80179e0:	6820      	ldr	r0, [r4, #0]
 80179e2:	300c      	adds	r0, #12
 80179e4:	f7fe fe3e 	bl	8016664 <rcl_subscription_is_valid>
 80179e8:	b340      	cbz	r0, 8017a3c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80179ea:	6820      	ldr	r0, [r4, #0]
 80179ec:	3010      	adds	r0, #16
 80179ee:	f7fe fe39 	bl	8016664 <rcl_subscription_is_valid>
 80179f2:	b318      	cbz	r0, 8017a3c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80179f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 80179f8:	2a00      	cmp	r2, #0
 80179fa:	bf18      	it	ne
 80179fc:	2b00      	cmpne	r3, #0
 80179fe:	9b08      	ldr	r3, [sp, #32]
 8017a00:	bf0c      	ite	eq
 8017a02:	2101      	moveq	r1, #1
 8017a04:	2100      	movne	r1, #0
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	bf08      	it	eq
 8017a0a:	f041 0101 	orreq.w	r1, r1, #1
 8017a0e:	2f00      	cmp	r7, #0
 8017a10:	bf08      	it	eq
 8017a12:	f041 0101 	orreq.w	r1, r1, #1
 8017a16:	b9b9      	cbnz	r1, 8017a48 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017a18:	b1b6      	cbz	r6, 8017a48 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017a1a:	6823      	ldr	r3, [r4, #0]
 8017a1c:	686c      	ldr	r4, [r5, #4]
 8017a1e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8017a22:	428a      	cmp	r2, r1
 8017a24:	4610      	mov	r0, r2
 8017a26:	bf38      	it	cc
 8017a28:	4608      	movcc	r0, r1
 8017a2a:	4284      	cmp	r4, r0
 8017a2c:	d812      	bhi.n	8017a54 <rcl_action_client_wait_set_get_entities_ready+0xac>
 8017a2e:	2001      	movs	r0, #1
 8017a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a34:	f640 0036 	movw	r0, #2102	@ 0x836
 8017a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a3c:	f7fc fe0c 	bl	8014658 <rcutils_reset_error>
 8017a40:	f640 0036 	movw	r0, #2102	@ 0x836
 8017a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a48:	200b      	movs	r0, #11
 8017a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a4e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017a52:	4770      	bx	lr
 8017a54:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8017a58:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8017a5c:	45f0      	cmp	r8, lr
 8017a5e:	4640      	mov	r0, r8
 8017a60:	69ec      	ldr	r4, [r5, #28]
 8017a62:	bf38      	it	cc
 8017a64:	4670      	movcc	r0, lr
 8017a66:	4560      	cmp	r0, ip
 8017a68:	bf38      	it	cc
 8017a6a:	4660      	movcc	r0, ip
 8017a6c:	4284      	cmp	r4, r0
 8017a6e:	d9de      	bls.n	8017a2e <rcl_action_client_wait_set_get_entities_ready+0x86>
 8017a70:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8017a74:	682d      	ldr	r5, [r5, #0]
 8017a76:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8017a7a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8017a7e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8017a82:	1a18      	subs	r0, r3, r0
 8017a84:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8017a88:	f103 0c0c 	add.w	ip, r3, #12
 8017a8c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8017a90:	fab0 f080 	clz	r0, r0
 8017a94:	eba5 050c 	sub.w	r5, r5, ip
 8017a98:	0940      	lsrs	r0, r0, #5
 8017a9a:	fab5 f585 	clz	r5, r5
 8017a9e:	096d      	lsrs	r5, r5, #5
 8017aa0:	7035      	strb	r5, [r6, #0]
 8017aa2:	f103 0510 	add.w	r5, r3, #16
 8017aa6:	1b64      	subs	r4, r4, r5
 8017aa8:	9d08      	ldr	r5, [sp, #32]
 8017aaa:	fab4 f484 	clz	r4, r4
 8017aae:	0964      	lsrs	r4, r4, #5
 8017ab0:	703c      	strb	r4, [r7, #0]
 8017ab2:	1d1c      	adds	r4, r3, #4
 8017ab4:	3308      	adds	r3, #8
 8017ab6:	7028      	strb	r0, [r5, #0]
 8017ab8:	1b09      	subs	r1, r1, r4
 8017aba:	2000      	movs	r0, #0
 8017abc:	1ad3      	subs	r3, r2, r3
 8017abe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ac0:	fab1 f181 	clz	r1, r1
 8017ac4:	fab3 f383 	clz	r3, r3
 8017ac8:	0949      	lsrs	r1, r1, #5
 8017aca:	095b      	lsrs	r3, r3, #5
 8017acc:	7011      	strb	r1, [r2, #0]
 8017ace:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017ad0:	7013      	strb	r3, [r2, #0]
 8017ad2:	e7b1      	b.n	8017a38 <rcl_action_client_wait_set_get_entities_ready+0x90>

08017ad4 <rcl_action_take_goal_request>:
 8017ad4:	2800      	cmp	r0, #0
 8017ad6:	d039      	beq.n	8017b4c <rcl_action_take_goal_request+0x78>
 8017ad8:	b570      	push	{r4, r5, r6, lr}
 8017ada:	4604      	mov	r4, r0
 8017adc:	6800      	ldr	r0, [r0, #0]
 8017ade:	b380      	cbz	r0, 8017b42 <rcl_action_take_goal_request+0x6e>
 8017ae0:	460e      	mov	r6, r1
 8017ae2:	4615      	mov	r5, r2
 8017ae4:	f7fe fc76 	bl	80163d4 <rcl_service_is_valid>
 8017ae8:	b330      	cbz	r0, 8017b38 <rcl_action_take_goal_request+0x64>
 8017aea:	6820      	ldr	r0, [r4, #0]
 8017aec:	3004      	adds	r0, #4
 8017aee:	f7fe fc71 	bl	80163d4 <rcl_service_is_valid>
 8017af2:	b308      	cbz	r0, 8017b38 <rcl_action_take_goal_request+0x64>
 8017af4:	6820      	ldr	r0, [r4, #0]
 8017af6:	3008      	adds	r0, #8
 8017af8:	f7fe fc6c 	bl	80163d4 <rcl_service_is_valid>
 8017afc:	b1e0      	cbz	r0, 8017b38 <rcl_action_take_goal_request+0x64>
 8017afe:	6820      	ldr	r0, [r4, #0]
 8017b00:	300c      	adds	r0, #12
 8017b02:	f7fe fa2d 	bl	8015f60 <rcl_publisher_is_valid>
 8017b06:	b1b8      	cbz	r0, 8017b38 <rcl_action_take_goal_request+0x64>
 8017b08:	6820      	ldr	r0, [r4, #0]
 8017b0a:	3010      	adds	r0, #16
 8017b0c:	f7fe fa28 	bl	8015f60 <rcl_publisher_is_valid>
 8017b10:	b190      	cbz	r0, 8017b38 <rcl_action_take_goal_request+0x64>
 8017b12:	b1cd      	cbz	r5, 8017b48 <rcl_action_take_goal_request+0x74>
 8017b14:	b1c6      	cbz	r6, 8017b48 <rcl_action_take_goal_request+0x74>
 8017b16:	462a      	mov	r2, r5
 8017b18:	4631      	mov	r1, r6
 8017b1a:	6820      	ldr	r0, [r4, #0]
 8017b1c:	f7fe fc02 	bl	8016324 <rcl_take_request>
 8017b20:	b148      	cbz	r0, 8017b36 <rcl_action_take_goal_request+0x62>
 8017b22:	280a      	cmp	r0, #10
 8017b24:	d007      	beq.n	8017b36 <rcl_action_take_goal_request+0x62>
 8017b26:	f240 2259 	movw	r2, #601	@ 0x259
 8017b2a:	f640 0399 	movw	r3, #2201	@ 0x899
 8017b2e:	4290      	cmp	r0, r2
 8017b30:	bf0c      	ite	eq
 8017b32:	4618      	moveq	r0, r3
 8017b34:	2001      	movne	r0, #1
 8017b36:	bd70      	pop	{r4, r5, r6, pc}
 8017b38:	f7fc fd8e 	bl	8014658 <rcutils_reset_error>
 8017b3c:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b40:	bd70      	pop	{r4, r5, r6, pc}
 8017b42:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b46:	bd70      	pop	{r4, r5, r6, pc}
 8017b48:	200b      	movs	r0, #11
 8017b4a:	bd70      	pop	{r4, r5, r6, pc}
 8017b4c:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b50:	4770      	bx	lr
 8017b52:	bf00      	nop

08017b54 <rcl_action_send_goal_response>:
 8017b54:	b390      	cbz	r0, 8017bbc <rcl_action_send_goal_response+0x68>
 8017b56:	b570      	push	{r4, r5, r6, lr}
 8017b58:	4604      	mov	r4, r0
 8017b5a:	6800      	ldr	r0, [r0, #0]
 8017b5c:	b348      	cbz	r0, 8017bb2 <rcl_action_send_goal_response+0x5e>
 8017b5e:	460e      	mov	r6, r1
 8017b60:	4615      	mov	r5, r2
 8017b62:	f7fe fc37 	bl	80163d4 <rcl_service_is_valid>
 8017b66:	b1f8      	cbz	r0, 8017ba8 <rcl_action_send_goal_response+0x54>
 8017b68:	6820      	ldr	r0, [r4, #0]
 8017b6a:	3004      	adds	r0, #4
 8017b6c:	f7fe fc32 	bl	80163d4 <rcl_service_is_valid>
 8017b70:	b1d0      	cbz	r0, 8017ba8 <rcl_action_send_goal_response+0x54>
 8017b72:	6820      	ldr	r0, [r4, #0]
 8017b74:	3008      	adds	r0, #8
 8017b76:	f7fe fc2d 	bl	80163d4 <rcl_service_is_valid>
 8017b7a:	b1a8      	cbz	r0, 8017ba8 <rcl_action_send_goal_response+0x54>
 8017b7c:	6820      	ldr	r0, [r4, #0]
 8017b7e:	300c      	adds	r0, #12
 8017b80:	f7fe f9ee 	bl	8015f60 <rcl_publisher_is_valid>
 8017b84:	b180      	cbz	r0, 8017ba8 <rcl_action_send_goal_response+0x54>
 8017b86:	6820      	ldr	r0, [r4, #0]
 8017b88:	3010      	adds	r0, #16
 8017b8a:	f7fe f9e9 	bl	8015f60 <rcl_publisher_is_valid>
 8017b8e:	b158      	cbz	r0, 8017ba8 <rcl_action_send_goal_response+0x54>
 8017b90:	b195      	cbz	r5, 8017bb8 <rcl_action_send_goal_response+0x64>
 8017b92:	b18e      	cbz	r6, 8017bb8 <rcl_action_send_goal_response+0x64>
 8017b94:	462a      	mov	r2, r5
 8017b96:	4631      	mov	r1, r6
 8017b98:	6820      	ldr	r0, [r4, #0]
 8017b9a:	f7fe fc03 	bl	80163a4 <rcl_send_response>
 8017b9e:	b110      	cbz	r0, 8017ba6 <rcl_action_send_goal_response+0x52>
 8017ba0:	2802      	cmp	r0, #2
 8017ba2:	bf18      	it	ne
 8017ba4:	2001      	movne	r0, #1
 8017ba6:	bd70      	pop	{r4, r5, r6, pc}
 8017ba8:	f7fc fd56 	bl	8014658 <rcutils_reset_error>
 8017bac:	f640 0098 	movw	r0, #2200	@ 0x898
 8017bb0:	bd70      	pop	{r4, r5, r6, pc}
 8017bb2:	f640 0098 	movw	r0, #2200	@ 0x898
 8017bb6:	bd70      	pop	{r4, r5, r6, pc}
 8017bb8:	200b      	movs	r0, #11
 8017bba:	bd70      	pop	{r4, r5, r6, pc}
 8017bbc:	f640 0098 	movw	r0, #2200	@ 0x898
 8017bc0:	4770      	bx	lr
 8017bc2:	bf00      	nop

08017bc4 <rcl_action_take_result_request>:
 8017bc4:	2800      	cmp	r0, #0
 8017bc6:	d03a      	beq.n	8017c3e <rcl_action_take_result_request+0x7a>
 8017bc8:	b570      	push	{r4, r5, r6, lr}
 8017bca:	4604      	mov	r4, r0
 8017bcc:	6800      	ldr	r0, [r0, #0]
 8017bce:	b388      	cbz	r0, 8017c34 <rcl_action_take_result_request+0x70>
 8017bd0:	460e      	mov	r6, r1
 8017bd2:	4615      	mov	r5, r2
 8017bd4:	f7fe fbfe 	bl	80163d4 <rcl_service_is_valid>
 8017bd8:	b338      	cbz	r0, 8017c2a <rcl_action_take_result_request+0x66>
 8017bda:	6820      	ldr	r0, [r4, #0]
 8017bdc:	3004      	adds	r0, #4
 8017bde:	f7fe fbf9 	bl	80163d4 <rcl_service_is_valid>
 8017be2:	b310      	cbz	r0, 8017c2a <rcl_action_take_result_request+0x66>
 8017be4:	6820      	ldr	r0, [r4, #0]
 8017be6:	3008      	adds	r0, #8
 8017be8:	f7fe fbf4 	bl	80163d4 <rcl_service_is_valid>
 8017bec:	b1e8      	cbz	r0, 8017c2a <rcl_action_take_result_request+0x66>
 8017bee:	6820      	ldr	r0, [r4, #0]
 8017bf0:	300c      	adds	r0, #12
 8017bf2:	f7fe f9b5 	bl	8015f60 <rcl_publisher_is_valid>
 8017bf6:	b1c0      	cbz	r0, 8017c2a <rcl_action_take_result_request+0x66>
 8017bf8:	6820      	ldr	r0, [r4, #0]
 8017bfa:	3010      	adds	r0, #16
 8017bfc:	f7fe f9b0 	bl	8015f60 <rcl_publisher_is_valid>
 8017c00:	b198      	cbz	r0, 8017c2a <rcl_action_take_result_request+0x66>
 8017c02:	b1d5      	cbz	r5, 8017c3a <rcl_action_take_result_request+0x76>
 8017c04:	b1ce      	cbz	r6, 8017c3a <rcl_action_take_result_request+0x76>
 8017c06:	6820      	ldr	r0, [r4, #0]
 8017c08:	462a      	mov	r2, r5
 8017c0a:	4631      	mov	r1, r6
 8017c0c:	3008      	adds	r0, #8
 8017c0e:	f7fe fb89 	bl	8016324 <rcl_take_request>
 8017c12:	b148      	cbz	r0, 8017c28 <rcl_action_take_result_request+0x64>
 8017c14:	280a      	cmp	r0, #10
 8017c16:	d007      	beq.n	8017c28 <rcl_action_take_result_request+0x64>
 8017c18:	f240 2259 	movw	r2, #601	@ 0x259
 8017c1c:	f640 0399 	movw	r3, #2201	@ 0x899
 8017c20:	4290      	cmp	r0, r2
 8017c22:	bf0c      	ite	eq
 8017c24:	4618      	moveq	r0, r3
 8017c26:	2001      	movne	r0, #1
 8017c28:	bd70      	pop	{r4, r5, r6, pc}
 8017c2a:	f7fc fd15 	bl	8014658 <rcutils_reset_error>
 8017c2e:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c32:	bd70      	pop	{r4, r5, r6, pc}
 8017c34:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c38:	bd70      	pop	{r4, r5, r6, pc}
 8017c3a:	200b      	movs	r0, #11
 8017c3c:	bd70      	pop	{r4, r5, r6, pc}
 8017c3e:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c42:	4770      	bx	lr

08017c44 <rcl_action_take_cancel_request>:
 8017c44:	2800      	cmp	r0, #0
 8017c46:	d03a      	beq.n	8017cbe <rcl_action_take_cancel_request+0x7a>
 8017c48:	b570      	push	{r4, r5, r6, lr}
 8017c4a:	4604      	mov	r4, r0
 8017c4c:	6800      	ldr	r0, [r0, #0]
 8017c4e:	b388      	cbz	r0, 8017cb4 <rcl_action_take_cancel_request+0x70>
 8017c50:	460e      	mov	r6, r1
 8017c52:	4615      	mov	r5, r2
 8017c54:	f7fe fbbe 	bl	80163d4 <rcl_service_is_valid>
 8017c58:	b338      	cbz	r0, 8017caa <rcl_action_take_cancel_request+0x66>
 8017c5a:	6820      	ldr	r0, [r4, #0]
 8017c5c:	3004      	adds	r0, #4
 8017c5e:	f7fe fbb9 	bl	80163d4 <rcl_service_is_valid>
 8017c62:	b310      	cbz	r0, 8017caa <rcl_action_take_cancel_request+0x66>
 8017c64:	6820      	ldr	r0, [r4, #0]
 8017c66:	3008      	adds	r0, #8
 8017c68:	f7fe fbb4 	bl	80163d4 <rcl_service_is_valid>
 8017c6c:	b1e8      	cbz	r0, 8017caa <rcl_action_take_cancel_request+0x66>
 8017c6e:	6820      	ldr	r0, [r4, #0]
 8017c70:	300c      	adds	r0, #12
 8017c72:	f7fe f975 	bl	8015f60 <rcl_publisher_is_valid>
 8017c76:	b1c0      	cbz	r0, 8017caa <rcl_action_take_cancel_request+0x66>
 8017c78:	6820      	ldr	r0, [r4, #0]
 8017c7a:	3010      	adds	r0, #16
 8017c7c:	f7fe f970 	bl	8015f60 <rcl_publisher_is_valid>
 8017c80:	b198      	cbz	r0, 8017caa <rcl_action_take_cancel_request+0x66>
 8017c82:	b1d5      	cbz	r5, 8017cba <rcl_action_take_cancel_request+0x76>
 8017c84:	b1ce      	cbz	r6, 8017cba <rcl_action_take_cancel_request+0x76>
 8017c86:	6820      	ldr	r0, [r4, #0]
 8017c88:	462a      	mov	r2, r5
 8017c8a:	4631      	mov	r1, r6
 8017c8c:	3004      	adds	r0, #4
 8017c8e:	f7fe fb49 	bl	8016324 <rcl_take_request>
 8017c92:	b148      	cbz	r0, 8017ca8 <rcl_action_take_cancel_request+0x64>
 8017c94:	280a      	cmp	r0, #10
 8017c96:	d007      	beq.n	8017ca8 <rcl_action_take_cancel_request+0x64>
 8017c98:	f240 2259 	movw	r2, #601	@ 0x259
 8017c9c:	f640 0399 	movw	r3, #2201	@ 0x899
 8017ca0:	4290      	cmp	r0, r2
 8017ca2:	bf0c      	ite	eq
 8017ca4:	4618      	moveq	r0, r3
 8017ca6:	2001      	movne	r0, #1
 8017ca8:	bd70      	pop	{r4, r5, r6, pc}
 8017caa:	f7fc fcd5 	bl	8014658 <rcutils_reset_error>
 8017cae:	f640 0098 	movw	r0, #2200	@ 0x898
 8017cb2:	bd70      	pop	{r4, r5, r6, pc}
 8017cb4:	f640 0098 	movw	r0, #2200	@ 0x898
 8017cb8:	bd70      	pop	{r4, r5, r6, pc}
 8017cba:	200b      	movs	r0, #11
 8017cbc:	bd70      	pop	{r4, r5, r6, pc}
 8017cbe:	f640 0098 	movw	r0, #2200	@ 0x898
 8017cc2:	4770      	bx	lr

08017cc4 <rcl_action_send_cancel_response>:
 8017cc4:	b398      	cbz	r0, 8017d2e <rcl_action_send_cancel_response+0x6a>
 8017cc6:	b570      	push	{r4, r5, r6, lr}
 8017cc8:	4604      	mov	r4, r0
 8017cca:	6800      	ldr	r0, [r0, #0]
 8017ccc:	b350      	cbz	r0, 8017d24 <rcl_action_send_cancel_response+0x60>
 8017cce:	460e      	mov	r6, r1
 8017cd0:	4615      	mov	r5, r2
 8017cd2:	f7fe fb7f 	bl	80163d4 <rcl_service_is_valid>
 8017cd6:	b300      	cbz	r0, 8017d1a <rcl_action_send_cancel_response+0x56>
 8017cd8:	6820      	ldr	r0, [r4, #0]
 8017cda:	3004      	adds	r0, #4
 8017cdc:	f7fe fb7a 	bl	80163d4 <rcl_service_is_valid>
 8017ce0:	b1d8      	cbz	r0, 8017d1a <rcl_action_send_cancel_response+0x56>
 8017ce2:	6820      	ldr	r0, [r4, #0]
 8017ce4:	3008      	adds	r0, #8
 8017ce6:	f7fe fb75 	bl	80163d4 <rcl_service_is_valid>
 8017cea:	b1b0      	cbz	r0, 8017d1a <rcl_action_send_cancel_response+0x56>
 8017cec:	6820      	ldr	r0, [r4, #0]
 8017cee:	300c      	adds	r0, #12
 8017cf0:	f7fe f936 	bl	8015f60 <rcl_publisher_is_valid>
 8017cf4:	b188      	cbz	r0, 8017d1a <rcl_action_send_cancel_response+0x56>
 8017cf6:	6820      	ldr	r0, [r4, #0]
 8017cf8:	3010      	adds	r0, #16
 8017cfa:	f7fe f931 	bl	8015f60 <rcl_publisher_is_valid>
 8017cfe:	b160      	cbz	r0, 8017d1a <rcl_action_send_cancel_response+0x56>
 8017d00:	b19d      	cbz	r5, 8017d2a <rcl_action_send_cancel_response+0x66>
 8017d02:	b196      	cbz	r6, 8017d2a <rcl_action_send_cancel_response+0x66>
 8017d04:	6820      	ldr	r0, [r4, #0]
 8017d06:	462a      	mov	r2, r5
 8017d08:	4631      	mov	r1, r6
 8017d0a:	3004      	adds	r0, #4
 8017d0c:	f7fe fb4a 	bl	80163a4 <rcl_send_response>
 8017d10:	b110      	cbz	r0, 8017d18 <rcl_action_send_cancel_response+0x54>
 8017d12:	2802      	cmp	r0, #2
 8017d14:	bf18      	it	ne
 8017d16:	2001      	movne	r0, #1
 8017d18:	bd70      	pop	{r4, r5, r6, pc}
 8017d1a:	f7fc fc9d 	bl	8014658 <rcutils_reset_error>
 8017d1e:	f640 0098 	movw	r0, #2200	@ 0x898
 8017d22:	bd70      	pop	{r4, r5, r6, pc}
 8017d24:	f640 0098 	movw	r0, #2200	@ 0x898
 8017d28:	bd70      	pop	{r4, r5, r6, pc}
 8017d2a:	200b      	movs	r0, #11
 8017d2c:	bd70      	pop	{r4, r5, r6, pc}
 8017d2e:	f640 0098 	movw	r0, #2200	@ 0x898
 8017d32:	4770      	bx	lr

08017d34 <rcl_action_wait_set_add_action_server>:
 8017d34:	2800      	cmp	r0, #0
 8017d36:	d04d      	beq.n	8017dd4 <rcl_action_wait_set_add_action_server+0xa0>
 8017d38:	b570      	push	{r4, r5, r6, lr}
 8017d3a:	460c      	mov	r4, r1
 8017d3c:	b159      	cbz	r1, 8017d56 <rcl_action_wait_set_add_action_server+0x22>
 8017d3e:	4605      	mov	r5, r0
 8017d40:	6808      	ldr	r0, [r1, #0]
 8017d42:	b140      	cbz	r0, 8017d56 <rcl_action_wait_set_add_action_server+0x22>
 8017d44:	4616      	mov	r6, r2
 8017d46:	f7fe fb45 	bl	80163d4 <rcl_service_is_valid>
 8017d4a:	b120      	cbz	r0, 8017d56 <rcl_action_wait_set_add_action_server+0x22>
 8017d4c:	6820      	ldr	r0, [r4, #0]
 8017d4e:	3004      	adds	r0, #4
 8017d50:	f7fe fb40 	bl	80163d4 <rcl_service_is_valid>
 8017d54:	b910      	cbnz	r0, 8017d5c <rcl_action_wait_set_add_action_server+0x28>
 8017d56:	f640 0098 	movw	r0, #2200	@ 0x898
 8017d5a:	bd70      	pop	{r4, r5, r6, pc}
 8017d5c:	6820      	ldr	r0, [r4, #0]
 8017d5e:	3008      	adds	r0, #8
 8017d60:	f7fe fb38 	bl	80163d4 <rcl_service_is_valid>
 8017d64:	2800      	cmp	r0, #0
 8017d66:	d0f6      	beq.n	8017d56 <rcl_action_wait_set_add_action_server+0x22>
 8017d68:	6820      	ldr	r0, [r4, #0]
 8017d6a:	300c      	adds	r0, #12
 8017d6c:	f7fe f910 	bl	8015f90 <rcl_publisher_is_valid_except_context>
 8017d70:	2800      	cmp	r0, #0
 8017d72:	d0f0      	beq.n	8017d56 <rcl_action_wait_set_add_action_server+0x22>
 8017d74:	6820      	ldr	r0, [r4, #0]
 8017d76:	3010      	adds	r0, #16
 8017d78:	f7fe f90a 	bl	8015f90 <rcl_publisher_is_valid_except_context>
 8017d7c:	2800      	cmp	r0, #0
 8017d7e:	d0ea      	beq.n	8017d56 <rcl_action_wait_set_add_action_server+0x22>
 8017d80:	6821      	ldr	r1, [r4, #0]
 8017d82:	4628      	mov	r0, r5
 8017d84:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8017d88:	f7ff fad0 	bl	801732c <rcl_wait_set_add_service>
 8017d8c:	2800      	cmp	r0, #0
 8017d8e:	d1e4      	bne.n	8017d5a <rcl_action_wait_set_add_action_server+0x26>
 8017d90:	6821      	ldr	r1, [r4, #0]
 8017d92:	4628      	mov	r0, r5
 8017d94:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8017d98:	3104      	adds	r1, #4
 8017d9a:	f7ff fac7 	bl	801732c <rcl_wait_set_add_service>
 8017d9e:	2800      	cmp	r0, #0
 8017da0:	d1db      	bne.n	8017d5a <rcl_action_wait_set_add_action_server+0x26>
 8017da2:	6821      	ldr	r1, [r4, #0]
 8017da4:	4628      	mov	r0, r5
 8017da6:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8017daa:	3108      	adds	r1, #8
 8017dac:	f7ff fabe 	bl	801732c <rcl_wait_set_add_service>
 8017db0:	2800      	cmp	r0, #0
 8017db2:	d1d2      	bne.n	8017d5a <rcl_action_wait_set_add_action_server+0x26>
 8017db4:	6821      	ldr	r1, [r4, #0]
 8017db6:	4628      	mov	r0, r5
 8017db8:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8017dbc:	3114      	adds	r1, #20
 8017dbe:	f7ff fa59 	bl	8017274 <rcl_wait_set_add_timer>
 8017dc2:	2800      	cmp	r0, #0
 8017dc4:	d1c9      	bne.n	8017d5a <rcl_action_wait_set_add_action_server+0x26>
 8017dc6:	2e00      	cmp	r6, #0
 8017dc8:	d0c7      	beq.n	8017d5a <rcl_action_wait_set_add_action_server+0x26>
 8017dca:	6823      	ldr	r3, [r4, #0]
 8017dcc:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8017dd0:	6033      	str	r3, [r6, #0]
 8017dd2:	bd70      	pop	{r4, r5, r6, pc}
 8017dd4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017dd8:	4770      	bx	lr
 8017dda:	bf00      	nop

08017ddc <rcl_action_server_wait_set_get_entities_ready>:
 8017ddc:	2800      	cmp	r0, #0
 8017dde:	d067      	beq.n	8017eb0 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8017de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017de4:	460c      	mov	r4, r1
 8017de6:	b161      	cbz	r1, 8017e02 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017de8:	4605      	mov	r5, r0
 8017dea:	6808      	ldr	r0, [r1, #0]
 8017dec:	b148      	cbz	r0, 8017e02 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017dee:	4616      	mov	r6, r2
 8017df0:	4698      	mov	r8, r3
 8017df2:	f7fe faef 	bl	80163d4 <rcl_service_is_valid>
 8017df6:	b120      	cbz	r0, 8017e02 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017df8:	6820      	ldr	r0, [r4, #0]
 8017dfa:	3004      	adds	r0, #4
 8017dfc:	f7fe faea 	bl	80163d4 <rcl_service_is_valid>
 8017e00:	b918      	cbnz	r0, 8017e0a <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8017e02:	f640 0098 	movw	r0, #2200	@ 0x898
 8017e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e0a:	6820      	ldr	r0, [r4, #0]
 8017e0c:	3008      	adds	r0, #8
 8017e0e:	f7fe fae1 	bl	80163d4 <rcl_service_is_valid>
 8017e12:	2800      	cmp	r0, #0
 8017e14:	d0f5      	beq.n	8017e02 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017e16:	6820      	ldr	r0, [r4, #0]
 8017e18:	300c      	adds	r0, #12
 8017e1a:	f7fe f8b9 	bl	8015f90 <rcl_publisher_is_valid_except_context>
 8017e1e:	2800      	cmp	r0, #0
 8017e20:	d0ef      	beq.n	8017e02 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017e22:	6820      	ldr	r0, [r4, #0]
 8017e24:	3010      	adds	r0, #16
 8017e26:	f7fe f8b3 	bl	8015f90 <rcl_publisher_is_valid_except_context>
 8017e2a:	2800      	cmp	r0, #0
 8017e2c:	d0e9      	beq.n	8017e02 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017e2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017e32:	2a00      	cmp	r2, #0
 8017e34:	bf18      	it	ne
 8017e36:	2b00      	cmpne	r3, #0
 8017e38:	bf0c      	ite	eq
 8017e3a:	2101      	moveq	r1, #1
 8017e3c:	2100      	movne	r1, #0
 8017e3e:	f1b8 0f00 	cmp.w	r8, #0
 8017e42:	bf08      	it	eq
 8017e44:	f041 0101 	orreq.w	r1, r1, #1
 8017e48:	bba9      	cbnz	r1, 8017eb6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8017e4a:	b3a6      	cbz	r6, 8017eb6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8017e4c:	6821      	ldr	r1, [r4, #0]
 8017e4e:	2000      	movs	r0, #0
 8017e50:	692c      	ldr	r4, [r5, #16]
 8017e52:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 8017e56:	6a2f      	ldr	r7, [r5, #32]
 8017e58:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017e5c:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 8017e60:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8017e64:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8017e68:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8017e6c:	1a64      	subs	r4, r4, r1
 8017e6e:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 8017e72:	fab4 f484 	clz	r4, r4
 8017e76:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8017e7a:	0964      	lsrs	r4, r4, #5
 8017e7c:	7034      	strb	r4, [r6, #0]
 8017e7e:	1d0c      	adds	r4, r1, #4
 8017e80:	1b2c      	subs	r4, r5, r4
 8017e82:	fab4 f484 	clz	r4, r4
 8017e86:	0964      	lsrs	r4, r4, #5
 8017e88:	f888 4000 	strb.w	r4, [r8]
 8017e8c:	f101 0408 	add.w	r4, r1, #8
 8017e90:	1b1b      	subs	r3, r3, r4
 8017e92:	9c06      	ldr	r4, [sp, #24]
 8017e94:	fab3 f383 	clz	r3, r3
 8017e98:	095b      	lsrs	r3, r3, #5
 8017e9a:	7023      	strb	r3, [r4, #0]
 8017e9c:	f101 0314 	add.w	r3, r1, #20
 8017ea0:	1ad3      	subs	r3, r2, r3
 8017ea2:	9a07      	ldr	r2, [sp, #28]
 8017ea4:	fab3 f383 	clz	r3, r3
 8017ea8:	095b      	lsrs	r3, r3, #5
 8017eaa:	7013      	strb	r3, [r2, #0]
 8017eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017eb0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017eb4:	4770      	bx	lr
 8017eb6:	200b      	movs	r0, #11
 8017eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017ebc <_execute_event_handler>:
 8017ebc:	2002      	movs	r0, #2
 8017ebe:	4770      	bx	lr

08017ec0 <_cancel_goal_event_handler>:
 8017ec0:	2003      	movs	r0, #3
 8017ec2:	4770      	bx	lr

08017ec4 <_succeed_event_handler>:
 8017ec4:	2004      	movs	r0, #4
 8017ec6:	4770      	bx	lr

08017ec8 <_abort_event_handler>:
 8017ec8:	2006      	movs	r0, #6
 8017eca:	4770      	bx	lr

08017ecc <_canceled_event_handler>:
 8017ecc:	2005      	movs	r0, #5
 8017ece:	4770      	bx	lr

08017ed0 <rcl_action_transition_goal_state>:
 8017ed0:	b2c2      	uxtb	r2, r0
 8017ed2:	2a06      	cmp	r2, #6
 8017ed4:	d810      	bhi.n	8017ef8 <rcl_action_transition_goal_state+0x28>
 8017ed6:	2904      	cmp	r1, #4
 8017ed8:	d80e      	bhi.n	8017ef8 <rcl_action_transition_goal_state+0x28>
 8017eda:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8017ede:	b410      	push	{r4}
 8017ee0:	1853      	adds	r3, r2, r1
 8017ee2:	4c06      	ldr	r4, [pc, #24]	@ (8017efc <rcl_action_transition_goal_state+0x2c>)
 8017ee4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017ee8:	b113      	cbz	r3, 8017ef0 <rcl_action_transition_goal_state+0x20>
 8017eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017eee:	4718      	bx	r3
 8017ef0:	2000      	movs	r0, #0
 8017ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ef6:	4770      	bx	lr
 8017ef8:	2000      	movs	r0, #0
 8017efa:	4770      	bx	lr
 8017efc:	08023664 	.word	0x08023664

08017f00 <rcl_action_get_zero_initialized_cancel_response>:
 8017f00:	b510      	push	{r4, lr}
 8017f02:	4c07      	ldr	r4, [pc, #28]	@ (8017f20 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017f04:	4686      	mov	lr, r0
 8017f06:	4684      	mov	ip, r0
 8017f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017f0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017f10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f14:	6823      	ldr	r3, [r4, #0]
 8017f16:	4670      	mov	r0, lr
 8017f18:	f8cc 3000 	str.w	r3, [ip]
 8017f1c:	bd10      	pop	{r4, pc}
 8017f1e:	bf00      	nop
 8017f20:	080236f0 	.word	0x080236f0

08017f24 <rclc_action_send_result_request>:
 8017f24:	b1d0      	cbz	r0, 8017f5c <rclc_action_send_result_request+0x38>
 8017f26:	4684      	mov	ip, r0
 8017f28:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017f2c:	b500      	push	{lr}
 8017f2e:	b087      	sub	sp, #28
 8017f30:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8017f34:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8017f38:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8017f3c:	f10d 0e08 	add.w	lr, sp, #8
 8017f40:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017f44:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017f48:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8017f4c:	a902      	add	r1, sp, #8
 8017f4e:	3010      	adds	r0, #16
 8017f50:	f7ff fbca 	bl	80176e8 <rcl_action_send_result_request>
 8017f54:	b920      	cbnz	r0, 8017f60 <rclc_action_send_result_request+0x3c>
 8017f56:	b007      	add	sp, #28
 8017f58:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f5c:	200b      	movs	r0, #11
 8017f5e:	4770      	bx	lr
 8017f60:	9001      	str	r0, [sp, #4]
 8017f62:	f7fc fb79 	bl	8014658 <rcutils_reset_error>
 8017f66:	9801      	ldr	r0, [sp, #4]
 8017f68:	b007      	add	sp, #28
 8017f6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f6e:	bf00      	nop

08017f70 <rclc_action_take_goal_handle>:
 8017f70:	b160      	cbz	r0, 8017f8c <rclc_action_take_goal_handle+0x1c>
 8017f72:	6883      	ldr	r3, [r0, #8]
 8017f74:	b143      	cbz	r3, 8017f88 <rclc_action_take_goal_handle+0x18>
 8017f76:	6819      	ldr	r1, [r3, #0]
 8017f78:	2200      	movs	r2, #0
 8017f7a:	6081      	str	r1, [r0, #8]
 8017f7c:	721a      	strb	r2, [r3, #8]
 8017f7e:	68c1      	ldr	r1, [r0, #12]
 8017f80:	621a      	str	r2, [r3, #32]
 8017f82:	849a      	strh	r2, [r3, #36]	@ 0x24
 8017f84:	6019      	str	r1, [r3, #0]
 8017f86:	60c3      	str	r3, [r0, #12]
 8017f88:	4618      	mov	r0, r3
 8017f8a:	4770      	bx	lr
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	e7fb      	b.n	8017f88 <rclc_action_take_goal_handle+0x18>

08017f90 <rclc_action_remove_used_goal_handle>:
 8017f90:	b180      	cbz	r0, 8017fb4 <rclc_action_remove_used_goal_handle+0x24>
 8017f92:	b179      	cbz	r1, 8017fb4 <rclc_action_remove_used_goal_handle+0x24>
 8017f94:	68c3      	ldr	r3, [r0, #12]
 8017f96:	4299      	cmp	r1, r3
 8017f98:	d00d      	beq.n	8017fb6 <rclc_action_remove_used_goal_handle+0x26>
 8017f9a:	b12b      	cbz	r3, 8017fa8 <rclc_action_remove_used_goal_handle+0x18>
 8017f9c:	681a      	ldr	r2, [r3, #0]
 8017f9e:	4291      	cmp	r1, r2
 8017fa0:	d003      	beq.n	8017faa <rclc_action_remove_used_goal_handle+0x1a>
 8017fa2:	4613      	mov	r3, r2
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d1f9      	bne.n	8017f9c <rclc_action_remove_used_goal_handle+0xc>
 8017fa8:	4770      	bx	lr
 8017faa:	680a      	ldr	r2, [r1, #0]
 8017fac:	601a      	str	r2, [r3, #0]
 8017fae:	6883      	ldr	r3, [r0, #8]
 8017fb0:	600b      	str	r3, [r1, #0]
 8017fb2:	6081      	str	r1, [r0, #8]
 8017fb4:	4770      	bx	lr
 8017fb6:	680b      	ldr	r3, [r1, #0]
 8017fb8:	60c3      	str	r3, [r0, #12]
 8017fba:	e7f8      	b.n	8017fae <rclc_action_remove_used_goal_handle+0x1e>

08017fbc <rclc_action_find_goal_handle_by_uuid>:
 8017fbc:	b538      	push	{r3, r4, r5, lr}
 8017fbe:	b181      	cbz	r1, 8017fe2 <rclc_action_find_goal_handle_by_uuid+0x26>
 8017fc0:	b178      	cbz	r0, 8017fe2 <rclc_action_find_goal_handle_by_uuid+0x26>
 8017fc2:	68c4      	ldr	r4, [r0, #12]
 8017fc4:	460d      	mov	r5, r1
 8017fc6:	b914      	cbnz	r4, 8017fce <rclc_action_find_goal_handle_by_uuid+0x12>
 8017fc8:	e009      	b.n	8017fde <rclc_action_find_goal_handle_by_uuid+0x22>
 8017fca:	6824      	ldr	r4, [r4, #0]
 8017fcc:	b13c      	cbz	r4, 8017fde <rclc_action_find_goal_handle_by_uuid+0x22>
 8017fce:	f104 0009 	add.w	r0, r4, #9
 8017fd2:	2210      	movs	r2, #16
 8017fd4:	4629      	mov	r1, r5
 8017fd6:	f008 fc33 	bl	8020840 <memcmp>
 8017fda:	2800      	cmp	r0, #0
 8017fdc:	d1f5      	bne.n	8017fca <rclc_action_find_goal_handle_by_uuid+0xe>
 8017fde:	4620      	mov	r0, r4
 8017fe0:	bd38      	pop	{r3, r4, r5, pc}
 8017fe2:	2400      	movs	r4, #0
 8017fe4:	4620      	mov	r0, r4
 8017fe6:	bd38      	pop	{r3, r4, r5, pc}

08017fe8 <rclc_action_find_first_handle_by_status>:
 8017fe8:	b140      	cbz	r0, 8017ffc <rclc_action_find_first_handle_by_status+0x14>
 8017fea:	68c0      	ldr	r0, [r0, #12]
 8017fec:	b910      	cbnz	r0, 8017ff4 <rclc_action_find_first_handle_by_status+0xc>
 8017fee:	e005      	b.n	8017ffc <rclc_action_find_first_handle_by_status+0x14>
 8017ff0:	6800      	ldr	r0, [r0, #0]
 8017ff2:	b118      	cbz	r0, 8017ffc <rclc_action_find_first_handle_by_status+0x14>
 8017ff4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017ff8:	428b      	cmp	r3, r1
 8017ffa:	d1f9      	bne.n	8017ff0 <rclc_action_find_first_handle_by_status+0x8>
 8017ffc:	4770      	bx	lr
 8017ffe:	bf00      	nop

08018000 <rclc_action_find_first_terminated_handle>:
 8018000:	b140      	cbz	r0, 8018014 <rclc_action_find_first_terminated_handle+0x14>
 8018002:	68c0      	ldr	r0, [r0, #12]
 8018004:	b910      	cbnz	r0, 801800c <rclc_action_find_first_terminated_handle+0xc>
 8018006:	e005      	b.n	8018014 <rclc_action_find_first_terminated_handle+0x14>
 8018008:	6800      	ldr	r0, [r0, #0]
 801800a:	b118      	cbz	r0, 8018014 <rclc_action_find_first_terminated_handle+0x14>
 801800c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018010:	2b03      	cmp	r3, #3
 8018012:	ddf9      	ble.n	8018008 <rclc_action_find_first_terminated_handle+0x8>
 8018014:	4770      	bx	lr
 8018016:	bf00      	nop

08018018 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018018:	b170      	cbz	r0, 8018038 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801801a:	68c0      	ldr	r0, [r0, #12]
 801801c:	b160      	cbz	r0, 8018038 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801801e:	b410      	push	{r4}
 8018020:	e001      	b.n	8018026 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8018022:	6800      	ldr	r0, [r0, #0]
 8018024:	b128      	cbz	r0, 8018032 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8018026:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801802a:	4299      	cmp	r1, r3
 801802c:	bf08      	it	eq
 801802e:	4294      	cmpeq	r4, r2
 8018030:	d1f7      	bne.n	8018022 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8018032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018036:	4770      	bx	lr
 8018038:	4770      	bx	lr
 801803a:	bf00      	nop

0801803c <rclc_action_find_handle_by_result_request_sequence_number>:
 801803c:	b170      	cbz	r0, 801805c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801803e:	68c0      	ldr	r0, [r0, #12]
 8018040:	b160      	cbz	r0, 801805c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018042:	b410      	push	{r4}
 8018044:	e001      	b.n	801804a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8018046:	6800      	ldr	r0, [r0, #0]
 8018048:	b128      	cbz	r0, 8018056 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801804a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801804e:	4299      	cmp	r1, r3
 8018050:	bf08      	it	eq
 8018052:	4294      	cmpeq	r4, r2
 8018054:	d1f7      	bne.n	8018046 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8018056:	f85d 4b04 	ldr.w	r4, [sp], #4
 801805a:	4770      	bx	lr
 801805c:	4770      	bx	lr
 801805e:	bf00      	nop

08018060 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8018060:	b170      	cbz	r0, 8018080 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018062:	68c0      	ldr	r0, [r0, #12]
 8018064:	b160      	cbz	r0, 8018080 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018066:	b410      	push	{r4}
 8018068:	e001      	b.n	801806e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801806a:	6800      	ldr	r0, [r0, #0]
 801806c:	b128      	cbz	r0, 801807a <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801806e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8018072:	4299      	cmp	r1, r3
 8018074:	bf08      	it	eq
 8018076:	4294      	cmpeq	r4, r2
 8018078:	d1f7      	bne.n	801806a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801807a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801807e:	4770      	bx	lr
 8018080:	4770      	bx	lr
 8018082:	bf00      	nop

08018084 <rclc_action_find_first_handle_with_goal_response>:
 8018084:	b140      	cbz	r0, 8018098 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018086:	68c0      	ldr	r0, [r0, #12]
 8018088:	b910      	cbnz	r0, 8018090 <rclc_action_find_first_handle_with_goal_response+0xc>
 801808a:	e005      	b.n	8018098 <rclc_action_find_first_handle_with_goal_response+0x14>
 801808c:	6800      	ldr	r0, [r0, #0]
 801808e:	b118      	cbz	r0, 8018098 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018090:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018094:	2b00      	cmp	r3, #0
 8018096:	d0f9      	beq.n	801808c <rclc_action_find_first_handle_with_goal_response+0x8>
 8018098:	4770      	bx	lr
 801809a:	bf00      	nop

0801809c <rclc_action_find_first_handle_with_result_response>:
 801809c:	b140      	cbz	r0, 80180b0 <rclc_action_find_first_handle_with_result_response+0x14>
 801809e:	68c0      	ldr	r0, [r0, #12]
 80180a0:	b910      	cbnz	r0, 80180a8 <rclc_action_find_first_handle_with_result_response+0xc>
 80180a2:	e005      	b.n	80180b0 <rclc_action_find_first_handle_with_result_response+0x14>
 80180a4:	6800      	ldr	r0, [r0, #0]
 80180a6:	b118      	cbz	r0, 80180b0 <rclc_action_find_first_handle_with_result_response+0x14>
 80180a8:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d0f9      	beq.n	80180a4 <rclc_action_find_first_handle_with_result_response+0x8>
 80180b0:	4770      	bx	lr
 80180b2:	bf00      	nop

080180b4 <rclc_action_server_response_goal_request>:
 80180b4:	b198      	cbz	r0, 80180de <rclc_action_server_response_goal_request+0x2a>
 80180b6:	2200      	movs	r2, #0
 80180b8:	460b      	mov	r3, r1
 80180ba:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80180be:	b510      	push	{r4, lr}
 80180c0:	6844      	ldr	r4, [r0, #4]
 80180c2:	b086      	sub	sp, #24
 80180c4:	f104 0010 	add.w	r0, r4, #16
 80180c8:	9205      	str	r2, [sp, #20]
 80180ca:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80180ce:	aa03      	add	r2, sp, #12
 80180d0:	f88d 300c 	strb.w	r3, [sp, #12]
 80180d4:	f7ff fd3e 	bl	8017b54 <rcl_action_send_goal_response>
 80180d8:	b918      	cbnz	r0, 80180e2 <rclc_action_server_response_goal_request+0x2e>
 80180da:	b006      	add	sp, #24
 80180dc:	bd10      	pop	{r4, pc}
 80180de:	200b      	movs	r0, #11
 80180e0:	4770      	bx	lr
 80180e2:	9001      	str	r0, [sp, #4]
 80180e4:	f7fc fab8 	bl	8014658 <rcutils_reset_error>
 80180e8:	9801      	ldr	r0, [sp, #4]
 80180ea:	b006      	add	sp, #24
 80180ec:	bd10      	pop	{r4, pc}
 80180ee:	bf00      	nop

080180f0 <rclc_action_server_goal_cancel_accept>:
 80180f0:	b310      	cbz	r0, 8018138 <rclc_action_server_goal_cancel_accept+0x48>
 80180f2:	b510      	push	{r4, lr}
 80180f4:	b090      	sub	sp, #64	@ 0x40
 80180f6:	4604      	mov	r4, r0
 80180f8:	a806      	add	r0, sp, #24
 80180fa:	f7ff ff01 	bl	8017f00 <rcl_action_get_zero_initialized_cancel_response>
 80180fe:	2300      	movs	r3, #0
 8018100:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8018104:	46ec      	mov	ip, sp
 8018106:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801810a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801810e:	f88d 3018 	strb.w	r3, [sp, #24]
 8018112:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8018116:	f8cd d01c 	str.w	sp, [sp, #28]
 801811a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801811e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8018140 <rclc_action_server_goal_cancel_accept+0x50>
 8018122:	6860      	ldr	r0, [r4, #4]
 8018124:	aa06      	add	r2, sp, #24
 8018126:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801812a:	3010      	adds	r0, #16
 801812c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018130:	f7ff fdc8 	bl	8017cc4 <rcl_action_send_cancel_response>
 8018134:	b010      	add	sp, #64	@ 0x40
 8018136:	bd10      	pop	{r4, pc}
 8018138:	200b      	movs	r0, #11
 801813a:	4770      	bx	lr
 801813c:	f3af 8000 	nop.w
 8018140:	00000001 	.word	0x00000001
 8018144:	00000001 	.word	0x00000001

08018148 <rclc_action_server_goal_cancel_reject>:
 8018148:	b082      	sub	sp, #8
 801814a:	b530      	push	{r4, r5, lr}
 801814c:	b08b      	sub	sp, #44	@ 0x2c
 801814e:	ac0e      	add	r4, sp, #56	@ 0x38
 8018150:	e884 000c 	stmia.w	r4, {r2, r3}
 8018154:	b188      	cbz	r0, 801817a <rclc_action_server_goal_cancel_reject+0x32>
 8018156:	4604      	mov	r4, r0
 8018158:	a801      	add	r0, sp, #4
 801815a:	460d      	mov	r5, r1
 801815c:	f7ff fed0 	bl	8017f00 <rcl_action_get_zero_initialized_cancel_response>
 8018160:	aa01      	add	r2, sp, #4
 8018162:	a90e      	add	r1, sp, #56	@ 0x38
 8018164:	f104 0010 	add.w	r0, r4, #16
 8018168:	f88d 5004 	strb.w	r5, [sp, #4]
 801816c:	f7ff fdaa 	bl	8017cc4 <rcl_action_send_cancel_response>
 8018170:	b00b      	add	sp, #44	@ 0x2c
 8018172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018176:	b002      	add	sp, #8
 8018178:	4770      	bx	lr
 801817a:	200b      	movs	r0, #11
 801817c:	b00b      	add	sp, #44	@ 0x2c
 801817e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018182:	b002      	add	sp, #8
 8018184:	4770      	bx	lr
 8018186:	bf00      	nop

08018188 <__atomic_load_8>:
 8018188:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801818c:	4a16      	ldr	r2, [pc, #88]	@ (80181e8 <__atomic_load_8+0x60>)
 801818e:	4b17      	ldr	r3, [pc, #92]	@ (80181ec <__atomic_load_8+0x64>)
 8018190:	f04f 0c01 	mov.w	ip, #1
 8018194:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8018198:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801819c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80181a0:	fb02 f101 	mul.w	r1, r2, r1
 80181a4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80181a8:	fba3 2301 	umull	r2, r3, r3, r1
 80181ac:	091b      	lsrs	r3, r3, #4
 80181ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80181b2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80181b6:	b4d0      	push	{r4, r6, r7}
 80181b8:	1ac9      	subs	r1, r1, r3
 80181ba:	4c0d      	ldr	r4, [pc, #52]	@ (80181f0 <__atomic_load_8+0x68>)
 80181bc:	1862      	adds	r2, r4, r1
 80181be:	e8d2 3f4f 	ldrexb	r3, [r2]
 80181c2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80181c6:	2e00      	cmp	r6, #0
 80181c8:	d1f9      	bne.n	80181be <__atomic_load_8+0x36>
 80181ca:	b2db      	uxtb	r3, r3
 80181cc:	f3bf 8f5b 	dmb	ish
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d1f4      	bne.n	80181be <__atomic_load_8+0x36>
 80181d4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80181d8:	f3bf 8f5b 	dmb	ish
 80181dc:	5463      	strb	r3, [r4, r1]
 80181de:	4630      	mov	r0, r6
 80181e0:	4639      	mov	r1, r7
 80181e2:	bcd0      	pop	{r4, r6, r7}
 80181e4:	4770      	bx	lr
 80181e6:	bf00      	nop
 80181e8:	27d4eb2d 	.word	0x27d4eb2d
 80181ec:	b21642c9 	.word	0xb21642c9
 80181f0:	240648f8 	.word	0x240648f8

080181f4 <__atomic_store_8>:
 80181f4:	b570      	push	{r4, r5, r6, lr}
 80181f6:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 80181fa:	4916      	ldr	r1, [pc, #88]	@ (8018254 <__atomic_store_8+0x60>)
 80181fc:	4c16      	ldr	r4, [pc, #88]	@ (8018258 <__atomic_store_8+0x64>)
 80181fe:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8018202:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8018206:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801820a:	fb01 fe0e 	mul.w	lr, r1, lr
 801820e:	4913      	ldr	r1, [pc, #76]	@ (801825c <__atomic_store_8+0x68>)
 8018210:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8018214:	fba1 510e 	umull	r5, r1, r1, lr
 8018218:	f04f 0501 	mov.w	r5, #1
 801821c:	0909      	lsrs	r1, r1, #4
 801821e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8018222:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8018226:	ebae 0e01 	sub.w	lr, lr, r1
 801822a:	eb04 0c0e 	add.w	ip, r4, lr
 801822e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8018232:	e8cc 5f46 	strexb	r6, r5, [ip]
 8018236:	2e00      	cmp	r6, #0
 8018238:	d1f9      	bne.n	801822e <__atomic_store_8+0x3a>
 801823a:	b2c9      	uxtb	r1, r1
 801823c:	f3bf 8f5b 	dmb	ish
 8018240:	2900      	cmp	r1, #0
 8018242:	d1f4      	bne.n	801822e <__atomic_store_8+0x3a>
 8018244:	e9c0 2300 	strd	r2, r3, [r0]
 8018248:	f3bf 8f5b 	dmb	ish
 801824c:	f804 100e 	strb.w	r1, [r4, lr]
 8018250:	bd70      	pop	{r4, r5, r6, pc}
 8018252:	bf00      	nop
 8018254:	27d4eb2d 	.word	0x27d4eb2d
 8018258:	240648f8 	.word	0x240648f8
 801825c:	b21642c9 	.word	0xb21642c9

08018260 <__atomic_exchange_8>:
 8018260:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8018264:	4917      	ldr	r1, [pc, #92]	@ (80182c4 <__atomic_exchange_8+0x64>)
 8018266:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801826a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801826e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8018272:	fb01 fc0c 	mul.w	ip, r1, ip
 8018276:	4914      	ldr	r1, [pc, #80]	@ (80182c8 <__atomic_exchange_8+0x68>)
 8018278:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801827c:	b570      	push	{r4, r5, r6, lr}
 801827e:	4686      	mov	lr, r0
 8018280:	fba1 010c 	umull	r0, r1, r1, ip
 8018284:	4d11      	ldr	r5, [pc, #68]	@ (80182cc <__atomic_exchange_8+0x6c>)
 8018286:	f04f 0001 	mov.w	r0, #1
 801828a:	0909      	lsrs	r1, r1, #4
 801828c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8018290:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8018294:	ebac 0c01 	sub.w	ip, ip, r1
 8018298:	eb05 010c 	add.w	r1, r5, ip
 801829c:	e8d1 4f4f 	ldrexb	r4, [r1]
 80182a0:	e8c1 0f46 	strexb	r6, r0, [r1]
 80182a4:	2e00      	cmp	r6, #0
 80182a6:	d1f9      	bne.n	801829c <__atomic_exchange_8+0x3c>
 80182a8:	b2e4      	uxtb	r4, r4
 80182aa:	f3bf 8f5b 	dmb	ish
 80182ae:	2c00      	cmp	r4, #0
 80182b0:	d1f4      	bne.n	801829c <__atomic_exchange_8+0x3c>
 80182b2:	e9de 0100 	ldrd	r0, r1, [lr]
 80182b6:	e9ce 2300 	strd	r2, r3, [lr]
 80182ba:	f3bf 8f5b 	dmb	ish
 80182be:	f805 400c 	strb.w	r4, [r5, ip]
 80182c2:	bd70      	pop	{r4, r5, r6, pc}
 80182c4:	27d4eb2d 	.word	0x27d4eb2d
 80182c8:	b21642c9 	.word	0xb21642c9
 80182cc:	240648f8 	.word	0x240648f8

080182d0 <rcutils_get_env>:
 80182d0:	b168      	cbz	r0, 80182ee <rcutils_get_env+0x1e>
 80182d2:	b510      	push	{r4, lr}
 80182d4:	460c      	mov	r4, r1
 80182d6:	b129      	cbz	r1, 80182e4 <rcutils_get_env+0x14>
 80182d8:	f007 fe32 	bl	801ff40 <getenv>
 80182dc:	b120      	cbz	r0, 80182e8 <rcutils_get_env+0x18>
 80182de:	6020      	str	r0, [r4, #0]
 80182e0:	2000      	movs	r0, #0
 80182e2:	bd10      	pop	{r4, pc}
 80182e4:	4803      	ldr	r0, [pc, #12]	@ (80182f4 <rcutils_get_env+0x24>)
 80182e6:	bd10      	pop	{r4, pc}
 80182e8:	4b03      	ldr	r3, [pc, #12]	@ (80182f8 <rcutils_get_env+0x28>)
 80182ea:	6023      	str	r3, [r4, #0]
 80182ec:	bd10      	pop	{r4, pc}
 80182ee:	4803      	ldr	r0, [pc, #12]	@ (80182fc <rcutils_get_env+0x2c>)
 80182f0:	4770      	bx	lr
 80182f2:	bf00      	nop
 80182f4:	08023730 	.word	0x08023730
 80182f8:	08023df0 	.word	0x08023df0
 80182fc:	08023714 	.word	0x08023714

08018300 <rcutils_is_directory>:
 8018300:	2000      	movs	r0, #0
 8018302:	4770      	bx	lr

08018304 <rcutils_join_path>:
 8018304:	b082      	sub	sp, #8
 8018306:	2000      	movs	r0, #0
 8018308:	e88d 000c 	stmia.w	sp, {r2, r3}
 801830c:	b002      	add	sp, #8
 801830e:	4770      	bx	lr

08018310 <rcutils_to_native_path>:
 8018310:	b084      	sub	sp, #16
 8018312:	2000      	movs	r0, #0
 8018314:	f10d 0c04 	add.w	ip, sp, #4
 8018318:	b004      	add	sp, #16
 801831a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801831e:	4770      	bx	lr

08018320 <rcutils_format_string_limit>:
 8018320:	b40f      	push	{r0, r1, r2, r3}
 8018322:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018324:	b083      	sub	sp, #12
 8018326:	ac08      	add	r4, sp, #32
 8018328:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801832a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801832e:	b326      	cbz	r6, 801837a <rcutils_format_string_limit+0x5a>
 8018330:	a808      	add	r0, sp, #32
 8018332:	f7fc f96d 	bl	8014610 <rcutils_allocator_is_valid>
 8018336:	b300      	cbz	r0, 801837a <rcutils_format_string_limit+0x5a>
 8018338:	2100      	movs	r1, #0
 801833a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801833c:	4632      	mov	r2, r6
 801833e:	4608      	mov	r0, r1
 8018340:	e9cd 3300 	strd	r3, r3, [sp]
 8018344:	f000 f906 	bl	8018554 <rcutils_vsnprintf>
 8018348:	1c43      	adds	r3, r0, #1
 801834a:	4605      	mov	r5, r0
 801834c:	d015      	beq.n	801837a <rcutils_format_string_limit+0x5a>
 801834e:	1c47      	adds	r7, r0, #1
 8018350:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018352:	429f      	cmp	r7, r3
 8018354:	d901      	bls.n	801835a <rcutils_format_string_limit+0x3a>
 8018356:	1e5d      	subs	r5, r3, #1
 8018358:	461f      	mov	r7, r3
 801835a:	9b08      	ldr	r3, [sp, #32]
 801835c:	4638      	mov	r0, r7
 801835e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018360:	4798      	blx	r3
 8018362:	4604      	mov	r4, r0
 8018364:	b148      	cbz	r0, 801837a <rcutils_format_string_limit+0x5a>
 8018366:	4632      	mov	r2, r6
 8018368:	4639      	mov	r1, r7
 801836a:	9b01      	ldr	r3, [sp, #4]
 801836c:	f000 f8f2 	bl	8018554 <rcutils_vsnprintf>
 8018370:	2800      	cmp	r0, #0
 8018372:	db09      	blt.n	8018388 <rcutils_format_string_limit+0x68>
 8018374:	2300      	movs	r3, #0
 8018376:	5563      	strb	r3, [r4, r5]
 8018378:	e000      	b.n	801837c <rcutils_format_string_limit+0x5c>
 801837a:	2400      	movs	r4, #0
 801837c:	4620      	mov	r0, r4
 801837e:	b003      	add	sp, #12
 8018380:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018384:	b004      	add	sp, #16
 8018386:	4770      	bx	lr
 8018388:	4620      	mov	r0, r4
 801838a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801838c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801838e:	2400      	movs	r4, #0
 8018390:	4798      	blx	r3
 8018392:	e7f3      	b.n	801837c <rcutils_format_string_limit+0x5c>

08018394 <rcutils_repl_str>:
 8018394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018398:	ed2d 8b02 	vpush	{d8}
 801839c:	b087      	sub	sp, #28
 801839e:	2600      	movs	r6, #0
 80183a0:	4680      	mov	r8, r0
 80183a2:	468a      	mov	sl, r1
 80183a4:	9000      	str	r0, [sp, #0]
 80183a6:	4608      	mov	r0, r1
 80183a8:	ee08 2a10 	vmov	s16, r2
 80183ac:	4699      	mov	r9, r3
 80183ae:	2510      	movs	r5, #16
 80183b0:	f7e7 ffa0 	bl	80002f4 <strlen>
 80183b4:	4637      	mov	r7, r6
 80183b6:	46b3      	mov	fp, r6
 80183b8:	9001      	str	r0, [sp, #4]
 80183ba:	e01e      	b.n	80183fa <rcutils_repl_str+0x66>
 80183bc:	f10b 0b01 	add.w	fp, fp, #1
 80183c0:	9b01      	ldr	r3, [sp, #4]
 80183c2:	455e      	cmp	r6, fp
 80183c4:	eb04 0803 	add.w	r8, r4, r3
 80183c8:	d211      	bcs.n	80183ee <rcutils_repl_str+0x5a>
 80183ca:	442e      	add	r6, r5
 80183cc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80183d0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80183d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80183d8:	00b1      	lsls	r1, r6, #2
 80183da:	4798      	blx	r3
 80183dc:	2800      	cmp	r0, #0
 80183de:	f000 8088 	beq.w	80184f2 <rcutils_repl_str+0x15e>
 80183e2:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80183e6:	4607      	mov	r7, r0
 80183e8:	bf28      	it	cs
 80183ea:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80183ee:	9a00      	ldr	r2, [sp, #0]
 80183f0:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 80183f4:	1aa4      	subs	r4, r4, r2
 80183f6:	f843 4c04 	str.w	r4, [r3, #-4]
 80183fa:	4651      	mov	r1, sl
 80183fc:	4640      	mov	r0, r8
 80183fe:	f008 fa70 	bl	80208e2 <strstr>
 8018402:	4604      	mov	r4, r0
 8018404:	4638      	mov	r0, r7
 8018406:	2c00      	cmp	r4, #0
 8018408:	d1d8      	bne.n	80183bc <rcutils_repl_str+0x28>
 801840a:	4640      	mov	r0, r8
 801840c:	f7e7 ff72 	bl	80002f4 <strlen>
 8018410:	9b00      	ldr	r3, [sp, #0]
 8018412:	eba8 0803 	sub.w	r8, r8, r3
 8018416:	eb08 0400 	add.w	r4, r8, r0
 801841a:	9402      	str	r4, [sp, #8]
 801841c:	f1bb 0f00 	cmp.w	fp, #0
 8018420:	d045      	beq.n	80184ae <rcutils_repl_str+0x11a>
 8018422:	ee18 0a10 	vmov	r0, s16
 8018426:	f7e7 ff65 	bl	80002f4 <strlen>
 801842a:	9a01      	ldr	r2, [sp, #4]
 801842c:	4606      	mov	r6, r0
 801842e:	f8d9 3000 	ldr.w	r3, [r9]
 8018432:	1a82      	subs	r2, r0, r2
 8018434:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018438:	fb0b 4202 	mla	r2, fp, r2, r4
 801843c:	1c50      	adds	r0, r2, #1
 801843e:	9205      	str	r2, [sp, #20]
 8018440:	4798      	blx	r3
 8018442:	4682      	mov	sl, r0
 8018444:	2800      	cmp	r0, #0
 8018446:	d054      	beq.n	80184f2 <rcutils_repl_str+0x15e>
 8018448:	683a      	ldr	r2, [r7, #0]
 801844a:	463d      	mov	r5, r7
 801844c:	9900      	ldr	r1, [sp, #0]
 801844e:	2401      	movs	r4, #1
 8018450:	f008 fb3f 	bl	8020ad2 <memcpy>
 8018454:	683b      	ldr	r3, [r7, #0]
 8018456:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801845a:	eb0a 0803 	add.w	r8, sl, r3
 801845e:	ee18 7a10 	vmov	r7, s16
 8018462:	f8dd a000 	ldr.w	sl, [sp]
 8018466:	f8cd 9000 	str.w	r9, [sp]
 801846a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801846e:	4632      	mov	r2, r6
 8018470:	4639      	mov	r1, r7
 8018472:	4640      	mov	r0, r8
 8018474:	44b0      	add	r8, r6
 8018476:	f008 fb2c 	bl	8020ad2 <memcpy>
 801847a:	f855 2b04 	ldr.w	r2, [r5], #4
 801847e:	45a3      	cmp	fp, r4
 8018480:	444a      	add	r2, r9
 8018482:	eb0a 0102 	add.w	r1, sl, r2
 8018486:	d02a      	beq.n	80184de <rcutils_repl_str+0x14a>
 8018488:	6828      	ldr	r0, [r5, #0]
 801848a:	1a82      	subs	r2, r0, r2
 801848c:	4640      	mov	r0, r8
 801848e:	4490      	add	r8, r2
 8018490:	f008 fb1f 	bl	8020ad2 <memcpy>
 8018494:	1c62      	adds	r2, r4, #1
 8018496:	45a3      	cmp	fp, r4
 8018498:	4614      	mov	r4, r2
 801849a:	d8e8      	bhi.n	801846e <rcutils_repl_str+0xda>
 801849c:	f8dd 9000 	ldr.w	r9, [sp]
 80184a0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80184a4:	2300      	movs	r3, #0
 80184a6:	9a05      	ldr	r2, [sp, #20]
 80184a8:	f80a 3002 	strb.w	r3, [sl, r2]
 80184ac:	e00b      	b.n	80184c6 <rcutils_repl_str+0x132>
 80184ae:	4620      	mov	r0, r4
 80184b0:	f8d9 3000 	ldr.w	r3, [r9]
 80184b4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80184b8:	3001      	adds	r0, #1
 80184ba:	4798      	blx	r3
 80184bc:	4682      	mov	sl, r0
 80184be:	b110      	cbz	r0, 80184c6 <rcutils_repl_str+0x132>
 80184c0:	9900      	ldr	r1, [sp, #0]
 80184c2:	f008 fafe 	bl	8020ac2 <strcpy>
 80184c6:	4638      	mov	r0, r7
 80184c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80184cc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80184d0:	4798      	blx	r3
 80184d2:	4650      	mov	r0, sl
 80184d4:	b007      	add	sp, #28
 80184d6:	ecbd 8b02 	vpop	{d8}
 80184da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184de:	9b02      	ldr	r3, [sp, #8]
 80184e0:	4640      	mov	r0, r8
 80184e2:	f8dd 9000 	ldr.w	r9, [sp]
 80184e6:	1a9a      	subs	r2, r3, r2
 80184e8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80184ec:	f008 faf1 	bl	8020ad2 <memcpy>
 80184f0:	e7d8      	b.n	80184a4 <rcutils_repl_str+0x110>
 80184f2:	f04f 0a00 	mov.w	sl, #0
 80184f6:	e7e6      	b.n	80184c6 <rcutils_repl_str+0x132>

080184f8 <rcutils_snprintf>:
 80184f8:	b40c      	push	{r2, r3}
 80184fa:	b530      	push	{r4, r5, lr}
 80184fc:	b083      	sub	sp, #12
 80184fe:	ab06      	add	r3, sp, #24
 8018500:	f853 2b04 	ldr.w	r2, [r3], #4
 8018504:	9301      	str	r3, [sp, #4]
 8018506:	b1e2      	cbz	r2, 8018542 <rcutils_snprintf+0x4a>
 8018508:	fab0 f480 	clz	r4, r0
 801850c:	fab1 f581 	clz	r5, r1
 8018510:	ea50 0c01 	orrs.w	ip, r0, r1
 8018514:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018518:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801851c:	d008      	beq.n	8018530 <rcutils_snprintf+0x38>
 801851e:	b984      	cbnz	r4, 8018542 <rcutils_snprintf+0x4a>
 8018520:	b97d      	cbnz	r5, 8018542 <rcutils_snprintf+0x4a>
 8018522:	f008 f8eb 	bl	80206fc <vsniprintf>
 8018526:	b003      	add	sp, #12
 8018528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801852c:	b002      	add	sp, #8
 801852e:	4770      	bx	lr
 8018530:	4661      	mov	r1, ip
 8018532:	4660      	mov	r0, ip
 8018534:	f008 f8e2 	bl	80206fc <vsniprintf>
 8018538:	b003      	add	sp, #12
 801853a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801853e:	b002      	add	sp, #8
 8018540:	4770      	bx	lr
 8018542:	f008 fa91 	bl	8020a68 <__errno>
 8018546:	2216      	movs	r2, #22
 8018548:	4603      	mov	r3, r0
 801854a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801854e:	601a      	str	r2, [r3, #0]
 8018550:	e7e9      	b.n	8018526 <rcutils_snprintf+0x2e>
 8018552:	bf00      	nop

08018554 <rcutils_vsnprintf>:
 8018554:	b570      	push	{r4, r5, r6, lr}
 8018556:	b1b2      	cbz	r2, 8018586 <rcutils_vsnprintf+0x32>
 8018558:	fab0 f480 	clz	r4, r0
 801855c:	fab1 f581 	clz	r5, r1
 8018560:	ea50 0c01 	orrs.w	ip, r0, r1
 8018564:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018568:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801856c:	d005      	beq.n	801857a <rcutils_vsnprintf+0x26>
 801856e:	b954      	cbnz	r4, 8018586 <rcutils_vsnprintf+0x32>
 8018570:	b94d      	cbnz	r5, 8018586 <rcutils_vsnprintf+0x32>
 8018572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018576:	f008 b8c1 	b.w	80206fc <vsniprintf>
 801857a:	4661      	mov	r1, ip
 801857c:	4660      	mov	r0, ip
 801857e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018582:	f008 b8bb 	b.w	80206fc <vsniprintf>
 8018586:	f008 fa6f 	bl	8020a68 <__errno>
 801858a:	2316      	movs	r3, #22
 801858c:	6003      	str	r3, [r0, #0]
 801858e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018592:	bd70      	pop	{r4, r5, r6, pc}

08018594 <rcutils_strdup>:
 8018594:	b084      	sub	sp, #16
 8018596:	b570      	push	{r4, r5, r6, lr}
 8018598:	b082      	sub	sp, #8
 801859a:	4605      	mov	r5, r0
 801859c:	ac07      	add	r4, sp, #28
 801859e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80185a2:	b1b0      	cbz	r0, 80185d2 <rcutils_strdup+0x3e>
 80185a4:	f7e7 fea6 	bl	80002f4 <strlen>
 80185a8:	1c42      	adds	r2, r0, #1
 80185aa:	9b07      	ldr	r3, [sp, #28]
 80185ac:	4606      	mov	r6, r0
 80185ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80185b0:	4610      	mov	r0, r2
 80185b2:	9201      	str	r2, [sp, #4]
 80185b4:	4798      	blx	r3
 80185b6:	4604      	mov	r4, r0
 80185b8:	b128      	cbz	r0, 80185c6 <rcutils_strdup+0x32>
 80185ba:	9a01      	ldr	r2, [sp, #4]
 80185bc:	4629      	mov	r1, r5
 80185be:	f008 fa88 	bl	8020ad2 <memcpy>
 80185c2:	2300      	movs	r3, #0
 80185c4:	55a3      	strb	r3, [r4, r6]
 80185c6:	4620      	mov	r0, r4
 80185c8:	b002      	add	sp, #8
 80185ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185ce:	b004      	add	sp, #16
 80185d0:	4770      	bx	lr
 80185d2:	4604      	mov	r4, r0
 80185d4:	e7f7      	b.n	80185c6 <rcutils_strdup+0x32>
 80185d6:	bf00      	nop

080185d8 <rcutils_strndup>:
 80185d8:	b082      	sub	sp, #8
 80185da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185dc:	ac06      	add	r4, sp, #24
 80185de:	4605      	mov	r5, r0
 80185e0:	e884 000c 	stmia.w	r4, {r2, r3}
 80185e4:	b188      	cbz	r0, 801860a <rcutils_strndup+0x32>
 80185e6:	1c4f      	adds	r7, r1, #1
 80185e8:	460e      	mov	r6, r1
 80185ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80185ec:	4638      	mov	r0, r7
 80185ee:	4790      	blx	r2
 80185f0:	4604      	mov	r4, r0
 80185f2:	b128      	cbz	r0, 8018600 <rcutils_strndup+0x28>
 80185f4:	463a      	mov	r2, r7
 80185f6:	4629      	mov	r1, r5
 80185f8:	f008 fa6b 	bl	8020ad2 <memcpy>
 80185fc:	2300      	movs	r3, #0
 80185fe:	55a3      	strb	r3, [r4, r6]
 8018600:	4620      	mov	r0, r4
 8018602:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018606:	b002      	add	sp, #8
 8018608:	4770      	bx	lr
 801860a:	4604      	mov	r4, r0
 801860c:	e7f8      	b.n	8018600 <rcutils_strndup+0x28>
 801860e:	bf00      	nop

08018610 <rcutils_get_zero_initialized_string_map>:
 8018610:	2000      	movs	r0, #0
 8018612:	4b01      	ldr	r3, [pc, #4]	@ (8018618 <rcutils_get_zero_initialized_string_map+0x8>)
 8018614:	6018      	str	r0, [r3, #0]
 8018616:	4770      	bx	lr
 8018618:	24064910 	.word	0x24064910

0801861c <rcutils_string_map_reserve>:
 801861c:	2800      	cmp	r0, #0
 801861e:	d05e      	beq.n	80186de <rcutils_string_map_reserve+0xc2>
 8018620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018624:	460c      	mov	r4, r1
 8018626:	6801      	ldr	r1, [r0, #0]
 8018628:	b082      	sub	sp, #8
 801862a:	4605      	mov	r5, r0
 801862c:	b129      	cbz	r1, 801863a <rcutils_string_map_reserve+0x1e>
 801862e:	68cb      	ldr	r3, [r1, #12]
 8018630:	42a3      	cmp	r3, r4
 8018632:	d906      	bls.n	8018642 <rcutils_string_map_reserve+0x26>
 8018634:	461c      	mov	r4, r3
 8018636:	2900      	cmp	r1, #0
 8018638:	d1f9      	bne.n	801862e <rcutils_string_map_reserve+0x12>
 801863a:	201f      	movs	r0, #31
 801863c:	b002      	add	sp, #8
 801863e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018642:	688b      	ldr	r3, [r1, #8]
 8018644:	42a3      	cmp	r3, r4
 8018646:	d046      	beq.n	80186d6 <rcutils_string_map_reserve+0xba>
 8018648:	6a0e      	ldr	r6, [r1, #32]
 801864a:	2c00      	cmp	r4, #0
 801864c:	d033      	beq.n	80186b6 <rcutils_string_map_reserve+0x9a>
 801864e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018652:	d242      	bcs.n	80186da <rcutils_string_map_reserve+0xbe>
 8018654:	00a7      	lsls	r7, r4, #2
 8018656:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801865a:	6808      	ldr	r0, [r1, #0]
 801865c:	4632      	mov	r2, r6
 801865e:	4639      	mov	r1, r7
 8018660:	47c0      	blx	r8
 8018662:	2800      	cmp	r0, #0
 8018664:	d039      	beq.n	80186da <rcutils_string_map_reserve+0xbe>
 8018666:	682b      	ldr	r3, [r5, #0]
 8018668:	4632      	mov	r2, r6
 801866a:	4639      	mov	r1, r7
 801866c:	6018      	str	r0, [r3, #0]
 801866e:	6858      	ldr	r0, [r3, #4]
 8018670:	47c0      	blx	r8
 8018672:	2800      	cmp	r0, #0
 8018674:	d031      	beq.n	80186da <rcutils_string_map_reserve+0xbe>
 8018676:	682d      	ldr	r5, [r5, #0]
 8018678:	68ab      	ldr	r3, [r5, #8]
 801867a:	6068      	str	r0, [r5, #4]
 801867c:	42a3      	cmp	r3, r4
 801867e:	d225      	bcs.n	80186cc <rcutils_string_map_reserve+0xb0>
 8018680:	682a      	ldr	r2, [r5, #0]
 8018682:	eb00 0c07 	add.w	ip, r0, r7
 8018686:	0099      	lsls	r1, r3, #2
 8018688:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801868c:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8018690:	45e6      	cmp	lr, ip
 8018692:	d203      	bcs.n	801869c <rcutils_string_map_reserve+0x80>
 8018694:	eb02 0c07 	add.w	ip, r2, r7
 8018698:	4566      	cmp	r6, ip
 801869a:	d322      	bcc.n	80186e2 <rcutils_string_map_reserve+0xc6>
 801869c:	1ae3      	subs	r3, r4, r3
 801869e:	4670      	mov	r0, lr
 80186a0:	2100      	movs	r1, #0
 80186a2:	009a      	lsls	r2, r3, #2
 80186a4:	9201      	str	r2, [sp, #4]
 80186a6:	f008 f8f5 	bl	8020894 <memset>
 80186aa:	9a01      	ldr	r2, [sp, #4]
 80186ac:	2100      	movs	r1, #0
 80186ae:	4630      	mov	r0, r6
 80186b0:	f008 f8f0 	bl	8020894 <memset>
 80186b4:	e00a      	b.n	80186cc <rcutils_string_map_reserve+0xb0>
 80186b6:	694f      	ldr	r7, [r1, #20]
 80186b8:	6808      	ldr	r0, [r1, #0]
 80186ba:	4631      	mov	r1, r6
 80186bc:	47b8      	blx	r7
 80186be:	682b      	ldr	r3, [r5, #0]
 80186c0:	4631      	mov	r1, r6
 80186c2:	6858      	ldr	r0, [r3, #4]
 80186c4:	601c      	str	r4, [r3, #0]
 80186c6:	47b8      	blx	r7
 80186c8:	682d      	ldr	r5, [r5, #0]
 80186ca:	606c      	str	r4, [r5, #4]
 80186cc:	2000      	movs	r0, #0
 80186ce:	60ac      	str	r4, [r5, #8]
 80186d0:	b002      	add	sp, #8
 80186d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186d6:	2000      	movs	r0, #0
 80186d8:	e7b0      	b.n	801863c <rcutils_string_map_reserve+0x20>
 80186da:	200a      	movs	r0, #10
 80186dc:	e7ae      	b.n	801863c <rcutils_string_map_reserve+0x20>
 80186de:	200b      	movs	r0, #11
 80186e0:	4770      	bx	lr
 80186e2:	1f0b      	subs	r3, r1, #4
 80186e4:	4418      	add	r0, r3
 80186e6:	4413      	add	r3, r2
 80186e8:	3a04      	subs	r2, #4
 80186ea:	4417      	add	r7, r2
 80186ec:	2200      	movs	r2, #0
 80186ee:	f843 2f04 	str.w	r2, [r3, #4]!
 80186f2:	42bb      	cmp	r3, r7
 80186f4:	f840 2f04 	str.w	r2, [r0, #4]!
 80186f8:	d1f9      	bne.n	80186ee <rcutils_string_map_reserve+0xd2>
 80186fa:	e7e7      	b.n	80186cc <rcutils_string_map_reserve+0xb0>

080186fc <rcutils_string_map_init>:
 80186fc:	b082      	sub	sp, #8
 80186fe:	b570      	push	{r4, r5, r6, lr}
 8018700:	ac04      	add	r4, sp, #16
 8018702:	e884 000c 	stmia.w	r4, {r2, r3}
 8018706:	b380      	cbz	r0, 801876a <rcutils_string_map_init+0x6e>
 8018708:	6806      	ldr	r6, [r0, #0]
 801870a:	4604      	mov	r4, r0
 801870c:	b12e      	cbz	r6, 801871a <rcutils_string_map_init+0x1e>
 801870e:	251e      	movs	r5, #30
 8018710:	4628      	mov	r0, r5
 8018712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018716:	b002      	add	sp, #8
 8018718:	4770      	bx	lr
 801871a:	a804      	add	r0, sp, #16
 801871c:	460d      	mov	r5, r1
 801871e:	f7fb ff77 	bl	8014610 <rcutils_allocator_is_valid>
 8018722:	b310      	cbz	r0, 801876a <rcutils_string_map_init+0x6e>
 8018724:	9b04      	ldr	r3, [sp, #16]
 8018726:	2024      	movs	r0, #36	@ 0x24
 8018728:	9908      	ldr	r1, [sp, #32]
 801872a:	4798      	blx	r3
 801872c:	6020      	str	r0, [r4, #0]
 801872e:	b310      	cbz	r0, 8018776 <rcutils_string_map_init+0x7a>
 8018730:	f10d 0e10 	add.w	lr, sp, #16
 8018734:	f100 0c10 	add.w	ip, r0, #16
 8018738:	e9c0 6600 	strd	r6, r6, [r0]
 801873c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8018740:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018748:	f8de 3000 	ldr.w	r3, [lr]
 801874c:	4629      	mov	r1, r5
 801874e:	4620      	mov	r0, r4
 8018750:	f8cc 3000 	str.w	r3, [ip]
 8018754:	f7ff ff62 	bl	801861c <rcutils_string_map_reserve>
 8018758:	4605      	mov	r5, r0
 801875a:	2800      	cmp	r0, #0
 801875c:	d0d8      	beq.n	8018710 <rcutils_string_map_init+0x14>
 801875e:	9b05      	ldr	r3, [sp, #20]
 8018760:	9908      	ldr	r1, [sp, #32]
 8018762:	6820      	ldr	r0, [r4, #0]
 8018764:	4798      	blx	r3
 8018766:	6026      	str	r6, [r4, #0]
 8018768:	e7d2      	b.n	8018710 <rcutils_string_map_init+0x14>
 801876a:	250b      	movs	r5, #11
 801876c:	4628      	mov	r0, r5
 801876e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018772:	b002      	add	sp, #8
 8018774:	4770      	bx	lr
 8018776:	250a      	movs	r5, #10
 8018778:	e7ca      	b.n	8018710 <rcutils_string_map_init+0x14>
 801877a:	bf00      	nop

0801877c <rcutils_string_map_fini>:
 801877c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018780:	b082      	sub	sp, #8
 8018782:	2800      	cmp	r0, #0
 8018784:	d03a      	beq.n	80187fc <rcutils_string_map_fini+0x80>
 8018786:	6804      	ldr	r4, [r0, #0]
 8018788:	4606      	mov	r6, r0
 801878a:	2c00      	cmp	r4, #0
 801878c:	d032      	beq.n	80187f4 <rcutils_string_map_fini+0x78>
 801878e:	68a3      	ldr	r3, [r4, #8]
 8018790:	b32b      	cbz	r3, 80187de <rcutils_string_map_fini+0x62>
 8018792:	2500      	movs	r5, #0
 8018794:	6822      	ldr	r2, [r4, #0]
 8018796:	462f      	mov	r7, r5
 8018798:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801879c:	b1e0      	cbz	r0, 80187d8 <rcutils_string_map_fini+0x5c>
 801879e:	6a21      	ldr	r1, [r4, #32]
 80187a0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80187a4:	9101      	str	r1, [sp, #4]
 80187a6:	47c0      	blx	r8
 80187a8:	9901      	ldr	r1, [sp, #4]
 80187aa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80187ae:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 80187b2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80187b6:	47c0      	blx	r8
 80187b8:	68e3      	ldr	r3, [r4, #12]
 80187ba:	6862      	ldr	r2, [r4, #4]
 80187bc:	3b01      	subs	r3, #1
 80187be:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80187c2:	3501      	adds	r5, #1
 80187c4:	60e3      	str	r3, [r4, #12]
 80187c6:	6834      	ldr	r4, [r6, #0]
 80187c8:	68a3      	ldr	r3, [r4, #8]
 80187ca:	429d      	cmp	r5, r3
 80187cc:	d207      	bcs.n	80187de <rcutils_string_map_fini+0x62>
 80187ce:	6822      	ldr	r2, [r4, #0]
 80187d0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80187d4:	2800      	cmp	r0, #0
 80187d6:	d1e2      	bne.n	801879e <rcutils_string_map_fini+0x22>
 80187d8:	3501      	adds	r5, #1
 80187da:	429d      	cmp	r5, r3
 80187dc:	d3dc      	bcc.n	8018798 <rcutils_string_map_fini+0x1c>
 80187de:	2100      	movs	r1, #0
 80187e0:	4630      	mov	r0, r6
 80187e2:	f7ff ff1b 	bl	801861c <rcutils_string_map_reserve>
 80187e6:	4604      	mov	r4, r0
 80187e8:	b920      	cbnz	r0, 80187f4 <rcutils_string_map_fini+0x78>
 80187ea:	6830      	ldr	r0, [r6, #0]
 80187ec:	6943      	ldr	r3, [r0, #20]
 80187ee:	6a01      	ldr	r1, [r0, #32]
 80187f0:	4798      	blx	r3
 80187f2:	6034      	str	r4, [r6, #0]
 80187f4:	4620      	mov	r0, r4
 80187f6:	b002      	add	sp, #8
 80187f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187fc:	240b      	movs	r4, #11
 80187fe:	4620      	mov	r0, r4
 8018800:	b002      	add	sp, #8
 8018802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018806:	bf00      	nop

08018808 <rcutils_string_map_getn>:
 8018808:	b378      	cbz	r0, 801886a <rcutils_string_map_getn+0x62>
 801880a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801880e:	f8d0 b000 	ldr.w	fp, [r0]
 8018812:	f1bb 0f00 	cmp.w	fp, #0
 8018816:	d01f      	beq.n	8018858 <rcutils_string_map_getn+0x50>
 8018818:	fab1 f481 	clz	r4, r1
 801881c:	4688      	mov	r8, r1
 801881e:	0964      	lsrs	r4, r4, #5
 8018820:	b1d1      	cbz	r1, 8018858 <rcutils_string_map_getn+0x50>
 8018822:	f8db 7008 	ldr.w	r7, [fp, #8]
 8018826:	f8db 6000 	ldr.w	r6, [fp]
 801882a:	b1af      	cbz	r7, 8018858 <rcutils_string_map_getn+0x50>
 801882c:	4691      	mov	r9, r2
 801882e:	3e04      	subs	r6, #4
 8018830:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8018834:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8018838:	3401      	adds	r4, #1
 801883a:	4628      	mov	r0, r5
 801883c:	b155      	cbz	r5, 8018854 <rcutils_string_map_getn+0x4c>
 801883e:	f7e7 fd59 	bl	80002f4 <strlen>
 8018842:	4602      	mov	r2, r0
 8018844:	4629      	mov	r1, r5
 8018846:	4640      	mov	r0, r8
 8018848:	454a      	cmp	r2, r9
 801884a:	bf38      	it	cc
 801884c:	464a      	movcc	r2, r9
 801884e:	f008 f836 	bl	80208be <strncmp>
 8018852:	b120      	cbz	r0, 801885e <rcutils_string_map_getn+0x56>
 8018854:	42a7      	cmp	r7, r4
 8018856:	d1eb      	bne.n	8018830 <rcutils_string_map_getn+0x28>
 8018858:	2000      	movs	r0, #0
 801885a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801885e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8018862:	f853 000a 	ldr.w	r0, [r3, sl]
 8018866:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801886a:	4770      	bx	lr
 801886c:	0000      	movs	r0, r0
	...

08018870 <rmw_get_zero_initialized_context>:
 8018870:	b510      	push	{r4, lr}
 8018872:	4604      	mov	r4, r0
 8018874:	3010      	adds	r0, #16
 8018876:	f000 f80f 	bl	8018898 <rmw_get_zero_initialized_init_options>
 801887a:	2300      	movs	r3, #0
 801887c:	4620      	mov	r0, r4
 801887e:	60a3      	str	r3, [r4, #8]
 8018880:	64a3      	str	r3, [r4, #72]	@ 0x48
 8018882:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8018884:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8018890 <rmw_get_zero_initialized_context+0x20>
 8018888:	ed84 7b00 	vstr	d7, [r4]
 801888c:	bd10      	pop	{r4, pc}
 801888e:	bf00      	nop
	...

08018898 <rmw_get_zero_initialized_init_options>:
 8018898:	b510      	push	{r4, lr}
 801889a:	4604      	mov	r4, r0
 801889c:	2238      	movs	r2, #56	@ 0x38
 801889e:	2100      	movs	r1, #0
 80188a0:	f007 fff8 	bl	8020894 <memset>
 80188a4:	f104 0010 	add.w	r0, r4, #16
 80188a8:	f000 f80a 	bl	80188c0 <rmw_get_default_security_options>
 80188ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80188b0:	4620      	mov	r0, r4
 80188b2:	60e3      	str	r3, [r4, #12]
 80188b4:	bd10      	pop	{r4, pc}
 80188b6:	bf00      	nop

080188b8 <rmw_get_default_publisher_options>:
 80188b8:	2200      	movs	r2, #0
 80188ba:	6002      	str	r2, [r0, #0]
 80188bc:	7102      	strb	r2, [r0, #4]
 80188be:	4770      	bx	lr

080188c0 <rmw_get_default_security_options>:
 80188c0:	2200      	movs	r2, #0
 80188c2:	7002      	strb	r2, [r0, #0]
 80188c4:	6042      	str	r2, [r0, #4]
 80188c6:	4770      	bx	lr

080188c8 <rmw_subscription_content_filter_options_fini>:
 80188c8:	b1b0      	cbz	r0, 80188f8 <rmw_subscription_content_filter_options_fini+0x30>
 80188ca:	b538      	push	{r3, r4, r5, lr}
 80188cc:	4604      	mov	r4, r0
 80188ce:	4608      	mov	r0, r1
 80188d0:	460d      	mov	r5, r1
 80188d2:	f7fb fe9d 	bl	8014610 <rcutils_allocator_is_valid>
 80188d6:	b168      	cbz	r0, 80188f4 <rmw_subscription_content_filter_options_fini+0x2c>
 80188d8:	6820      	ldr	r0, [r4, #0]
 80188da:	b120      	cbz	r0, 80188e6 <rmw_subscription_content_filter_options_fini+0x1e>
 80188dc:	686b      	ldr	r3, [r5, #4]
 80188de:	6929      	ldr	r1, [r5, #16]
 80188e0:	4798      	blx	r3
 80188e2:	2300      	movs	r3, #0
 80188e4:	6023      	str	r3, [r4, #0]
 80188e6:	1d20      	adds	r0, r4, #4
 80188e8:	f006 fac8 	bl	801ee7c <rcutils_string_array_fini>
 80188ec:	3800      	subs	r0, #0
 80188ee:	bf18      	it	ne
 80188f0:	2001      	movne	r0, #1
 80188f2:	bd38      	pop	{r3, r4, r5, pc}
 80188f4:	200b      	movs	r0, #11
 80188f6:	bd38      	pop	{r3, r4, r5, pc}
 80188f8:	200b      	movs	r0, #11
 80188fa:	4770      	bx	lr

080188fc <rmw_get_default_subscription_options>:
 80188fc:	2200      	movs	r2, #0
 80188fe:	e9c0 2200 	strd	r2, r2, [r0]
 8018902:	6082      	str	r2, [r0, #8]
 8018904:	4770      	bx	lr
 8018906:	bf00      	nop

08018908 <rmw_get_zero_initialized_message_info>:
 8018908:	b510      	push	{r4, lr}
 801890a:	4604      	mov	r4, r0
 801890c:	2240      	movs	r2, #64	@ 0x40
 801890e:	2100      	movs	r1, #0
 8018910:	f007 ffc0 	bl	8020894 <memset>
 8018914:	4620      	mov	r0, r4
 8018916:	bd10      	pop	{r4, pc}

08018918 <rmw_validate_full_topic_name>:
 8018918:	2800      	cmp	r0, #0
 801891a:	d05d      	beq.n	80189d8 <rmw_validate_full_topic_name+0xc0>
 801891c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018920:	460d      	mov	r5, r1
 8018922:	2900      	cmp	r1, #0
 8018924:	d05a      	beq.n	80189dc <rmw_validate_full_topic_name+0xc4>
 8018926:	4604      	mov	r4, r0
 8018928:	4616      	mov	r6, r2
 801892a:	f7e7 fce3 	bl	80002f4 <strlen>
 801892e:	b150      	cbz	r0, 8018946 <rmw_validate_full_topic_name+0x2e>
 8018930:	7823      	ldrb	r3, [r4, #0]
 8018932:	2b2f      	cmp	r3, #47	@ 0x2f
 8018934:	d00e      	beq.n	8018954 <rmw_validate_full_topic_name+0x3c>
 8018936:	2302      	movs	r3, #2
 8018938:	602b      	str	r3, [r5, #0]
 801893a:	b146      	cbz	r6, 801894e <rmw_validate_full_topic_name+0x36>
 801893c:	2300      	movs	r3, #0
 801893e:	4618      	mov	r0, r3
 8018940:	6033      	str	r3, [r6, #0]
 8018942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018946:	2301      	movs	r3, #1
 8018948:	602b      	str	r3, [r5, #0]
 801894a:	2e00      	cmp	r6, #0
 801894c:	d1f6      	bne.n	801893c <rmw_validate_full_topic_name+0x24>
 801894e:	2000      	movs	r0, #0
 8018950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018954:	1e43      	subs	r3, r0, #1
 8018956:	5ce2      	ldrb	r2, [r4, r3]
 8018958:	2a2f      	cmp	r2, #47	@ 0x2f
 801895a:	d041      	beq.n	80189e0 <rmw_validate_full_topic_name+0xc8>
 801895c:	1e62      	subs	r2, r4, #1
 801895e:	f1c4 0e01 	rsb	lr, r4, #1
 8018962:	eb02 0800 	add.w	r8, r2, r0
 8018966:	eb0e 0702 	add.w	r7, lr, r2
 801896a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801896e:	f023 0120 	bic.w	r1, r3, #32
 8018972:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8018976:	3941      	subs	r1, #65	@ 0x41
 8018978:	2919      	cmp	r1, #25
 801897a:	d90f      	bls.n	801899c <rmw_validate_full_topic_name+0x84>
 801897c:	f1bc 0f0a 	cmp.w	ip, #10
 8018980:	d90c      	bls.n	801899c <rmw_validate_full_topic_name+0x84>
 8018982:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8018986:	fab3 f383 	clz	r3, r3
 801898a:	095b      	lsrs	r3, r3, #5
 801898c:	b933      	cbnz	r3, 801899c <rmw_validate_full_topic_name+0x84>
 801898e:	2204      	movs	r2, #4
 8018990:	602a      	str	r2, [r5, #0]
 8018992:	2e00      	cmp	r6, #0
 8018994:	d0db      	beq.n	801894e <rmw_validate_full_topic_name+0x36>
 8018996:	4618      	mov	r0, r3
 8018998:	6037      	str	r7, [r6, #0]
 801899a:	e7d2      	b.n	8018942 <rmw_validate_full_topic_name+0x2a>
 801899c:	4542      	cmp	r2, r8
 801899e:	d1e2      	bne.n	8018966 <rmw_validate_full_topic_name+0x4e>
 80189a0:	2301      	movs	r3, #1
 80189a2:	4f1a      	ldr	r7, [pc, #104]	@ (8018a0c <rmw_validate_full_topic_name+0xf4>)
 80189a4:	e004      	b.n	80189b0 <rmw_validate_full_topic_name+0x98>
 80189a6:	4298      	cmp	r0, r3
 80189a8:	f104 0401 	add.w	r4, r4, #1
 80189ac:	4613      	mov	r3, r2
 80189ae:	d91c      	bls.n	80189ea <rmw_validate_full_topic_name+0xd2>
 80189b0:	4298      	cmp	r0, r3
 80189b2:	f103 0201 	add.w	r2, r3, #1
 80189b6:	d0f6      	beq.n	80189a6 <rmw_validate_full_topic_name+0x8e>
 80189b8:	7821      	ldrb	r1, [r4, #0]
 80189ba:	292f      	cmp	r1, #47	@ 0x2f
 80189bc:	d1f3      	bne.n	80189a6 <rmw_validate_full_topic_name+0x8e>
 80189be:	7861      	ldrb	r1, [r4, #1]
 80189c0:	292f      	cmp	r1, #47	@ 0x2f
 80189c2:	d01e      	beq.n	8018a02 <rmw_validate_full_topic_name+0xea>
 80189c4:	5dc9      	ldrb	r1, [r1, r7]
 80189c6:	0749      	lsls	r1, r1, #29
 80189c8:	d5ed      	bpl.n	80189a6 <rmw_validate_full_topic_name+0x8e>
 80189ca:	2206      	movs	r2, #6
 80189cc:	602a      	str	r2, [r5, #0]
 80189ce:	2e00      	cmp	r6, #0
 80189d0:	d0bd      	beq.n	801894e <rmw_validate_full_topic_name+0x36>
 80189d2:	2000      	movs	r0, #0
 80189d4:	6033      	str	r3, [r6, #0]
 80189d6:	e7b4      	b.n	8018942 <rmw_validate_full_topic_name+0x2a>
 80189d8:	200b      	movs	r0, #11
 80189da:	4770      	bx	lr
 80189dc:	200b      	movs	r0, #11
 80189de:	e7b0      	b.n	8018942 <rmw_validate_full_topic_name+0x2a>
 80189e0:	2203      	movs	r2, #3
 80189e2:	602a      	str	r2, [r5, #0]
 80189e4:	2e00      	cmp	r6, #0
 80189e6:	d1f4      	bne.n	80189d2 <rmw_validate_full_topic_name+0xba>
 80189e8:	e7b1      	b.n	801894e <rmw_validate_full_topic_name+0x36>
 80189ea:	28f7      	cmp	r0, #247	@ 0xf7
 80189ec:	d803      	bhi.n	80189f6 <rmw_validate_full_topic_name+0xde>
 80189ee:	2300      	movs	r3, #0
 80189f0:	4618      	mov	r0, r3
 80189f2:	602b      	str	r3, [r5, #0]
 80189f4:	e7a5      	b.n	8018942 <rmw_validate_full_topic_name+0x2a>
 80189f6:	2307      	movs	r3, #7
 80189f8:	602b      	str	r3, [r5, #0]
 80189fa:	2e00      	cmp	r6, #0
 80189fc:	d0a7      	beq.n	801894e <rmw_validate_full_topic_name+0x36>
 80189fe:	23f6      	movs	r3, #246	@ 0xf6
 8018a00:	e7e7      	b.n	80189d2 <rmw_validate_full_topic_name+0xba>
 8018a02:	2205      	movs	r2, #5
 8018a04:	602a      	str	r2, [r5, #0]
 8018a06:	2e00      	cmp	r6, #0
 8018a08:	d1e3      	bne.n	80189d2 <rmw_validate_full_topic_name+0xba>
 8018a0a:	e7a0      	b.n	801894e <rmw_validate_full_topic_name+0x36>
 8018a0c:	08023f06 	.word	0x08023f06

08018a10 <rmw_validate_namespace_with_size>:
 8018a10:	2800      	cmp	r0, #0
 8018a12:	d043      	beq.n	8018a9c <rmw_validate_namespace_with_size+0x8c>
 8018a14:	b570      	push	{r4, r5, r6, lr}
 8018a16:	4614      	mov	r4, r2
 8018a18:	b0c2      	sub	sp, #264	@ 0x108
 8018a1a:	b32a      	cbz	r2, 8018a68 <rmw_validate_namespace_with_size+0x58>
 8018a1c:	2901      	cmp	r1, #1
 8018a1e:	460d      	mov	r5, r1
 8018a20:	461e      	mov	r6, r3
 8018a22:	d102      	bne.n	8018a2a <rmw_validate_namespace_with_size+0x1a>
 8018a24:	7803      	ldrb	r3, [r0, #0]
 8018a26:	2b2f      	cmp	r3, #47	@ 0x2f
 8018a28:	d012      	beq.n	8018a50 <rmw_validate_namespace_with_size+0x40>
 8018a2a:	aa01      	add	r2, sp, #4
 8018a2c:	4669      	mov	r1, sp
 8018a2e:	f7ff ff73 	bl	8018918 <rmw_validate_full_topic_name>
 8018a32:	b980      	cbnz	r0, 8018a56 <rmw_validate_namespace_with_size+0x46>
 8018a34:	9a00      	ldr	r2, [sp, #0]
 8018a36:	b14a      	cbz	r2, 8018a4c <rmw_validate_namespace_with_size+0x3c>
 8018a38:	2a07      	cmp	r2, #7
 8018a3a:	d007      	beq.n	8018a4c <rmw_validate_namespace_with_size+0x3c>
 8018a3c:	1e53      	subs	r3, r2, #1
 8018a3e:	2b05      	cmp	r3, #5
 8018a40:	d82e      	bhi.n	8018aa0 <rmw_validate_namespace_with_size+0x90>
 8018a42:	e8df f003 	tbb	[pc, r3]
 8018a46:	1f1c      	.short	0x1f1c
 8018a48:	14282522 	.word	0x14282522
 8018a4c:	2df5      	cmp	r5, #245	@ 0xf5
 8018a4e:	d804      	bhi.n	8018a5a <rmw_validate_namespace_with_size+0x4a>
 8018a50:	2300      	movs	r3, #0
 8018a52:	4618      	mov	r0, r3
 8018a54:	6023      	str	r3, [r4, #0]
 8018a56:	b042      	add	sp, #264	@ 0x108
 8018a58:	bd70      	pop	{r4, r5, r6, pc}
 8018a5a:	2307      	movs	r3, #7
 8018a5c:	6023      	str	r3, [r4, #0]
 8018a5e:	2e00      	cmp	r6, #0
 8018a60:	d0f9      	beq.n	8018a56 <rmw_validate_namespace_with_size+0x46>
 8018a62:	23f4      	movs	r3, #244	@ 0xf4
 8018a64:	6033      	str	r3, [r6, #0]
 8018a66:	e7f6      	b.n	8018a56 <rmw_validate_namespace_with_size+0x46>
 8018a68:	200b      	movs	r0, #11
 8018a6a:	b042      	add	sp, #264	@ 0x108
 8018a6c:	bd70      	pop	{r4, r5, r6, pc}
 8018a6e:	2306      	movs	r3, #6
 8018a70:	6023      	str	r3, [r4, #0]
 8018a72:	2e00      	cmp	r6, #0
 8018a74:	d0ef      	beq.n	8018a56 <rmw_validate_namespace_with_size+0x46>
 8018a76:	9b01      	ldr	r3, [sp, #4]
 8018a78:	6033      	str	r3, [r6, #0]
 8018a7a:	b042      	add	sp, #264	@ 0x108
 8018a7c:	bd70      	pop	{r4, r5, r6, pc}
 8018a7e:	2301      	movs	r3, #1
 8018a80:	6023      	str	r3, [r4, #0]
 8018a82:	e7f6      	b.n	8018a72 <rmw_validate_namespace_with_size+0x62>
 8018a84:	2302      	movs	r3, #2
 8018a86:	6023      	str	r3, [r4, #0]
 8018a88:	e7f3      	b.n	8018a72 <rmw_validate_namespace_with_size+0x62>
 8018a8a:	2303      	movs	r3, #3
 8018a8c:	6023      	str	r3, [r4, #0]
 8018a8e:	e7f0      	b.n	8018a72 <rmw_validate_namespace_with_size+0x62>
 8018a90:	2304      	movs	r3, #4
 8018a92:	6023      	str	r3, [r4, #0]
 8018a94:	e7ed      	b.n	8018a72 <rmw_validate_namespace_with_size+0x62>
 8018a96:	2305      	movs	r3, #5
 8018a98:	6023      	str	r3, [r4, #0]
 8018a9a:	e7ea      	b.n	8018a72 <rmw_validate_namespace_with_size+0x62>
 8018a9c:	200b      	movs	r0, #11
 8018a9e:	4770      	bx	lr
 8018aa0:	4613      	mov	r3, r2
 8018aa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018aa6:	4a03      	ldr	r2, [pc, #12]	@ (8018ab4 <rmw_validate_namespace_with_size+0xa4>)
 8018aa8:	a802      	add	r0, sp, #8
 8018aaa:	f7ff fd25 	bl	80184f8 <rcutils_snprintf>
 8018aae:	2001      	movs	r0, #1
 8018ab0:	e7d1      	b.n	8018a56 <rmw_validate_namespace_with_size+0x46>
 8018ab2:	bf00      	nop
 8018ab4:	0802374c 	.word	0x0802374c

08018ab8 <rmw_validate_namespace>:
 8018ab8:	b168      	cbz	r0, 8018ad6 <rmw_validate_namespace+0x1e>
 8018aba:	b570      	push	{r4, r5, r6, lr}
 8018abc:	460d      	mov	r5, r1
 8018abe:	4616      	mov	r6, r2
 8018ac0:	4604      	mov	r4, r0
 8018ac2:	f7e7 fc17 	bl	80002f4 <strlen>
 8018ac6:	4633      	mov	r3, r6
 8018ac8:	4601      	mov	r1, r0
 8018aca:	462a      	mov	r2, r5
 8018acc:	4620      	mov	r0, r4
 8018ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ad2:	f7ff bf9d 	b.w	8018a10 <rmw_validate_namespace_with_size>
 8018ad6:	200b      	movs	r0, #11
 8018ad8:	4770      	bx	lr
 8018ada:	bf00      	nop

08018adc <rmw_namespace_validation_result_string>:
 8018adc:	2807      	cmp	r0, #7
 8018ade:	d803      	bhi.n	8018ae8 <rmw_namespace_validation_result_string+0xc>
 8018ae0:	4b02      	ldr	r3, [pc, #8]	@ (8018aec <rmw_namespace_validation_result_string+0x10>)
 8018ae2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018ae6:	4770      	bx	lr
 8018ae8:	4801      	ldr	r0, [pc, #4]	@ (8018af0 <rmw_namespace_validation_result_string+0x14>)
 8018aea:	4770      	bx	lr
 8018aec:	08023944 	.word	0x08023944
 8018af0:	0802379c 	.word	0x0802379c

08018af4 <rmw_validate_node_name>:
 8018af4:	2800      	cmp	r0, #0
 8018af6:	d042      	beq.n	8018b7e <rmw_validate_node_name+0x8a>
 8018af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018afc:	460d      	mov	r5, r1
 8018afe:	2900      	cmp	r1, #0
 8018b00:	d03f      	beq.n	8018b82 <rmw_validate_node_name+0x8e>
 8018b02:	4604      	mov	r4, r0
 8018b04:	4616      	mov	r6, r2
 8018b06:	f7e7 fbf5 	bl	80002f4 <strlen>
 8018b0a:	b310      	cbz	r0, 8018b52 <rmw_validate_node_name+0x5e>
 8018b0c:	1e63      	subs	r3, r4, #1
 8018b0e:	f1c4 0101 	rsb	r1, r4, #1
 8018b12:	eb03 0800 	add.w	r8, r3, r0
 8018b16:	18cf      	adds	r7, r1, r3
 8018b18:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8018b1c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8018b20:	f02e 0c20 	bic.w	ip, lr, #32
 8018b24:	2a09      	cmp	r2, #9
 8018b26:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8018b2a:	d905      	bls.n	8018b38 <rmw_validate_node_name+0x44>
 8018b2c:	f1bc 0f19 	cmp.w	ip, #25
 8018b30:	d902      	bls.n	8018b38 <rmw_validate_node_name+0x44>
 8018b32:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8018b36:	d114      	bne.n	8018b62 <rmw_validate_node_name+0x6e>
 8018b38:	4598      	cmp	r8, r3
 8018b3a:	d1ec      	bne.n	8018b16 <rmw_validate_node_name+0x22>
 8018b3c:	7822      	ldrb	r2, [r4, #0]
 8018b3e:	4b16      	ldr	r3, [pc, #88]	@ (8018b98 <rmw_validate_node_name+0xa4>)
 8018b40:	5cd3      	ldrb	r3, [r2, r3]
 8018b42:	f013 0304 	ands.w	r3, r3, #4
 8018b46:	d113      	bne.n	8018b70 <rmw_validate_node_name+0x7c>
 8018b48:	28ff      	cmp	r0, #255	@ 0xff
 8018b4a:	d81c      	bhi.n	8018b86 <rmw_validate_node_name+0x92>
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	602b      	str	r3, [r5, #0]
 8018b50:	e00c      	b.n	8018b6c <rmw_validate_node_name+0x78>
 8018b52:	2301      	movs	r3, #1
 8018b54:	602b      	str	r3, [r5, #0]
 8018b56:	b17e      	cbz	r6, 8018b78 <rmw_validate_node_name+0x84>
 8018b58:	2300      	movs	r3, #0
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	6033      	str	r3, [r6, #0]
 8018b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b62:	2302      	movs	r3, #2
 8018b64:	602b      	str	r3, [r5, #0]
 8018b66:	b13e      	cbz	r6, 8018b78 <rmw_validate_node_name+0x84>
 8018b68:	2000      	movs	r0, #0
 8018b6a:	6037      	str	r7, [r6, #0]
 8018b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b70:	2303      	movs	r3, #3
 8018b72:	602b      	str	r3, [r5, #0]
 8018b74:	2e00      	cmp	r6, #0
 8018b76:	d1ef      	bne.n	8018b58 <rmw_validate_node_name+0x64>
 8018b78:	2000      	movs	r0, #0
 8018b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b7e:	200b      	movs	r0, #11
 8018b80:	4770      	bx	lr
 8018b82:	200b      	movs	r0, #11
 8018b84:	e7f2      	b.n	8018b6c <rmw_validate_node_name+0x78>
 8018b86:	2204      	movs	r2, #4
 8018b88:	602a      	str	r2, [r5, #0]
 8018b8a:	2e00      	cmp	r6, #0
 8018b8c:	d0f4      	beq.n	8018b78 <rmw_validate_node_name+0x84>
 8018b8e:	22fe      	movs	r2, #254	@ 0xfe
 8018b90:	4618      	mov	r0, r3
 8018b92:	6032      	str	r2, [r6, #0]
 8018b94:	e7ea      	b.n	8018b6c <rmw_validate_node_name+0x78>
 8018b96:	bf00      	nop
 8018b98:	08023f06 	.word	0x08023f06

08018b9c <rmw_node_name_validation_result_string>:
 8018b9c:	2804      	cmp	r0, #4
 8018b9e:	d803      	bhi.n	8018ba8 <rmw_node_name_validation_result_string+0xc>
 8018ba0:	4b02      	ldr	r3, [pc, #8]	@ (8018bac <rmw_node_name_validation_result_string+0x10>)
 8018ba2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018ba6:	4770      	bx	lr
 8018ba8:	4801      	ldr	r0, [pc, #4]	@ (8018bb0 <rmw_node_name_validation_result_string+0x14>)
 8018baa:	4770      	bx	lr
 8018bac:	08023a50 	.word	0x08023a50
 8018bb0:	08023964 	.word	0x08023964

08018bb4 <rmw_destroy_client>:
 8018bb4:	b570      	push	{r4, r5, r6, lr}
 8018bb6:	b128      	cbz	r0, 8018bc4 <rmw_destroy_client+0x10>
 8018bb8:	4604      	mov	r4, r0
 8018bba:	6800      	ldr	r0, [r0, #0]
 8018bbc:	460d      	mov	r5, r1
 8018bbe:	f001 feef 	bl	801a9a0 <is_uxrce_rmw_identifier_valid>
 8018bc2:	b910      	cbnz	r0, 8018bca <rmw_destroy_client+0x16>
 8018bc4:	2401      	movs	r4, #1
 8018bc6:	4620      	mov	r0, r4
 8018bc8:	bd70      	pop	{r4, r5, r6, pc}
 8018bca:	6863      	ldr	r3, [r4, #4]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d0f9      	beq.n	8018bc4 <rmw_destroy_client+0x10>
 8018bd0:	2d00      	cmp	r5, #0
 8018bd2:	d0f7      	beq.n	8018bc4 <rmw_destroy_client+0x10>
 8018bd4:	6828      	ldr	r0, [r5, #0]
 8018bd6:	f001 fee3 	bl	801a9a0 <is_uxrce_rmw_identifier_valid>
 8018bda:	2800      	cmp	r0, #0
 8018bdc:	d0f2      	beq.n	8018bc4 <rmw_destroy_client+0x10>
 8018bde:	686e      	ldr	r6, [r5, #4]
 8018be0:	2e00      	cmp	r6, #0
 8018be2:	d0ef      	beq.n	8018bc4 <rmw_destroy_client+0x10>
 8018be4:	6864      	ldr	r4, [r4, #4]
 8018be6:	6932      	ldr	r2, [r6, #16]
 8018be8:	6920      	ldr	r0, [r4, #16]
 8018bea:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018bee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018bf2:	6819      	ldr	r1, [r3, #0]
 8018bf4:	f002 fd70 	bl	801b6d8 <uxr_buffer_cancel_data>
 8018bf8:	4602      	mov	r2, r0
 8018bfa:	6920      	ldr	r0, [r4, #16]
 8018bfc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018c00:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018c04:	f001 fdba 	bl	801a77c <run_xrce_session>
 8018c08:	6920      	ldr	r0, [r4, #16]
 8018c0a:	6932      	ldr	r2, [r6, #16]
 8018c0c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018c10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018c14:	6819      	ldr	r1, [r3, #0]
 8018c16:	f002 f9fb 	bl	801b010 <uxr_buffer_delete_entity>
 8018c1a:	4602      	mov	r2, r0
 8018c1c:	6920      	ldr	r0, [r4, #16]
 8018c1e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018c22:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018c26:	f001 fda9 	bl	801a77c <run_xrce_session>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	4628      	mov	r0, r5
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	bf14      	ite	ne
 8018c32:	2400      	movne	r4, #0
 8018c34:	2402      	moveq	r4, #2
 8018c36:	f001 fc7f 	bl	801a538 <rmw_uxrce_fini_client_memory>
 8018c3a:	e7c4      	b.n	8018bc6 <rmw_destroy_client+0x12>

08018c3c <rmw_get_implementation_identifier>:
 8018c3c:	4b01      	ldr	r3, [pc, #4]	@ (8018c44 <rmw_get_implementation_identifier+0x8>)
 8018c3e:	6818      	ldr	r0, [r3, #0]
 8018c40:	4770      	bx	lr
 8018c42:	bf00      	nop
 8018c44:	08023da0 	.word	0x08023da0

08018c48 <rmw_init_options_init>:
 8018c48:	b084      	sub	sp, #16
 8018c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c4c:	b083      	sub	sp, #12
 8018c4e:	ad09      	add	r5, sp, #36	@ 0x24
 8018c50:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8018c54:	b130      	cbz	r0, 8018c64 <rmw_init_options_init+0x1c>
 8018c56:	4604      	mov	r4, r0
 8018c58:	4628      	mov	r0, r5
 8018c5a:	f7fb fcd9 	bl	8014610 <rcutils_allocator_is_valid>
 8018c5e:	b108      	cbz	r0, 8018c64 <rmw_init_options_init+0x1c>
 8018c60:	68a6      	ldr	r6, [r4, #8]
 8018c62:	b12e      	cbz	r6, 8018c70 <rmw_init_options_init+0x28>
 8018c64:	200b      	movs	r0, #11
 8018c66:	b003      	add	sp, #12
 8018c68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018c6c:	b004      	add	sp, #16
 8018c6e:	4770      	bx	lr
 8018c70:	2200      	movs	r2, #0
 8018c72:	2300      	movs	r3, #0
 8018c74:	f104 0c20 	add.w	ip, r4, #32
 8018c78:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8018d14 <rmw_init_options_init+0xcc>
 8018c7c:	466f      	mov	r7, sp
 8018c7e:	e9c4 2300 	strd	r2, r3, [r4]
 8018c82:	4b20      	ldr	r3, [pc, #128]	@ (8018d04 <rmw_init_options_init+0xbc>)
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	60a3      	str	r3, [r4, #8]
 8018c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018c8e:	682b      	ldr	r3, [r5, #0]
 8018c90:	4638      	mov	r0, r7
 8018c92:	f8cc 3000 	str.w	r3, [ip]
 8018c96:	f8c4 e01c 	str.w	lr, [r4, #28]
 8018c9a:	60e6      	str	r6, [r4, #12]
 8018c9c:	f7ff fe10 	bl	80188c0 <rmw_get_default_security_options>
 8018ca0:	f104 0310 	add.w	r3, r4, #16
 8018ca4:	2203      	movs	r2, #3
 8018ca6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018caa:	e883 0003 	stmia.w	r3, {r0, r1}
 8018cae:	4816      	ldr	r0, [pc, #88]	@ (8018d08 <rmw_init_options_init+0xc0>)
 8018cb0:	4916      	ldr	r1, [pc, #88]	@ (8018d0c <rmw_init_options_init+0xc4>)
 8018cb2:	7626      	strb	r6, [r4, #24]
 8018cb4:	f001 fb80 	bl	801a3b8 <rmw_uxrce_init_init_options_impl_memory>
 8018cb8:	4813      	ldr	r0, [pc, #76]	@ (8018d08 <rmw_init_options_init+0xc0>)
 8018cba:	f006 fa79 	bl	801f1b0 <get_memory>
 8018cbe:	b1f0      	cbz	r0, 8018cfe <rmw_init_options_init+0xb6>
 8018cc0:	4a13      	ldr	r2, [pc, #76]	@ (8018d10 <rmw_init_options_init+0xc8>)
 8018cc2:	6883      	ldr	r3, [r0, #8]
 8018cc4:	6851      	ldr	r1, [r2, #4]
 8018cc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8018cc8:	7810      	ldrb	r0, [r2, #0]
 8018cca:	6159      	str	r1, [r3, #20]
 8018ccc:	68d1      	ldr	r1, [r2, #12]
 8018cce:	7418      	strb	r0, [r3, #16]
 8018cd0:	61d9      	str	r1, [r3, #28]
 8018cd2:	6911      	ldr	r1, [r2, #16]
 8018cd4:	6219      	str	r1, [r3, #32]
 8018cd6:	6951      	ldr	r1, [r2, #20]
 8018cd8:	6892      	ldr	r2, [r2, #8]
 8018cda:	6259      	str	r1, [r3, #36]	@ 0x24
 8018cdc:	619a      	str	r2, [r3, #24]
 8018cde:	f004 fca5 	bl	801d62c <uxr_nanos>
 8018ce2:	f007 fa33 	bl	802014c <srand>
 8018ce6:	f007 fa5f 	bl	80201a8 <rand>
 8018cea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018cec:	6298      	str	r0, [r3, #40]	@ 0x28
 8018cee:	2800      	cmp	r0, #0
 8018cf0:	d0f9      	beq.n	8018ce6 <rmw_init_options_init+0x9e>
 8018cf2:	2000      	movs	r0, #0
 8018cf4:	b003      	add	sp, #12
 8018cf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018cfa:	b004      	add	sp, #16
 8018cfc:	4770      	bx	lr
 8018cfe:	2001      	movs	r0, #1
 8018d00:	e7b1      	b.n	8018c66 <rmw_init_options_init+0x1e>
 8018d02:	bf00      	nop
 8018d04:	08023da0 	.word	0x08023da0
 8018d08:	2406934c 	.word	0x2406934c
 8018d0c:	24064be8 	.word	0x24064be8
 8018d10:	2406478c 	.word	0x2406478c
 8018d14:	08023428 	.word	0x08023428

08018d18 <rmw_init_options_copy>:
 8018d18:	2800      	cmp	r0, #0
 8018d1a:	d047      	beq.n	8018dac <rmw_init_options_copy+0x94>
 8018d1c:	b570      	push	{r4, r5, r6, lr}
 8018d1e:	460d      	mov	r5, r1
 8018d20:	b149      	cbz	r1, 8018d36 <rmw_init_options_copy+0x1e>
 8018d22:	4604      	mov	r4, r0
 8018d24:	6880      	ldr	r0, [r0, #8]
 8018d26:	b120      	cbz	r0, 8018d32 <rmw_init_options_copy+0x1a>
 8018d28:	4b22      	ldr	r3, [pc, #136]	@ (8018db4 <rmw_init_options_copy+0x9c>)
 8018d2a:	6819      	ldr	r1, [r3, #0]
 8018d2c:	f7e7 fad8 	bl	80002e0 <strcmp>
 8018d30:	bba8      	cbnz	r0, 8018d9e <rmw_init_options_copy+0x86>
 8018d32:	68ab      	ldr	r3, [r5, #8]
 8018d34:	b11b      	cbz	r3, 8018d3e <rmw_init_options_copy+0x26>
 8018d36:	f04f 0c0b 	mov.w	ip, #11
 8018d3a:	4660      	mov	r0, ip
 8018d3c:	bd70      	pop	{r4, r5, r6, pc}
 8018d3e:	4623      	mov	r3, r4
 8018d40:	462a      	mov	r2, r5
 8018d42:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8018d46:	f8d3 e000 	ldr.w	lr, [r3]
 8018d4a:	3310      	adds	r3, #16
 8018d4c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8018d50:	3210      	adds	r2, #16
 8018d52:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8018d56:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018d5a:	42b3      	cmp	r3, r6
 8018d5c:	f842 ec10 	str.w	lr, [r2, #-16]
 8018d60:	f842 cc0c 	str.w	ip, [r2, #-12]
 8018d64:	f842 0c08 	str.w	r0, [r2, #-8]
 8018d68:	f842 1c04 	str.w	r1, [r2, #-4]
 8018d6c:	d1eb      	bne.n	8018d46 <rmw_init_options_copy+0x2e>
 8018d6e:	6819      	ldr	r1, [r3, #0]
 8018d70:	685b      	ldr	r3, [r3, #4]
 8018d72:	4811      	ldr	r0, [pc, #68]	@ (8018db8 <rmw_init_options_copy+0xa0>)
 8018d74:	6011      	str	r1, [r2, #0]
 8018d76:	6053      	str	r3, [r2, #4]
 8018d78:	f006 fa1a 	bl	801f1b0 <get_memory>
 8018d7c:	b198      	cbz	r0, 8018da6 <rmw_init_options_copy+0x8e>
 8018d7e:	6883      	ldr	r3, [r0, #8]
 8018d80:	f04f 0c00 	mov.w	ip, #0
 8018d84:	636b      	str	r3, [r5, #52]	@ 0x34
 8018d86:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8018d88:	f103 0410 	add.w	r4, r3, #16
 8018d8c:	3510      	adds	r5, #16
 8018d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018d96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018d9a:	4660      	mov	r0, ip
 8018d9c:	bd70      	pop	{r4, r5, r6, pc}
 8018d9e:	f04f 0c0c 	mov.w	ip, #12
 8018da2:	4660      	mov	r0, ip
 8018da4:	bd70      	pop	{r4, r5, r6, pc}
 8018da6:	f04f 0c01 	mov.w	ip, #1
 8018daa:	e7c6      	b.n	8018d3a <rmw_init_options_copy+0x22>
 8018dac:	f04f 0c0b 	mov.w	ip, #11
 8018db0:	4660      	mov	r0, ip
 8018db2:	4770      	bx	lr
 8018db4:	08023da0 	.word	0x08023da0
 8018db8:	2406934c 	.word	0x2406934c

08018dbc <rmw_init_options_fini>:
 8018dbc:	b510      	push	{r4, lr}
 8018dbe:	b08e      	sub	sp, #56	@ 0x38
 8018dc0:	b388      	cbz	r0, 8018e26 <rmw_init_options_fini+0x6a>
 8018dc2:	4604      	mov	r4, r0
 8018dc4:	3020      	adds	r0, #32
 8018dc6:	f7fb fc23 	bl	8014610 <rcutils_allocator_is_valid>
 8018dca:	b360      	cbz	r0, 8018e26 <rmw_init_options_fini+0x6a>
 8018dcc:	68a0      	ldr	r0, [r4, #8]
 8018dce:	b120      	cbz	r0, 8018dda <rmw_init_options_fini+0x1e>
 8018dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8018e3c <rmw_init_options_fini+0x80>)
 8018dd2:	6819      	ldr	r1, [r3, #0]
 8018dd4:	f7e7 fa84 	bl	80002e0 <strcmp>
 8018dd8:	bb68      	cbnz	r0, 8018e36 <rmw_init_options_fini+0x7a>
 8018dda:	4b19      	ldr	r3, [pc, #100]	@ (8018e40 <rmw_init_options_fini+0x84>)
 8018ddc:	6819      	ldr	r1, [r3, #0]
 8018dde:	b331      	cbz	r1, 8018e2e <rmw_init_options_fini+0x72>
 8018de0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8018de2:	e001      	b.n	8018de8 <rmw_init_options_fini+0x2c>
 8018de4:	6849      	ldr	r1, [r1, #4]
 8018de6:	b311      	cbz	r1, 8018e2e <rmw_init_options_fini+0x72>
 8018de8:	688b      	ldr	r3, [r1, #8]
 8018dea:	429a      	cmp	r2, r3
 8018dec:	d1fa      	bne.n	8018de4 <rmw_init_options_fini+0x28>
 8018dee:	4814      	ldr	r0, [pc, #80]	@ (8018e40 <rmw_init_options_fini+0x84>)
 8018df0:	f006 f9ee 	bl	801f1d0 <put_memory>
 8018df4:	4668      	mov	r0, sp
 8018df6:	f7ff fd4f 	bl	8018898 <rmw_get_zero_initialized_init_options>
 8018dfa:	46ee      	mov	lr, sp
 8018dfc:	46a4      	mov	ip, r4
 8018dfe:	2400      	movs	r4, #0
 8018e00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018e04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018e0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018e14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018e1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018e20:	4620      	mov	r0, r4
 8018e22:	b00e      	add	sp, #56	@ 0x38
 8018e24:	bd10      	pop	{r4, pc}
 8018e26:	240b      	movs	r4, #11
 8018e28:	4620      	mov	r0, r4
 8018e2a:	b00e      	add	sp, #56	@ 0x38
 8018e2c:	bd10      	pop	{r4, pc}
 8018e2e:	2401      	movs	r4, #1
 8018e30:	4620      	mov	r0, r4
 8018e32:	b00e      	add	sp, #56	@ 0x38
 8018e34:	bd10      	pop	{r4, pc}
 8018e36:	240c      	movs	r4, #12
 8018e38:	e7f2      	b.n	8018e20 <rmw_init_options_fini+0x64>
 8018e3a:	bf00      	nop
 8018e3c:	08023da0 	.word	0x08023da0
 8018e40:	2406934c 	.word	0x2406934c

08018e44 <rmw_init>:
 8018e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e48:	b083      	sub	sp, #12
 8018e4a:	2800      	cmp	r0, #0
 8018e4c:	f000 80d3 	beq.w	8018ff6 <rmw_init+0x1b2>
 8018e50:	460e      	mov	r6, r1
 8018e52:	2900      	cmp	r1, #0
 8018e54:	f000 80cf 	beq.w	8018ff6 <rmw_init+0x1b2>
 8018e58:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8018e5a:	4605      	mov	r5, r0
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	f000 80ca 	beq.w	8018ff6 <rmw_init+0x1b2>
 8018e62:	4b78      	ldr	r3, [pc, #480]	@ (8019044 <rmw_init+0x200>)
 8018e64:	6880      	ldr	r0, [r0, #8]
 8018e66:	681f      	ldr	r7, [r3, #0]
 8018e68:	b128      	cbz	r0, 8018e76 <rmw_init+0x32>
 8018e6a:	4639      	mov	r1, r7
 8018e6c:	f7e7 fa38 	bl	80002e0 <strcmp>
 8018e70:	2800      	cmp	r0, #0
 8018e72:	f040 80ca 	bne.w	801900a <rmw_init+0x1c6>
 8018e76:	4c74      	ldr	r4, [pc, #464]	@ (8019048 <rmw_init+0x204>)
 8018e78:	f04f 0800 	mov.w	r8, #0
 8018e7c:	4973      	ldr	r1, [pc, #460]	@ (801904c <rmw_init+0x208>)
 8018e7e:	4874      	ldr	r0, [pc, #464]	@ (8019050 <rmw_init+0x20c>)
 8018e80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018e84:	60b7      	str	r7, [r6, #8]
 8018e86:	e9c6 2300 	strd	r2, r3, [r6]
 8018e8a:	68eb      	ldr	r3, [r5, #12]
 8018e8c:	2201      	movs	r2, #1
 8018e8e:	64b3      	str	r3, [r6, #72]	@ 0x48
 8018e90:	f001 fa32 	bl	801a2f8 <rmw_uxrce_init_session_memory>
 8018e94:	4620      	mov	r0, r4
 8018e96:	2204      	movs	r2, #4
 8018e98:	496e      	ldr	r1, [pc, #440]	@ (8019054 <rmw_init+0x210>)
 8018e9a:	f001 fa6d 	bl	801a378 <rmw_uxrce_init_static_input_buffer_memory>
 8018e9e:	486c      	ldr	r0, [pc, #432]	@ (8019050 <rmw_init+0x20c>)
 8018ea0:	f884 800d 	strb.w	r8, [r4, #13]
 8018ea4:	f006 f984 	bl	801f1b0 <get_memory>
 8018ea8:	2800      	cmp	r0, #0
 8018eaa:	f000 80a9 	beq.w	8019000 <rmw_init+0x1bc>
 8018eae:	6884      	ldr	r4, [r0, #8]
 8018eb0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8018eb2:	f104 0910 	add.w	r9, r4, #16
 8018eb6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8018eb8:	f890 c010 	ldrb.w	ip, [r0, #16]
 8018ebc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8018ec0:	9101      	str	r1, [sp, #4]
 8018ec2:	4661      	mov	r1, ip
 8018ec4:	6a00      	ldr	r0, [r0, #32]
 8018ec6:	9000      	str	r0, [sp, #0]
 8018ec8:	4648      	mov	r0, r9
 8018eca:	f002 fb59 	bl	801b580 <uxr_set_custom_transport_callbacks>
 8018ece:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018ed2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8018ed6:	4960      	ldr	r1, [pc, #384]	@ (8019058 <rmw_init+0x214>)
 8018ed8:	4860      	ldr	r0, [pc, #384]	@ (801905c <rmw_init+0x218>)
 8018eda:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8018ede:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8018ee2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8018ee6:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8018eea:	2201      	movs	r2, #1
 8018eec:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8018ef0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8018ef4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8018ef8:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8018efc:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8018efe:	f001 f9db 	bl	801a2b8 <rmw_uxrce_init_node_memory>
 8018f02:	2205      	movs	r2, #5
 8018f04:	4956      	ldr	r1, [pc, #344]	@ (8019060 <rmw_init+0x21c>)
 8018f06:	4857      	ldr	r0, [pc, #348]	@ (8019064 <rmw_init+0x220>)
 8018f08:	f001 f9b6 	bl	801a278 <rmw_uxrce_init_subscription_memory>
 8018f0c:	220a      	movs	r2, #10
 8018f0e:	4956      	ldr	r1, [pc, #344]	@ (8019068 <rmw_init+0x224>)
 8018f10:	4856      	ldr	r0, [pc, #344]	@ (801906c <rmw_init+0x228>)
 8018f12:	f001 f991 	bl	801a238 <rmw_uxrce_init_publisher_memory>
 8018f16:	2201      	movs	r2, #1
 8018f18:	4955      	ldr	r1, [pc, #340]	@ (8019070 <rmw_init+0x22c>)
 8018f1a:	4856      	ldr	r0, [pc, #344]	@ (8019074 <rmw_init+0x230>)
 8018f1c:	f001 f94c 	bl	801a1b8 <rmw_uxrce_init_service_memory>
 8018f20:	2201      	movs	r2, #1
 8018f22:	4955      	ldr	r1, [pc, #340]	@ (8019078 <rmw_init+0x234>)
 8018f24:	4855      	ldr	r0, [pc, #340]	@ (801907c <rmw_init+0x238>)
 8018f26:	f001 f967 	bl	801a1f8 <rmw_uxrce_init_client_memory>
 8018f2a:	220f      	movs	r2, #15
 8018f2c:	4954      	ldr	r1, [pc, #336]	@ (8019080 <rmw_init+0x23c>)
 8018f2e:	4855      	ldr	r0, [pc, #340]	@ (8019084 <rmw_init+0x240>)
 8018f30:	f001 fa02 	bl	801a338 <rmw_uxrce_init_topic_memory>
 8018f34:	2203      	movs	r2, #3
 8018f36:	4954      	ldr	r1, [pc, #336]	@ (8019088 <rmw_init+0x244>)
 8018f38:	4854      	ldr	r0, [pc, #336]	@ (801908c <rmw_init+0x248>)
 8018f3a:	f001 fa3d 	bl	801a3b8 <rmw_uxrce_init_init_options_impl_memory>
 8018f3e:	2204      	movs	r2, #4
 8018f40:	4953      	ldr	r1, [pc, #332]	@ (8019090 <rmw_init+0x24c>)
 8018f42:	4854      	ldr	r0, [pc, #336]	@ (8019094 <rmw_init+0x250>)
 8018f44:	f001 fa58 	bl	801a3f8 <rmw_uxrce_init_wait_set_memory>
 8018f48:	4953      	ldr	r1, [pc, #332]	@ (8019098 <rmw_init+0x254>)
 8018f4a:	4854      	ldr	r0, [pc, #336]	@ (801909c <rmw_init+0x258>)
 8018f4c:	2204      	movs	r2, #4
 8018f4e:	f001 fa73 	bl	801a438 <rmw_uxrce_init_guard_condition_memory>
 8018f52:	4642      	mov	r2, r8
 8018f54:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8018f56:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8018f58:	f000 ff94 	bl	8019e84 <rmw_uxrce_transport_init>
 8018f5c:	4607      	mov	r7, r0
 8018f5e:	2800      	cmp	r0, #0
 8018f60:	d158      	bne.n	8019014 <rmw_init+0x1d0>
 8018f62:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8018f64:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8018f68:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8018f6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018f6e:	4628      	mov	r0, r5
 8018f70:	f002 fd36 	bl	801b9e0 <uxr_init_session>
 8018f74:	4622      	mov	r2, r4
 8018f76:	494a      	ldr	r1, [pc, #296]	@ (80190a0 <rmw_init+0x25c>)
 8018f78:	4628      	mov	r0, r5
 8018f7a:	f002 fd55 	bl	801ba28 <uxr_set_topic_callback>
 8018f7e:	463a      	mov	r2, r7
 8018f80:	4948      	ldr	r1, [pc, #288]	@ (80190a4 <rmw_init+0x260>)
 8018f82:	4628      	mov	r0, r5
 8018f84:	f002 fd4c 	bl	801ba20 <uxr_set_status_callback>
 8018f88:	463a      	mov	r2, r7
 8018f8a:	4947      	ldr	r1, [pc, #284]	@ (80190a8 <rmw_init+0x264>)
 8018f8c:	4628      	mov	r0, r5
 8018f8e:	f002 fd4f 	bl	801ba30 <uxr_set_request_callback>
 8018f92:	463a      	mov	r2, r7
 8018f94:	4945      	ldr	r1, [pc, #276]	@ (80190ac <rmw_init+0x268>)
 8018f96:	4628      	mov	r0, r5
 8018f98:	f002 fd4e 	bl	801ba38 <uxr_set_reply_callback>
 8018f9c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018fa0:	2304      	movs	r3, #4
 8018fa2:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8018fa6:	0092      	lsls	r2, r2, #2
 8018fa8:	4628      	mov	r0, r5
 8018faa:	f002 fd85 	bl	801bab8 <uxr_create_input_reliable_stream>
 8018fae:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018fb2:	2304      	movs	r3, #4
 8018fb4:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8018fb8:	0092      	lsls	r2, r2, #2
 8018fba:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8018fbe:	4628      	mov	r0, r5
 8018fc0:	f002 fd50 	bl	801ba64 <uxr_create_output_reliable_stream>
 8018fc4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8018fc8:	4628      	mov	r0, r5
 8018fca:	f002 fd6f 	bl	801baac <uxr_create_input_best_effort_stream>
 8018fce:	f241 3194 	movw	r1, #5012	@ 0x1394
 8018fd2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8018fd6:	4628      	mov	r0, r5
 8018fd8:	4421      	add	r1, r4
 8018fda:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018fde:	f002 fd2f 	bl	801ba40 <uxr_create_output_best_effort_stream>
 8018fe2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8018fe6:	4628      	mov	r0, r5
 8018fe8:	f003 fab8 	bl	801c55c <uxr_create_session>
 8018fec:	b1f8      	cbz	r0, 801902e <rmw_init+0x1ea>
 8018fee:	4638      	mov	r0, r7
 8018ff0:	b003      	add	sp, #12
 8018ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ff6:	270b      	movs	r7, #11
 8018ff8:	4638      	mov	r0, r7
 8018ffa:	b003      	add	sp, #12
 8018ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019000:	2701      	movs	r7, #1
 8019002:	4638      	mov	r0, r7
 8019004:	b003      	add	sp, #12
 8019006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801900a:	270c      	movs	r7, #12
 801900c:	4638      	mov	r0, r7
 801900e:	b003      	add	sp, #12
 8019010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019014:	4648      	mov	r0, r9
 8019016:	f002 faf1 	bl	801b5fc <uxr_close_custom_transport>
 801901a:	4621      	mov	r1, r4
 801901c:	480c      	ldr	r0, [pc, #48]	@ (8019050 <rmw_init+0x20c>)
 801901e:	f006 f8d7 	bl	801f1d0 <put_memory>
 8019022:	4638      	mov	r0, r7
 8019024:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8019028:	b003      	add	sp, #12
 801902a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801902e:	4648      	mov	r0, r9
 8019030:	f002 fae4 	bl	801b5fc <uxr_close_custom_transport>
 8019034:	4621      	mov	r1, r4
 8019036:	4806      	ldr	r0, [pc, #24]	@ (8019050 <rmw_init+0x20c>)
 8019038:	f006 f8ca 	bl	801f1d0 <put_memory>
 801903c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801903e:	2701      	movs	r7, #1
 8019040:	e7d5      	b.n	8018fee <rmw_init+0x1aa>
 8019042:	bf00      	nop
 8019044:	08023da0 	.word	0x08023da0
 8019048:	2406939c 	.word	0x2406939c
 801904c:	24065648 	.word	0x24065648
 8019050:	2406938c 	.word	0x2406938c
 8019054:	24066bf0 	.word	0x24066bf0
 8019058:	24064c6c 	.word	0x24064c6c
 801905c:	2406935c 	.word	0x2406935c
 8019060:	24068cf0 	.word	0x24068cf0
 8019064:	240693ac 	.word	0x240693ac
 8019068:	24064d10 	.word	0x24064d10
 801906c:	2406936c 	.word	0x2406936c
 8019070:	24065580 	.word	0x24065580
 8019074:	2406937c 	.word	0x2406937c
 8019078:	24064aa0 	.word	0x24064aa0
 801907c:	24064a90 	.word	0x24064a90
 8019080:	24069128 	.word	0x24069128
 8019084:	240693bc 	.word	0x240693bc
 8019088:	24064be8 	.word	0x24064be8
 801908c:	2406934c 	.word	0x2406934c
 8019090:	240692cc 	.word	0x240692cc
 8019094:	240693cc 	.word	0x240693cc
 8019098:	24064b68 	.word	0x24064b68
 801909c:	2406933c 	.word	0x2406933c
 80190a0:	0801efe9 	.word	0x0801efe9
 80190a4:	0801efe1 	.word	0x0801efe1
 80190a8:	0801f081 	.word	0x0801f081
 80190ac:	0801f11d 	.word	0x0801f11d

080190b0 <rmw_context_fini>:
 80190b0:	4b17      	ldr	r3, [pc, #92]	@ (8019110 <rmw_context_fini+0x60>)
 80190b2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80190b4:	b570      	push	{r4, r5, r6, lr}
 80190b6:	681c      	ldr	r4, [r3, #0]
 80190b8:	4605      	mov	r5, r0
 80190ba:	b334      	cbz	r4, 801910a <rmw_context_fini+0x5a>
 80190bc:	2600      	movs	r6, #0
 80190be:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80190c2:	6902      	ldr	r2, [r0, #16]
 80190c4:	428a      	cmp	r2, r1
 80190c6:	d018      	beq.n	80190fa <rmw_context_fini+0x4a>
 80190c8:	2c00      	cmp	r4, #0
 80190ca:	d1f8      	bne.n	80190be <rmw_context_fini+0xe>
 80190cc:	b189      	cbz	r1, 80190f2 <rmw_context_fini+0x42>
 80190ce:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80190d2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80190d6:	789b      	ldrb	r3, [r3, #2]
 80190d8:	2b01      	cmp	r3, #1
 80190da:	bf14      	ite	ne
 80190dc:	210a      	movne	r1, #10
 80190de:	2100      	moveq	r1, #0
 80190e0:	f003 fa14 	bl	801c50c <uxr_delete_session_retries>
 80190e4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80190e6:	f001 f9c7 	bl	801a478 <rmw_uxrce_fini_session_memory>
 80190ea:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80190ec:	3010      	adds	r0, #16
 80190ee:	f002 fa85 	bl	801b5fc <uxr_close_custom_transport>
 80190f2:	2300      	movs	r3, #0
 80190f4:	4630      	mov	r0, r6
 80190f6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80190f8:	bd70      	pop	{r4, r5, r6, pc}
 80190fa:	3018      	adds	r0, #24
 80190fc:	f000 f89c 	bl	8019238 <rmw_destroy_node>
 8019100:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8019102:	4606      	mov	r6, r0
 8019104:	2c00      	cmp	r4, #0
 8019106:	d1da      	bne.n	80190be <rmw_context_fini+0xe>
 8019108:	e7e0      	b.n	80190cc <rmw_context_fini+0x1c>
 801910a:	4626      	mov	r6, r4
 801910c:	e7de      	b.n	80190cc <rmw_context_fini+0x1c>
 801910e:	bf00      	nop
 8019110:	2406935c 	.word	0x2406935c

08019114 <create_node>:
 8019114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019118:	b083      	sub	sp, #12
 801911a:	2b00      	cmp	r3, #0
 801911c:	d064      	beq.n	80191e8 <create_node+0xd4>
 801911e:	4606      	mov	r6, r0
 8019120:	4838      	ldr	r0, [pc, #224]	@ (8019204 <create_node+0xf0>)
 8019122:	460f      	mov	r7, r1
 8019124:	4690      	mov	r8, r2
 8019126:	461d      	mov	r5, r3
 8019128:	f006 f842 	bl	801f1b0 <get_memory>
 801912c:	2800      	cmp	r0, #0
 801912e:	d05b      	beq.n	80191e8 <create_node+0xd4>
 8019130:	6884      	ldr	r4, [r0, #8]
 8019132:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8019134:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8019138:	f104 0518 	add.w	r5, r4, #24
 801913c:	6123      	str	r3, [r4, #16]
 801913e:	f7ff fd7d 	bl	8018c3c <rmw_get_implementation_identifier>
 8019142:	f8c4 9020 	str.w	r9, [r4, #32]
 8019146:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801914a:	4630      	mov	r0, r6
 801914c:	f7e7 f8d2 	bl	80002f4 <strlen>
 8019150:	1c42      	adds	r2, r0, #1
 8019152:	2a3c      	cmp	r2, #60	@ 0x3c
 8019154:	d840      	bhi.n	80191d8 <create_node+0xc4>
 8019156:	4648      	mov	r0, r9
 8019158:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801915c:	4631      	mov	r1, r6
 801915e:	f007 fcb8 	bl	8020ad2 <memcpy>
 8019162:	4638      	mov	r0, r7
 8019164:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8019168:	f7e7 f8c4 	bl	80002f4 <strlen>
 801916c:	1c42      	adds	r2, r0, #1
 801916e:	2a3c      	cmp	r2, #60	@ 0x3c
 8019170:	d832      	bhi.n	80191d8 <create_node+0xc4>
 8019172:	4639      	mov	r1, r7
 8019174:	4648      	mov	r0, r9
 8019176:	f007 fcac 	bl	8020ad2 <memcpy>
 801917a:	6923      	ldr	r3, [r4, #16]
 801917c:	2101      	movs	r1, #1
 801917e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019182:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8019186:	1842      	adds	r2, r0, r1
 8019188:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801918c:	f002 fa3a 	bl	801b604 <uxr_object_id>
 8019190:	6160      	str	r0, [r4, #20]
 8019192:	783b      	ldrb	r3, [r7, #0]
 8019194:	2b2f      	cmp	r3, #47	@ 0x2f
 8019196:	d12c      	bne.n	80191f2 <create_node+0xde>
 8019198:	787b      	ldrb	r3, [r7, #1]
 801919a:	bb53      	cbnz	r3, 80191f2 <create_node+0xde>
 801919c:	4633      	mov	r3, r6
 801919e:	4a1a      	ldr	r2, [pc, #104]	@ (8019208 <create_node+0xf4>)
 80191a0:	213c      	movs	r1, #60	@ 0x3c
 80191a2:	481a      	ldr	r0, [pc, #104]	@ (801920c <create_node+0xf8>)
 80191a4:	f007 fa08 	bl	80205b8 <sniprintf>
 80191a8:	6920      	ldr	r0, [r4, #16]
 80191aa:	2106      	movs	r1, #6
 80191ac:	fa1f f388 	uxth.w	r3, r8
 80191b0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80191b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80191b8:	9101      	str	r1, [sp, #4]
 80191ba:	4914      	ldr	r1, [pc, #80]	@ (801920c <create_node+0xf8>)
 80191bc:	9100      	str	r1, [sp, #0]
 80191be:	6811      	ldr	r1, [r2, #0]
 80191c0:	6962      	ldr	r2, [r4, #20]
 80191c2:	f001 ff71 	bl	801b0a8 <uxr_buffer_create_participant_bin>
 80191c6:	4602      	mov	r2, r0
 80191c8:	6920      	ldr	r0, [r4, #16]
 80191ca:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80191ce:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80191d2:	f001 fad3 	bl	801a77c <run_xrce_session>
 80191d6:	b918      	cbnz	r0, 80191e0 <create_node+0xcc>
 80191d8:	4628      	mov	r0, r5
 80191da:	2500      	movs	r5, #0
 80191dc:	f001 f952 	bl	801a484 <rmw_uxrce_fini_node_memory>
 80191e0:	4628      	mov	r0, r5
 80191e2:	b003      	add	sp, #12
 80191e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191e8:	2500      	movs	r5, #0
 80191ea:	4628      	mov	r0, r5
 80191ec:	b003      	add	sp, #12
 80191ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191f2:	463b      	mov	r3, r7
 80191f4:	4a06      	ldr	r2, [pc, #24]	@ (8019210 <create_node+0xfc>)
 80191f6:	213c      	movs	r1, #60	@ 0x3c
 80191f8:	9600      	str	r6, [sp, #0]
 80191fa:	4804      	ldr	r0, [pc, #16]	@ (801920c <create_node+0xf8>)
 80191fc:	f007 f9dc 	bl	80205b8 <sniprintf>
 8019200:	e7d2      	b.n	80191a8 <create_node+0x94>
 8019202:	bf00      	nop
 8019204:	2406935c 	.word	0x2406935c
 8019208:	08023a74 	.word	0x08023a74
 801920c:	24064914 	.word	0x24064914
 8019210:	08023438 	.word	0x08023438

08019214 <rmw_create_node>:
 8019214:	468c      	mov	ip, r1
 8019216:	4611      	mov	r1, r2
 8019218:	f1bc 0f00 	cmp.w	ip, #0
 801921c:	d00a      	beq.n	8019234 <rmw_create_node+0x20>
 801921e:	f89c 3000 	ldrb.w	r3, [ip]
 8019222:	b13b      	cbz	r3, 8019234 <rmw_create_node+0x20>
 8019224:	b132      	cbz	r2, 8019234 <rmw_create_node+0x20>
 8019226:	7813      	ldrb	r3, [r2, #0]
 8019228:	b123      	cbz	r3, 8019234 <rmw_create_node+0x20>
 801922a:	4603      	mov	r3, r0
 801922c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801922e:	4660      	mov	r0, ip
 8019230:	f7ff bf70 	b.w	8019114 <create_node>
 8019234:	2000      	movs	r0, #0
 8019236:	4770      	bx	lr

08019238 <rmw_destroy_node>:
 8019238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801923a:	b328      	cbz	r0, 8019288 <rmw_destroy_node+0x50>
 801923c:	4607      	mov	r7, r0
 801923e:	6800      	ldr	r0, [r0, #0]
 8019240:	b120      	cbz	r0, 801924c <rmw_destroy_node+0x14>
 8019242:	4b37      	ldr	r3, [pc, #220]	@ (8019320 <rmw_destroy_node+0xe8>)
 8019244:	6819      	ldr	r1, [r3, #0]
 8019246:	f7e7 f84b 	bl	80002e0 <strcmp>
 801924a:	b9e8      	cbnz	r0, 8019288 <rmw_destroy_node+0x50>
 801924c:	687d      	ldr	r5, [r7, #4]
 801924e:	b1dd      	cbz	r5, 8019288 <rmw_destroy_node+0x50>
 8019250:	4b34      	ldr	r3, [pc, #208]	@ (8019324 <rmw_destroy_node+0xec>)
 8019252:	681c      	ldr	r4, [r3, #0]
 8019254:	2c00      	cmp	r4, #0
 8019256:	d060      	beq.n	801931a <rmw_destroy_node+0xe2>
 8019258:	2600      	movs	r6, #0
 801925a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801925e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8019262:	429d      	cmp	r5, r3
 8019264:	d013      	beq.n	801928e <rmw_destroy_node+0x56>
 8019266:	2c00      	cmp	r4, #0
 8019268:	d1f7      	bne.n	801925a <rmw_destroy_node+0x22>
 801926a:	4b2f      	ldr	r3, [pc, #188]	@ (8019328 <rmw_destroy_node+0xf0>)
 801926c:	681c      	ldr	r4, [r3, #0]
 801926e:	b1c4      	cbz	r4, 80192a2 <rmw_destroy_node+0x6a>
 8019270:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019274:	6a0b      	ldr	r3, [r1, #32]
 8019276:	429d      	cmp	r5, r3
 8019278:	d1f9      	bne.n	801926e <rmw_destroy_node+0x36>
 801927a:	317c      	adds	r1, #124	@ 0x7c
 801927c:	4638      	mov	r0, r7
 801927e:	f000 fd4b 	bl	8019d18 <rmw_destroy_subscription>
 8019282:	2801      	cmp	r0, #1
 8019284:	4606      	mov	r6, r0
 8019286:	d1f2      	bne.n	801926e <rmw_destroy_node+0x36>
 8019288:	2601      	movs	r6, #1
 801928a:	4630      	mov	r0, r6
 801928c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801928e:	3184      	adds	r1, #132	@ 0x84
 8019290:	4638      	mov	r0, r7
 8019292:	f000 f94d 	bl	8019530 <rmw_destroy_publisher>
 8019296:	2801      	cmp	r0, #1
 8019298:	4606      	mov	r6, r0
 801929a:	d0f5      	beq.n	8019288 <rmw_destroy_node+0x50>
 801929c:	2c00      	cmp	r4, #0
 801929e:	d1dc      	bne.n	801925a <rmw_destroy_node+0x22>
 80192a0:	e7e3      	b.n	801926a <rmw_destroy_node+0x32>
 80192a2:	4b22      	ldr	r3, [pc, #136]	@ (801932c <rmw_destroy_node+0xf4>)
 80192a4:	681c      	ldr	r4, [r3, #0]
 80192a6:	b16c      	cbz	r4, 80192c4 <rmw_destroy_node+0x8c>
 80192a8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80192ac:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80192ae:	429d      	cmp	r5, r3
 80192b0:	d1f9      	bne.n	80192a6 <rmw_destroy_node+0x6e>
 80192b2:	317c      	adds	r1, #124	@ 0x7c
 80192b4:	4638      	mov	r0, r7
 80192b6:	f000 fbb9 	bl	8019a2c <rmw_destroy_service>
 80192ba:	2801      	cmp	r0, #1
 80192bc:	4606      	mov	r6, r0
 80192be:	d0e3      	beq.n	8019288 <rmw_destroy_node+0x50>
 80192c0:	2c00      	cmp	r4, #0
 80192c2:	d1f1      	bne.n	80192a8 <rmw_destroy_node+0x70>
 80192c4:	4b1a      	ldr	r3, [pc, #104]	@ (8019330 <rmw_destroy_node+0xf8>)
 80192c6:	681c      	ldr	r4, [r3, #0]
 80192c8:	b16c      	cbz	r4, 80192e6 <rmw_destroy_node+0xae>
 80192ca:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80192ce:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80192d0:	429d      	cmp	r5, r3
 80192d2:	d1f9      	bne.n	80192c8 <rmw_destroy_node+0x90>
 80192d4:	317c      	adds	r1, #124	@ 0x7c
 80192d6:	4638      	mov	r0, r7
 80192d8:	f7ff fc6c 	bl	8018bb4 <rmw_destroy_client>
 80192dc:	2801      	cmp	r0, #1
 80192de:	4606      	mov	r6, r0
 80192e0:	d0d2      	beq.n	8019288 <rmw_destroy_node+0x50>
 80192e2:	2c00      	cmp	r4, #0
 80192e4:	d1f1      	bne.n	80192ca <rmw_destroy_node+0x92>
 80192e6:	6928      	ldr	r0, [r5, #16]
 80192e8:	696a      	ldr	r2, [r5, #20]
 80192ea:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80192ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80192f2:	6819      	ldr	r1, [r3, #0]
 80192f4:	f001 fe8c 	bl	801b010 <uxr_buffer_delete_entity>
 80192f8:	4602      	mov	r2, r0
 80192fa:	6928      	ldr	r0, [r5, #16]
 80192fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019300:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019304:	f001 fa3a 	bl	801a77c <run_xrce_session>
 8019308:	4603      	mov	r3, r0
 801930a:	4638      	mov	r0, r7
 801930c:	2b00      	cmp	r3, #0
 801930e:	bf08      	it	eq
 8019310:	2602      	moveq	r6, #2
 8019312:	f001 f8b7 	bl	801a484 <rmw_uxrce_fini_node_memory>
 8019316:	4630      	mov	r0, r6
 8019318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801931a:	4626      	mov	r6, r4
 801931c:	e7a5      	b.n	801926a <rmw_destroy_node+0x32>
 801931e:	bf00      	nop
 8019320:	08023da0 	.word	0x08023da0
 8019324:	2406936c 	.word	0x2406936c
 8019328:	240693ac 	.word	0x240693ac
 801932c:	2406937c 	.word	0x2406937c
 8019330:	24064a90 	.word	0x24064a90

08019334 <rmw_node_get_graph_guard_condition>:
 8019334:	6843      	ldr	r3, [r0, #4]
 8019336:	6918      	ldr	r0, [r3, #16]
 8019338:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801933c:	4770      	bx	lr
 801933e:	bf00      	nop

08019340 <rmw_create_publisher>:
 8019340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019344:	b087      	sub	sp, #28
 8019346:	2800      	cmp	r0, #0
 8019348:	f000 80d2 	beq.w	80194f0 <rmw_create_publisher+0x1b0>
 801934c:	460e      	mov	r6, r1
 801934e:	2900      	cmp	r1, #0
 8019350:	f000 80ce 	beq.w	80194f0 <rmw_create_publisher+0x1b0>
 8019354:	4604      	mov	r4, r0
 8019356:	6800      	ldr	r0, [r0, #0]
 8019358:	4615      	mov	r5, r2
 801935a:	461f      	mov	r7, r3
 801935c:	f001 fb20 	bl	801a9a0 <is_uxrce_rmw_identifier_valid>
 8019360:	f080 0001 	eor.w	r0, r0, #1
 8019364:	b2c0      	uxtb	r0, r0
 8019366:	2800      	cmp	r0, #0
 8019368:	f040 80c2 	bne.w	80194f0 <rmw_create_publisher+0x1b0>
 801936c:	2d00      	cmp	r5, #0
 801936e:	f000 80bf 	beq.w	80194f0 <rmw_create_publisher+0x1b0>
 8019372:	782b      	ldrb	r3, [r5, #0]
 8019374:	2b00      	cmp	r3, #0
 8019376:	f000 80bb 	beq.w	80194f0 <rmw_create_publisher+0x1b0>
 801937a:	2f00      	cmp	r7, #0
 801937c:	f000 80b8 	beq.w	80194f0 <rmw_create_publisher+0x1b0>
 8019380:	485e      	ldr	r0, [pc, #376]	@ (80194fc <rmw_create_publisher+0x1bc>)
 8019382:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8019386:	f005 ff13 	bl	801f1b0 <get_memory>
 801938a:	2800      	cmp	r0, #0
 801938c:	f000 80b0 	beq.w	80194f0 <rmw_create_publisher+0x1b0>
 8019390:	6884      	ldr	r4, [r0, #8]
 8019392:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8019396:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 801939a:	f7ff fc4f 	bl	8018c3c <rmw_get_implementation_identifier>
 801939e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80193a2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80193a6:	4628      	mov	r0, r5
 80193a8:	f7e6 ffa4 	bl	80002f4 <strlen>
 80193ac:	3001      	adds	r0, #1
 80193ae:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 80193b2:	283c      	cmp	r0, #60	@ 0x3c
 80193b4:	f200 808f 	bhi.w	80194d6 <rmw_create_publisher+0x196>
 80193b8:	462b      	mov	r3, r5
 80193ba:	4a51      	ldr	r2, [pc, #324]	@ (8019500 <rmw_create_publisher+0x1c0>)
 80193bc:	213c      	movs	r1, #60	@ 0x3c
 80193be:	4650      	mov	r0, sl
 80193c0:	f007 f8fa 	bl	80205b8 <sniprintf>
 80193c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80193c8:	4639      	mov	r1, r7
 80193ca:	2250      	movs	r2, #80	@ 0x50
 80193cc:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80193ce:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80193d2:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80193d6:	f007 fb7c 	bl	8020ad2 <memcpy>
 80193da:	7a3b      	ldrb	r3, [r7, #8]
 80193dc:	4630      	mov	r0, r6
 80193de:	4949      	ldr	r1, [pc, #292]	@ (8019504 <rmw_create_publisher+0x1c4>)
 80193e0:	2b02      	cmp	r3, #2
 80193e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80193e6:	bf0c      	ite	eq
 80193e8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80193ec:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80193f0:	67a3      	str	r3, [r4, #120]	@ 0x78
 80193f2:	2300      	movs	r3, #0
 80193f4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80193f8:	f7fb f9ac 	bl	8014754 <get_message_typesupport_handle>
 80193fc:	2800      	cmp	r0, #0
 80193fe:	d06a      	beq.n	80194d6 <rmw_create_publisher+0x196>
 8019400:	6842      	ldr	r2, [r0, #4]
 8019402:	61a2      	str	r2, [r4, #24]
 8019404:	2a00      	cmp	r2, #0
 8019406:	d066      	beq.n	80194d6 <rmw_create_publisher+0x196>
 8019408:	4629      	mov	r1, r5
 801940a:	463b      	mov	r3, r7
 801940c:	4648      	mov	r0, r9
 801940e:	f005 ff1d 	bl	801f24c <create_topic>
 8019412:	6260      	str	r0, [r4, #36]	@ 0x24
 8019414:	2800      	cmp	r0, #0
 8019416:	d062      	beq.n	80194de <rmw_create_publisher+0x19e>
 8019418:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801941c:	2103      	movs	r1, #3
 801941e:	2506      	movs	r5, #6
 8019420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019424:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8019428:	1c42      	adds	r2, r0, #1
 801942a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801942e:	f002 f8e9 	bl	801b604 <uxr_object_id>
 8019432:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8019436:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801943a:	6120      	str	r0, [r4, #16]
 801943c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8019440:	6910      	ldr	r0, [r2, #16]
 8019442:	9500      	str	r5, [sp, #0]
 8019444:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019448:	6819      	ldr	r1, [r3, #0]
 801944a:	6922      	ldr	r2, [r4, #16]
 801944c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8019450:	f001 fe92 	bl	801b178 <uxr_buffer_create_publisher_bin>
 8019454:	4602      	mov	r2, r0
 8019456:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801945a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801945e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019462:	f001 f98b 	bl	801a77c <run_xrce_session>
 8019466:	b3b0      	cbz	r0, 80194d6 <rmw_create_publisher+0x196>
 8019468:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801946c:	2105      	movs	r1, #5
 801946e:	f10d 0a10 	add.w	sl, sp, #16
 8019472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019476:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 801947a:	1c42      	adds	r2, r0, #1
 801947c:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8019480:	f002 f8c0 	bl	801b604 <uxr_object_id>
 8019484:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8019488:	4639      	mov	r1, r7
 801948a:	6160      	str	r0, [r4, #20]
 801948c:	691e      	ldr	r6, [r3, #16]
 801948e:	4650      	mov	r0, sl
 8019490:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019494:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8019498:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 801949c:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 80194a0:	f001 f988 	bl	801a7b4 <convert_qos_profile>
 80194a4:	9503      	str	r5, [sp, #12]
 80194a6:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80194aa:	9001      	str	r0, [sp, #4]
 80194ac:	4630      	mov	r0, r6
 80194ae:	f8ad 1008 	strh.w	r1, [sp, #8]
 80194b2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80194b6:	9300      	str	r3, [sp, #0]
 80194b8:	6839      	ldr	r1, [r7, #0]
 80194ba:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80194be:	f001 febb 	bl	801b238 <uxr_buffer_create_datawriter_bin>
 80194c2:	4602      	mov	r2, r0
 80194c4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80194c8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80194cc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80194d0:	f001 f954 	bl	801a77c <run_xrce_session>
 80194d4:	b970      	cbnz	r0, 80194f4 <rmw_create_publisher+0x1b4>
 80194d6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80194d8:	b108      	cbz	r0, 80194de <rmw_create_publisher+0x19e>
 80194da:	f001 f843 	bl	801a564 <rmw_uxrce_fini_topic_memory>
 80194de:	4640      	mov	r0, r8
 80194e0:	f04f 0800 	mov.w	r8, #0
 80194e4:	f000 ffe6 	bl	801a4b4 <rmw_uxrce_fini_publisher_memory>
 80194e8:	4640      	mov	r0, r8
 80194ea:	b007      	add	sp, #28
 80194ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194f0:	f04f 0800 	mov.w	r8, #0
 80194f4:	4640      	mov	r0, r8
 80194f6:	b007      	add	sp, #28
 80194f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194fc:	2406936c 	.word	0x2406936c
 8019500:	08023a74 	.word	0x08023a74
 8019504:	08021bb4 	.word	0x08021bb4

08019508 <rmw_publisher_get_actual_qos>:
 8019508:	b178      	cbz	r0, 801952a <rmw_publisher_get_actual_qos+0x22>
 801950a:	b510      	push	{r4, lr}
 801950c:	fab1 f481 	clz	r4, r1
 8019510:	0964      	lsrs	r4, r4, #5
 8019512:	b141      	cbz	r1, 8019526 <rmw_publisher_get_actual_qos+0x1e>
 8019514:	6843      	ldr	r3, [r0, #4]
 8019516:	2250      	movs	r2, #80	@ 0x50
 8019518:	4608      	mov	r0, r1
 801951a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801951e:	f007 fad8 	bl	8020ad2 <memcpy>
 8019522:	4620      	mov	r0, r4
 8019524:	bd10      	pop	{r4, pc}
 8019526:	200b      	movs	r0, #11
 8019528:	bd10      	pop	{r4, pc}
 801952a:	200b      	movs	r0, #11
 801952c:	4770      	bx	lr
 801952e:	bf00      	nop

08019530 <rmw_destroy_publisher>:
 8019530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019534:	b128      	cbz	r0, 8019542 <rmw_destroy_publisher+0x12>
 8019536:	4604      	mov	r4, r0
 8019538:	6800      	ldr	r0, [r0, #0]
 801953a:	460d      	mov	r5, r1
 801953c:	f001 fa30 	bl	801a9a0 <is_uxrce_rmw_identifier_valid>
 8019540:	b918      	cbnz	r0, 801954a <rmw_destroy_publisher+0x1a>
 8019542:	2401      	movs	r4, #1
 8019544:	4620      	mov	r0, r4
 8019546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801954a:	6863      	ldr	r3, [r4, #4]
 801954c:	2b00      	cmp	r3, #0
 801954e:	d0f8      	beq.n	8019542 <rmw_destroy_publisher+0x12>
 8019550:	fab5 f485 	clz	r4, r5
 8019554:	0964      	lsrs	r4, r4, #5
 8019556:	2d00      	cmp	r5, #0
 8019558:	d0f3      	beq.n	8019542 <rmw_destroy_publisher+0x12>
 801955a:	6828      	ldr	r0, [r5, #0]
 801955c:	f001 fa20 	bl	801a9a0 <is_uxrce_rmw_identifier_valid>
 8019560:	2800      	cmp	r0, #0
 8019562:	d0ee      	beq.n	8019542 <rmw_destroy_publisher+0x12>
 8019564:	686e      	ldr	r6, [r5, #4]
 8019566:	2e00      	cmp	r6, #0
 8019568:	d0eb      	beq.n	8019542 <rmw_destroy_publisher+0x12>
 801956a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 801956c:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8019570:	f005 febc 	bl	801f2ec <destroy_topic>
 8019574:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8019578:	6972      	ldr	r2, [r6, #20]
 801957a:	6918      	ldr	r0, [r3, #16]
 801957c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019580:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019584:	6819      	ldr	r1, [r3, #0]
 8019586:	f001 fd43 	bl	801b010 <uxr_buffer_delete_entity>
 801958a:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801958e:	4680      	mov	r8, r0
 8019590:	6932      	ldr	r2, [r6, #16]
 8019592:	6918      	ldr	r0, [r3, #16]
 8019594:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019598:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801959c:	6819      	ldr	r1, [r3, #0]
 801959e:	f001 fd37 	bl	801b010 <uxr_buffer_delete_entity>
 80195a2:	4606      	mov	r6, r0
 80195a4:	6938      	ldr	r0, [r7, #16]
 80195a6:	4642      	mov	r2, r8
 80195a8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80195ac:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80195b0:	f001 f8e4 	bl	801a77c <run_xrce_session>
 80195b4:	693f      	ldr	r7, [r7, #16]
 80195b6:	4632      	mov	r2, r6
 80195b8:	4606      	mov	r6, r0
 80195ba:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80195be:	4638      	mov	r0, r7
 80195c0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80195c4:	f001 f8da 	bl	801a77c <run_xrce_session>
 80195c8:	b126      	cbz	r6, 80195d4 <rmw_destroy_publisher+0xa4>
 80195ca:	b118      	cbz	r0, 80195d4 <rmw_destroy_publisher+0xa4>
 80195cc:	4628      	mov	r0, r5
 80195ce:	f000 ff71 	bl	801a4b4 <rmw_uxrce_fini_publisher_memory>
 80195d2:	e7b7      	b.n	8019544 <rmw_destroy_publisher+0x14>
 80195d4:	2402      	movs	r4, #2
 80195d6:	e7f9      	b.n	80195cc <rmw_destroy_publisher+0x9c>

080195d8 <rmw_send_request>:
 80195d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80195dc:	4604      	mov	r4, r0
 80195de:	6800      	ldr	r0, [r0, #0]
 80195e0:	b08b      	sub	sp, #44	@ 0x2c
 80195e2:	460e      	mov	r6, r1
 80195e4:	4615      	mov	r5, r2
 80195e6:	b128      	cbz	r0, 80195f4 <rmw_send_request+0x1c>
 80195e8:	4b21      	ldr	r3, [pc, #132]	@ (8019670 <rmw_send_request+0x98>)
 80195ea:	6819      	ldr	r1, [r3, #0]
 80195ec:	f7e6 fe78 	bl	80002e0 <strcmp>
 80195f0:	2800      	cmp	r0, #0
 80195f2:	d139      	bne.n	8019668 <rmw_send_request+0x90>
 80195f4:	6864      	ldr	r4, [r4, #4]
 80195f6:	2700      	movs	r7, #0
 80195f8:	6963      	ldr	r3, [r4, #20]
 80195fa:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80195fe:	689b      	ldr	r3, [r3, #8]
 8019600:	4798      	blx	r3
 8019602:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8019606:	4630      	mov	r0, r6
 8019608:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801960c:	4798      	blx	r3
 801960e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019612:	9000      	str	r0, [sp, #0]
 8019614:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8019618:	6922      	ldr	r2, [r4, #16]
 801961a:	ab02      	add	r3, sp, #8
 801961c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801961e:	f004 f81b 	bl	801d658 <uxr_prepare_output_stream>
 8019622:	e9c5 0700 	strd	r0, r7, [r5]
 8019626:	b198      	cbz	r0, 8019650 <rmw_send_request+0x78>
 8019628:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801962c:	a902      	add	r1, sp, #8
 801962e:	4630      	mov	r0, r6
 8019630:	4798      	blx	r3
 8019632:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8019636:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801963a:	2b01      	cmp	r3, #1
 801963c:	d00c      	beq.n	8019658 <rmw_send_request+0x80>
 801963e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8019640:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019644:	f002 fe18 	bl	801c278 <uxr_run_session_until_confirm_delivery>
 8019648:	4638      	mov	r0, r7
 801964a:	b00b      	add	sp, #44	@ 0x2c
 801964c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019650:	2001      	movs	r0, #1
 8019652:	b00b      	add	sp, #44	@ 0x2c
 8019654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019658:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801965c:	f002 fa52 	bl	801bb04 <uxr_flash_output_streams>
 8019660:	4638      	mov	r0, r7
 8019662:	b00b      	add	sp, #44	@ 0x2c
 8019664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019668:	200c      	movs	r0, #12
 801966a:	b00b      	add	sp, #44	@ 0x2c
 801966c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019670:	08023da0 	.word	0x08023da0

08019674 <rmw_take_request>:
 8019674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019678:	4605      	mov	r5, r0
 801967a:	6800      	ldr	r0, [r0, #0]
 801967c:	b089      	sub	sp, #36	@ 0x24
 801967e:	460c      	mov	r4, r1
 8019680:	4690      	mov	r8, r2
 8019682:	461e      	mov	r6, r3
 8019684:	b128      	cbz	r0, 8019692 <rmw_take_request+0x1e>
 8019686:	4b28      	ldr	r3, [pc, #160]	@ (8019728 <rmw_take_request+0xb4>)
 8019688:	6819      	ldr	r1, [r3, #0]
 801968a:	f7e6 fe29 	bl	80002e0 <strcmp>
 801968e:	2800      	cmp	r0, #0
 8019690:	d146      	bne.n	8019720 <rmw_take_request+0xac>
 8019692:	b10e      	cbz	r6, 8019698 <rmw_take_request+0x24>
 8019694:	2300      	movs	r3, #0
 8019696:	7033      	strb	r3, [r6, #0]
 8019698:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801969c:	f000 fff0 	bl	801a680 <rmw_uxrce_clean_expired_static_input_buffer>
 80196a0:	4648      	mov	r0, r9
 80196a2:	f000 ffc5 	bl	801a630 <rmw_uxrce_find_static_input_buffer_by_owner>
 80196a6:	4607      	mov	r7, r0
 80196a8:	b3b0      	cbz	r0, 8019718 <rmw_take_request+0xa4>
 80196aa:	6885      	ldr	r5, [r0, #8]
 80196ac:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 80196b0:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 80196b4:	e9c4 3208 	strd	r3, r2, [r4, #32]
 80196b8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80196bc:	7423      	strb	r3, [r4, #16]
 80196be:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 80196c2:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 80196c6:	f8a4 2011 	strh.w	r2, [r4, #17]
 80196ca:	74e3      	strb	r3, [r4, #19]
 80196cc:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 80196d0:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 80196d4:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 80196d8:	6161      	str	r1, [r4, #20]
 80196da:	61a2      	str	r2, [r4, #24]
 80196dc:	61e3      	str	r3, [r4, #28]
 80196de:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80196e2:	689b      	ldr	r3, [r3, #8]
 80196e4:	4798      	blx	r3
 80196e6:	6844      	ldr	r4, [r0, #4]
 80196e8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80196ec:	f105 0110 	add.w	r1, r5, #16
 80196f0:	4668      	mov	r0, sp
 80196f2:	f7f9 ff27 	bl	8013544 <ucdr_init_buffer>
 80196f6:	4641      	mov	r1, r8
 80196f8:	68e3      	ldr	r3, [r4, #12]
 80196fa:	4668      	mov	r0, sp
 80196fc:	4798      	blx	r3
 80196fe:	4639      	mov	r1, r7
 8019700:	4604      	mov	r4, r0
 8019702:	480a      	ldr	r0, [pc, #40]	@ (801972c <rmw_take_request+0xb8>)
 8019704:	f005 fd64 	bl	801f1d0 <put_memory>
 8019708:	b106      	cbz	r6, 801970c <rmw_take_request+0x98>
 801970a:	7034      	strb	r4, [r6, #0]
 801970c:	f084 0001 	eor.w	r0, r4, #1
 8019710:	b2c0      	uxtb	r0, r0
 8019712:	b009      	add	sp, #36	@ 0x24
 8019714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019718:	2001      	movs	r0, #1
 801971a:	b009      	add	sp, #36	@ 0x24
 801971c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019720:	200c      	movs	r0, #12
 8019722:	b009      	add	sp, #36	@ 0x24
 8019724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019728:	08023da0 	.word	0x08023da0
 801972c:	2406939c 	.word	0x2406939c

08019730 <rmw_send_response>:
 8019730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019732:	4605      	mov	r5, r0
 8019734:	6800      	ldr	r0, [r0, #0]
 8019736:	b091      	sub	sp, #68	@ 0x44
 8019738:	460c      	mov	r4, r1
 801973a:	4616      	mov	r6, r2
 801973c:	b128      	cbz	r0, 801974a <rmw_send_response+0x1a>
 801973e:	4b29      	ldr	r3, [pc, #164]	@ (80197e4 <rmw_send_response+0xb4>)
 8019740:	6819      	ldr	r1, [r3, #0]
 8019742:	f7e6 fdcd 	bl	80002e0 <strcmp>
 8019746:	2800      	cmp	r0, #0
 8019748:	d141      	bne.n	80197ce <rmw_send_response+0x9e>
 801974a:	686d      	ldr	r5, [r5, #4]
 801974c:	68a1      	ldr	r1, [r4, #8]
 801974e:	6860      	ldr	r0, [r4, #4]
 8019750:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8019752:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8019756:	9307      	str	r3, [sp, #28]
 8019758:	4623      	mov	r3, r4
 801975a:	9206      	str	r2, [sp, #24]
 801975c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019760:	789b      	ldrb	r3, [r3, #2]
 8019762:	f88d 2017 	strb.w	r2, [sp, #23]
 8019766:	f88d 3016 	strb.w	r3, [sp, #22]
 801976a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801976e:	68e2      	ldr	r2, [r4, #12]
 8019770:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019774:	ab02      	add	r3, sp, #8
 8019776:	696c      	ldr	r4, [r5, #20]
 8019778:	c307      	stmia	r3!, {r0, r1, r2}
 801977a:	68e3      	ldr	r3, [r4, #12]
 801977c:	4798      	blx	r3
 801977e:	6844      	ldr	r4, [r0, #4]
 8019780:	4630      	mov	r0, r6
 8019782:	6923      	ldr	r3, [r4, #16]
 8019784:	4798      	blx	r3
 8019786:	f100 0318 	add.w	r3, r0, #24
 801978a:	6938      	ldr	r0, [r7, #16]
 801978c:	9300      	str	r3, [sp, #0]
 801978e:	ab08      	add	r3, sp, #32
 8019790:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019794:	692a      	ldr	r2, [r5, #16]
 8019796:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8019798:	f003 ff5e 	bl	801d658 <uxr_prepare_output_stream>
 801979c:	b910      	cbnz	r0, 80197a4 <rmw_send_response+0x74>
 801979e:	2001      	movs	r0, #1
 80197a0:	b011      	add	sp, #68	@ 0x44
 80197a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197a4:	a902      	add	r1, sp, #8
 80197a6:	a808      	add	r0, sp, #32
 80197a8:	f004 fff8 	bl	801e79c <uxr_serialize_SampleIdentity>
 80197ac:	68a3      	ldr	r3, [r4, #8]
 80197ae:	a908      	add	r1, sp, #32
 80197b0:	4630      	mov	r0, r6
 80197b2:	4798      	blx	r3
 80197b4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80197b8:	6938      	ldr	r0, [r7, #16]
 80197ba:	2b01      	cmp	r3, #1
 80197bc:	d00a      	beq.n	80197d4 <rmw_send_response+0xa4>
 80197be:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80197c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80197c4:	f002 fd58 	bl	801c278 <uxr_run_session_until_confirm_delivery>
 80197c8:	2000      	movs	r0, #0
 80197ca:	b011      	add	sp, #68	@ 0x44
 80197cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197ce:	200c      	movs	r0, #12
 80197d0:	b011      	add	sp, #68	@ 0x44
 80197d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80197d8:	f002 f994 	bl	801bb04 <uxr_flash_output_streams>
 80197dc:	2000      	movs	r0, #0
 80197de:	b011      	add	sp, #68	@ 0x44
 80197e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197e2:	bf00      	nop
 80197e4:	08023da0 	.word	0x08023da0

080197e8 <rmw_take_response>:
 80197e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197ec:	4604      	mov	r4, r0
 80197ee:	6800      	ldr	r0, [r0, #0]
 80197f0:	b088      	sub	sp, #32
 80197f2:	460f      	mov	r7, r1
 80197f4:	4690      	mov	r8, r2
 80197f6:	461d      	mov	r5, r3
 80197f8:	b120      	cbz	r0, 8019804 <rmw_take_response+0x1c>
 80197fa:	4b1d      	ldr	r3, [pc, #116]	@ (8019870 <rmw_take_response+0x88>)
 80197fc:	6819      	ldr	r1, [r3, #0]
 80197fe:	f7e6 fd6f 	bl	80002e0 <strcmp>
 8019802:	bb68      	cbnz	r0, 8019860 <rmw_take_response+0x78>
 8019804:	b10d      	cbz	r5, 801980a <rmw_take_response+0x22>
 8019806:	2300      	movs	r3, #0
 8019808:	702b      	strb	r3, [r5, #0]
 801980a:	6864      	ldr	r4, [r4, #4]
 801980c:	f000 ff38 	bl	801a680 <rmw_uxrce_clean_expired_static_input_buffer>
 8019810:	4620      	mov	r0, r4
 8019812:	f000 ff0d 	bl	801a630 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019816:	4606      	mov	r6, r0
 8019818:	b330      	cbz	r0, 8019868 <rmw_take_response+0x80>
 801981a:	6963      	ldr	r3, [r4, #20]
 801981c:	6884      	ldr	r4, [r0, #8]
 801981e:	68db      	ldr	r3, [r3, #12]
 8019820:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8019824:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8019828:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801982c:	4798      	blx	r3
 801982e:	6847      	ldr	r7, [r0, #4]
 8019830:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8019834:	f104 0110 	add.w	r1, r4, #16
 8019838:	4668      	mov	r0, sp
 801983a:	f7f9 fe83 	bl	8013544 <ucdr_init_buffer>
 801983e:	4641      	mov	r1, r8
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	4668      	mov	r0, sp
 8019844:	4798      	blx	r3
 8019846:	4631      	mov	r1, r6
 8019848:	4604      	mov	r4, r0
 801984a:	480a      	ldr	r0, [pc, #40]	@ (8019874 <rmw_take_response+0x8c>)
 801984c:	f005 fcc0 	bl	801f1d0 <put_memory>
 8019850:	b105      	cbz	r5, 8019854 <rmw_take_response+0x6c>
 8019852:	702c      	strb	r4, [r5, #0]
 8019854:	f084 0001 	eor.w	r0, r4, #1
 8019858:	b2c0      	uxtb	r0, r0
 801985a:	b008      	add	sp, #32
 801985c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019860:	200c      	movs	r0, #12
 8019862:	b008      	add	sp, #32
 8019864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019868:	2001      	movs	r0, #1
 801986a:	b008      	add	sp, #32
 801986c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019870:	08023da0 	.word	0x08023da0
 8019874:	2406939c 	.word	0x2406939c

08019878 <rmw_create_service>:
 8019878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801987c:	b091      	sub	sp, #68	@ 0x44
 801987e:	2900      	cmp	r1, #0
 8019880:	f000 80bb 	beq.w	80199fa <rmw_create_service+0x182>
 8019884:	4606      	mov	r6, r0
 8019886:	2800      	cmp	r0, #0
 8019888:	f000 80b7 	beq.w	80199fa <rmw_create_service+0x182>
 801988c:	4614      	mov	r4, r2
 801988e:	6800      	ldr	r0, [r0, #0]
 8019890:	4689      	mov	r9, r1
 8019892:	461d      	mov	r5, r3
 8019894:	f001 f884 	bl	801a9a0 <is_uxrce_rmw_identifier_valid>
 8019898:	2c00      	cmp	r4, #0
 801989a:	f000 80ae 	beq.w	80199fa <rmw_create_service+0x182>
 801989e:	f080 0001 	eor.w	r0, r0, #1
 80198a2:	b2c0      	uxtb	r0, r0
 80198a4:	2800      	cmp	r0, #0
 80198a6:	f040 80a8 	bne.w	80199fa <rmw_create_service+0x182>
 80198aa:	7823      	ldrb	r3, [r4, #0]
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	f000 80a4 	beq.w	80199fa <rmw_create_service+0x182>
 80198b2:	2d00      	cmp	r5, #0
 80198b4:	f000 80a1 	beq.w	80199fa <rmw_create_service+0x182>
 80198b8:	4856      	ldr	r0, [pc, #344]	@ (8019a14 <rmw_create_service+0x19c>)
 80198ba:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80198be:	f005 fc77 	bl	801f1b0 <get_memory>
 80198c2:	4606      	mov	r6, r0
 80198c4:	2800      	cmp	r0, #0
 80198c6:	f000 8099 	beq.w	80199fc <rmw_create_service+0x184>
 80198ca:	6887      	ldr	r7, [r0, #8]
 80198cc:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 80198d0:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80198d4:	f7ff f9b2 	bl	8018c3c <rmw_get_implementation_identifier>
 80198d8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80198da:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80198de:	4620      	mov	r0, r4
 80198e0:	f7e6 fd08 	bl	80002f4 <strlen>
 80198e4:	1c42      	adds	r2, r0, #1
 80198e6:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 80198ea:	2a3c      	cmp	r2, #60	@ 0x3c
 80198ec:	f200 808a 	bhi.w	8019a04 <rmw_create_service+0x18c>
 80198f0:	4621      	mov	r1, r4
 80198f2:	4650      	mov	r0, sl
 80198f4:	f007 f8ed 	bl	8020ad2 <memcpy>
 80198f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80198fc:	4629      	mov	r1, r5
 80198fe:	2250      	movs	r2, #80	@ 0x50
 8019900:	f107 0020 	add.w	r0, r7, #32
 8019904:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 8019908:	677b      	str	r3, [r7, #116]	@ 0x74
 801990a:	f007 f8e2 	bl	8020ad2 <memcpy>
 801990e:	4648      	mov	r0, r9
 8019910:	4941      	ldr	r1, [pc, #260]	@ (8019a18 <rmw_create_service+0x1a0>)
 8019912:	f7fa ff2b 	bl	801476c <get_service_typesupport_handle>
 8019916:	2800      	cmp	r0, #0
 8019918:	d074      	beq.n	8019a04 <rmw_create_service+0x18c>
 801991a:	6843      	ldr	r3, [r0, #4]
 801991c:	617b      	str	r3, [r7, #20]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d070      	beq.n	8019a04 <rmw_create_service+0x18c>
 8019922:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019926:	2108      	movs	r1, #8
 8019928:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 8019a20 <rmw_create_service+0x1a8>
 801992c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019930:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8019a24 <rmw_create_service+0x1ac>
 8019934:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 8019938:	1c42      	adds	r2, r0, #1
 801993a:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801993e:	f001 fe61 	bl	801b604 <uxr_object_id>
 8019942:	2364      	movs	r3, #100	@ 0x64
 8019944:	6138      	str	r0, [r7, #16]
 8019946:	4652      	mov	r2, sl
 8019948:	4649      	mov	r1, r9
 801994a:	6978      	ldr	r0, [r7, #20]
 801994c:	f000 ff7c 	bl	801a848 <generate_service_types>
 8019950:	2800      	cmp	r0, #0
 8019952:	d057      	beq.n	8019a04 <rmw_create_service+0x18c>
 8019954:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 8019a28 <rmw_create_service+0x1b0>
 8019958:	233c      	movs	r3, #60	@ 0x3c
 801995a:	4a30      	ldr	r2, [pc, #192]	@ (8019a1c <rmw_create_service+0x1a4>)
 801995c:	4620      	mov	r0, r4
 801995e:	4659      	mov	r1, fp
 8019960:	f000 ff40 	bl	801a7e4 <generate_service_topics>
 8019964:	2800      	cmp	r0, #0
 8019966:	d04d      	beq.n	8019a04 <rmw_create_service+0x18c>
 8019968:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801996c:	a80c      	add	r0, sp, #48	@ 0x30
 801996e:	4629      	mov	r1, r5
 8019970:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8019974:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019978:	f000 ff1c 	bl	801a7b4 <convert_qos_profile>
 801997c:	4a27      	ldr	r2, [pc, #156]	@ (8019a1c <rmw_create_service+0x1a4>)
 801997e:	a80c      	add	r0, sp, #48	@ 0x30
 8019980:	9400      	str	r4, [sp, #0]
 8019982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019984:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019988:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801998c:	c803      	ldmia	r0, {r0, r1}
 801998e:	9a08      	ldr	r2, [sp, #32]
 8019990:	9005      	str	r0, [sp, #20]
 8019992:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8019996:	2306      	movs	r3, #6
 8019998:	f8ad 1018 	strh.w	r1, [sp, #24]
 801999c:	9307      	str	r3, [sp, #28]
 801999e:	6811      	ldr	r1, [r2, #0]
 80199a0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80199a4:	693a      	ldr	r2, [r7, #16]
 80199a6:	f001 fd35 	bl	801b414 <uxr_buffer_create_replier_bin>
 80199aa:	4602      	mov	r2, r0
 80199ac:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80199b0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80199b4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80199b8:	f000 fee0 	bl	801a77c <run_xrce_session>
 80199bc:	b310      	cbz	r0, 8019a04 <rmw_create_service+0x18c>
 80199be:	7a2b      	ldrb	r3, [r5, #8]
 80199c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80199c4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80199c8:	2b02      	cmp	r3, #2
 80199ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80199cc:	f04f 0200 	mov.w	r2, #0
 80199d0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80199d2:	bf0c      	ite	eq
 80199d4:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 80199d8:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 80199dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80199e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80199e2:	ab0e      	add	r3, sp, #56	@ 0x38
 80199e4:	673a      	str	r2, [r7, #112]	@ 0x70
 80199e6:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 80199ea:	9300      	str	r3, [sp, #0]
 80199ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80199ee:	6811      	ldr	r1, [r2, #0]
 80199f0:	693a      	ldr	r2, [r7, #16]
 80199f2:	f001 fe37 	bl	801b664 <uxr_buffer_request_data>
 80199f6:	8338      	strh	r0, [r7, #24]
 80199f8:	e000      	b.n	80199fc <rmw_create_service+0x184>
 80199fa:	2600      	movs	r6, #0
 80199fc:	4630      	mov	r0, r6
 80199fe:	b011      	add	sp, #68	@ 0x44
 8019a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a04:	4630      	mov	r0, r6
 8019a06:	2600      	movs	r6, #0
 8019a08:	f000 fd80 	bl	801a50c <rmw_uxrce_fini_service_memory>
 8019a0c:	4630      	mov	r0, r6
 8019a0e:	b011      	add	sp, #68	@ 0x44
 8019a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a14:	2406937c 	.word	0x2406937c
 8019a18:	08021bb4 	.word	0x08021bb4
 8019a1c:	240649f0 	.word	0x240649f0
 8019a20:	24064a2c 	.word	0x24064a2c
 8019a24:	2406498c 	.word	0x2406498c
 8019a28:	24064950 	.word	0x24064950

08019a2c <rmw_destroy_service>:
 8019a2c:	b570      	push	{r4, r5, r6, lr}
 8019a2e:	b128      	cbz	r0, 8019a3c <rmw_destroy_service+0x10>
 8019a30:	4604      	mov	r4, r0
 8019a32:	6800      	ldr	r0, [r0, #0]
 8019a34:	460d      	mov	r5, r1
 8019a36:	f000 ffb3 	bl	801a9a0 <is_uxrce_rmw_identifier_valid>
 8019a3a:	b910      	cbnz	r0, 8019a42 <rmw_destroy_service+0x16>
 8019a3c:	2401      	movs	r4, #1
 8019a3e:	4620      	mov	r0, r4
 8019a40:	bd70      	pop	{r4, r5, r6, pc}
 8019a42:	6863      	ldr	r3, [r4, #4]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d0f9      	beq.n	8019a3c <rmw_destroy_service+0x10>
 8019a48:	2d00      	cmp	r5, #0
 8019a4a:	d0f7      	beq.n	8019a3c <rmw_destroy_service+0x10>
 8019a4c:	6828      	ldr	r0, [r5, #0]
 8019a4e:	f000 ffa7 	bl	801a9a0 <is_uxrce_rmw_identifier_valid>
 8019a52:	2800      	cmp	r0, #0
 8019a54:	d0f2      	beq.n	8019a3c <rmw_destroy_service+0x10>
 8019a56:	686e      	ldr	r6, [r5, #4]
 8019a58:	2e00      	cmp	r6, #0
 8019a5a:	d0ef      	beq.n	8019a3c <rmw_destroy_service+0x10>
 8019a5c:	6864      	ldr	r4, [r4, #4]
 8019a5e:	6932      	ldr	r2, [r6, #16]
 8019a60:	6920      	ldr	r0, [r4, #16]
 8019a62:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019a66:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019a6a:	6819      	ldr	r1, [r3, #0]
 8019a6c:	f001 fe34 	bl	801b6d8 <uxr_buffer_cancel_data>
 8019a70:	4602      	mov	r2, r0
 8019a72:	6920      	ldr	r0, [r4, #16]
 8019a74:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019a78:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019a7c:	f000 fe7e 	bl	801a77c <run_xrce_session>
 8019a80:	6920      	ldr	r0, [r4, #16]
 8019a82:	6932      	ldr	r2, [r6, #16]
 8019a84:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019a88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019a8c:	6819      	ldr	r1, [r3, #0]
 8019a8e:	f001 fabf 	bl	801b010 <uxr_buffer_delete_entity>
 8019a92:	4602      	mov	r2, r0
 8019a94:	6920      	ldr	r0, [r4, #16]
 8019a96:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019a9a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019a9e:	f000 fe6d 	bl	801a77c <run_xrce_session>
 8019aa2:	4603      	mov	r3, r0
 8019aa4:	4628      	mov	r0, r5
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	bf14      	ite	ne
 8019aaa:	2400      	movne	r4, #0
 8019aac:	2402      	moveq	r4, #2
 8019aae:	f000 fd2d 	bl	801a50c <rmw_uxrce_fini_service_memory>
 8019ab2:	e7c4      	b.n	8019a3e <rmw_destroy_service+0x12>

08019ab4 <rmw_service_response_publisher_get_actual_qos>:
 8019ab4:	b181      	cbz	r1, 8019ad8 <rmw_service_response_publisher_get_actual_qos+0x24>
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	b510      	push	{r4, lr}
 8019aba:	fab0 f480 	clz	r4, r0
 8019abe:	0964      	lsrs	r4, r4, #5
 8019ac0:	b140      	cbz	r0, 8019ad4 <rmw_service_response_publisher_get_actual_qos+0x20>
 8019ac2:	685b      	ldr	r3, [r3, #4]
 8019ac4:	4608      	mov	r0, r1
 8019ac6:	2250      	movs	r2, #80	@ 0x50
 8019ac8:	f103 0120 	add.w	r1, r3, #32
 8019acc:	f007 f801 	bl	8020ad2 <memcpy>
 8019ad0:	4620      	mov	r0, r4
 8019ad2:	bd10      	pop	{r4, pc}
 8019ad4:	200b      	movs	r0, #11
 8019ad6:	bd10      	pop	{r4, pc}
 8019ad8:	200b      	movs	r0, #11
 8019ada:	4770      	bx	lr

08019adc <rmw_service_request_subscription_get_actual_qos>:
 8019adc:	b178      	cbz	r0, 8019afe <rmw_service_request_subscription_get_actual_qos+0x22>
 8019ade:	b510      	push	{r4, lr}
 8019ae0:	fab1 f481 	clz	r4, r1
 8019ae4:	0964      	lsrs	r4, r4, #5
 8019ae6:	b141      	cbz	r1, 8019afa <rmw_service_request_subscription_get_actual_qos+0x1e>
 8019ae8:	6843      	ldr	r3, [r0, #4]
 8019aea:	2250      	movs	r2, #80	@ 0x50
 8019aec:	4608      	mov	r0, r1
 8019aee:	f103 0120 	add.w	r1, r3, #32
 8019af2:	f006 ffee 	bl	8020ad2 <memcpy>
 8019af6:	4620      	mov	r0, r4
 8019af8:	bd10      	pop	{r4, pc}
 8019afa:	200b      	movs	r0, #11
 8019afc:	bd10      	pop	{r4, pc}
 8019afe:	200b      	movs	r0, #11
 8019b00:	4770      	bx	lr
 8019b02:	bf00      	nop

08019b04 <rmw_create_subscription>:
 8019b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b08:	b08d      	sub	sp, #52	@ 0x34
 8019b0a:	2900      	cmp	r1, #0
 8019b0c:	f000 80d8 	beq.w	8019cc0 <rmw_create_subscription+0x1bc>
 8019b10:	4604      	mov	r4, r0
 8019b12:	2800      	cmp	r0, #0
 8019b14:	f000 80d4 	beq.w	8019cc0 <rmw_create_subscription+0x1bc>
 8019b18:	6800      	ldr	r0, [r0, #0]
 8019b1a:	460e      	mov	r6, r1
 8019b1c:	4615      	mov	r5, r2
 8019b1e:	461f      	mov	r7, r3
 8019b20:	f000 ff3e 	bl	801a9a0 <is_uxrce_rmw_identifier_valid>
 8019b24:	f080 0001 	eor.w	r0, r0, #1
 8019b28:	b2c0      	uxtb	r0, r0
 8019b2a:	2800      	cmp	r0, #0
 8019b2c:	f040 80c8 	bne.w	8019cc0 <rmw_create_subscription+0x1bc>
 8019b30:	2d00      	cmp	r5, #0
 8019b32:	f000 80c5 	beq.w	8019cc0 <rmw_create_subscription+0x1bc>
 8019b36:	782b      	ldrb	r3, [r5, #0]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	f000 80c1 	beq.w	8019cc0 <rmw_create_subscription+0x1bc>
 8019b3e:	2f00      	cmp	r7, #0
 8019b40:	f000 80be 	beq.w	8019cc0 <rmw_create_subscription+0x1bc>
 8019b44:	4867      	ldr	r0, [pc, #412]	@ (8019ce4 <rmw_create_subscription+0x1e0>)
 8019b46:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8019b4a:	f005 fb31 	bl	801f1b0 <get_memory>
 8019b4e:	4604      	mov	r4, r0
 8019b50:	2800      	cmp	r0, #0
 8019b52:	f000 80b6 	beq.w	8019cc2 <rmw_create_subscription+0x1be>
 8019b56:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019b5a:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 8019b5e:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 8019b62:	f7ff f86b 	bl	8018c3c <rmw_get_implementation_identifier>
 8019b66:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 8019b6a:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 8019b6e:	4628      	mov	r0, r5
 8019b70:	f7e6 fbc0 	bl	80002f4 <strlen>
 8019b74:	3001      	adds	r0, #1
 8019b76:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 8019b7a:	283c      	cmp	r0, #60	@ 0x3c
 8019b7c:	f200 80a5 	bhi.w	8019cca <rmw_create_subscription+0x1c6>
 8019b80:	462b      	mov	r3, r5
 8019b82:	4a59      	ldr	r2, [pc, #356]	@ (8019ce8 <rmw_create_subscription+0x1e4>)
 8019b84:	213c      	movs	r1, #60	@ 0x3c
 8019b86:	4650      	mov	r0, sl
 8019b88:	f006 fd16 	bl	80205b8 <sniprintf>
 8019b8c:	4639      	mov	r1, r7
 8019b8e:	2250      	movs	r2, #80	@ 0x50
 8019b90:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8019b94:	f8c8 9020 	str.w	r9, [r8, #32]
 8019b98:	f006 ff9b 	bl	8020ad2 <memcpy>
 8019b9c:	4630      	mov	r0, r6
 8019b9e:	4953      	ldr	r1, [pc, #332]	@ (8019cec <rmw_create_subscription+0x1e8>)
 8019ba0:	f7fa fdd8 	bl	8014754 <get_message_typesupport_handle>
 8019ba4:	2800      	cmp	r0, #0
 8019ba6:	f000 8090 	beq.w	8019cca <rmw_create_subscription+0x1c6>
 8019baa:	6842      	ldr	r2, [r0, #4]
 8019bac:	f8c8 2018 	str.w	r2, [r8, #24]
 8019bb0:	2a00      	cmp	r2, #0
 8019bb2:	f000 808a 	beq.w	8019cca <rmw_create_subscription+0x1c6>
 8019bb6:	4629      	mov	r1, r5
 8019bb8:	463b      	mov	r3, r7
 8019bba:	4648      	mov	r0, r9
 8019bbc:	f005 fb46 	bl	801f24c <create_topic>
 8019bc0:	f8c8 001c 	str.w	r0, [r8, #28]
 8019bc4:	2800      	cmp	r0, #0
 8019bc6:	f000 8085 	beq.w	8019cd4 <rmw_create_subscription+0x1d0>
 8019bca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019bce:	2104      	movs	r1, #4
 8019bd0:	2506      	movs	r5, #6
 8019bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019bd6:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8019bda:	1c42      	adds	r2, r0, #1
 8019bdc:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8019be0:	f001 fd10 	bl	801b604 <uxr_object_id>
 8019be4:	f8c8 0010 	str.w	r0, [r8, #16]
 8019be8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019bec:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8019bf0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019bf4:	9500      	str	r5, [sp, #0]
 8019bf6:	6819      	ldr	r1, [r3, #0]
 8019bf8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019bfc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8019c00:	f001 faea 	bl	801b1d8 <uxr_buffer_create_subscriber_bin>
 8019c04:	4602      	mov	r2, r0
 8019c06:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019c0a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8019c0e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019c12:	f000 fdb3 	bl	801a77c <run_xrce_session>
 8019c16:	2800      	cmp	r0, #0
 8019c18:	d057      	beq.n	8019cca <rmw_create_subscription+0x1c6>
 8019c1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019c1e:	4629      	mov	r1, r5
 8019c20:	ae08      	add	r6, sp, #32
 8019c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019c26:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8019c2a:	1c42      	adds	r2, r0, #1
 8019c2c:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8019c30:	f001 fce8 	bl	801b604 <uxr_object_id>
 8019c34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019c38:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8019c3c:	4639      	mov	r1, r7
 8019c3e:	f8c8 0014 	str.w	r0, [r8, #20]
 8019c42:	4630      	mov	r0, r6
 8019c44:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8019c48:	9305      	str	r3, [sp, #20]
 8019c4a:	f000 fdb3 	bl	801a7b4 <convert_qos_profile>
 8019c4e:	9503      	str	r5, [sp, #12]
 8019c50:	9b05      	ldr	r3, [sp, #20]
 8019c52:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019c56:	9001      	str	r0, [sp, #4]
 8019c58:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8019c5c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8019c60:	691b      	ldr	r3, [r3, #16]
 8019c62:	9300      	str	r3, [sp, #0]
 8019c64:	f8db 1000 	ldr.w	r1, [fp]
 8019c68:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8019c6c:	f001 fb5a 	bl	801b324 <uxr_buffer_create_datareader_bin>
 8019c70:	4602      	mov	r2, r0
 8019c72:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019c76:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8019c7a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019c7e:	f000 fd7d 	bl	801a77c <run_xrce_session>
 8019c82:	b310      	cbz	r0, 8019cca <rmw_create_subscription+0x1c6>
 8019c84:	7a3b      	ldrb	r3, [r7, #8]
 8019c86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019c8a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019c8e:	2b02      	cmp	r3, #2
 8019c90:	920a      	str	r2, [sp, #40]	@ 0x28
 8019c92:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019c96:	f04f 0200 	mov.w	r2, #0
 8019c9a:	bf08      	it	eq
 8019c9c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8019ca0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019ca4:	bf18      	it	ne
 8019ca6:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 8019caa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019cac:	9307      	str	r3, [sp, #28]
 8019cae:	ab0a      	add	r3, sp, #40	@ 0x28
 8019cb0:	9300      	str	r3, [sp, #0]
 8019cb2:	9b07      	ldr	r3, [sp, #28]
 8019cb4:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8019cb8:	6809      	ldr	r1, [r1, #0]
 8019cba:	f001 fcd3 	bl	801b664 <uxr_buffer_request_data>
 8019cbe:	e000      	b.n	8019cc2 <rmw_create_subscription+0x1be>
 8019cc0:	2400      	movs	r4, #0
 8019cc2:	4620      	mov	r0, r4
 8019cc4:	b00d      	add	sp, #52	@ 0x34
 8019cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cca:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8019cce:	b108      	cbz	r0, 8019cd4 <rmw_create_subscription+0x1d0>
 8019cd0:	f000 fc48 	bl	801a564 <rmw_uxrce_fini_topic_memory>
 8019cd4:	4620      	mov	r0, r4
 8019cd6:	2400      	movs	r4, #0
 8019cd8:	f000 fc02 	bl	801a4e0 <rmw_uxrce_fini_subscription_memory>
 8019cdc:	4620      	mov	r0, r4
 8019cde:	b00d      	add	sp, #52	@ 0x34
 8019ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ce4:	240693ac 	.word	0x240693ac
 8019ce8:	08023a74 	.word	0x08023a74
 8019cec:	08021bb4 	.word	0x08021bb4

08019cf0 <rmw_subscription_get_actual_qos>:
 8019cf0:	b178      	cbz	r0, 8019d12 <rmw_subscription_get_actual_qos+0x22>
 8019cf2:	b510      	push	{r4, lr}
 8019cf4:	fab1 f481 	clz	r4, r1
 8019cf8:	0964      	lsrs	r4, r4, #5
 8019cfa:	b141      	cbz	r1, 8019d0e <rmw_subscription_get_actual_qos+0x1e>
 8019cfc:	6843      	ldr	r3, [r0, #4]
 8019cfe:	2250      	movs	r2, #80	@ 0x50
 8019d00:	4608      	mov	r0, r1
 8019d02:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8019d06:	f006 fee4 	bl	8020ad2 <memcpy>
 8019d0a:	4620      	mov	r0, r4
 8019d0c:	bd10      	pop	{r4, pc}
 8019d0e:	200b      	movs	r0, #11
 8019d10:	bd10      	pop	{r4, pc}
 8019d12:	200b      	movs	r0, #11
 8019d14:	4770      	bx	lr
 8019d16:	bf00      	nop

08019d18 <rmw_destroy_subscription>:
 8019d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d1c:	b128      	cbz	r0, 8019d2a <rmw_destroy_subscription+0x12>
 8019d1e:	4604      	mov	r4, r0
 8019d20:	6800      	ldr	r0, [r0, #0]
 8019d22:	460d      	mov	r5, r1
 8019d24:	f000 fe3c 	bl	801a9a0 <is_uxrce_rmw_identifier_valid>
 8019d28:	b918      	cbnz	r0, 8019d32 <rmw_destroy_subscription+0x1a>
 8019d2a:	2401      	movs	r4, #1
 8019d2c:	4620      	mov	r0, r4
 8019d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d32:	6863      	ldr	r3, [r4, #4]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d0f8      	beq.n	8019d2a <rmw_destroy_subscription+0x12>
 8019d38:	fab5 f485 	clz	r4, r5
 8019d3c:	0964      	lsrs	r4, r4, #5
 8019d3e:	2d00      	cmp	r5, #0
 8019d40:	d0f3      	beq.n	8019d2a <rmw_destroy_subscription+0x12>
 8019d42:	6828      	ldr	r0, [r5, #0]
 8019d44:	f000 fe2c 	bl	801a9a0 <is_uxrce_rmw_identifier_valid>
 8019d48:	2800      	cmp	r0, #0
 8019d4a:	d0ee      	beq.n	8019d2a <rmw_destroy_subscription+0x12>
 8019d4c:	686e      	ldr	r6, [r5, #4]
 8019d4e:	2e00      	cmp	r6, #0
 8019d50:	d0eb      	beq.n	8019d2a <rmw_destroy_subscription+0x12>
 8019d52:	6a37      	ldr	r7, [r6, #32]
 8019d54:	6972      	ldr	r2, [r6, #20]
 8019d56:	6938      	ldr	r0, [r7, #16]
 8019d58:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019d5c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019d60:	6819      	ldr	r1, [r3, #0]
 8019d62:	f001 fcb9 	bl	801b6d8 <uxr_buffer_cancel_data>
 8019d66:	4602      	mov	r2, r0
 8019d68:	6938      	ldr	r0, [r7, #16]
 8019d6a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019d6e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019d72:	f000 fd03 	bl	801a77c <run_xrce_session>
 8019d76:	69f0      	ldr	r0, [r6, #28]
 8019d78:	f005 fab8 	bl	801f2ec <destroy_topic>
 8019d7c:	6a33      	ldr	r3, [r6, #32]
 8019d7e:	6972      	ldr	r2, [r6, #20]
 8019d80:	6918      	ldr	r0, [r3, #16]
 8019d82:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019d86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019d8a:	6819      	ldr	r1, [r3, #0]
 8019d8c:	f001 f940 	bl	801b010 <uxr_buffer_delete_entity>
 8019d90:	6a33      	ldr	r3, [r6, #32]
 8019d92:	4680      	mov	r8, r0
 8019d94:	6932      	ldr	r2, [r6, #16]
 8019d96:	6918      	ldr	r0, [r3, #16]
 8019d98:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019d9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019da0:	6819      	ldr	r1, [r3, #0]
 8019da2:	f001 f935 	bl	801b010 <uxr_buffer_delete_entity>
 8019da6:	4606      	mov	r6, r0
 8019da8:	6938      	ldr	r0, [r7, #16]
 8019daa:	4642      	mov	r2, r8
 8019dac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019db0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019db4:	f000 fce2 	bl	801a77c <run_xrce_session>
 8019db8:	693f      	ldr	r7, [r7, #16]
 8019dba:	4632      	mov	r2, r6
 8019dbc:	4606      	mov	r6, r0
 8019dbe:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019dc2:	4638      	mov	r0, r7
 8019dc4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8019dc8:	f000 fcd8 	bl	801a77c <run_xrce_session>
 8019dcc:	b126      	cbz	r6, 8019dd8 <rmw_destroy_subscription+0xc0>
 8019dce:	b118      	cbz	r0, 8019dd8 <rmw_destroy_subscription+0xc0>
 8019dd0:	4628      	mov	r0, r5
 8019dd2:	f000 fb85 	bl	801a4e0 <rmw_uxrce_fini_subscription_memory>
 8019dd6:	e7a9      	b.n	8019d2c <rmw_destroy_subscription+0x14>
 8019dd8:	2402      	movs	r4, #2
 8019dda:	e7f9      	b.n	8019dd0 <rmw_destroy_subscription+0xb8>

08019ddc <rmw_take_with_info>:
 8019ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dde:	4604      	mov	r4, r0
 8019de0:	6800      	ldr	r0, [r0, #0]
 8019de2:	b089      	sub	sp, #36	@ 0x24
 8019de4:	460f      	mov	r7, r1
 8019de6:	4615      	mov	r5, r2
 8019de8:	b128      	cbz	r0, 8019df6 <rmw_take_with_info+0x1a>
 8019dea:	4b24      	ldr	r3, [pc, #144]	@ (8019e7c <rmw_take_with_info+0xa0>)
 8019dec:	6819      	ldr	r1, [r3, #0]
 8019dee:	f7e6 fa77 	bl	80002e0 <strcmp>
 8019df2:	2800      	cmp	r0, #0
 8019df4:	d13e      	bne.n	8019e74 <rmw_take_with_info+0x98>
 8019df6:	b305      	cbz	r5, 8019e3a <rmw_take_with_info+0x5e>
 8019df8:	2300      	movs	r3, #0
 8019dfa:	6864      	ldr	r4, [r4, #4]
 8019dfc:	702b      	strb	r3, [r5, #0]
 8019dfe:	f000 fc3f 	bl	801a680 <rmw_uxrce_clean_expired_static_input_buffer>
 8019e02:	4620      	mov	r0, r4
 8019e04:	f000 fc14 	bl	801a630 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019e08:	4606      	mov	r6, r0
 8019e0a:	b1f0      	cbz	r0, 8019e4a <rmw_take_with_info+0x6e>
 8019e0c:	6881      	ldr	r1, [r0, #8]
 8019e0e:	4668      	mov	r0, sp
 8019e10:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019e14:	3110      	adds	r1, #16
 8019e16:	f7f9 fb95 	bl	8013544 <ucdr_init_buffer>
 8019e1a:	69a3      	ldr	r3, [r4, #24]
 8019e1c:	4639      	mov	r1, r7
 8019e1e:	4668      	mov	r0, sp
 8019e20:	68db      	ldr	r3, [r3, #12]
 8019e22:	4798      	blx	r3
 8019e24:	4604      	mov	r4, r0
 8019e26:	4631      	mov	r1, r6
 8019e28:	4815      	ldr	r0, [pc, #84]	@ (8019e80 <rmw_take_with_info+0xa4>)
 8019e2a:	f005 f9d1 	bl	801f1d0 <put_memory>
 8019e2e:	702c      	strb	r4, [r5, #0]
 8019e30:	f084 0001 	eor.w	r0, r4, #1
 8019e34:	b2c0      	uxtb	r0, r0
 8019e36:	b009      	add	sp, #36	@ 0x24
 8019e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e3a:	6864      	ldr	r4, [r4, #4]
 8019e3c:	f000 fc20 	bl	801a680 <rmw_uxrce_clean_expired_static_input_buffer>
 8019e40:	4620      	mov	r0, r4
 8019e42:	f000 fbf5 	bl	801a630 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019e46:	4605      	mov	r5, r0
 8019e48:	b910      	cbnz	r0, 8019e50 <rmw_take_with_info+0x74>
 8019e4a:	2001      	movs	r0, #1
 8019e4c:	b009      	add	sp, #36	@ 0x24
 8019e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e50:	68a9      	ldr	r1, [r5, #8]
 8019e52:	4668      	mov	r0, sp
 8019e54:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019e58:	3110      	adds	r1, #16
 8019e5a:	f7f9 fb73 	bl	8013544 <ucdr_init_buffer>
 8019e5e:	69a3      	ldr	r3, [r4, #24]
 8019e60:	4639      	mov	r1, r7
 8019e62:	4668      	mov	r0, sp
 8019e64:	68db      	ldr	r3, [r3, #12]
 8019e66:	4798      	blx	r3
 8019e68:	4629      	mov	r1, r5
 8019e6a:	4604      	mov	r4, r0
 8019e6c:	4804      	ldr	r0, [pc, #16]	@ (8019e80 <rmw_take_with_info+0xa4>)
 8019e6e:	f005 f9af 	bl	801f1d0 <put_memory>
 8019e72:	e7dd      	b.n	8019e30 <rmw_take_with_info+0x54>
 8019e74:	200c      	movs	r0, #12
 8019e76:	b009      	add	sp, #36	@ 0x24
 8019e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e7a:	bf00      	nop
 8019e7c:	08023da0 	.word	0x08023da0
 8019e80:	2406939c 	.word	0x2406939c

08019e84 <rmw_uxrce_transport_init>:
 8019e84:	b508      	push	{r3, lr}
 8019e86:	b108      	cbz	r0, 8019e8c <rmw_uxrce_transport_init+0x8>
 8019e88:	f100 0210 	add.w	r2, r0, #16
 8019e8c:	b139      	cbz	r1, 8019e9e <rmw_uxrce_transport_init+0x1a>
 8019e8e:	6949      	ldr	r1, [r1, #20]
 8019e90:	4610      	mov	r0, r2
 8019e92:	f001 fb7f 	bl	801b594 <uxr_init_custom_transport>
 8019e96:	f080 0001 	eor.w	r0, r0, #1
 8019e9a:	b2c0      	uxtb	r0, r0
 8019e9c:	bd08      	pop	{r3, pc}
 8019e9e:	4b04      	ldr	r3, [pc, #16]	@ (8019eb0 <rmw_uxrce_transport_init+0x2c>)
 8019ea0:	4610      	mov	r0, r2
 8019ea2:	6859      	ldr	r1, [r3, #4]
 8019ea4:	f001 fb76 	bl	801b594 <uxr_init_custom_transport>
 8019ea8:	f080 0001 	eor.w	r0, r0, #1
 8019eac:	b2c0      	uxtb	r0, r0
 8019eae:	bd08      	pop	{r3, pc}
 8019eb0:	2406478c 	.word	0x2406478c

08019eb4 <rmw_wait>:
 8019eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019eb8:	4698      	mov	r8, r3
 8019eba:	ea40 0301 	orr.w	r3, r0, r1
 8019ebe:	b089      	sub	sp, #36	@ 0x24
 8019ec0:	ea48 0303 	orr.w	r3, r8, r3
 8019ec4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8019ec6:	4313      	orrs	r3, r2
 8019ec8:	f000 8106 	beq.w	801a0d8 <rmw_wait+0x224>
 8019ecc:	4605      	mov	r5, r0
 8019ece:	460e      	mov	r6, r1
 8019ed0:	4691      	mov	r9, r2
 8019ed2:	b16c      	cbz	r4, 8019ef0 <rmw_wait+0x3c>
 8019ed4:	4ba6      	ldr	r3, [pc, #664]	@ (801a170 <rmw_wait+0x2bc>)
 8019ed6:	af04      	add	r7, sp, #16
 8019ed8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019eda:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8019ede:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019ee2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019ee6:	f004 fff3 	bl	801eed0 <rmw_time_equal>
 8019eea:	2800      	cmp	r0, #0
 8019eec:	f000 810b 	beq.w	801a106 <rmw_wait+0x252>
 8019ef0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019ef4:	f000 fbc4 	bl	801a680 <rmw_uxrce_clean_expired_static_input_buffer>
 8019ef8:	4b9e      	ldr	r3, [pc, #632]	@ (801a174 <rmw_wait+0x2c0>)
 8019efa:	681c      	ldr	r4, [r3, #0]
 8019efc:	b14c      	cbz	r4, 8019f12 <rmw_wait+0x5e>
 8019efe:	4623      	mov	r3, r4
 8019f00:	2100      	movs	r1, #0
 8019f02:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8019f06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019f0a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d1f7      	bne.n	8019f02 <rmw_wait+0x4e>
 8019f12:	f1b9 0f00 	cmp.w	r9, #0
 8019f16:	d011      	beq.n	8019f3c <rmw_wait+0x88>
 8019f18:	f8d9 1000 	ldr.w	r1, [r9]
 8019f1c:	b171      	cbz	r1, 8019f3c <rmw_wait+0x88>
 8019f1e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8019f22:	2300      	movs	r3, #0
 8019f24:	2001      	movs	r0, #1
 8019f26:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019f2a:	3301      	adds	r3, #1
 8019f2c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019f2e:	4299      	cmp	r1, r3
 8019f30:	6912      	ldr	r2, [r2, #16]
 8019f32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019f36:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019f3a:	d1f4      	bne.n	8019f26 <rmw_wait+0x72>
 8019f3c:	f1b8 0f00 	cmp.w	r8, #0
 8019f40:	d011      	beq.n	8019f66 <rmw_wait+0xb2>
 8019f42:	f8d8 1000 	ldr.w	r1, [r8]
 8019f46:	b171      	cbz	r1, 8019f66 <rmw_wait+0xb2>
 8019f48:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8019f4c:	2300      	movs	r3, #0
 8019f4e:	2001      	movs	r0, #1
 8019f50:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019f54:	3301      	adds	r3, #1
 8019f56:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019f58:	4299      	cmp	r1, r3
 8019f5a:	6912      	ldr	r2, [r2, #16]
 8019f5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019f60:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019f64:	d1f4      	bne.n	8019f50 <rmw_wait+0x9c>
 8019f66:	b185      	cbz	r5, 8019f8a <rmw_wait+0xd6>
 8019f68:	6829      	ldr	r1, [r5, #0]
 8019f6a:	b171      	cbz	r1, 8019f8a <rmw_wait+0xd6>
 8019f6c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019f70:	2300      	movs	r3, #0
 8019f72:	2001      	movs	r0, #1
 8019f74:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019f78:	3301      	adds	r3, #1
 8019f7a:	6a12      	ldr	r2, [r2, #32]
 8019f7c:	4299      	cmp	r1, r3
 8019f7e:	6912      	ldr	r2, [r2, #16]
 8019f80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019f84:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019f88:	d1f4      	bne.n	8019f74 <rmw_wait+0xc0>
 8019f8a:	b344      	cbz	r4, 8019fde <rmw_wait+0x12a>
 8019f8c:	4622      	mov	r2, r4
 8019f8e:	2300      	movs	r3, #0
 8019f90:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019f94:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8019f98:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8019f9c:	440b      	add	r3, r1
 8019f9e:	b2db      	uxtb	r3, r3
 8019fa0:	2a00      	cmp	r2, #0
 8019fa2:	d1f5      	bne.n	8019f90 <rmw_wait+0xdc>
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d05f      	beq.n	801a068 <rmw_wait+0x1b4>
 8019fa8:	1c7a      	adds	r2, r7, #1
 8019faa:	d00d      	beq.n	8019fc8 <rmw_wait+0x114>
 8019fac:	ee07 7a90 	vmov	s15, r7
 8019fb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019fb4:	ee07 3a90 	vmov	s15, r3
 8019fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019fc0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019fc4:	ee17 7a90 	vmov	r7, s15
 8019fc8:	68a0      	ldr	r0, [r4, #8]
 8019fca:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8019fce:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	f040 808d 	bne.w	801a0f2 <rmw_wait+0x23e>
 8019fd8:	6864      	ldr	r4, [r4, #4]
 8019fda:	2c00      	cmp	r4, #0
 8019fdc:	d1f4      	bne.n	8019fc8 <rmw_wait+0x114>
 8019fde:	f1b9 0f00 	cmp.w	r9, #0
 8019fe2:	f000 80a1 	beq.w	801a128 <rmw_wait+0x274>
 8019fe6:	f8d9 7000 	ldr.w	r7, [r9]
 8019fea:	2f00      	cmp	r7, #0
 8019fec:	f000 80a4 	beq.w	801a138 <rmw_wait+0x284>
 8019ff0:	2400      	movs	r4, #0
 8019ff2:	4627      	mov	r7, r4
 8019ff4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019ff8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019ffc:	f000 fb18 	bl	801a630 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a000:	2800      	cmp	r0, #0
 801a002:	d03b      	beq.n	801a07c <rmw_wait+0x1c8>
 801a004:	3401      	adds	r4, #1
 801a006:	f8d9 3000 	ldr.w	r3, [r9]
 801a00a:	2701      	movs	r7, #1
 801a00c:	42a3      	cmp	r3, r4
 801a00e:	d8f1      	bhi.n	8019ff4 <rmw_wait+0x140>
 801a010:	2701      	movs	r7, #1
 801a012:	f1b8 0f00 	cmp.w	r8, #0
 801a016:	d010      	beq.n	801a03a <rmw_wait+0x186>
 801a018:	f8d8 3000 	ldr.w	r3, [r8]
 801a01c:	b16b      	cbz	r3, 801a03a <rmw_wait+0x186>
 801a01e:	2400      	movs	r4, #0
 801a020:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a024:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a028:	f000 fb02 	bl	801a630 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a02c:	b370      	cbz	r0, 801a08c <rmw_wait+0x1d8>
 801a02e:	3401      	adds	r4, #1
 801a030:	f8d8 3000 	ldr.w	r3, [r8]
 801a034:	2701      	movs	r7, #1
 801a036:	42a3      	cmp	r3, r4
 801a038:	d8f2      	bhi.n	801a020 <rmw_wait+0x16c>
 801a03a:	2d00      	cmp	r5, #0
 801a03c:	d035      	beq.n	801a0aa <rmw_wait+0x1f6>
 801a03e:	682b      	ldr	r3, [r5, #0]
 801a040:	b39b      	cbz	r3, 801a0aa <rmw_wait+0x1f6>
 801a042:	2400      	movs	r4, #0
 801a044:	686b      	ldr	r3, [r5, #4]
 801a046:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a04a:	f000 faf1 	bl	801a630 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a04e:	b328      	cbz	r0, 801a09c <rmw_wait+0x1e8>
 801a050:	3401      	adds	r4, #1
 801a052:	682b      	ldr	r3, [r5, #0]
 801a054:	2701      	movs	r7, #1
 801a056:	42a3      	cmp	r3, r4
 801a058:	d8f4      	bhi.n	801a044 <rmw_wait+0x190>
 801a05a:	2e00      	cmp	r6, #0
 801a05c:	d03c      	beq.n	801a0d8 <rmw_wait+0x224>
 801a05e:	6834      	ldr	r4, [r6, #0]
 801a060:	2c00      	cmp	r4, #0
 801a062:	d039      	beq.n	801a0d8 <rmw_wait+0x224>
 801a064:	2701      	movs	r7, #1
 801a066:	e023      	b.n	801a0b0 <rmw_wait+0x1fc>
 801a068:	68a0      	ldr	r0, [r4, #8]
 801a06a:	2100      	movs	r1, #0
 801a06c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a070:	f002 f8c8 	bl	801c204 <uxr_run_session_timeout>
 801a074:	6864      	ldr	r4, [r4, #4]
 801a076:	2c00      	cmp	r4, #0
 801a078:	d1f6      	bne.n	801a068 <rmw_wait+0x1b4>
 801a07a:	e7b0      	b.n	8019fde <rmw_wait+0x12a>
 801a07c:	e9d9 3200 	ldrd	r3, r2, [r9]
 801a080:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a084:	3401      	adds	r4, #1
 801a086:	42a3      	cmp	r3, r4
 801a088:	d8b4      	bhi.n	8019ff4 <rmw_wait+0x140>
 801a08a:	e7c2      	b.n	801a012 <rmw_wait+0x15e>
 801a08c:	e9d8 3200 	ldrd	r3, r2, [r8]
 801a090:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a094:	3401      	adds	r4, #1
 801a096:	429c      	cmp	r4, r3
 801a098:	d3c2      	bcc.n	801a020 <rmw_wait+0x16c>
 801a09a:	e7ce      	b.n	801a03a <rmw_wait+0x186>
 801a09c:	e9d5 3200 	ldrd	r3, r2, [r5]
 801a0a0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a0a4:	3401      	adds	r4, #1
 801a0a6:	42a3      	cmp	r3, r4
 801a0a8:	d8cc      	bhi.n	801a044 <rmw_wait+0x190>
 801a0aa:	b1a6      	cbz	r6, 801a0d6 <rmw_wait+0x222>
 801a0ac:	6834      	ldr	r4, [r6, #0]
 801a0ae:	b194      	cbz	r4, 801a0d6 <rmw_wait+0x222>
 801a0b0:	2300      	movs	r3, #0
 801a0b2:	461d      	mov	r5, r3
 801a0b4:	e004      	b.n	801a0c0 <rmw_wait+0x20c>
 801a0b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801a0ba:	3301      	adds	r3, #1
 801a0bc:	42a3      	cmp	r3, r4
 801a0be:	d00a      	beq.n	801a0d6 <rmw_wait+0x222>
 801a0c0:	6870      	ldr	r0, [r6, #4]
 801a0c2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801a0c6:	7c0a      	ldrb	r2, [r1, #16]
 801a0c8:	2a00      	cmp	r2, #0
 801a0ca:	d0f4      	beq.n	801a0b6 <rmw_wait+0x202>
 801a0cc:	3301      	adds	r3, #1
 801a0ce:	4617      	mov	r7, r2
 801a0d0:	740d      	strb	r5, [r1, #16]
 801a0d2:	42a3      	cmp	r3, r4
 801a0d4:	d1f4      	bne.n	801a0c0 <rmw_wait+0x20c>
 801a0d6:	b147      	cbz	r7, 801a0ea <rmw_wait+0x236>
 801a0d8:	2000      	movs	r0, #0
 801a0da:	b009      	add	sp, #36	@ 0x24
 801a0dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a0e0:	b11e      	cbz	r6, 801a0ea <rmw_wait+0x236>
 801a0e2:	6834      	ldr	r4, [r6, #0]
 801a0e4:	462f      	mov	r7, r5
 801a0e6:	2c00      	cmp	r4, #0
 801a0e8:	d1e2      	bne.n	801a0b0 <rmw_wait+0x1fc>
 801a0ea:	2002      	movs	r0, #2
 801a0ec:	b009      	add	sp, #36	@ 0x24
 801a0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a0f2:	4639      	mov	r1, r7
 801a0f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a0f8:	f002 f89e 	bl	801c238 <uxr_run_session_until_data>
 801a0fc:	6864      	ldr	r4, [r4, #4]
 801a0fe:	2c00      	cmp	r4, #0
 801a100:	f47f af62 	bne.w	8019fc8 <rmw_wait+0x114>
 801a104:	e76b      	b.n	8019fde <rmw_wait+0x12a>
 801a106:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a10a:	f004 ff37 	bl	801ef7c <rmw_time_total_nsec>
 801a10e:	2300      	movs	r3, #0
 801a110:	4a19      	ldr	r2, [pc, #100]	@ (801a178 <rmw_wait+0x2c4>)
 801a112:	f7e6 f99d 	bl	8000450 <__aeabi_uldivmod>
 801a116:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801a11a:	4607      	mov	r7, r0
 801a11c:	f171 0300 	sbcs.w	r3, r1, #0
 801a120:	bfa8      	it	ge
 801a122:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801a126:	e6e5      	b.n	8019ef4 <rmw_wait+0x40>
 801a128:	f1b8 0f00 	cmp.w	r8, #0
 801a12c:	d00f      	beq.n	801a14e <rmw_wait+0x29a>
 801a12e:	f8d8 3000 	ldr.w	r3, [r8]
 801a132:	b193      	cbz	r3, 801a15a <rmw_wait+0x2a6>
 801a134:	464f      	mov	r7, r9
 801a136:	e772      	b.n	801a01e <rmw_wait+0x16a>
 801a138:	f1b8 0f00 	cmp.w	r8, #0
 801a13c:	d007      	beq.n	801a14e <rmw_wait+0x29a>
 801a13e:	f8d8 3000 	ldr.w	r3, [r8]
 801a142:	2b00      	cmp	r3, #0
 801a144:	f47f af6b 	bne.w	801a01e <rmw_wait+0x16a>
 801a148:	b155      	cbz	r5, 801a160 <rmw_wait+0x2ac>
 801a14a:	461f      	mov	r7, r3
 801a14c:	e777      	b.n	801a03e <rmw_wait+0x18a>
 801a14e:	2d00      	cmp	r5, #0
 801a150:	d0c6      	beq.n	801a0e0 <rmw_wait+0x22c>
 801a152:	682b      	ldr	r3, [r5, #0]
 801a154:	b143      	cbz	r3, 801a168 <rmw_wait+0x2b4>
 801a156:	4647      	mov	r7, r8
 801a158:	e773      	b.n	801a042 <rmw_wait+0x18e>
 801a15a:	b10d      	cbz	r5, 801a160 <rmw_wait+0x2ac>
 801a15c:	464f      	mov	r7, r9
 801a15e:	e76e      	b.n	801a03e <rmw_wait+0x18a>
 801a160:	462f      	mov	r7, r5
 801a162:	2e00      	cmp	r6, #0
 801a164:	d1a2      	bne.n	801a0ac <rmw_wait+0x1f8>
 801a166:	e7c0      	b.n	801a0ea <rmw_wait+0x236>
 801a168:	4647      	mov	r7, r8
 801a16a:	2e00      	cmp	r6, #0
 801a16c:	d19e      	bne.n	801a0ac <rmw_wait+0x1f8>
 801a16e:	e7bc      	b.n	801a0ea <rmw_wait+0x236>
 801a170:	080219e0 	.word	0x080219e0
 801a174:	2406938c 	.word	0x2406938c
 801a178:	000f4240 	.word	0x000f4240

0801a17c <rmw_create_wait_set>:
 801a17c:	b508      	push	{r3, lr}
 801a17e:	4803      	ldr	r0, [pc, #12]	@ (801a18c <rmw_create_wait_set+0x10>)
 801a180:	f005 f816 	bl	801f1b0 <get_memory>
 801a184:	b108      	cbz	r0, 801a18a <rmw_create_wait_set+0xe>
 801a186:	6880      	ldr	r0, [r0, #8]
 801a188:	3010      	adds	r0, #16
 801a18a:	bd08      	pop	{r3, pc}
 801a18c:	240693cc 	.word	0x240693cc

0801a190 <rmw_destroy_wait_set>:
 801a190:	b508      	push	{r3, lr}
 801a192:	4b08      	ldr	r3, [pc, #32]	@ (801a1b4 <rmw_destroy_wait_set+0x24>)
 801a194:	6819      	ldr	r1, [r3, #0]
 801a196:	b911      	cbnz	r1, 801a19e <rmw_destroy_wait_set+0xe>
 801a198:	e00a      	b.n	801a1b0 <rmw_destroy_wait_set+0x20>
 801a19a:	6849      	ldr	r1, [r1, #4]
 801a19c:	b141      	cbz	r1, 801a1b0 <rmw_destroy_wait_set+0x20>
 801a19e:	688b      	ldr	r3, [r1, #8]
 801a1a0:	3310      	adds	r3, #16
 801a1a2:	4298      	cmp	r0, r3
 801a1a4:	d1f9      	bne.n	801a19a <rmw_destroy_wait_set+0xa>
 801a1a6:	4803      	ldr	r0, [pc, #12]	@ (801a1b4 <rmw_destroy_wait_set+0x24>)
 801a1a8:	f005 f812 	bl	801f1d0 <put_memory>
 801a1ac:	2000      	movs	r0, #0
 801a1ae:	bd08      	pop	{r3, pc}
 801a1b0:	2001      	movs	r0, #1
 801a1b2:	bd08      	pop	{r3, pc}
 801a1b4:	240693cc 	.word	0x240693cc

0801a1b8 <rmw_uxrce_init_service_memory>:
 801a1b8:	b1e2      	cbz	r2, 801a1f4 <rmw_uxrce_init_service_memory+0x3c>
 801a1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1be:	7b05      	ldrb	r5, [r0, #12]
 801a1c0:	4606      	mov	r6, r0
 801a1c2:	b9ad      	cbnz	r5, 801a1f0 <rmw_uxrce_init_service_memory+0x38>
 801a1c4:	23c8      	movs	r3, #200	@ 0xc8
 801a1c6:	4617      	mov	r7, r2
 801a1c8:	460c      	mov	r4, r1
 801a1ca:	46a8      	mov	r8, r5
 801a1cc:	6083      	str	r3, [r0, #8]
 801a1ce:	f240 1301 	movw	r3, #257	@ 0x101
 801a1d2:	e9c0 5500 	strd	r5, r5, [r0]
 801a1d6:	8183      	strh	r3, [r0, #12]
 801a1d8:	3501      	adds	r5, #1
 801a1da:	4621      	mov	r1, r4
 801a1dc:	4630      	mov	r0, r6
 801a1de:	f004 fff7 	bl	801f1d0 <put_memory>
 801a1e2:	42af      	cmp	r7, r5
 801a1e4:	60a4      	str	r4, [r4, #8]
 801a1e6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801a1ea:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801a1ee:	d1f3      	bne.n	801a1d8 <rmw_uxrce_init_service_memory+0x20>
 801a1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1f4:	4770      	bx	lr
 801a1f6:	bf00      	nop

0801a1f8 <rmw_uxrce_init_client_memory>:
 801a1f8:	b1e2      	cbz	r2, 801a234 <rmw_uxrce_init_client_memory+0x3c>
 801a1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1fe:	7b05      	ldrb	r5, [r0, #12]
 801a200:	4606      	mov	r6, r0
 801a202:	b9ad      	cbnz	r5, 801a230 <rmw_uxrce_init_client_memory+0x38>
 801a204:	23c8      	movs	r3, #200	@ 0xc8
 801a206:	4617      	mov	r7, r2
 801a208:	460c      	mov	r4, r1
 801a20a:	46a8      	mov	r8, r5
 801a20c:	6083      	str	r3, [r0, #8]
 801a20e:	f240 1301 	movw	r3, #257	@ 0x101
 801a212:	e9c0 5500 	strd	r5, r5, [r0]
 801a216:	8183      	strh	r3, [r0, #12]
 801a218:	3501      	adds	r5, #1
 801a21a:	4621      	mov	r1, r4
 801a21c:	4630      	mov	r0, r6
 801a21e:	f004 ffd7 	bl	801f1d0 <put_memory>
 801a222:	42af      	cmp	r7, r5
 801a224:	60a4      	str	r4, [r4, #8]
 801a226:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801a22a:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801a22e:	d1f3      	bne.n	801a218 <rmw_uxrce_init_client_memory+0x20>
 801a230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a234:	4770      	bx	lr
 801a236:	bf00      	nop

0801a238 <rmw_uxrce_init_publisher_memory>:
 801a238:	b1e2      	cbz	r2, 801a274 <rmw_uxrce_init_publisher_memory+0x3c>
 801a23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a23e:	7b05      	ldrb	r5, [r0, #12]
 801a240:	4606      	mov	r6, r0
 801a242:	b9ad      	cbnz	r5, 801a270 <rmw_uxrce_init_publisher_memory+0x38>
 801a244:	23d8      	movs	r3, #216	@ 0xd8
 801a246:	4617      	mov	r7, r2
 801a248:	460c      	mov	r4, r1
 801a24a:	46a8      	mov	r8, r5
 801a24c:	6083      	str	r3, [r0, #8]
 801a24e:	f240 1301 	movw	r3, #257	@ 0x101
 801a252:	e9c0 5500 	strd	r5, r5, [r0]
 801a256:	8183      	strh	r3, [r0, #12]
 801a258:	3501      	adds	r5, #1
 801a25a:	4621      	mov	r1, r4
 801a25c:	4630      	mov	r0, r6
 801a25e:	f004 ffb7 	bl	801f1d0 <put_memory>
 801a262:	42af      	cmp	r7, r5
 801a264:	60a4      	str	r4, [r4, #8]
 801a266:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801a26a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801a26e:	d1f3      	bne.n	801a258 <rmw_uxrce_init_publisher_memory+0x20>
 801a270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a274:	4770      	bx	lr
 801a276:	bf00      	nop

0801a278 <rmw_uxrce_init_subscription_memory>:
 801a278:	b1e2      	cbz	r2, 801a2b4 <rmw_uxrce_init_subscription_memory+0x3c>
 801a27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a27e:	7b05      	ldrb	r5, [r0, #12]
 801a280:	4606      	mov	r6, r0
 801a282:	b9ad      	cbnz	r5, 801a2b0 <rmw_uxrce_init_subscription_memory+0x38>
 801a284:	23d8      	movs	r3, #216	@ 0xd8
 801a286:	4617      	mov	r7, r2
 801a288:	460c      	mov	r4, r1
 801a28a:	46a8      	mov	r8, r5
 801a28c:	6083      	str	r3, [r0, #8]
 801a28e:	f240 1301 	movw	r3, #257	@ 0x101
 801a292:	e9c0 5500 	strd	r5, r5, [r0]
 801a296:	8183      	strh	r3, [r0, #12]
 801a298:	3501      	adds	r5, #1
 801a29a:	4621      	mov	r1, r4
 801a29c:	4630      	mov	r0, r6
 801a29e:	f004 ff97 	bl	801f1d0 <put_memory>
 801a2a2:	42af      	cmp	r7, r5
 801a2a4:	60a4      	str	r4, [r4, #8]
 801a2a6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801a2aa:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801a2ae:	d1f3      	bne.n	801a298 <rmw_uxrce_init_subscription_memory+0x20>
 801a2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2b4:	4770      	bx	lr
 801a2b6:	bf00      	nop

0801a2b8 <rmw_uxrce_init_node_memory>:
 801a2b8:	b1e2      	cbz	r2, 801a2f4 <rmw_uxrce_init_node_memory+0x3c>
 801a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2be:	7b05      	ldrb	r5, [r0, #12]
 801a2c0:	4606      	mov	r6, r0
 801a2c2:	b9ad      	cbnz	r5, 801a2f0 <rmw_uxrce_init_node_memory+0x38>
 801a2c4:	23a4      	movs	r3, #164	@ 0xa4
 801a2c6:	4617      	mov	r7, r2
 801a2c8:	460c      	mov	r4, r1
 801a2ca:	46a8      	mov	r8, r5
 801a2cc:	6083      	str	r3, [r0, #8]
 801a2ce:	f240 1301 	movw	r3, #257	@ 0x101
 801a2d2:	e9c0 5500 	strd	r5, r5, [r0]
 801a2d6:	8183      	strh	r3, [r0, #12]
 801a2d8:	3501      	adds	r5, #1
 801a2da:	4621      	mov	r1, r4
 801a2dc:	4630      	mov	r0, r6
 801a2de:	f004 ff77 	bl	801f1d0 <put_memory>
 801a2e2:	42af      	cmp	r7, r5
 801a2e4:	60a4      	str	r4, [r4, #8]
 801a2e6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801a2ea:	f804 8c98 	strb.w	r8, [r4, #-152]
 801a2ee:	d1f3      	bne.n	801a2d8 <rmw_uxrce_init_node_memory+0x20>
 801a2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2f4:	4770      	bx	lr
 801a2f6:	bf00      	nop

0801a2f8 <rmw_uxrce_init_session_memory>:
 801a2f8:	b1ea      	cbz	r2, 801a336 <rmw_uxrce_init_session_memory+0x3e>
 801a2fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2fe:	7b05      	ldrb	r5, [r0, #12]
 801a300:	4606      	mov	r6, r0
 801a302:	b9b5      	cbnz	r5, 801a332 <rmw_uxrce_init_session_memory+0x3a>
 801a304:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 801a308:	f240 1301 	movw	r3, #257	@ 0x101
 801a30c:	4617      	mov	r7, r2
 801a30e:	460c      	mov	r4, r1
 801a310:	46a9      	mov	r9, r5
 801a312:	f8c0 8008 	str.w	r8, [r0, #8]
 801a316:	8183      	strh	r3, [r0, #12]
 801a318:	e9c0 5500 	strd	r5, r5, [r0]
 801a31c:	3501      	adds	r5, #1
 801a31e:	4621      	mov	r1, r4
 801a320:	4630      	mov	r0, r6
 801a322:	f004 ff55 	bl	801f1d0 <put_memory>
 801a326:	42af      	cmp	r7, r5
 801a328:	60a4      	str	r4, [r4, #8]
 801a32a:	f884 900c 	strb.w	r9, [r4, #12]
 801a32e:	4444      	add	r4, r8
 801a330:	d1f4      	bne.n	801a31c <rmw_uxrce_init_session_memory+0x24>
 801a332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a336:	4770      	bx	lr

0801a338 <rmw_uxrce_init_topic_memory>:
 801a338:	b1e2      	cbz	r2, 801a374 <rmw_uxrce_init_topic_memory+0x3c>
 801a33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a33e:	7b05      	ldrb	r5, [r0, #12]
 801a340:	4606      	mov	r6, r0
 801a342:	b9ad      	cbnz	r5, 801a370 <rmw_uxrce_init_topic_memory+0x38>
 801a344:	231c      	movs	r3, #28
 801a346:	4617      	mov	r7, r2
 801a348:	460c      	mov	r4, r1
 801a34a:	46a8      	mov	r8, r5
 801a34c:	6083      	str	r3, [r0, #8]
 801a34e:	f240 1301 	movw	r3, #257	@ 0x101
 801a352:	e9c0 5500 	strd	r5, r5, [r0]
 801a356:	8183      	strh	r3, [r0, #12]
 801a358:	3501      	adds	r5, #1
 801a35a:	4621      	mov	r1, r4
 801a35c:	4630      	mov	r0, r6
 801a35e:	f004 ff37 	bl	801f1d0 <put_memory>
 801a362:	42af      	cmp	r7, r5
 801a364:	60a4      	str	r4, [r4, #8]
 801a366:	f104 041c 	add.w	r4, r4, #28
 801a36a:	f804 8c10 	strb.w	r8, [r4, #-16]
 801a36e:	d1f3      	bne.n	801a358 <rmw_uxrce_init_topic_memory+0x20>
 801a370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a374:	4770      	bx	lr
 801a376:	bf00      	nop

0801a378 <rmw_uxrce_init_static_input_buffer_memory>:
 801a378:	b1ea      	cbz	r2, 801a3b6 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801a37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a37e:	7b05      	ldrb	r5, [r0, #12]
 801a380:	4606      	mov	r6, r0
 801a382:	b9b5      	cbnz	r5, 801a3b2 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 801a384:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 801a388:	4617      	mov	r7, r2
 801a38a:	460c      	mov	r4, r1
 801a38c:	46a8      	mov	r8, r5
 801a38e:	6083      	str	r3, [r0, #8]
 801a390:	f240 1301 	movw	r3, #257	@ 0x101
 801a394:	e9c0 5500 	strd	r5, r5, [r0]
 801a398:	8183      	strh	r3, [r0, #12]
 801a39a:	3501      	adds	r5, #1
 801a39c:	4621      	mov	r1, r4
 801a39e:	4630      	mov	r0, r6
 801a3a0:	f004 ff16 	bl	801f1d0 <put_memory>
 801a3a4:	42af      	cmp	r7, r5
 801a3a6:	60a4      	str	r4, [r4, #8]
 801a3a8:	f884 800c 	strb.w	r8, [r4, #12]
 801a3ac:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 801a3b0:	d1f3      	bne.n	801a39a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801a3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3b6:	4770      	bx	lr

0801a3b8 <rmw_uxrce_init_init_options_impl_memory>:
 801a3b8:	b1e2      	cbz	r2, 801a3f4 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801a3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3be:	7b05      	ldrb	r5, [r0, #12]
 801a3c0:	4606      	mov	r6, r0
 801a3c2:	b9ad      	cbnz	r5, 801a3f0 <rmw_uxrce_init_init_options_impl_memory+0x38>
 801a3c4:	232c      	movs	r3, #44	@ 0x2c
 801a3c6:	4617      	mov	r7, r2
 801a3c8:	460c      	mov	r4, r1
 801a3ca:	46a8      	mov	r8, r5
 801a3cc:	6083      	str	r3, [r0, #8]
 801a3ce:	f240 1301 	movw	r3, #257	@ 0x101
 801a3d2:	e9c0 5500 	strd	r5, r5, [r0]
 801a3d6:	8183      	strh	r3, [r0, #12]
 801a3d8:	3501      	adds	r5, #1
 801a3da:	4621      	mov	r1, r4
 801a3dc:	4630      	mov	r0, r6
 801a3de:	f004 fef7 	bl	801f1d0 <put_memory>
 801a3e2:	42af      	cmp	r7, r5
 801a3e4:	60a4      	str	r4, [r4, #8]
 801a3e6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801a3ea:	f804 8c20 	strb.w	r8, [r4, #-32]
 801a3ee:	d1f3      	bne.n	801a3d8 <rmw_uxrce_init_init_options_impl_memory+0x20>
 801a3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3f4:	4770      	bx	lr
 801a3f6:	bf00      	nop

0801a3f8 <rmw_uxrce_init_wait_set_memory>:
 801a3f8:	b1e2      	cbz	r2, 801a434 <rmw_uxrce_init_wait_set_memory+0x3c>
 801a3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3fe:	7b05      	ldrb	r5, [r0, #12]
 801a400:	4606      	mov	r6, r0
 801a402:	b9ad      	cbnz	r5, 801a430 <rmw_uxrce_init_wait_set_memory+0x38>
 801a404:	231c      	movs	r3, #28
 801a406:	4617      	mov	r7, r2
 801a408:	460c      	mov	r4, r1
 801a40a:	46a8      	mov	r8, r5
 801a40c:	6083      	str	r3, [r0, #8]
 801a40e:	f240 1301 	movw	r3, #257	@ 0x101
 801a412:	e9c0 5500 	strd	r5, r5, [r0]
 801a416:	8183      	strh	r3, [r0, #12]
 801a418:	3501      	adds	r5, #1
 801a41a:	4621      	mov	r1, r4
 801a41c:	4630      	mov	r0, r6
 801a41e:	f004 fed7 	bl	801f1d0 <put_memory>
 801a422:	42af      	cmp	r7, r5
 801a424:	60a4      	str	r4, [r4, #8]
 801a426:	f104 041c 	add.w	r4, r4, #28
 801a42a:	f804 8c10 	strb.w	r8, [r4, #-16]
 801a42e:	d1f3      	bne.n	801a418 <rmw_uxrce_init_wait_set_memory+0x20>
 801a430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a434:	4770      	bx	lr
 801a436:	bf00      	nop

0801a438 <rmw_uxrce_init_guard_condition_memory>:
 801a438:	b1e2      	cbz	r2, 801a474 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801a43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a43e:	7b05      	ldrb	r5, [r0, #12]
 801a440:	4606      	mov	r6, r0
 801a442:	b9ad      	cbnz	r5, 801a470 <rmw_uxrce_init_guard_condition_memory+0x38>
 801a444:	2320      	movs	r3, #32
 801a446:	4617      	mov	r7, r2
 801a448:	460c      	mov	r4, r1
 801a44a:	46a8      	mov	r8, r5
 801a44c:	6083      	str	r3, [r0, #8]
 801a44e:	f240 1301 	movw	r3, #257	@ 0x101
 801a452:	e9c0 5500 	strd	r5, r5, [r0]
 801a456:	8183      	strh	r3, [r0, #12]
 801a458:	3501      	adds	r5, #1
 801a45a:	4621      	mov	r1, r4
 801a45c:	4630      	mov	r0, r6
 801a45e:	f004 feb7 	bl	801f1d0 <put_memory>
 801a462:	42af      	cmp	r7, r5
 801a464:	60a4      	str	r4, [r4, #8]
 801a466:	f104 0420 	add.w	r4, r4, #32
 801a46a:	f804 8c14 	strb.w	r8, [r4, #-20]
 801a46e:	d1f3      	bne.n	801a458 <rmw_uxrce_init_guard_condition_memory+0x20>
 801a470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a474:	4770      	bx	lr
 801a476:	bf00      	nop

0801a478 <rmw_uxrce_fini_session_memory>:
 801a478:	4601      	mov	r1, r0
 801a47a:	4801      	ldr	r0, [pc, #4]	@ (801a480 <rmw_uxrce_fini_session_memory+0x8>)
 801a47c:	f004 bea8 	b.w	801f1d0 <put_memory>
 801a480:	2406938c 	.word	0x2406938c

0801a484 <rmw_uxrce_fini_node_memory>:
 801a484:	b538      	push	{r3, r4, r5, lr}
 801a486:	4604      	mov	r4, r0
 801a488:	6800      	ldr	r0, [r0, #0]
 801a48a:	b128      	cbz	r0, 801a498 <rmw_uxrce_fini_node_memory+0x14>
 801a48c:	4b07      	ldr	r3, [pc, #28]	@ (801a4ac <rmw_uxrce_fini_node_memory+0x28>)
 801a48e:	6819      	ldr	r1, [r3, #0]
 801a490:	f7e5 ff26 	bl	80002e0 <strcmp>
 801a494:	b940      	cbnz	r0, 801a4a8 <rmw_uxrce_fini_node_memory+0x24>
 801a496:	6020      	str	r0, [r4, #0]
 801a498:	6861      	ldr	r1, [r4, #4]
 801a49a:	b129      	cbz	r1, 801a4a8 <rmw_uxrce_fini_node_memory+0x24>
 801a49c:	2500      	movs	r5, #0
 801a49e:	4804      	ldr	r0, [pc, #16]	@ (801a4b0 <rmw_uxrce_fini_node_memory+0x2c>)
 801a4a0:	610d      	str	r5, [r1, #16]
 801a4a2:	f004 fe95 	bl	801f1d0 <put_memory>
 801a4a6:	6065      	str	r5, [r4, #4]
 801a4a8:	bd38      	pop	{r3, r4, r5, pc}
 801a4aa:	bf00      	nop
 801a4ac:	08023da0 	.word	0x08023da0
 801a4b0:	2406935c 	.word	0x2406935c

0801a4b4 <rmw_uxrce_fini_publisher_memory>:
 801a4b4:	b510      	push	{r4, lr}
 801a4b6:	4604      	mov	r4, r0
 801a4b8:	6800      	ldr	r0, [r0, #0]
 801a4ba:	b128      	cbz	r0, 801a4c8 <rmw_uxrce_fini_publisher_memory+0x14>
 801a4bc:	4b06      	ldr	r3, [pc, #24]	@ (801a4d8 <rmw_uxrce_fini_publisher_memory+0x24>)
 801a4be:	6819      	ldr	r1, [r3, #0]
 801a4c0:	f7e5 ff0e 	bl	80002e0 <strcmp>
 801a4c4:	b938      	cbnz	r0, 801a4d6 <rmw_uxrce_fini_publisher_memory+0x22>
 801a4c6:	6020      	str	r0, [r4, #0]
 801a4c8:	6861      	ldr	r1, [r4, #4]
 801a4ca:	b121      	cbz	r1, 801a4d6 <rmw_uxrce_fini_publisher_memory+0x22>
 801a4cc:	4803      	ldr	r0, [pc, #12]	@ (801a4dc <rmw_uxrce_fini_publisher_memory+0x28>)
 801a4ce:	f004 fe7f 	bl	801f1d0 <put_memory>
 801a4d2:	2300      	movs	r3, #0
 801a4d4:	6063      	str	r3, [r4, #4]
 801a4d6:	bd10      	pop	{r4, pc}
 801a4d8:	08023da0 	.word	0x08023da0
 801a4dc:	2406936c 	.word	0x2406936c

0801a4e0 <rmw_uxrce_fini_subscription_memory>:
 801a4e0:	b510      	push	{r4, lr}
 801a4e2:	4604      	mov	r4, r0
 801a4e4:	6800      	ldr	r0, [r0, #0]
 801a4e6:	b128      	cbz	r0, 801a4f4 <rmw_uxrce_fini_subscription_memory+0x14>
 801a4e8:	4b06      	ldr	r3, [pc, #24]	@ (801a504 <rmw_uxrce_fini_subscription_memory+0x24>)
 801a4ea:	6819      	ldr	r1, [r3, #0]
 801a4ec:	f7e5 fef8 	bl	80002e0 <strcmp>
 801a4f0:	b938      	cbnz	r0, 801a502 <rmw_uxrce_fini_subscription_memory+0x22>
 801a4f2:	6020      	str	r0, [r4, #0]
 801a4f4:	6861      	ldr	r1, [r4, #4]
 801a4f6:	b121      	cbz	r1, 801a502 <rmw_uxrce_fini_subscription_memory+0x22>
 801a4f8:	4803      	ldr	r0, [pc, #12]	@ (801a508 <rmw_uxrce_fini_subscription_memory+0x28>)
 801a4fa:	f004 fe69 	bl	801f1d0 <put_memory>
 801a4fe:	2300      	movs	r3, #0
 801a500:	6063      	str	r3, [r4, #4]
 801a502:	bd10      	pop	{r4, pc}
 801a504:	08023da0 	.word	0x08023da0
 801a508:	240693ac 	.word	0x240693ac

0801a50c <rmw_uxrce_fini_service_memory>:
 801a50c:	b510      	push	{r4, lr}
 801a50e:	4604      	mov	r4, r0
 801a510:	6800      	ldr	r0, [r0, #0]
 801a512:	b128      	cbz	r0, 801a520 <rmw_uxrce_fini_service_memory+0x14>
 801a514:	4b06      	ldr	r3, [pc, #24]	@ (801a530 <rmw_uxrce_fini_service_memory+0x24>)
 801a516:	6819      	ldr	r1, [r3, #0]
 801a518:	f7e5 fee2 	bl	80002e0 <strcmp>
 801a51c:	b938      	cbnz	r0, 801a52e <rmw_uxrce_fini_service_memory+0x22>
 801a51e:	6020      	str	r0, [r4, #0]
 801a520:	6861      	ldr	r1, [r4, #4]
 801a522:	b121      	cbz	r1, 801a52e <rmw_uxrce_fini_service_memory+0x22>
 801a524:	4803      	ldr	r0, [pc, #12]	@ (801a534 <rmw_uxrce_fini_service_memory+0x28>)
 801a526:	f004 fe53 	bl	801f1d0 <put_memory>
 801a52a:	2300      	movs	r3, #0
 801a52c:	6063      	str	r3, [r4, #4]
 801a52e:	bd10      	pop	{r4, pc}
 801a530:	08023da0 	.word	0x08023da0
 801a534:	2406937c 	.word	0x2406937c

0801a538 <rmw_uxrce_fini_client_memory>:
 801a538:	b510      	push	{r4, lr}
 801a53a:	4604      	mov	r4, r0
 801a53c:	6800      	ldr	r0, [r0, #0]
 801a53e:	b128      	cbz	r0, 801a54c <rmw_uxrce_fini_client_memory+0x14>
 801a540:	4b06      	ldr	r3, [pc, #24]	@ (801a55c <rmw_uxrce_fini_client_memory+0x24>)
 801a542:	6819      	ldr	r1, [r3, #0]
 801a544:	f7e5 fecc 	bl	80002e0 <strcmp>
 801a548:	b938      	cbnz	r0, 801a55a <rmw_uxrce_fini_client_memory+0x22>
 801a54a:	6020      	str	r0, [r4, #0]
 801a54c:	6861      	ldr	r1, [r4, #4]
 801a54e:	b121      	cbz	r1, 801a55a <rmw_uxrce_fini_client_memory+0x22>
 801a550:	4803      	ldr	r0, [pc, #12]	@ (801a560 <rmw_uxrce_fini_client_memory+0x28>)
 801a552:	f004 fe3d 	bl	801f1d0 <put_memory>
 801a556:	2300      	movs	r3, #0
 801a558:	6063      	str	r3, [r4, #4]
 801a55a:	bd10      	pop	{r4, pc}
 801a55c:	08023da0 	.word	0x08023da0
 801a560:	24064a90 	.word	0x24064a90

0801a564 <rmw_uxrce_fini_topic_memory>:
 801a564:	b510      	push	{r4, lr}
 801a566:	4604      	mov	r4, r0
 801a568:	4803      	ldr	r0, [pc, #12]	@ (801a578 <rmw_uxrce_fini_topic_memory+0x14>)
 801a56a:	4621      	mov	r1, r4
 801a56c:	f004 fe30 	bl	801f1d0 <put_memory>
 801a570:	2300      	movs	r3, #0
 801a572:	61a3      	str	r3, [r4, #24]
 801a574:	bd10      	pop	{r4, pc}
 801a576:	bf00      	nop
 801a578:	240693bc 	.word	0x240693bc

0801a57c <rmw_uxrce_get_static_input_buffer_for_entity>:
 801a57c:	b082      	sub	sp, #8
 801a57e:	492b      	ldr	r1, [pc, #172]	@ (801a62c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801a580:	b530      	push	{r4, r5, lr}
 801a582:	680d      	ldr	r5, [r1, #0]
 801a584:	ac03      	add	r4, sp, #12
 801a586:	e884 000c 	stmia.w	r4, {r2, r3}
 801a58a:	461c      	mov	r4, r3
 801a58c:	2d00      	cmp	r5, #0
 801a58e:	d04b      	beq.n	801a628 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 801a590:	462b      	mov	r3, r5
 801a592:	2100      	movs	r1, #0
 801a594:	689a      	ldr	r2, [r3, #8]
 801a596:	685b      	ldr	r3, [r3, #4]
 801a598:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 801a59c:	4290      	cmp	r0, r2
 801a59e:	bf08      	it	eq
 801a5a0:	3101      	addeq	r1, #1
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d1f6      	bne.n	801a594 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801a5a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801a5aa:	2b02      	cmp	r3, #2
 801a5ac:	d029      	beq.n	801a602 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801a5ae:	d820      	bhi.n	801a5f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 801a5b0:	428c      	cmp	r4, r1
 801a5b2:	d828      	bhi.n	801a606 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801a5b4:	fab4 f284 	clz	r2, r4
 801a5b8:	0952      	lsrs	r2, r2, #5
 801a5ba:	b324      	cbz	r4, 801a606 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801a5bc:	b1dd      	cbz	r5, 801a5f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 801a5be:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801a5c2:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801a5c6:	e001      	b.n	801a5cc <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 801a5c8:	686d      	ldr	r5, [r5, #4]
 801a5ca:	b1ad      	cbz	r5, 801a5f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801a5cc:	68ab      	ldr	r3, [r5, #8]
 801a5ce:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 801a5d2:	4288      	cmp	r0, r1
 801a5d4:	d1f8      	bne.n	801a5c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801a5d6:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 801a5da:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801a5de:	4561      	cmp	r1, ip
 801a5e0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a5e4:	eb73 0e04 	sbcs.w	lr, r3, r4
 801a5e8:	daee      	bge.n	801a5c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801a5ea:	468c      	mov	ip, r1
 801a5ec:	461c      	mov	r4, r3
 801a5ee:	462a      	mov	r2, r5
 801a5f0:	e7ea      	b.n	801a5c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801a5f2:	2b03      	cmp	r3, #3
 801a5f4:	d0dc      	beq.n	801a5b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	4610      	mov	r0, r2
 801a5fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a5fe:	b002      	add	sp, #8
 801a600:	4770      	bx	lr
 801a602:	428c      	cmp	r4, r1
 801a604:	d905      	bls.n	801a612 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 801a606:	4809      	ldr	r0, [pc, #36]	@ (801a62c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801a608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a60c:	b002      	add	sp, #8
 801a60e:	f004 bdcf 	b.w	801f1b0 <get_memory>
 801a612:	fab4 f284 	clz	r2, r4
 801a616:	0952      	lsrs	r2, r2, #5
 801a618:	2c00      	cmp	r4, #0
 801a61a:	d1ed      	bne.n	801a5f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801a61c:	4803      	ldr	r0, [pc, #12]	@ (801a62c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801a61e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a622:	b002      	add	sp, #8
 801a624:	f004 bdc4 	b.w	801f1b0 <get_memory>
 801a628:	4629      	mov	r1, r5
 801a62a:	e7bc      	b.n	801a5a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 801a62c:	2406939c 	.word	0x2406939c

0801a630 <rmw_uxrce_find_static_input_buffer_by_owner>:
 801a630:	4b12      	ldr	r3, [pc, #72]	@ (801a67c <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	b530      	push	{r4, r5, lr}
 801a636:	b1f3      	cbz	r3, 801a676 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 801a638:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801a63c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801a640:	2400      	movs	r4, #0
 801a642:	e001      	b.n	801a648 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801a644:	685b      	ldr	r3, [r3, #4]
 801a646:	b1a3      	cbz	r3, 801a672 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 801a648:	689a      	ldr	r2, [r3, #8]
 801a64a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801a64e:	4288      	cmp	r0, r1
 801a650:	d1f8      	bne.n	801a644 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801a652:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 801a656:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 801a65a:	4571      	cmp	r1, lr
 801a65c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801a660:	eb72 050c 	sbcs.w	r5, r2, ip
 801a664:	daee      	bge.n	801a644 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801a666:	461c      	mov	r4, r3
 801a668:	685b      	ldr	r3, [r3, #4]
 801a66a:	468e      	mov	lr, r1
 801a66c:	4694      	mov	ip, r2
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d1ea      	bne.n	801a648 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801a672:	4620      	mov	r0, r4
 801a674:	bd30      	pop	{r4, r5, pc}
 801a676:	461c      	mov	r4, r3
 801a678:	4620      	mov	r0, r4
 801a67a:	bd30      	pop	{r4, r5, pc}
 801a67c:	2406939c 	.word	0x2406939c

0801a680 <rmw_uxrce_clean_expired_static_input_buffer>:
 801a680:	4b3d      	ldr	r3, [pc, #244]	@ (801a778 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801a682:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a686:	681f      	ldr	r7, [r3, #0]
 801a688:	ed2d 8b06 	vpush	{d8-d10}
 801a68c:	b08d      	sub	sp, #52	@ 0x34
 801a68e:	f004 fe4f 	bl	801f330 <rmw_uros_epoch_nanos>
 801a692:	2f00      	cmp	r7, #0
 801a694:	d05d      	beq.n	801a752 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801a696:	46b8      	mov	r8, r7
 801a698:	4681      	mov	r9, r0
 801a69a:	468a      	mov	sl, r1
 801a69c:	ac04      	add	r4, sp, #16
 801a69e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801a6a2:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801a6a6:	2b04      	cmp	r3, #4
 801a6a8:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 801a760 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801a6ac:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 801a768 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 801a6b0:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 801a770 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 801a6b4:	d03f      	beq.n	801a736 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801a6b6:	2b05      	cmp	r3, #5
 801a6b8:	d044      	beq.n	801a744 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801a6ba:	2b03      	cmp	r3, #3
 801a6bc:	d03b      	beq.n	801a736 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801a6be:	ed8d 8b04 	vstr	d8, [sp, #16]
 801a6c2:	ed8d ab06 	vstr	d10, [sp, #24]
 801a6c6:	ab08      	add	r3, sp, #32
 801a6c8:	ed8d 8b08 	vstr	d8, [sp, #32]
 801a6cc:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 801a6d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a6d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801a6d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a6da:	f004 fbf9 	bl	801eed0 <rmw_time_equal>
 801a6de:	b118      	cbz	r0, 801a6e8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 801a6e0:	ed8d 9b04 	vstr	d9, [sp, #16]
 801a6e4:	ed8d 8b06 	vstr	d8, [sp, #24]
 801a6e8:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 801a6ec:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 801a6f0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801a6f4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 801a6f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a6fc:	f004 fc3e 	bl	801ef7c <rmw_time_total_nsec>
 801a700:	1830      	adds	r0, r6, r0
 801a702:	eb47 0101 	adc.w	r1, r7, r1
 801a706:	4548      	cmp	r0, r9
 801a708:	eb71 030a 	sbcs.w	r3, r1, sl
 801a70c:	db05      	blt.n	801a71a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801a70e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801a712:	4591      	cmp	r9, r2
 801a714:	eb7a 0303 	sbcs.w	r3, sl, r3
 801a718:	da03      	bge.n	801a722 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801a71a:	4641      	mov	r1, r8
 801a71c:	4816      	ldr	r0, [pc, #88]	@ (801a778 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801a71e:	f004 fd57 	bl	801f1d0 <put_memory>
 801a722:	f1bb 0f00 	cmp.w	fp, #0
 801a726:	d014      	beq.n	801a752 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801a728:	46d8      	mov	r8, fp
 801a72a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801a72e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801a732:	2b04      	cmp	r3, #4
 801a734:	d1bf      	bne.n	801a6b6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801a736:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801a73a:	3340      	adds	r3, #64	@ 0x40
 801a73c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a73e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a742:	e7c0      	b.n	801a6c6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801a744:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801a748:	3348      	adds	r3, #72	@ 0x48
 801a74a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a74c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a750:	e7b9      	b.n	801a6c6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801a752:	b00d      	add	sp, #52	@ 0x34
 801a754:	ecbd 8b06 	vpop	{d8-d10}
 801a758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a75c:	f3af 8000 	nop.w
	...
 801a768:	00000001 	.word	0x00000001
 801a76c:	00000000 	.word	0x00000000
 801a770:	0000001e 	.word	0x0000001e
 801a774:	00000000 	.word	0x00000000
 801a778:	2406939c 	.word	0x2406939c

0801a77c <run_xrce_session>:
 801a77c:	b510      	push	{r4, lr}
 801a77e:	788c      	ldrb	r4, [r1, #2]
 801a780:	b086      	sub	sp, #24
 801a782:	2c01      	cmp	r4, #1
 801a784:	f8ad 200e 	strh.w	r2, [sp, #14]
 801a788:	d00c      	beq.n	801a7a4 <run_xrce_session+0x28>
 801a78a:	2401      	movs	r4, #1
 801a78c:	4619      	mov	r1, r3
 801a78e:	f10d 020e 	add.w	r2, sp, #14
 801a792:	f10d 0317 	add.w	r3, sp, #23
 801a796:	9400      	str	r4, [sp, #0]
 801a798:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a79c:	f001 fd90 	bl	801c2c0 <uxr_run_session_until_all_status>
 801a7a0:	b006      	add	sp, #24
 801a7a2:	bd10      	pop	{r4, pc}
 801a7a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a7a8:	f001 f9ac 	bl	801bb04 <uxr_flash_output_streams>
 801a7ac:	4620      	mov	r0, r4
 801a7ae:	b006      	add	sp, #24
 801a7b0:	bd10      	pop	{r4, pc}
 801a7b2:	bf00      	nop

0801a7b4 <convert_qos_profile>:
 801a7b4:	7a4a      	ldrb	r2, [r1, #9]
 801a7b6:	f891 c008 	ldrb.w	ip, [r1, #8]
 801a7ba:	2a02      	cmp	r2, #2
 801a7bc:	bf18      	it	ne
 801a7be:	2200      	movne	r2, #0
 801a7c0:	7002      	strb	r2, [r0, #0]
 801a7c2:	f1ac 0202 	sub.w	r2, ip, #2
 801a7c6:	fab2 f282 	clz	r2, r2
 801a7ca:	0952      	lsrs	r2, r2, #5
 801a7cc:	7042      	strb	r2, [r0, #1]
 801a7ce:	780a      	ldrb	r2, [r1, #0]
 801a7d0:	8889      	ldrh	r1, [r1, #4]
 801a7d2:	f1a2 0202 	sub.w	r2, r2, #2
 801a7d6:	8081      	strh	r1, [r0, #4]
 801a7d8:	fab2 f282 	clz	r2, r2
 801a7dc:	0952      	lsrs	r2, r2, #5
 801a7de:	7082      	strb	r2, [r0, #2]
 801a7e0:	4770      	bx	lr
 801a7e2:	bf00      	nop

0801a7e4 <generate_service_topics>:
 801a7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7e6:	461d      	mov	r5, r3
 801a7e8:	b083      	sub	sp, #12
 801a7ea:	4606      	mov	r6, r0
 801a7ec:	4c11      	ldr	r4, [pc, #68]	@ (801a834 <generate_service_topics+0x50>)
 801a7ee:	4608      	mov	r0, r1
 801a7f0:	4b11      	ldr	r3, [pc, #68]	@ (801a838 <generate_service_topics+0x54>)
 801a7f2:	4617      	mov	r7, r2
 801a7f4:	4629      	mov	r1, r5
 801a7f6:	4a11      	ldr	r2, [pc, #68]	@ (801a83c <generate_service_topics+0x58>)
 801a7f8:	9401      	str	r4, [sp, #4]
 801a7fa:	9600      	str	r6, [sp, #0]
 801a7fc:	f005 fedc 	bl	80205b8 <sniprintf>
 801a800:	4a0f      	ldr	r2, [pc, #60]	@ (801a840 <generate_service_topics+0x5c>)
 801a802:	4604      	mov	r4, r0
 801a804:	4b0f      	ldr	r3, [pc, #60]	@ (801a844 <generate_service_topics+0x60>)
 801a806:	9201      	str	r2, [sp, #4]
 801a808:	4638      	mov	r0, r7
 801a80a:	4a0c      	ldr	r2, [pc, #48]	@ (801a83c <generate_service_topics+0x58>)
 801a80c:	4629      	mov	r1, r5
 801a80e:	9600      	str	r6, [sp, #0]
 801a810:	f005 fed2 	bl	80205b8 <sniprintf>
 801a814:	2c00      	cmp	r4, #0
 801a816:	bfa8      	it	ge
 801a818:	42a5      	cmpge	r5, r4
 801a81a:	bfcc      	ite	gt
 801a81c:	2401      	movgt	r4, #1
 801a81e:	2400      	movle	r4, #0
 801a820:	dd05      	ble.n	801a82e <generate_service_topics+0x4a>
 801a822:	2800      	cmp	r0, #0
 801a824:	bfa8      	it	ge
 801a826:	4285      	cmpge	r5, r0
 801a828:	bfcc      	ite	gt
 801a82a:	2401      	movgt	r4, #1
 801a82c:	2400      	movle	r4, #0
 801a82e:	4620      	mov	r0, r4
 801a830:	b003      	add	sp, #12
 801a832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a834:	08023a90 	.word	0x08023a90
 801a838:	08023a8c 	.word	0x08023a8c
 801a83c:	08023a70 	.word	0x08023a70
 801a840:	08023a84 	.word	0x08023a84
 801a844:	08023a80 	.word	0x08023a80

0801a848 <generate_service_types>:
 801a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a84c:	4606      	mov	r6, r0
 801a84e:	b087      	sub	sp, #28
 801a850:	461c      	mov	r4, r3
 801a852:	6883      	ldr	r3, [r0, #8]
 801a854:	460d      	mov	r5, r1
 801a856:	4617      	mov	r7, r2
 801a858:	4798      	blx	r3
 801a85a:	68f3      	ldr	r3, [r6, #12]
 801a85c:	4606      	mov	r6, r0
 801a85e:	4798      	blx	r3
 801a860:	2300      	movs	r3, #0
 801a862:	f8d0 b004 	ldr.w	fp, [r0, #4]
 801a866:	6872      	ldr	r2, [r6, #4]
 801a868:	702b      	strb	r3, [r5, #0]
 801a86a:	6813      	ldr	r3, [r2, #0]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d03f      	beq.n	801a8f0 <generate_service_types+0xa8>
 801a870:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801a904 <generate_service_types+0xbc>
 801a874:	4649      	mov	r1, r9
 801a876:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 801a90c <generate_service_types+0xc4>
 801a87a:	4628      	mov	r0, r5
 801a87c:	f8df a090 	ldr.w	sl, [pc, #144]	@ 801a910 <generate_service_types+0xc8>
 801a880:	f8cd 8014 	str.w	r8, [sp, #20]
 801a884:	6852      	ldr	r2, [r2, #4]
 801a886:	9100      	str	r1, [sp, #0]
 801a888:	4621      	mov	r1, r4
 801a88a:	f8cd 8008 	str.w	r8, [sp, #8]
 801a88e:	f8cd a004 	str.w	sl, [sp, #4]
 801a892:	e9cd 9203 	strd	r9, r2, [sp, #12]
 801a896:	4a1a      	ldr	r2, [pc, #104]	@ (801a900 <generate_service_types+0xb8>)
 801a898:	f005 fe8e 	bl	80205b8 <sniprintf>
 801a89c:	2300      	movs	r3, #0
 801a89e:	42a0      	cmp	r0, r4
 801a8a0:	ea6f 0600 	mvn.w	r6, r0
 801a8a4:	703b      	strb	r3, [r7, #0]
 801a8a6:	f8db 3000 	ldr.w	r3, [fp]
 801a8aa:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 801a8ae:	bfac      	ite	ge
 801a8b0:	2500      	movge	r5, #0
 801a8b2:	2501      	movlt	r5, #1
 801a8b4:	b30b      	cbz	r3, 801a8fa <generate_service_types+0xb2>
 801a8b6:	4a13      	ldr	r2, [pc, #76]	@ (801a904 <generate_service_types+0xbc>)
 801a8b8:	f8cd 8014 	str.w	r8, [sp, #20]
 801a8bc:	402e      	ands	r6, r5
 801a8be:	f8db 1004 	ldr.w	r1, [fp, #4]
 801a8c2:	4638      	mov	r0, r7
 801a8c4:	9104      	str	r1, [sp, #16]
 801a8c6:	4621      	mov	r1, r4
 801a8c8:	e9cd 2a00 	strd	r2, sl, [sp]
 801a8cc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801a8d0:	4a0b      	ldr	r2, [pc, #44]	@ (801a900 <generate_service_types+0xb8>)
 801a8d2:	f005 fe71 	bl	80205b8 <sniprintf>
 801a8d6:	2800      	cmp	r0, #0
 801a8d8:	bfb4      	ite	lt
 801a8da:	2600      	movlt	r6, #0
 801a8dc:	f006 0601 	andge.w	r6, r6, #1
 801a8e0:	42a0      	cmp	r0, r4
 801a8e2:	bfac      	ite	ge
 801a8e4:	2000      	movge	r0, #0
 801a8e6:	f006 0001 	andlt.w	r0, r6, #1
 801a8ea:	b007      	add	sp, #28
 801a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8f0:	4b05      	ldr	r3, [pc, #20]	@ (801a908 <generate_service_types+0xc0>)
 801a8f2:	f8df 9010 	ldr.w	r9, [pc, #16]	@ 801a904 <generate_service_types+0xbc>
 801a8f6:	4619      	mov	r1, r3
 801a8f8:	e7bd      	b.n	801a876 <generate_service_types+0x2e>
 801a8fa:	4b03      	ldr	r3, [pc, #12]	@ (801a908 <generate_service_types+0xc0>)
 801a8fc:	461a      	mov	r2, r3
 801a8fe:	e7db      	b.n	801a8b8 <generate_service_types+0x70>
 801a900:	08023a68 	.word	0x08023a68
 801a904:	08023a64 	.word	0x08023a64
 801a908:	08023df0 	.word	0x08023df0
 801a90c:	08023a78 	.word	0x08023a78
 801a910:	08023a7c 	.word	0x08023a7c

0801a914 <generate_type_name>:
 801a914:	2300      	movs	r3, #0
 801a916:	b530      	push	{r4, r5, lr}
 801a918:	700b      	strb	r3, [r1, #0]
 801a91a:	b087      	sub	sp, #28
 801a91c:	6803      	ldr	r3, [r0, #0]
 801a91e:	4614      	mov	r4, r2
 801a920:	b1bb      	cbz	r3, 801a952 <generate_type_name+0x3e>
 801a922:	4a0e      	ldr	r2, [pc, #56]	@ (801a95c <generate_type_name+0x48>)
 801a924:	4615      	mov	r5, r2
 801a926:	9500      	str	r5, [sp, #0]
 801a928:	9203      	str	r2, [sp, #12]
 801a92a:	4d0d      	ldr	r5, [pc, #52]	@ (801a960 <generate_type_name+0x4c>)
 801a92c:	6842      	ldr	r2, [r0, #4]
 801a92e:	4608      	mov	r0, r1
 801a930:	490c      	ldr	r1, [pc, #48]	@ (801a964 <generate_type_name+0x50>)
 801a932:	9204      	str	r2, [sp, #16]
 801a934:	9105      	str	r1, [sp, #20]
 801a936:	9102      	str	r1, [sp, #8]
 801a938:	4621      	mov	r1, r4
 801a93a:	4a0b      	ldr	r2, [pc, #44]	@ (801a968 <generate_type_name+0x54>)
 801a93c:	9501      	str	r5, [sp, #4]
 801a93e:	f005 fe3b 	bl	80205b8 <sniprintf>
 801a942:	2800      	cmp	r0, #0
 801a944:	bfa8      	it	ge
 801a946:	4284      	cmpge	r4, r0
 801a948:	bfcc      	ite	gt
 801a94a:	2001      	movgt	r0, #1
 801a94c:	2000      	movle	r0, #0
 801a94e:	b007      	add	sp, #28
 801a950:	bd30      	pop	{r4, r5, pc}
 801a952:	4b06      	ldr	r3, [pc, #24]	@ (801a96c <generate_type_name+0x58>)
 801a954:	4a01      	ldr	r2, [pc, #4]	@ (801a95c <generate_type_name+0x48>)
 801a956:	461d      	mov	r5, r3
 801a958:	e7e5      	b.n	801a926 <generate_type_name+0x12>
 801a95a:	bf00      	nop
 801a95c:	08023a64 	.word	0x08023a64
 801a960:	08023a7c 	.word	0x08023a7c
 801a964:	08023a78 	.word	0x08023a78
 801a968:	08023a68 	.word	0x08023a68
 801a96c:	08023df0 	.word	0x08023df0

0801a970 <generate_topic_name>:
 801a970:	b530      	push	{r4, r5, lr}
 801a972:	4614      	mov	r4, r2
 801a974:	b083      	sub	sp, #12
 801a976:	4605      	mov	r5, r0
 801a978:	4b07      	ldr	r3, [pc, #28]	@ (801a998 <generate_topic_name+0x28>)
 801a97a:	4a08      	ldr	r2, [pc, #32]	@ (801a99c <generate_topic_name+0x2c>)
 801a97c:	4608      	mov	r0, r1
 801a97e:	9500      	str	r5, [sp, #0]
 801a980:	4621      	mov	r1, r4
 801a982:	f005 fe19 	bl	80205b8 <sniprintf>
 801a986:	2800      	cmp	r0, #0
 801a988:	bfa8      	it	ge
 801a98a:	4284      	cmpge	r4, r0
 801a98c:	bfcc      	ite	gt
 801a98e:	2001      	movgt	r0, #1
 801a990:	2000      	movle	r0, #0
 801a992:	b003      	add	sp, #12
 801a994:	bd30      	pop	{r4, r5, pc}
 801a996:	bf00      	nop
 801a998:	08023a98 	.word	0x08023a98
 801a99c:	08023430 	.word	0x08023430

0801a9a0 <is_uxrce_rmw_identifier_valid>:
 801a9a0:	b510      	push	{r4, lr}
 801a9a2:	4604      	mov	r4, r0
 801a9a4:	b140      	cbz	r0, 801a9b8 <is_uxrce_rmw_identifier_valid+0x18>
 801a9a6:	f7fe f949 	bl	8018c3c <rmw_get_implementation_identifier>
 801a9aa:	4601      	mov	r1, r0
 801a9ac:	4620      	mov	r0, r4
 801a9ae:	f7e5 fc97 	bl	80002e0 <strcmp>
 801a9b2:	fab0 f080 	clz	r0, r0
 801a9b6:	0940      	lsrs	r0, r0, #5
 801a9b8:	bd10      	pop	{r4, pc}
 801a9ba:	bf00      	nop

0801a9bc <std_msgs__msg__Header__init>:
 801a9bc:	b570      	push	{r4, r5, r6, lr}
 801a9be:	4605      	mov	r5, r0
 801a9c0:	b1a8      	cbz	r0, 801a9ee <std_msgs__msg__Header__init+0x32>
 801a9c2:	f7fa fbf7 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 801a9c6:	4604      	mov	r4, r0
 801a9c8:	b140      	cbz	r0, 801a9dc <std_msgs__msg__Header__init+0x20>
 801a9ca:	f105 0608 	add.w	r6, r5, #8
 801a9ce:	4630      	mov	r0, r6
 801a9d0:	f004 fcbc 	bl	801f34c <rosidl_runtime_c__String__init>
 801a9d4:	4604      	mov	r4, r0
 801a9d6:	b168      	cbz	r0, 801a9f4 <std_msgs__msg__Header__init+0x38>
 801a9d8:	4620      	mov	r0, r4
 801a9da:	bd70      	pop	{r4, r5, r6, pc}
 801a9dc:	4628      	mov	r0, r5
 801a9de:	f7fa fbed 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 801a9e2:	f105 0008 	add.w	r0, r5, #8
 801a9e6:	f004 fcc7 	bl	801f378 <rosidl_runtime_c__String__fini>
 801a9ea:	4620      	mov	r0, r4
 801a9ec:	bd70      	pop	{r4, r5, r6, pc}
 801a9ee:	4604      	mov	r4, r0
 801a9f0:	4620      	mov	r0, r4
 801a9f2:	bd70      	pop	{r4, r5, r6, pc}
 801a9f4:	4628      	mov	r0, r5
 801a9f6:	f7fa fbe1 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 801a9fa:	4630      	mov	r0, r6
 801a9fc:	f004 fcbc 	bl	801f378 <rosidl_runtime_c__String__fini>
 801aa00:	e7ea      	b.n	801a9d8 <std_msgs__msg__Header__init+0x1c>
 801aa02:	bf00      	nop

0801aa04 <std_msgs__msg__Header__fini>:
 801aa04:	b148      	cbz	r0, 801aa1a <std_msgs__msg__Header__fini+0x16>
 801aa06:	b510      	push	{r4, lr}
 801aa08:	4604      	mov	r4, r0
 801aa0a:	f7fa fbd7 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 801aa0e:	f104 0008 	add.w	r0, r4, #8
 801aa12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa16:	f004 bcaf 	b.w	801f378 <rosidl_runtime_c__String__fini>
 801aa1a:	4770      	bx	lr

0801aa1c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 801aa1c:	b570      	push	{r4, r5, r6, lr}
 801aa1e:	4605      	mov	r5, r0
 801aa20:	b1a8      	cbz	r0, 801aa4e <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 801aa22:	f7ff ffcb 	bl	801a9bc <std_msgs__msg__Header__init>
 801aa26:	4604      	mov	r4, r0
 801aa28:	b140      	cbz	r0, 801aa3c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 801aa2a:	f105 0618 	add.w	r6, r5, #24
 801aa2e:	4630      	mov	r0, r6
 801aa30:	f004 fcea 	bl	801f408 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 801aa34:	4604      	mov	r4, r0
 801aa36:	b168      	cbz	r0, 801aa54 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 801aa38:	4620      	mov	r0, r4
 801aa3a:	bd70      	pop	{r4, r5, r6, pc}
 801aa3c:	4628      	mov	r0, r5
 801aa3e:	f7ff ffe1 	bl	801aa04 <std_msgs__msg__Header__fini>
 801aa42:	f105 0018 	add.w	r0, r5, #24
 801aa46:	f004 fce3 	bl	801f410 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801aa4a:	4620      	mov	r0, r4
 801aa4c:	bd70      	pop	{r4, r5, r6, pc}
 801aa4e:	4604      	mov	r4, r0
 801aa50:	4620      	mov	r0, r4
 801aa52:	bd70      	pop	{r4, r5, r6, pc}
 801aa54:	4628      	mov	r0, r5
 801aa56:	f7ff ffd5 	bl	801aa04 <std_msgs__msg__Header__fini>
 801aa5a:	4630      	mov	r0, r6
 801aa5c:	f004 fcd8 	bl	801f410 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801aa60:	e7ea      	b.n	801aa38 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 801aa62:	bf00      	nop

0801aa64 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 801aa64:	b148      	cbz	r0, 801aa7a <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 801aa66:	b510      	push	{r4, lr}
 801aa68:	4604      	mov	r4, r0
 801aa6a:	f7ff ffcb 	bl	801aa04 <std_msgs__msg__Header__fini>
 801aa6e:	f104 0018 	add.w	r0, r4, #24
 801aa72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa76:	f004 bccb 	b.w	801f410 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801aa7a:	4770      	bx	lr

0801aa7c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801aa7c:	b570      	push	{r4, r5, r6, lr}
 801aa7e:	4605      	mov	r5, r0
 801aa80:	b1a8      	cbz	r0, 801aaae <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 801aa82:	f7ff ff9b 	bl	801a9bc <std_msgs__msg__Header__init>
 801aa86:	4604      	mov	r4, r0
 801aa88:	b140      	cbz	r0, 801aa9c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 801aa8a:	f105 0618 	add.w	r6, r5, #24
 801aa8e:	4630      	mov	r0, r6
 801aa90:	f004 fcc0 	bl	801f414 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 801aa94:	4604      	mov	r4, r0
 801aa96:	b168      	cbz	r0, 801aab4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 801aa98:	4620      	mov	r0, r4
 801aa9a:	bd70      	pop	{r4, r5, r6, pc}
 801aa9c:	4628      	mov	r0, r5
 801aa9e:	f7ff ffb1 	bl	801aa04 <std_msgs__msg__Header__fini>
 801aaa2:	f105 0018 	add.w	r0, r5, #24
 801aaa6:	f004 fcb9 	bl	801f41c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801aaaa:	4620      	mov	r0, r4
 801aaac:	bd70      	pop	{r4, r5, r6, pc}
 801aaae:	4604      	mov	r4, r0
 801aab0:	4620      	mov	r0, r4
 801aab2:	bd70      	pop	{r4, r5, r6, pc}
 801aab4:	4628      	mov	r0, r5
 801aab6:	f7ff ffa5 	bl	801aa04 <std_msgs__msg__Header__fini>
 801aaba:	4630      	mov	r0, r6
 801aabc:	f004 fcae 	bl	801f41c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801aac0:	e7ea      	b.n	801aa98 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 801aac2:	bf00      	nop

0801aac4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 801aac4:	b148      	cbz	r0, 801aada <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 801aac6:	b510      	push	{r4, lr}
 801aac8:	4604      	mov	r4, r0
 801aaca:	f7ff ff9b 	bl	801aa04 <std_msgs__msg__Header__fini>
 801aace:	f104 0018 	add.w	r0, r4, #24
 801aad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aad6:	f004 bca1 	b.w	801f41c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801aada:	4770      	bx	lr

0801aadc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 801aadc:	b538      	push	{r3, r4, r5, lr}
 801aade:	4604      	mov	r4, r0
 801aae0:	b128      	cbz	r0, 801aaee <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 801aae2:	f7fa fb67 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 801aae6:	4605      	mov	r5, r0
 801aae8:	b120      	cbz	r0, 801aaf4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801aaea:	4628      	mov	r0, r5
 801aaec:	bd38      	pop	{r3, r4, r5, pc}
 801aaee:	4605      	mov	r5, r0
 801aaf0:	4628      	mov	r0, r5
 801aaf2:	bd38      	pop	{r3, r4, r5, pc}
 801aaf4:	4620      	mov	r0, r4
 801aaf6:	f7fa fb61 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 801aafa:	4628      	mov	r0, r5
 801aafc:	bd38      	pop	{r3, r4, r5, pc}
 801aafe:	bf00      	nop

0801ab00 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 801ab00:	b108      	cbz	r0, 801ab06 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 801ab02:	f7fa bb5b 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 801ab06:	4770      	bx	lr

0801ab08 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 801ab08:	b538      	push	{r3, r4, r5, lr}
 801ab0a:	4604      	mov	r4, r0
 801ab0c:	b128      	cbz	r0, 801ab1a <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 801ab0e:	f7fa fb51 	bl	80151b4 <builtin_interfaces__msg__Time__init>
 801ab12:	4605      	mov	r5, r0
 801ab14:	b120      	cbz	r0, 801ab20 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 801ab16:	4628      	mov	r0, r5
 801ab18:	bd38      	pop	{r3, r4, r5, pc}
 801ab1a:	4605      	mov	r5, r0
 801ab1c:	4628      	mov	r0, r5
 801ab1e:	bd38      	pop	{r3, r4, r5, pc}
 801ab20:	4620      	mov	r0, r4
 801ab22:	f7fa fb4b 	bl	80151bc <builtin_interfaces__msg__Time__fini>
 801ab26:	4628      	mov	r0, r5
 801ab28:	bd38      	pop	{r3, r4, r5, pc}
 801ab2a:	bf00      	nop

0801ab2c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801ab2c:	b108      	cbz	r0, 801ab32 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801ab2e:	f7fa bb45 	b.w	80151bc <builtin_interfaces__msg__Time__fini>
 801ab32:	4770      	bx	lr

0801ab34 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 801ab34:	f004 bc68 	b.w	801f408 <tier4_vehicle_msgs__msg__ActuationCommand__init>

0801ab38 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 801ab38:	f004 bc6a 	b.w	801f410 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

0801ab3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801ab3c:	4b04      	ldr	r3, [pc, #16]	@ (801ab50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801ab3e:	681a      	ldr	r2, [r3, #0]
 801ab40:	b10a      	cbz	r2, 801ab46 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 801ab42:	4803      	ldr	r0, [pc, #12]	@ (801ab50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801ab44:	4770      	bx	lr
 801ab46:	4a03      	ldr	r2, [pc, #12]	@ (801ab54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 801ab48:	4801      	ldr	r0, [pc, #4]	@ (801ab50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801ab4a:	6812      	ldr	r2, [r2, #0]
 801ab4c:	601a      	str	r2, [r3, #0]
 801ab4e:	4770      	bx	lr
 801ab50:	24001278 	.word	0x24001278
 801ab54:	24000e14 	.word	0x24000e14

0801ab58 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 801ab58:	f004 bc5c 	b.w	801f414 <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801ab5c <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801ab5c:	f004 bc5e 	b.w	801f41c <tier4_vehicle_msgs__msg__ActuationStatus__fini>

0801ab60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801ab60:	4b04      	ldr	r3, [pc, #16]	@ (801ab74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801ab62:	681a      	ldr	r2, [r3, #0]
 801ab64:	b10a      	cbz	r2, 801ab6a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 801ab66:	4803      	ldr	r0, [pc, #12]	@ (801ab74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801ab68:	4770      	bx	lr
 801ab6a:	4a03      	ldr	r2, [pc, #12]	@ (801ab78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801ab6c:	4801      	ldr	r0, [pc, #4]	@ (801ab74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801ab6e:	6812      	ldr	r2, [r2, #0]
 801ab70:	601a      	str	r2, [r3, #0]
 801ab72:	4770      	bx	lr
 801ab74:	24001338 	.word	0x24001338
 801ab78:	24000e14 	.word	0x24000e14

0801ab7c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801ab7c:	b1b8      	cbz	r0, 801abae <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801ab7e:	b538      	push	{r3, r4, r5, lr}
 801ab80:	460d      	mov	r5, r1
 801ab82:	2108      	movs	r1, #8
 801ab84:	4628      	mov	r0, r5
 801ab86:	f7f8 fce1 	bl	801354c <ucdr_alignment>
 801ab8a:	f105 0308 	add.w	r3, r5, #8
 801ab8e:	2108      	movs	r1, #8
 801ab90:	f1c5 0508 	rsb	r5, r5, #8
 801ab94:	181c      	adds	r4, r3, r0
 801ab96:	4620      	mov	r0, r4
 801ab98:	f7f8 fcd8 	bl	801354c <ucdr_alignment>
 801ab9c:	2108      	movs	r1, #8
 801ab9e:	4408      	add	r0, r1
 801aba0:	4404      	add	r4, r0
 801aba2:	4620      	mov	r0, r4
 801aba4:	f7f8 fcd2 	bl	801354c <ucdr_alignment>
 801aba8:	4428      	add	r0, r5
 801abaa:	4420      	add	r0, r4
 801abac:	bd38      	pop	{r3, r4, r5, pc}
 801abae:	4770      	bx	lr

0801abb0 <_ActuationCommand__cdr_deserialize>:
 801abb0:	b538      	push	{r3, r4, r5, lr}
 801abb2:	460c      	mov	r4, r1
 801abb4:	b171      	cbz	r1, 801abd4 <_ActuationCommand__cdr_deserialize+0x24>
 801abb6:	4605      	mov	r5, r0
 801abb8:	f7f8 fbaa 	bl	8013310 <ucdr_deserialize_double>
 801abbc:	f104 0108 	add.w	r1, r4, #8
 801abc0:	4628      	mov	r0, r5
 801abc2:	f7f8 fba5 	bl	8013310 <ucdr_deserialize_double>
 801abc6:	f104 0110 	add.w	r1, r4, #16
 801abca:	4628      	mov	r0, r5
 801abcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801abd0:	f7f8 bb9e 	b.w	8013310 <ucdr_deserialize_double>
 801abd4:	4608      	mov	r0, r1
 801abd6:	bd38      	pop	{r3, r4, r5, pc}

0801abd8 <_ActuationCommand__cdr_serialize>:
 801abd8:	b198      	cbz	r0, 801ac02 <_ActuationCommand__cdr_serialize+0x2a>
 801abda:	b538      	push	{r3, r4, r5, lr}
 801abdc:	460d      	mov	r5, r1
 801abde:	4604      	mov	r4, r0
 801abe0:	ed90 0b00 	vldr	d0, [r0]
 801abe4:	4608      	mov	r0, r1
 801abe6:	f7f8 fac3 	bl	8013170 <ucdr_serialize_double>
 801abea:	4628      	mov	r0, r5
 801abec:	ed94 0b02 	vldr	d0, [r4, #8]
 801abf0:	f7f8 fabe 	bl	8013170 <ucdr_serialize_double>
 801abf4:	4628      	mov	r0, r5
 801abf6:	ed94 0b04 	vldr	d0, [r4, #16]
 801abfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801abfe:	f7f8 bab7 	b.w	8013170 <ucdr_serialize_double>
 801ac02:	4770      	bx	lr

0801ac04 <_ActuationCommand__get_serialized_size>:
 801ac04:	b190      	cbz	r0, 801ac2c <_ActuationCommand__get_serialized_size+0x28>
 801ac06:	2108      	movs	r1, #8
 801ac08:	2000      	movs	r0, #0
 801ac0a:	b510      	push	{r4, lr}
 801ac0c:	f7f8 fc9e 	bl	801354c <ucdr_alignment>
 801ac10:	2108      	movs	r1, #8
 801ac12:	1844      	adds	r4, r0, r1
 801ac14:	4620      	mov	r0, r4
 801ac16:	f7f8 fc99 	bl	801354c <ucdr_alignment>
 801ac1a:	2108      	movs	r1, #8
 801ac1c:	4408      	add	r0, r1
 801ac1e:	4404      	add	r4, r0
 801ac20:	4620      	mov	r0, r4
 801ac22:	f7f8 fc93 	bl	801354c <ucdr_alignment>
 801ac26:	3008      	adds	r0, #8
 801ac28:	4420      	add	r0, r4
 801ac2a:	bd10      	pop	{r4, pc}
 801ac2c:	4770      	bx	lr
 801ac2e:	bf00      	nop

0801ac30 <_ActuationCommand__max_serialized_size>:
 801ac30:	b538      	push	{r3, r4, r5, lr}
 801ac32:	2108      	movs	r1, #8
 801ac34:	2000      	movs	r0, #0
 801ac36:	f7f8 fc89 	bl	801354c <ucdr_alignment>
 801ac3a:	2108      	movs	r1, #8
 801ac3c:	1845      	adds	r5, r0, r1
 801ac3e:	4628      	mov	r0, r5
 801ac40:	f7f8 fc84 	bl	801354c <ucdr_alignment>
 801ac44:	2108      	movs	r1, #8
 801ac46:	1844      	adds	r4, r0, r1
 801ac48:	442c      	add	r4, r5
 801ac4a:	4620      	mov	r0, r4
 801ac4c:	f7f8 fc7e 	bl	801354c <ucdr_alignment>
 801ac50:	3008      	adds	r0, #8
 801ac52:	4420      	add	r0, r4
 801ac54:	bd38      	pop	{r3, r4, r5, pc}
 801ac56:	bf00      	nop

0801ac58 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801ac58:	b570      	push	{r4, r5, r6, lr}
 801ac5a:	460c      	mov	r4, r1
 801ac5c:	2301      	movs	r3, #1
 801ac5e:	2108      	movs	r1, #8
 801ac60:	f104 0508 	add.w	r5, r4, #8
 801ac64:	7003      	strb	r3, [r0, #0]
 801ac66:	4620      	mov	r0, r4
 801ac68:	f1c4 0408 	rsb	r4, r4, #8
 801ac6c:	f7f8 fc6e 	bl	801354c <ucdr_alignment>
 801ac70:	1946      	adds	r6, r0, r5
 801ac72:	2108      	movs	r1, #8
 801ac74:	4630      	mov	r0, r6
 801ac76:	f7f8 fc69 	bl	801354c <ucdr_alignment>
 801ac7a:	2108      	movs	r1, #8
 801ac7c:	1845      	adds	r5, r0, r1
 801ac7e:	4435      	add	r5, r6
 801ac80:	4628      	mov	r0, r5
 801ac82:	f7f8 fc63 	bl	801354c <ucdr_alignment>
 801ac86:	4420      	add	r0, r4
 801ac88:	4428      	add	r0, r5
 801ac8a:	bd70      	pop	{r4, r5, r6, pc}

0801ac8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801ac8c:	4800      	ldr	r0, [pc, #0]	@ (801ac90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801ac8e:	4770      	bx	lr
 801ac90:	24001344 	.word	0x24001344

0801ac94 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801ac94:	b1b8      	cbz	r0, 801acc6 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 801ac96:	b538      	push	{r3, r4, r5, lr}
 801ac98:	460d      	mov	r5, r1
 801ac9a:	2108      	movs	r1, #8
 801ac9c:	4628      	mov	r0, r5
 801ac9e:	f7f8 fc55 	bl	801354c <ucdr_alignment>
 801aca2:	f105 0308 	add.w	r3, r5, #8
 801aca6:	2108      	movs	r1, #8
 801aca8:	f1c5 0508 	rsb	r5, r5, #8
 801acac:	181c      	adds	r4, r3, r0
 801acae:	4620      	mov	r0, r4
 801acb0:	f7f8 fc4c 	bl	801354c <ucdr_alignment>
 801acb4:	2108      	movs	r1, #8
 801acb6:	4408      	add	r0, r1
 801acb8:	4404      	add	r4, r0
 801acba:	4620      	mov	r0, r4
 801acbc:	f7f8 fc46 	bl	801354c <ucdr_alignment>
 801acc0:	4428      	add	r0, r5
 801acc2:	4420      	add	r0, r4
 801acc4:	bd38      	pop	{r3, r4, r5, pc}
 801acc6:	4770      	bx	lr

0801acc8 <_ActuationStatus__cdr_deserialize>:
 801acc8:	b538      	push	{r3, r4, r5, lr}
 801acca:	460c      	mov	r4, r1
 801accc:	b171      	cbz	r1, 801acec <_ActuationStatus__cdr_deserialize+0x24>
 801acce:	4605      	mov	r5, r0
 801acd0:	f7f8 fb1e 	bl	8013310 <ucdr_deserialize_double>
 801acd4:	f104 0108 	add.w	r1, r4, #8
 801acd8:	4628      	mov	r0, r5
 801acda:	f7f8 fb19 	bl	8013310 <ucdr_deserialize_double>
 801acde:	f104 0110 	add.w	r1, r4, #16
 801ace2:	4628      	mov	r0, r5
 801ace4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ace8:	f7f8 bb12 	b.w	8013310 <ucdr_deserialize_double>
 801acec:	4608      	mov	r0, r1
 801acee:	bd38      	pop	{r3, r4, r5, pc}

0801acf0 <_ActuationStatus__cdr_serialize>:
 801acf0:	b198      	cbz	r0, 801ad1a <_ActuationStatus__cdr_serialize+0x2a>
 801acf2:	b538      	push	{r3, r4, r5, lr}
 801acf4:	460d      	mov	r5, r1
 801acf6:	4604      	mov	r4, r0
 801acf8:	ed90 0b00 	vldr	d0, [r0]
 801acfc:	4608      	mov	r0, r1
 801acfe:	f7f8 fa37 	bl	8013170 <ucdr_serialize_double>
 801ad02:	4628      	mov	r0, r5
 801ad04:	ed94 0b02 	vldr	d0, [r4, #8]
 801ad08:	f7f8 fa32 	bl	8013170 <ucdr_serialize_double>
 801ad0c:	4628      	mov	r0, r5
 801ad0e:	ed94 0b04 	vldr	d0, [r4, #16]
 801ad12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad16:	f7f8 ba2b 	b.w	8013170 <ucdr_serialize_double>
 801ad1a:	4770      	bx	lr

0801ad1c <_ActuationStatus__get_serialized_size>:
 801ad1c:	b190      	cbz	r0, 801ad44 <_ActuationStatus__get_serialized_size+0x28>
 801ad1e:	2108      	movs	r1, #8
 801ad20:	2000      	movs	r0, #0
 801ad22:	b510      	push	{r4, lr}
 801ad24:	f7f8 fc12 	bl	801354c <ucdr_alignment>
 801ad28:	2108      	movs	r1, #8
 801ad2a:	1844      	adds	r4, r0, r1
 801ad2c:	4620      	mov	r0, r4
 801ad2e:	f7f8 fc0d 	bl	801354c <ucdr_alignment>
 801ad32:	2108      	movs	r1, #8
 801ad34:	4408      	add	r0, r1
 801ad36:	4404      	add	r4, r0
 801ad38:	4620      	mov	r0, r4
 801ad3a:	f7f8 fc07 	bl	801354c <ucdr_alignment>
 801ad3e:	3008      	adds	r0, #8
 801ad40:	4420      	add	r0, r4
 801ad42:	bd10      	pop	{r4, pc}
 801ad44:	4770      	bx	lr
 801ad46:	bf00      	nop

0801ad48 <_ActuationStatus__max_serialized_size>:
 801ad48:	b538      	push	{r3, r4, r5, lr}
 801ad4a:	2108      	movs	r1, #8
 801ad4c:	2000      	movs	r0, #0
 801ad4e:	f7f8 fbfd 	bl	801354c <ucdr_alignment>
 801ad52:	2108      	movs	r1, #8
 801ad54:	1845      	adds	r5, r0, r1
 801ad56:	4628      	mov	r0, r5
 801ad58:	f7f8 fbf8 	bl	801354c <ucdr_alignment>
 801ad5c:	2108      	movs	r1, #8
 801ad5e:	1844      	adds	r4, r0, r1
 801ad60:	442c      	add	r4, r5
 801ad62:	4620      	mov	r0, r4
 801ad64:	f7f8 fbf2 	bl	801354c <ucdr_alignment>
 801ad68:	3008      	adds	r0, #8
 801ad6a:	4420      	add	r0, r4
 801ad6c:	bd38      	pop	{r3, r4, r5, pc}
 801ad6e:	bf00      	nop

0801ad70 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801ad70:	b570      	push	{r4, r5, r6, lr}
 801ad72:	460c      	mov	r4, r1
 801ad74:	2301      	movs	r3, #1
 801ad76:	2108      	movs	r1, #8
 801ad78:	f104 0508 	add.w	r5, r4, #8
 801ad7c:	7003      	strb	r3, [r0, #0]
 801ad7e:	4620      	mov	r0, r4
 801ad80:	f1c4 0408 	rsb	r4, r4, #8
 801ad84:	f7f8 fbe2 	bl	801354c <ucdr_alignment>
 801ad88:	1946      	adds	r6, r0, r5
 801ad8a:	2108      	movs	r1, #8
 801ad8c:	4630      	mov	r0, r6
 801ad8e:	f7f8 fbdd 	bl	801354c <ucdr_alignment>
 801ad92:	2108      	movs	r1, #8
 801ad94:	1845      	adds	r5, r0, r1
 801ad96:	4435      	add	r5, r6
 801ad98:	4628      	mov	r0, r5
 801ad9a:	f7f8 fbd7 	bl	801354c <ucdr_alignment>
 801ad9e:	4420      	add	r0, r4
 801ada0:	4428      	add	r0, r5
 801ada2:	bd70      	pop	{r4, r5, r6, pc}

0801ada4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801ada4:	4800      	ldr	r0, [pc, #0]	@ (801ada8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 801ada6:	4770      	bx	lr
 801ada8:	2400136c 	.word	0x2400136c

0801adac <ucdr_serialize_endian_array_char>:
 801adac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adb0:	4619      	mov	r1, r3
 801adb2:	461f      	mov	r7, r3
 801adb4:	4605      	mov	r5, r0
 801adb6:	4690      	mov	r8, r2
 801adb8:	f7f8 fb70 	bl	801349c <ucdr_check_buffer_available_for>
 801adbc:	b9e0      	cbnz	r0, 801adf8 <ucdr_serialize_endian_array_char+0x4c>
 801adbe:	463e      	mov	r6, r7
 801adc0:	e00b      	b.n	801adda <ucdr_serialize_endian_array_char+0x2e>
 801adc2:	4441      	add	r1, r8
 801adc4:	68a8      	ldr	r0, [r5, #8]
 801adc6:	4622      	mov	r2, r4
 801adc8:	1b36      	subs	r6, r6, r4
 801adca:	f005 fe82 	bl	8020ad2 <memcpy>
 801adce:	68ab      	ldr	r3, [r5, #8]
 801add0:	6928      	ldr	r0, [r5, #16]
 801add2:	4423      	add	r3, r4
 801add4:	4420      	add	r0, r4
 801add6:	60ab      	str	r3, [r5, #8]
 801add8:	6128      	str	r0, [r5, #16]
 801adda:	4631      	mov	r1, r6
 801addc:	2201      	movs	r2, #1
 801adde:	4628      	mov	r0, r5
 801ade0:	f7f8 fbe6 	bl	80135b0 <ucdr_check_final_buffer_behavior_array>
 801ade4:	1bb9      	subs	r1, r7, r6
 801ade6:	4604      	mov	r4, r0
 801ade8:	2800      	cmp	r0, #0
 801adea:	d1ea      	bne.n	801adc2 <ucdr_serialize_endian_array_char+0x16>
 801adec:	2301      	movs	r3, #1
 801adee:	7da8      	ldrb	r0, [r5, #22]
 801adf0:	756b      	strb	r3, [r5, #21]
 801adf2:	4058      	eors	r0, r3
 801adf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adf8:	463a      	mov	r2, r7
 801adfa:	4641      	mov	r1, r8
 801adfc:	68a8      	ldr	r0, [r5, #8]
 801adfe:	f005 fe68 	bl	8020ad2 <memcpy>
 801ae02:	68aa      	ldr	r2, [r5, #8]
 801ae04:	692b      	ldr	r3, [r5, #16]
 801ae06:	443a      	add	r2, r7
 801ae08:	443b      	add	r3, r7
 801ae0a:	60aa      	str	r2, [r5, #8]
 801ae0c:	612b      	str	r3, [r5, #16]
 801ae0e:	e7ed      	b.n	801adec <ucdr_serialize_endian_array_char+0x40>

0801ae10 <ucdr_deserialize_endian_array_char>:
 801ae10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae14:	4619      	mov	r1, r3
 801ae16:	461f      	mov	r7, r3
 801ae18:	4605      	mov	r5, r0
 801ae1a:	4690      	mov	r8, r2
 801ae1c:	f7f8 fb3e 	bl	801349c <ucdr_check_buffer_available_for>
 801ae20:	b9e8      	cbnz	r0, 801ae5e <ucdr_deserialize_endian_array_char+0x4e>
 801ae22:	463e      	mov	r6, r7
 801ae24:	e00c      	b.n	801ae40 <ucdr_deserialize_endian_array_char+0x30>
 801ae26:	eb08 0003 	add.w	r0, r8, r3
 801ae2a:	68a9      	ldr	r1, [r5, #8]
 801ae2c:	4622      	mov	r2, r4
 801ae2e:	1b36      	subs	r6, r6, r4
 801ae30:	f005 fe4f 	bl	8020ad2 <memcpy>
 801ae34:	68ab      	ldr	r3, [r5, #8]
 801ae36:	6928      	ldr	r0, [r5, #16]
 801ae38:	4423      	add	r3, r4
 801ae3a:	4420      	add	r0, r4
 801ae3c:	60ab      	str	r3, [r5, #8]
 801ae3e:	6128      	str	r0, [r5, #16]
 801ae40:	4631      	mov	r1, r6
 801ae42:	2201      	movs	r2, #1
 801ae44:	4628      	mov	r0, r5
 801ae46:	f7f8 fbb3 	bl	80135b0 <ucdr_check_final_buffer_behavior_array>
 801ae4a:	1bbb      	subs	r3, r7, r6
 801ae4c:	4604      	mov	r4, r0
 801ae4e:	2800      	cmp	r0, #0
 801ae50:	d1e9      	bne.n	801ae26 <ucdr_deserialize_endian_array_char+0x16>
 801ae52:	2301      	movs	r3, #1
 801ae54:	7da8      	ldrb	r0, [r5, #22]
 801ae56:	756b      	strb	r3, [r5, #21]
 801ae58:	4058      	eors	r0, r3
 801ae5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae5e:	463a      	mov	r2, r7
 801ae60:	68a9      	ldr	r1, [r5, #8]
 801ae62:	4640      	mov	r0, r8
 801ae64:	f005 fe35 	bl	8020ad2 <memcpy>
 801ae68:	68aa      	ldr	r2, [r5, #8]
 801ae6a:	692b      	ldr	r3, [r5, #16]
 801ae6c:	443a      	add	r2, r7
 801ae6e:	443b      	add	r3, r7
 801ae70:	60aa      	str	r2, [r5, #8]
 801ae72:	612b      	str	r3, [r5, #16]
 801ae74:	e7ed      	b.n	801ae52 <ucdr_deserialize_endian_array_char+0x42>
 801ae76:	bf00      	nop

0801ae78 <ucdr_serialize_array_uint8_t>:
 801ae78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae7c:	4688      	mov	r8, r1
 801ae7e:	4611      	mov	r1, r2
 801ae80:	4617      	mov	r7, r2
 801ae82:	4605      	mov	r5, r0
 801ae84:	f7f8 fb0a 	bl	801349c <ucdr_check_buffer_available_for>
 801ae88:	b9e0      	cbnz	r0, 801aec4 <ucdr_serialize_array_uint8_t+0x4c>
 801ae8a:	463e      	mov	r6, r7
 801ae8c:	e00b      	b.n	801aea6 <ucdr_serialize_array_uint8_t+0x2e>
 801ae8e:	4441      	add	r1, r8
 801ae90:	68a8      	ldr	r0, [r5, #8]
 801ae92:	4622      	mov	r2, r4
 801ae94:	1b36      	subs	r6, r6, r4
 801ae96:	f005 fe1c 	bl	8020ad2 <memcpy>
 801ae9a:	68ab      	ldr	r3, [r5, #8]
 801ae9c:	6928      	ldr	r0, [r5, #16]
 801ae9e:	4423      	add	r3, r4
 801aea0:	4420      	add	r0, r4
 801aea2:	60ab      	str	r3, [r5, #8]
 801aea4:	6128      	str	r0, [r5, #16]
 801aea6:	4631      	mov	r1, r6
 801aea8:	2201      	movs	r2, #1
 801aeaa:	4628      	mov	r0, r5
 801aeac:	f7f8 fb80 	bl	80135b0 <ucdr_check_final_buffer_behavior_array>
 801aeb0:	1bb9      	subs	r1, r7, r6
 801aeb2:	4604      	mov	r4, r0
 801aeb4:	2800      	cmp	r0, #0
 801aeb6:	d1ea      	bne.n	801ae8e <ucdr_serialize_array_uint8_t+0x16>
 801aeb8:	2301      	movs	r3, #1
 801aeba:	7da8      	ldrb	r0, [r5, #22]
 801aebc:	756b      	strb	r3, [r5, #21]
 801aebe:	4058      	eors	r0, r3
 801aec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aec4:	463a      	mov	r2, r7
 801aec6:	4641      	mov	r1, r8
 801aec8:	68a8      	ldr	r0, [r5, #8]
 801aeca:	f005 fe02 	bl	8020ad2 <memcpy>
 801aece:	68aa      	ldr	r2, [r5, #8]
 801aed0:	692b      	ldr	r3, [r5, #16]
 801aed2:	443a      	add	r2, r7
 801aed4:	443b      	add	r3, r7
 801aed6:	60aa      	str	r2, [r5, #8]
 801aed8:	612b      	str	r3, [r5, #16]
 801aeda:	e7ed      	b.n	801aeb8 <ucdr_serialize_array_uint8_t+0x40>

0801aedc <ucdr_serialize_endian_array_uint8_t>:
 801aedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aee0:	4619      	mov	r1, r3
 801aee2:	461f      	mov	r7, r3
 801aee4:	4605      	mov	r5, r0
 801aee6:	4690      	mov	r8, r2
 801aee8:	f7f8 fad8 	bl	801349c <ucdr_check_buffer_available_for>
 801aeec:	b9e0      	cbnz	r0, 801af28 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801aeee:	463e      	mov	r6, r7
 801aef0:	e00b      	b.n	801af0a <ucdr_serialize_endian_array_uint8_t+0x2e>
 801aef2:	4441      	add	r1, r8
 801aef4:	68a8      	ldr	r0, [r5, #8]
 801aef6:	4622      	mov	r2, r4
 801aef8:	1b36      	subs	r6, r6, r4
 801aefa:	f005 fdea 	bl	8020ad2 <memcpy>
 801aefe:	68ab      	ldr	r3, [r5, #8]
 801af00:	6928      	ldr	r0, [r5, #16]
 801af02:	4423      	add	r3, r4
 801af04:	4420      	add	r0, r4
 801af06:	60ab      	str	r3, [r5, #8]
 801af08:	6128      	str	r0, [r5, #16]
 801af0a:	4631      	mov	r1, r6
 801af0c:	2201      	movs	r2, #1
 801af0e:	4628      	mov	r0, r5
 801af10:	f7f8 fb4e 	bl	80135b0 <ucdr_check_final_buffer_behavior_array>
 801af14:	1bb9      	subs	r1, r7, r6
 801af16:	4604      	mov	r4, r0
 801af18:	2800      	cmp	r0, #0
 801af1a:	d1ea      	bne.n	801aef2 <ucdr_serialize_endian_array_uint8_t+0x16>
 801af1c:	2301      	movs	r3, #1
 801af1e:	7da8      	ldrb	r0, [r5, #22]
 801af20:	756b      	strb	r3, [r5, #21]
 801af22:	4058      	eors	r0, r3
 801af24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af28:	463a      	mov	r2, r7
 801af2a:	4641      	mov	r1, r8
 801af2c:	68a8      	ldr	r0, [r5, #8]
 801af2e:	f005 fdd0 	bl	8020ad2 <memcpy>
 801af32:	68aa      	ldr	r2, [r5, #8]
 801af34:	692b      	ldr	r3, [r5, #16]
 801af36:	443a      	add	r2, r7
 801af38:	443b      	add	r3, r7
 801af3a:	60aa      	str	r2, [r5, #8]
 801af3c:	612b      	str	r3, [r5, #16]
 801af3e:	e7ed      	b.n	801af1c <ucdr_serialize_endian_array_uint8_t+0x40>

0801af40 <ucdr_deserialize_array_uint8_t>:
 801af40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af44:	4688      	mov	r8, r1
 801af46:	4611      	mov	r1, r2
 801af48:	4617      	mov	r7, r2
 801af4a:	4605      	mov	r5, r0
 801af4c:	f7f8 faa6 	bl	801349c <ucdr_check_buffer_available_for>
 801af50:	b9e8      	cbnz	r0, 801af8e <ucdr_deserialize_array_uint8_t+0x4e>
 801af52:	463e      	mov	r6, r7
 801af54:	e00c      	b.n	801af70 <ucdr_deserialize_array_uint8_t+0x30>
 801af56:	eb08 0003 	add.w	r0, r8, r3
 801af5a:	68a9      	ldr	r1, [r5, #8]
 801af5c:	4622      	mov	r2, r4
 801af5e:	1b36      	subs	r6, r6, r4
 801af60:	f005 fdb7 	bl	8020ad2 <memcpy>
 801af64:	68ab      	ldr	r3, [r5, #8]
 801af66:	6928      	ldr	r0, [r5, #16]
 801af68:	4423      	add	r3, r4
 801af6a:	4420      	add	r0, r4
 801af6c:	60ab      	str	r3, [r5, #8]
 801af6e:	6128      	str	r0, [r5, #16]
 801af70:	4631      	mov	r1, r6
 801af72:	2201      	movs	r2, #1
 801af74:	4628      	mov	r0, r5
 801af76:	f7f8 fb1b 	bl	80135b0 <ucdr_check_final_buffer_behavior_array>
 801af7a:	1bbb      	subs	r3, r7, r6
 801af7c:	4604      	mov	r4, r0
 801af7e:	2800      	cmp	r0, #0
 801af80:	d1e9      	bne.n	801af56 <ucdr_deserialize_array_uint8_t+0x16>
 801af82:	2301      	movs	r3, #1
 801af84:	7da8      	ldrb	r0, [r5, #22]
 801af86:	756b      	strb	r3, [r5, #21]
 801af88:	4058      	eors	r0, r3
 801af8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af8e:	463a      	mov	r2, r7
 801af90:	68a9      	ldr	r1, [r5, #8]
 801af92:	4640      	mov	r0, r8
 801af94:	f005 fd9d 	bl	8020ad2 <memcpy>
 801af98:	68aa      	ldr	r2, [r5, #8]
 801af9a:	692b      	ldr	r3, [r5, #16]
 801af9c:	443a      	add	r2, r7
 801af9e:	443b      	add	r3, r7
 801afa0:	60aa      	str	r2, [r5, #8]
 801afa2:	612b      	str	r3, [r5, #16]
 801afa4:	e7ed      	b.n	801af82 <ucdr_deserialize_array_uint8_t+0x42>
 801afa6:	bf00      	nop

0801afa8 <ucdr_deserialize_endian_array_uint8_t>:
 801afa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afac:	4619      	mov	r1, r3
 801afae:	461f      	mov	r7, r3
 801afb0:	4605      	mov	r5, r0
 801afb2:	4690      	mov	r8, r2
 801afb4:	f7f8 fa72 	bl	801349c <ucdr_check_buffer_available_for>
 801afb8:	b9e8      	cbnz	r0, 801aff6 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801afba:	463e      	mov	r6, r7
 801afbc:	e00c      	b.n	801afd8 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801afbe:	eb08 0003 	add.w	r0, r8, r3
 801afc2:	68a9      	ldr	r1, [r5, #8]
 801afc4:	4622      	mov	r2, r4
 801afc6:	1b36      	subs	r6, r6, r4
 801afc8:	f005 fd83 	bl	8020ad2 <memcpy>
 801afcc:	68ab      	ldr	r3, [r5, #8]
 801afce:	6928      	ldr	r0, [r5, #16]
 801afd0:	4423      	add	r3, r4
 801afd2:	4420      	add	r0, r4
 801afd4:	60ab      	str	r3, [r5, #8]
 801afd6:	6128      	str	r0, [r5, #16]
 801afd8:	4631      	mov	r1, r6
 801afda:	2201      	movs	r2, #1
 801afdc:	4628      	mov	r0, r5
 801afde:	f7f8 fae7 	bl	80135b0 <ucdr_check_final_buffer_behavior_array>
 801afe2:	1bbb      	subs	r3, r7, r6
 801afe4:	4604      	mov	r4, r0
 801afe6:	2800      	cmp	r0, #0
 801afe8:	d1e9      	bne.n	801afbe <ucdr_deserialize_endian_array_uint8_t+0x16>
 801afea:	2301      	movs	r3, #1
 801afec:	7da8      	ldrb	r0, [r5, #22]
 801afee:	756b      	strb	r3, [r5, #21]
 801aff0:	4058      	eors	r0, r3
 801aff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aff6:	463a      	mov	r2, r7
 801aff8:	68a9      	ldr	r1, [r5, #8]
 801affa:	4640      	mov	r0, r8
 801affc:	f005 fd69 	bl	8020ad2 <memcpy>
 801b000:	68aa      	ldr	r2, [r5, #8]
 801b002:	692b      	ldr	r3, [r5, #16]
 801b004:	443a      	add	r2, r7
 801b006:	443b      	add	r3, r7
 801b008:	60aa      	str	r2, [r5, #8]
 801b00a:	612b      	str	r3, [r5, #16]
 801b00c:	e7ed      	b.n	801afea <ucdr_deserialize_endian_array_uint8_t+0x42>
 801b00e:	bf00      	nop

0801b010 <uxr_buffer_delete_entity>:
 801b010:	b510      	push	{r4, lr}
 801b012:	2300      	movs	r3, #0
 801b014:	b08e      	sub	sp, #56	@ 0x38
 801b016:	4604      	mov	r4, r0
 801b018:	9103      	str	r1, [sp, #12]
 801b01a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801b01e:	2303      	movs	r3, #3
 801b020:	2204      	movs	r2, #4
 801b022:	9300      	str	r3, [sp, #0]
 801b024:	ab06      	add	r3, sp, #24
 801b026:	f001 fb77 	bl	801c718 <uxr_prepare_stream_to_write_submessage>
 801b02a:	b918      	cbnz	r0, 801b034 <uxr_buffer_delete_entity+0x24>
 801b02c:	4604      	mov	r4, r0
 801b02e:	4620      	mov	r0, r4
 801b030:	b00e      	add	sp, #56	@ 0x38
 801b032:	bd10      	pop	{r4, pc}
 801b034:	9902      	ldr	r1, [sp, #8]
 801b036:	aa05      	add	r2, sp, #20
 801b038:	4620      	mov	r0, r4
 801b03a:	f001 fca9 	bl	801c990 <uxr_init_base_object_request>
 801b03e:	4604      	mov	r4, r0
 801b040:	a905      	add	r1, sp, #20
 801b042:	a806      	add	r0, sp, #24
 801b044:	f003 fa5a 	bl	801e4fc <uxr_serialize_DELETE_Payload>
 801b048:	4620      	mov	r0, r4
 801b04a:	b00e      	add	sp, #56	@ 0x38
 801b04c:	bd10      	pop	{r4, pc}
 801b04e:	bf00      	nop

0801b050 <uxr_common_create_entity>:
 801b050:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801b054:	b510      	push	{r4, lr}
 801b056:	f1bc 0f01 	cmp.w	ip, #1
 801b05a:	b08c      	sub	sp, #48	@ 0x30
 801b05c:	4604      	mov	r4, r0
 801b05e:	9202      	str	r2, [sp, #8]
 801b060:	bf0c      	ite	eq
 801b062:	f003 0201 	andeq.w	r2, r3, #1
 801b066:	2200      	movne	r2, #0
 801b068:	330e      	adds	r3, #14
 801b06a:	9103      	str	r1, [sp, #12]
 801b06c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801b070:	441a      	add	r2, r3
 801b072:	ab04      	add	r3, sp, #16
 801b074:	9101      	str	r1, [sp, #4]
 801b076:	2101      	movs	r1, #1
 801b078:	b292      	uxth	r2, r2
 801b07a:	9100      	str	r1, [sp, #0]
 801b07c:	9903      	ldr	r1, [sp, #12]
 801b07e:	f001 fb4b 	bl	801c718 <uxr_prepare_stream_to_write_submessage>
 801b082:	b918      	cbnz	r0, 801b08c <uxr_common_create_entity+0x3c>
 801b084:	4604      	mov	r4, r0
 801b086:	4620      	mov	r0, r4
 801b088:	b00c      	add	sp, #48	@ 0x30
 801b08a:	bd10      	pop	{r4, pc}
 801b08c:	9902      	ldr	r1, [sp, #8]
 801b08e:	4620      	mov	r0, r4
 801b090:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b092:	f001 fc7d 	bl	801c990 <uxr_init_base_object_request>
 801b096:	4604      	mov	r4, r0
 801b098:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b09a:	a804      	add	r0, sp, #16
 801b09c:	f003 f988 	bl	801e3b0 <uxr_serialize_CREATE_Payload>
 801b0a0:	4620      	mov	r0, r4
 801b0a2:	b00c      	add	sp, #48	@ 0x30
 801b0a4:	bd10      	pop	{r4, pc}
 801b0a6:	bf00      	nop

0801b0a8 <uxr_buffer_create_participant_bin>:
 801b0a8:	b570      	push	{r4, r5, r6, lr}
 801b0aa:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801b0ae:	4605      	mov	r5, r0
 801b0b0:	ac11      	add	r4, sp, #68	@ 0x44
 801b0b2:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 801b0b6:	2303      	movs	r3, #3
 801b0b8:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801b0bc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801b0c0:	7223      	strb	r3, [r4, #8]
 801b0c2:	2300      	movs	r3, #0
 801b0c4:	2201      	movs	r2, #1
 801b0c6:	f88d 3014 	strb.w	r3, [sp, #20]
 801b0ca:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801b0cc:	7122      	strb	r2, [r4, #4]
 801b0ce:	b1cb      	cbz	r3, 801b104 <uxr_buffer_create_participant_bin+0x5c>
 801b0d0:	f88d 201c 	strb.w	r2, [sp, #28]
 801b0d4:	9308      	str	r3, [sp, #32]
 801b0d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b0da:	a915      	add	r1, sp, #84	@ 0x54
 801b0dc:	a809      	add	r0, sp, #36	@ 0x24
 801b0de:	f7f8 fa31 	bl	8013544 <ucdr_init_buffer>
 801b0e2:	a905      	add	r1, sp, #20
 801b0e4:	a809      	add	r0, sp, #36	@ 0x24
 801b0e6:	f002 fd19 	bl	801db1c <uxr_serialize_OBJK_DomainParticipant_Binary>
 801b0ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b0ec:	9600      	str	r6, [sp, #0]
 801b0ee:	4628      	mov	r0, r5
 801b0f0:	9401      	str	r4, [sp, #4]
 801b0f2:	60e3      	str	r3, [r4, #12]
 801b0f4:	b29b      	uxth	r3, r3
 801b0f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b0fa:	f7ff ffa9 	bl	801b050 <uxr_common_create_entity>
 801b0fe:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801b102:	bd70      	pop	{r4, r5, r6, pc}
 801b104:	f88d 301c 	strb.w	r3, [sp, #28]
 801b108:	e7e5      	b.n	801b0d6 <uxr_buffer_create_participant_bin+0x2e>
 801b10a:	bf00      	nop

0801b10c <uxr_buffer_create_topic_bin>:
 801b10c:	b570      	push	{r4, r5, r6, lr}
 801b10e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801b112:	4605      	mov	r5, r0
 801b114:	4618      	mov	r0, r3
 801b116:	9105      	str	r1, [sp, #20]
 801b118:	a997      	add	r1, sp, #604	@ 0x25c
 801b11a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801b11e:	ac13      	add	r4, sp, #76	@ 0x4c
 801b120:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b124:	2302      	movs	r3, #2
 801b126:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801b12a:	f000 fa8d 	bl	801b648 <uxr_object_id_to_raw>
 801b12e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801b130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b134:	a917      	add	r1, sp, #92	@ 0x5c
 801b136:	a80b      	add	r0, sp, #44	@ 0x2c
 801b138:	9306      	str	r3, [sp, #24]
 801b13a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801b13c:	930a      	str	r3, [sp, #40]	@ 0x28
 801b13e:	2303      	movs	r3, #3
 801b140:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801b144:	2301      	movs	r3, #1
 801b146:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801b14a:	2300      	movs	r3, #0
 801b14c:	f88d 301c 	strb.w	r3, [sp, #28]
 801b150:	f7f8 f9f8 	bl	8013544 <ucdr_init_buffer>
 801b154:	a906      	add	r1, sp, #24
 801b156:	a80b      	add	r0, sp, #44	@ 0x2c
 801b158:	f002 fd02 	bl	801db60 <uxr_serialize_OBJK_Topic_Binary>
 801b15c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b15e:	4628      	mov	r0, r5
 801b160:	9600      	str	r6, [sp, #0]
 801b162:	9316      	str	r3, [sp, #88]	@ 0x58
 801b164:	b29b      	uxth	r3, r3
 801b166:	9401      	str	r4, [sp, #4]
 801b168:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b16c:	f7ff ff70 	bl	801b050 <uxr_common_create_entity>
 801b170:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 801b174:	bd70      	pop	{r4, r5, r6, pc}
 801b176:	bf00      	nop

0801b178 <uxr_buffer_create_publisher_bin>:
 801b178:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b17a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801b17e:	2603      	movs	r6, #3
 801b180:	4605      	mov	r5, r0
 801b182:	4618      	mov	r0, r3
 801b184:	9105      	str	r1, [sp, #20]
 801b186:	a992      	add	r1, sp, #584	@ 0x248
 801b188:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801b18c:	ac0e      	add	r4, sp, #56	@ 0x38
 801b18e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801b192:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b196:	f000 fa57 	bl	801b648 <uxr_object_id_to_raw>
 801b19a:	2300      	movs	r3, #0
 801b19c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b1a0:	a912      	add	r1, sp, #72	@ 0x48
 801b1a2:	a806      	add	r0, sp, #24
 801b1a4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801b1a8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801b1ac:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801b1b0:	f7f8 f9c8 	bl	8013544 <ucdr_init_buffer>
 801b1b4:	a993      	add	r1, sp, #588	@ 0x24c
 801b1b6:	a806      	add	r0, sp, #24
 801b1b8:	f002 fd86 	bl	801dcc8 <uxr_serialize_OBJK_Publisher_Binary>
 801b1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b1be:	4628      	mov	r0, r5
 801b1c0:	9700      	str	r7, [sp, #0]
 801b1c2:	9311      	str	r3, [sp, #68]	@ 0x44
 801b1c4:	b29b      	uxth	r3, r3
 801b1c6:	9401      	str	r4, [sp, #4]
 801b1c8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b1cc:	f7ff ff40 	bl	801b050 <uxr_common_create_entity>
 801b1d0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801b1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1d6:	bf00      	nop

0801b1d8 <uxr_buffer_create_subscriber_bin>:
 801b1d8:	b570      	push	{r4, r5, r6, lr}
 801b1da:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801b1de:	4605      	mov	r5, r0
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	9105      	str	r1, [sp, #20]
 801b1e4:	a992      	add	r1, sp, #584	@ 0x248
 801b1e6:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 801b1ea:	ac0e      	add	r4, sp, #56	@ 0x38
 801b1ec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b1f0:	2304      	movs	r3, #4
 801b1f2:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 801b1f6:	f000 fa27 	bl	801b648 <uxr_object_id_to_raw>
 801b1fa:	2300      	movs	r3, #0
 801b1fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b200:	a912      	add	r1, sp, #72	@ 0x48
 801b202:	a806      	add	r0, sp, #24
 801b204:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801b208:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801b20c:	2303      	movs	r3, #3
 801b20e:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801b212:	f7f8 f997 	bl	8013544 <ucdr_init_buffer>
 801b216:	a993      	add	r1, sp, #588	@ 0x24c
 801b218:	a806      	add	r0, sp, #24
 801b21a:	f002 fe05 	bl	801de28 <uxr_serialize_OBJK_Subscriber_Binary>
 801b21e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b220:	4628      	mov	r0, r5
 801b222:	9600      	str	r6, [sp, #0]
 801b224:	9311      	str	r3, [sp, #68]	@ 0x44
 801b226:	b29b      	uxth	r3, r3
 801b228:	9401      	str	r4, [sp, #4]
 801b22a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b22e:	f7ff ff0f 	bl	801b050 <uxr_common_create_entity>
 801b232:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 801b236:	bd70      	pop	{r4, r5, r6, pc}

0801b238 <uxr_buffer_create_datawriter_bin>:
 801b238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b23c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801b240:	4606      	mov	r6, r0
 801b242:	4618      	mov	r0, r3
 801b244:	2703      	movs	r7, #3
 801b246:	ac1d      	add	r4, sp, #116	@ 0x74
 801b248:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801b24c:	9105      	str	r1, [sp, #20]
 801b24e:	a9a1      	add	r1, sp, #644	@ 0x284
 801b250:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801b254:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b258:	2305      	movs	r3, #5
 801b25a:	7123      	strb	r3, [r4, #4]
 801b25c:	f000 f9f4 	bl	801b648 <uxr_object_id_to_raw>
 801b260:	a90e      	add	r1, sp, #56	@ 0x38
 801b262:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801b264:	7227      	strb	r7, [r4, #8]
 801b266:	f000 f9ef 	bl	801b648 <uxr_object_id_to_raw>
 801b26a:	2300      	movs	r3, #0
 801b26c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801b270:	3d00      	subs	r5, #0
 801b272:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 801b276:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801b27a:	bf18      	it	ne
 801b27c:	2501      	movne	r5, #1
 801b27e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801b282:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801b286:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801b28a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801b28e:	2301      	movs	r3, #1
 801b290:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801b294:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801b298:	bb8a      	cbnz	r2, 801b2fe <uxr_buffer_create_datawriter_bin+0xc6>
 801b29a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801b29e:	f04f 0c13 	mov.w	ip, #19
 801b2a2:	250b      	movs	r5, #11
 801b2a4:	2221      	movs	r2, #33	@ 0x21
 801b2a6:	2111      	movs	r1, #17
 801b2a8:	2009      	movs	r0, #9
 801b2aa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801b2ae:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801b2b2:	b923      	cbnz	r3, 801b2be <uxr_buffer_create_datawriter_bin+0x86>
 801b2b4:	4672      	mov	r2, lr
 801b2b6:	4661      	mov	r1, ip
 801b2b8:	4628      	mov	r0, r5
 801b2ba:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801b2be:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801b2c2:	2b01      	cmp	r3, #1
 801b2c4:	d025      	beq.n	801b312 <uxr_buffer_create_datawriter_bin+0xda>
 801b2c6:	2b03      	cmp	r3, #3
 801b2c8:	d029      	beq.n	801b31e <uxr_buffer_create_datawriter_bin+0xe6>
 801b2ca:	b32b      	cbz	r3, 801b318 <uxr_buffer_create_datawriter_bin+0xe0>
 801b2cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b2d0:	a921      	add	r1, sp, #132	@ 0x84
 801b2d2:	a806      	add	r0, sp, #24
 801b2d4:	f7f8 f936 	bl	8013544 <ucdr_init_buffer>
 801b2d8:	a90e      	add	r1, sp, #56	@ 0x38
 801b2da:	a806      	add	r0, sp, #24
 801b2dc:	f002 fe56 	bl	801df8c <uxr_serialize_OBJK_DataWriter_Binary>
 801b2e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b2e2:	f8cd 8000 	str.w	r8, [sp]
 801b2e6:	4630      	mov	r0, r6
 801b2e8:	9401      	str	r4, [sp, #4]
 801b2ea:	60e3      	str	r3, [r4, #12]
 801b2ec:	b29b      	uxth	r3, r3
 801b2ee:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b2f2:	f7ff fead 	bl	801b050 <uxr_common_create_entity>
 801b2f6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801b2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2fe:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801b302:	f04f 0c12 	mov.w	ip, #18
 801b306:	250a      	movs	r5, #10
 801b308:	2220      	movs	r2, #32
 801b30a:	2110      	movs	r1, #16
 801b30c:	2008      	movs	r0, #8
 801b30e:	2702      	movs	r7, #2
 801b310:	e7cd      	b.n	801b2ae <uxr_buffer_create_datawriter_bin+0x76>
 801b312:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801b316:	e7d9      	b.n	801b2cc <uxr_buffer_create_datawriter_bin+0x94>
 801b318:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801b31c:	e7d6      	b.n	801b2cc <uxr_buffer_create_datawriter_bin+0x94>
 801b31e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801b322:	e7d3      	b.n	801b2cc <uxr_buffer_create_datawriter_bin+0x94>

0801b324 <uxr_buffer_create_datareader_bin>:
 801b324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b328:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801b32c:	4606      	mov	r6, r0
 801b32e:	4618      	mov	r0, r3
 801b330:	2703      	movs	r7, #3
 801b332:	ac1f      	add	r4, sp, #124	@ 0x7c
 801b334:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 801b338:	9105      	str	r1, [sp, #20]
 801b33a:	a9a3      	add	r1, sp, #652	@ 0x28c
 801b33c:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 801b340:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b344:	2306      	movs	r3, #6
 801b346:	7123      	strb	r3, [r4, #4]
 801b348:	f000 f97e 	bl	801b648 <uxr_object_id_to_raw>
 801b34c:	a90e      	add	r1, sp, #56	@ 0x38
 801b34e:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801b350:	7227      	strb	r7, [r4, #8]
 801b352:	f000 f979 	bl	801b648 <uxr_object_id_to_raw>
 801b356:	2300      	movs	r3, #0
 801b358:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801b35c:	3d00      	subs	r5, #0
 801b35e:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 801b362:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 801b366:	bf18      	it	ne
 801b368:	2501      	movne	r5, #1
 801b36a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801b36e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801b372:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801b376:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801b37a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801b37e:	2301      	movs	r3, #1
 801b380:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801b384:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801b388:	bb8a      	cbnz	r2, 801b3ee <uxr_buffer_create_datareader_bin+0xca>
 801b38a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801b38e:	f04f 0c13 	mov.w	ip, #19
 801b392:	250b      	movs	r5, #11
 801b394:	2221      	movs	r2, #33	@ 0x21
 801b396:	2111      	movs	r1, #17
 801b398:	2009      	movs	r0, #9
 801b39a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801b39e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 801b3a2:	b923      	cbnz	r3, 801b3ae <uxr_buffer_create_datareader_bin+0x8a>
 801b3a4:	4672      	mov	r2, lr
 801b3a6:	4661      	mov	r1, ip
 801b3a8:	4628      	mov	r0, r5
 801b3aa:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801b3ae:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801b3b2:	2b01      	cmp	r3, #1
 801b3b4:	d025      	beq.n	801b402 <uxr_buffer_create_datareader_bin+0xde>
 801b3b6:	2b03      	cmp	r3, #3
 801b3b8:	d029      	beq.n	801b40e <uxr_buffer_create_datareader_bin+0xea>
 801b3ba:	b32b      	cbz	r3, 801b408 <uxr_buffer_create_datareader_bin+0xe4>
 801b3bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b3c0:	a923      	add	r1, sp, #140	@ 0x8c
 801b3c2:	a806      	add	r0, sp, #24
 801b3c4:	f7f8 f8be 	bl	8013544 <ucdr_init_buffer>
 801b3c8:	a90e      	add	r1, sp, #56	@ 0x38
 801b3ca:	a806      	add	r0, sp, #24
 801b3cc:	f002 fda2 	bl	801df14 <uxr_serialize_OBJK_DataReader_Binary>
 801b3d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b3d2:	f8cd 8000 	str.w	r8, [sp]
 801b3d6:	4630      	mov	r0, r6
 801b3d8:	9401      	str	r4, [sp, #4]
 801b3da:	60e3      	str	r3, [r4, #12]
 801b3dc:	b29b      	uxth	r3, r3
 801b3de:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b3e2:	f7ff fe35 	bl	801b050 <uxr_common_create_entity>
 801b3e6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801b3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3ee:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801b3f2:	f04f 0c12 	mov.w	ip, #18
 801b3f6:	250a      	movs	r5, #10
 801b3f8:	2220      	movs	r2, #32
 801b3fa:	2110      	movs	r1, #16
 801b3fc:	2008      	movs	r0, #8
 801b3fe:	2702      	movs	r7, #2
 801b400:	e7cd      	b.n	801b39e <uxr_buffer_create_datareader_bin+0x7a>
 801b402:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801b406:	e7d9      	b.n	801b3bc <uxr_buffer_create_datareader_bin+0x98>
 801b408:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801b40c:	e7d6      	b.n	801b3bc <uxr_buffer_create_datareader_bin+0x98>
 801b40e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801b412:	e7d3      	b.n	801b3bc <uxr_buffer_create_datareader_bin+0x98>

0801b414 <uxr_buffer_create_replier_bin>:
 801b414:	b570      	push	{r4, r5, r6, lr}
 801b416:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801b41a:	4605      	mov	r5, r0
 801b41c:	4618      	mov	r0, r3
 801b41e:	9105      	str	r1, [sp, #20]
 801b420:	a999      	add	r1, sp, #612	@ 0x264
 801b422:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 801b426:	ac15      	add	r4, sp, #84	@ 0x54
 801b428:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b42c:	2308      	movs	r3, #8
 801b42e:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 801b432:	f000 f909 	bl	801b648 <uxr_object_id_to_raw>
 801b436:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 801b438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b43c:	a919      	add	r1, sp, #100	@ 0x64
 801b43e:	a80d      	add	r0, sp, #52	@ 0x34
 801b440:	9306      	str	r3, [sp, #24]
 801b442:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 801b444:	9307      	str	r3, [sp, #28]
 801b446:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 801b448:	9308      	str	r3, [sp, #32]
 801b44a:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 801b44c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b44e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801b450:	930a      	str	r3, [sp, #40]	@ 0x28
 801b452:	2301      	movs	r3, #1
 801b454:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801b458:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801b45c:	2303      	movs	r3, #3
 801b45e:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 801b462:	f7f8 f86f 	bl	8013544 <ucdr_init_buffer>
 801b466:	a906      	add	r1, sp, #24
 801b468:	a80d      	add	r0, sp, #52	@ 0x34
 801b46a:	f002 fdbb 	bl	801dfe4 <uxr_serialize_OBJK_Replier_Binary>
 801b46e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b470:	4628      	mov	r0, r5
 801b472:	9600      	str	r6, [sp, #0]
 801b474:	9318      	str	r3, [sp, #96]	@ 0x60
 801b476:	b29b      	uxth	r3, r3
 801b478:	9401      	str	r4, [sp, #4]
 801b47a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b47e:	f7ff fde7 	bl	801b050 <uxr_common_create_entity>
 801b482:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 801b486:	bd70      	pop	{r4, r5, r6, pc}

0801b488 <get_custom_error>:
 801b488:	4b01      	ldr	r3, [pc, #4]	@ (801b490 <get_custom_error+0x8>)
 801b48a:	7818      	ldrb	r0, [r3, #0]
 801b48c:	4770      	bx	lr
 801b48e:	bf00      	nop
 801b490:	240693dc 	.word	0x240693dc

0801b494 <recv_custom_msg>:
 801b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b498:	4693      	mov	fp, r2
 801b49a:	b089      	sub	sp, #36	@ 0x24
 801b49c:	2200      	movs	r2, #0
 801b49e:	4604      	mov	r4, r0
 801b4a0:	468a      	mov	sl, r1
 801b4a2:	9305      	str	r3, [sp, #20]
 801b4a4:	f88d 201e 	strb.w	r2, [sp, #30]
 801b4a8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801b4ac:	b322      	cbz	r2, 801b4f8 <recv_custom_msg+0x64>
 801b4ae:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801b4b2:	f10d 081f 	add.w	r8, sp, #31
 801b4b6:	af05      	add	r7, sp, #20
 801b4b8:	f10d 061e 	add.w	r6, sp, #30
 801b4bc:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801b4c0:	e002      	b.n	801b4c8 <recv_custom_msg+0x34>
 801b4c2:	9b05      	ldr	r3, [sp, #20]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	dd0f      	ble.n	801b4e8 <recv_custom_msg+0x54>
 801b4c8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801b4cc:	4623      	mov	r3, r4
 801b4ce:	4622      	mov	r2, r4
 801b4d0:	4648      	mov	r0, r9
 801b4d2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801b4d6:	e9cd 5600 	strd	r5, r6, [sp]
 801b4da:	f001 fc6f 	bl	801cdbc <uxr_read_framed_msg>
 801b4de:	2800      	cmp	r0, #0
 801b4e0:	d0ef      	beq.n	801b4c2 <recv_custom_msg+0x2e>
 801b4e2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801b4e6:	b1b3      	cbz	r3, 801b516 <recv_custom_msg+0x82>
 801b4e8:	4b0f      	ldr	r3, [pc, #60]	@ (801b528 <recv_custom_msg+0x94>)
 801b4ea:	2000      	movs	r0, #0
 801b4ec:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801b4f0:	701a      	strb	r2, [r3, #0]
 801b4f2:	b009      	add	sp, #36	@ 0x24
 801b4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4f8:	f10d 021f 	add.w	r2, sp, #31
 801b4fc:	4601      	mov	r1, r0
 801b4fe:	9200      	str	r2, [sp, #0]
 801b500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b504:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801b508:	47a8      	blx	r5
 801b50a:	2800      	cmp	r0, #0
 801b50c:	d0ec      	beq.n	801b4e8 <recv_custom_msg+0x54>
 801b50e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801b512:	2b00      	cmp	r3, #0
 801b514:	d1e8      	bne.n	801b4e8 <recv_custom_msg+0x54>
 801b516:	f8cb 0000 	str.w	r0, [fp]
 801b51a:	2001      	movs	r0, #1
 801b51c:	f8ca 4000 	str.w	r4, [sl]
 801b520:	b009      	add	sp, #36	@ 0x24
 801b522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b526:	bf00      	nop
 801b528:	240693dc 	.word	0x240693dc

0801b52c <send_custom_msg>:
 801b52c:	b530      	push	{r4, r5, lr}
 801b52e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 801b532:	b087      	sub	sp, #28
 801b534:	4614      	mov	r4, r2
 801b536:	b995      	cbnz	r5, 801b55e <send_custom_msg+0x32>
 801b538:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 801b53c:	f10d 0317 	add.w	r3, sp, #23
 801b540:	47a8      	blx	r5
 801b542:	1e03      	subs	r3, r0, #0
 801b544:	bf18      	it	ne
 801b546:	2301      	movne	r3, #1
 801b548:	42a0      	cmp	r0, r4
 801b54a:	bf18      	it	ne
 801b54c:	2300      	movne	r3, #0
 801b54e:	b91b      	cbnz	r3, 801b558 <send_custom_msg+0x2c>
 801b550:	4a0a      	ldr	r2, [pc, #40]	@ (801b57c <send_custom_msg+0x50>)
 801b552:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801b556:	7011      	strb	r1, [r2, #0]
 801b558:	4618      	mov	r0, r3
 801b55a:	b007      	add	sp, #28
 801b55c:	bd30      	pop	{r4, r5, pc}
 801b55e:	460b      	mov	r3, r1
 801b560:	2200      	movs	r2, #0
 801b562:	f10d 0117 	add.w	r1, sp, #23
 801b566:	9400      	str	r4, [sp, #0]
 801b568:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801b56c:	4602      	mov	r2, r0
 801b56e:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 801b572:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801b576:	f001 fa43 	bl	801ca00 <uxr_write_framed_msg>
 801b57a:	e7e2      	b.n	801b542 <send_custom_msg+0x16>
 801b57c:	240693dc 	.word	0x240693dc

0801b580 <uxr_set_custom_transport_callbacks>:
 801b580:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801b584:	9901      	ldr	r1, [sp, #4]
 801b586:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801b58a:	9b00      	ldr	r3, [sp, #0]
 801b58c:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 801b590:	4770      	bx	lr
 801b592:	bf00      	nop

0801b594 <uxr_init_custom_transport>:
 801b594:	b538      	push	{r3, r4, r5, lr}
 801b596:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801b59a:	b303      	cbz	r3, 801b5de <uxr_init_custom_transport+0x4a>
 801b59c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801b5a0:	4604      	mov	r4, r0
 801b5a2:	b1e2      	cbz	r2, 801b5de <uxr_init_custom_transport+0x4a>
 801b5a4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801b5a8:	b1ca      	cbz	r2, 801b5de <uxr_init_custom_transport+0x4a>
 801b5aa:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801b5ae:	b1b2      	cbz	r2, 801b5de <uxr_init_custom_transport+0x4a>
 801b5b0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801b5b4:	4798      	blx	r3
 801b5b6:	4605      	mov	r5, r0
 801b5b8:	b188      	cbz	r0, 801b5de <uxr_init_custom_transport+0x4a>
 801b5ba:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801b5be:	b98b      	cbnz	r3, 801b5e4 <uxr_init_custom_transport+0x50>
 801b5c0:	4b0b      	ldr	r3, [pc, #44]	@ (801b5f0 <uxr_init_custom_transport+0x5c>)
 801b5c2:	4628      	mov	r0, r5
 801b5c4:	490b      	ldr	r1, [pc, #44]	@ (801b5f4 <uxr_init_custom_transport+0x60>)
 801b5c6:	4a0c      	ldr	r2, [pc, #48]	@ (801b5f8 <uxr_init_custom_transport+0x64>)
 801b5c8:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801b5cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801b5d0:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801b5d4:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801b5d8:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801b5dc:	bd38      	pop	{r3, r4, r5, pc}
 801b5de:	2500      	movs	r5, #0
 801b5e0:	4628      	mov	r0, r5
 801b5e2:	bd38      	pop	{r3, r4, r5, pc}
 801b5e4:	2100      	movs	r1, #0
 801b5e6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801b5ea:	f001 fa03 	bl	801c9f4 <uxr_init_framing_io>
 801b5ee:	e7e7      	b.n	801b5c0 <uxr_init_custom_transport+0x2c>
 801b5f0:	0801b495 	.word	0x0801b495
 801b5f4:	0801b52d 	.word	0x0801b52d
 801b5f8:	0801b489 	.word	0x0801b489

0801b5fc <uxr_close_custom_transport>:
 801b5fc:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801b600:	4718      	bx	r3
 801b602:	bf00      	nop

0801b604 <uxr_object_id>:
 801b604:	b082      	sub	sp, #8
 801b606:	2300      	movs	r3, #0
 801b608:	f88d 1006 	strb.w	r1, [sp, #6]
 801b60c:	f360 030f 	bfi	r3, r0, #0, #16
 801b610:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801b614:	f362 431f 	bfi	r3, r2, #16, #16
 801b618:	4618      	mov	r0, r3
 801b61a:	b002      	add	sp, #8
 801b61c:	4770      	bx	lr
 801b61e:	bf00      	nop

0801b620 <uxr_object_id_from_raw>:
 801b620:	7843      	ldrb	r3, [r0, #1]
 801b622:	b082      	sub	sp, #8
 801b624:	7801      	ldrb	r1, [r0, #0]
 801b626:	2000      	movs	r0, #0
 801b628:	091a      	lsrs	r2, r3, #4
 801b62a:	f003 030f 	and.w	r3, r3, #15
 801b62e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801b632:	f88d 3006 	strb.w	r3, [sp, #6]
 801b636:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801b63a:	f362 000f 	bfi	r0, r2, #0, #16
 801b63e:	f363 401f 	bfi	r0, r3, #16, #16
 801b642:	b002      	add	sp, #8
 801b644:	4770      	bx	lr
 801b646:	bf00      	nop

0801b648 <uxr_object_id_to_raw>:
 801b648:	4602      	mov	r2, r0
 801b64a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801b64e:	b082      	sub	sp, #8
 801b650:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801b654:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801b658:	f881 c000 	strb.w	ip, [r1]
 801b65c:	7048      	strb	r0, [r1, #1]
 801b65e:	b002      	add	sp, #8
 801b660:	4770      	bx	lr
 801b662:	bf00      	nop

0801b664 <uxr_buffer_request_data>:
 801b664:	b530      	push	{r4, r5, lr}
 801b666:	b095      	sub	sp, #84	@ 0x54
 801b668:	4604      	mov	r4, r0
 801b66a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801b66c:	9303      	str	r3, [sp, #12]
 801b66e:	2d00      	cmp	r5, #0
 801b670:	f88d 301c 	strb.w	r3, [sp, #28]
 801b674:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801b678:	f04f 0200 	mov.w	r2, #0
 801b67c:	bf14      	ite	ne
 801b67e:	2101      	movne	r1, #1
 801b680:	4611      	moveq	r1, r2
 801b682:	f88d 201d 	strb.w	r2, [sp, #29]
 801b686:	f88d 201e 	strb.w	r2, [sp, #30]
 801b68a:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801b68e:	d021      	beq.n	801b6d4 <uxr_buffer_request_data+0x70>
 801b690:	686b      	ldr	r3, [r5, #4]
 801b692:	2210      	movs	r2, #16
 801b694:	6829      	ldr	r1, [r5, #0]
 801b696:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801b69a:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 801b69e:	2308      	movs	r3, #8
 801b6a0:	2100      	movs	r1, #0
 801b6a2:	4620      	mov	r0, r4
 801b6a4:	e9cd 3100 	strd	r3, r1, [sp]
 801b6a8:	ab0c      	add	r3, sp, #48	@ 0x30
 801b6aa:	9905      	ldr	r1, [sp, #20]
 801b6ac:	f001 f834 	bl	801c718 <uxr_prepare_stream_to_write_submessage>
 801b6b0:	b918      	cbnz	r0, 801b6ba <uxr_buffer_request_data+0x56>
 801b6b2:	4604      	mov	r4, r0
 801b6b4:	4620      	mov	r0, r4
 801b6b6:	b015      	add	sp, #84	@ 0x54
 801b6b8:	bd30      	pop	{r4, r5, pc}
 801b6ba:	9904      	ldr	r1, [sp, #16]
 801b6bc:	aa06      	add	r2, sp, #24
 801b6be:	4620      	mov	r0, r4
 801b6c0:	f001 f966 	bl	801c990 <uxr_init_base_object_request>
 801b6c4:	4604      	mov	r4, r0
 801b6c6:	a906      	add	r1, sp, #24
 801b6c8:	a80c      	add	r0, sp, #48	@ 0x30
 801b6ca:	f002 ffc1 	bl	801e650 <uxr_serialize_READ_DATA_Payload>
 801b6ce:	4620      	mov	r0, r4
 801b6d0:	b015      	add	sp, #84	@ 0x54
 801b6d2:	bd30      	pop	{r4, r5, pc}
 801b6d4:	2208      	movs	r2, #8
 801b6d6:	e7e2      	b.n	801b69e <uxr_buffer_request_data+0x3a>

0801b6d8 <uxr_buffer_cancel_data>:
 801b6d8:	b510      	push	{r4, lr}
 801b6da:	2300      	movs	r3, #0
 801b6dc:	b094      	sub	sp, #80	@ 0x50
 801b6de:	4604      	mov	r4, r0
 801b6e0:	9205      	str	r2, [sp, #20]
 801b6e2:	9301      	str	r3, [sp, #4]
 801b6e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b6e8:	f88d 301e 	strb.w	r3, [sp, #30]
 801b6ec:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801b6f0:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801b6f4:	2308      	movs	r3, #8
 801b6f6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801b6fa:	2201      	movs	r2, #1
 801b6fc:	9300      	str	r3, [sp, #0]
 801b6fe:	ab0c      	add	r3, sp, #48	@ 0x30
 801b700:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801b704:	2210      	movs	r2, #16
 801b706:	f001 f807 	bl	801c718 <uxr_prepare_stream_to_write_submessage>
 801b70a:	b918      	cbnz	r0, 801b714 <uxr_buffer_cancel_data+0x3c>
 801b70c:	4604      	mov	r4, r0
 801b70e:	4620      	mov	r0, r4
 801b710:	b014      	add	sp, #80	@ 0x50
 801b712:	bd10      	pop	{r4, pc}
 801b714:	9905      	ldr	r1, [sp, #20]
 801b716:	aa06      	add	r2, sp, #24
 801b718:	4620      	mov	r0, r4
 801b71a:	f001 f939 	bl	801c990 <uxr_init_base_object_request>
 801b71e:	4604      	mov	r4, r0
 801b720:	a906      	add	r1, sp, #24
 801b722:	a80c      	add	r0, sp, #48	@ 0x30
 801b724:	f002 ff94 	bl	801e650 <uxr_serialize_READ_DATA_Payload>
 801b728:	4620      	mov	r0, r4
 801b72a:	b014      	add	sp, #80	@ 0x50
 801b72c:	bd10      	pop	{r4, pc}
 801b72e:	bf00      	nop

0801b730 <read_submessage_format>:
 801b730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b734:	b095      	sub	sp, #84	@ 0x54
 801b736:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801b73a:	b113      	cbz	r3, 801b742 <read_submessage_format+0x12>
 801b73c:	b015      	add	sp, #84	@ 0x54
 801b73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b742:	4606      	mov	r6, r0
 801b744:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801b746:	460c      	mov	r4, r1
 801b748:	4615      	mov	r5, r2
 801b74a:	9004      	str	r0, [sp, #16]
 801b74c:	4699      	mov	r9, r3
 801b74e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801b750:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801b754:	9005      	str	r0, [sp, #20]
 801b756:	a80c      	add	r0, sp, #48	@ 0x30
 801b758:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801b75c:	1a52      	subs	r2, r2, r1
 801b75e:	f7f7 fef1 	bl	8013544 <ucdr_init_buffer>
 801b762:	a80c      	add	r0, sp, #48	@ 0x30
 801b764:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801b768:	f7f7 fec0 	bl	80134ec <ucdr_set_on_full_buffer_callback>
 801b76c:	69e2      	ldr	r2, [r4, #28]
 801b76e:	b19a      	cbz	r2, 801b798 <read_submessage_format+0x68>
 801b770:	f1b8 0f07 	cmp.w	r8, #7
 801b774:	f882 9014 	strb.w	r9, [r2, #20]
 801b778:	d040      	beq.n	801b7fc <read_submessage_format+0xcc>
 801b77a:	f1b8 0f08 	cmp.w	r8, #8
 801b77e:	d02e      	beq.n	801b7de <read_submessage_format+0xae>
 801b780:	f1b8 0f06 	cmp.w	r8, #6
 801b784:	d011      	beq.n	801b7aa <read_submessage_format+0x7a>
 801b786:	2301      	movs	r3, #1
 801b788:	7513      	strb	r3, [r2, #20]
 801b78a:	4629      	mov	r1, r5
 801b78c:	4620      	mov	r0, r4
 801b78e:	f7f7 ff2d 	bl	80135ec <ucdr_advance_buffer>
 801b792:	b015      	add	sp, #84	@ 0x54
 801b794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b798:	f1b8 0f07 	cmp.w	r8, #7
 801b79c:	d02e      	beq.n	801b7fc <read_submessage_format+0xcc>
 801b79e:	f1b8 0f08 	cmp.w	r8, #8
 801b7a2:	d01c      	beq.n	801b7de <read_submessage_format+0xae>
 801b7a4:	f1b8 0f06 	cmp.w	r8, #6
 801b7a8:	d1ef      	bne.n	801b78a <read_submessage_format+0x5a>
 801b7aa:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 801b7ae:	f1b8 0f00 	cmp.w	r8, #0
 801b7b2:	d011      	beq.n	801b7d8 <read_submessage_format+0xa8>
 801b7b4:	ab0c      	add	r3, sp, #48	@ 0x30
 801b7b6:	9501      	str	r5, [sp, #4]
 801b7b8:	463a      	mov	r2, r7
 801b7ba:	4630      	mov	r0, r6
 801b7bc:	9300      	str	r3, [sp, #0]
 801b7be:	2306      	movs	r3, #6
 801b7c0:	f88d 3016 	strb.w	r3, [sp, #22]
 801b7c4:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 801b7c8:	9302      	str	r3, [sp, #8]
 801b7ca:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801b7ce:	47c0      	blx	r8
 801b7d0:	2301      	movs	r3, #1
 801b7d2:	69e2      	ldr	r2, [r4, #28]
 801b7d4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801b7d8:	2a00      	cmp	r2, #0
 801b7da:	d1d4      	bne.n	801b786 <read_submessage_format+0x56>
 801b7dc:	e7d5      	b.n	801b78a <read_submessage_format+0x5a>
 801b7de:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d0f8      	beq.n	801b7d8 <read_submessage_format+0xa8>
 801b7e6:	a80c      	add	r0, sp, #48	@ 0x30
 801b7e8:	a906      	add	r1, sp, #24
 801b7ea:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801b7ee:	f002 fffb 	bl	801e7e8 <uxr_deserialize_SampleIdentity>
 801b7f2:	b9a0      	cbnz	r0, 801b81e <read_submessage_format+0xee>
 801b7f4:	69e2      	ldr	r2, [r4, #28]
 801b7f6:	2a00      	cmp	r2, #0
 801b7f8:	d1c5      	bne.n	801b786 <read_submessage_format+0x56>
 801b7fa:	e7c6      	b.n	801b78a <read_submessage_format+0x5a>
 801b7fc:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 801b800:	b13b      	cbz	r3, 801b812 <read_submessage_format+0xe2>
 801b802:	a906      	add	r1, sp, #24
 801b804:	a80c      	add	r0, sp, #48	@ 0x30
 801b806:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801b80a:	f002 fcc1 	bl	801e190 <uxr_deserialize_BaseObjectRequest>
 801b80e:	bb60      	cbnz	r0, 801b86a <read_submessage_format+0x13a>
 801b810:	69e2      	ldr	r2, [r4, #28]
 801b812:	68a3      	ldr	r3, [r4, #8]
 801b814:	442b      	add	r3, r5
 801b816:	60a3      	str	r3, [r4, #8]
 801b818:	2a00      	cmp	r2, #0
 801b81a:	d1b4      	bne.n	801b786 <read_submessage_format+0x56>
 801b81c:	e7b5      	b.n	801b78a <read_submessage_format+0x5a>
 801b81e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b820:	a80c      	add	r0, sp, #48	@ 0x30
 801b822:	eba8 0803 	sub.w	r8, r8, r3
 801b826:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801b82a:	44a8      	add	r8, r5
 801b82c:	1a52      	subs	r2, r2, r1
 801b82e:	f7f7 fe89 	bl	8013544 <ucdr_init_buffer>
 801b832:	a80c      	add	r0, sp, #48	@ 0x30
 801b834:	fa1f f888 	uxth.w	r8, r8
 801b838:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801b83c:	f7f7 fe56 	bl	80134ec <ucdr_set_on_full_buffer_callback>
 801b840:	ab0c      	add	r3, sp, #48	@ 0x30
 801b842:	2108      	movs	r1, #8
 801b844:	f8cd 8004 	str.w	r8, [sp, #4]
 801b848:	9300      	str	r3, [sp, #0]
 801b84a:	463a      	mov	r2, r7
 801b84c:	f88d 1016 	strb.w	r1, [sp, #22]
 801b850:	ab06      	add	r3, sp, #24
 801b852:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 801b856:	4630      	mov	r0, r6
 801b858:	9102      	str	r1, [sp, #8]
 801b85a:	9905      	ldr	r1, [sp, #20]
 801b85c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 801b860:	47b8      	blx	r7
 801b862:	2301      	movs	r3, #1
 801b864:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801b868:	e7c4      	b.n	801b7f4 <read_submessage_format+0xc4>
 801b86a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801b86e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b870:	a80c      	add	r0, sp, #48	@ 0x30
 801b872:	1a52      	subs	r2, r2, r1
 801b874:	eba8 0803 	sub.w	r8, r8, r3
 801b878:	f7f7 fe64 	bl	8013544 <ucdr_init_buffer>
 801b87c:	a80c      	add	r0, sp, #48	@ 0x30
 801b87e:	44a8      	add	r8, r5
 801b880:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801b884:	f7f7 fe32 	bl	80134ec <ucdr_set_on_full_buffer_callback>
 801b888:	ab0c      	add	r3, sp, #48	@ 0x30
 801b88a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801b88e:	fa1f f888 	uxth.w	r8, r8
 801b892:	9300      	str	r3, [sp, #0]
 801b894:	463a      	mov	r2, r7
 801b896:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801b89a:	4630      	mov	r0, r6
 801b89c:	f8cd 8004 	str.w	r8, [sp, #4]
 801b8a0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801b8a4:	2107      	movs	r1, #7
 801b8a6:	f88d 1016 	strb.w	r1, [sp, #22]
 801b8aa:	b29b      	uxth	r3, r3
 801b8ac:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 801b8b0:	9102      	str	r1, [sp, #8]
 801b8b2:	9905      	ldr	r1, [sp, #20]
 801b8b4:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 801b8b8:	47b8      	blx	r7
 801b8ba:	2301      	movs	r3, #1
 801b8bc:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801b8c0:	e7a6      	b.n	801b810 <read_submessage_format+0xe0>
 801b8c2:	bf00      	nop

0801b8c4 <on_get_fragmentation_info>:
 801b8c4:	b500      	push	{lr}
 801b8c6:	b08b      	sub	sp, #44	@ 0x2c
 801b8c8:	4601      	mov	r1, r0
 801b8ca:	2204      	movs	r2, #4
 801b8cc:	a802      	add	r0, sp, #8
 801b8ce:	f7f7 fe39 	bl	8013544 <ucdr_init_buffer>
 801b8d2:	f10d 0305 	add.w	r3, sp, #5
 801b8d6:	f10d 0206 	add.w	r2, sp, #6
 801b8da:	a901      	add	r1, sp, #4
 801b8dc:	a802      	add	r0, sp, #8
 801b8de:	f001 fe5d 	bl	801d59c <uxr_read_submessage_header>
 801b8e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801b8e6:	2b0d      	cmp	r3, #13
 801b8e8:	d003      	beq.n	801b8f2 <on_get_fragmentation_info+0x2e>
 801b8ea:	2000      	movs	r0, #0
 801b8ec:	b00b      	add	sp, #44	@ 0x2c
 801b8ee:	f85d fb04 	ldr.w	pc, [sp], #4
 801b8f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801b8f6:	f013 0f02 	tst.w	r3, #2
 801b8fa:	bf14      	ite	ne
 801b8fc:	2002      	movne	r0, #2
 801b8fe:	2001      	moveq	r0, #1
 801b900:	b00b      	add	sp, #44	@ 0x2c
 801b902:	f85d fb04 	ldr.w	pc, [sp], #4
 801b906:	bf00      	nop

0801b908 <read_submessage_get_info>:
 801b908:	b570      	push	{r4, r5, r6, lr}
 801b90a:	2500      	movs	r5, #0
 801b90c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 801b910:	460e      	mov	r6, r1
 801b912:	4604      	mov	r4, r0
 801b914:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801b918:	4629      	mov	r1, r5
 801b91a:	a810      	add	r0, sp, #64	@ 0x40
 801b91c:	9503      	str	r5, [sp, #12]
 801b91e:	9504      	str	r5, [sp, #16]
 801b920:	f004 ffb8 	bl	8020894 <memset>
 801b924:	a903      	add	r1, sp, #12
 801b926:	4630      	mov	r0, r6
 801b928:	f002 fdd2 	bl	801e4d0 <uxr_deserialize_GET_INFO_Payload>
 801b92c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b930:	4620      	mov	r0, r4
 801b932:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801b936:	f001 f823 	bl	801c980 <uxr_session_header_offset>
 801b93a:	462b      	mov	r3, r5
 801b93c:	220c      	movs	r2, #12
 801b93e:	a905      	add	r1, sp, #20
 801b940:	9000      	str	r0, [sp, #0]
 801b942:	a808      	add	r0, sp, #32
 801b944:	f7f7 fdec 	bl	8013520 <ucdr_init_buffer_origin_offset>
 801b948:	a910      	add	r1, sp, #64	@ 0x40
 801b94a:	a808      	add	r0, sp, #32
 801b94c:	f002 fe34 	bl	801e5b8 <uxr_serialize_INFO_Payload>
 801b950:	9b08      	ldr	r3, [sp, #32]
 801b952:	462a      	mov	r2, r5
 801b954:	4629      	mov	r1, r5
 801b956:	4620      	mov	r0, r4
 801b958:	f000 ffbe 	bl	801c8d8 <uxr_stamp_session_header>
 801b95c:	a808      	add	r0, sp, #32
 801b95e:	f7f7 fe1f 	bl	80135a0 <ucdr_buffer_length>
 801b962:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801b964:	4602      	mov	r2, r0
 801b966:	a905      	add	r1, sp, #20
 801b968:	e9d3 0400 	ldrd	r0, r4, [r3]
 801b96c:	47a0      	blx	r4
 801b96e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801b972:	bd70      	pop	{r4, r5, r6, pc}

0801b974 <write_submessage_acknack.isra.0>:
 801b974:	b570      	push	{r4, r5, r6, lr}
 801b976:	b092      	sub	sp, #72	@ 0x48
 801b978:	4605      	mov	r5, r0
 801b97a:	460e      	mov	r6, r1
 801b97c:	4614      	mov	r4, r2
 801b97e:	f000 ffff 	bl	801c980 <uxr_session_header_offset>
 801b982:	a905      	add	r1, sp, #20
 801b984:	9000      	str	r0, [sp, #0]
 801b986:	2300      	movs	r3, #0
 801b988:	a80a      	add	r0, sp, #40	@ 0x28
 801b98a:	2211      	movs	r2, #17
 801b98c:	f7f7 fdc8 	bl	8013520 <ucdr_init_buffer_origin_offset>
 801b990:	2218      	movs	r2, #24
 801b992:	2300      	movs	r3, #0
 801b994:	210a      	movs	r1, #10
 801b996:	fb02 5404 	mla	r4, r2, r4, r5
 801b99a:	a80a      	add	r0, sp, #40	@ 0x28
 801b99c:	2205      	movs	r2, #5
 801b99e:	3450      	adds	r4, #80	@ 0x50
 801b9a0:	f001 fde2 	bl	801d568 <uxr_buffer_submessage_header>
 801b9a4:	a903      	add	r1, sp, #12
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	f003 feec 	bl	801f784 <uxr_compute_acknack>
 801b9ac:	ba40      	rev16	r0, r0
 801b9ae:	a903      	add	r1, sp, #12
 801b9b0:	f88d 6010 	strb.w	r6, [sp, #16]
 801b9b4:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b9b8:	a80a      	add	r0, sp, #40	@ 0x28
 801b9ba:	f002 fe6f 	bl	801e69c <uxr_serialize_ACKNACK_Payload>
 801b9be:	2200      	movs	r2, #0
 801b9c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b9c2:	4628      	mov	r0, r5
 801b9c4:	4611      	mov	r1, r2
 801b9c6:	f000 ff87 	bl	801c8d8 <uxr_stamp_session_header>
 801b9ca:	a80a      	add	r0, sp, #40	@ 0x28
 801b9cc:	f7f7 fde8 	bl	80135a0 <ucdr_buffer_length>
 801b9d0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801b9d2:	4602      	mov	r2, r0
 801b9d4:	a905      	add	r1, sp, #20
 801b9d6:	e9d3 0400 	ldrd	r0, r4, [r3]
 801b9da:	47a0      	blx	r4
 801b9dc:	b012      	add	sp, #72	@ 0x48
 801b9de:	bd70      	pop	{r4, r5, r6, pc}

0801b9e0 <uxr_init_session>:
 801b9e0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801ba18 <uxr_init_session+0x38>
 801b9e4:	2300      	movs	r3, #0
 801b9e6:	b510      	push	{r4, lr}
 801b9e8:	4604      	mov	r4, r0
 801b9ea:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801b9ee:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801b9f2:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801b9f6:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801b9fa:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801b9fe:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801ba02:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801ba06:	2181      	movs	r1, #129	@ 0x81
 801ba08:	f000 feca 	bl	801c7a0 <uxr_init_session_info>
 801ba0c:	f104 0008 	add.w	r0, r4, #8
 801ba10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ba14:	f001 bcc4 	b.w	801d3a0 <uxr_init_stream_storage>
	...

0801ba20 <uxr_set_status_callback>:
 801ba20:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801ba24:	4770      	bx	lr
 801ba26:	bf00      	nop

0801ba28 <uxr_set_topic_callback>:
 801ba28:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801ba2c:	4770      	bx	lr
 801ba2e:	bf00      	nop

0801ba30 <uxr_set_request_callback>:
 801ba30:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801ba34:	4770      	bx	lr
 801ba36:	bf00      	nop

0801ba38 <uxr_set_reply_callback>:
 801ba38:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801ba3c:	4770      	bx	lr
 801ba3e:	bf00      	nop

0801ba40 <uxr_create_output_best_effort_stream>:
 801ba40:	b510      	push	{r4, lr}
 801ba42:	4604      	mov	r4, r0
 801ba44:	b084      	sub	sp, #16
 801ba46:	e9cd 2100 	strd	r2, r1, [sp]
 801ba4a:	f000 ff99 	bl	801c980 <uxr_session_header_offset>
 801ba4e:	4603      	mov	r3, r0
 801ba50:	f104 0008 	add.w	r0, r4, #8
 801ba54:	e9dd 2100 	ldrd	r2, r1, [sp]
 801ba58:	b004      	add	sp, #16
 801ba5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ba5e:	f001 bce5 	b.w	801d42c <uxr_add_output_best_effort_buffer>
 801ba62:	bf00      	nop

0801ba64 <uxr_create_output_reliable_stream>:
 801ba64:	b530      	push	{r4, r5, lr}
 801ba66:	b089      	sub	sp, #36	@ 0x24
 801ba68:	4604      	mov	r4, r0
 801ba6a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801ba6e:	9303      	str	r3, [sp, #12]
 801ba70:	f000 ff86 	bl	801c980 <uxr_session_header_offset>
 801ba74:	4605      	mov	r5, r0
 801ba76:	9905      	ldr	r1, [sp, #20]
 801ba78:	f104 0008 	add.w	r0, r4, #8
 801ba7c:	9500      	str	r5, [sp, #0]
 801ba7e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801ba82:	f001 fce7 	bl	801d454 <uxr_add_output_reliable_buffer>
 801ba86:	2200      	movs	r2, #0
 801ba88:	fa5f fc80 	uxtb.w	ip, r0
 801ba8c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801ba90:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801ba94:	0e03      	lsrs	r3, r0, #24
 801ba96:	f36c 0207 	bfi	r2, ip, #0, #8
 801ba9a:	f364 220f 	bfi	r2, r4, #8, #8
 801ba9e:	f361 4217 	bfi	r2, r1, #16, #8
 801baa2:	f363 621f 	bfi	r2, r3, #24, #8
 801baa6:	4610      	mov	r0, r2
 801baa8:	b009      	add	sp, #36	@ 0x24
 801baaa:	bd30      	pop	{r4, r5, pc}

0801baac <uxr_create_input_best_effort_stream>:
 801baac:	b082      	sub	sp, #8
 801baae:	3008      	adds	r0, #8
 801bab0:	b002      	add	sp, #8
 801bab2:	f001 bce9 	b.w	801d488 <uxr_add_input_best_effort_buffer>
 801bab6:	bf00      	nop

0801bab8 <uxr_create_input_reliable_stream>:
 801bab8:	b510      	push	{r4, lr}
 801baba:	4c0c      	ldr	r4, [pc, #48]	@ (801baec <uxr_create_input_reliable_stream+0x34>)
 801babc:	b084      	sub	sp, #16
 801babe:	3008      	adds	r0, #8
 801bac0:	9400      	str	r4, [sp, #0]
 801bac2:	f001 fcf7 	bl	801d4b4 <uxr_add_input_reliable_buffer>
 801bac6:	2200      	movs	r2, #0
 801bac8:	fa5f fe80 	uxtb.w	lr, r0
 801bacc:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 801bad0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801bad4:	0e03      	lsrs	r3, r0, #24
 801bad6:	f36e 0207 	bfi	r2, lr, #0, #8
 801bada:	f36c 220f 	bfi	r2, ip, #8, #8
 801bade:	f361 4217 	bfi	r2, r1, #16, #8
 801bae2:	f363 621f 	bfi	r2, r3, #24, #8
 801bae6:	4610      	mov	r0, r2
 801bae8:	b004      	add	sp, #16
 801baea:	bd10      	pop	{r4, pc}
 801baec:	0801b8c5 	.word	0x0801b8c5

0801baf0 <uxr_epoch_nanos>:
 801baf0:	b510      	push	{r4, lr}
 801baf2:	4604      	mov	r4, r0
 801baf4:	f001 fd9a 	bl	801d62c <uxr_nanos>
 801baf8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801bafc:	1ac0      	subs	r0, r0, r3
 801bafe:	eb61 0102 	sbc.w	r1, r1, r2
 801bb02:	bd10      	pop	{r4, pc}

0801bb04 <uxr_flash_output_streams>:
 801bb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb08:	7e03      	ldrb	r3, [r0, #24]
 801bb0a:	b084      	sub	sp, #16
 801bb0c:	4604      	mov	r4, r0
 801bb0e:	b1fb      	cbz	r3, 801bb50 <uxr_flash_output_streams+0x4c>
 801bb10:	f04f 0900 	mov.w	r9, #0
 801bb14:	f10d 0802 	add.w	r8, sp, #2
 801bb18:	af03      	add	r7, sp, #12
 801bb1a:	ae02      	add	r6, sp, #8
 801bb1c:	4648      	mov	r0, r9
 801bb1e:	2201      	movs	r2, #1
 801bb20:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801bb24:	4611      	mov	r1, r2
 801bb26:	3508      	adds	r5, #8
 801bb28:	f001 fbe0 	bl	801d2ec <uxr_stream_id>
 801bb2c:	4684      	mov	ip, r0
 801bb2e:	4643      	mov	r3, r8
 801bb30:	463a      	mov	r2, r7
 801bb32:	4631      	mov	r1, r6
 801bb34:	4628      	mov	r0, r5
 801bb36:	f8cd c004 	str.w	ip, [sp, #4]
 801bb3a:	f003 fead 	bl	801f898 <uxr_prepare_best_effort_buffer_to_send>
 801bb3e:	2800      	cmp	r0, #0
 801bb40:	d13d      	bne.n	801bbbe <uxr_flash_output_streams+0xba>
 801bb42:	f109 0901 	add.w	r9, r9, #1
 801bb46:	7e23      	ldrb	r3, [r4, #24]
 801bb48:	fa5f f089 	uxtb.w	r0, r9
 801bb4c:	4283      	cmp	r3, r0
 801bb4e:	d8e6      	bhi.n	801bb1e <uxr_flash_output_streams+0x1a>
 801bb50:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801bb54:	b383      	cbz	r3, 801bbb8 <uxr_flash_output_streams+0xb4>
 801bb56:	f04f 0900 	mov.w	r9, #0
 801bb5a:	f10d 0802 	add.w	r8, sp, #2
 801bb5e:	af03      	add	r7, sp, #12
 801bb60:	ae02      	add	r6, sp, #8
 801bb62:	4648      	mov	r0, r9
 801bb64:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801bb68:	2201      	movs	r2, #1
 801bb6a:	2102      	movs	r1, #2
 801bb6c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801bb70:	f001 fbbc 	bl	801d2ec <uxr_stream_id>
 801bb74:	9001      	str	r0, [sp, #4]
 801bb76:	3520      	adds	r5, #32
 801bb78:	e00c      	b.n	801bb94 <uxr_flash_output_streams+0x90>
 801bb7a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801bb7e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801bb82:	9b02      	ldr	r3, [sp, #8]
 801bb84:	f000 fea8 	bl	801c8d8 <uxr_stamp_session_header>
 801bb88:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801bb8a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801bb8e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801bb92:	47d0      	blx	sl
 801bb94:	4643      	mov	r3, r8
 801bb96:	463a      	mov	r2, r7
 801bb98:	4631      	mov	r1, r6
 801bb9a:	4628      	mov	r0, r5
 801bb9c:	f004 f8a0 	bl	801fce0 <uxr_prepare_next_reliable_buffer_to_send>
 801bba0:	4603      	mov	r3, r0
 801bba2:	4620      	mov	r0, r4
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d1e8      	bne.n	801bb7a <uxr_flash_output_streams+0x76>
 801bba8:	f109 0901 	add.w	r9, r9, #1
 801bbac:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801bbb0:	fa5f f089 	uxtb.w	r0, r9
 801bbb4:	4283      	cmp	r3, r0
 801bbb6:	d8d5      	bhi.n	801bb64 <uxr_flash_output_streams+0x60>
 801bbb8:	b004      	add	sp, #16
 801bbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbbe:	9b02      	ldr	r3, [sp, #8]
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801bbc6:	f109 0901 	add.w	r9, r9, #1
 801bbca:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801bbce:	f000 fe83 	bl	801c8d8 <uxr_stamp_session_header>
 801bbd2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801bbd4:	9a03      	ldr	r2, [sp, #12]
 801bbd6:	685d      	ldr	r5, [r3, #4]
 801bbd8:	6818      	ldr	r0, [r3, #0]
 801bbda:	9902      	ldr	r1, [sp, #8]
 801bbdc:	47a8      	blx	r5
 801bbde:	7e23      	ldrb	r3, [r4, #24]
 801bbe0:	fa5f f089 	uxtb.w	r0, r9
 801bbe4:	4283      	cmp	r3, r0
 801bbe6:	d89a      	bhi.n	801bb1e <uxr_flash_output_streams+0x1a>
 801bbe8:	e7b2      	b.n	801bb50 <uxr_flash_output_streams+0x4c>
 801bbea:	bf00      	nop

0801bbec <read_submessage_info>:
 801bbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbf0:	460d      	mov	r5, r1
 801bbf2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801bbf6:	4606      	mov	r6, r0
 801bbf8:	4669      	mov	r1, sp
 801bbfa:	4628      	mov	r0, r5
 801bbfc:	f002 fb7a 	bl	801e2f4 <uxr_deserialize_BaseObjectReply>
 801bc00:	4604      	mov	r4, r0
 801bc02:	a902      	add	r1, sp, #8
 801bc04:	4628      	mov	r0, r5
 801bc06:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801bc0a:	f7f6 fa19 	bl	8012040 <ucdr_deserialize_bool>
 801bc0e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801bc12:	4004      	ands	r4, r0
 801bc14:	b2e4      	uxtb	r4, r4
 801bc16:	b95b      	cbnz	r3, 801bc30 <read_submessage_info+0x44>
 801bc18:	a987      	add	r1, sp, #540	@ 0x21c
 801bc1a:	4628      	mov	r0, r5
 801bc1c:	f7f6 fa10 	bl	8012040 <ucdr_deserialize_bool>
 801bc20:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801bc24:	4680      	mov	r8, r0
 801bc26:	b94b      	cbnz	r3, 801bc3c <read_submessage_info+0x50>
 801bc28:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc30:	a903      	add	r1, sp, #12
 801bc32:	4628      	mov	r0, r5
 801bc34:	f002 fa0a 	bl	801e04c <uxr_deserialize_ObjectVariant>
 801bc38:	4004      	ands	r4, r0
 801bc3a:	e7ed      	b.n	801bc18 <read_submessage_info+0x2c>
 801bc3c:	a988      	add	r1, sp, #544	@ 0x220
 801bc3e:	4628      	mov	r0, r5
 801bc40:	f7f6 fa2c 	bl	801209c <ucdr_deserialize_uint8_t>
 801bc44:	ea14 0f08 	tst.w	r4, r8
 801bc48:	d0ee      	beq.n	801bc28 <read_submessage_info+0x3c>
 801bc4a:	2800      	cmp	r0, #0
 801bc4c:	d0ec      	beq.n	801bc28 <read_submessage_info+0x3c>
 801bc4e:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 801bc52:	2b0d      	cmp	r3, #13
 801bc54:	d1e8      	bne.n	801bc28 <read_submessage_info+0x3c>
 801bc56:	a98a      	add	r1, sp, #552	@ 0x228
 801bc58:	4628      	mov	r0, r5
 801bc5a:	f7f6 ffc5 	bl	8012be8 <ucdr_deserialize_int16_t>
 801bc5e:	b138      	cbz	r0, 801bc70 <read_submessage_info+0x84>
 801bc60:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	dd06      	ble.n	801bc76 <read_submessage_info+0x8a>
 801bc68:	2f00      	cmp	r7, #0
 801bc6a:	bf14      	ite	ne
 801bc6c:	2001      	movne	r0, #1
 801bc6e:	2002      	moveq	r0, #2
 801bc70:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 801bc74:	e7d8      	b.n	801bc28 <read_submessage_info+0x3c>
 801bc76:	2000      	movs	r0, #0
 801bc78:	e7fa      	b.n	801bc70 <read_submessage_info+0x84>
 801bc7a:	bf00      	nop

0801bc7c <read_submessage_list>:
 801bc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc80:	4604      	mov	r4, r0
 801bc82:	b097      	sub	sp, #92	@ 0x5c
 801bc84:	460d      	mov	r5, r1
 801bc86:	4ec1      	ldr	r6, [pc, #772]	@ (801bf8c <read_submessage_list+0x310>)
 801bc88:	9209      	str	r2, [sp, #36]	@ 0x24
 801bc8a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801bc8e:	aa0c      	add	r2, sp, #48	@ 0x30
 801bc90:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801bc94:	4628      	mov	r0, r5
 801bc96:	f001 fc81 	bl	801d59c <uxr_read_submessage_header>
 801bc9a:	2800      	cmp	r0, #0
 801bc9c:	f000 8142 	beq.w	801bf24 <read_submessage_list+0x2a8>
 801bca0:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801bca4:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 801bca8:	3b02      	subs	r3, #2
 801bcaa:	2b0d      	cmp	r3, #13
 801bcac:	d8ed      	bhi.n	801bc8a <read_submessage_list+0xe>
 801bcae:	a101      	add	r1, pc, #4	@ (adr r1, 801bcb4 <read_submessage_list+0x38>)
 801bcb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bcb4:	0801bf1b 	.word	0x0801bf1b
 801bcb8:	0801bc8b 	.word	0x0801bc8b
 801bcbc:	0801bf0b 	.word	0x0801bf0b
 801bcc0:	0801bea9 	.word	0x0801bea9
 801bcc4:	0801be9f 	.word	0x0801be9f
 801bcc8:	0801bc8b 	.word	0x0801bc8b
 801bccc:	0801bc8b 	.word	0x0801bc8b
 801bcd0:	0801bdf5 	.word	0x0801bdf5
 801bcd4:	0801bd87 	.word	0x0801bd87
 801bcd8:	0801bd47 	.word	0x0801bd47
 801bcdc:	0801bc8b 	.word	0x0801bc8b
 801bce0:	0801bc8b 	.word	0x0801bc8b
 801bce4:	0801bc8b 	.word	0x0801bc8b
 801bce8:	0801bced 	.word	0x0801bced
 801bcec:	a910      	add	r1, sp, #64	@ 0x40
 801bcee:	4628      	mov	r0, r5
 801bcf0:	f002 fd28 	bl	801e744 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801bcf4:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 801bcf8:	f1b8 0f00 	cmp.w	r8, #0
 801bcfc:	f000 811a 	beq.w	801bf34 <read_submessage_list+0x2b8>
 801bd00:	f001 fc94 	bl	801d62c <uxr_nanos>
 801bd04:	4602      	mov	r2, r0
 801bd06:	460b      	mov	r3, r1
 801bd08:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 801bd0c:	2100      	movs	r1, #0
 801bd0e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801bd10:	9006      	str	r0, [sp, #24]
 801bd12:	468c      	mov	ip, r1
 801bd14:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801bd16:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801bd1a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801bd1c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 801bd20:	468c      	mov	ip, r1
 801bd22:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801bd24:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801bd28:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801bd2c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 801bd30:	fbc7 0106 	smlal	r0, r1, r7, r6
 801bd34:	e9cd 0100 	strd	r0, r1, [sp]
 801bd38:	4620      	mov	r0, r4
 801bd3a:	47c0      	blx	r8
 801bd3c:	f04f 0301 	mov.w	r3, #1
 801bd40:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801bd44:	e7a1      	b.n	801bc8a <read_submessage_list+0xe>
 801bd46:	a910      	add	r1, sp, #64	@ 0x40
 801bd48:	4628      	mov	r0, r5
 801bd4a:	f002 fce7 	bl	801e71c <uxr_deserialize_HEARTBEAT_Payload>
 801bd4e:	2100      	movs	r1, #0
 801bd50:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801bd54:	f001 faf8 	bl	801d348 <uxr_stream_id_from_raw>
 801bd58:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801bd5c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801bd5e:	f104 0008 	add.w	r0, r4, #8
 801bd62:	4641      	mov	r1, r8
 801bd64:	f001 fbde 	bl	801d524 <uxr_get_input_reliable_stream>
 801bd68:	2800      	cmp	r0, #0
 801bd6a:	d08e      	beq.n	801bc8a <read_submessage_list+0xe>
 801bd6c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801bd70:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801bd74:	f003 fcfa 	bl	801f76c <uxr_process_heartbeat>
 801bd78:	4642      	mov	r2, r8
 801bd7a:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801bd7e:	4620      	mov	r0, r4
 801bd80:	f7ff fdf8 	bl	801b974 <write_submessage_acknack.isra.0>
 801bd84:	e781      	b.n	801bc8a <read_submessage_list+0xe>
 801bd86:	a910      	add	r1, sp, #64	@ 0x40
 801bd88:	4628      	mov	r0, r5
 801bd8a:	f002 fc9f 	bl	801e6cc <uxr_deserialize_ACKNACK_Payload>
 801bd8e:	2100      	movs	r1, #0
 801bd90:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801bd94:	f001 fad8 	bl	801d348 <uxr_stream_id_from_raw>
 801bd98:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801bd9c:	900d      	str	r0, [sp, #52]	@ 0x34
 801bd9e:	f104 0008 	add.w	r0, r4, #8
 801bda2:	f001 fba9 	bl	801d4f8 <uxr_get_output_reliable_stream>
 801bda6:	4680      	mov	r8, r0
 801bda8:	2800      	cmp	r0, #0
 801bdaa:	f43f af6e 	beq.w	801bc8a <read_submessage_list+0xe>
 801bdae:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801bdb2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801bdb6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801bdba:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801bdbe:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801bdc2:	b289      	uxth	r1, r1
 801bdc4:	f004 f834 	bl	801fe30 <uxr_process_acknack>
 801bdc8:	4640      	mov	r0, r8
 801bdca:	f003 fff5 	bl	801fdb8 <uxr_begin_output_nack_buffer_it>
 801bdce:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801bdd2:	e005      	b.n	801bde0 <read_submessage_list+0x164>
 801bdd4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801bdd6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 801bdda:	e9d3 0900 	ldrd	r0, r9, [r3]
 801bdde:	47c8      	blx	r9
 801bde0:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801bde4:	aa0f      	add	r2, sp, #60	@ 0x3c
 801bde6:	4651      	mov	r1, sl
 801bde8:	4640      	mov	r0, r8
 801bdea:	f003 ffe7 	bl	801fdbc <uxr_next_reliable_nack_buffer_to_send>
 801bdee:	2800      	cmp	r0, #0
 801bdf0:	d1f0      	bne.n	801bdd4 <read_submessage_list+0x158>
 801bdf2:	e74a      	b.n	801bc8a <read_submessage_list+0xe>
 801bdf4:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 801bdf8:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801bdfc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 801be00:	4628      	mov	r0, r5
 801be02:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801be06:	4651      	mov	r1, sl
 801be08:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801be0c:	f1a8 0804 	sub.w	r8, r8, #4
 801be10:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801be14:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 801be18:	fa1f f888 	uxth.w	r8, r8
 801be1c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801be20:	f009 090e 	and.w	r9, r9, #14
 801be24:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 801be28:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801be2c:	f002 f9b0 	bl	801e190 <uxr_deserialize_BaseObjectRequest>
 801be30:	4650      	mov	r0, sl
 801be32:	a90f      	add	r1, sp, #60	@ 0x3c
 801be34:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801be38:	f000 fdca 	bl	801c9d0 <uxr_parse_base_object_request>
 801be3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801be3e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801be42:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 801be46:	9110      	str	r1, [sp, #64]	@ 0x40
 801be48:	f1bb 0f00 	cmp.w	fp, #0
 801be4c:	d006      	beq.n	801be5c <read_submessage_list+0x1e0>
 801be4e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801be52:	4652      	mov	r2, sl
 801be54:	4620      	mov	r0, r4
 801be56:	9300      	str	r3, [sp, #0]
 801be58:	2300      	movs	r3, #0
 801be5a:	47d8      	blx	fp
 801be5c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801be5e:	b182      	cbz	r2, 801be82 <read_submessage_list+0x206>
 801be60:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801be62:	f04f 0c00 	mov.w	ip, #0
 801be66:	3902      	subs	r1, #2
 801be68:	e003      	b.n	801be72 <read_submessage_list+0x1f6>
 801be6a:	f10c 0c01 	add.w	ip, ip, #1
 801be6e:	4594      	cmp	ip, r2
 801be70:	d007      	beq.n	801be82 <read_submessage_list+0x206>
 801be72:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801be76:	4553      	cmp	r3, sl
 801be78:	d1f7      	bne.n	801be6a <read_submessage_list+0x1ee>
 801be7a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801be7c:	2200      	movs	r2, #0
 801be7e:	f803 200c 	strb.w	r2, [r3, ip]
 801be82:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801be86:	464b      	mov	r3, r9
 801be88:	4642      	mov	r2, r8
 801be8a:	4620      	mov	r0, r4
 801be8c:	9102      	str	r1, [sp, #8]
 801be8e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801be90:	9101      	str	r1, [sp, #4]
 801be92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801be94:	9100      	str	r1, [sp, #0]
 801be96:	4629      	mov	r1, r5
 801be98:	f7ff fc4a 	bl	801b730 <read_submessage_format>
 801be9c:	e6f5      	b.n	801bc8a <read_submessage_list+0xe>
 801be9e:	4629      	mov	r1, r5
 801bea0:	4620      	mov	r0, r4
 801bea2:	f7ff fea3 	bl	801bbec <read_submessage_info>
 801bea6:	e6f0      	b.n	801bc8a <read_submessage_list+0xe>
 801bea8:	2a00      	cmp	r2, #0
 801beaa:	d03e      	beq.n	801bf2a <read_submessage_list+0x2ae>
 801beac:	a910      	add	r1, sp, #64	@ 0x40
 801beae:	4628      	mov	r0, r5
 801beb0:	f002 fb64 	bl	801e57c <uxr_deserialize_STATUS_Payload>
 801beb4:	a90e      	add	r1, sp, #56	@ 0x38
 801beb6:	aa0d      	add	r2, sp, #52	@ 0x34
 801beb8:	a810      	add	r0, sp, #64	@ 0x40
 801beba:	f000 fd89 	bl	801c9d0 <uxr_parse_base_object_request>
 801bebe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801bec0:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801bec4:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801bec8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 801becc:	910f      	str	r1, [sp, #60]	@ 0x3c
 801bece:	f1ba 0f00 	cmp.w	sl, #0
 801bed2:	d006      	beq.n	801bee2 <read_submessage_list+0x266>
 801bed4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801bed8:	4642      	mov	r2, r8
 801beda:	4620      	mov	r0, r4
 801bedc:	9300      	str	r3, [sp, #0]
 801bede:	464b      	mov	r3, r9
 801bee0:	47d0      	blx	sl
 801bee2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801bee4:	2a00      	cmp	r2, #0
 801bee6:	f43f aed0 	beq.w	801bc8a <read_submessage_list+0xe>
 801beea:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801beec:	2100      	movs	r1, #0
 801beee:	3802      	subs	r0, #2
 801bef0:	e003      	b.n	801befa <read_submessage_list+0x27e>
 801bef2:	3101      	adds	r1, #1
 801bef4:	4291      	cmp	r1, r2
 801bef6:	f43f aec8 	beq.w	801bc8a <read_submessage_list+0xe>
 801befa:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801befe:	4543      	cmp	r3, r8
 801bf00:	d1f7      	bne.n	801bef2 <read_submessage_list+0x276>
 801bf02:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801bf04:	f803 9001 	strb.w	r9, [r3, r1]
 801bf08:	e6bf      	b.n	801bc8a <read_submessage_list+0xe>
 801bf0a:	2a00      	cmp	r2, #0
 801bf0c:	f47f aebd 	bne.w	801bc8a <read_submessage_list+0xe>
 801bf10:	4629      	mov	r1, r5
 801bf12:	4620      	mov	r0, r4
 801bf14:	f000 fca0 	bl	801c858 <uxr_read_create_session_status>
 801bf18:	e6b7      	b.n	801bc8a <read_submessage_list+0xe>
 801bf1a:	4629      	mov	r1, r5
 801bf1c:	4620      	mov	r0, r4
 801bf1e:	f7ff fcf3 	bl	801b908 <read_submessage_get_info>
 801bf22:	e6b2      	b.n	801bc8a <read_submessage_list+0xe>
 801bf24:	b017      	add	sp, #92	@ 0x5c
 801bf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf2a:	4629      	mov	r1, r5
 801bf2c:	4620      	mov	r0, r4
 801bf2e:	f000 fca1 	bl	801c874 <uxr_read_delete_session_status>
 801bf32:	e6aa      	b.n	801bc8a <read_submessage_list+0xe>
 801bf34:	f001 fb7a 	bl	801d62c <uxr_nanos>
 801bf38:	4642      	mov	r2, r8
 801bf3a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801bf3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bf3e:	fbc7 3206 	smlal	r3, r2, r7, r6
 801bf42:	1818      	adds	r0, r3, r0
 801bf44:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801bf46:	eb42 0101 	adc.w	r1, r2, r1
 801bf4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bf4c:	4642      	mov	r2, r8
 801bf4e:	fbc7 3206 	smlal	r3, r2, r7, r6
 801bf52:	469c      	mov	ip, r3
 801bf54:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 801bf58:	fbc3 7806 	smlal	r7, r8, r3, r6
 801bf5c:	4643      	mov	r3, r8
 801bf5e:	eb1c 0c07 	adds.w	ip, ip, r7
 801bf62:	eb42 0203 	adc.w	r2, r2, r3
 801bf66:	ebb0 030c 	subs.w	r3, r0, ip
 801bf6a:	eb61 0202 	sbc.w	r2, r1, r2
 801bf6e:	2a00      	cmp	r2, #0
 801bf70:	db08      	blt.n	801bf84 <read_submessage_list+0x308>
 801bf72:	085b      	lsrs	r3, r3, #1
 801bf74:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 801bf78:	1052      	asrs	r2, r2, #1
 801bf7a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 801bf7e:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801bf82:	e6db      	b.n	801bd3c <read_submessage_list+0xc0>
 801bf84:	3301      	adds	r3, #1
 801bf86:	f142 0200 	adc.w	r2, r2, #0
 801bf8a:	e7f2      	b.n	801bf72 <read_submessage_list+0x2f6>
 801bf8c:	3b9aca00 	.word	0x3b9aca00

0801bf90 <listen_message_reliably>:
 801bf90:	1e0b      	subs	r3, r1, #0
 801bf92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf96:	bfb8      	it	lt
 801bf98:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801bf9c:	b09d      	sub	sp, #116	@ 0x74
 801bf9e:	4680      	mov	r8, r0
 801bfa0:	9305      	str	r3, [sp, #20]
 801bfa2:	f001 fb27 	bl	801d5f4 <uxr_millis>
 801bfa6:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801bfaa:	4681      	mov	r9, r0
 801bfac:	2a00      	cmp	r2, #0
 801bfae:	f000 809a 	beq.w	801c0e6 <listen_message_reliably+0x156>
 801bfb2:	2600      	movs	r6, #0
 801bfb4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801bfb8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801bfbc:	460f      	mov	r7, r1
 801bfbe:	4630      	mov	r0, r6
 801bfc0:	9303      	str	r3, [sp, #12]
 801bfc2:	e00e      	b.n	801bfe2 <listen_message_reliably+0x52>
 801bfc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bfc6:	3601      	adds	r6, #1
 801bfc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bfca:	455a      	cmp	r2, fp
 801bfcc:	9903      	ldr	r1, [sp, #12]
 801bfce:	b2f0      	uxtb	r0, r6
 801bfd0:	eb73 0101 	sbcs.w	r1, r3, r1
 801bfd4:	da01      	bge.n	801bfda <listen_message_reliably+0x4a>
 801bfd6:	4693      	mov	fp, r2
 801bfd8:	9303      	str	r3, [sp, #12]
 801bfda:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801bfde:	4283      	cmp	r3, r0
 801bfe0:	d95f      	bls.n	801c0a2 <listen_message_reliably+0x112>
 801bfe2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801bfe6:	2102      	movs	r1, #2
 801bfe8:	2201      	movs	r2, #1
 801bfea:	00e4      	lsls	r4, r4, #3
 801bfec:	f001 f97e 	bl	801d2ec <uxr_stream_id>
 801bff0:	4601      	mov	r1, r0
 801bff2:	f104 0520 	add.w	r5, r4, #32
 801bff6:	463b      	mov	r3, r7
 801bff8:	464a      	mov	r2, r9
 801bffa:	9109      	str	r1, [sp, #36]	@ 0x24
 801bffc:	4445      	add	r5, r8
 801bffe:	4628      	mov	r0, r5
 801c000:	f003 feae 	bl	801fd60 <uxr_update_output_stream_heartbeat_timestamp>
 801c004:	eb08 0304 	add.w	r3, r8, r4
 801c008:	2800      	cmp	r0, #0
 801c00a:	d0db      	beq.n	801bfc4 <listen_message_reliably+0x34>
 801c00c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801c010:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 801c014:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801c018:	4640      	mov	r0, r8
 801c01a:	3501      	adds	r5, #1
 801c01c:	4444      	add	r4, r8
 801c01e:	9304      	str	r3, [sp, #16]
 801c020:	f000 fcae 	bl	801c980 <uxr_session_header_offset>
 801c024:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801c028:	2300      	movs	r3, #0
 801c02a:	2211      	movs	r2, #17
 801c02c:	a90c      	add	r1, sp, #48	@ 0x30
 801c02e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801c032:	9000      	str	r0, [sp, #0]
 801c034:	4650      	mov	r0, sl
 801c036:	3601      	adds	r6, #1
 801c038:	f7f7 fa72 	bl	8013520 <ucdr_init_buffer_origin_offset>
 801c03c:	2300      	movs	r3, #0
 801c03e:	2205      	movs	r2, #5
 801c040:	210b      	movs	r1, #11
 801c042:	4650      	mov	r0, sl
 801c044:	f001 fa90 	bl	801d568 <uxr_buffer_submessage_header>
 801c048:	2101      	movs	r1, #1
 801c04a:	8968      	ldrh	r0, [r5, #10]
 801c04c:	f003 ff2a 	bl	801fea4 <uxr_seq_num_add>
 801c050:	892b      	ldrh	r3, [r5, #8]
 801c052:	4602      	mov	r2, r0
 801c054:	a90a      	add	r1, sp, #40	@ 0x28
 801c056:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801c05a:	4650      	mov	r0, sl
 801c05c:	9b04      	ldr	r3, [sp, #16]
 801c05e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801c062:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801c066:	f002 fb45 	bl	801e6f4 <uxr_serialize_HEARTBEAT_Payload>
 801c06a:	2200      	movs	r2, #0
 801c06c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c06e:	4640      	mov	r0, r8
 801c070:	4611      	mov	r1, r2
 801c072:	f000 fc31 	bl	801c8d8 <uxr_stamp_session_header>
 801c076:	4650      	mov	r0, sl
 801c078:	f7f7 fa92 	bl	80135a0 <ucdr_buffer_length>
 801c07c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801c080:	4602      	mov	r2, r0
 801c082:	a90c      	add	r1, sp, #48	@ 0x30
 801c084:	e9d3 0500 	ldrd	r0, r5, [r3]
 801c088:	47a8      	blx	r5
 801c08a:	9903      	ldr	r1, [sp, #12]
 801c08c:	b2f0      	uxtb	r0, r6
 801c08e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801c092:	455a      	cmp	r2, fp
 801c094:	eb73 0101 	sbcs.w	r1, r3, r1
 801c098:	db9d      	blt.n	801bfd6 <listen_message_reliably+0x46>
 801c09a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801c09e:	4283      	cmp	r3, r0
 801c0a0:	d89f      	bhi.n	801bfe2 <listen_message_reliably+0x52>
 801c0a2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c0a6:	9a03      	ldr	r2, [sp, #12]
 801c0a8:	429a      	cmp	r2, r3
 801c0aa:	bf08      	it	eq
 801c0ac:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 801c0b0:	d019      	beq.n	801c0e6 <listen_message_reliably+0x156>
 801c0b2:	ebab 0309 	sub.w	r3, fp, r9
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	9d05      	ldr	r5, [sp, #20]
 801c0ba:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801c0be:	aa08      	add	r2, sp, #32
 801c0c0:	bf08      	it	eq
 801c0c2:	2301      	moveq	r3, #1
 801c0c4:	a907      	add	r1, sp, #28
 801c0c6:	6884      	ldr	r4, [r0, #8]
 801c0c8:	429d      	cmp	r5, r3
 801c0ca:	6800      	ldr	r0, [r0, #0]
 801c0cc:	bfa8      	it	ge
 801c0ce:	461d      	movge	r5, r3
 801c0d0:	462b      	mov	r3, r5
 801c0d2:	47a0      	blx	r4
 801c0d4:	b948      	cbnz	r0, 801c0ea <listen_message_reliably+0x15a>
 801c0d6:	9b05      	ldr	r3, [sp, #20]
 801c0d8:	1b5b      	subs	r3, r3, r5
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	9305      	str	r3, [sp, #20]
 801c0de:	f73f af60 	bgt.w	801bfa2 <listen_message_reliably+0x12>
 801c0e2:	4604      	mov	r4, r0
 801c0e4:	e012      	b.n	801c10c <listen_message_reliably+0x17c>
 801c0e6:	9b05      	ldr	r3, [sp, #20]
 801c0e8:	e7e5      	b.n	801c0b6 <listen_message_reliably+0x126>
 801c0ea:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801c0ee:	4604      	mov	r4, r0
 801c0f0:	2500      	movs	r5, #0
 801c0f2:	a80c      	add	r0, sp, #48	@ 0x30
 801c0f4:	f7f7 fa26 	bl	8013544 <ucdr_init_buffer>
 801c0f8:	f10d 031a 	add.w	r3, sp, #26
 801c0fc:	aa06      	add	r2, sp, #24
 801c0fe:	a90c      	add	r1, sp, #48	@ 0x30
 801c100:	4640      	mov	r0, r8
 801c102:	f88d 5018 	strb.w	r5, [sp, #24]
 801c106:	f000 fbfb 	bl	801c900 <uxr_read_session_header>
 801c10a:	b918      	cbnz	r0, 801c114 <listen_message_reliably+0x184>
 801c10c:	4620      	mov	r0, r4
 801c10e:	b01d      	add	sp, #116	@ 0x74
 801c110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c114:	4629      	mov	r1, r5
 801c116:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801c11a:	f001 f915 	bl	801d348 <uxr_stream_id_from_raw>
 801c11e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801c122:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801c126:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801c12a:	2e01      	cmp	r6, #1
 801c12c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801c130:	d04b      	beq.n	801c1ca <listen_message_reliably+0x23a>
 801c132:	2e02      	cmp	r6, #2
 801c134:	d00f      	beq.n	801c156 <listen_message_reliably+0x1c6>
 801c136:	2e00      	cmp	r6, #0
 801c138:	d1e8      	bne.n	801c10c <listen_message_reliably+0x17c>
 801c13a:	4631      	mov	r1, r6
 801c13c:	4630      	mov	r0, r6
 801c13e:	f001 f903 	bl	801d348 <uxr_stream_id_from_raw>
 801c142:	4602      	mov	r2, r0
 801c144:	a90c      	add	r1, sp, #48	@ 0x30
 801c146:	4640      	mov	r0, r8
 801c148:	920a      	str	r2, [sp, #40]	@ 0x28
 801c14a:	f7ff fd97 	bl	801bc7c <read_submessage_list>
 801c14e:	4620      	mov	r0, r4
 801c150:	b01d      	add	sp, #116	@ 0x74
 801c152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c156:	4629      	mov	r1, r5
 801c158:	f108 0008 	add.w	r0, r8, #8
 801c15c:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801c160:	f001 f9e0 	bl	801d524 <uxr_get_input_reliable_stream>
 801c164:	4607      	mov	r7, r0
 801c166:	b338      	cbz	r0, 801c1b8 <listen_message_reliably+0x228>
 801c168:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c16a:	a80c      	add	r0, sp, #48	@ 0x30
 801c16c:	9203      	str	r2, [sp, #12]
 801c16e:	f7f7 fa1b 	bl	80135a8 <ucdr_buffer_remaining>
 801c172:	4603      	mov	r3, r0
 801c174:	f10d 0019 	add.w	r0, sp, #25
 801c178:	9a03      	ldr	r2, [sp, #12]
 801c17a:	4651      	mov	r1, sl
 801c17c:	9000      	str	r0, [sp, #0]
 801c17e:	4638      	mov	r0, r7
 801c180:	f003 f9f8 	bl	801f574 <uxr_receive_reliable_message>
 801c184:	b1c0      	cbz	r0, 801c1b8 <listen_message_reliably+0x228>
 801c186:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801c18a:	b393      	cbz	r3, 801c1f2 <listen_message_reliably+0x262>
 801c18c:	ae14      	add	r6, sp, #80	@ 0x50
 801c18e:	f04f 0a02 	mov.w	sl, #2
 801c192:	e00a      	b.n	801c1aa <listen_message_reliably+0x21a>
 801c194:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801c198:	4631      	mov	r1, r6
 801c19a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801c19e:	4640      	mov	r0, r8
 801c1a0:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801c1a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c1a6:	f7ff fd69 	bl	801bc7c <read_submessage_list>
 801c1aa:	2204      	movs	r2, #4
 801c1ac:	4631      	mov	r1, r6
 801c1ae:	4638      	mov	r0, r7
 801c1b0:	f003 fa62 	bl	801f678 <uxr_next_input_reliable_buffer_available>
 801c1b4:	2800      	cmp	r0, #0
 801c1b6:	d1ed      	bne.n	801c194 <listen_message_reliably+0x204>
 801c1b8:	4640      	mov	r0, r8
 801c1ba:	462a      	mov	r2, r5
 801c1bc:	4649      	mov	r1, r9
 801c1be:	f7ff fbd9 	bl	801b974 <write_submessage_acknack.isra.0>
 801c1c2:	4620      	mov	r0, r4
 801c1c4:	b01d      	add	sp, #116	@ 0x74
 801c1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1ca:	4629      	mov	r1, r5
 801c1cc:	f108 0008 	add.w	r0, r8, #8
 801c1d0:	f001 f99e 	bl	801d510 <uxr_get_input_best_effort_stream>
 801c1d4:	2800      	cmp	r0, #0
 801c1d6:	d099      	beq.n	801c10c <listen_message_reliably+0x17c>
 801c1d8:	4651      	mov	r1, sl
 801c1da:	f003 f941 	bl	801f460 <uxr_receive_best_effort_message>
 801c1de:	2800      	cmp	r0, #0
 801c1e0:	d094      	beq.n	801c10c <listen_message_reliably+0x17c>
 801c1e2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801c1e6:	a90c      	add	r1, sp, #48	@ 0x30
 801c1e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c1ea:	4640      	mov	r0, r8
 801c1ec:	f7ff fd46 	bl	801bc7c <read_submessage_list>
 801c1f0:	e78c      	b.n	801c10c <listen_message_reliably+0x17c>
 801c1f2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801c1f6:	a90c      	add	r1, sp, #48	@ 0x30
 801c1f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c1fa:	4640      	mov	r0, r8
 801c1fc:	f7ff fd3e 	bl	801bc7c <read_submessage_list>
 801c200:	e7c4      	b.n	801c18c <listen_message_reliably+0x1fc>
 801c202:	bf00      	nop

0801c204 <uxr_run_session_timeout>:
 801c204:	b570      	push	{r4, r5, r6, lr}
 801c206:	4604      	mov	r4, r0
 801c208:	460d      	mov	r5, r1
 801c20a:	f001 f9f3 	bl	801d5f4 <uxr_millis>
 801c20e:	4606      	mov	r6, r0
 801c210:	4620      	mov	r0, r4
 801c212:	f7ff fc77 	bl	801bb04 <uxr_flash_output_streams>
 801c216:	4629      	mov	r1, r5
 801c218:	4620      	mov	r0, r4
 801c21a:	f7ff feb9 	bl	801bf90 <listen_message_reliably>
 801c21e:	f001 f9e9 	bl	801d5f4 <uxr_millis>
 801c222:	1b83      	subs	r3, r0, r6
 801c224:	1ae9      	subs	r1, r5, r3
 801c226:	2900      	cmp	r1, #0
 801c228:	dcf6      	bgt.n	801c218 <uxr_run_session_timeout+0x14>
 801c22a:	f104 0008 	add.w	r0, r4, #8
 801c22e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c232:	f001 b983 	b.w	801d53c <uxr_output_streams_confirmed>
 801c236:	bf00      	nop

0801c238 <uxr_run_session_until_data>:
 801c238:	b570      	push	{r4, r5, r6, lr}
 801c23a:	4604      	mov	r4, r0
 801c23c:	460d      	mov	r5, r1
 801c23e:	f001 f9d9 	bl	801d5f4 <uxr_millis>
 801c242:	4606      	mov	r6, r0
 801c244:	4620      	mov	r0, r4
 801c246:	f7ff fc5d 	bl	801bb04 <uxr_flash_output_streams>
 801c24a:	2300      	movs	r3, #0
 801c24c:	4629      	mov	r1, r5
 801c24e:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801c252:	e005      	b.n	801c260 <uxr_run_session_until_data+0x28>
 801c254:	f001 f9ce 	bl	801d5f4 <uxr_millis>
 801c258:	1b83      	subs	r3, r0, r6
 801c25a:	1ae9      	subs	r1, r5, r3
 801c25c:	2900      	cmp	r1, #0
 801c25e:	dd07      	ble.n	801c270 <uxr_run_session_until_data+0x38>
 801c260:	4620      	mov	r0, r4
 801c262:	f7ff fe95 	bl	801bf90 <listen_message_reliably>
 801c266:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801c26a:	2800      	cmp	r0, #0
 801c26c:	d0f2      	beq.n	801c254 <uxr_run_session_until_data+0x1c>
 801c26e:	bd70      	pop	{r4, r5, r6, pc}
 801c270:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801c274:	bd70      	pop	{r4, r5, r6, pc}
 801c276:	bf00      	nop

0801c278 <uxr_run_session_until_confirm_delivery>:
 801c278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c27c:	4606      	mov	r6, r0
 801c27e:	460d      	mov	r5, r1
 801c280:	f001 f9b8 	bl	801d5f4 <uxr_millis>
 801c284:	4607      	mov	r7, r0
 801c286:	4630      	mov	r0, r6
 801c288:	f106 0808 	add.w	r8, r6, #8
 801c28c:	f7ff fc3a 	bl	801bb04 <uxr_flash_output_streams>
 801c290:	2d00      	cmp	r5, #0
 801c292:	db10      	blt.n	801c2b6 <uxr_run_session_until_confirm_delivery+0x3e>
 801c294:	462c      	mov	r4, r5
 801c296:	e006      	b.n	801c2a6 <uxr_run_session_until_confirm_delivery+0x2e>
 801c298:	f7ff fe7a 	bl	801bf90 <listen_message_reliably>
 801c29c:	f001 f9aa 	bl	801d5f4 <uxr_millis>
 801c2a0:	1bc3      	subs	r3, r0, r7
 801c2a2:	1aec      	subs	r4, r5, r3
 801c2a4:	d407      	bmi.n	801c2b6 <uxr_run_session_until_confirm_delivery+0x3e>
 801c2a6:	4640      	mov	r0, r8
 801c2a8:	f001 f948 	bl	801d53c <uxr_output_streams_confirmed>
 801c2ac:	4603      	mov	r3, r0
 801c2ae:	4621      	mov	r1, r4
 801c2b0:	4630      	mov	r0, r6
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d0f0      	beq.n	801c298 <uxr_run_session_until_confirm_delivery+0x20>
 801c2b6:	4640      	mov	r0, r8
 801c2b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2bc:	f001 b93e 	b.w	801d53c <uxr_output_streams_confirmed>

0801c2c0 <uxr_run_session_until_all_status>:
 801c2c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2c4:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 801c2c8:	4606      	mov	r6, r0
 801c2ca:	4688      	mov	r8, r1
 801c2cc:	4692      	mov	sl, r2
 801c2ce:	461f      	mov	r7, r3
 801c2d0:	f7ff fc18 	bl	801bb04 <uxr_flash_output_streams>
 801c2d4:	f1bb 0f00 	cmp.w	fp, #0
 801c2d8:	d004      	beq.n	801c2e4 <uxr_run_session_until_all_status+0x24>
 801c2da:	465a      	mov	r2, fp
 801c2dc:	21ff      	movs	r1, #255	@ 0xff
 801c2de:	4638      	mov	r0, r7
 801c2e0:	f004 fad8 	bl	8020894 <memset>
 801c2e4:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 801c2e8:	1e7d      	subs	r5, r7, #1
 801c2ea:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 801c2ee:	f001 f981 	bl	801d5f4 <uxr_millis>
 801c2f2:	4641      	mov	r1, r8
 801c2f4:	4681      	mov	r9, r0
 801c2f6:	4630      	mov	r0, r6
 801c2f8:	f7ff fe4a 	bl	801bf90 <listen_message_reliably>
 801c2fc:	f001 f97a 	bl	801d5f4 <uxr_millis>
 801c300:	eba0 0009 	sub.w	r0, r0, r9
 801c304:	eba8 0100 	sub.w	r1, r8, r0
 801c308:	f1bb 0f00 	cmp.w	fp, #0
 801c30c:	d029      	beq.n	801c362 <uxr_run_session_until_all_status+0xa2>
 801c30e:	46ae      	mov	lr, r5
 801c310:	f04f 0c00 	mov.w	ip, #0
 801c314:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 801c318:	2cff      	cmp	r4, #255	@ 0xff
 801c31a:	d015      	beq.n	801c348 <uxr_run_session_until_all_status+0x88>
 801c31c:	f10c 0c01 	add.w	ip, ip, #1
 801c320:	45e3      	cmp	fp, ip
 801c322:	d8f7      	bhi.n	801c314 <uxr_run_session_until_all_status+0x54>
 801c324:	2300      	movs	r3, #0
 801c326:	67f3      	str	r3, [r6, #124]	@ 0x7c
 801c328:	e000      	b.n	801c32c <uxr_run_session_until_all_status+0x6c>
 801c32a:	b158      	cbz	r0, 801c344 <uxr_run_session_until_all_status+0x84>
 801c32c:	462b      	mov	r3, r5
 801c32e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801c332:	3302      	adds	r3, #2
 801c334:	2801      	cmp	r0, #1
 801c336:	eba3 0307 	sub.w	r3, r3, r7
 801c33a:	bf8c      	ite	hi
 801c33c:	2000      	movhi	r0, #0
 801c33e:	2001      	movls	r0, #1
 801c340:	459b      	cmp	fp, r3
 801c342:	d8f2      	bhi.n	801c32a <uxr_run_session_until_all_status+0x6a>
 801c344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c348:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801c34c:	f10c 0c01 	add.w	ip, ip, #1
 801c350:	45dc      	cmp	ip, fp
 801c352:	d201      	bcs.n	801c358 <uxr_run_session_until_all_status+0x98>
 801c354:	2b00      	cmp	r3, #0
 801c356:	d0dd      	beq.n	801c314 <uxr_run_session_until_all_status+0x54>
 801c358:	2900      	cmp	r1, #0
 801c35a:	dde3      	ble.n	801c324 <uxr_run_session_until_all_status+0x64>
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d1ca      	bne.n	801c2f6 <uxr_run_session_until_all_status+0x36>
 801c360:	e7e0      	b.n	801c324 <uxr_run_session_until_all_status+0x64>
 801c362:	2001      	movs	r0, #1
 801c364:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 801c368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c36c <wait_session_status>:
 801c36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c370:	4604      	mov	r4, r0
 801c372:	b09d      	sub	sp, #116	@ 0x74
 801c374:	20ff      	movs	r0, #255	@ 0xff
 801c376:	9303      	str	r3, [sp, #12]
 801c378:	7160      	strb	r0, [r4, #5]
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	f000 80b6 	beq.w	801c4ec <wait_session_status+0x180>
 801c380:	4689      	mov	r9, r1
 801c382:	4692      	mov	sl, r2
 801c384:	f04f 0b00 	mov.w	fp, #0
 801c388:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801c38a:	4652      	mov	r2, sl
 801c38c:	4649      	mov	r1, r9
 801c38e:	e9d3 0500 	ldrd	r0, r5, [r3]
 801c392:	47a8      	blx	r5
 801c394:	f001 f92e 	bl	801d5f4 <uxr_millis>
 801c398:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c39c:	4605      	mov	r5, r0
 801c39e:	e009      	b.n	801c3b4 <wait_session_status+0x48>
 801c3a0:	f001 f928 	bl	801d5f4 <uxr_millis>
 801c3a4:	1b40      	subs	r0, r0, r5
 801c3a6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	dd40      	ble.n	801c430 <wait_session_status+0xc4>
 801c3ae:	7960      	ldrb	r0, [r4, #5]
 801c3b0:	28ff      	cmp	r0, #255	@ 0xff
 801c3b2:	d145      	bne.n	801c440 <wait_session_status+0xd4>
 801c3b4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801c3b6:	a908      	add	r1, sp, #32
 801c3b8:	6896      	ldr	r6, [r2, #8]
 801c3ba:	6810      	ldr	r0, [r2, #0]
 801c3bc:	aa09      	add	r2, sp, #36	@ 0x24
 801c3be:	47b0      	blx	r6
 801c3c0:	2800      	cmp	r0, #0
 801c3c2:	d0ed      	beq.n	801c3a0 <wait_session_status+0x34>
 801c3c4:	a80c      	add	r0, sp, #48	@ 0x30
 801c3c6:	2600      	movs	r6, #0
 801c3c8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801c3cc:	f7f7 f8ba 	bl	8013544 <ucdr_init_buffer>
 801c3d0:	f10d 031e 	add.w	r3, sp, #30
 801c3d4:	aa07      	add	r2, sp, #28
 801c3d6:	a90c      	add	r1, sp, #48	@ 0x30
 801c3d8:	4620      	mov	r0, r4
 801c3da:	f88d 601c 	strb.w	r6, [sp, #28]
 801c3de:	f000 fa8f 	bl	801c900 <uxr_read_session_header>
 801c3e2:	2800      	cmp	r0, #0
 801c3e4:	d0dc      	beq.n	801c3a0 <wait_session_status+0x34>
 801c3e6:	4631      	mov	r1, r6
 801c3e8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801c3ec:	f000 ffac 	bl	801d348 <uxr_stream_id_from_raw>
 801c3f0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801c3f4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801c3f8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801c3fc:	2f01      	cmp	r7, #1
 801c3fe:	9302      	str	r3, [sp, #8]
 801c400:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801c404:	d05c      	beq.n	801c4c0 <wait_session_status+0x154>
 801c406:	2f02      	cmp	r7, #2
 801c408:	d020      	beq.n	801c44c <wait_session_status+0xe0>
 801c40a:	2f00      	cmp	r7, #0
 801c40c:	d1c8      	bne.n	801c3a0 <wait_session_status+0x34>
 801c40e:	4639      	mov	r1, r7
 801c410:	4638      	mov	r0, r7
 801c412:	f000 ff99 	bl	801d348 <uxr_stream_id_from_raw>
 801c416:	a90c      	add	r1, sp, #48	@ 0x30
 801c418:	4602      	mov	r2, r0
 801c41a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c41c:	4620      	mov	r0, r4
 801c41e:	f7ff fc2d 	bl	801bc7c <read_submessage_list>
 801c422:	f001 f8e7 	bl	801d5f4 <uxr_millis>
 801c426:	1b40      	subs	r0, r0, r5
 801c428:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	dcbe      	bgt.n	801c3ae <wait_session_status+0x42>
 801c430:	f10b 0b01 	add.w	fp, fp, #1
 801c434:	9b03      	ldr	r3, [sp, #12]
 801c436:	7960      	ldrb	r0, [r4, #5]
 801c438:	455b      	cmp	r3, fp
 801c43a:	d001      	beq.n	801c440 <wait_session_status+0xd4>
 801c43c:	28ff      	cmp	r0, #255	@ 0xff
 801c43e:	d0a3      	beq.n	801c388 <wait_session_status+0x1c>
 801c440:	38ff      	subs	r0, #255	@ 0xff
 801c442:	bf18      	it	ne
 801c444:	2001      	movne	r0, #1
 801c446:	b01d      	add	sp, #116	@ 0x74
 801c448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c44c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801c450:	4631      	mov	r1, r6
 801c452:	f104 0008 	add.w	r0, r4, #8
 801c456:	9304      	str	r3, [sp, #16]
 801c458:	f001 f864 	bl	801d524 <uxr_get_input_reliable_stream>
 801c45c:	4680      	mov	r8, r0
 801c45e:	b348      	cbz	r0, 801c4b4 <wait_session_status+0x148>
 801c460:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c462:	a80c      	add	r0, sp, #48	@ 0x30
 801c464:	9205      	str	r2, [sp, #20]
 801c466:	f7f7 f89f 	bl	80135a8 <ucdr_buffer_remaining>
 801c46a:	4603      	mov	r3, r0
 801c46c:	f10d 001d 	add.w	r0, sp, #29
 801c470:	9a05      	ldr	r2, [sp, #20]
 801c472:	9000      	str	r0, [sp, #0]
 801c474:	4640      	mov	r0, r8
 801c476:	9902      	ldr	r1, [sp, #8]
 801c478:	f003 f87c 	bl	801f574 <uxr_receive_reliable_message>
 801c47c:	b1d0      	cbz	r0, 801c4b4 <wait_session_status+0x148>
 801c47e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801c482:	2b00      	cmp	r3, #0
 801c484:	d03a      	beq.n	801c4fc <wait_session_status+0x190>
 801c486:	9f04      	ldr	r7, [sp, #16]
 801c488:	e00a      	b.n	801c4a0 <wait_session_status+0x134>
 801c48a:	f04f 0302 	mov.w	r3, #2
 801c48e:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801c492:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801c496:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801c49a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c49c:	f7ff fbee 	bl	801bc7c <read_submessage_list>
 801c4a0:	a914      	add	r1, sp, #80	@ 0x50
 801c4a2:	2204      	movs	r2, #4
 801c4a4:	4640      	mov	r0, r8
 801c4a6:	f003 f8e7 	bl	801f678 <uxr_next_input_reliable_buffer_available>
 801c4aa:	4603      	mov	r3, r0
 801c4ac:	a914      	add	r1, sp, #80	@ 0x50
 801c4ae:	4620      	mov	r0, r4
 801c4b0:	2b00      	cmp	r3, #0
 801c4b2:	d1ea      	bne.n	801c48a <wait_session_status+0x11e>
 801c4b4:	4632      	mov	r2, r6
 801c4b6:	9904      	ldr	r1, [sp, #16]
 801c4b8:	4620      	mov	r0, r4
 801c4ba:	f7ff fa5b 	bl	801b974 <write_submessage_acknack.isra.0>
 801c4be:	e76f      	b.n	801c3a0 <wait_session_status+0x34>
 801c4c0:	4631      	mov	r1, r6
 801c4c2:	f104 0008 	add.w	r0, r4, #8
 801c4c6:	f001 f823 	bl	801d510 <uxr_get_input_best_effort_stream>
 801c4ca:	2800      	cmp	r0, #0
 801c4cc:	f43f af68 	beq.w	801c3a0 <wait_session_status+0x34>
 801c4d0:	9902      	ldr	r1, [sp, #8]
 801c4d2:	f002 ffc5 	bl	801f460 <uxr_receive_best_effort_message>
 801c4d6:	2800      	cmp	r0, #0
 801c4d8:	f43f af62 	beq.w	801c3a0 <wait_session_status+0x34>
 801c4dc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801c4e0:	a90c      	add	r1, sp, #48	@ 0x30
 801c4e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c4e4:	4620      	mov	r0, r4
 801c4e6:	f7ff fbc9 	bl	801bc7c <read_submessage_list>
 801c4ea:	e759      	b.n	801c3a0 <wait_session_status+0x34>
 801c4ec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801c4ee:	e9d3 0400 	ldrd	r0, r4, [r3]
 801c4f2:	47a0      	blx	r4
 801c4f4:	2001      	movs	r0, #1
 801c4f6:	b01d      	add	sp, #116	@ 0x74
 801c4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4fc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801c500:	a90c      	add	r1, sp, #48	@ 0x30
 801c502:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c504:	4620      	mov	r0, r4
 801c506:	f7ff fbb9 	bl	801bc7c <read_submessage_list>
 801c50a:	e7bc      	b.n	801c486 <wait_session_status+0x11a>

0801c50c <uxr_delete_session_retries>:
 801c50c:	b530      	push	{r4, r5, lr}
 801c50e:	b08f      	sub	sp, #60	@ 0x3c
 801c510:	4604      	mov	r4, r0
 801c512:	460d      	mov	r5, r1
 801c514:	f000 fa34 	bl	801c980 <uxr_session_header_offset>
 801c518:	2300      	movs	r3, #0
 801c51a:	2210      	movs	r2, #16
 801c51c:	a902      	add	r1, sp, #8
 801c51e:	9000      	str	r0, [sp, #0]
 801c520:	a806      	add	r0, sp, #24
 801c522:	f7f6 fffd 	bl	8013520 <ucdr_init_buffer_origin_offset>
 801c526:	a906      	add	r1, sp, #24
 801c528:	4620      	mov	r0, r4
 801c52a:	f000 f979 	bl	801c820 <uxr_buffer_delete_session>
 801c52e:	2200      	movs	r2, #0
 801c530:	9b06      	ldr	r3, [sp, #24]
 801c532:	4620      	mov	r0, r4
 801c534:	4611      	mov	r1, r2
 801c536:	f000 f9cf 	bl	801c8d8 <uxr_stamp_session_header>
 801c53a:	a806      	add	r0, sp, #24
 801c53c:	f7f7 f830 	bl	80135a0 <ucdr_buffer_length>
 801c540:	462b      	mov	r3, r5
 801c542:	4602      	mov	r2, r0
 801c544:	a902      	add	r1, sp, #8
 801c546:	4620      	mov	r0, r4
 801c548:	f7ff ff10 	bl	801c36c <wait_session_status>
 801c54c:	b118      	cbz	r0, 801c556 <uxr_delete_session_retries+0x4a>
 801c54e:	7960      	ldrb	r0, [r4, #5]
 801c550:	fab0 f080 	clz	r0, r0
 801c554:	0940      	lsrs	r0, r0, #5
 801c556:	b00f      	add	sp, #60	@ 0x3c
 801c558:	bd30      	pop	{r4, r5, pc}
 801c55a:	bf00      	nop

0801c55c <uxr_create_session>:
 801c55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c560:	f100 0b08 	add.w	fp, r0, #8
 801c564:	4604      	mov	r4, r0
 801c566:	b0ab      	sub	sp, #172	@ 0xac
 801c568:	4658      	mov	r0, fp
 801c56a:	465e      	mov	r6, fp
 801c56c:	f000 ff22 	bl	801d3b4 <uxr_reset_stream_storage>
 801c570:	4620      	mov	r0, r4
 801c572:	f000 fa05 	bl	801c980 <uxr_session_header_offset>
 801c576:	2300      	movs	r3, #0
 801c578:	221c      	movs	r2, #28
 801c57a:	a90b      	add	r1, sp, #44	@ 0x2c
 801c57c:	9000      	str	r0, [sp, #0]
 801c57e:	a812      	add	r0, sp, #72	@ 0x48
 801c580:	f7f6 ffce 	bl	8013520 <ucdr_init_buffer_origin_offset>
 801c584:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801c586:	a912      	add	r1, sp, #72	@ 0x48
 801c588:	4620      	mov	r0, r4
 801c58a:	8a1a      	ldrh	r2, [r3, #16]
 801c58c:	3a04      	subs	r2, #4
 801c58e:	b292      	uxth	r2, r2
 801c590:	f000 f91c 	bl	801c7cc <uxr_buffer_create_session>
 801c594:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c596:	4620      	mov	r0, r4
 801c598:	f000 f98a 	bl	801c8b0 <uxr_stamp_create_session_header>
 801c59c:	a812      	add	r0, sp, #72	@ 0x48
 801c59e:	f7f6 ffff 	bl	80135a0 <ucdr_buffer_length>
 801c5a2:	23ff      	movs	r3, #255	@ 0xff
 801c5a4:	4681      	mov	r9, r0
 801c5a6:	7163      	strb	r3, [r4, #5]
 801c5a8:	230a      	movs	r3, #10
 801c5aa:	9303      	str	r3, [sp, #12]
 801c5ac:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801c5ae:	464a      	mov	r2, r9
 801c5b0:	a90b      	add	r1, sp, #44	@ 0x2c
 801c5b2:	e9d3 0500 	ldrd	r0, r5, [r3]
 801c5b6:	47a8      	blx	r5
 801c5b8:	f001 f81c 	bl	801d5f4 <uxr_millis>
 801c5bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c5c0:	4605      	mov	r5, r0
 801c5c2:	e009      	b.n	801c5d8 <uxr_create_session+0x7c>
 801c5c4:	f001 f816 	bl	801d5f4 <uxr_millis>
 801c5c8:	1b40      	subs	r0, r0, r5
 801c5ca:	7962      	ldrb	r2, [r4, #5]
 801c5cc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	dd38      	ble.n	801c646 <uxr_create_session+0xea>
 801c5d4:	2aff      	cmp	r2, #255	@ 0xff
 801c5d6:	d13c      	bne.n	801c652 <uxr_create_session+0xf6>
 801c5d8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801c5da:	a907      	add	r1, sp, #28
 801c5dc:	6897      	ldr	r7, [r2, #8]
 801c5de:	6810      	ldr	r0, [r2, #0]
 801c5e0:	aa08      	add	r2, sp, #32
 801c5e2:	47b8      	blx	r7
 801c5e4:	2800      	cmp	r0, #0
 801c5e6:	d0ed      	beq.n	801c5c4 <uxr_create_session+0x68>
 801c5e8:	a81a      	add	r0, sp, #104	@ 0x68
 801c5ea:	2700      	movs	r7, #0
 801c5ec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801c5f0:	f7f6 ffa8 	bl	8013544 <ucdr_init_buffer>
 801c5f4:	f10d 031a 	add.w	r3, sp, #26
 801c5f8:	aa06      	add	r2, sp, #24
 801c5fa:	a91a      	add	r1, sp, #104	@ 0x68
 801c5fc:	4620      	mov	r0, r4
 801c5fe:	f88d 7018 	strb.w	r7, [sp, #24]
 801c602:	f000 f97d 	bl	801c900 <uxr_read_session_header>
 801c606:	2800      	cmp	r0, #0
 801c608:	d0dc      	beq.n	801c5c4 <uxr_create_session+0x68>
 801c60a:	4639      	mov	r1, r7
 801c60c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801c610:	f000 fe9a 	bl	801d348 <uxr_stream_id_from_raw>
 801c614:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801c618:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 801c61c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801c620:	2f01      	cmp	r7, #1
 801c622:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801c626:	d053      	beq.n	801c6d0 <uxr_create_session+0x174>
 801c628:	2f02      	cmp	r7, #2
 801c62a:	d018      	beq.n	801c65e <uxr_create_session+0x102>
 801c62c:	2f00      	cmp	r7, #0
 801c62e:	d1c9      	bne.n	801c5c4 <uxr_create_session+0x68>
 801c630:	4639      	mov	r1, r7
 801c632:	4638      	mov	r0, r7
 801c634:	f000 fe88 	bl	801d348 <uxr_stream_id_from_raw>
 801c638:	a91a      	add	r1, sp, #104	@ 0x68
 801c63a:	4602      	mov	r2, r0
 801c63c:	900a      	str	r0, [sp, #40]	@ 0x28
 801c63e:	4620      	mov	r0, r4
 801c640:	f7ff fb1c 	bl	801bc7c <read_submessage_list>
 801c644:	e7be      	b.n	801c5c4 <uxr_create_session+0x68>
 801c646:	9b03      	ldr	r3, [sp, #12]
 801c648:	3b01      	subs	r3, #1
 801c64a:	9303      	str	r3, [sp, #12]
 801c64c:	d001      	beq.n	801c652 <uxr_create_session+0xf6>
 801c64e:	2aff      	cmp	r2, #255	@ 0xff
 801c650:	d0ac      	beq.n	801c5ac <uxr_create_session+0x50>
 801c652:	2a00      	cmp	r2, #0
 801c654:	d051      	beq.n	801c6fa <uxr_create_session+0x19e>
 801c656:	2000      	movs	r0, #0
 801c658:	b02b      	add	sp, #172	@ 0xac
 801c65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c65e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801c662:	4641      	mov	r1, r8
 801c664:	4630      	mov	r0, r6
 801c666:	9304      	str	r3, [sp, #16]
 801c668:	f000 ff5c 	bl	801d524 <uxr_get_input_reliable_stream>
 801c66c:	4682      	mov	sl, r0
 801c66e:	b348      	cbz	r0, 801c6c4 <uxr_create_session+0x168>
 801c670:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801c672:	a81a      	add	r0, sp, #104	@ 0x68
 801c674:	9205      	str	r2, [sp, #20]
 801c676:	f7f6 ff97 	bl	80135a8 <ucdr_buffer_remaining>
 801c67a:	4603      	mov	r3, r0
 801c67c:	f10d 0019 	add.w	r0, sp, #25
 801c680:	9a05      	ldr	r2, [sp, #20]
 801c682:	4659      	mov	r1, fp
 801c684:	9000      	str	r0, [sp, #0]
 801c686:	4650      	mov	r0, sl
 801c688:	f002 ff74 	bl	801f574 <uxr_receive_reliable_message>
 801c68c:	b1d0      	cbz	r0, 801c6c4 <uxr_create_session+0x168>
 801c68e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d038      	beq.n	801c708 <uxr_create_session+0x1ac>
 801c696:	9f04      	ldr	r7, [sp, #16]
 801c698:	e00a      	b.n	801c6b0 <uxr_create_session+0x154>
 801c69a:	f04f 0302 	mov.w	r3, #2
 801c69e:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801c6a2:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801c6a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c6aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c6ac:	f7ff fae6 	bl	801bc7c <read_submessage_list>
 801c6b0:	a922      	add	r1, sp, #136	@ 0x88
 801c6b2:	2204      	movs	r2, #4
 801c6b4:	4650      	mov	r0, sl
 801c6b6:	f002 ffdf 	bl	801f678 <uxr_next_input_reliable_buffer_available>
 801c6ba:	4603      	mov	r3, r0
 801c6bc:	a922      	add	r1, sp, #136	@ 0x88
 801c6be:	4620      	mov	r0, r4
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	d1ea      	bne.n	801c69a <uxr_create_session+0x13e>
 801c6c4:	4642      	mov	r2, r8
 801c6c6:	9904      	ldr	r1, [sp, #16]
 801c6c8:	4620      	mov	r0, r4
 801c6ca:	f7ff f953 	bl	801b974 <write_submessage_acknack.isra.0>
 801c6ce:	e779      	b.n	801c5c4 <uxr_create_session+0x68>
 801c6d0:	4641      	mov	r1, r8
 801c6d2:	4630      	mov	r0, r6
 801c6d4:	f000 ff1c 	bl	801d510 <uxr_get_input_best_effort_stream>
 801c6d8:	2800      	cmp	r0, #0
 801c6da:	f43f af73 	beq.w	801c5c4 <uxr_create_session+0x68>
 801c6de:	4659      	mov	r1, fp
 801c6e0:	f002 febe 	bl	801f460 <uxr_receive_best_effort_message>
 801c6e4:	2800      	cmp	r0, #0
 801c6e6:	f43f af6d 	beq.w	801c5c4 <uxr_create_session+0x68>
 801c6ea:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801c6ee:	a91a      	add	r1, sp, #104	@ 0x68
 801c6f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c6f2:	4620      	mov	r0, r4
 801c6f4:	f7ff fac2 	bl	801bc7c <read_submessage_list>
 801c6f8:	e764      	b.n	801c5c4 <uxr_create_session+0x68>
 801c6fa:	4630      	mov	r0, r6
 801c6fc:	f000 fe5a 	bl	801d3b4 <uxr_reset_stream_storage>
 801c700:	2001      	movs	r0, #1
 801c702:	b02b      	add	sp, #172	@ 0xac
 801c704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c708:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801c70c:	a91a      	add	r1, sp, #104	@ 0x68
 801c70e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c710:	4620      	mov	r0, r4
 801c712:	f7ff fab3 	bl	801bc7c <read_submessage_list>
 801c716:	e7be      	b.n	801c696 <uxr_create_session+0x13a>

0801c718 <uxr_prepare_stream_to_write_submessage>:
 801c718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c71c:	b082      	sub	sp, #8
 801c71e:	4604      	mov	r4, r0
 801c720:	4610      	mov	r0, r2
 801c722:	4615      	mov	r5, r2
 801c724:	461e      	mov	r6, r3
 801c726:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 801c72a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801c72e:	f105 0904 	add.w	r9, r5, #4
 801c732:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801c736:	9101      	str	r1, [sp, #4]
 801c738:	f000 ff56 	bl	801d5e8 <uxr_submessage_padding>
 801c73c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801c740:	4481      	add	r9, r0
 801c742:	2b01      	cmp	r3, #1
 801c744:	d01d      	beq.n	801c782 <uxr_prepare_stream_to_write_submessage+0x6a>
 801c746:	2b02      	cmp	r3, #2
 801c748:	d116      	bne.n	801c778 <uxr_prepare_stream_to_write_submessage+0x60>
 801c74a:	f104 0008 	add.w	r0, r4, #8
 801c74e:	4651      	mov	r1, sl
 801c750:	f000 fed2 	bl	801d4f8 <uxr_get_output_reliable_stream>
 801c754:	4604      	mov	r4, r0
 801c756:	b158      	cbz	r0, 801c770 <uxr_prepare_stream_to_write_submessage+0x58>
 801c758:	4649      	mov	r1, r9
 801c75a:	4632      	mov	r2, r6
 801c75c:	f003 f952 	bl	801fa04 <uxr_prepare_reliable_buffer_to_write>
 801c760:	4604      	mov	r4, r0
 801c762:	b12c      	cbz	r4, 801c770 <uxr_prepare_stream_to_write_submessage+0x58>
 801c764:	4643      	mov	r3, r8
 801c766:	b2aa      	uxth	r2, r5
 801c768:	4639      	mov	r1, r7
 801c76a:	4630      	mov	r0, r6
 801c76c:	f000 fefc 	bl	801d568 <uxr_buffer_submessage_header>
 801c770:	4620      	mov	r0, r4
 801c772:	b002      	add	sp, #8
 801c774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c778:	2400      	movs	r4, #0
 801c77a:	4620      	mov	r0, r4
 801c77c:	b002      	add	sp, #8
 801c77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c782:	f104 0008 	add.w	r0, r4, #8
 801c786:	4651      	mov	r1, sl
 801c788:	f000 feae 	bl	801d4e8 <uxr_get_output_best_effort_stream>
 801c78c:	4604      	mov	r4, r0
 801c78e:	2800      	cmp	r0, #0
 801c790:	d0ee      	beq.n	801c770 <uxr_prepare_stream_to_write_submessage+0x58>
 801c792:	4649      	mov	r1, r9
 801c794:	4632      	mov	r2, r6
 801c796:	f003 f85f 	bl	801f858 <uxr_prepare_best_effort_buffer_to_write>
 801c79a:	4604      	mov	r4, r0
 801c79c:	e7e1      	b.n	801c762 <uxr_prepare_stream_to_write_submessage+0x4a>
 801c79e:	bf00      	nop

0801c7a0 <uxr_init_session_info>:
 801c7a0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801c7a4:	23ff      	movs	r3, #255	@ 0xff
 801c7a6:	7102      	strb	r2, [r0, #4]
 801c7a8:	f880 c001 	strb.w	ip, [r0, #1]
 801c7ac:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801c7b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c7b4:	7001      	strb	r1, [r0, #0]
 801c7b6:	f880 c002 	strb.w	ip, [r0, #2]
 801c7ba:	7143      	strb	r3, [r0, #5]
 801c7bc:	70c2      	strb	r2, [r0, #3]
 801c7be:	b500      	push	{lr}
 801c7c0:	f04f 0e09 	mov.w	lr, #9
 801c7c4:	f8a0 e006 	strh.w	lr, [r0, #6]
 801c7c8:	f85d fb04 	ldr.w	pc, [sp], #4

0801c7cc <uxr_buffer_create_session>:
 801c7cc:	b530      	push	{r4, r5, lr}
 801c7ce:	2300      	movs	r3, #0
 801c7d0:	b089      	sub	sp, #36	@ 0x24
 801c7d2:	4d12      	ldr	r5, [pc, #72]	@ (801c81c <uxr_buffer_create_session+0x50>)
 801c7d4:	460c      	mov	r4, r1
 801c7d6:	9307      	str	r3, [sp, #28]
 801c7d8:	4619      	mov	r1, r3
 801c7da:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c7de:	2201      	movs	r2, #1
 801c7e0:	9301      	str	r3, [sp, #4]
 801c7e2:	80c2      	strh	r2, [r0, #6]
 801c7e4:	f88d 2004 	strb.w	r2, [sp, #4]
 801c7e8:	682a      	ldr	r2, [r5, #0]
 801c7ea:	9303      	str	r3, [sp, #12]
 801c7ec:	9200      	str	r2, [sp, #0]
 801c7ee:	88aa      	ldrh	r2, [r5, #4]
 801c7f0:	9306      	str	r3, [sp, #24]
 801c7f2:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c7f6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801c7fa:	9202      	str	r2, [sp, #8]
 801c7fc:	7802      	ldrb	r2, [r0, #0]
 801c7fe:	4620      	mov	r0, r4
 801c800:	f88d 200c 	strb.w	r2, [sp, #12]
 801c804:	2210      	movs	r2, #16
 801c806:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801c80a:	f000 fead 	bl	801d568 <uxr_buffer_submessage_header>
 801c80e:	4669      	mov	r1, sp
 801c810:	4620      	mov	r0, r4
 801c812:	f001 fdcb 	bl	801e3ac <uxr_serialize_CREATE_CLIENT_Payload>
 801c816:	b009      	add	sp, #36	@ 0x24
 801c818:	bd30      	pop	{r4, r5, pc}
 801c81a:	bf00      	nop
 801c81c:	080219f0 	.word	0x080219f0

0801c820 <uxr_buffer_delete_session>:
 801c820:	4a0c      	ldr	r2, [pc, #48]	@ (801c854 <uxr_buffer_delete_session+0x34>)
 801c822:	2302      	movs	r3, #2
 801c824:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 801c828:	b510      	push	{r4, lr}
 801c82a:	460c      	mov	r4, r1
 801c82c:	b082      	sub	sp, #8
 801c82e:	8911      	ldrh	r1, [r2, #8]
 801c830:	2204      	movs	r2, #4
 801c832:	80c3      	strh	r3, [r0, #6]
 801c834:	2300      	movs	r3, #0
 801c836:	f8ad 1006 	strh.w	r1, [sp, #6]
 801c83a:	4620      	mov	r0, r4
 801c83c:	2103      	movs	r1, #3
 801c83e:	f8ad c004 	strh.w	ip, [sp, #4]
 801c842:	f000 fe91 	bl	801d568 <uxr_buffer_submessage_header>
 801c846:	a901      	add	r1, sp, #4
 801c848:	4620      	mov	r0, r4
 801c84a:	f001 fe57 	bl	801e4fc <uxr_serialize_DELETE_Payload>
 801c84e:	b002      	add	sp, #8
 801c850:	bd10      	pop	{r4, pc}
 801c852:	bf00      	nop
 801c854:	080219f0 	.word	0x080219f0

0801c858 <uxr_read_create_session_status>:
 801c858:	b510      	push	{r4, lr}
 801c85a:	460b      	mov	r3, r1
 801c85c:	b088      	sub	sp, #32
 801c85e:	4604      	mov	r4, r0
 801c860:	a901      	add	r1, sp, #4
 801c862:	4618      	mov	r0, r3
 801c864:	f001 fe5a 	bl	801e51c <uxr_deserialize_STATUS_AGENT_Payload>
 801c868:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801c86c:	7163      	strb	r3, [r4, #5]
 801c86e:	b008      	add	sp, #32
 801c870:	bd10      	pop	{r4, pc}
 801c872:	bf00      	nop

0801c874 <uxr_read_delete_session_status>:
 801c874:	b510      	push	{r4, lr}
 801c876:	b084      	sub	sp, #16
 801c878:	4604      	mov	r4, r0
 801c87a:	4608      	mov	r0, r1
 801c87c:	a902      	add	r1, sp, #8
 801c87e:	f001 fe7d 	bl	801e57c <uxr_deserialize_STATUS_Payload>
 801c882:	88e3      	ldrh	r3, [r4, #6]
 801c884:	2b02      	cmp	r3, #2
 801c886:	d001      	beq.n	801c88c <uxr_read_delete_session_status+0x18>
 801c888:	b004      	add	sp, #16
 801c88a:	bd10      	pop	{r4, pc}
 801c88c:	f10d 000a 	add.w	r0, sp, #10
 801c890:	f7fe fec6 	bl	801b620 <uxr_object_id_from_raw>
 801c894:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801c898:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801c89c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801c8a0:	b29b      	uxth	r3, r3
 801c8a2:	2b02      	cmp	r3, #2
 801c8a4:	d1f0      	bne.n	801c888 <uxr_read_delete_session_status+0x14>
 801c8a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c8aa:	7163      	strb	r3, [r4, #5]
 801c8ac:	e7ec      	b.n	801c888 <uxr_read_delete_session_status+0x14>
 801c8ae:	bf00      	nop

0801c8b0 <uxr_stamp_create_session_header>:
 801c8b0:	b510      	push	{r4, lr}
 801c8b2:	2208      	movs	r2, #8
 801c8b4:	b08a      	sub	sp, #40	@ 0x28
 801c8b6:	4604      	mov	r4, r0
 801c8b8:	eb0d 0002 	add.w	r0, sp, r2
 801c8bc:	f7f6 fe42 	bl	8013544 <ucdr_init_buffer>
 801c8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c8c4:	2300      	movs	r3, #0
 801c8c6:	a802      	add	r0, sp, #8
 801c8c8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801c8cc:	9400      	str	r4, [sp, #0]
 801c8ce:	461a      	mov	r2, r3
 801c8d0:	f000 fef2 	bl	801d6b8 <uxr_serialize_message_header>
 801c8d4:	b00a      	add	sp, #40	@ 0x28
 801c8d6:	bd10      	pop	{r4, pc}

0801c8d8 <uxr_stamp_session_header>:
 801c8d8:	b530      	push	{r4, r5, lr}
 801c8da:	b08d      	sub	sp, #52	@ 0x34
 801c8dc:	4604      	mov	r4, r0
 801c8de:	460d      	mov	r5, r1
 801c8e0:	4619      	mov	r1, r3
 801c8e2:	a804      	add	r0, sp, #16
 801c8e4:	9203      	str	r2, [sp, #12]
 801c8e6:	2208      	movs	r2, #8
 801c8e8:	f7f6 fe2c 	bl	8013544 <ucdr_init_buffer>
 801c8ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c8f0:	9b03      	ldr	r3, [sp, #12]
 801c8f2:	462a      	mov	r2, r5
 801c8f4:	a804      	add	r0, sp, #16
 801c8f6:	9400      	str	r4, [sp, #0]
 801c8f8:	f000 fede 	bl	801d6b8 <uxr_serialize_message_header>
 801c8fc:	b00d      	add	sp, #52	@ 0x34
 801c8fe:	bd30      	pop	{r4, r5, pc}

0801c900 <uxr_read_session_header>:
 801c900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c904:	4607      	mov	r7, r0
 801c906:	b084      	sub	sp, #16
 801c908:	4608      	mov	r0, r1
 801c90a:	460c      	mov	r4, r1
 801c90c:	4615      	mov	r5, r2
 801c90e:	461e      	mov	r6, r3
 801c910:	f7f6 fe4a 	bl	80135a8 <ucdr_buffer_remaining>
 801c914:	2808      	cmp	r0, #8
 801c916:	d803      	bhi.n	801c920 <uxr_read_session_header+0x20>
 801c918:	2000      	movs	r0, #0
 801c91a:	b004      	add	sp, #16
 801c91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c920:	f10d 080c 	add.w	r8, sp, #12
 801c924:	4633      	mov	r3, r6
 801c926:	462a      	mov	r2, r5
 801c928:	4620      	mov	r0, r4
 801c92a:	f10d 010b 	add.w	r1, sp, #11
 801c92e:	f8cd 8000 	str.w	r8, [sp]
 801c932:	f000 fedf 	bl	801d6f4 <uxr_deserialize_message_header>
 801c936:	783a      	ldrb	r2, [r7, #0]
 801c938:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801c93c:	4293      	cmp	r3, r2
 801c93e:	d1eb      	bne.n	801c918 <uxr_read_session_header+0x18>
 801c940:	061b      	lsls	r3, r3, #24
 801c942:	d41b      	bmi.n	801c97c <uxr_read_session_header+0x7c>
 801c944:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801c948:	787b      	ldrb	r3, [r7, #1]
 801c94a:	429a      	cmp	r2, r3
 801c94c:	d003      	beq.n	801c956 <uxr_read_session_header+0x56>
 801c94e:	2001      	movs	r0, #1
 801c950:	f080 0001 	eor.w	r0, r0, #1
 801c954:	e7e1      	b.n	801c91a <uxr_read_session_header+0x1a>
 801c956:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801c95a:	1cb8      	adds	r0, r7, #2
 801c95c:	78bb      	ldrb	r3, [r7, #2]
 801c95e:	429a      	cmp	r2, r3
 801c960:	d1f5      	bne.n	801c94e <uxr_read_session_header+0x4e>
 801c962:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801c966:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801c96a:	429a      	cmp	r2, r3
 801c96c:	d1ef      	bne.n	801c94e <uxr_read_session_header+0x4e>
 801c96e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801c972:	7843      	ldrb	r3, [r0, #1]
 801c974:	429a      	cmp	r2, r3
 801c976:	d1ea      	bne.n	801c94e <uxr_read_session_header+0x4e>
 801c978:	2000      	movs	r0, #0
 801c97a:	e7e9      	b.n	801c950 <uxr_read_session_header+0x50>
 801c97c:	2001      	movs	r0, #1
 801c97e:	e7cc      	b.n	801c91a <uxr_read_session_header+0x1a>

0801c980 <uxr_session_header_offset>:
 801c980:	f990 3000 	ldrsb.w	r3, [r0]
 801c984:	2b00      	cmp	r3, #0
 801c986:	bfac      	ite	ge
 801c988:	2008      	movge	r0, #8
 801c98a:	2004      	movlt	r0, #4
 801c98c:	4770      	bx	lr
 801c98e:	bf00      	nop

0801c990 <uxr_init_base_object_request>:
 801c990:	b510      	push	{r4, lr}
 801c992:	b082      	sub	sp, #8
 801c994:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801c998:	9101      	str	r1, [sp, #4]
 801c99a:	88c3      	ldrh	r3, [r0, #6]
 801c99c:	f1a3 010a 	sub.w	r1, r3, #10
 801c9a0:	b289      	uxth	r1, r1
 801c9a2:	42a1      	cmp	r1, r4
 801c9a4:	d80f      	bhi.n	801c9c6 <uxr_init_base_object_request+0x36>
 801c9a6:	3301      	adds	r3, #1
 801c9a8:	b29c      	uxth	r4, r3
 801c9aa:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801c9ae:	b2db      	uxtb	r3, r3
 801c9b0:	80c4      	strh	r4, [r0, #6]
 801c9b2:	1c91      	adds	r1, r2, #2
 801c9b4:	9801      	ldr	r0, [sp, #4]
 801c9b6:	f882 c000 	strb.w	ip, [r2]
 801c9ba:	7053      	strb	r3, [r2, #1]
 801c9bc:	f7fe fe44 	bl	801b648 <uxr_object_id_to_raw>
 801c9c0:	4620      	mov	r0, r4
 801c9c2:	b002      	add	sp, #8
 801c9c4:	bd10      	pop	{r4, pc}
 801c9c6:	230a      	movs	r3, #10
 801c9c8:	f04f 0c00 	mov.w	ip, #0
 801c9cc:	461c      	mov	r4, r3
 801c9ce:	e7ef      	b.n	801c9b0 <uxr_init_base_object_request+0x20>

0801c9d0 <uxr_parse_base_object_request>:
 801c9d0:	b570      	push	{r4, r5, r6, lr}
 801c9d2:	4604      	mov	r4, r0
 801c9d4:	3002      	adds	r0, #2
 801c9d6:	460d      	mov	r5, r1
 801c9d8:	4616      	mov	r6, r2
 801c9da:	f7fe fe21 	bl	801b620 <uxr_object_id_from_raw>
 801c9de:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801c9e2:	8028      	strh	r0, [r5, #0]
 801c9e4:	806b      	strh	r3, [r5, #2]
 801c9e6:	7822      	ldrb	r2, [r4, #0]
 801c9e8:	7863      	ldrb	r3, [r4, #1]
 801c9ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801c9ee:	8033      	strh	r3, [r6, #0]
 801c9f0:	bd70      	pop	{r4, r5, r6, pc}
 801c9f2:	bf00      	nop

0801c9f4 <uxr_init_framing_io>:
 801c9f4:	2300      	movs	r3, #0
 801c9f6:	7041      	strb	r1, [r0, #1]
 801c9f8:	7003      	strb	r3, [r0, #0]
 801c9fa:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801c9fc:	4770      	bx	lr
 801c9fe:	bf00      	nop

0801ca00 <uxr_write_framed_msg>:
 801ca00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca04:	4617      	mov	r7, r2
 801ca06:	7842      	ldrb	r2, [r0, #1]
 801ca08:	460e      	mov	r6, r1
 801ca0a:	b083      	sub	sp, #12
 801ca0c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801ca10:	469b      	mov	fp, r3
 801ca12:	237e      	movs	r3, #126	@ 0x7e
 801ca14:	4604      	mov	r4, r0
 801ca16:	2901      	cmp	r1, #1
 801ca18:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801ca1c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801ca20:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801ca24:	f240 8115 	bls.w	801cc52 <uxr_write_framed_msg+0x252>
 801ca28:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801ca2c:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801ca30:	2202      	movs	r2, #2
 801ca32:	2901      	cmp	r1, #1
 801ca34:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ca38:	d952      	bls.n	801cae0 <uxr_write_framed_msg+0xe0>
 801ca3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca3c:	2103      	movs	r1, #3
 801ca3e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801ca42:	b2dd      	uxtb	r5, r3
 801ca44:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801ca48:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801ca4c:	2a01      	cmp	r2, #1
 801ca4e:	d95c      	bls.n	801cb0a <uxr_write_framed_msg+0x10a>
 801ca50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca52:	1862      	adds	r2, r4, r1
 801ca54:	3101      	adds	r1, #1
 801ca56:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801ca5a:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 801ca5e:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801ca62:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801ca66:	2a01      	cmp	r2, #1
 801ca68:	d961      	bls.n	801cb2e <uxr_write_framed_msg+0x12e>
 801ca6a:	1c4a      	adds	r2, r1, #1
 801ca6c:	4421      	add	r1, r4
 801ca6e:	b2d2      	uxtb	r2, r2
 801ca70:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801ca74:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d06a      	beq.n	801cb52 <uxr_write_framed_msg+0x152>
 801ca7c:	f04f 0800 	mov.w	r8, #0
 801ca80:	46c1      	mov	r9, r8
 801ca82:	e016      	b.n	801cab2 <uxr_write_framed_msg+0xb2>
 801ca84:	2a29      	cmp	r2, #41	@ 0x29
 801ca86:	d868      	bhi.n	801cb5a <uxr_write_framed_msg+0x15a>
 801ca88:	18a0      	adds	r0, r4, r2
 801ca8a:	3201      	adds	r2, #1
 801ca8c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801ca90:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ca94:	ea88 0101 	eor.w	r1, r8, r1
 801ca98:	4b7d      	ldr	r3, [pc, #500]	@ (801cc90 <uxr_write_framed_msg+0x290>)
 801ca9a:	f109 0901 	add.w	r9, r9, #1
 801ca9e:	b2c9      	uxtb	r1, r1
 801caa0:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801caa4:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801caa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801caaa:	454b      	cmp	r3, r9
 801caac:	d969      	bls.n	801cb82 <uxr_write_framed_msg+0x182>
 801caae:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801cab2:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801cab6:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801caba:	2801      	cmp	r0, #1
 801cabc:	d8e2      	bhi.n	801ca84 <uxr_write_framed_msg+0x84>
 801cabe:	1c50      	adds	r0, r2, #1
 801cac0:	b2c0      	uxtb	r0, r0
 801cac2:	2829      	cmp	r0, #41	@ 0x29
 801cac4:	d849      	bhi.n	801cb5a <uxr_write_framed_msg+0x15a>
 801cac6:	18a0      	adds	r0, r4, r2
 801cac8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801cacc:	3202      	adds	r2, #2
 801cace:	f081 0520 	eor.w	r5, r1, #32
 801cad2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801cad6:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801cada:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801cade:	e7d9      	b.n	801ca94 <uxr_write_framed_msg+0x94>
 801cae0:	2104      	movs	r1, #4
 801cae2:	f04f 0c03 	mov.w	ip, #3
 801cae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cae8:	4422      	add	r2, r4
 801caea:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801caee:	44a4      	add	ip, r4
 801caf0:	b2dd      	uxtb	r5, r3
 801caf2:	f080 0020 	eor.w	r0, r0, #32
 801caf6:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 801cafa:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801cafe:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801cb02:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801cb06:	2a01      	cmp	r2, #1
 801cb08:	d8a2      	bhi.n	801ca50 <uxr_write_framed_msg+0x50>
 801cb0a:	1862      	adds	r2, r4, r1
 801cb0c:	207d      	movs	r0, #125	@ 0x7d
 801cb0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cb10:	f085 0520 	eor.w	r5, r5, #32
 801cb14:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 801cb18:	3102      	adds	r1, #2
 801cb1a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801cb1e:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 801cb22:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801cb26:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801cb2a:	2a01      	cmp	r2, #1
 801cb2c:	d89d      	bhi.n	801ca6a <uxr_write_framed_msg+0x6a>
 801cb2e:	1c4d      	adds	r5, r1, #1
 801cb30:	1c8a      	adds	r2, r1, #2
 801cb32:	f080 0020 	eor.w	r0, r0, #32
 801cb36:	4421      	add	r1, r4
 801cb38:	fa54 f585 	uxtab	r5, r4, r5
 801cb3c:	b2d2      	uxtb	r2, r2
 801cb3e:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801cb42:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801cb46:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 801cb4a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d194      	bne.n	801ca7c <uxr_write_framed_msg+0x7c>
 801cb52:	4619      	mov	r1, r3
 801cb54:	f8ad 3004 	strh.w	r3, [sp, #4]
 801cb58:	e019      	b.n	801cb8e <uxr_write_framed_msg+0x18e>
 801cb5a:	2500      	movs	r5, #0
 801cb5c:	e000      	b.n	801cb60 <uxr_write_framed_msg+0x160>
 801cb5e:	b160      	cbz	r0, 801cb7a <uxr_write_framed_msg+0x17a>
 801cb60:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801cb64:	1b52      	subs	r2, r2, r5
 801cb66:	4653      	mov	r3, sl
 801cb68:	4638      	mov	r0, r7
 801cb6a:	4421      	add	r1, r4
 801cb6c:	47b0      	blx	r6
 801cb6e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801cb72:	4405      	add	r5, r0
 801cb74:	4295      	cmp	r5, r2
 801cb76:	d3f2      	bcc.n	801cb5e <uxr_write_framed_msg+0x15e>
 801cb78:	d066      	beq.n	801cc48 <uxr_write_framed_msg+0x248>
 801cb7a:	2000      	movs	r0, #0
 801cb7c:	b003      	add	sp, #12
 801cb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb82:	fa5f f188 	uxtb.w	r1, r8
 801cb86:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801cb8a:	f8ad 8004 	strh.w	r8, [sp, #4]
 801cb8e:	f04f 0900 	mov.w	r9, #0
 801cb92:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801cb96:	46c8      	mov	r8, r9
 801cb98:	e013      	b.n	801cbc2 <uxr_write_framed_msg+0x1c2>
 801cb9a:	2a29      	cmp	r2, #41	@ 0x29
 801cb9c:	d824      	bhi.n	801cbe8 <uxr_write_framed_msg+0x1e8>
 801cb9e:	18a3      	adds	r3, r4, r2
 801cba0:	3201      	adds	r2, #1
 801cba2:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801cba6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801cbaa:	f109 0901 	add.w	r9, r9, #1
 801cbae:	f1b9 0f02 	cmp.w	r9, #2
 801cbb2:	d02d      	beq.n	801cc10 <uxr_write_framed_msg+0x210>
 801cbb4:	f109 0308 	add.w	r3, r9, #8
 801cbb8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801cbbc:	446b      	add	r3, sp
 801cbbe:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801cbc2:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801cbc6:	2b01      	cmp	r3, #1
 801cbc8:	d8e7      	bhi.n	801cb9a <uxr_write_framed_msg+0x19a>
 801cbca:	1c53      	adds	r3, r2, #1
 801cbcc:	b2db      	uxtb	r3, r3
 801cbce:	2b29      	cmp	r3, #41	@ 0x29
 801cbd0:	d80a      	bhi.n	801cbe8 <uxr_write_framed_msg+0x1e8>
 801cbd2:	18a3      	adds	r3, r4, r2
 801cbd4:	f081 0120 	eor.w	r1, r1, #32
 801cbd8:	3202      	adds	r2, #2
 801cbda:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 801cbde:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 801cbe2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801cbe6:	e7e0      	b.n	801cbaa <uxr_write_framed_msg+0x1aa>
 801cbe8:	2500      	movs	r5, #0
 801cbea:	e001      	b.n	801cbf0 <uxr_write_framed_msg+0x1f0>
 801cbec:	2800      	cmp	r0, #0
 801cbee:	d0c4      	beq.n	801cb7a <uxr_write_framed_msg+0x17a>
 801cbf0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801cbf4:	1b52      	subs	r2, r2, r5
 801cbf6:	4653      	mov	r3, sl
 801cbf8:	4638      	mov	r0, r7
 801cbfa:	4421      	add	r1, r4
 801cbfc:	47b0      	blx	r6
 801cbfe:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801cc02:	4405      	add	r5, r0
 801cc04:	4295      	cmp	r5, r2
 801cc06:	d3f1      	bcc.n	801cbec <uxr_write_framed_msg+0x1ec>
 801cc08:	d1b7      	bne.n	801cb7a <uxr_write_framed_msg+0x17a>
 801cc0a:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 801cc0e:	e7d1      	b.n	801cbb4 <uxr_write_framed_msg+0x1b4>
 801cc10:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801cc14:	b19a      	cbz	r2, 801cc3e <uxr_write_framed_msg+0x23e>
 801cc16:	2500      	movs	r5, #0
 801cc18:	e001      	b.n	801cc1e <uxr_write_framed_msg+0x21e>
 801cc1a:	2800      	cmp	r0, #0
 801cc1c:	d0ad      	beq.n	801cb7a <uxr_write_framed_msg+0x17a>
 801cc1e:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801cc22:	1b52      	subs	r2, r2, r5
 801cc24:	4653      	mov	r3, sl
 801cc26:	4638      	mov	r0, r7
 801cc28:	4421      	add	r1, r4
 801cc2a:	47b0      	blx	r6
 801cc2c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801cc30:	4405      	add	r5, r0
 801cc32:	4295      	cmp	r5, r2
 801cc34:	d3f1      	bcc.n	801cc1a <uxr_write_framed_msg+0x21a>
 801cc36:	d1a0      	bne.n	801cb7a <uxr_write_framed_msg+0x17a>
 801cc38:	2300      	movs	r3, #0
 801cc3a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801cc3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cc40:	b298      	uxth	r0, r3
 801cc42:	b003      	add	sp, #12
 801cc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc48:	f04f 0300 	mov.w	r3, #0
 801cc4c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801cc50:	e72a      	b.n	801caa8 <uxr_write_framed_msg+0xa8>
 801cc52:	217d      	movs	r1, #125	@ 0x7d
 801cc54:	f082 0220 	eor.w	r2, r2, #32
 801cc58:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801cc5c:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801cc60:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801cc64:	2203      	movs	r2, #3
 801cc66:	2901      	cmp	r1, #1
 801cc68:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801cc6c:	d803      	bhi.n	801cc76 <uxr_write_framed_msg+0x276>
 801cc6e:	2105      	movs	r1, #5
 801cc70:	f04f 0c04 	mov.w	ip, #4
 801cc74:	e737      	b.n	801cae6 <uxr_write_framed_msg+0xe6>
 801cc76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cc78:	2104      	movs	r1, #4
 801cc7a:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801cc7e:	b2dd      	uxtb	r5, r3
 801cc80:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801cc84:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801cc88:	2a01      	cmp	r2, #1
 801cc8a:	f63f aee1 	bhi.w	801ca50 <uxr_write_framed_msg+0x50>
 801cc8e:	e73c      	b.n	801cb0a <uxr_write_framed_msg+0x10a>
 801cc90:	08023b4c 	.word	0x08023b4c

0801cc94 <uxr_framing_read_transport>:
 801cc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc98:	4604      	mov	r4, r0
 801cc9a:	b085      	sub	sp, #20
 801cc9c:	4692      	mov	sl, r2
 801cc9e:	4689      	mov	r9, r1
 801cca0:	461d      	mov	r5, r3
 801cca2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801cca4:	f000 fca6 	bl	801d5f4 <uxr_millis>
 801cca8:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801ccac:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 801ccb0:	4680      	mov	r8, r0
 801ccb2:	42ba      	cmp	r2, r7
 801ccb4:	d05f      	beq.n	801cd76 <uxr_framing_read_transport+0xe2>
 801ccb6:	d817      	bhi.n	801cce8 <uxr_framing_read_transport+0x54>
 801ccb8:	3f01      	subs	r7, #1
 801ccba:	1aba      	subs	r2, r7, r2
 801ccbc:	2700      	movs	r7, #0
 801ccbe:	b2d2      	uxtb	r2, r2
 801ccc0:	42b2      	cmp	r2, r6
 801ccc2:	d81a      	bhi.n	801ccfa <uxr_framing_read_transport+0x66>
 801ccc4:	19d3      	adds	r3, r2, r7
 801ccc6:	42b3      	cmp	r3, r6
 801ccc8:	d852      	bhi.n	801cd70 <uxr_framing_read_transport+0xdc>
 801ccca:	b9d2      	cbnz	r2, 801cd02 <uxr_framing_read_transport+0x6e>
 801cccc:	2600      	movs	r6, #0
 801ccce:	f000 fc91 	bl	801d5f4 <uxr_millis>
 801ccd2:	682b      	ldr	r3, [r5, #0]
 801ccd4:	eba0 0008 	sub.w	r0, r0, r8
 801ccd8:	1a1b      	subs	r3, r3, r0
 801ccda:	4630      	mov	r0, r6
 801ccdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cce0:	602b      	str	r3, [r5, #0]
 801cce2:	b005      	add	sp, #20
 801cce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cce8:	2f00      	cmp	r7, #0
 801ccea:	d060      	beq.n	801cdae <uxr_framing_read_transport+0x11a>
 801ccec:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 801ccf0:	3f01      	subs	r7, #1
 801ccf2:	b2d2      	uxtb	r2, r2
 801ccf4:	b2ff      	uxtb	r7, r7
 801ccf6:	42b2      	cmp	r2, r6
 801ccf8:	d9e4      	bls.n	801ccc4 <uxr_framing_read_transport+0x30>
 801ccfa:	b2f2      	uxtb	r2, r6
 801ccfc:	2700      	movs	r7, #0
 801ccfe:	2a00      	cmp	r2, #0
 801cd00:	d0e4      	beq.n	801cccc <uxr_framing_read_transport+0x38>
 801cd02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cd04:	4650      	mov	r0, sl
 801cd06:	9203      	str	r2, [sp, #12]
 801cd08:	9300      	str	r3, [sp, #0]
 801cd0a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801cd0e:	682b      	ldr	r3, [r5, #0]
 801cd10:	3102      	adds	r1, #2
 801cd12:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 801cdb8 <uxr_framing_read_transport+0x124>
 801cd16:	4421      	add	r1, r4
 801cd18:	47c8      	blx	r9
 801cd1a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801cd1e:	4606      	mov	r6, r0
 801cd20:	4403      	add	r3, r0
 801cd22:	0859      	lsrs	r1, r3, #1
 801cd24:	fbab 2101 	umull	r2, r1, fp, r1
 801cd28:	222a      	movs	r2, #42	@ 0x2a
 801cd2a:	0889      	lsrs	r1, r1, #2
 801cd2c:	fb02 3111 	mls	r1, r2, r1, r3
 801cd30:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801cd34:	2800      	cmp	r0, #0
 801cd36:	d0c9      	beq.n	801cccc <uxr_framing_read_transport+0x38>
 801cd38:	9a03      	ldr	r2, [sp, #12]
 801cd3a:	4290      	cmp	r0, r2
 801cd3c:	d1c7      	bne.n	801ccce <uxr_framing_read_transport+0x3a>
 801cd3e:	2f00      	cmp	r7, #0
 801cd40:	d0c5      	beq.n	801ccce <uxr_framing_read_transport+0x3a>
 801cd42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cd44:	3102      	adds	r1, #2
 801cd46:	463a      	mov	r2, r7
 801cd48:	4650      	mov	r0, sl
 801cd4a:	4421      	add	r1, r4
 801cd4c:	9300      	str	r3, [sp, #0]
 801cd4e:	2300      	movs	r3, #0
 801cd50:	47c8      	blx	r9
 801cd52:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801cd56:	4406      	add	r6, r0
 801cd58:	1813      	adds	r3, r2, r0
 801cd5a:	085a      	lsrs	r2, r3, #1
 801cd5c:	fbab 1b02 	umull	r1, fp, fp, r2
 801cd60:	222a      	movs	r2, #42	@ 0x2a
 801cd62:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801cd66:	fb02 331b 	mls	r3, r2, fp, r3
 801cd6a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801cd6e:	e7ae      	b.n	801ccce <uxr_framing_read_transport+0x3a>
 801cd70:	1ab6      	subs	r6, r6, r2
 801cd72:	b2f7      	uxtb	r7, r6
 801cd74:	e7a9      	b.n	801ccca <uxr_framing_read_transport+0x36>
 801cd76:	2300      	movs	r3, #0
 801cd78:	2e28      	cmp	r6, #40	@ 0x28
 801cd7a:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 801cd7c:	d9bd      	bls.n	801ccfa <uxr_framing_read_transport+0x66>
 801cd7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cd80:	2229      	movs	r2, #41	@ 0x29
 801cd82:	1ca1      	adds	r1, r4, #2
 801cd84:	4650      	mov	r0, sl
 801cd86:	9300      	str	r3, [sp, #0]
 801cd88:	682b      	ldr	r3, [r5, #0]
 801cd8a:	47c8      	blx	r9
 801cd8c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801cd90:	4606      	mov	r6, r0
 801cd92:	212a      	movs	r1, #42	@ 0x2a
 801cd94:	4403      	add	r3, r0
 801cd96:	4808      	ldr	r0, [pc, #32]	@ (801cdb8 <uxr_framing_read_transport+0x124>)
 801cd98:	085a      	lsrs	r2, r3, #1
 801cd9a:	fba0 0202 	umull	r0, r2, r0, r2
 801cd9e:	0892      	lsrs	r2, r2, #2
 801cda0:	fb01 3312 	mls	r3, r1, r2, r3
 801cda4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801cda8:	2e00      	cmp	r6, #0
 801cdaa:	d08f      	beq.n	801cccc <uxr_framing_read_transport+0x38>
 801cdac:	e78f      	b.n	801ccce <uxr_framing_read_transport+0x3a>
 801cdae:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 801cdb2:	b2d2      	uxtb	r2, r2
 801cdb4:	e784      	b.n	801ccc0 <uxr_framing_read_transport+0x2c>
 801cdb6:	bf00      	nop
 801cdb8:	30c30c31 	.word	0x30c30c31

0801cdbc <uxr_read_framed_msg>:
 801cdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdc0:	461e      	mov	r6, r3
 801cdc2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801cdc6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801cdca:	b083      	sub	sp, #12
 801cdcc:	4604      	mov	r4, r0
 801cdce:	4688      	mov	r8, r1
 801cdd0:	429d      	cmp	r5, r3
 801cdd2:	4691      	mov	r9, r2
 801cdd4:	f000 818c 	beq.w	801d0f0 <uxr_read_framed_msg+0x334>
 801cdd8:	7823      	ldrb	r3, [r4, #0]
 801cdda:	4dc3      	ldr	r5, [pc, #780]	@ (801d0e8 <uxr_read_framed_msg+0x32c>)
 801cddc:	4fc3      	ldr	r7, [pc, #780]	@ (801d0ec <uxr_read_framed_msg+0x330>)
 801cdde:	2b07      	cmp	r3, #7
 801cde0:	d8fd      	bhi.n	801cdde <uxr_read_framed_msg+0x22>
 801cde2:	e8df f013 	tbh	[pc, r3, lsl #1]
 801cde6:	011c      	.short	0x011c
 801cde8:	00d900fb 	.word	0x00d900fb
 801cdec:	008f00ba 	.word	0x008f00ba
 801cdf0:	00320051 	.word	0x00320051
 801cdf4:	0008      	.short	0x0008
 801cdf6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801cdfa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801cdfe:	4299      	cmp	r1, r3
 801ce00:	f000 814d 	beq.w	801d09e <uxr_read_framed_msg+0x2e2>
 801ce04:	18e2      	adds	r2, r4, r3
 801ce06:	7892      	ldrb	r2, [r2, #2]
 801ce08:	2a7d      	cmp	r2, #125	@ 0x7d
 801ce0a:	f000 81b8 	beq.w	801d17e <uxr_read_framed_msg+0x3c2>
 801ce0e:	3301      	adds	r3, #1
 801ce10:	212a      	movs	r1, #42	@ 0x2a
 801ce12:	2a7e      	cmp	r2, #126	@ 0x7e
 801ce14:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801ce18:	fba5 c000 	umull	ip, r0, r5, r0
 801ce1c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801ce20:	fb01 3310 	mls	r3, r1, r0, r3
 801ce24:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801ce28:	f000 8257 	beq.w	801d2da <uxr_read_framed_msg+0x51e>
 801ce2c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801ce2e:	2000      	movs	r0, #0
 801ce30:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801ce32:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801ce36:	7020      	strb	r0, [r4, #0]
 801ce38:	b29b      	uxth	r3, r3
 801ce3a:	4299      	cmp	r1, r3
 801ce3c:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801ce3e:	f000 8178 	beq.w	801d132 <uxr_read_framed_msg+0x376>
 801ce42:	2000      	movs	r0, #0
 801ce44:	b003      	add	sp, #12
 801ce46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce4a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801ce4e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801ce52:	4298      	cmp	r0, r3
 801ce54:	f000 8132 	beq.w	801d0bc <uxr_read_framed_msg+0x300>
 801ce58:	18e2      	adds	r2, r4, r3
 801ce5a:	7891      	ldrb	r1, [r2, #2]
 801ce5c:	297d      	cmp	r1, #125	@ 0x7d
 801ce5e:	f000 8170 	beq.w	801d142 <uxr_read_framed_msg+0x386>
 801ce62:	3301      	adds	r3, #1
 801ce64:	202a      	movs	r0, #42	@ 0x2a
 801ce66:	297e      	cmp	r1, #126	@ 0x7e
 801ce68:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801ce6c:	fba5 c202 	umull	ip, r2, r5, r2
 801ce70:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801ce74:	fb00 3312 	mls	r3, r0, r2, r3
 801ce78:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801ce7c:	f000 821d 	beq.w	801d2ba <uxr_read_framed_msg+0x4fe>
 801ce80:	2307      	movs	r3, #7
 801ce82:	86a1      	strh	r1, [r4, #52]	@ 0x34
 801ce84:	7023      	strb	r3, [r4, #0]
 801ce86:	e7aa      	b.n	801cdde <uxr_read_framed_msg+0x22>
 801ce88:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801ce8a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801ce8e:	459e      	cmp	lr, r3
 801ce90:	d827      	bhi.n	801cee2 <uxr_read_framed_msg+0x126>
 801ce92:	e032      	b.n	801cefa <uxr_read_framed_msg+0x13e>
 801ce94:	fba5 b101 	umull	fp, r1, r5, r1
 801ce98:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ce9c:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801cea0:	0889      	lsrs	r1, r1, #2
 801cea2:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801cea6:	fb0b 0111 	mls	r1, fp, r1, r0
 801ceaa:	f000 80d4 	beq.w	801d056 <uxr_read_framed_msg+0x29a>
 801ceae:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801ceb2:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801ceb6:	f000 80cb 	beq.w	801d050 <uxr_read_framed_msg+0x294>
 801ceba:	f806 c003 	strb.w	ip, [r6, r3]
 801cebe:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801cec0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801cec2:	ea80 010c 	eor.w	r1, r0, ip
 801cec6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801ceca:	3301      	adds	r3, #1
 801cecc:	b2c9      	uxtb	r1, r1
 801cece:	b29b      	uxth	r3, r3
 801ced0:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801ced4:	4573      	cmp	r3, lr
 801ced6:	8663      	strh	r3, [r4, #50]	@ 0x32
 801ced8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801cedc:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801cede:	f080 811d 	bcs.w	801d11c <uxr_read_framed_msg+0x360>
 801cee2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801cee6:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801ceea:	1c50      	adds	r0, r2, #1
 801ceec:	eb04 0c02 	add.w	ip, r4, r2
 801cef0:	4592      	cmp	sl, r2
 801cef2:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801cef6:	d1cd      	bne.n	801ce94 <uxr_read_framed_msg+0xd8>
 801cef8:	459e      	cmp	lr, r3
 801cefa:	f040 8114 	bne.w	801d126 <uxr_read_framed_msg+0x36a>
 801cefe:	2306      	movs	r3, #6
 801cf00:	7023      	strb	r3, [r4, #0]
 801cf02:	e76c      	b.n	801cdde <uxr_read_framed_msg+0x22>
 801cf04:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801cf08:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801cf0c:	4298      	cmp	r0, r3
 801cf0e:	f000 80c6 	beq.w	801d09e <uxr_read_framed_msg+0x2e2>
 801cf12:	18e2      	adds	r2, r4, r3
 801cf14:	7891      	ldrb	r1, [r2, #2]
 801cf16:	297d      	cmp	r1, #125	@ 0x7d
 801cf18:	f000 8193 	beq.w	801d242 <uxr_read_framed_msg+0x486>
 801cf1c:	3301      	adds	r3, #1
 801cf1e:	202a      	movs	r0, #42	@ 0x2a
 801cf20:	297e      	cmp	r1, #126	@ 0x7e
 801cf22:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801cf26:	fba5 c202 	umull	ip, r2, r5, r2
 801cf2a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801cf2e:	fb00 3312 	mls	r3, r0, r2, r3
 801cf32:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801cf36:	f000 81d0 	beq.w	801d2da <uxr_read_framed_msg+0x51e>
 801cf3a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801cf3c:	2000      	movs	r0, #0
 801cf3e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801cf42:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801cf44:	8660      	strh	r0, [r4, #50]	@ 0x32
 801cf46:	b29b      	uxth	r3, r3
 801cf48:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801cf4a:	428b      	cmp	r3, r1
 801cf4c:	8623      	strh	r3, [r4, #48]	@ 0x30
 801cf4e:	f240 80e2 	bls.w	801d116 <uxr_read_framed_msg+0x35a>
 801cf52:	7020      	strb	r0, [r4, #0]
 801cf54:	b003      	add	sp, #12
 801cf56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf5a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801cf5e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801cf62:	4298      	cmp	r0, r3
 801cf64:	f000 80aa 	beq.w	801d0bc <uxr_read_framed_msg+0x300>
 801cf68:	18e2      	adds	r2, r4, r3
 801cf6a:	7891      	ldrb	r1, [r2, #2]
 801cf6c:	297d      	cmp	r1, #125	@ 0x7d
 801cf6e:	f000 8186 	beq.w	801d27e <uxr_read_framed_msg+0x4c2>
 801cf72:	3301      	adds	r3, #1
 801cf74:	202a      	movs	r0, #42	@ 0x2a
 801cf76:	297e      	cmp	r1, #126	@ 0x7e
 801cf78:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801cf7c:	fba5 c202 	umull	ip, r2, r5, r2
 801cf80:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801cf84:	fb00 3312 	mls	r3, r0, r2, r3
 801cf88:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801cf8c:	f000 8195 	beq.w	801d2ba <uxr_read_framed_msg+0x4fe>
 801cf90:	2304      	movs	r3, #4
 801cf92:	8621      	strh	r1, [r4, #48]	@ 0x30
 801cf94:	7023      	strb	r3, [r4, #0]
 801cf96:	e722      	b.n	801cdde <uxr_read_framed_msg+0x22>
 801cf98:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801cf9c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801cfa0:	4290      	cmp	r0, r2
 801cfa2:	f000 80b4 	beq.w	801d10e <uxr_read_framed_msg+0x352>
 801cfa6:	18a3      	adds	r3, r4, r2
 801cfa8:	7899      	ldrb	r1, [r3, #2]
 801cfaa:	297d      	cmp	r1, #125	@ 0x7d
 801cfac:	f000 8107 	beq.w	801d1be <uxr_read_framed_msg+0x402>
 801cfb0:	3201      	adds	r2, #1
 801cfb2:	232a      	movs	r3, #42	@ 0x2a
 801cfb4:	297e      	cmp	r1, #126	@ 0x7e
 801cfb6:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801cfba:	fba5 c000 	umull	ip, r0, r5, r0
 801cfbe:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801cfc2:	fb03 2210 	mls	r2, r3, r0, r2
 801cfc6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801cfca:	f000 818a 	beq.w	801d2e2 <uxr_read_framed_msg+0x526>
 801cfce:	7863      	ldrb	r3, [r4, #1]
 801cfd0:	428b      	cmp	r3, r1
 801cfd2:	bf0c      	ite	eq
 801cfd4:	2303      	moveq	r3, #3
 801cfd6:	2300      	movne	r3, #0
 801cfd8:	7023      	strb	r3, [r4, #0]
 801cfda:	e700      	b.n	801cdde <uxr_read_framed_msg+0x22>
 801cfdc:	2300      	movs	r3, #0
 801cfde:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801cfe2:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801cfe6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801cfea:	4299      	cmp	r1, r3
 801cfec:	d06a      	beq.n	801d0c4 <uxr_read_framed_msg+0x308>
 801cfee:	18e2      	adds	r2, r4, r3
 801cff0:	7890      	ldrb	r0, [r2, #2]
 801cff2:	287d      	cmp	r0, #125	@ 0x7d
 801cff4:	f000 8100 	beq.w	801d1f8 <uxr_read_framed_msg+0x43c>
 801cff8:	3301      	adds	r3, #1
 801cffa:	212a      	movs	r1, #42	@ 0x2a
 801cffc:	287e      	cmp	r0, #126	@ 0x7e
 801cffe:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801d002:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801d006:	fba5 c202 	umull	ip, r2, r5, r2
 801d00a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d00e:	fb01 3312 	mls	r3, r1, r2, r3
 801d012:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d016:	d055      	beq.n	801d0c4 <uxr_read_framed_msg+0x308>
 801d018:	2302      	movs	r3, #2
 801d01a:	7023      	strb	r3, [r4, #0]
 801d01c:	e6df      	b.n	801cdde <uxr_read_framed_msg+0x22>
 801d01e:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 801d022:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801d026:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801d02a:	1c5a      	adds	r2, r3, #1
 801d02c:	459c      	cmp	ip, r3
 801d02e:	eb04 0103 	add.w	r1, r4, r3
 801d032:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801d036:	f43f af04 	beq.w	801ce42 <uxr_read_framed_msg+0x86>
 801d03a:	fba5 0303 	umull	r0, r3, r5, r3
 801d03e:	7889      	ldrb	r1, [r1, #2]
 801d040:	089b      	lsrs	r3, r3, #2
 801d042:	297e      	cmp	r1, #126	@ 0x7e
 801d044:	fb0e 2313 	mls	r3, lr, r3, r2
 801d048:	b2db      	uxtb	r3, r3
 801d04a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d04e:	d1ec      	bne.n	801d02a <uxr_read_framed_msg+0x26e>
 801d050:	2301      	movs	r3, #1
 801d052:	7023      	strb	r3, [r4, #0]
 801d054:	e6c3      	b.n	801cdde <uxr_read_framed_msg+0x22>
 801d056:	1c50      	adds	r0, r2, #1
 801d058:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801d05c:	3202      	adds	r2, #2
 801d05e:	0841      	lsrs	r1, r0, #1
 801d060:	fba5 c101 	umull	ip, r1, r5, r1
 801d064:	0889      	lsrs	r1, r1, #2
 801d066:	fb0b 0111 	mls	r1, fp, r1, r0
 801d06a:	1860      	adds	r0, r4, r1
 801d06c:	b2c9      	uxtb	r1, r1
 801d06e:	458a      	cmp	sl, r1
 801d070:	f43f af42 	beq.w	801cef8 <uxr_read_framed_msg+0x13c>
 801d074:	0851      	lsrs	r1, r2, #1
 801d076:	7880      	ldrb	r0, [r0, #2]
 801d078:	fba5 a101 	umull	sl, r1, r5, r1
 801d07c:	287e      	cmp	r0, #126	@ 0x7e
 801d07e:	f080 0c20 	eor.w	ip, r0, #32
 801d082:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801d086:	fb0b 2211 	mls	r2, fp, r1, r2
 801d08a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801d08e:	f47f af14 	bne.w	801ceba <uxr_read_framed_msg+0xfe>
 801d092:	459e      	cmp	lr, r3
 801d094:	f43f af33 	beq.w	801cefe <uxr_read_framed_msg+0x142>
 801d098:	2301      	movs	r3, #1
 801d09a:	7023      	strb	r3, [r4, #0]
 801d09c:	e69f      	b.n	801cdde <uxr_read_framed_msg+0x22>
 801d09e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d0a0:	9300      	str	r3, [sp, #0]
 801d0a2:	2301      	movs	r3, #1
 801d0a4:	9301      	str	r3, [sp, #4]
 801d0a6:	464a      	mov	r2, r9
 801d0a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d0aa:	4641      	mov	r1, r8
 801d0ac:	4620      	mov	r0, r4
 801d0ae:	f7ff fdf1 	bl	801cc94 <uxr_framing_read_transport>
 801d0b2:	2800      	cmp	r0, #0
 801d0b4:	f43f aec5 	beq.w	801ce42 <uxr_read_framed_msg+0x86>
 801d0b8:	7823      	ldrb	r3, [r4, #0]
 801d0ba:	e690      	b.n	801cdde <uxr_read_framed_msg+0x22>
 801d0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d0be:	9300      	str	r3, [sp, #0]
 801d0c0:	2302      	movs	r3, #2
 801d0c2:	e7ef      	b.n	801d0a4 <uxr_read_framed_msg+0x2e8>
 801d0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d0c6:	464a      	mov	r2, r9
 801d0c8:	4641      	mov	r1, r8
 801d0ca:	4620      	mov	r0, r4
 801d0cc:	9300      	str	r3, [sp, #0]
 801d0ce:	2304      	movs	r3, #4
 801d0d0:	9301      	str	r3, [sp, #4]
 801d0d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d0d4:	f7ff fdde 	bl	801cc94 <uxr_framing_read_transport>
 801d0d8:	2800      	cmp	r0, #0
 801d0da:	d1ed      	bne.n	801d0b8 <uxr_read_framed_msg+0x2fc>
 801d0dc:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801d0e0:	2b7e      	cmp	r3, #126	@ 0x7e
 801d0e2:	d0e9      	beq.n	801d0b8 <uxr_read_framed_msg+0x2fc>
 801d0e4:	e6ad      	b.n	801ce42 <uxr_read_framed_msg+0x86>
 801d0e6:	bf00      	nop
 801d0e8:	30c30c31 	.word	0x30c30c31
 801d0ec:	08023b4c 	.word	0x08023b4c
 801d0f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d0f2:	9300      	str	r3, [sp, #0]
 801d0f4:	2305      	movs	r3, #5
 801d0f6:	9301      	str	r3, [sp, #4]
 801d0f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d0fa:	f7ff fdcb 	bl	801cc94 <uxr_framing_read_transport>
 801d0fe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801d102:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801d106:	429a      	cmp	r2, r3
 801d108:	f43f ae9b 	beq.w	801ce42 <uxr_read_framed_msg+0x86>
 801d10c:	e664      	b.n	801cdd8 <uxr_read_framed_msg+0x1c>
 801d10e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d110:	9300      	str	r3, [sp, #0]
 801d112:	2303      	movs	r3, #3
 801d114:	e7c6      	b.n	801d0a4 <uxr_read_framed_msg+0x2e8>
 801d116:	2305      	movs	r3, #5
 801d118:	7023      	strb	r3, [r4, #0]
 801d11a:	e660      	b.n	801cdde <uxr_read_framed_msg+0x22>
 801d11c:	f43f aeef 	beq.w	801cefe <uxr_read_framed_msg+0x142>
 801d120:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801d124:	d094      	beq.n	801d050 <uxr_read_framed_msg+0x294>
 801d126:	ebae 0303 	sub.w	r3, lr, r3
 801d12a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d12c:	3302      	adds	r3, #2
 801d12e:	9200      	str	r2, [sp, #0]
 801d130:	e7b8      	b.n	801d0a4 <uxr_read_framed_msg+0x2e8>
 801d132:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801d136:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d138:	7013      	strb	r3, [r2, #0]
 801d13a:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801d13c:	b003      	add	sp, #12
 801d13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d142:	1c59      	adds	r1, r3, #1
 801d144:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801d148:	084a      	lsrs	r2, r1, #1
 801d14a:	fba5 e202 	umull	lr, r2, r5, r2
 801d14e:	0892      	lsrs	r2, r2, #2
 801d150:	fb0c 1212 	mls	r2, ip, r2, r1
 801d154:	b2d1      	uxtb	r1, r2
 801d156:	4288      	cmp	r0, r1
 801d158:	d0b0      	beq.n	801d0bc <uxr_read_framed_msg+0x300>
 801d15a:	3302      	adds	r3, #2
 801d15c:	4422      	add	r2, r4
 801d15e:	7891      	ldrb	r1, [r2, #2]
 801d160:	085a      	lsrs	r2, r3, #1
 801d162:	fba5 0202 	umull	r0, r2, r5, r2
 801d166:	297e      	cmp	r1, #126	@ 0x7e
 801d168:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d16c:	fb0c 3312 	mls	r3, ip, r2, r3
 801d170:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d174:	f000 80a1 	beq.w	801d2ba <uxr_read_framed_msg+0x4fe>
 801d178:	f081 0120 	eor.w	r1, r1, #32
 801d17c:	e680      	b.n	801ce80 <uxr_read_framed_msg+0xc4>
 801d17e:	f103 0c01 	add.w	ip, r3, #1
 801d182:	202a      	movs	r0, #42	@ 0x2a
 801d184:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801d188:	fba5 e202 	umull	lr, r2, r5, r2
 801d18c:	0892      	lsrs	r2, r2, #2
 801d18e:	fb00 c212 	mls	r2, r0, r2, ip
 801d192:	fa5f fc82 	uxtb.w	ip, r2
 801d196:	4561      	cmp	r1, ip
 801d198:	d081      	beq.n	801d09e <uxr_read_framed_msg+0x2e2>
 801d19a:	3302      	adds	r3, #2
 801d19c:	4422      	add	r2, r4
 801d19e:	0859      	lsrs	r1, r3, #1
 801d1a0:	7892      	ldrb	r2, [r2, #2]
 801d1a2:	fba5 c101 	umull	ip, r1, r5, r1
 801d1a6:	2a7e      	cmp	r2, #126	@ 0x7e
 801d1a8:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801d1ac:	fb00 3311 	mls	r3, r0, r1, r3
 801d1b0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d1b4:	f000 8091 	beq.w	801d2da <uxr_read_framed_msg+0x51e>
 801d1b8:	f082 0220 	eor.w	r2, r2, #32
 801d1bc:	e636      	b.n	801ce2c <uxr_read_framed_msg+0x70>
 801d1be:	1c51      	adds	r1, r2, #1
 801d1c0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801d1c4:	084b      	lsrs	r3, r1, #1
 801d1c6:	fba5 e303 	umull	lr, r3, r5, r3
 801d1ca:	089b      	lsrs	r3, r3, #2
 801d1cc:	fb0c 1313 	mls	r3, ip, r3, r1
 801d1d0:	b2d9      	uxtb	r1, r3
 801d1d2:	4288      	cmp	r0, r1
 801d1d4:	d09b      	beq.n	801d10e <uxr_read_framed_msg+0x352>
 801d1d6:	3202      	adds	r2, #2
 801d1d8:	4423      	add	r3, r4
 801d1da:	0850      	lsrs	r0, r2, #1
 801d1dc:	789b      	ldrb	r3, [r3, #2]
 801d1de:	fba5 1000 	umull	r1, r0, r5, r0
 801d1e2:	2b7e      	cmp	r3, #126	@ 0x7e
 801d1e4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801d1e8:	fb0c 2210 	mls	r2, ip, r0, r2
 801d1ec:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801d1f0:	d077      	beq.n	801d2e2 <uxr_read_framed_msg+0x526>
 801d1f2:	f083 0120 	eor.w	r1, r3, #32
 801d1f6:	e6ea      	b.n	801cfce <uxr_read_framed_msg+0x212>
 801d1f8:	f103 0c01 	add.w	ip, r3, #1
 801d1fc:	202a      	movs	r0, #42	@ 0x2a
 801d1fe:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801d202:	fba5 e202 	umull	lr, r2, r5, r2
 801d206:	0892      	lsrs	r2, r2, #2
 801d208:	fb00 c212 	mls	r2, r0, r2, ip
 801d20c:	fa5f fc82 	uxtb.w	ip, r2
 801d210:	4561      	cmp	r1, ip
 801d212:	f43f af57 	beq.w	801d0c4 <uxr_read_framed_msg+0x308>
 801d216:	3302      	adds	r3, #2
 801d218:	4422      	add	r2, r4
 801d21a:	7891      	ldrb	r1, [r2, #2]
 801d21c:	085a      	lsrs	r2, r3, #1
 801d21e:	fba5 c202 	umull	ip, r2, r5, r2
 801d222:	297e      	cmp	r1, #126	@ 0x7e
 801d224:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801d228:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d22c:	fb00 3312 	mls	r3, r0, r2, r3
 801d230:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d234:	f43f af46 	beq.w	801d0c4 <uxr_read_framed_msg+0x308>
 801d238:	f081 0120 	eor.w	r1, r1, #32
 801d23c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801d240:	e6ea      	b.n	801d018 <uxr_read_framed_msg+0x25c>
 801d242:	1c59      	adds	r1, r3, #1
 801d244:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801d248:	084a      	lsrs	r2, r1, #1
 801d24a:	fba5 e202 	umull	lr, r2, r5, r2
 801d24e:	0892      	lsrs	r2, r2, #2
 801d250:	fb0c 1212 	mls	r2, ip, r2, r1
 801d254:	b2d1      	uxtb	r1, r2
 801d256:	4288      	cmp	r0, r1
 801d258:	f43f af21 	beq.w	801d09e <uxr_read_framed_msg+0x2e2>
 801d25c:	3302      	adds	r3, #2
 801d25e:	4422      	add	r2, r4
 801d260:	7891      	ldrb	r1, [r2, #2]
 801d262:	085a      	lsrs	r2, r3, #1
 801d264:	fba5 0202 	umull	r0, r2, r5, r2
 801d268:	297e      	cmp	r1, #126	@ 0x7e
 801d26a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d26e:	fb0c 3312 	mls	r3, ip, r2, r3
 801d272:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d276:	d030      	beq.n	801d2da <uxr_read_framed_msg+0x51e>
 801d278:	f081 0120 	eor.w	r1, r1, #32
 801d27c:	e65d      	b.n	801cf3a <uxr_read_framed_msg+0x17e>
 801d27e:	1c59      	adds	r1, r3, #1
 801d280:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801d284:	084a      	lsrs	r2, r1, #1
 801d286:	fba5 e202 	umull	lr, r2, r5, r2
 801d28a:	0892      	lsrs	r2, r2, #2
 801d28c:	fb0c 1212 	mls	r2, ip, r2, r1
 801d290:	b2d1      	uxtb	r1, r2
 801d292:	4288      	cmp	r0, r1
 801d294:	f43f af12 	beq.w	801d0bc <uxr_read_framed_msg+0x300>
 801d298:	3302      	adds	r3, #2
 801d29a:	4422      	add	r2, r4
 801d29c:	7891      	ldrb	r1, [r2, #2]
 801d29e:	085a      	lsrs	r2, r3, #1
 801d2a0:	fba5 0202 	umull	r0, r2, r5, r2
 801d2a4:	297e      	cmp	r1, #126	@ 0x7e
 801d2a6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d2aa:	fb0c 3312 	mls	r3, ip, r2, r3
 801d2ae:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d2b2:	d002      	beq.n	801d2ba <uxr_read_framed_msg+0x4fe>
 801d2b4:	f081 0120 	eor.w	r1, r1, #32
 801d2b8:	e66a      	b.n	801cf90 <uxr_read_framed_msg+0x1d4>
 801d2ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d2bc:	9300      	str	r3, [sp, #0]
 801d2be:	2302      	movs	r3, #2
 801d2c0:	9301      	str	r3, [sp, #4]
 801d2c2:	464a      	mov	r2, r9
 801d2c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d2c6:	4641      	mov	r1, r8
 801d2c8:	4620      	mov	r0, r4
 801d2ca:	f7ff fce3 	bl	801cc94 <uxr_framing_read_transport>
 801d2ce:	2800      	cmp	r0, #0
 801d2d0:	f47f aef2 	bne.w	801d0b8 <uxr_read_framed_msg+0x2fc>
 801d2d4:	2301      	movs	r3, #1
 801d2d6:	7023      	strb	r3, [r4, #0]
 801d2d8:	e581      	b.n	801cdde <uxr_read_framed_msg+0x22>
 801d2da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d2dc:	9300      	str	r3, [sp, #0]
 801d2de:	2301      	movs	r3, #1
 801d2e0:	e7ee      	b.n	801d2c0 <uxr_read_framed_msg+0x504>
 801d2e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d2e4:	9300      	str	r3, [sp, #0]
 801d2e6:	2303      	movs	r3, #3
 801d2e8:	e7ea      	b.n	801d2c0 <uxr_read_framed_msg+0x504>
 801d2ea:	bf00      	nop

0801d2ec <uxr_stream_id>:
 801d2ec:	2901      	cmp	r1, #1
 801d2ee:	4684      	mov	ip, r0
 801d2f0:	b500      	push	{lr}
 801d2f2:	b083      	sub	sp, #12
 801d2f4:	d01f      	beq.n	801d336 <uxr_stream_id+0x4a>
 801d2f6:	2902      	cmp	r1, #2
 801d2f8:	f04f 0e00 	mov.w	lr, #0
 801d2fc:	d020      	beq.n	801d340 <uxr_stream_id+0x54>
 801d2fe:	2300      	movs	r3, #0
 801d300:	2000      	movs	r0, #0
 801d302:	f36e 0307 	bfi	r3, lr, #0, #8
 801d306:	f36c 230f 	bfi	r3, ip, #8, #8
 801d30a:	f361 4317 	bfi	r3, r1, #16, #8
 801d30e:	f362 631f 	bfi	r3, r2, #24, #8
 801d312:	fa5f fc83 	uxtb.w	ip, r3
 801d316:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801d31a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801d31e:	0e1b      	lsrs	r3, r3, #24
 801d320:	f36c 0007 	bfi	r0, ip, #0, #8
 801d324:	f361 200f 	bfi	r0, r1, #8, #8
 801d328:	f362 4017 	bfi	r0, r2, #16, #8
 801d32c:	f363 601f 	bfi	r0, r3, #24, #8
 801d330:	b003      	add	sp, #12
 801d332:	f85d fb04 	ldr.w	pc, [sp], #4
 801d336:	f100 0e01 	add.w	lr, r0, #1
 801d33a:	fa5f fe8e 	uxtb.w	lr, lr
 801d33e:	e7de      	b.n	801d2fe <uxr_stream_id+0x12>
 801d340:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 801d344:	e7db      	b.n	801d2fe <uxr_stream_id+0x12>
 801d346:	bf00      	nop

0801d348 <uxr_stream_id_from_raw>:
 801d348:	b082      	sub	sp, #8
 801d34a:	b130      	cbz	r0, 801d35a <uxr_stream_id_from_raw+0x12>
 801d34c:	0603      	lsls	r3, r0, #24
 801d34e:	d421      	bmi.n	801d394 <uxr_stream_id_from_raw+0x4c>
 801d350:	1e42      	subs	r2, r0, #1
 801d352:	f04f 0c01 	mov.w	ip, #1
 801d356:	b2d2      	uxtb	r2, r2
 801d358:	e001      	b.n	801d35e <uxr_stream_id_from_raw+0x16>
 801d35a:	4684      	mov	ip, r0
 801d35c:	4602      	mov	r2, r0
 801d35e:	2300      	movs	r3, #0
 801d360:	f360 0307 	bfi	r3, r0, #0, #8
 801d364:	2000      	movs	r0, #0
 801d366:	f362 230f 	bfi	r3, r2, #8, #8
 801d36a:	f36c 4317 	bfi	r3, ip, #16, #8
 801d36e:	f361 631f 	bfi	r3, r1, #24, #8
 801d372:	fa5f fc83 	uxtb.w	ip, r3
 801d376:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801d37a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801d37e:	0e1b      	lsrs	r3, r3, #24
 801d380:	f36c 0007 	bfi	r0, ip, #0, #8
 801d384:	f361 200f 	bfi	r0, r1, #8, #8
 801d388:	f362 4017 	bfi	r0, r2, #16, #8
 801d38c:	f363 601f 	bfi	r0, r3, #24, #8
 801d390:	b002      	add	sp, #8
 801d392:	4770      	bx	lr
 801d394:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801d398:	f04f 0c02 	mov.w	ip, #2
 801d39c:	e7df      	b.n	801d35e <uxr_stream_id_from_raw+0x16>
 801d39e:	bf00      	nop

0801d3a0 <uxr_init_stream_storage>:
 801d3a0:	2300      	movs	r3, #0
 801d3a2:	7403      	strb	r3, [r0, #16]
 801d3a4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801d3a8:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801d3ac:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801d3b0:	4770      	bx	lr
 801d3b2:	bf00      	nop

0801d3b4 <uxr_reset_stream_storage>:
 801d3b4:	b570      	push	{r4, r5, r6, lr}
 801d3b6:	7c03      	ldrb	r3, [r0, #16]
 801d3b8:	4604      	mov	r4, r0
 801d3ba:	b14b      	cbz	r3, 801d3d0 <uxr_reset_stream_storage+0x1c>
 801d3bc:	4606      	mov	r6, r0
 801d3be:	2500      	movs	r5, #0
 801d3c0:	4630      	mov	r0, r6
 801d3c2:	3501      	adds	r5, #1
 801d3c4:	f002 fa42 	bl	801f84c <uxr_reset_output_best_effort_stream>
 801d3c8:	7c23      	ldrb	r3, [r4, #16]
 801d3ca:	3610      	adds	r6, #16
 801d3cc:	42ab      	cmp	r3, r5
 801d3ce:	d8f7      	bhi.n	801d3c0 <uxr_reset_stream_storage+0xc>
 801d3d0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801d3d4:	b15b      	cbz	r3, 801d3ee <uxr_reset_stream_storage+0x3a>
 801d3d6:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d3da:	2500      	movs	r5, #0
 801d3dc:	4630      	mov	r0, r6
 801d3de:	3501      	adds	r5, #1
 801d3e0:	f002 f83a 	bl	801f458 <uxr_reset_input_best_effort_stream>
 801d3e4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801d3e8:	3602      	adds	r6, #2
 801d3ea:	42ab      	cmp	r3, r5
 801d3ec:	d8f6      	bhi.n	801d3dc <uxr_reset_stream_storage+0x28>
 801d3ee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801d3f2:	b15b      	cbz	r3, 801d40c <uxr_reset_stream_storage+0x58>
 801d3f4:	f104 0618 	add.w	r6, r4, #24
 801d3f8:	2500      	movs	r5, #0
 801d3fa:	4630      	mov	r0, r6
 801d3fc:	3501      	adds	r5, #1
 801d3fe:	f002 fad3 	bl	801f9a8 <uxr_reset_output_reliable_stream>
 801d402:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801d406:	3628      	adds	r6, #40	@ 0x28
 801d408:	42ab      	cmp	r3, r5
 801d40a:	d8f6      	bhi.n	801d3fa <uxr_reset_stream_storage+0x46>
 801d40c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801d410:	b15b      	cbz	r3, 801d42a <uxr_reset_stream_storage+0x76>
 801d412:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801d416:	2500      	movs	r5, #0
 801d418:	4630      	mov	r0, r6
 801d41a:	3501      	adds	r5, #1
 801d41c:	f002 f888 	bl	801f530 <uxr_reset_input_reliable_stream>
 801d420:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801d424:	3618      	adds	r6, #24
 801d426:	42ab      	cmp	r3, r5
 801d428:	d8f6      	bhi.n	801d418 <uxr_reset_stream_storage+0x64>
 801d42a:	bd70      	pop	{r4, r5, r6, pc}

0801d42c <uxr_add_output_best_effort_buffer>:
 801d42c:	b510      	push	{r4, lr}
 801d42e:	7c04      	ldrb	r4, [r0, #16]
 801d430:	b082      	sub	sp, #8
 801d432:	f104 0c01 	add.w	ip, r4, #1
 801d436:	f880 c010 	strb.w	ip, [r0, #16]
 801d43a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801d43e:	f002 f9fb 	bl	801f838 <uxr_init_output_best_effort_stream>
 801d442:	2201      	movs	r2, #1
 801d444:	4620      	mov	r0, r4
 801d446:	4611      	mov	r1, r2
 801d448:	b002      	add	sp, #8
 801d44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d44e:	f7ff bf4d 	b.w	801d2ec <uxr_stream_id>
 801d452:	bf00      	nop

0801d454 <uxr_add_output_reliable_buffer>:
 801d454:	b510      	push	{r4, lr}
 801d456:	b084      	sub	sp, #16
 801d458:	4684      	mov	ip, r0
 801d45a:	2028      	movs	r0, #40	@ 0x28
 801d45c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801d460:	9400      	str	r4, [sp, #0]
 801d462:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801d466:	fb00 c004 	mla	r0, r0, r4, ip
 801d46a:	f104 0e01 	add.w	lr, r4, #1
 801d46e:	3018      	adds	r0, #24
 801d470:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801d474:	f002 fa60 	bl	801f938 <uxr_init_output_reliable_stream>
 801d478:	2201      	movs	r2, #1
 801d47a:	2102      	movs	r1, #2
 801d47c:	4620      	mov	r0, r4
 801d47e:	b004      	add	sp, #16
 801d480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d484:	f7ff bf32 	b.w	801d2ec <uxr_stream_id>

0801d488 <uxr_add_input_best_effort_buffer>:
 801d488:	b510      	push	{r4, lr}
 801d48a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801d48e:	b082      	sub	sp, #8
 801d490:	1c62      	adds	r2, r4, #1
 801d492:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801d496:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801d49a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d49e:	f001 ffd7 	bl	801f450 <uxr_init_input_best_effort_stream>
 801d4a2:	2200      	movs	r2, #0
 801d4a4:	2101      	movs	r1, #1
 801d4a6:	4620      	mov	r0, r4
 801d4a8:	b002      	add	sp, #8
 801d4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4ae:	f7ff bf1d 	b.w	801d2ec <uxr_stream_id>
 801d4b2:	bf00      	nop

0801d4b4 <uxr_add_input_reliable_buffer>:
 801d4b4:	b510      	push	{r4, lr}
 801d4b6:	b084      	sub	sp, #16
 801d4b8:	4684      	mov	ip, r0
 801d4ba:	2018      	movs	r0, #24
 801d4bc:	9c06      	ldr	r4, [sp, #24]
 801d4be:	9400      	str	r4, [sp, #0]
 801d4c0:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801d4c4:	fb00 c004 	mla	r0, r0, r4, ip
 801d4c8:	f104 0e01 	add.w	lr, r4, #1
 801d4cc:	3048      	adds	r0, #72	@ 0x48
 801d4ce:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801d4d2:	f002 f807 	bl	801f4e4 <uxr_init_input_reliable_stream>
 801d4d6:	2200      	movs	r2, #0
 801d4d8:	2102      	movs	r1, #2
 801d4da:	4620      	mov	r0, r4
 801d4dc:	b004      	add	sp, #16
 801d4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4e2:	f7ff bf03 	b.w	801d2ec <uxr_stream_id>
 801d4e6:	bf00      	nop

0801d4e8 <uxr_get_output_best_effort_stream>:
 801d4e8:	7c03      	ldrb	r3, [r0, #16]
 801d4ea:	428b      	cmp	r3, r1
 801d4ec:	bf8c      	ite	hi
 801d4ee:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801d4f2:	2000      	movls	r0, #0
 801d4f4:	4770      	bx	lr
 801d4f6:	bf00      	nop

0801d4f8 <uxr_get_output_reliable_stream>:
 801d4f8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801d4fc:	428b      	cmp	r3, r1
 801d4fe:	d904      	bls.n	801d50a <uxr_get_output_reliable_stream+0x12>
 801d500:	2328      	movs	r3, #40	@ 0x28
 801d502:	fb03 0001 	mla	r0, r3, r1, r0
 801d506:	3018      	adds	r0, #24
 801d508:	4770      	bx	lr
 801d50a:	2000      	movs	r0, #0
 801d50c:	4770      	bx	lr
 801d50e:	bf00      	nop

0801d510 <uxr_get_input_best_effort_stream>:
 801d510:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801d514:	428b      	cmp	r3, r1
 801d516:	d903      	bls.n	801d520 <uxr_get_input_best_effort_stream+0x10>
 801d518:	3121      	adds	r1, #33	@ 0x21
 801d51a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d51e:	4770      	bx	lr
 801d520:	2000      	movs	r0, #0
 801d522:	4770      	bx	lr

0801d524 <uxr_get_input_reliable_stream>:
 801d524:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801d528:	428b      	cmp	r3, r1
 801d52a:	d904      	bls.n	801d536 <uxr_get_input_reliable_stream+0x12>
 801d52c:	2318      	movs	r3, #24
 801d52e:	fb03 0001 	mla	r0, r3, r1, r0
 801d532:	3048      	adds	r0, #72	@ 0x48
 801d534:	4770      	bx	lr
 801d536:	2000      	movs	r0, #0
 801d538:	4770      	bx	lr
 801d53a:	bf00      	nop

0801d53c <uxr_output_streams_confirmed>:
 801d53c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801d540:	b183      	cbz	r3, 801d564 <uxr_output_streams_confirmed+0x28>
 801d542:	b570      	push	{r4, r5, r6, lr}
 801d544:	4606      	mov	r6, r0
 801d546:	f100 0518 	add.w	r5, r0, #24
 801d54a:	2400      	movs	r4, #0
 801d54c:	e000      	b.n	801d550 <uxr_output_streams_confirmed+0x14>
 801d54e:	b140      	cbz	r0, 801d562 <uxr_output_streams_confirmed+0x26>
 801d550:	4628      	mov	r0, r5
 801d552:	3401      	adds	r4, #1
 801d554:	f002 fc9c 	bl	801fe90 <uxr_is_output_up_to_date>
 801d558:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801d55c:	3528      	adds	r5, #40	@ 0x28
 801d55e:	42a3      	cmp	r3, r4
 801d560:	d8f5      	bhi.n	801d54e <uxr_output_streams_confirmed+0x12>
 801d562:	bd70      	pop	{r4, r5, r6, pc}
 801d564:	2001      	movs	r0, #1
 801d566:	4770      	bx	lr

0801d568 <uxr_buffer_submessage_header>:
 801d568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d56a:	460e      	mov	r6, r1
 801d56c:	2104      	movs	r1, #4
 801d56e:	4604      	mov	r4, r0
 801d570:	4615      	mov	r5, r2
 801d572:	461f      	mov	r7, r3
 801d574:	f7f6 f802 	bl	801357c <ucdr_align_to>
 801d578:	2301      	movs	r3, #1
 801d57a:	4631      	mov	r1, r6
 801d57c:	4620      	mov	r0, r4
 801d57e:	ea47 0203 	orr.w	r2, r7, r3
 801d582:	7523      	strb	r3, [r4, #20]
 801d584:	462b      	mov	r3, r5
 801d586:	f000 f8d5 	bl	801d734 <uxr_serialize_submessage_header>
 801d58a:	4620      	mov	r0, r4
 801d58c:	f7f6 f80c 	bl	80135a8 <ucdr_buffer_remaining>
 801d590:	42a8      	cmp	r0, r5
 801d592:	bf34      	ite	cc
 801d594:	2000      	movcc	r0, #0
 801d596:	2001      	movcs	r0, #1
 801d598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d59a:	bf00      	nop

0801d59c <uxr_read_submessage_header>:
 801d59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5a0:	4604      	mov	r4, r0
 801d5a2:	460d      	mov	r5, r1
 801d5a4:	2104      	movs	r1, #4
 801d5a6:	4616      	mov	r6, r2
 801d5a8:	4698      	mov	r8, r3
 801d5aa:	f7f5 ffe7 	bl	801357c <ucdr_align_to>
 801d5ae:	4620      	mov	r0, r4
 801d5b0:	f7f5 fffa 	bl	80135a8 <ucdr_buffer_remaining>
 801d5b4:	2803      	cmp	r0, #3
 801d5b6:	bf8c      	ite	hi
 801d5b8:	2701      	movhi	r7, #1
 801d5ba:	2700      	movls	r7, #0
 801d5bc:	d802      	bhi.n	801d5c4 <uxr_read_submessage_header+0x28>
 801d5be:	4638      	mov	r0, r7
 801d5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5c4:	4633      	mov	r3, r6
 801d5c6:	4642      	mov	r2, r8
 801d5c8:	4620      	mov	r0, r4
 801d5ca:	4629      	mov	r1, r5
 801d5cc:	f000 f8c6 	bl	801d75c <uxr_deserialize_submessage_header>
 801d5d0:	f898 3000 	ldrb.w	r3, [r8]
 801d5d4:	4638      	mov	r0, r7
 801d5d6:	f003 0201 	and.w	r2, r3, #1
 801d5da:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801d5de:	f888 3000 	strb.w	r3, [r8]
 801d5e2:	7522      	strb	r2, [r4, #20]
 801d5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d5e8 <uxr_submessage_padding>:
 801d5e8:	f010 0003 	ands.w	r0, r0, #3
 801d5ec:	bf18      	it	ne
 801d5ee:	f1c0 0004 	rsbne	r0, r0, #4
 801d5f2:	4770      	bx	lr

0801d5f4 <uxr_millis>:
 801d5f4:	b510      	push	{r4, lr}
 801d5f6:	b084      	sub	sp, #16
 801d5f8:	2001      	movs	r0, #1
 801d5fa:	4669      	mov	r1, sp
 801d5fc:	f7e4 fbc4 	bl	8001d88 <clock_gettime>
 801d600:	4908      	ldr	r1, [pc, #32]	@ (801d624 <uxr_millis+0x30>)
 801d602:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801d606:	fba0 0301 	umull	r0, r3, r0, r1
 801d60a:	1900      	adds	r0, r0, r4
 801d60c:	fb01 3102 	mla	r1, r1, r2, r3
 801d610:	4a05      	ldr	r2, [pc, #20]	@ (801d628 <uxr_millis+0x34>)
 801d612:	f04f 0300 	mov.w	r3, #0
 801d616:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801d61a:	f7e2 fec9 	bl	80003b0 <__aeabi_ldivmod>
 801d61e:	b004      	add	sp, #16
 801d620:	bd10      	pop	{r4, pc}
 801d622:	bf00      	nop
 801d624:	3b9aca00 	.word	0x3b9aca00
 801d628:	000f4240 	.word	0x000f4240

0801d62c <uxr_nanos>:
 801d62c:	b510      	push	{r4, lr}
 801d62e:	b084      	sub	sp, #16
 801d630:	2001      	movs	r0, #1
 801d632:	4669      	mov	r1, sp
 801d634:	f7e4 fba8 	bl	8001d88 <clock_gettime>
 801d638:	4a06      	ldr	r2, [pc, #24]	@ (801d654 <uxr_nanos+0x28>)
 801d63a:	9800      	ldr	r0, [sp, #0]
 801d63c:	9902      	ldr	r1, [sp, #8]
 801d63e:	fba0 0302 	umull	r0, r3, r0, r2
 801d642:	9c01      	ldr	r4, [sp, #4]
 801d644:	1840      	adds	r0, r0, r1
 801d646:	fb02 3304 	mla	r3, r2, r4, r3
 801d64a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801d64e:	b004      	add	sp, #16
 801d650:	bd10      	pop	{r4, pc}
 801d652:	bf00      	nop
 801d654:	3b9aca00 	.word	0x3b9aca00

0801d658 <uxr_prepare_output_stream>:
 801d658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d65a:	b087      	sub	sp, #28
 801d65c:	2707      	movs	r7, #7
 801d65e:	2500      	movs	r5, #0
 801d660:	461c      	mov	r4, r3
 801d662:	4606      	mov	r6, r0
 801d664:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801d668:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d66a:	e9cd 7500 	strd	r7, r5, [sp]
 801d66e:	3204      	adds	r2, #4
 801d670:	f7ff f852 	bl	801c718 <uxr_prepare_stream_to_write_submessage>
 801d674:	f080 0201 	eor.w	r2, r0, #1
 801d678:	b2d2      	uxtb	r2, r2
 801d67a:	75a2      	strb	r2, [r4, #22]
 801d67c:	b112      	cbz	r2, 801d684 <uxr_prepare_output_stream+0x2c>
 801d67e:	4628      	mov	r0, r5
 801d680:	b007      	add	sp, #28
 801d682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d684:	aa05      	add	r2, sp, #20
 801d686:	9902      	ldr	r1, [sp, #8]
 801d688:	4630      	mov	r0, r6
 801d68a:	f7ff f981 	bl	801c990 <uxr_init_base_object_request>
 801d68e:	a905      	add	r1, sp, #20
 801d690:	4605      	mov	r5, r0
 801d692:	4620      	mov	r0, r4
 801d694:	f000 fff2 	bl	801e67c <uxr_serialize_WRITE_DATA_Payload_Data>
 801d698:	69a6      	ldr	r6, [r4, #24]
 801d69a:	69e7      	ldr	r7, [r4, #28]
 801d69c:	4620      	mov	r0, r4
 801d69e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801d6a2:	1a52      	subs	r2, r2, r1
 801d6a4:	f7f5 ff4e 	bl	8013544 <ucdr_init_buffer>
 801d6a8:	4620      	mov	r0, r4
 801d6aa:	463a      	mov	r2, r7
 801d6ac:	4631      	mov	r1, r6
 801d6ae:	f7f5 ff1d 	bl	80134ec <ucdr_set_on_full_buffer_callback>
 801d6b2:	4628      	mov	r0, r5
 801d6b4:	b007      	add	sp, #28
 801d6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d6b8 <uxr_serialize_message_header>:
 801d6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6ba:	4616      	mov	r6, r2
 801d6bc:	b083      	sub	sp, #12
 801d6be:	4604      	mov	r4, r0
 801d6c0:	460d      	mov	r5, r1
 801d6c2:	9301      	str	r3, [sp, #4]
 801d6c4:	9f08      	ldr	r7, [sp, #32]
 801d6c6:	f7f4 fcd3 	bl	8012070 <ucdr_serialize_uint8_t>
 801d6ca:	4631      	mov	r1, r6
 801d6cc:	4620      	mov	r0, r4
 801d6ce:	f7f4 fccf 	bl	8012070 <ucdr_serialize_uint8_t>
 801d6d2:	9a01      	ldr	r2, [sp, #4]
 801d6d4:	2101      	movs	r1, #1
 801d6d6:	4620      	mov	r0, r4
 801d6d8:	f7f4 fd76 	bl	80121c8 <ucdr_serialize_endian_uint16_t>
 801d6dc:	062b      	lsls	r3, r5, #24
 801d6de:	d501      	bpl.n	801d6e4 <uxr_serialize_message_header+0x2c>
 801d6e0:	b003      	add	sp, #12
 801d6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6e4:	2204      	movs	r2, #4
 801d6e6:	4639      	mov	r1, r7
 801d6e8:	4620      	mov	r0, r4
 801d6ea:	b003      	add	sp, #12
 801d6ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d6f0:	f7fd bbc2 	b.w	801ae78 <ucdr_serialize_array_uint8_t>

0801d6f4 <uxr_deserialize_message_header>:
 801d6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6f6:	4616      	mov	r6, r2
 801d6f8:	b083      	sub	sp, #12
 801d6fa:	4604      	mov	r4, r0
 801d6fc:	460d      	mov	r5, r1
 801d6fe:	9301      	str	r3, [sp, #4]
 801d700:	9f08      	ldr	r7, [sp, #32]
 801d702:	f7f4 fccb 	bl	801209c <ucdr_deserialize_uint8_t>
 801d706:	4631      	mov	r1, r6
 801d708:	4620      	mov	r0, r4
 801d70a:	f7f4 fcc7 	bl	801209c <ucdr_deserialize_uint8_t>
 801d70e:	9a01      	ldr	r2, [sp, #4]
 801d710:	2101      	movs	r1, #1
 801d712:	4620      	mov	r0, r4
 801d714:	f7f4 fe4c 	bl	80123b0 <ucdr_deserialize_endian_uint16_t>
 801d718:	f995 3000 	ldrsb.w	r3, [r5]
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	da01      	bge.n	801d724 <uxr_deserialize_message_header+0x30>
 801d720:	b003      	add	sp, #12
 801d722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d724:	2204      	movs	r2, #4
 801d726:	4639      	mov	r1, r7
 801d728:	4620      	mov	r0, r4
 801d72a:	b003      	add	sp, #12
 801d72c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d730:	f7fd bc06 	b.w	801af40 <ucdr_deserialize_array_uint8_t>

0801d734 <uxr_serialize_submessage_header>:
 801d734:	b530      	push	{r4, r5, lr}
 801d736:	4615      	mov	r5, r2
 801d738:	b083      	sub	sp, #12
 801d73a:	4604      	mov	r4, r0
 801d73c:	9301      	str	r3, [sp, #4]
 801d73e:	f7f4 fc97 	bl	8012070 <ucdr_serialize_uint8_t>
 801d742:	4629      	mov	r1, r5
 801d744:	4620      	mov	r0, r4
 801d746:	f7f4 fc93 	bl	8012070 <ucdr_serialize_uint8_t>
 801d74a:	9a01      	ldr	r2, [sp, #4]
 801d74c:	2101      	movs	r1, #1
 801d74e:	4620      	mov	r0, r4
 801d750:	b003      	add	sp, #12
 801d752:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d756:	f7f4 bd37 	b.w	80121c8 <ucdr_serialize_endian_uint16_t>
 801d75a:	bf00      	nop

0801d75c <uxr_deserialize_submessage_header>:
 801d75c:	b530      	push	{r4, r5, lr}
 801d75e:	4615      	mov	r5, r2
 801d760:	b083      	sub	sp, #12
 801d762:	4604      	mov	r4, r0
 801d764:	9301      	str	r3, [sp, #4]
 801d766:	f7f4 fc99 	bl	801209c <ucdr_deserialize_uint8_t>
 801d76a:	4629      	mov	r1, r5
 801d76c:	4620      	mov	r0, r4
 801d76e:	f7f4 fc95 	bl	801209c <ucdr_deserialize_uint8_t>
 801d772:	9a01      	ldr	r2, [sp, #4]
 801d774:	2101      	movs	r1, #1
 801d776:	4620      	mov	r0, r4
 801d778:	b003      	add	sp, #12
 801d77a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d77e:	f7f4 be17 	b.w	80123b0 <ucdr_deserialize_endian_uint16_t>
 801d782:	bf00      	nop

0801d784 <uxr_serialize_CLIENT_Representation>:
 801d784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d788:	2204      	movs	r2, #4
 801d78a:	460e      	mov	r6, r1
 801d78c:	4605      	mov	r5, r0
 801d78e:	f7fd fb73 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801d792:	4607      	mov	r7, r0
 801d794:	2202      	movs	r2, #2
 801d796:	1d31      	adds	r1, r6, #4
 801d798:	4628      	mov	r0, r5
 801d79a:	f7fd fb6d 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801d79e:	4038      	ands	r0, r7
 801d7a0:	2202      	movs	r2, #2
 801d7a2:	1db1      	adds	r1, r6, #6
 801d7a4:	b2c7      	uxtb	r7, r0
 801d7a6:	4628      	mov	r0, r5
 801d7a8:	f7fd fb66 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801d7ac:	2204      	movs	r2, #4
 801d7ae:	4007      	ands	r7, r0
 801d7b0:	f106 0108 	add.w	r1, r6, #8
 801d7b4:	4628      	mov	r0, r5
 801d7b6:	f7fd fb5f 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801d7ba:	4007      	ands	r7, r0
 801d7bc:	7b31      	ldrb	r1, [r6, #12]
 801d7be:	4628      	mov	r0, r5
 801d7c0:	f7f4 fc56 	bl	8012070 <ucdr_serialize_uint8_t>
 801d7c4:	7b71      	ldrb	r1, [r6, #13]
 801d7c6:	4007      	ands	r7, r0
 801d7c8:	4628      	mov	r0, r5
 801d7ca:	f7f4 fc23 	bl	8012014 <ucdr_serialize_bool>
 801d7ce:	7b73      	ldrb	r3, [r6, #13]
 801d7d0:	ea07 0800 	and.w	r8, r7, r0
 801d7d4:	b93b      	cbnz	r3, 801d7e6 <uxr_serialize_CLIENT_Representation+0x62>
 801d7d6:	8bb1      	ldrh	r1, [r6, #28]
 801d7d8:	4628      	mov	r0, r5
 801d7da:	f7f4 fc75 	bl	80120c8 <ucdr_serialize_uint16_t>
 801d7de:	ea08 0000 	and.w	r0, r8, r0
 801d7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d7e6:	6931      	ldr	r1, [r6, #16]
 801d7e8:	4628      	mov	r0, r5
 801d7ea:	f7f4 fe57 	bl	801249c <ucdr_serialize_uint32_t>
 801d7ee:	6933      	ldr	r3, [r6, #16]
 801d7f0:	b1e3      	cbz	r3, 801d82c <uxr_serialize_CLIENT_Representation+0xa8>
 801d7f2:	b1c0      	cbz	r0, 801d826 <uxr_serialize_CLIENT_Representation+0xa2>
 801d7f4:	4637      	mov	r7, r6
 801d7f6:	f04f 0900 	mov.w	r9, #0
 801d7fa:	e000      	b.n	801d7fe <uxr_serialize_CLIENT_Representation+0x7a>
 801d7fc:	b19c      	cbz	r4, 801d826 <uxr_serialize_CLIENT_Representation+0xa2>
 801d7fe:	6979      	ldr	r1, [r7, #20]
 801d800:	4628      	mov	r0, r5
 801d802:	f001 fe0d 	bl	801f420 <ucdr_serialize_string>
 801d806:	69b9      	ldr	r1, [r7, #24]
 801d808:	4604      	mov	r4, r0
 801d80a:	4628      	mov	r0, r5
 801d80c:	f001 fe08 	bl	801f420 <ucdr_serialize_string>
 801d810:	f109 0901 	add.w	r9, r9, #1
 801d814:	6933      	ldr	r3, [r6, #16]
 801d816:	4004      	ands	r4, r0
 801d818:	3708      	adds	r7, #8
 801d81a:	4599      	cmp	r9, r3
 801d81c:	b2e4      	uxtb	r4, r4
 801d81e:	d3ed      	bcc.n	801d7fc <uxr_serialize_CLIENT_Representation+0x78>
 801d820:	ea08 0804 	and.w	r8, r8, r4
 801d824:	e7d7      	b.n	801d7d6 <uxr_serialize_CLIENT_Representation+0x52>
 801d826:	f04f 0800 	mov.w	r8, #0
 801d82a:	e7d4      	b.n	801d7d6 <uxr_serialize_CLIENT_Representation+0x52>
 801d82c:	ea08 0800 	and.w	r8, r8, r0
 801d830:	e7d1      	b.n	801d7d6 <uxr_serialize_CLIENT_Representation+0x52>
 801d832:	bf00      	nop

0801d834 <uxr_deserialize_CLIENT_Representation>:
 801d834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d838:	2204      	movs	r2, #4
 801d83a:	460c      	mov	r4, r1
 801d83c:	4605      	mov	r5, r0
 801d83e:	f7fd fb7f 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801d842:	4607      	mov	r7, r0
 801d844:	2202      	movs	r2, #2
 801d846:	1d21      	adds	r1, r4, #4
 801d848:	4628      	mov	r0, r5
 801d84a:	f7fd fb79 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801d84e:	4038      	ands	r0, r7
 801d850:	2202      	movs	r2, #2
 801d852:	1da1      	adds	r1, r4, #6
 801d854:	b2c6      	uxtb	r6, r0
 801d856:	4628      	mov	r0, r5
 801d858:	f7fd fb72 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801d85c:	2204      	movs	r2, #4
 801d85e:	4006      	ands	r6, r0
 801d860:	f104 0108 	add.w	r1, r4, #8
 801d864:	4628      	mov	r0, r5
 801d866:	f7fd fb6b 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801d86a:	4006      	ands	r6, r0
 801d86c:	f104 010c 	add.w	r1, r4, #12
 801d870:	4628      	mov	r0, r5
 801d872:	f7f4 fc13 	bl	801209c <ucdr_deserialize_uint8_t>
 801d876:	f104 010d 	add.w	r1, r4, #13
 801d87a:	ea06 0700 	and.w	r7, r6, r0
 801d87e:	4628      	mov	r0, r5
 801d880:	f7f4 fbde 	bl	8012040 <ucdr_deserialize_bool>
 801d884:	7b63      	ldrb	r3, [r4, #13]
 801d886:	4007      	ands	r7, r0
 801d888:	b93b      	cbnz	r3, 801d89a <uxr_deserialize_CLIENT_Representation+0x66>
 801d88a:	f104 011c 	add.w	r1, r4, #28
 801d88e:	4628      	mov	r0, r5
 801d890:	f7f4 fd1a 	bl	80122c8 <ucdr_deserialize_uint16_t>
 801d894:	4038      	ands	r0, r7
 801d896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d89a:	f104 0110 	add.w	r1, r4, #16
 801d89e:	4628      	mov	r0, r5
 801d8a0:	f7f4 ff2c 	bl	80126fc <ucdr_deserialize_uint32_t>
 801d8a4:	6923      	ldr	r3, [r4, #16]
 801d8a6:	2b01      	cmp	r3, #1
 801d8a8:	d903      	bls.n	801d8b2 <uxr_deserialize_CLIENT_Representation+0x7e>
 801d8aa:	2301      	movs	r3, #1
 801d8ac:	2700      	movs	r7, #0
 801d8ae:	75ab      	strb	r3, [r5, #22]
 801d8b0:	e7eb      	b.n	801d88a <uxr_deserialize_CLIENT_Representation+0x56>
 801d8b2:	b30b      	cbz	r3, 801d8f8 <uxr_deserialize_CLIENT_Representation+0xc4>
 801d8b4:	b1f0      	cbz	r0, 801d8f4 <uxr_deserialize_CLIENT_Representation+0xc0>
 801d8b6:	46a0      	mov	r8, r4
 801d8b8:	f04f 0900 	mov.w	r9, #0
 801d8bc:	e000      	b.n	801d8c0 <uxr_deserialize_CLIENT_Representation+0x8c>
 801d8be:	b1ce      	cbz	r6, 801d8f4 <uxr_deserialize_CLIENT_Representation+0xc0>
 801d8c0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801d8c4:	f108 0808 	add.w	r8, r8, #8
 801d8c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d8cc:	4628      	mov	r0, r5
 801d8ce:	f001 fdb7 	bl	801f440 <ucdr_deserialize_string>
 801d8d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801d8d6:	4606      	mov	r6, r0
 801d8d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d8dc:	4628      	mov	r0, r5
 801d8de:	f109 0901 	add.w	r9, r9, #1
 801d8e2:	f001 fdad 	bl	801f440 <ucdr_deserialize_string>
 801d8e6:	6923      	ldr	r3, [r4, #16]
 801d8e8:	4006      	ands	r6, r0
 801d8ea:	4599      	cmp	r9, r3
 801d8ec:	b2f6      	uxtb	r6, r6
 801d8ee:	d3e6      	bcc.n	801d8be <uxr_deserialize_CLIENT_Representation+0x8a>
 801d8f0:	4037      	ands	r7, r6
 801d8f2:	e7ca      	b.n	801d88a <uxr_deserialize_CLIENT_Representation+0x56>
 801d8f4:	2700      	movs	r7, #0
 801d8f6:	e7c8      	b.n	801d88a <uxr_deserialize_CLIENT_Representation+0x56>
 801d8f8:	4007      	ands	r7, r0
 801d8fa:	e7c6      	b.n	801d88a <uxr_deserialize_CLIENT_Representation+0x56>

0801d8fc <uxr_serialize_AGENT_Representation>:
 801d8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d900:	2204      	movs	r2, #4
 801d902:	460f      	mov	r7, r1
 801d904:	4605      	mov	r5, r0
 801d906:	f7fd fab7 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801d90a:	4604      	mov	r4, r0
 801d90c:	2202      	movs	r2, #2
 801d90e:	1d39      	adds	r1, r7, #4
 801d910:	4628      	mov	r0, r5
 801d912:	f7fd fab1 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801d916:	4020      	ands	r0, r4
 801d918:	2202      	movs	r2, #2
 801d91a:	1db9      	adds	r1, r7, #6
 801d91c:	b2c4      	uxtb	r4, r0
 801d91e:	4628      	mov	r0, r5
 801d920:	f7fd faaa 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801d924:	7a39      	ldrb	r1, [r7, #8]
 801d926:	4004      	ands	r4, r0
 801d928:	4628      	mov	r0, r5
 801d92a:	f7f4 fb73 	bl	8012014 <ucdr_serialize_bool>
 801d92e:	7a3b      	ldrb	r3, [r7, #8]
 801d930:	ea00 0804 	and.w	r8, r0, r4
 801d934:	b913      	cbnz	r3, 801d93c <uxr_serialize_AGENT_Representation+0x40>
 801d936:	4640      	mov	r0, r8
 801d938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d93c:	68f9      	ldr	r1, [r7, #12]
 801d93e:	4628      	mov	r0, r5
 801d940:	f7f4 fdac 	bl	801249c <ucdr_serialize_uint32_t>
 801d944:	68fb      	ldr	r3, [r7, #12]
 801d946:	b303      	cbz	r3, 801d98a <uxr_serialize_AGENT_Representation+0x8e>
 801d948:	b1d0      	cbz	r0, 801d980 <uxr_serialize_AGENT_Representation+0x84>
 801d94a:	463e      	mov	r6, r7
 801d94c:	f04f 0900 	mov.w	r9, #0
 801d950:	e000      	b.n	801d954 <uxr_serialize_AGENT_Representation+0x58>
 801d952:	b1ac      	cbz	r4, 801d980 <uxr_serialize_AGENT_Representation+0x84>
 801d954:	6931      	ldr	r1, [r6, #16]
 801d956:	4628      	mov	r0, r5
 801d958:	f001 fd62 	bl	801f420 <ucdr_serialize_string>
 801d95c:	6971      	ldr	r1, [r6, #20]
 801d95e:	4604      	mov	r4, r0
 801d960:	4628      	mov	r0, r5
 801d962:	f001 fd5d 	bl	801f420 <ucdr_serialize_string>
 801d966:	f109 0901 	add.w	r9, r9, #1
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	4004      	ands	r4, r0
 801d96e:	3608      	adds	r6, #8
 801d970:	4599      	cmp	r9, r3
 801d972:	b2e4      	uxtb	r4, r4
 801d974:	d3ed      	bcc.n	801d952 <uxr_serialize_AGENT_Representation+0x56>
 801d976:	ea08 0804 	and.w	r8, r8, r4
 801d97a:	4640      	mov	r0, r8
 801d97c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d980:	f04f 0800 	mov.w	r8, #0
 801d984:	4640      	mov	r0, r8
 801d986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d98a:	ea08 0800 	and.w	r8, r8, r0
 801d98e:	e7d2      	b.n	801d936 <uxr_serialize_AGENT_Representation+0x3a>

0801d990 <uxr_serialize_DATAWRITER_Representation>:
 801d990:	b570      	push	{r4, r5, r6, lr}
 801d992:	460d      	mov	r5, r1
 801d994:	7809      	ldrb	r1, [r1, #0]
 801d996:	4606      	mov	r6, r0
 801d998:	f7f4 fb6a 	bl	8012070 <ucdr_serialize_uint8_t>
 801d99c:	4604      	mov	r4, r0
 801d99e:	b130      	cbz	r0, 801d9ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 801d9a0:	782b      	ldrb	r3, [r5, #0]
 801d9a2:	2b02      	cmp	r3, #2
 801d9a4:	d00c      	beq.n	801d9c0 <uxr_serialize_DATAWRITER_Representation+0x30>
 801d9a6:	2b03      	cmp	r3, #3
 801d9a8:	d010      	beq.n	801d9cc <uxr_serialize_DATAWRITER_Representation+0x3c>
 801d9aa:	2b01      	cmp	r3, #1
 801d9ac:	d008      	beq.n	801d9c0 <uxr_serialize_DATAWRITER_Representation+0x30>
 801d9ae:	2202      	movs	r2, #2
 801d9b0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801d9b4:	4630      	mov	r0, r6
 801d9b6:	f7fd fa5f 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801d9ba:	4020      	ands	r0, r4
 801d9bc:	b2c0      	uxtb	r0, r0
 801d9be:	bd70      	pop	{r4, r5, r6, pc}
 801d9c0:	6869      	ldr	r1, [r5, #4]
 801d9c2:	4630      	mov	r0, r6
 801d9c4:	f001 fd2c 	bl	801f420 <ucdr_serialize_string>
 801d9c8:	4604      	mov	r4, r0
 801d9ca:	e7f0      	b.n	801d9ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 801d9cc:	4629      	mov	r1, r5
 801d9ce:	4630      	mov	r0, r6
 801d9d0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801d9d4:	3104      	adds	r1, #4
 801d9d6:	f7f7 fc1f 	bl	8015218 <ucdr_serialize_sequence_uint8_t>
 801d9da:	4604      	mov	r4, r0
 801d9dc:	e7e7      	b.n	801d9ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 801d9de:	bf00      	nop

0801d9e0 <uxr_serialize_ObjectVariant.part.0>:
 801d9e0:	b570      	push	{r4, r5, r6, lr}
 801d9e2:	780b      	ldrb	r3, [r1, #0]
 801d9e4:	460c      	mov	r4, r1
 801d9e6:	4605      	mov	r5, r0
 801d9e8:	3b01      	subs	r3, #1
 801d9ea:	2b0d      	cmp	r3, #13
 801d9ec:	d854      	bhi.n	801da98 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801d9ee:	e8df f003 	tbb	[pc, r3]
 801d9f2:	0730      	.short	0x0730
 801d9f4:	07071b1b 	.word	0x07071b1b
 801d9f8:	0c530707 	.word	0x0c530707
 801d9fc:	494e0c0c 	.word	0x494e0c0c
 801da00:	3104      	adds	r1, #4
 801da02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da06:	f7ff bfc3 	b.w	801d990 <uxr_serialize_DATAWRITER_Representation>
 801da0a:	7909      	ldrb	r1, [r1, #4]
 801da0c:	f7f4 fb30 	bl	8012070 <ucdr_serialize_uint8_t>
 801da10:	b1e8      	cbz	r0, 801da4e <uxr_serialize_ObjectVariant.part.0+0x6e>
 801da12:	7923      	ldrb	r3, [r4, #4]
 801da14:	2b01      	cmp	r3, #1
 801da16:	d001      	beq.n	801da1c <uxr_serialize_ObjectVariant.part.0+0x3c>
 801da18:	2b02      	cmp	r3, #2
 801da1a:	d13d      	bne.n	801da98 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801da1c:	68a1      	ldr	r1, [r4, #8]
 801da1e:	4628      	mov	r0, r5
 801da20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da24:	f001 bcfc 	b.w	801f420 <ucdr_serialize_string>
 801da28:	7909      	ldrb	r1, [r1, #4]
 801da2a:	f7f4 fb21 	bl	8012070 <ucdr_serialize_uint8_t>
 801da2e:	4606      	mov	r6, r0
 801da30:	b120      	cbz	r0, 801da3c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801da32:	7923      	ldrb	r3, [r4, #4]
 801da34:	2b02      	cmp	r3, #2
 801da36:	d039      	beq.n	801daac <uxr_serialize_ObjectVariant.part.0+0xcc>
 801da38:	2b03      	cmp	r3, #3
 801da3a:	d02f      	beq.n	801da9c <uxr_serialize_ObjectVariant.part.0+0xbc>
 801da3c:	2202      	movs	r2, #2
 801da3e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801da42:	4628      	mov	r0, r5
 801da44:	f7fd fa18 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801da48:	4030      	ands	r0, r6
 801da4a:	b2c0      	uxtb	r0, r0
 801da4c:	bd70      	pop	{r4, r5, r6, pc}
 801da4e:	2000      	movs	r0, #0
 801da50:	bd70      	pop	{r4, r5, r6, pc}
 801da52:	7909      	ldrb	r1, [r1, #4]
 801da54:	f7f4 fb0c 	bl	8012070 <ucdr_serialize_uint8_t>
 801da58:	4606      	mov	r6, r0
 801da5a:	b158      	cbz	r0, 801da74 <uxr_serialize_ObjectVariant.part.0+0x94>
 801da5c:	7923      	ldrb	r3, [r4, #4]
 801da5e:	2b02      	cmp	r3, #2
 801da60:	d003      	beq.n	801da6a <uxr_serialize_ObjectVariant.part.0+0x8a>
 801da62:	2b03      	cmp	r3, #3
 801da64:	d028      	beq.n	801dab8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801da66:	2b01      	cmp	r3, #1
 801da68:	d104      	bne.n	801da74 <uxr_serialize_ObjectVariant.part.0+0x94>
 801da6a:	68a1      	ldr	r1, [r4, #8]
 801da6c:	4628      	mov	r0, r5
 801da6e:	f001 fcd7 	bl	801f420 <ucdr_serialize_string>
 801da72:	4606      	mov	r6, r0
 801da74:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801da78:	4628      	mov	r0, r5
 801da7a:	f7f5 f835 	bl	8012ae8 <ucdr_serialize_int16_t>
 801da7e:	4030      	ands	r0, r6
 801da80:	b2c0      	uxtb	r0, r0
 801da82:	bd70      	pop	{r4, r5, r6, pc}
 801da84:	3104      	adds	r1, #4
 801da86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da8a:	f7ff be7b 	b.w	801d784 <uxr_serialize_CLIENT_Representation>
 801da8e:	3104      	adds	r1, #4
 801da90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da94:	f7ff bf32 	b.w	801d8fc <uxr_serialize_AGENT_Representation>
 801da98:	2001      	movs	r0, #1
 801da9a:	bd70      	pop	{r4, r5, r6, pc}
 801da9c:	68a2      	ldr	r2, [r4, #8]
 801da9e:	f104 010c 	add.w	r1, r4, #12
 801daa2:	4628      	mov	r0, r5
 801daa4:	f7f7 fbb8 	bl	8015218 <ucdr_serialize_sequence_uint8_t>
 801daa8:	4606      	mov	r6, r0
 801daaa:	e7c7      	b.n	801da3c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801daac:	68a1      	ldr	r1, [r4, #8]
 801daae:	4628      	mov	r0, r5
 801dab0:	f001 fcb6 	bl	801f420 <ucdr_serialize_string>
 801dab4:	4606      	mov	r6, r0
 801dab6:	e7c1      	b.n	801da3c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801dab8:	68a2      	ldr	r2, [r4, #8]
 801daba:	f104 010c 	add.w	r1, r4, #12
 801dabe:	4628      	mov	r0, r5
 801dac0:	f7f7 fbaa 	bl	8015218 <ucdr_serialize_sequence_uint8_t>
 801dac4:	4606      	mov	r6, r0
 801dac6:	e7d5      	b.n	801da74 <uxr_serialize_ObjectVariant.part.0+0x94>

0801dac8 <uxr_deserialize_DATAWRITER_Representation>:
 801dac8:	b570      	push	{r4, r5, r6, lr}
 801daca:	4606      	mov	r6, r0
 801dacc:	460d      	mov	r5, r1
 801dace:	f7f4 fae5 	bl	801209c <ucdr_deserialize_uint8_t>
 801dad2:	4604      	mov	r4, r0
 801dad4:	b130      	cbz	r0, 801dae4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801dad6:	782b      	ldrb	r3, [r5, #0]
 801dad8:	2b02      	cmp	r3, #2
 801dada:	d00c      	beq.n	801daf6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801dadc:	2b03      	cmp	r3, #3
 801dade:	d012      	beq.n	801db06 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801dae0:	2b01      	cmp	r3, #1
 801dae2:	d008      	beq.n	801daf6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801dae4:	2202      	movs	r2, #2
 801dae6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801daea:	4630      	mov	r0, r6
 801daec:	f7fd fa28 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801daf0:	4020      	ands	r0, r4
 801daf2:	b2c0      	uxtb	r0, r0
 801daf4:	bd70      	pop	{r4, r5, r6, pc}
 801daf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801dafa:	6869      	ldr	r1, [r5, #4]
 801dafc:	4630      	mov	r0, r6
 801dafe:	f001 fc9f 	bl	801f440 <ucdr_deserialize_string>
 801db02:	4604      	mov	r4, r0
 801db04:	e7ee      	b.n	801dae4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801db06:	1d2b      	adds	r3, r5, #4
 801db08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801db0c:	f105 0108 	add.w	r1, r5, #8
 801db10:	4630      	mov	r0, r6
 801db12:	f7f7 fb93 	bl	801523c <ucdr_deserialize_sequence_uint8_t>
 801db16:	4604      	mov	r4, r0
 801db18:	e7e4      	b.n	801dae4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801db1a:	bf00      	nop

0801db1c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801db1c:	b570      	push	{r4, r5, r6, lr}
 801db1e:	460d      	mov	r5, r1
 801db20:	7809      	ldrb	r1, [r1, #0]
 801db22:	4606      	mov	r6, r0
 801db24:	f7f4 fa76 	bl	8012014 <ucdr_serialize_bool>
 801db28:	782b      	ldrb	r3, [r5, #0]
 801db2a:	4604      	mov	r4, r0
 801db2c:	b94b      	cbnz	r3, 801db42 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801db2e:	7a29      	ldrb	r1, [r5, #8]
 801db30:	4630      	mov	r0, r6
 801db32:	f7f4 fa6f 	bl	8012014 <ucdr_serialize_bool>
 801db36:	7a2b      	ldrb	r3, [r5, #8]
 801db38:	4004      	ands	r4, r0
 801db3a:	b2e4      	uxtb	r4, r4
 801db3c:	b943      	cbnz	r3, 801db50 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801db3e:	4620      	mov	r0, r4
 801db40:	bd70      	pop	{r4, r5, r6, pc}
 801db42:	6869      	ldr	r1, [r5, #4]
 801db44:	4630      	mov	r0, r6
 801db46:	f001 fc6b 	bl	801f420 <ucdr_serialize_string>
 801db4a:	4004      	ands	r4, r0
 801db4c:	b2e4      	uxtb	r4, r4
 801db4e:	e7ee      	b.n	801db2e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801db50:	68e9      	ldr	r1, [r5, #12]
 801db52:	4630      	mov	r0, r6
 801db54:	f001 fc64 	bl	801f420 <ucdr_serialize_string>
 801db58:	4004      	ands	r4, r0
 801db5a:	4620      	mov	r0, r4
 801db5c:	bd70      	pop	{r4, r5, r6, pc}
 801db5e:	bf00      	nop

0801db60 <uxr_serialize_OBJK_Topic_Binary>:
 801db60:	b570      	push	{r4, r5, r6, lr}
 801db62:	460d      	mov	r5, r1
 801db64:	4606      	mov	r6, r0
 801db66:	6809      	ldr	r1, [r1, #0]
 801db68:	f001 fc5a 	bl	801f420 <ucdr_serialize_string>
 801db6c:	4604      	mov	r4, r0
 801db6e:	7929      	ldrb	r1, [r5, #4]
 801db70:	4630      	mov	r0, r6
 801db72:	f7f4 fa4f 	bl	8012014 <ucdr_serialize_bool>
 801db76:	792b      	ldrb	r3, [r5, #4]
 801db78:	4004      	ands	r4, r0
 801db7a:	b2e4      	uxtb	r4, r4
 801db7c:	b943      	cbnz	r3, 801db90 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801db7e:	7b29      	ldrb	r1, [r5, #12]
 801db80:	4630      	mov	r0, r6
 801db82:	f7f4 fa47 	bl	8012014 <ucdr_serialize_bool>
 801db86:	7b2b      	ldrb	r3, [r5, #12]
 801db88:	4004      	ands	r4, r0
 801db8a:	b93b      	cbnz	r3, 801db9c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801db8c:	4620      	mov	r0, r4
 801db8e:	bd70      	pop	{r4, r5, r6, pc}
 801db90:	68a9      	ldr	r1, [r5, #8]
 801db92:	4630      	mov	r0, r6
 801db94:	f001 fc44 	bl	801f420 <ucdr_serialize_string>
 801db98:	4004      	ands	r4, r0
 801db9a:	e7f0      	b.n	801db7e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801db9c:	6929      	ldr	r1, [r5, #16]
 801db9e:	4630      	mov	r0, r6
 801dba0:	f001 fc3e 	bl	801f420 <ucdr_serialize_string>
 801dba4:	4004      	ands	r4, r0
 801dba6:	b2e4      	uxtb	r4, r4
 801dba8:	4620      	mov	r0, r4
 801dbaa:	bd70      	pop	{r4, r5, r6, pc}

0801dbac <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801dbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbb0:	460c      	mov	r4, r1
 801dbb2:	7809      	ldrb	r1, [r1, #0]
 801dbb4:	4606      	mov	r6, r0
 801dbb6:	f7f4 fa2d 	bl	8012014 <ucdr_serialize_bool>
 801dbba:	7823      	ldrb	r3, [r4, #0]
 801dbbc:	4605      	mov	r5, r0
 801dbbe:	b96b      	cbnz	r3, 801dbdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801dbc0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801dbc4:	4630      	mov	r0, r6
 801dbc6:	f7f4 fa25 	bl	8012014 <ucdr_serialize_bool>
 801dbca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801dbce:	4005      	ands	r5, r0
 801dbd0:	b2ed      	uxtb	r5, r5
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	d169      	bne.n	801dcaa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801dbd6:	4628      	mov	r0, r5
 801dbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbdc:	6861      	ldr	r1, [r4, #4]
 801dbde:	4630      	mov	r0, r6
 801dbe0:	f7f4 fc5c 	bl	801249c <ucdr_serialize_uint32_t>
 801dbe4:	6863      	ldr	r3, [r4, #4]
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	d06b      	beq.n	801dcc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801dbea:	2800      	cmp	r0, #0
 801dbec:	d067      	beq.n	801dcbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801dbee:	68a1      	ldr	r1, [r4, #8]
 801dbf0:	4630      	mov	r0, r6
 801dbf2:	f001 fc15 	bl	801f420 <ucdr_serialize_string>
 801dbf6:	6863      	ldr	r3, [r4, #4]
 801dbf8:	2b01      	cmp	r3, #1
 801dbfa:	d953      	bls.n	801dca4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801dbfc:	2800      	cmp	r0, #0
 801dbfe:	d05e      	beq.n	801dcbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801dc00:	68e1      	ldr	r1, [r4, #12]
 801dc02:	4630      	mov	r0, r6
 801dc04:	f001 fc0c 	bl	801f420 <ucdr_serialize_string>
 801dc08:	6863      	ldr	r3, [r4, #4]
 801dc0a:	2b02      	cmp	r3, #2
 801dc0c:	d94a      	bls.n	801dca4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801dc0e:	2800      	cmp	r0, #0
 801dc10:	d055      	beq.n	801dcbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801dc12:	6921      	ldr	r1, [r4, #16]
 801dc14:	4630      	mov	r0, r6
 801dc16:	f001 fc03 	bl	801f420 <ucdr_serialize_string>
 801dc1a:	6863      	ldr	r3, [r4, #4]
 801dc1c:	2b03      	cmp	r3, #3
 801dc1e:	d941      	bls.n	801dca4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801dc20:	2800      	cmp	r0, #0
 801dc22:	d04c      	beq.n	801dcbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801dc24:	6961      	ldr	r1, [r4, #20]
 801dc26:	4630      	mov	r0, r6
 801dc28:	f001 fbfa 	bl	801f420 <ucdr_serialize_string>
 801dc2c:	6863      	ldr	r3, [r4, #4]
 801dc2e:	2b04      	cmp	r3, #4
 801dc30:	d938      	bls.n	801dca4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801dc32:	2800      	cmp	r0, #0
 801dc34:	d043      	beq.n	801dcbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801dc36:	69a1      	ldr	r1, [r4, #24]
 801dc38:	4630      	mov	r0, r6
 801dc3a:	f001 fbf1 	bl	801f420 <ucdr_serialize_string>
 801dc3e:	6863      	ldr	r3, [r4, #4]
 801dc40:	2b05      	cmp	r3, #5
 801dc42:	d92f      	bls.n	801dca4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801dc44:	2800      	cmp	r0, #0
 801dc46:	d03a      	beq.n	801dcbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801dc48:	69e1      	ldr	r1, [r4, #28]
 801dc4a:	4630      	mov	r0, r6
 801dc4c:	f001 fbe8 	bl	801f420 <ucdr_serialize_string>
 801dc50:	6863      	ldr	r3, [r4, #4]
 801dc52:	2b06      	cmp	r3, #6
 801dc54:	d926      	bls.n	801dca4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801dc56:	b390      	cbz	r0, 801dcbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801dc58:	6a21      	ldr	r1, [r4, #32]
 801dc5a:	4630      	mov	r0, r6
 801dc5c:	f001 fbe0 	bl	801f420 <ucdr_serialize_string>
 801dc60:	6863      	ldr	r3, [r4, #4]
 801dc62:	2b07      	cmp	r3, #7
 801dc64:	d91e      	bls.n	801dca4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801dc66:	b350      	cbz	r0, 801dcbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801dc68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801dc6a:	4630      	mov	r0, r6
 801dc6c:	f001 fbd8 	bl	801f420 <ucdr_serialize_string>
 801dc70:	6863      	ldr	r3, [r4, #4]
 801dc72:	2b08      	cmp	r3, #8
 801dc74:	d916      	bls.n	801dca4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801dc76:	b310      	cbz	r0, 801dcbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801dc78:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801dc7a:	4630      	mov	r0, r6
 801dc7c:	f001 fbd0 	bl	801f420 <ucdr_serialize_string>
 801dc80:	6863      	ldr	r3, [r4, #4]
 801dc82:	2b09      	cmp	r3, #9
 801dc84:	d90e      	bls.n	801dca4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801dc86:	b1d0      	cbz	r0, 801dcbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801dc88:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801dc8c:	2709      	movs	r7, #9
 801dc8e:	e000      	b.n	801dc92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801dc90:	b1a8      	cbz	r0, 801dcbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801dc92:	f858 1b04 	ldr.w	r1, [r8], #4
 801dc96:	4630      	mov	r0, r6
 801dc98:	f001 fbc2 	bl	801f420 <ucdr_serialize_string>
 801dc9c:	3701      	adds	r7, #1
 801dc9e:	6862      	ldr	r2, [r4, #4]
 801dca0:	4297      	cmp	r7, r2
 801dca2:	d3f5      	bcc.n	801dc90 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801dca4:	4005      	ands	r5, r0
 801dca6:	b2ed      	uxtb	r5, r5
 801dca8:	e78a      	b.n	801dbc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801dcaa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801dcac:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801dcb0:	4630      	mov	r0, r6
 801dcb2:	f7f7 fab1 	bl	8015218 <ucdr_serialize_sequence_uint8_t>
 801dcb6:	4005      	ands	r5, r0
 801dcb8:	4628      	mov	r0, r5
 801dcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcbe:	2500      	movs	r5, #0
 801dcc0:	e77e      	b.n	801dbc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801dcc2:	4028      	ands	r0, r5
 801dcc4:	b2c5      	uxtb	r5, r0
 801dcc6:	e77b      	b.n	801dbc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801dcc8 <uxr_serialize_OBJK_Publisher_Binary>:
 801dcc8:	b570      	push	{r4, r5, r6, lr}
 801dcca:	460d      	mov	r5, r1
 801dccc:	7809      	ldrb	r1, [r1, #0]
 801dcce:	4606      	mov	r6, r0
 801dcd0:	f7f4 f9a0 	bl	8012014 <ucdr_serialize_bool>
 801dcd4:	782b      	ldrb	r3, [r5, #0]
 801dcd6:	4604      	mov	r4, r0
 801dcd8:	b94b      	cbnz	r3, 801dcee <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801dcda:	7a29      	ldrb	r1, [r5, #8]
 801dcdc:	4630      	mov	r0, r6
 801dcde:	f7f4 f999 	bl	8012014 <ucdr_serialize_bool>
 801dce2:	7a2b      	ldrb	r3, [r5, #8]
 801dce4:	4004      	ands	r4, r0
 801dce6:	b2e4      	uxtb	r4, r4
 801dce8:	b943      	cbnz	r3, 801dcfc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801dcea:	4620      	mov	r0, r4
 801dcec:	bd70      	pop	{r4, r5, r6, pc}
 801dcee:	6869      	ldr	r1, [r5, #4]
 801dcf0:	4630      	mov	r0, r6
 801dcf2:	f001 fb95 	bl	801f420 <ucdr_serialize_string>
 801dcf6:	4004      	ands	r4, r0
 801dcf8:	b2e4      	uxtb	r4, r4
 801dcfa:	e7ee      	b.n	801dcda <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801dcfc:	f105 010c 	add.w	r1, r5, #12
 801dd00:	4630      	mov	r0, r6
 801dd02:	f7ff ff53 	bl	801dbac <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801dd06:	4004      	ands	r4, r0
 801dd08:	4620      	mov	r0, r4
 801dd0a:	bd70      	pop	{r4, r5, r6, pc}

0801dd0c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801dd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd10:	460c      	mov	r4, r1
 801dd12:	7809      	ldrb	r1, [r1, #0]
 801dd14:	4606      	mov	r6, r0
 801dd16:	f7f4 f97d 	bl	8012014 <ucdr_serialize_bool>
 801dd1a:	7823      	ldrb	r3, [r4, #0]
 801dd1c:	4605      	mov	r5, r0
 801dd1e:	b96b      	cbnz	r3, 801dd3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801dd20:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801dd24:	4630      	mov	r0, r6
 801dd26:	f7f4 f975 	bl	8012014 <ucdr_serialize_bool>
 801dd2a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801dd2e:	4005      	ands	r5, r0
 801dd30:	b2ed      	uxtb	r5, r5
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	d169      	bne.n	801de0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801dd36:	4628      	mov	r0, r5
 801dd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd3c:	6861      	ldr	r1, [r4, #4]
 801dd3e:	4630      	mov	r0, r6
 801dd40:	f7f4 fbac 	bl	801249c <ucdr_serialize_uint32_t>
 801dd44:	6863      	ldr	r3, [r4, #4]
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d06b      	beq.n	801de22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801dd4a:	2800      	cmp	r0, #0
 801dd4c:	d067      	beq.n	801de1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801dd4e:	68a1      	ldr	r1, [r4, #8]
 801dd50:	4630      	mov	r0, r6
 801dd52:	f001 fb65 	bl	801f420 <ucdr_serialize_string>
 801dd56:	6863      	ldr	r3, [r4, #4]
 801dd58:	2b01      	cmp	r3, #1
 801dd5a:	d953      	bls.n	801de04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801dd5c:	2800      	cmp	r0, #0
 801dd5e:	d05e      	beq.n	801de1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801dd60:	68e1      	ldr	r1, [r4, #12]
 801dd62:	4630      	mov	r0, r6
 801dd64:	f001 fb5c 	bl	801f420 <ucdr_serialize_string>
 801dd68:	6863      	ldr	r3, [r4, #4]
 801dd6a:	2b02      	cmp	r3, #2
 801dd6c:	d94a      	bls.n	801de04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801dd6e:	2800      	cmp	r0, #0
 801dd70:	d055      	beq.n	801de1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801dd72:	6921      	ldr	r1, [r4, #16]
 801dd74:	4630      	mov	r0, r6
 801dd76:	f001 fb53 	bl	801f420 <ucdr_serialize_string>
 801dd7a:	6863      	ldr	r3, [r4, #4]
 801dd7c:	2b03      	cmp	r3, #3
 801dd7e:	d941      	bls.n	801de04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801dd80:	2800      	cmp	r0, #0
 801dd82:	d04c      	beq.n	801de1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801dd84:	6961      	ldr	r1, [r4, #20]
 801dd86:	4630      	mov	r0, r6
 801dd88:	f001 fb4a 	bl	801f420 <ucdr_serialize_string>
 801dd8c:	6863      	ldr	r3, [r4, #4]
 801dd8e:	2b04      	cmp	r3, #4
 801dd90:	d938      	bls.n	801de04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801dd92:	2800      	cmp	r0, #0
 801dd94:	d043      	beq.n	801de1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801dd96:	69a1      	ldr	r1, [r4, #24]
 801dd98:	4630      	mov	r0, r6
 801dd9a:	f001 fb41 	bl	801f420 <ucdr_serialize_string>
 801dd9e:	6863      	ldr	r3, [r4, #4]
 801dda0:	2b05      	cmp	r3, #5
 801dda2:	d92f      	bls.n	801de04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801dda4:	2800      	cmp	r0, #0
 801dda6:	d03a      	beq.n	801de1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801dda8:	69e1      	ldr	r1, [r4, #28]
 801ddaa:	4630      	mov	r0, r6
 801ddac:	f001 fb38 	bl	801f420 <ucdr_serialize_string>
 801ddb0:	6863      	ldr	r3, [r4, #4]
 801ddb2:	2b06      	cmp	r3, #6
 801ddb4:	d926      	bls.n	801de04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ddb6:	b390      	cbz	r0, 801de1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ddb8:	6a21      	ldr	r1, [r4, #32]
 801ddba:	4630      	mov	r0, r6
 801ddbc:	f001 fb30 	bl	801f420 <ucdr_serialize_string>
 801ddc0:	6863      	ldr	r3, [r4, #4]
 801ddc2:	2b07      	cmp	r3, #7
 801ddc4:	d91e      	bls.n	801de04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ddc6:	b350      	cbz	r0, 801de1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ddc8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801ddca:	4630      	mov	r0, r6
 801ddcc:	f001 fb28 	bl	801f420 <ucdr_serialize_string>
 801ddd0:	6863      	ldr	r3, [r4, #4]
 801ddd2:	2b08      	cmp	r3, #8
 801ddd4:	d916      	bls.n	801de04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ddd6:	b310      	cbz	r0, 801de1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ddd8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801ddda:	4630      	mov	r0, r6
 801dddc:	f001 fb20 	bl	801f420 <ucdr_serialize_string>
 801dde0:	6863      	ldr	r3, [r4, #4]
 801dde2:	2b09      	cmp	r3, #9
 801dde4:	d90e      	bls.n	801de04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801dde6:	b1d0      	cbz	r0, 801de1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801dde8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801ddec:	2709      	movs	r7, #9
 801ddee:	e000      	b.n	801ddf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801ddf0:	b1a8      	cbz	r0, 801de1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ddf2:	f858 1b04 	ldr.w	r1, [r8], #4
 801ddf6:	4630      	mov	r0, r6
 801ddf8:	f001 fb12 	bl	801f420 <ucdr_serialize_string>
 801ddfc:	3701      	adds	r7, #1
 801ddfe:	6862      	ldr	r2, [r4, #4]
 801de00:	4297      	cmp	r7, r2
 801de02:	d3f5      	bcc.n	801ddf0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801de04:	4005      	ands	r5, r0
 801de06:	b2ed      	uxtb	r5, r5
 801de08:	e78a      	b.n	801dd20 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801de0a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801de0c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801de10:	4630      	mov	r0, r6
 801de12:	f7f7 fa01 	bl	8015218 <ucdr_serialize_sequence_uint8_t>
 801de16:	4005      	ands	r5, r0
 801de18:	4628      	mov	r0, r5
 801de1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de1e:	2500      	movs	r5, #0
 801de20:	e77e      	b.n	801dd20 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801de22:	4028      	ands	r0, r5
 801de24:	b2c5      	uxtb	r5, r0
 801de26:	e77b      	b.n	801dd20 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801de28 <uxr_serialize_OBJK_Subscriber_Binary>:
 801de28:	b570      	push	{r4, r5, r6, lr}
 801de2a:	460d      	mov	r5, r1
 801de2c:	7809      	ldrb	r1, [r1, #0]
 801de2e:	4606      	mov	r6, r0
 801de30:	f7f4 f8f0 	bl	8012014 <ucdr_serialize_bool>
 801de34:	782b      	ldrb	r3, [r5, #0]
 801de36:	4604      	mov	r4, r0
 801de38:	b94b      	cbnz	r3, 801de4e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801de3a:	7a29      	ldrb	r1, [r5, #8]
 801de3c:	4630      	mov	r0, r6
 801de3e:	f7f4 f8e9 	bl	8012014 <ucdr_serialize_bool>
 801de42:	7a2b      	ldrb	r3, [r5, #8]
 801de44:	4004      	ands	r4, r0
 801de46:	b2e4      	uxtb	r4, r4
 801de48:	b943      	cbnz	r3, 801de5c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801de4a:	4620      	mov	r0, r4
 801de4c:	bd70      	pop	{r4, r5, r6, pc}
 801de4e:	6869      	ldr	r1, [r5, #4]
 801de50:	4630      	mov	r0, r6
 801de52:	f001 fae5 	bl	801f420 <ucdr_serialize_string>
 801de56:	4004      	ands	r4, r0
 801de58:	b2e4      	uxtb	r4, r4
 801de5a:	e7ee      	b.n	801de3a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801de5c:	f105 010c 	add.w	r1, r5, #12
 801de60:	4630      	mov	r0, r6
 801de62:	f7ff ff53 	bl	801dd0c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801de66:	4004      	ands	r4, r0
 801de68:	4620      	mov	r0, r4
 801de6a:	bd70      	pop	{r4, r5, r6, pc}

0801de6c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801de6c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801de70:	4688      	mov	r8, r1
 801de72:	4681      	mov	r9, r0
 801de74:	8809      	ldrh	r1, [r1, #0]
 801de76:	f7f4 f927 	bl	80120c8 <ucdr_serialize_uint16_t>
 801de7a:	4606      	mov	r6, r0
 801de7c:	f898 1002 	ldrb.w	r1, [r8, #2]
 801de80:	4648      	mov	r0, r9
 801de82:	f7f4 f8c7 	bl	8012014 <ucdr_serialize_bool>
 801de86:	f898 3002 	ldrb.w	r3, [r8, #2]
 801de8a:	4006      	ands	r6, r0
 801de8c:	b2f5      	uxtb	r5, r6
 801de8e:	b9eb      	cbnz	r3, 801decc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801de90:	f898 1006 	ldrb.w	r1, [r8, #6]
 801de94:	4648      	mov	r0, r9
 801de96:	f7f4 f8bd 	bl	8012014 <ucdr_serialize_bool>
 801de9a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801de9e:	4005      	ands	r5, r0
 801dea0:	bb7b      	cbnz	r3, 801df02 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801dea2:	f898 100c 	ldrb.w	r1, [r8, #12]
 801dea6:	4648      	mov	r0, r9
 801dea8:	f7f4 f8b4 	bl	8012014 <ucdr_serialize_bool>
 801deac:	f898 300c 	ldrb.w	r3, [r8, #12]
 801deb0:	4005      	ands	r5, r0
 801deb2:	b9f3      	cbnz	r3, 801def2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801deb4:	f898 1014 	ldrb.w	r1, [r8, #20]
 801deb8:	4648      	mov	r0, r9
 801deba:	f7f4 f8ab 	bl	8012014 <ucdr_serialize_bool>
 801debe:	f898 3014 	ldrb.w	r3, [r8, #20]
 801dec2:	4005      	ands	r5, r0
 801dec4:	b94b      	cbnz	r3, 801deda <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801dec6:	4628      	mov	r0, r5
 801dec8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801decc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801ded0:	4648      	mov	r0, r9
 801ded2:	f7f4 f8f9 	bl	80120c8 <ucdr_serialize_uint16_t>
 801ded6:	4005      	ands	r5, r0
 801ded8:	e7da      	b.n	801de90 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801deda:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801dede:	f108 011c 	add.w	r1, r8, #28
 801dee2:	4648      	mov	r0, r9
 801dee4:	f7f7 f998 	bl	8015218 <ucdr_serialize_sequence_uint8_t>
 801dee8:	4028      	ands	r0, r5
 801deea:	b2c5      	uxtb	r5, r0
 801deec:	4628      	mov	r0, r5
 801deee:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801def2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801def6:	4648      	mov	r0, r9
 801def8:	f7f4 fad0 	bl	801249c <ucdr_serialize_uint32_t>
 801defc:	4028      	ands	r0, r5
 801defe:	b2c5      	uxtb	r5, r0
 801df00:	e7d8      	b.n	801deb4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801df02:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801df06:	4648      	mov	r0, r9
 801df08:	f7f4 fac8 	bl	801249c <ucdr_serialize_uint32_t>
 801df0c:	4028      	ands	r0, r5
 801df0e:	b2c5      	uxtb	r5, r0
 801df10:	e7c7      	b.n	801dea2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801df12:	bf00      	nop

0801df14 <uxr_serialize_OBJK_DataReader_Binary>:
 801df14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df16:	2202      	movs	r2, #2
 801df18:	460c      	mov	r4, r1
 801df1a:	4606      	mov	r6, r0
 801df1c:	f7fc ffac 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801df20:	4605      	mov	r5, r0
 801df22:	78a1      	ldrb	r1, [r4, #2]
 801df24:	4630      	mov	r0, r6
 801df26:	f7f4 f875 	bl	8012014 <ucdr_serialize_bool>
 801df2a:	78a3      	ldrb	r3, [r4, #2]
 801df2c:	4005      	ands	r5, r0
 801df2e:	b2ed      	uxtb	r5, r5
 801df30:	b90b      	cbnz	r3, 801df36 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801df32:	4628      	mov	r0, r5
 801df34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df36:	f104 0108 	add.w	r1, r4, #8
 801df3a:	4630      	mov	r0, r6
 801df3c:	f7ff ff96 	bl	801de6c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801df40:	4607      	mov	r7, r0
 801df42:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801df46:	4630      	mov	r0, r6
 801df48:	f7f4 f864 	bl	8012014 <ucdr_serialize_bool>
 801df4c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801df50:	4038      	ands	r0, r7
 801df52:	b2c7      	uxtb	r7, r0
 801df54:	b95b      	cbnz	r3, 801df6e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801df56:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801df5a:	4630      	mov	r0, r6
 801df5c:	f7f4 f85a 	bl	8012014 <ucdr_serialize_bool>
 801df60:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801df64:	4007      	ands	r7, r0
 801df66:	b94b      	cbnz	r3, 801df7c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801df68:	403d      	ands	r5, r7
 801df6a:	4628      	mov	r0, r5
 801df6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df6e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801df72:	4630      	mov	r0, r6
 801df74:	f7f4 fce8 	bl	8012948 <ucdr_serialize_uint64_t>
 801df78:	4007      	ands	r7, r0
 801df7a:	e7ec      	b.n	801df56 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801df7c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801df7e:	4630      	mov	r0, r6
 801df80:	f001 fa4e 	bl	801f420 <ucdr_serialize_string>
 801df84:	4007      	ands	r7, r0
 801df86:	b2ff      	uxtb	r7, r7
 801df88:	e7ee      	b.n	801df68 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801df8a:	bf00      	nop

0801df8c <uxr_serialize_OBJK_DataWriter_Binary>:
 801df8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df8e:	2202      	movs	r2, #2
 801df90:	460d      	mov	r5, r1
 801df92:	4606      	mov	r6, r0
 801df94:	f7fc ff70 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801df98:	4604      	mov	r4, r0
 801df9a:	78a9      	ldrb	r1, [r5, #2]
 801df9c:	4630      	mov	r0, r6
 801df9e:	f7f4 f839 	bl	8012014 <ucdr_serialize_bool>
 801dfa2:	78ab      	ldrb	r3, [r5, #2]
 801dfa4:	4004      	ands	r4, r0
 801dfa6:	b2e4      	uxtb	r4, r4
 801dfa8:	b90b      	cbnz	r3, 801dfae <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801dfaa:	4620      	mov	r0, r4
 801dfac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dfae:	f105 0108 	add.w	r1, r5, #8
 801dfb2:	4630      	mov	r0, r6
 801dfb4:	f7ff ff5a 	bl	801de6c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801dfb8:	4607      	mov	r7, r0
 801dfba:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801dfbe:	4630      	mov	r0, r6
 801dfc0:	f7f4 f828 	bl	8012014 <ucdr_serialize_bool>
 801dfc4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801dfc8:	4038      	ands	r0, r7
 801dfca:	b2c7      	uxtb	r7, r0
 801dfcc:	b913      	cbnz	r3, 801dfd4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801dfce:	403c      	ands	r4, r7
 801dfd0:	4620      	mov	r0, r4
 801dfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dfd4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801dfd8:	4630      	mov	r0, r6
 801dfda:	f7f4 fcb5 	bl	8012948 <ucdr_serialize_uint64_t>
 801dfde:	4007      	ands	r7, r0
 801dfe0:	e7f5      	b.n	801dfce <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801dfe2:	bf00      	nop

0801dfe4 <uxr_serialize_OBJK_Replier_Binary>:
 801dfe4:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801dfe8:	460f      	mov	r7, r1
 801dfea:	4680      	mov	r8, r0
 801dfec:	6809      	ldr	r1, [r1, #0]
 801dfee:	f001 fa17 	bl	801f420 <ucdr_serialize_string>
 801dff2:	4605      	mov	r5, r0
 801dff4:	6879      	ldr	r1, [r7, #4]
 801dff6:	4640      	mov	r0, r8
 801dff8:	f001 fa12 	bl	801f420 <ucdr_serialize_string>
 801dffc:	4005      	ands	r5, r0
 801dffe:	68b9      	ldr	r1, [r7, #8]
 801e000:	4640      	mov	r0, r8
 801e002:	b2ec      	uxtb	r4, r5
 801e004:	f001 fa0c 	bl	801f420 <ucdr_serialize_string>
 801e008:	7b39      	ldrb	r1, [r7, #12]
 801e00a:	4004      	ands	r4, r0
 801e00c:	4640      	mov	r0, r8
 801e00e:	f7f4 f801 	bl	8012014 <ucdr_serialize_bool>
 801e012:	7b3b      	ldrb	r3, [r7, #12]
 801e014:	4004      	ands	r4, r0
 801e016:	b94b      	cbnz	r3, 801e02c <uxr_serialize_OBJK_Replier_Binary+0x48>
 801e018:	7d39      	ldrb	r1, [r7, #20]
 801e01a:	4640      	mov	r0, r8
 801e01c:	f7f3 fffa 	bl	8012014 <ucdr_serialize_bool>
 801e020:	7d3b      	ldrb	r3, [r7, #20]
 801e022:	4004      	ands	r4, r0
 801e024:	b943      	cbnz	r3, 801e038 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801e026:	4620      	mov	r0, r4
 801e028:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801e02c:	6939      	ldr	r1, [r7, #16]
 801e02e:	4640      	mov	r0, r8
 801e030:	f001 f9f6 	bl	801f420 <ucdr_serialize_string>
 801e034:	4004      	ands	r4, r0
 801e036:	e7ef      	b.n	801e018 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801e038:	69b9      	ldr	r1, [r7, #24]
 801e03a:	4640      	mov	r0, r8
 801e03c:	f001 f9f0 	bl	801f420 <ucdr_serialize_string>
 801e040:	4004      	ands	r4, r0
 801e042:	b2e4      	uxtb	r4, r4
 801e044:	4620      	mov	r0, r4
 801e046:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801e04a:	bf00      	nop

0801e04c <uxr_deserialize_ObjectVariant>:
 801e04c:	b570      	push	{r4, r5, r6, lr}
 801e04e:	4605      	mov	r5, r0
 801e050:	460e      	mov	r6, r1
 801e052:	f7f4 f823 	bl	801209c <ucdr_deserialize_uint8_t>
 801e056:	b168      	cbz	r0, 801e074 <uxr_deserialize_ObjectVariant+0x28>
 801e058:	7833      	ldrb	r3, [r6, #0]
 801e05a:	4604      	mov	r4, r0
 801e05c:	3b01      	subs	r3, #1
 801e05e:	2b0d      	cmp	r3, #13
 801e060:	d809      	bhi.n	801e076 <uxr_deserialize_ObjectVariant+0x2a>
 801e062:	e8df f003 	tbb	[pc, r3]
 801e066:	0a41      	.short	0x0a41
 801e068:	0a0a2323 	.word	0x0a0a2323
 801e06c:	10080a0a 	.word	0x10080a0a
 801e070:	565c1010 	.word	0x565c1010
 801e074:	2400      	movs	r4, #0
 801e076:	4620      	mov	r0, r4
 801e078:	bd70      	pop	{r4, r5, r6, pc}
 801e07a:	1d31      	adds	r1, r6, #4
 801e07c:	4628      	mov	r0, r5
 801e07e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e082:	f7ff bd21 	b.w	801dac8 <uxr_deserialize_DATAWRITER_Representation>
 801e086:	1d31      	adds	r1, r6, #4
 801e088:	4628      	mov	r0, r5
 801e08a:	f7f4 f807 	bl	801209c <ucdr_deserialize_uint8_t>
 801e08e:	2800      	cmp	r0, #0
 801e090:	d0f0      	beq.n	801e074 <uxr_deserialize_ObjectVariant+0x28>
 801e092:	7933      	ldrb	r3, [r6, #4]
 801e094:	2b01      	cmp	r3, #1
 801e096:	d001      	beq.n	801e09c <uxr_deserialize_ObjectVariant+0x50>
 801e098:	2b02      	cmp	r3, #2
 801e09a:	d1ec      	bne.n	801e076 <uxr_deserialize_ObjectVariant+0x2a>
 801e09c:	68b1      	ldr	r1, [r6, #8]
 801e09e:	4628      	mov	r0, r5
 801e0a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e0a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e0a8:	f001 b9ca 	b.w	801f440 <ucdr_deserialize_string>
 801e0ac:	1d31      	adds	r1, r6, #4
 801e0ae:	4628      	mov	r0, r5
 801e0b0:	f7f3 fff4 	bl	801209c <ucdr_deserialize_uint8_t>
 801e0b4:	4604      	mov	r4, r0
 801e0b6:	b170      	cbz	r0, 801e0d6 <uxr_deserialize_ObjectVariant+0x8a>
 801e0b8:	7933      	ldrb	r3, [r6, #4]
 801e0ba:	2b02      	cmp	r3, #2
 801e0bc:	d04c      	beq.n	801e158 <uxr_deserialize_ObjectVariant+0x10c>
 801e0be:	2b03      	cmp	r3, #3
 801e0c0:	d109      	bne.n	801e0d6 <uxr_deserialize_ObjectVariant+0x8a>
 801e0c2:	f106 0308 	add.w	r3, r6, #8
 801e0c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e0ca:	f106 010c 	add.w	r1, r6, #12
 801e0ce:	4628      	mov	r0, r5
 801e0d0:	f7f7 f8b4 	bl	801523c <ucdr_deserialize_sequence_uint8_t>
 801e0d4:	4604      	mov	r4, r0
 801e0d6:	2202      	movs	r2, #2
 801e0d8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801e0dc:	4628      	mov	r0, r5
 801e0de:	f7fc ff2f 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e0e2:	4020      	ands	r0, r4
 801e0e4:	b2c4      	uxtb	r4, r0
 801e0e6:	e7c6      	b.n	801e076 <uxr_deserialize_ObjectVariant+0x2a>
 801e0e8:	1d31      	adds	r1, r6, #4
 801e0ea:	4628      	mov	r0, r5
 801e0ec:	f7f3 ffd6 	bl	801209c <ucdr_deserialize_uint8_t>
 801e0f0:	4604      	mov	r4, r0
 801e0f2:	b130      	cbz	r0, 801e102 <uxr_deserialize_ObjectVariant+0xb6>
 801e0f4:	7933      	ldrb	r3, [r6, #4]
 801e0f6:	2b02      	cmp	r3, #2
 801e0f8:	d036      	beq.n	801e168 <uxr_deserialize_ObjectVariant+0x11c>
 801e0fa:	2b03      	cmp	r3, #3
 801e0fc:	d03c      	beq.n	801e178 <uxr_deserialize_ObjectVariant+0x12c>
 801e0fe:	2b01      	cmp	r3, #1
 801e100:	d032      	beq.n	801e168 <uxr_deserialize_ObjectVariant+0x11c>
 801e102:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801e106:	4628      	mov	r0, r5
 801e108:	f7f4 fd6e 	bl	8012be8 <ucdr_deserialize_int16_t>
 801e10c:	4020      	ands	r0, r4
 801e10e:	b2c4      	uxtb	r4, r0
 801e110:	e7b1      	b.n	801e076 <uxr_deserialize_ObjectVariant+0x2a>
 801e112:	1d31      	adds	r1, r6, #4
 801e114:	4628      	mov	r0, r5
 801e116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e11a:	f7ff bb8b 	b.w	801d834 <uxr_deserialize_CLIENT_Representation>
 801e11e:	2204      	movs	r2, #4
 801e120:	4628      	mov	r0, r5
 801e122:	18b1      	adds	r1, r6, r2
 801e124:	f7fc ff0c 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e128:	4604      	mov	r4, r0
 801e12a:	2202      	movs	r2, #2
 801e12c:	f106 0108 	add.w	r1, r6, #8
 801e130:	4628      	mov	r0, r5
 801e132:	f7fc ff05 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e136:	4004      	ands	r4, r0
 801e138:	2202      	movs	r2, #2
 801e13a:	f106 010a 	add.w	r1, r6, #10
 801e13e:	4628      	mov	r0, r5
 801e140:	b2e4      	uxtb	r4, r4
 801e142:	f7fc fefd 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e146:	4603      	mov	r3, r0
 801e148:	f106 010c 	add.w	r1, r6, #12
 801e14c:	4628      	mov	r0, r5
 801e14e:	401c      	ands	r4, r3
 801e150:	f7f3 ff76 	bl	8012040 <ucdr_deserialize_bool>
 801e154:	4004      	ands	r4, r0
 801e156:	e78e      	b.n	801e076 <uxr_deserialize_ObjectVariant+0x2a>
 801e158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e15c:	68b1      	ldr	r1, [r6, #8]
 801e15e:	4628      	mov	r0, r5
 801e160:	f001 f96e 	bl	801f440 <ucdr_deserialize_string>
 801e164:	4604      	mov	r4, r0
 801e166:	e7b6      	b.n	801e0d6 <uxr_deserialize_ObjectVariant+0x8a>
 801e168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e16c:	68b1      	ldr	r1, [r6, #8]
 801e16e:	4628      	mov	r0, r5
 801e170:	f001 f966 	bl	801f440 <ucdr_deserialize_string>
 801e174:	4604      	mov	r4, r0
 801e176:	e7c4      	b.n	801e102 <uxr_deserialize_ObjectVariant+0xb6>
 801e178:	f106 0308 	add.w	r3, r6, #8
 801e17c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e180:	f106 010c 	add.w	r1, r6, #12
 801e184:	4628      	mov	r0, r5
 801e186:	f7f7 f859 	bl	801523c <ucdr_deserialize_sequence_uint8_t>
 801e18a:	4604      	mov	r4, r0
 801e18c:	e7b9      	b.n	801e102 <uxr_deserialize_ObjectVariant+0xb6>
 801e18e:	bf00      	nop

0801e190 <uxr_deserialize_BaseObjectRequest>:
 801e190:	b570      	push	{r4, r5, r6, lr}
 801e192:	2202      	movs	r2, #2
 801e194:	4605      	mov	r5, r0
 801e196:	460e      	mov	r6, r1
 801e198:	f7fc fed2 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e19c:	2202      	movs	r2, #2
 801e19e:	4604      	mov	r4, r0
 801e1a0:	4628      	mov	r0, r5
 801e1a2:	18b1      	adds	r1, r6, r2
 801e1a4:	f7fc fecc 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e1a8:	4020      	ands	r0, r4
 801e1aa:	b2c0      	uxtb	r0, r0
 801e1ac:	bd70      	pop	{r4, r5, r6, pc}
 801e1ae:	bf00      	nop

0801e1b0 <uxr_serialize_ActivityInfoVariant>:
 801e1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e1b4:	460e      	mov	r6, r1
 801e1b6:	7809      	ldrb	r1, [r1, #0]
 801e1b8:	4680      	mov	r8, r0
 801e1ba:	f7f3 ff59 	bl	8012070 <ucdr_serialize_uint8_t>
 801e1be:	4607      	mov	r7, r0
 801e1c0:	b138      	cbz	r0, 801e1d2 <uxr_serialize_ActivityInfoVariant+0x22>
 801e1c2:	7833      	ldrb	r3, [r6, #0]
 801e1c4:	2b06      	cmp	r3, #6
 801e1c6:	f000 8081 	beq.w	801e2cc <uxr_serialize_ActivityInfoVariant+0x11c>
 801e1ca:	2b0d      	cmp	r3, #13
 801e1cc:	d014      	beq.n	801e1f8 <uxr_serialize_ActivityInfoVariant+0x48>
 801e1ce:	2b05      	cmp	r3, #5
 801e1d0:	d002      	beq.n	801e1d8 <uxr_serialize_ActivityInfoVariant+0x28>
 801e1d2:	4638      	mov	r0, r7
 801e1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1d8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801e1dc:	4640      	mov	r0, r8
 801e1de:	f7f4 fc83 	bl	8012ae8 <ucdr_serialize_int16_t>
 801e1e2:	4607      	mov	r7, r0
 801e1e4:	4640      	mov	r0, r8
 801e1e6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801e1ea:	f7f4 fbad 	bl	8012948 <ucdr_serialize_uint64_t>
 801e1ee:	4038      	ands	r0, r7
 801e1f0:	b2c7      	uxtb	r7, r0
 801e1f2:	4638      	mov	r0, r7
 801e1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1f8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801e1fc:	4640      	mov	r0, r8
 801e1fe:	f7f4 fc73 	bl	8012ae8 <ucdr_serialize_int16_t>
 801e202:	68f1      	ldr	r1, [r6, #12]
 801e204:	4607      	mov	r7, r0
 801e206:	4640      	mov	r0, r8
 801e208:	f7f4 f948 	bl	801249c <ucdr_serialize_uint32_t>
 801e20c:	68f3      	ldr	r3, [r6, #12]
 801e20e:	2b00      	cmp	r3, #0
 801e210:	d0ed      	beq.n	801e1ee <uxr_serialize_ActivityInfoVariant+0x3e>
 801e212:	b318      	cbz	r0, 801e25c <uxr_serialize_ActivityInfoVariant+0xac>
 801e214:	f106 090c 	add.w	r9, r6, #12
 801e218:	2400      	movs	r4, #0
 801e21a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801e21e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801e222:	7c29      	ldrb	r1, [r5, #16]
 801e224:	4640      	mov	r0, r8
 801e226:	f7f3 ff23 	bl	8012070 <ucdr_serialize_uint8_t>
 801e22a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801e22e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801e232:	2800      	cmp	r0, #0
 801e234:	d051      	beq.n	801e2da <uxr_serialize_ActivityInfoVariant+0x12a>
 801e236:	7c2b      	ldrb	r3, [r5, #16]
 801e238:	00c9      	lsls	r1, r1, #3
 801e23a:	2b03      	cmp	r3, #3
 801e23c:	d854      	bhi.n	801e2e8 <uxr_serialize_ActivityInfoVariant+0x138>
 801e23e:	e8df f003 	tbb	[pc, r3]
 801e242:	2133      	.short	0x2133
 801e244:	020f      	.short	0x020f
 801e246:	4449      	add	r1, r9
 801e248:	4640      	mov	r0, r8
 801e24a:	6889      	ldr	r1, [r1, #8]
 801e24c:	f001 f8e8 	bl	801f420 <ucdr_serialize_string>
 801e250:	3401      	adds	r4, #1
 801e252:	68f2      	ldr	r2, [r6, #12]
 801e254:	4294      	cmp	r4, r2
 801e256:	d244      	bcs.n	801e2e2 <uxr_serialize_ActivityInfoVariant+0x132>
 801e258:	2800      	cmp	r0, #0
 801e25a:	d1de      	bne.n	801e21a <uxr_serialize_ActivityInfoVariant+0x6a>
 801e25c:	2700      	movs	r7, #0
 801e25e:	e7b8      	b.n	801e1d2 <uxr_serialize_ActivityInfoVariant+0x22>
 801e260:	3108      	adds	r1, #8
 801e262:	44a2      	add	sl, r4
 801e264:	2210      	movs	r2, #16
 801e266:	4640      	mov	r0, r8
 801e268:	4449      	add	r1, r9
 801e26a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801e26e:	f7fc fe03 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e272:	4605      	mov	r5, r0
 801e274:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801e278:	4640      	mov	r0, r8
 801e27a:	f7f4 f90f 	bl	801249c <ucdr_serialize_uint32_t>
 801e27e:	4028      	ands	r0, r5
 801e280:	b2c0      	uxtb	r0, r0
 801e282:	e7e5      	b.n	801e250 <uxr_serialize_ActivityInfoVariant+0xa0>
 801e284:	3108      	adds	r1, #8
 801e286:	44a2      	add	sl, r4
 801e288:	2204      	movs	r2, #4
 801e28a:	4640      	mov	r0, r8
 801e28c:	4449      	add	r1, r9
 801e28e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801e292:	f7fc fdf1 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e296:	4605      	mov	r5, r0
 801e298:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801e29c:	4640      	mov	r0, r8
 801e29e:	f7f3 ff13 	bl	80120c8 <ucdr_serialize_uint16_t>
 801e2a2:	4028      	ands	r0, r5
 801e2a4:	b2c0      	uxtb	r0, r0
 801e2a6:	e7d3      	b.n	801e250 <uxr_serialize_ActivityInfoVariant+0xa0>
 801e2a8:	3108      	adds	r1, #8
 801e2aa:	44a2      	add	sl, r4
 801e2ac:	2202      	movs	r2, #2
 801e2ae:	4640      	mov	r0, r8
 801e2b0:	4449      	add	r1, r9
 801e2b2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801e2b6:	f7fc fddf 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e2ba:	4605      	mov	r5, r0
 801e2bc:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801e2c0:	4640      	mov	r0, r8
 801e2c2:	f7f3 fed5 	bl	8012070 <ucdr_serialize_uint8_t>
 801e2c6:	4028      	ands	r0, r5
 801e2c8:	b2c0      	uxtb	r0, r0
 801e2ca:	e7c1      	b.n	801e250 <uxr_serialize_ActivityInfoVariant+0xa0>
 801e2cc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801e2d0:	4640      	mov	r0, r8
 801e2d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2d6:	f7f4 bc07 	b.w	8012ae8 <ucdr_serialize_int16_t>
 801e2da:	3401      	adds	r4, #1
 801e2dc:	68f2      	ldr	r2, [r6, #12]
 801e2de:	42a2      	cmp	r2, r4
 801e2e0:	d8bc      	bhi.n	801e25c <uxr_serialize_ActivityInfoVariant+0xac>
 801e2e2:	4007      	ands	r7, r0
 801e2e4:	b2ff      	uxtb	r7, r7
 801e2e6:	e774      	b.n	801e1d2 <uxr_serialize_ActivityInfoVariant+0x22>
 801e2e8:	3401      	adds	r4, #1
 801e2ea:	68f3      	ldr	r3, [r6, #12]
 801e2ec:	3518      	adds	r5, #24
 801e2ee:	429c      	cmp	r4, r3
 801e2f0:	d397      	bcc.n	801e222 <uxr_serialize_ActivityInfoVariant+0x72>
 801e2f2:	e76e      	b.n	801e1d2 <uxr_serialize_ActivityInfoVariant+0x22>

0801e2f4 <uxr_deserialize_BaseObjectReply>:
 801e2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2f8:	2202      	movs	r2, #2
 801e2fa:	4606      	mov	r6, r0
 801e2fc:	460f      	mov	r7, r1
 801e2fe:	f7fc fe1f 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e302:	2202      	movs	r2, #2
 801e304:	4605      	mov	r5, r0
 801e306:	4630      	mov	r0, r6
 801e308:	18b9      	adds	r1, r7, r2
 801e30a:	f7fc fe19 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e30e:	4680      	mov	r8, r0
 801e310:	1d39      	adds	r1, r7, #4
 801e312:	4630      	mov	r0, r6
 801e314:	f7f3 fec2 	bl	801209c <ucdr_deserialize_uint8_t>
 801e318:	ea05 0508 	and.w	r5, r5, r8
 801e31c:	4604      	mov	r4, r0
 801e31e:	1d79      	adds	r1, r7, #5
 801e320:	4630      	mov	r0, r6
 801e322:	402c      	ands	r4, r5
 801e324:	f7f3 feba 	bl	801209c <ucdr_deserialize_uint8_t>
 801e328:	4020      	ands	r0, r4
 801e32a:	b2c0      	uxtb	r0, r0
 801e32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e330 <uxr_serialize_ReadSpecification>:
 801e330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e332:	460e      	mov	r6, r1
 801e334:	4607      	mov	r7, r0
 801e336:	7809      	ldrb	r1, [r1, #0]
 801e338:	f7f3 fe9a 	bl	8012070 <ucdr_serialize_uint8_t>
 801e33c:	4604      	mov	r4, r0
 801e33e:	7871      	ldrb	r1, [r6, #1]
 801e340:	4638      	mov	r0, r7
 801e342:	f7f3 fe95 	bl	8012070 <ucdr_serialize_uint8_t>
 801e346:	4004      	ands	r4, r0
 801e348:	78b1      	ldrb	r1, [r6, #2]
 801e34a:	4638      	mov	r0, r7
 801e34c:	f7f3 fe62 	bl	8012014 <ucdr_serialize_bool>
 801e350:	78b3      	ldrb	r3, [r6, #2]
 801e352:	b2e4      	uxtb	r4, r4
 801e354:	4004      	ands	r4, r0
 801e356:	b943      	cbnz	r3, 801e36a <uxr_serialize_ReadSpecification+0x3a>
 801e358:	7a31      	ldrb	r1, [r6, #8]
 801e35a:	4638      	mov	r0, r7
 801e35c:	f7f3 fe5a 	bl	8012014 <ucdr_serialize_bool>
 801e360:	7a33      	ldrb	r3, [r6, #8]
 801e362:	4004      	ands	r4, r0
 801e364:	b93b      	cbnz	r3, 801e376 <uxr_serialize_ReadSpecification+0x46>
 801e366:	4620      	mov	r0, r4
 801e368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e36a:	6871      	ldr	r1, [r6, #4]
 801e36c:	4638      	mov	r0, r7
 801e36e:	f001 f857 	bl	801f420 <ucdr_serialize_string>
 801e372:	4004      	ands	r4, r0
 801e374:	e7f0      	b.n	801e358 <uxr_serialize_ReadSpecification+0x28>
 801e376:	8971      	ldrh	r1, [r6, #10]
 801e378:	4638      	mov	r0, r7
 801e37a:	f7f3 fea5 	bl	80120c8 <ucdr_serialize_uint16_t>
 801e37e:	4605      	mov	r5, r0
 801e380:	89b1      	ldrh	r1, [r6, #12]
 801e382:	4638      	mov	r0, r7
 801e384:	f7f3 fea0 	bl	80120c8 <ucdr_serialize_uint16_t>
 801e388:	4005      	ands	r5, r0
 801e38a:	89f1      	ldrh	r1, [r6, #14]
 801e38c:	4638      	mov	r0, r7
 801e38e:	b2ed      	uxtb	r5, r5
 801e390:	f7f3 fe9a 	bl	80120c8 <ucdr_serialize_uint16_t>
 801e394:	8a31      	ldrh	r1, [r6, #16]
 801e396:	4025      	ands	r5, r4
 801e398:	4604      	mov	r4, r0
 801e39a:	4638      	mov	r0, r7
 801e39c:	4025      	ands	r5, r4
 801e39e:	f7f3 fe93 	bl	80120c8 <ucdr_serialize_uint16_t>
 801e3a2:	ea00 0405 	and.w	r4, r0, r5
 801e3a6:	4620      	mov	r0, r4
 801e3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e3aa:	bf00      	nop

0801e3ac <uxr_serialize_CREATE_CLIENT_Payload>:
 801e3ac:	f7ff b9ea 	b.w	801d784 <uxr_serialize_CLIENT_Representation>

0801e3b0 <uxr_serialize_CREATE_Payload>:
 801e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e3b2:	2202      	movs	r2, #2
 801e3b4:	4607      	mov	r7, r0
 801e3b6:	460e      	mov	r6, r1
 801e3b8:	f7fc fd5e 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e3bc:	2202      	movs	r2, #2
 801e3be:	4605      	mov	r5, r0
 801e3c0:	4638      	mov	r0, r7
 801e3c2:	18b1      	adds	r1, r6, r2
 801e3c4:	f7fc fd58 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e3c8:	7931      	ldrb	r1, [r6, #4]
 801e3ca:	4604      	mov	r4, r0
 801e3cc:	4638      	mov	r0, r7
 801e3ce:	f7f3 fe4f 	bl	8012070 <ucdr_serialize_uint8_t>
 801e3d2:	b170      	cbz	r0, 801e3f2 <uxr_serialize_CREATE_Payload+0x42>
 801e3d4:	7933      	ldrb	r3, [r6, #4]
 801e3d6:	402c      	ands	r4, r5
 801e3d8:	3b01      	subs	r3, #1
 801e3da:	b2e4      	uxtb	r4, r4
 801e3dc:	2b0d      	cmp	r3, #13
 801e3de:	d809      	bhi.n	801e3f4 <uxr_serialize_CREATE_Payload+0x44>
 801e3e0:	e8df f003 	tbb	[pc, r3]
 801e3e4:	23230a4c 	.word	0x23230a4c
 801e3e8:	0a0a0a0a 	.word	0x0a0a0a0a
 801e3ec:	12121208 	.word	0x12121208
 801e3f0:	3e45      	.short	0x3e45
 801e3f2:	2400      	movs	r4, #0
 801e3f4:	4620      	mov	r0, r4
 801e3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e3f8:	f106 0108 	add.w	r1, r6, #8
 801e3fc:	4638      	mov	r0, r7
 801e3fe:	f7ff fac7 	bl	801d990 <uxr_serialize_DATAWRITER_Representation>
 801e402:	4004      	ands	r4, r0
 801e404:	4620      	mov	r0, r4
 801e406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e408:	7a31      	ldrb	r1, [r6, #8]
 801e40a:	4638      	mov	r0, r7
 801e40c:	f7f3 fe30 	bl	8012070 <ucdr_serialize_uint8_t>
 801e410:	2800      	cmp	r0, #0
 801e412:	d0ee      	beq.n	801e3f2 <uxr_serialize_CREATE_Payload+0x42>
 801e414:	7a33      	ldrb	r3, [r6, #8]
 801e416:	2b01      	cmp	r3, #1
 801e418:	d001      	beq.n	801e41e <uxr_serialize_CREATE_Payload+0x6e>
 801e41a:	2b02      	cmp	r3, #2
 801e41c:	d1ea      	bne.n	801e3f4 <uxr_serialize_CREATE_Payload+0x44>
 801e41e:	68f1      	ldr	r1, [r6, #12]
 801e420:	4638      	mov	r0, r7
 801e422:	f000 fffd 	bl	801f420 <ucdr_serialize_string>
 801e426:	4004      	ands	r4, r0
 801e428:	e7e4      	b.n	801e3f4 <uxr_serialize_CREATE_Payload+0x44>
 801e42a:	7a31      	ldrb	r1, [r6, #8]
 801e42c:	4638      	mov	r0, r7
 801e42e:	f7f3 fe1f 	bl	8012070 <ucdr_serialize_uint8_t>
 801e432:	4605      	mov	r5, r0
 801e434:	b158      	cbz	r0, 801e44e <uxr_serialize_CREATE_Payload+0x9e>
 801e436:	7a33      	ldrb	r3, [r6, #8]
 801e438:	2b02      	cmp	r3, #2
 801e43a:	d034      	beq.n	801e4a6 <uxr_serialize_CREATE_Payload+0xf6>
 801e43c:	2b03      	cmp	r3, #3
 801e43e:	d106      	bne.n	801e44e <uxr_serialize_CREATE_Payload+0x9e>
 801e440:	68f2      	ldr	r2, [r6, #12]
 801e442:	f106 0110 	add.w	r1, r6, #16
 801e446:	4638      	mov	r0, r7
 801e448:	f7f6 fee6 	bl	8015218 <ucdr_serialize_sequence_uint8_t>
 801e44c:	4605      	mov	r5, r0
 801e44e:	2202      	movs	r2, #2
 801e450:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801e454:	4638      	mov	r0, r7
 801e456:	f7fc fd0f 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e45a:	4028      	ands	r0, r5
 801e45c:	4004      	ands	r4, r0
 801e45e:	e7c9      	b.n	801e3f4 <uxr_serialize_CREATE_Payload+0x44>
 801e460:	f106 0108 	add.w	r1, r6, #8
 801e464:	4638      	mov	r0, r7
 801e466:	f7ff f98d 	bl	801d784 <uxr_serialize_CLIENT_Representation>
 801e46a:	4004      	ands	r4, r0
 801e46c:	e7c2      	b.n	801e3f4 <uxr_serialize_CREATE_Payload+0x44>
 801e46e:	f106 0108 	add.w	r1, r6, #8
 801e472:	4638      	mov	r0, r7
 801e474:	f7ff fa42 	bl	801d8fc <uxr_serialize_AGENT_Representation>
 801e478:	4004      	ands	r4, r0
 801e47a:	e7bb      	b.n	801e3f4 <uxr_serialize_CREATE_Payload+0x44>
 801e47c:	7a31      	ldrb	r1, [r6, #8]
 801e47e:	4638      	mov	r0, r7
 801e480:	f7f3 fdf6 	bl	8012070 <ucdr_serialize_uint8_t>
 801e484:	4605      	mov	r5, r0
 801e486:	b130      	cbz	r0, 801e496 <uxr_serialize_CREATE_Payload+0xe6>
 801e488:	7a33      	ldrb	r3, [r6, #8]
 801e48a:	2b02      	cmp	r3, #2
 801e48c:	d011      	beq.n	801e4b2 <uxr_serialize_CREATE_Payload+0x102>
 801e48e:	2b03      	cmp	r3, #3
 801e490:	d015      	beq.n	801e4be <uxr_serialize_CREATE_Payload+0x10e>
 801e492:	2b01      	cmp	r3, #1
 801e494:	d00d      	beq.n	801e4b2 <uxr_serialize_CREATE_Payload+0x102>
 801e496:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801e49a:	4638      	mov	r0, r7
 801e49c:	f7f4 fb24 	bl	8012ae8 <ucdr_serialize_int16_t>
 801e4a0:	4028      	ands	r0, r5
 801e4a2:	4004      	ands	r4, r0
 801e4a4:	e7a6      	b.n	801e3f4 <uxr_serialize_CREATE_Payload+0x44>
 801e4a6:	68f1      	ldr	r1, [r6, #12]
 801e4a8:	4638      	mov	r0, r7
 801e4aa:	f000 ffb9 	bl	801f420 <ucdr_serialize_string>
 801e4ae:	4605      	mov	r5, r0
 801e4b0:	e7cd      	b.n	801e44e <uxr_serialize_CREATE_Payload+0x9e>
 801e4b2:	68f1      	ldr	r1, [r6, #12]
 801e4b4:	4638      	mov	r0, r7
 801e4b6:	f000 ffb3 	bl	801f420 <ucdr_serialize_string>
 801e4ba:	4605      	mov	r5, r0
 801e4bc:	e7eb      	b.n	801e496 <uxr_serialize_CREATE_Payload+0xe6>
 801e4be:	68f2      	ldr	r2, [r6, #12]
 801e4c0:	f106 0110 	add.w	r1, r6, #16
 801e4c4:	4638      	mov	r0, r7
 801e4c6:	f7f6 fea7 	bl	8015218 <ucdr_serialize_sequence_uint8_t>
 801e4ca:	4605      	mov	r5, r0
 801e4cc:	e7e3      	b.n	801e496 <uxr_serialize_CREATE_Payload+0xe6>
 801e4ce:	bf00      	nop

0801e4d0 <uxr_deserialize_GET_INFO_Payload>:
 801e4d0:	b570      	push	{r4, r5, r6, lr}
 801e4d2:	2202      	movs	r2, #2
 801e4d4:	4605      	mov	r5, r0
 801e4d6:	460e      	mov	r6, r1
 801e4d8:	f7fc fd32 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e4dc:	2202      	movs	r2, #2
 801e4de:	4604      	mov	r4, r0
 801e4e0:	4628      	mov	r0, r5
 801e4e2:	18b1      	adds	r1, r6, r2
 801e4e4:	f7fc fd2c 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e4e8:	4603      	mov	r3, r0
 801e4ea:	1d31      	adds	r1, r6, #4
 801e4ec:	4628      	mov	r0, r5
 801e4ee:	401c      	ands	r4, r3
 801e4f0:	f7f4 f904 	bl	80126fc <ucdr_deserialize_uint32_t>
 801e4f4:	b2e4      	uxtb	r4, r4
 801e4f6:	4020      	ands	r0, r4
 801e4f8:	bd70      	pop	{r4, r5, r6, pc}
 801e4fa:	bf00      	nop

0801e4fc <uxr_serialize_DELETE_Payload>:
 801e4fc:	b570      	push	{r4, r5, r6, lr}
 801e4fe:	2202      	movs	r2, #2
 801e500:	4605      	mov	r5, r0
 801e502:	460e      	mov	r6, r1
 801e504:	f7fc fcb8 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e508:	2202      	movs	r2, #2
 801e50a:	4604      	mov	r4, r0
 801e50c:	4628      	mov	r0, r5
 801e50e:	18b1      	adds	r1, r6, r2
 801e510:	f7fc fcb2 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e514:	4020      	ands	r0, r4
 801e516:	b2c0      	uxtb	r0, r0
 801e518:	bd70      	pop	{r4, r5, r6, pc}
 801e51a:	bf00      	nop

0801e51c <uxr_deserialize_STATUS_AGENT_Payload>:
 801e51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e520:	460e      	mov	r6, r1
 801e522:	4605      	mov	r5, r0
 801e524:	f7f3 fdba 	bl	801209c <ucdr_deserialize_uint8_t>
 801e528:	4604      	mov	r4, r0
 801e52a:	1c71      	adds	r1, r6, #1
 801e52c:	4628      	mov	r0, r5
 801e52e:	f7f3 fdb5 	bl	801209c <ucdr_deserialize_uint8_t>
 801e532:	2204      	movs	r2, #4
 801e534:	4681      	mov	r9, r0
 801e536:	4628      	mov	r0, r5
 801e538:	18b1      	adds	r1, r6, r2
 801e53a:	f7fc fd01 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e53e:	f106 0108 	add.w	r1, r6, #8
 801e542:	4680      	mov	r8, r0
 801e544:	2202      	movs	r2, #2
 801e546:	4628      	mov	r0, r5
 801e548:	f7fc fcfa 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e54c:	ea04 0309 	and.w	r3, r4, r9
 801e550:	4607      	mov	r7, r0
 801e552:	2202      	movs	r2, #2
 801e554:	b2db      	uxtb	r3, r3
 801e556:	f106 010a 	add.w	r1, r6, #10
 801e55a:	4628      	mov	r0, r5
 801e55c:	ea03 0408 	and.w	r4, r3, r8
 801e560:	f7fc fcee 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e564:	4603      	mov	r3, r0
 801e566:	4628      	mov	r0, r5
 801e568:	403c      	ands	r4, r7
 801e56a:	f106 010c 	add.w	r1, r6, #12
 801e56e:	461d      	mov	r5, r3
 801e570:	f7f3 fd66 	bl	8012040 <ucdr_deserialize_bool>
 801e574:	4025      	ands	r5, r4
 801e576:	4028      	ands	r0, r5
 801e578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801e57c <uxr_deserialize_STATUS_Payload>:
 801e57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e580:	2202      	movs	r2, #2
 801e582:	4606      	mov	r6, r0
 801e584:	460f      	mov	r7, r1
 801e586:	f7fc fcdb 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e58a:	2202      	movs	r2, #2
 801e58c:	4605      	mov	r5, r0
 801e58e:	4630      	mov	r0, r6
 801e590:	18b9      	adds	r1, r7, r2
 801e592:	f7fc fcd5 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e596:	4680      	mov	r8, r0
 801e598:	1d39      	adds	r1, r7, #4
 801e59a:	4630      	mov	r0, r6
 801e59c:	f7f3 fd7e 	bl	801209c <ucdr_deserialize_uint8_t>
 801e5a0:	ea05 0508 	and.w	r5, r5, r8
 801e5a4:	4604      	mov	r4, r0
 801e5a6:	1d79      	adds	r1, r7, #5
 801e5a8:	4630      	mov	r0, r6
 801e5aa:	402c      	ands	r4, r5
 801e5ac:	f7f3 fd76 	bl	801209c <ucdr_deserialize_uint8_t>
 801e5b0:	4020      	ands	r0, r4
 801e5b2:	b2c0      	uxtb	r0, r0
 801e5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e5b8 <uxr_serialize_INFO_Payload>:
 801e5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5bc:	2202      	movs	r2, #2
 801e5be:	460c      	mov	r4, r1
 801e5c0:	4605      	mov	r5, r0
 801e5c2:	f7fc fc59 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e5c6:	2202      	movs	r2, #2
 801e5c8:	4680      	mov	r8, r0
 801e5ca:	4628      	mov	r0, r5
 801e5cc:	18a1      	adds	r1, r4, r2
 801e5ce:	f7fc fc53 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e5d2:	4607      	mov	r7, r0
 801e5d4:	7921      	ldrb	r1, [r4, #4]
 801e5d6:	4628      	mov	r0, r5
 801e5d8:	f7f3 fd4a 	bl	8012070 <ucdr_serialize_uint8_t>
 801e5dc:	ea08 0807 	and.w	r8, r8, r7
 801e5e0:	4606      	mov	r6, r0
 801e5e2:	7961      	ldrb	r1, [r4, #5]
 801e5e4:	4628      	mov	r0, r5
 801e5e6:	ea06 0608 	and.w	r6, r6, r8
 801e5ea:	f7f3 fd41 	bl	8012070 <ucdr_serialize_uint8_t>
 801e5ee:	7a21      	ldrb	r1, [r4, #8]
 801e5f0:	4030      	ands	r0, r6
 801e5f2:	b2c7      	uxtb	r7, r0
 801e5f4:	4628      	mov	r0, r5
 801e5f6:	f7f3 fd0d 	bl	8012014 <ucdr_serialize_bool>
 801e5fa:	7a23      	ldrb	r3, [r4, #8]
 801e5fc:	4606      	mov	r6, r0
 801e5fe:	b96b      	cbnz	r3, 801e61c <uxr_serialize_INFO_Payload+0x64>
 801e600:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801e604:	4628      	mov	r0, r5
 801e606:	f7f3 fd05 	bl	8012014 <ucdr_serialize_bool>
 801e60a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801e60e:	4030      	ands	r0, r6
 801e610:	b2c6      	uxtb	r6, r0
 801e612:	b983      	cbnz	r3, 801e636 <uxr_serialize_INFO_Payload+0x7e>
 801e614:	ea06 0007 	and.w	r0, r6, r7
 801e618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e61c:	7b21      	ldrb	r1, [r4, #12]
 801e61e:	4628      	mov	r0, r5
 801e620:	f7f3 fd26 	bl	8012070 <ucdr_serialize_uint8_t>
 801e624:	b188      	cbz	r0, 801e64a <uxr_serialize_INFO_Payload+0x92>
 801e626:	f104 010c 	add.w	r1, r4, #12
 801e62a:	4628      	mov	r0, r5
 801e62c:	f7ff f9d8 	bl	801d9e0 <uxr_serialize_ObjectVariant.part.0>
 801e630:	4030      	ands	r0, r6
 801e632:	b2c6      	uxtb	r6, r0
 801e634:	e7e4      	b.n	801e600 <uxr_serialize_INFO_Payload+0x48>
 801e636:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801e63a:	4628      	mov	r0, r5
 801e63c:	f7ff fdb8 	bl	801e1b0 <uxr_serialize_ActivityInfoVariant>
 801e640:	4006      	ands	r6, r0
 801e642:	ea06 0007 	and.w	r0, r6, r7
 801e646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e64a:	4606      	mov	r6, r0
 801e64c:	e7d8      	b.n	801e600 <uxr_serialize_INFO_Payload+0x48>
 801e64e:	bf00      	nop

0801e650 <uxr_serialize_READ_DATA_Payload>:
 801e650:	b570      	push	{r4, r5, r6, lr}
 801e652:	2202      	movs	r2, #2
 801e654:	4605      	mov	r5, r0
 801e656:	460e      	mov	r6, r1
 801e658:	f7fc fc0e 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e65c:	2202      	movs	r2, #2
 801e65e:	4604      	mov	r4, r0
 801e660:	4628      	mov	r0, r5
 801e662:	18b1      	adds	r1, r6, r2
 801e664:	f7fc fc08 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e668:	4603      	mov	r3, r0
 801e66a:	1d31      	adds	r1, r6, #4
 801e66c:	4628      	mov	r0, r5
 801e66e:	401c      	ands	r4, r3
 801e670:	f7ff fe5e 	bl	801e330 <uxr_serialize_ReadSpecification>
 801e674:	b2e4      	uxtb	r4, r4
 801e676:	4020      	ands	r0, r4
 801e678:	bd70      	pop	{r4, r5, r6, pc}
 801e67a:	bf00      	nop

0801e67c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801e67c:	b570      	push	{r4, r5, r6, lr}
 801e67e:	2202      	movs	r2, #2
 801e680:	4605      	mov	r5, r0
 801e682:	460e      	mov	r6, r1
 801e684:	f7fc fbf8 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e688:	2202      	movs	r2, #2
 801e68a:	4604      	mov	r4, r0
 801e68c:	4628      	mov	r0, r5
 801e68e:	18b1      	adds	r1, r6, r2
 801e690:	f7fc fbf2 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e694:	4020      	ands	r0, r4
 801e696:	b2c0      	uxtb	r0, r0
 801e698:	bd70      	pop	{r4, r5, r6, pc}
 801e69a:	bf00      	nop

0801e69c <uxr_serialize_ACKNACK_Payload>:
 801e69c:	b570      	push	{r4, r5, r6, lr}
 801e69e:	460c      	mov	r4, r1
 801e6a0:	4605      	mov	r5, r0
 801e6a2:	460e      	mov	r6, r1
 801e6a4:	f834 1b02 	ldrh.w	r1, [r4], #2
 801e6a8:	f7f3 fd0e 	bl	80120c8 <ucdr_serialize_uint16_t>
 801e6ac:	2202      	movs	r2, #2
 801e6ae:	4621      	mov	r1, r4
 801e6b0:	4604      	mov	r4, r0
 801e6b2:	4628      	mov	r0, r5
 801e6b4:	f7fc fbe0 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e6b8:	4603      	mov	r3, r0
 801e6ba:	7931      	ldrb	r1, [r6, #4]
 801e6bc:	4628      	mov	r0, r5
 801e6be:	401c      	ands	r4, r3
 801e6c0:	f7f3 fcd6 	bl	8012070 <ucdr_serialize_uint8_t>
 801e6c4:	b2e4      	uxtb	r4, r4
 801e6c6:	4020      	ands	r0, r4
 801e6c8:	bd70      	pop	{r4, r5, r6, pc}
 801e6ca:	bf00      	nop

0801e6cc <uxr_deserialize_ACKNACK_Payload>:
 801e6cc:	b570      	push	{r4, r5, r6, lr}
 801e6ce:	460e      	mov	r6, r1
 801e6d0:	4605      	mov	r5, r0
 801e6d2:	f7f3 fdf9 	bl	80122c8 <ucdr_deserialize_uint16_t>
 801e6d6:	2202      	movs	r2, #2
 801e6d8:	4604      	mov	r4, r0
 801e6da:	4628      	mov	r0, r5
 801e6dc:	18b1      	adds	r1, r6, r2
 801e6de:	f7fc fc2f 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e6e2:	4603      	mov	r3, r0
 801e6e4:	1d31      	adds	r1, r6, #4
 801e6e6:	4628      	mov	r0, r5
 801e6e8:	401c      	ands	r4, r3
 801e6ea:	f7f3 fcd7 	bl	801209c <ucdr_deserialize_uint8_t>
 801e6ee:	b2e4      	uxtb	r4, r4
 801e6f0:	4020      	ands	r0, r4
 801e6f2:	bd70      	pop	{r4, r5, r6, pc}

0801e6f4 <uxr_serialize_HEARTBEAT_Payload>:
 801e6f4:	b570      	push	{r4, r5, r6, lr}
 801e6f6:	460d      	mov	r5, r1
 801e6f8:	4606      	mov	r6, r0
 801e6fa:	8809      	ldrh	r1, [r1, #0]
 801e6fc:	f7f3 fce4 	bl	80120c8 <ucdr_serialize_uint16_t>
 801e700:	8869      	ldrh	r1, [r5, #2]
 801e702:	4604      	mov	r4, r0
 801e704:	4630      	mov	r0, r6
 801e706:	f7f3 fcdf 	bl	80120c8 <ucdr_serialize_uint16_t>
 801e70a:	4603      	mov	r3, r0
 801e70c:	7929      	ldrb	r1, [r5, #4]
 801e70e:	4630      	mov	r0, r6
 801e710:	401c      	ands	r4, r3
 801e712:	f7f3 fcad 	bl	8012070 <ucdr_serialize_uint8_t>
 801e716:	b2e4      	uxtb	r4, r4
 801e718:	4020      	ands	r0, r4
 801e71a:	bd70      	pop	{r4, r5, r6, pc}

0801e71c <uxr_deserialize_HEARTBEAT_Payload>:
 801e71c:	b570      	push	{r4, r5, r6, lr}
 801e71e:	460e      	mov	r6, r1
 801e720:	4605      	mov	r5, r0
 801e722:	f7f3 fdd1 	bl	80122c8 <ucdr_deserialize_uint16_t>
 801e726:	4604      	mov	r4, r0
 801e728:	1cb1      	adds	r1, r6, #2
 801e72a:	4628      	mov	r0, r5
 801e72c:	f7f3 fdcc 	bl	80122c8 <ucdr_deserialize_uint16_t>
 801e730:	4603      	mov	r3, r0
 801e732:	1d31      	adds	r1, r6, #4
 801e734:	4628      	mov	r0, r5
 801e736:	401c      	ands	r4, r3
 801e738:	f7f3 fcb0 	bl	801209c <ucdr_deserialize_uint8_t>
 801e73c:	b2e4      	uxtb	r4, r4
 801e73e:	4020      	ands	r0, r4
 801e740:	bd70      	pop	{r4, r5, r6, pc}
 801e742:	bf00      	nop

0801e744 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801e744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e748:	460e      	mov	r6, r1
 801e74a:	4605      	mov	r5, r0
 801e74c:	f7f4 fb58 	bl	8012e00 <ucdr_deserialize_int32_t>
 801e750:	4607      	mov	r7, r0
 801e752:	1d31      	adds	r1, r6, #4
 801e754:	4628      	mov	r0, r5
 801e756:	f7f3 ffd1 	bl	80126fc <ucdr_deserialize_uint32_t>
 801e75a:	4680      	mov	r8, r0
 801e75c:	f106 0108 	add.w	r1, r6, #8
 801e760:	4628      	mov	r0, r5
 801e762:	f7f4 fb4d 	bl	8012e00 <ucdr_deserialize_int32_t>
 801e766:	ea07 0708 	and.w	r7, r7, r8
 801e76a:	4604      	mov	r4, r0
 801e76c:	f106 010c 	add.w	r1, r6, #12
 801e770:	4628      	mov	r0, r5
 801e772:	403c      	ands	r4, r7
 801e774:	f7f3 ffc2 	bl	80126fc <ucdr_deserialize_uint32_t>
 801e778:	f106 0110 	add.w	r1, r6, #16
 801e77c:	4004      	ands	r4, r0
 801e77e:	4628      	mov	r0, r5
 801e780:	f7f4 fb3e 	bl	8012e00 <ucdr_deserialize_int32_t>
 801e784:	4603      	mov	r3, r0
 801e786:	b2e4      	uxtb	r4, r4
 801e788:	4628      	mov	r0, r5
 801e78a:	461d      	mov	r5, r3
 801e78c:	f106 0114 	add.w	r1, r6, #20
 801e790:	f7f3 ffb4 	bl	80126fc <ucdr_deserialize_uint32_t>
 801e794:	402c      	ands	r4, r5
 801e796:	4020      	ands	r0, r4
 801e798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e79c <uxr_serialize_SampleIdentity>:
 801e79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7a0:	4604      	mov	r4, r0
 801e7a2:	460d      	mov	r5, r1
 801e7a4:	220c      	movs	r2, #12
 801e7a6:	f7fc fb67 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e7aa:	2203      	movs	r2, #3
 801e7ac:	f105 010c 	add.w	r1, r5, #12
 801e7b0:	4607      	mov	r7, r0
 801e7b2:	4620      	mov	r0, r4
 801e7b4:	f7fc fb60 	bl	801ae78 <ucdr_serialize_array_uint8_t>
 801e7b8:	7be9      	ldrb	r1, [r5, #15]
 801e7ba:	4680      	mov	r8, r0
 801e7bc:	4620      	mov	r0, r4
 801e7be:	f7f3 fc57 	bl	8012070 <ucdr_serialize_uint8_t>
 801e7c2:	6929      	ldr	r1, [r5, #16]
 801e7c4:	4606      	mov	r6, r0
 801e7c6:	4620      	mov	r0, r4
 801e7c8:	f7f4 fa82 	bl	8012cd0 <ucdr_serialize_int32_t>
 801e7cc:	ea07 0708 	and.w	r7, r7, r8
 801e7d0:	4603      	mov	r3, r0
 801e7d2:	4620      	mov	r0, r4
 801e7d4:	403e      	ands	r6, r7
 801e7d6:	6969      	ldr	r1, [r5, #20]
 801e7d8:	461c      	mov	r4, r3
 801e7da:	f7f3 fe5f 	bl	801249c <ucdr_serialize_uint32_t>
 801e7de:	4034      	ands	r4, r6
 801e7e0:	4020      	ands	r0, r4
 801e7e2:	b2c0      	uxtb	r0, r0
 801e7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e7e8 <uxr_deserialize_SampleIdentity>:
 801e7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7ec:	4604      	mov	r4, r0
 801e7ee:	460d      	mov	r5, r1
 801e7f0:	220c      	movs	r2, #12
 801e7f2:	f7fc fba5 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e7f6:	2203      	movs	r2, #3
 801e7f8:	f105 010c 	add.w	r1, r5, #12
 801e7fc:	4607      	mov	r7, r0
 801e7fe:	4620      	mov	r0, r4
 801e800:	f7fc fb9e 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801e804:	f105 010f 	add.w	r1, r5, #15
 801e808:	4680      	mov	r8, r0
 801e80a:	4620      	mov	r0, r4
 801e80c:	f7f3 fc46 	bl	801209c <ucdr_deserialize_uint8_t>
 801e810:	f105 0110 	add.w	r1, r5, #16
 801e814:	4606      	mov	r6, r0
 801e816:	4620      	mov	r0, r4
 801e818:	f7f4 faf2 	bl	8012e00 <ucdr_deserialize_int32_t>
 801e81c:	ea07 0708 	and.w	r7, r7, r8
 801e820:	4603      	mov	r3, r0
 801e822:	4620      	mov	r0, r4
 801e824:	403e      	ands	r6, r7
 801e826:	f105 0114 	add.w	r1, r5, #20
 801e82a:	461c      	mov	r4, r3
 801e82c:	f7f3 ff66 	bl	80126fc <ucdr_deserialize_uint32_t>
 801e830:	4034      	ands	r4, r6
 801e832:	4020      	ands	r0, r4
 801e834:	b2c0      	uxtb	r0, r0
 801e836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e83a:	bf00      	nop

0801e83c <rcl_convert_rmw_ret_to_rcl_ret>:
 801e83c:	280b      	cmp	r0, #11
 801e83e:	dc0d      	bgt.n	801e85c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801e840:	2800      	cmp	r0, #0
 801e842:	db09      	blt.n	801e858 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801e844:	280b      	cmp	r0, #11
 801e846:	d807      	bhi.n	801e858 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801e848:	e8df f000 	tbb	[pc, r0]
 801e84c:	07060607 	.word	0x07060607
 801e850:	06060606 	.word	0x06060606
 801e854:	07070606 	.word	0x07070606
 801e858:	2001      	movs	r0, #1
 801e85a:	4770      	bx	lr
 801e85c:	28cb      	cmp	r0, #203	@ 0xcb
 801e85e:	bf18      	it	ne
 801e860:	2001      	movne	r0, #1
 801e862:	4770      	bx	lr

0801e864 <rcl_get_default_domain_id>:
 801e864:	b530      	push	{r4, r5, lr}
 801e866:	2300      	movs	r3, #0
 801e868:	b083      	sub	sp, #12
 801e86a:	9300      	str	r3, [sp, #0]
 801e86c:	b1d0      	cbz	r0, 801e8a4 <rcl_get_default_domain_id+0x40>
 801e86e:	4604      	mov	r4, r0
 801e870:	4669      	mov	r1, sp
 801e872:	4815      	ldr	r0, [pc, #84]	@ (801e8c8 <rcl_get_default_domain_id+0x64>)
 801e874:	f7f9 fd2c 	bl	80182d0 <rcutils_get_env>
 801e878:	4602      	mov	r2, r0
 801e87a:	b110      	cbz	r0, 801e882 <rcl_get_default_domain_id+0x1e>
 801e87c:	2001      	movs	r0, #1
 801e87e:	b003      	add	sp, #12
 801e880:	bd30      	pop	{r4, r5, pc}
 801e882:	9b00      	ldr	r3, [sp, #0]
 801e884:	b18b      	cbz	r3, 801e8aa <rcl_get_default_domain_id+0x46>
 801e886:	7818      	ldrb	r0, [r3, #0]
 801e888:	2800      	cmp	r0, #0
 801e88a:	d0f8      	beq.n	801e87e <rcl_get_default_domain_id+0x1a>
 801e88c:	a901      	add	r1, sp, #4
 801e88e:	4618      	mov	r0, r3
 801e890:	9201      	str	r2, [sp, #4]
 801e892:	f001 fd6b 	bl	802036c <strtoul>
 801e896:	4605      	mov	r5, r0
 801e898:	b150      	cbz	r0, 801e8b0 <rcl_get_default_domain_id+0x4c>
 801e89a:	1c43      	adds	r3, r0, #1
 801e89c:	d00d      	beq.n	801e8ba <rcl_get_default_domain_id+0x56>
 801e89e:	2000      	movs	r0, #0
 801e8a0:	6025      	str	r5, [r4, #0]
 801e8a2:	e7ec      	b.n	801e87e <rcl_get_default_domain_id+0x1a>
 801e8a4:	200b      	movs	r0, #11
 801e8a6:	b003      	add	sp, #12
 801e8a8:	bd30      	pop	{r4, r5, pc}
 801e8aa:	4618      	mov	r0, r3
 801e8ac:	b003      	add	sp, #12
 801e8ae:	bd30      	pop	{r4, r5, pc}
 801e8b0:	9b01      	ldr	r3, [sp, #4]
 801e8b2:	781b      	ldrb	r3, [r3, #0]
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	d0f2      	beq.n	801e89e <rcl_get_default_domain_id+0x3a>
 801e8b8:	e7e0      	b.n	801e87c <rcl_get_default_domain_id+0x18>
 801e8ba:	f002 f8d5 	bl	8020a68 <__errno>
 801e8be:	6803      	ldr	r3, [r0, #0]
 801e8c0:	2b22      	cmp	r3, #34	@ 0x22
 801e8c2:	d1ec      	bne.n	801e89e <rcl_get_default_domain_id+0x3a>
 801e8c4:	e7da      	b.n	801e87c <rcl_get_default_domain_id+0x18>
 801e8c6:	bf00      	nop
 801e8c8:	08023d4c 	.word	0x08023d4c

0801e8cc <rcl_expand_topic_name>:
 801e8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8d0:	b08d      	sub	sp, #52	@ 0x34
 801e8d2:	4698      	mov	r8, r3
 801e8d4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e8d6:	9207      	str	r2, [sp, #28]
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	bf18      	it	ne
 801e8dc:	f1b8 0f00 	cmpne.w	r8, #0
 801e8e0:	bf0c      	ite	eq
 801e8e2:	2301      	moveq	r3, #1
 801e8e4:	2300      	movne	r3, #0
 801e8e6:	2a00      	cmp	r2, #0
 801e8e8:	bf08      	it	eq
 801e8ea:	f043 0301 	orreq.w	r3, r3, #1
 801e8ee:	2900      	cmp	r1, #0
 801e8f0:	bf08      	it	eq
 801e8f2:	f043 0301 	orreq.w	r3, r3, #1
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	d13d      	bne.n	801e976 <rcl_expand_topic_name+0xaa>
 801e8fa:	fab0 f280 	clz	r2, r0
 801e8fe:	4604      	mov	r4, r0
 801e900:	0952      	lsrs	r2, r2, #5
 801e902:	2800      	cmp	r0, #0
 801e904:	d037      	beq.n	801e976 <rcl_expand_topic_name+0xaa>
 801e906:	460f      	mov	r7, r1
 801e908:	a90b      	add	r1, sp, #44	@ 0x2c
 801e90a:	f000 f9f3 	bl	801ecf4 <rcl_validate_topic_name>
 801e90e:	4605      	mov	r5, r0
 801e910:	bb68      	cbnz	r0, 801e96e <rcl_expand_topic_name+0xa2>
 801e912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e914:	2b00      	cmp	r3, #0
 801e916:	d137      	bne.n	801e988 <rcl_expand_topic_name+0xbc>
 801e918:	4602      	mov	r2, r0
 801e91a:	a90b      	add	r1, sp, #44	@ 0x2c
 801e91c:	4638      	mov	r0, r7
 801e91e:	f7fa f8e9 	bl	8018af4 <rmw_validate_node_name>
 801e922:	bb68      	cbnz	r0, 801e980 <rcl_expand_topic_name+0xb4>
 801e924:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e926:	2b00      	cmp	r3, #0
 801e928:	d133      	bne.n	801e992 <rcl_expand_topic_name+0xc6>
 801e92a:	462a      	mov	r2, r5
 801e92c:	a90b      	add	r1, sp, #44	@ 0x2c
 801e92e:	9807      	ldr	r0, [sp, #28]
 801e930:	f7fa f8c2 	bl	8018ab8 <rmw_validate_namespace>
 801e934:	bb20      	cbnz	r0, 801e980 <rcl_expand_topic_name+0xb4>
 801e936:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801e938:	2d00      	cmp	r5, #0
 801e93a:	f040 80a2 	bne.w	801ea82 <rcl_expand_topic_name+0x1b6>
 801e93e:	217b      	movs	r1, #123	@ 0x7b
 801e940:	4620      	mov	r0, r4
 801e942:	f001 ffaf 	bl	80208a4 <strchr>
 801e946:	7823      	ldrb	r3, [r4, #0]
 801e948:	4681      	mov	r9, r0
 801e94a:	bb20      	cbnz	r0, 801e996 <rcl_expand_topic_name+0xca>
 801e94c:	2b2f      	cmp	r3, #47	@ 0x2f
 801e94e:	d122      	bne.n	801e996 <rcl_expand_topic_name+0xca>
 801e950:	ab19      	add	r3, sp, #100	@ 0x64
 801e952:	e893 0003 	ldmia.w	r3, {r0, r1}
 801e956:	ab16      	add	r3, sp, #88	@ 0x58
 801e958:	e88d 0003 	stmia.w	sp, {r0, r1}
 801e95c:	4620      	mov	r0, r4
 801e95e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e960:	f7f9 fe18 	bl	8018594 <rcutils_strdup>
 801e964:	2800      	cmp	r0, #0
 801e966:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e968:	bf08      	it	eq
 801e96a:	250a      	moveq	r5, #10
 801e96c:	6018      	str	r0, [r3, #0]
 801e96e:	4628      	mov	r0, r5
 801e970:	b00d      	add	sp, #52	@ 0x34
 801e972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e976:	250b      	movs	r5, #11
 801e978:	4628      	mov	r0, r5
 801e97a:	b00d      	add	sp, #52	@ 0x34
 801e97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e980:	f7ff ff5c 	bl	801e83c <rcl_convert_rmw_ret_to_rcl_ret>
 801e984:	4605      	mov	r5, r0
 801e986:	e7f2      	b.n	801e96e <rcl_expand_topic_name+0xa2>
 801e988:	2567      	movs	r5, #103	@ 0x67
 801e98a:	4628      	mov	r0, r5
 801e98c:	b00d      	add	sp, #52	@ 0x34
 801e98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e992:	25c9      	movs	r5, #201	@ 0xc9
 801e994:	e7eb      	b.n	801e96e <rcl_expand_topic_name+0xa2>
 801e996:	2b7e      	cmp	r3, #126	@ 0x7e
 801e998:	d075      	beq.n	801ea86 <rcl_expand_topic_name+0x1ba>
 801e99a:	f1b9 0f00 	cmp.w	r9, #0
 801e99e:	f000 80c2 	beq.w	801eb26 <rcl_expand_topic_name+0x25a>
 801e9a2:	2300      	movs	r3, #0
 801e9a4:	46a2      	mov	sl, r4
 801e9a6:	461e      	mov	r6, r3
 801e9a8:	9508      	str	r5, [sp, #32]
 801e9aa:	4655      	mov	r5, sl
 801e9ac:	9409      	str	r4, [sp, #36]	@ 0x24
 801e9ae:	46b2      	mov	sl, r6
 801e9b0:	464c      	mov	r4, r9
 801e9b2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e9b6:	2c00      	cmp	r4, #0
 801e9b8:	f000 80ae 	beq.w	801eb18 <rcl_expand_topic_name+0x24c>
 801e9bc:	217d      	movs	r1, #125	@ 0x7d
 801e9be:	4628      	mov	r0, r5
 801e9c0:	f001 ff70 	bl	80208a4 <strchr>
 801e9c4:	eba0 0904 	sub.w	r9, r0, r4
 801e9c8:	4621      	mov	r1, r4
 801e9ca:	4869      	ldr	r0, [pc, #420]	@ (801eb70 <rcl_expand_topic_name+0x2a4>)
 801e9cc:	f109 0601 	add.w	r6, r9, #1
 801e9d0:	4632      	mov	r2, r6
 801e9d2:	f001 ff74 	bl	80208be <strncmp>
 801e9d6:	2800      	cmp	r0, #0
 801e9d8:	d051      	beq.n	801ea7e <rcl_expand_topic_name+0x1b2>
 801e9da:	4632      	mov	r2, r6
 801e9dc:	4621      	mov	r1, r4
 801e9de:	4865      	ldr	r0, [pc, #404]	@ (801eb74 <rcl_expand_topic_name+0x2a8>)
 801e9e0:	f001 ff6d 	bl	80208be <strncmp>
 801e9e4:	b128      	cbz	r0, 801e9f2 <rcl_expand_topic_name+0x126>
 801e9e6:	4632      	mov	r2, r6
 801e9e8:	4621      	mov	r1, r4
 801e9ea:	4863      	ldr	r0, [pc, #396]	@ (801eb78 <rcl_expand_topic_name+0x2ac>)
 801e9ec:	f001 ff67 	bl	80208be <strncmp>
 801e9f0:	bb38      	cbnz	r0, 801ea42 <rcl_expand_topic_name+0x176>
 801e9f2:	46d9      	mov	r9, fp
 801e9f4:	ab18      	add	r3, sp, #96	@ 0x60
 801e9f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e9fa:	ab16      	add	r3, sp, #88	@ 0x58
 801e9fc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ea00:	4620      	mov	r0, r4
 801ea02:	4631      	mov	r1, r6
 801ea04:	cb0c      	ldmia	r3, {r2, r3}
 801ea06:	f7f9 fde7 	bl	80185d8 <rcutils_strndup>
 801ea0a:	4604      	mov	r4, r0
 801ea0c:	2800      	cmp	r0, #0
 801ea0e:	f000 80a3 	beq.w	801eb58 <rcl_expand_topic_name+0x28c>
 801ea12:	464a      	mov	r2, r9
 801ea14:	4628      	mov	r0, r5
 801ea16:	ab16      	add	r3, sp, #88	@ 0x58
 801ea18:	4621      	mov	r1, r4
 801ea1a:	f7f9 fcbb 	bl	8018394 <rcutils_repl_str>
 801ea1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ea20:	4605      	mov	r5, r0
 801ea22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ea24:	4620      	mov	r0, r4
 801ea26:	4798      	blx	r3
 801ea28:	4650      	mov	r0, sl
 801ea2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ea2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ea2e:	4798      	blx	r3
 801ea30:	2d00      	cmp	r5, #0
 801ea32:	d06c      	beq.n	801eb0e <rcl_expand_topic_name+0x242>
 801ea34:	217b      	movs	r1, #123	@ 0x7b
 801ea36:	4628      	mov	r0, r5
 801ea38:	f001 ff34 	bl	80208a4 <strchr>
 801ea3c:	46aa      	mov	sl, r5
 801ea3e:	4604      	mov	r4, r0
 801ea40:	e7b9      	b.n	801e9b6 <rcl_expand_topic_name+0xea>
 801ea42:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801ea46:	1c61      	adds	r1, r4, #1
 801ea48:	4640      	mov	r0, r8
 801ea4a:	f7f9 fedd 	bl	8018808 <rcutils_string_map_getn>
 801ea4e:	4681      	mov	r9, r0
 801ea50:	2800      	cmp	r0, #0
 801ea52:	d1cf      	bne.n	801e9f4 <rcl_expand_topic_name+0x128>
 801ea54:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ea56:	aa18      	add	r2, sp, #96	@ 0x60
 801ea58:	2569      	movs	r5, #105	@ 0x69
 801ea5a:	6018      	str	r0, [r3, #0]
 801ea5c:	ab16      	add	r3, sp, #88	@ 0x58
 801ea5e:	ca07      	ldmia	r2, {r0, r1, r2}
 801ea60:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ea64:	4631      	mov	r1, r6
 801ea66:	4620      	mov	r0, r4
 801ea68:	cb0c      	ldmia	r3, {r2, r3}
 801ea6a:	f7f9 fdb5 	bl	80185d8 <rcutils_strndup>
 801ea6e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ea70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ea72:	4798      	blx	r3
 801ea74:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ea76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ea78:	4650      	mov	r0, sl
 801ea7a:	4798      	blx	r3
 801ea7c:	e777      	b.n	801e96e <rcl_expand_topic_name+0xa2>
 801ea7e:	46b9      	mov	r9, r7
 801ea80:	e7b8      	b.n	801e9f4 <rcl_expand_topic_name+0x128>
 801ea82:	25ca      	movs	r5, #202	@ 0xca
 801ea84:	e773      	b.n	801e96e <rcl_expand_topic_name+0xa2>
 801ea86:	9e07      	ldr	r6, [sp, #28]
 801ea88:	4630      	mov	r0, r6
 801ea8a:	f7e1 fc33 	bl	80002f4 <strlen>
 801ea8e:	4a3b      	ldr	r2, [pc, #236]	@ (801eb7c <rcl_expand_topic_name+0x2b0>)
 801ea90:	4b3b      	ldr	r3, [pc, #236]	@ (801eb80 <rcl_expand_topic_name+0x2b4>)
 801ea92:	9603      	str	r6, [sp, #12]
 801ea94:	2801      	cmp	r0, #1
 801ea96:	bf18      	it	ne
 801ea98:	4613      	movne	r3, r2
 801ea9a:	9704      	str	r7, [sp, #16]
 801ea9c:	9302      	str	r3, [sp, #8]
 801ea9e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801eaa0:	9300      	str	r3, [sp, #0]
 801eaa2:	1c63      	adds	r3, r4, #1
 801eaa4:	9305      	str	r3, [sp, #20]
 801eaa6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801eaaa:	9301      	str	r3, [sp, #4]
 801eaac:	ab16      	add	r3, sp, #88	@ 0x58
 801eaae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801eab0:	f7f9 fc36 	bl	8018320 <rcutils_format_string_limit>
 801eab4:	4606      	mov	r6, r0
 801eab6:	b350      	cbz	r0, 801eb0e <rcl_expand_topic_name+0x242>
 801eab8:	f1b9 0f00 	cmp.w	r9, #0
 801eabc:	d005      	beq.n	801eaca <rcl_expand_topic_name+0x1fe>
 801eabe:	217b      	movs	r1, #123	@ 0x7b
 801eac0:	46b2      	mov	sl, r6
 801eac2:	f001 feef 	bl	80208a4 <strchr>
 801eac6:	4681      	mov	r9, r0
 801eac8:	e76e      	b.n	801e9a8 <rcl_expand_topic_name+0xdc>
 801eaca:	7833      	ldrb	r3, [r6, #0]
 801eacc:	2b2f      	cmp	r3, #47	@ 0x2f
 801eace:	d01b      	beq.n	801eb08 <rcl_expand_topic_name+0x23c>
 801ead0:	9c07      	ldr	r4, [sp, #28]
 801ead2:	4620      	mov	r0, r4
 801ead4:	f7e1 fc0e 	bl	80002f4 <strlen>
 801ead8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801eadc:	4a29      	ldr	r2, [pc, #164]	@ (801eb84 <rcl_expand_topic_name+0x2b8>)
 801eade:	9301      	str	r3, [sp, #4]
 801eae0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801eae2:	9604      	str	r6, [sp, #16]
 801eae4:	9300      	str	r3, [sp, #0]
 801eae6:	4b28      	ldr	r3, [pc, #160]	@ (801eb88 <rcl_expand_topic_name+0x2bc>)
 801eae8:	9403      	str	r4, [sp, #12]
 801eaea:	2801      	cmp	r0, #1
 801eaec:	bf18      	it	ne
 801eaee:	4613      	movne	r3, r2
 801eaf0:	9302      	str	r3, [sp, #8]
 801eaf2:	ab16      	add	r3, sp, #88	@ 0x58
 801eaf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801eaf6:	f7f9 fc13 	bl	8018320 <rcutils_format_string_limit>
 801eafa:	4603      	mov	r3, r0
 801eafc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801eafe:	4630      	mov	r0, r6
 801eb00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801eb02:	461e      	mov	r6, r3
 801eb04:	4790      	blx	r2
 801eb06:	b116      	cbz	r6, 801eb0e <rcl_expand_topic_name+0x242>
 801eb08:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801eb0a:	601e      	str	r6, [r3, #0]
 801eb0c:	e72f      	b.n	801e96e <rcl_expand_topic_name+0xa2>
 801eb0e:	2300      	movs	r3, #0
 801eb10:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801eb12:	250a      	movs	r5, #10
 801eb14:	6013      	str	r3, [r2, #0]
 801eb16:	e72a      	b.n	801e96e <rcl_expand_topic_name+0xa2>
 801eb18:	4653      	mov	r3, sl
 801eb1a:	4656      	mov	r6, sl
 801eb1c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801eb20:	2b00      	cmp	r3, #0
 801eb22:	d1d2      	bne.n	801eaca <rcl_expand_topic_name+0x1fe>
 801eb24:	7823      	ldrb	r3, [r4, #0]
 801eb26:	2b2f      	cmp	r3, #47	@ 0x2f
 801eb28:	d01e      	beq.n	801eb68 <rcl_expand_topic_name+0x29c>
 801eb2a:	9e07      	ldr	r6, [sp, #28]
 801eb2c:	4630      	mov	r0, r6
 801eb2e:	f7e1 fbe1 	bl	80002f4 <strlen>
 801eb32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801eb34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801eb38:	9603      	str	r6, [sp, #12]
 801eb3a:	9404      	str	r4, [sp, #16]
 801eb3c:	e9cd 2300 	strd	r2, r3, [sp]
 801eb40:	4a10      	ldr	r2, [pc, #64]	@ (801eb84 <rcl_expand_topic_name+0x2b8>)
 801eb42:	4b11      	ldr	r3, [pc, #68]	@ (801eb88 <rcl_expand_topic_name+0x2bc>)
 801eb44:	2801      	cmp	r0, #1
 801eb46:	bf18      	it	ne
 801eb48:	4613      	movne	r3, r2
 801eb4a:	9302      	str	r3, [sp, #8]
 801eb4c:	ab16      	add	r3, sp, #88	@ 0x58
 801eb4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801eb50:	f7f9 fbe6 	bl	8018320 <rcutils_format_string_limit>
 801eb54:	4606      	mov	r6, r0
 801eb56:	e7d6      	b.n	801eb06 <rcl_expand_topic_name+0x23a>
 801eb58:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801eb5c:	4650      	mov	r0, sl
 801eb5e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801eb60:	6014      	str	r4, [r2, #0]
 801eb62:	250a      	movs	r5, #10
 801eb64:	4798      	blx	r3
 801eb66:	e702      	b.n	801e96e <rcl_expand_topic_name+0xa2>
 801eb68:	2300      	movs	r3, #0
 801eb6a:	461e      	mov	r6, r3
 801eb6c:	e7cc      	b.n	801eb08 <rcl_expand_topic_name+0x23c>
 801eb6e:	bf00      	nop
 801eb70:	08023d64 	.word	0x08023d64
 801eb74:	08023d6c 	.word	0x08023d6c
 801eb78:	08023d74 	.word	0x08023d74
 801eb7c:	08023d5c 	.word	0x08023d5c
 801eb80:	08023a70 	.word	0x08023a70
 801eb84:	08023438 	.word	0x08023438
 801eb88:	08023430 	.word	0x08023430

0801eb8c <rcl_get_default_topic_name_substitutions>:
 801eb8c:	2800      	cmp	r0, #0
 801eb8e:	bf0c      	ite	eq
 801eb90:	200b      	moveq	r0, #11
 801eb92:	2000      	movne	r0, #0
 801eb94:	4770      	bx	lr
 801eb96:	bf00      	nop

0801eb98 <rcl_get_zero_initialized_guard_condition>:
 801eb98:	4a03      	ldr	r2, [pc, #12]	@ (801eba8 <rcl_get_zero_initialized_guard_condition+0x10>)
 801eb9a:	4603      	mov	r3, r0
 801eb9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801eba0:	e883 0003 	stmia.w	r3, {r0, r1}
 801eba4:	4618      	mov	r0, r3
 801eba6:	4770      	bx	lr
 801eba8:	08023d80 	.word	0x08023d80

0801ebac <rcl_guard_condition_init_from_rmw>:
 801ebac:	b082      	sub	sp, #8
 801ebae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebb2:	b086      	sub	sp, #24
 801ebb4:	4604      	mov	r4, r0
 801ebb6:	460e      	mov	r6, r1
 801ebb8:	4615      	mov	r5, r2
 801ebba:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801ebbe:	f10d 0e04 	add.w	lr, sp, #4
 801ebc2:	f84c 3f04 	str.w	r3, [ip, #4]!
 801ebc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ebca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ebce:	f8dc 3000 	ldr.w	r3, [ip]
 801ebd2:	a801      	add	r0, sp, #4
 801ebd4:	f8ce 3000 	str.w	r3, [lr]
 801ebd8:	f7f5 fd1a 	bl	8014610 <rcutils_allocator_is_valid>
 801ebdc:	f080 0301 	eor.w	r3, r0, #1
 801ebe0:	b2db      	uxtb	r3, r3
 801ebe2:	bb3b      	cbnz	r3, 801ec34 <rcl_guard_condition_init_from_rmw+0x88>
 801ebe4:	b334      	cbz	r4, 801ec34 <rcl_guard_condition_init_from_rmw+0x88>
 801ebe6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801ebea:	f1b8 0f00 	cmp.w	r8, #0
 801ebee:	d11a      	bne.n	801ec26 <rcl_guard_condition_init_from_rmw+0x7a>
 801ebf0:	b305      	cbz	r5, 801ec34 <rcl_guard_condition_init_from_rmw+0x88>
 801ebf2:	4628      	mov	r0, r5
 801ebf4:	f7f6 fbd8 	bl	80153a8 <rcl_context_is_valid>
 801ebf8:	b1f0      	cbz	r0, 801ec38 <rcl_guard_condition_init_from_rmw+0x8c>
 801ebfa:	9b01      	ldr	r3, [sp, #4]
 801ebfc:	201c      	movs	r0, #28
 801ebfe:	9905      	ldr	r1, [sp, #20]
 801ec00:	4798      	blx	r3
 801ec02:	4607      	mov	r7, r0
 801ec04:	6060      	str	r0, [r4, #4]
 801ec06:	b320      	cbz	r0, 801ec52 <rcl_guard_condition_init_from_rmw+0xa6>
 801ec08:	b1c6      	cbz	r6, 801ec3c <rcl_guard_condition_init_from_rmw+0x90>
 801ec0a:	6006      	str	r6, [r0, #0]
 801ec0c:	f880 8004 	strb.w	r8, [r0, #4]
 801ec10:	ac01      	add	r4, sp, #4
 801ec12:	f107 0c08 	add.w	ip, r7, #8
 801ec16:	2500      	movs	r5, #0
 801ec18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ec1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ec1e:	6823      	ldr	r3, [r4, #0]
 801ec20:	f8cc 3000 	str.w	r3, [ip]
 801ec24:	e000      	b.n	801ec28 <rcl_guard_condition_init_from_rmw+0x7c>
 801ec26:	2564      	movs	r5, #100	@ 0x64
 801ec28:	4628      	mov	r0, r5
 801ec2a:	b006      	add	sp, #24
 801ec2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ec30:	b002      	add	sp, #8
 801ec32:	4770      	bx	lr
 801ec34:	250b      	movs	r5, #11
 801ec36:	e7f7      	b.n	801ec28 <rcl_guard_condition_init_from_rmw+0x7c>
 801ec38:	2565      	movs	r5, #101	@ 0x65
 801ec3a:	e7f5      	b.n	801ec28 <rcl_guard_condition_init_from_rmw+0x7c>
 801ec3c:	6828      	ldr	r0, [r5, #0]
 801ec3e:	3028      	adds	r0, #40	@ 0x28
 801ec40:	f000 fada 	bl	801f1f8 <rmw_create_guard_condition>
 801ec44:	6038      	str	r0, [r7, #0]
 801ec46:	6867      	ldr	r7, [r4, #4]
 801ec48:	683e      	ldr	r6, [r7, #0]
 801ec4a:	b126      	cbz	r6, 801ec56 <rcl_guard_condition_init_from_rmw+0xaa>
 801ec4c:	2301      	movs	r3, #1
 801ec4e:	713b      	strb	r3, [r7, #4]
 801ec50:	e7de      	b.n	801ec10 <rcl_guard_condition_init_from_rmw+0x64>
 801ec52:	250a      	movs	r5, #10
 801ec54:	e7e8      	b.n	801ec28 <rcl_guard_condition_init_from_rmw+0x7c>
 801ec56:	9b02      	ldr	r3, [sp, #8]
 801ec58:	4638      	mov	r0, r7
 801ec5a:	9905      	ldr	r1, [sp, #20]
 801ec5c:	2501      	movs	r5, #1
 801ec5e:	4798      	blx	r3
 801ec60:	6066      	str	r6, [r4, #4]
 801ec62:	e7e1      	b.n	801ec28 <rcl_guard_condition_init_from_rmw+0x7c>

0801ec64 <rcl_guard_condition_fini>:
 801ec64:	b570      	push	{r4, r5, r6, lr}
 801ec66:	b082      	sub	sp, #8
 801ec68:	b1f0      	cbz	r0, 801eca8 <rcl_guard_condition_fini+0x44>
 801ec6a:	6843      	ldr	r3, [r0, #4]
 801ec6c:	4604      	mov	r4, r0
 801ec6e:	b163      	cbz	r3, 801ec8a <rcl_guard_condition_fini+0x26>
 801ec70:	6818      	ldr	r0, [r3, #0]
 801ec72:	68de      	ldr	r6, [r3, #12]
 801ec74:	6999      	ldr	r1, [r3, #24]
 801ec76:	b160      	cbz	r0, 801ec92 <rcl_guard_condition_fini+0x2e>
 801ec78:	791d      	ldrb	r5, [r3, #4]
 801ec7a:	b965      	cbnz	r5, 801ec96 <rcl_guard_condition_fini+0x32>
 801ec7c:	4618      	mov	r0, r3
 801ec7e:	47b0      	blx	r6
 801ec80:	2300      	movs	r3, #0
 801ec82:	4628      	mov	r0, r5
 801ec84:	6063      	str	r3, [r4, #4]
 801ec86:	b002      	add	sp, #8
 801ec88:	bd70      	pop	{r4, r5, r6, pc}
 801ec8a:	461d      	mov	r5, r3
 801ec8c:	4628      	mov	r0, r5
 801ec8e:	b002      	add	sp, #8
 801ec90:	bd70      	pop	{r4, r5, r6, pc}
 801ec92:	4605      	mov	r5, r0
 801ec94:	e7f2      	b.n	801ec7c <rcl_guard_condition_fini+0x18>
 801ec96:	9101      	str	r1, [sp, #4]
 801ec98:	f000 fac4 	bl	801f224 <rmw_destroy_guard_condition>
 801ec9c:	1e05      	subs	r5, r0, #0
 801ec9e:	6863      	ldr	r3, [r4, #4]
 801eca0:	9901      	ldr	r1, [sp, #4]
 801eca2:	bf18      	it	ne
 801eca4:	2501      	movne	r5, #1
 801eca6:	e7e9      	b.n	801ec7c <rcl_guard_condition_fini+0x18>
 801eca8:	250b      	movs	r5, #11
 801ecaa:	4628      	mov	r0, r5
 801ecac:	b002      	add	sp, #8
 801ecae:	bd70      	pop	{r4, r5, r6, pc}

0801ecb0 <rcl_guard_condition_get_default_options>:
 801ecb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ecb2:	b087      	sub	sp, #28
 801ecb4:	4606      	mov	r6, r0
 801ecb6:	4c0b      	ldr	r4, [pc, #44]	@ (801ece4 <rcl_guard_condition_get_default_options+0x34>)
 801ecb8:	4668      	mov	r0, sp
 801ecba:	f7f5 fc9b 	bl	80145f4 <rcutils_get_default_allocator>
 801ecbe:	46ee      	mov	lr, sp
 801ecc0:	46a4      	mov	ip, r4
 801ecc2:	4625      	mov	r5, r4
 801ecc4:	4634      	mov	r4, r6
 801ecc6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ecca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ecce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ecd0:	f8de 7000 	ldr.w	r7, [lr]
 801ecd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ecd6:	4630      	mov	r0, r6
 801ecd8:	f8cc 7000 	str.w	r7, [ip]
 801ecdc:	6027      	str	r7, [r4, #0]
 801ecde:	b007      	add	sp, #28
 801ece0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ece2:	bf00      	nop
 801ece4:	240693e0 	.word	0x240693e0

0801ece8 <rcl_guard_condition_get_rmw_handle>:
 801ece8:	b110      	cbz	r0, 801ecf0 <rcl_guard_condition_get_rmw_handle+0x8>
 801ecea:	6840      	ldr	r0, [r0, #4]
 801ecec:	b100      	cbz	r0, 801ecf0 <rcl_guard_condition_get_rmw_handle+0x8>
 801ecee:	6800      	ldr	r0, [r0, #0]
 801ecf0:	4770      	bx	lr
 801ecf2:	bf00      	nop

0801ecf4 <rcl_validate_topic_name>:
 801ecf4:	2800      	cmp	r0, #0
 801ecf6:	f000 8089 	beq.w	801ee0c <rcl_validate_topic_name+0x118>
 801ecfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ecfe:	460e      	mov	r6, r1
 801ed00:	2900      	cmp	r1, #0
 801ed02:	f000 8085 	beq.w	801ee10 <rcl_validate_topic_name+0x11c>
 801ed06:	4604      	mov	r4, r0
 801ed08:	4617      	mov	r7, r2
 801ed0a:	f7e1 faf3 	bl	80002f4 <strlen>
 801ed0e:	b1b0      	cbz	r0, 801ed3e <rcl_validate_topic_name+0x4a>
 801ed10:	f894 e000 	ldrb.w	lr, [r4]
 801ed14:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801ee78 <rcl_validate_topic_name+0x184>
 801ed18:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801ed1c:	f013 0304 	ands.w	r3, r3, #4
 801ed20:	d139      	bne.n	801ed96 <rcl_validate_topic_name+0xa2>
 801ed22:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801ed26:	f814 2008 	ldrb.w	r2, [r4, r8]
 801ed2a:	2a2f      	cmp	r2, #47	@ 0x2f
 801ed2c:	d10f      	bne.n	801ed4e <rcl_validate_topic_name+0x5a>
 801ed2e:	2202      	movs	r2, #2
 801ed30:	6032      	str	r2, [r6, #0]
 801ed32:	b3a7      	cbz	r7, 801ed9e <rcl_validate_topic_name+0xaa>
 801ed34:	4618      	mov	r0, r3
 801ed36:	f8c7 8000 	str.w	r8, [r7]
 801ed3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed3e:	2301      	movs	r3, #1
 801ed40:	6033      	str	r3, [r6, #0]
 801ed42:	b367      	cbz	r7, 801ed9e <rcl_validate_topic_name+0xaa>
 801ed44:	2300      	movs	r3, #0
 801ed46:	4618      	mov	r0, r3
 801ed48:	603b      	str	r3, [r7, #0]
 801ed4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed4e:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801ed52:	461d      	mov	r5, r3
 801ed54:	4619      	mov	r1, r3
 801ed56:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801ed5a:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801ed5e:	f1b9 0f09 	cmp.w	r9, #9
 801ed62:	d91f      	bls.n	801eda4 <rcl_validate_topic_name+0xb0>
 801ed64:	f022 0920 	bic.w	r9, r2, #32
 801ed68:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801ed6c:	f1b9 0f19 	cmp.w	r9, #25
 801ed70:	d918      	bls.n	801eda4 <rcl_validate_topic_name+0xb0>
 801ed72:	2a5f      	cmp	r2, #95	@ 0x5f
 801ed74:	d024      	beq.n	801edc0 <rcl_validate_topic_name+0xcc>
 801ed76:	2a2f      	cmp	r2, #47	@ 0x2f
 801ed78:	d058      	beq.n	801ee2c <rcl_validate_topic_name+0x138>
 801ed7a:	2a7e      	cmp	r2, #126	@ 0x7e
 801ed7c:	d04a      	beq.n	801ee14 <rcl_validate_topic_name+0x120>
 801ed7e:	2a7b      	cmp	r2, #123	@ 0x7b
 801ed80:	d05b      	beq.n	801ee3a <rcl_validate_topic_name+0x146>
 801ed82:	2a7d      	cmp	r2, #125	@ 0x7d
 801ed84:	d169      	bne.n	801ee5a <rcl_validate_topic_name+0x166>
 801ed86:	2d00      	cmp	r5, #0
 801ed88:	d15c      	bne.n	801ee44 <rcl_validate_topic_name+0x150>
 801ed8a:	2305      	movs	r3, #5
 801ed8c:	6033      	str	r3, [r6, #0]
 801ed8e:	b137      	cbz	r7, 801ed9e <rcl_validate_topic_name+0xaa>
 801ed90:	2000      	movs	r0, #0
 801ed92:	6039      	str	r1, [r7, #0]
 801ed94:	e7d9      	b.n	801ed4a <rcl_validate_topic_name+0x56>
 801ed96:	2304      	movs	r3, #4
 801ed98:	6033      	str	r3, [r6, #0]
 801ed9a:	2f00      	cmp	r7, #0
 801ed9c:	d1d2      	bne.n	801ed44 <rcl_validate_topic_name+0x50>
 801ed9e:	2000      	movs	r0, #0
 801eda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eda4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801eda8:	0752      	lsls	r2, r2, #29
 801edaa:	d509      	bpl.n	801edc0 <rcl_validate_topic_name+0xcc>
 801edac:	2900      	cmp	r1, #0
 801edae:	bf0c      	ite	eq
 801edb0:	2200      	moveq	r2, #0
 801edb2:	f005 0201 	andne.w	r2, r5, #1
 801edb6:	b11a      	cbz	r2, 801edc0 <rcl_validate_topic_name+0xcc>
 801edb8:	1e4d      	subs	r5, r1, #1
 801edba:	429d      	cmp	r5, r3
 801edbc:	d031      	beq.n	801ee22 <rcl_validate_topic_name+0x12e>
 801edbe:	4615      	mov	r5, r2
 801edc0:	3101      	adds	r1, #1
 801edc2:	4288      	cmp	r0, r1
 801edc4:	d1c7      	bne.n	801ed56 <rcl_validate_topic_name+0x62>
 801edc6:	2d00      	cmp	r5, #0
 801edc8:	d142      	bne.n	801ee50 <rcl_validate_topic_name+0x15c>
 801edca:	4628      	mov	r0, r5
 801edcc:	2301      	movs	r3, #1
 801edce:	e00c      	b.n	801edea <rcl_validate_topic_name+0xf6>
 801edd0:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801edd4:	d101      	bne.n	801edda <rcl_validate_topic_name+0xe6>
 801edd6:	2801      	cmp	r0, #1
 801edd8:	d047      	beq.n	801ee6a <rcl_validate_topic_name+0x176>
 801edda:	1c5a      	adds	r2, r3, #1
 801eddc:	428b      	cmp	r3, r1
 801edde:	f100 0001 	add.w	r0, r0, #1
 801ede2:	f104 0401 	add.w	r4, r4, #1
 801ede6:	4613      	mov	r3, r2
 801ede8:	d22e      	bcs.n	801ee48 <rcl_validate_topic_name+0x154>
 801edea:	4580      	cmp	r8, r0
 801edec:	d0f5      	beq.n	801edda <rcl_validate_topic_name+0xe6>
 801edee:	7822      	ldrb	r2, [r4, #0]
 801edf0:	2a2f      	cmp	r2, #47	@ 0x2f
 801edf2:	d1ed      	bne.n	801edd0 <rcl_validate_topic_name+0xdc>
 801edf4:	7862      	ldrb	r2, [r4, #1]
 801edf6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801edfa:	0752      	lsls	r2, r2, #29
 801edfc:	d5ed      	bpl.n	801edda <rcl_validate_topic_name+0xe6>
 801edfe:	2204      	movs	r2, #4
 801ee00:	6032      	str	r2, [r6, #0]
 801ee02:	2f00      	cmp	r7, #0
 801ee04:	d0cb      	beq.n	801ed9e <rcl_validate_topic_name+0xaa>
 801ee06:	2000      	movs	r0, #0
 801ee08:	603b      	str	r3, [r7, #0]
 801ee0a:	e79e      	b.n	801ed4a <rcl_validate_topic_name+0x56>
 801ee0c:	200b      	movs	r0, #11
 801ee0e:	4770      	bx	lr
 801ee10:	200b      	movs	r0, #11
 801ee12:	e79a      	b.n	801ed4a <rcl_validate_topic_name+0x56>
 801ee14:	2900      	cmp	r1, #0
 801ee16:	d0d3      	beq.n	801edc0 <rcl_validate_topic_name+0xcc>
 801ee18:	2306      	movs	r3, #6
 801ee1a:	6033      	str	r3, [r6, #0]
 801ee1c:	2f00      	cmp	r7, #0
 801ee1e:	d1b7      	bne.n	801ed90 <rcl_validate_topic_name+0x9c>
 801ee20:	e7bd      	b.n	801ed9e <rcl_validate_topic_name+0xaa>
 801ee22:	2309      	movs	r3, #9
 801ee24:	6033      	str	r3, [r6, #0]
 801ee26:	2f00      	cmp	r7, #0
 801ee28:	d1b2      	bne.n	801ed90 <rcl_validate_topic_name+0x9c>
 801ee2a:	e7b8      	b.n	801ed9e <rcl_validate_topic_name+0xaa>
 801ee2c:	2d00      	cmp	r5, #0
 801ee2e:	d0c7      	beq.n	801edc0 <rcl_validate_topic_name+0xcc>
 801ee30:	2308      	movs	r3, #8
 801ee32:	6033      	str	r3, [r6, #0]
 801ee34:	2f00      	cmp	r7, #0
 801ee36:	d1ab      	bne.n	801ed90 <rcl_validate_topic_name+0x9c>
 801ee38:	e7b1      	b.n	801ed9e <rcl_validate_topic_name+0xaa>
 801ee3a:	2d00      	cmp	r5, #0
 801ee3c:	d1f8      	bne.n	801ee30 <rcl_validate_topic_name+0x13c>
 801ee3e:	460b      	mov	r3, r1
 801ee40:	2501      	movs	r5, #1
 801ee42:	e7bd      	b.n	801edc0 <rcl_validate_topic_name+0xcc>
 801ee44:	2500      	movs	r5, #0
 801ee46:	e7bb      	b.n	801edc0 <rcl_validate_topic_name+0xcc>
 801ee48:	2300      	movs	r3, #0
 801ee4a:	4618      	mov	r0, r3
 801ee4c:	6033      	str	r3, [r6, #0]
 801ee4e:	e77c      	b.n	801ed4a <rcl_validate_topic_name+0x56>
 801ee50:	2205      	movs	r2, #5
 801ee52:	6032      	str	r2, [r6, #0]
 801ee54:	2f00      	cmp	r7, #0
 801ee56:	d1d6      	bne.n	801ee06 <rcl_validate_topic_name+0x112>
 801ee58:	e7a1      	b.n	801ed9e <rcl_validate_topic_name+0xaa>
 801ee5a:	2d00      	cmp	r5, #0
 801ee5c:	bf14      	ite	ne
 801ee5e:	2308      	movne	r3, #8
 801ee60:	2303      	moveq	r3, #3
 801ee62:	6033      	str	r3, [r6, #0]
 801ee64:	2f00      	cmp	r7, #0
 801ee66:	d193      	bne.n	801ed90 <rcl_validate_topic_name+0x9c>
 801ee68:	e799      	b.n	801ed9e <rcl_validate_topic_name+0xaa>
 801ee6a:	2307      	movs	r3, #7
 801ee6c:	6033      	str	r3, [r6, #0]
 801ee6e:	2f00      	cmp	r7, #0
 801ee70:	d095      	beq.n	801ed9e <rcl_validate_topic_name+0xaa>
 801ee72:	2301      	movs	r3, #1
 801ee74:	e7c7      	b.n	801ee06 <rcl_validate_topic_name+0x112>
 801ee76:	bf00      	nop
 801ee78:	08023f06 	.word	0x08023f06

0801ee7c <rcutils_string_array_fini>:
 801ee7c:	b328      	cbz	r0, 801eeca <rcutils_string_array_fini+0x4e>
 801ee7e:	b570      	push	{r4, r5, r6, lr}
 801ee80:	4604      	mov	r4, r0
 801ee82:	6840      	ldr	r0, [r0, #4]
 801ee84:	b1e0      	cbz	r0, 801eec0 <rcutils_string_array_fini+0x44>
 801ee86:	f104 0008 	add.w	r0, r4, #8
 801ee8a:	f7f5 fbc1 	bl	8014610 <rcutils_allocator_is_valid>
 801ee8e:	b1c0      	cbz	r0, 801eec2 <rcutils_string_array_fini+0x46>
 801ee90:	6823      	ldr	r3, [r4, #0]
 801ee92:	b1c3      	cbz	r3, 801eec6 <rcutils_string_array_fini+0x4a>
 801ee94:	2500      	movs	r5, #0
 801ee96:	6860      	ldr	r0, [r4, #4]
 801ee98:	462e      	mov	r6, r5
 801ee9a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ee9e:	68e3      	ldr	r3, [r4, #12]
 801eea0:	69a1      	ldr	r1, [r4, #24]
 801eea2:	4798      	blx	r3
 801eea4:	e9d4 3000 	ldrd	r3, r0, [r4]
 801eea8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801eeac:	3501      	adds	r5, #1
 801eeae:	429d      	cmp	r5, r3
 801eeb0:	d3f3      	bcc.n	801ee9a <rcutils_string_array_fini+0x1e>
 801eeb2:	68e3      	ldr	r3, [r4, #12]
 801eeb4:	69a1      	ldr	r1, [r4, #24]
 801eeb6:	4798      	blx	r3
 801eeb8:	2300      	movs	r3, #0
 801eeba:	4618      	mov	r0, r3
 801eebc:	e9c4 3300 	strd	r3, r3, [r4]
 801eec0:	bd70      	pop	{r4, r5, r6, pc}
 801eec2:	200b      	movs	r0, #11
 801eec4:	bd70      	pop	{r4, r5, r6, pc}
 801eec6:	6860      	ldr	r0, [r4, #4]
 801eec8:	e7f3      	b.n	801eeb2 <rcutils_string_array_fini+0x36>
 801eeca:	200b      	movs	r0, #11
 801eecc:	4770      	bx	lr
 801eece:	bf00      	nop

0801eed0 <rmw_time_equal>:
 801eed0:	b4f0      	push	{r4, r5, r6, r7}
 801eed2:	b084      	sub	sp, #16
 801eed4:	ac04      	add	r4, sp, #16
 801eed6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801eeda:	4603      	mov	r3, r0
 801eedc:	4925      	ldr	r1, [pc, #148]	@ (801ef74 <rmw_time_equal+0xa4>)
 801eede:	9d01      	ldr	r5, [sp, #4]
 801eee0:	4610      	mov	r0, r2
 801eee2:	4299      	cmp	r1, r3
 801eee4:	f04f 0202 	mov.w	r2, #2
 801eee8:	9e03      	ldr	r6, [sp, #12]
 801eeea:	41aa      	sbcs	r2, r5
 801eeec:	d330      	bcc.n	801ef50 <rmw_time_equal+0x80>
 801eeee:	4c22      	ldr	r4, [pc, #136]	@ (801ef78 <rmw_time_equal+0xa8>)
 801eef0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801eef4:	fba3 3204 	umull	r3, r2, r3, r4
 801eef8:	fb04 2205 	mla	r2, r4, r5, r2
 801eefc:	43dd      	mvns	r5, r3
 801eefe:	1a8c      	subs	r4, r1, r2
 801ef00:	4285      	cmp	r5, r0
 801ef02:	41b4      	sbcs	r4, r6
 801ef04:	d332      	bcc.n	801ef6c <rmw_time_equal+0x9c>
 801ef06:	eb10 0c03 	adds.w	ip, r0, r3
 801ef0a:	eb42 0106 	adc.w	r1, r2, r6
 801ef0e:	4819      	ldr	r0, [pc, #100]	@ (801ef74 <rmw_time_equal+0xa4>)
 801ef10:	2202      	movs	r2, #2
 801ef12:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801ef14:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ef16:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801ef1a:	4298      	cmp	r0, r3
 801ef1c:	41b2      	sbcs	r2, r6
 801ef1e:	d31c      	bcc.n	801ef5a <rmw_time_equal+0x8a>
 801ef20:	4c15      	ldr	r4, [pc, #84]	@ (801ef78 <rmw_time_equal+0xa8>)
 801ef22:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801ef26:	fba3 3204 	umull	r3, r2, r3, r4
 801ef2a:	fb04 2206 	mla	r2, r4, r6, r2
 801ef2e:	43de      	mvns	r6, r3
 801ef30:	1a84      	subs	r4, r0, r2
 801ef32:	42ae      	cmp	r6, r5
 801ef34:	41bc      	sbcs	r4, r7
 801ef36:	d315      	bcc.n	801ef64 <rmw_time_equal+0x94>
 801ef38:	195b      	adds	r3, r3, r5
 801ef3a:	eb42 0207 	adc.w	r2, r2, r7
 801ef3e:	428a      	cmp	r2, r1
 801ef40:	bf08      	it	eq
 801ef42:	4563      	cmpeq	r3, ip
 801ef44:	bf0c      	ite	eq
 801ef46:	2001      	moveq	r0, #1
 801ef48:	2000      	movne	r0, #0
 801ef4a:	b004      	add	sp, #16
 801ef4c:	bcf0      	pop	{r4, r5, r6, r7}
 801ef4e:	4770      	bx	lr
 801ef50:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801ef54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ef58:	e7d9      	b.n	801ef0e <rmw_time_equal+0x3e>
 801ef5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ef5e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801ef62:	e7ec      	b.n	801ef3e <rmw_time_equal+0x6e>
 801ef64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ef68:	4602      	mov	r2, r0
 801ef6a:	e7e8      	b.n	801ef3e <rmw_time_equal+0x6e>
 801ef6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801ef70:	e7cd      	b.n	801ef0e <rmw_time_equal+0x3e>
 801ef72:	bf00      	nop
 801ef74:	25c17d04 	.word	0x25c17d04
 801ef78:	3b9aca00 	.word	0x3b9aca00

0801ef7c <rmw_time_total_nsec>:
 801ef7c:	b470      	push	{r4, r5, r6}
 801ef7e:	b085      	sub	sp, #20
 801ef80:	ac04      	add	r4, sp, #16
 801ef82:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801ef86:	4603      	mov	r3, r0
 801ef88:	4913      	ldr	r1, [pc, #76]	@ (801efd8 <rmw_time_total_nsec+0x5c>)
 801ef8a:	9d01      	ldr	r5, [sp, #4]
 801ef8c:	4610      	mov	r0, r2
 801ef8e:	4299      	cmp	r1, r3
 801ef90:	f04f 0202 	mov.w	r2, #2
 801ef94:	9e03      	ldr	r6, [sp, #12]
 801ef96:	41aa      	sbcs	r2, r5
 801ef98:	d311      	bcc.n	801efbe <rmw_time_total_nsec+0x42>
 801ef9a:	4c10      	ldr	r4, [pc, #64]	@ (801efdc <rmw_time_total_nsec+0x60>)
 801ef9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801efa0:	fba3 3204 	umull	r3, r2, r3, r4
 801efa4:	fb04 2205 	mla	r2, r4, r5, r2
 801efa8:	43dd      	mvns	r5, r3
 801efaa:	1a8c      	subs	r4, r1, r2
 801efac:	4285      	cmp	r5, r0
 801efae:	41b4      	sbcs	r4, r6
 801efb0:	d30c      	bcc.n	801efcc <rmw_time_total_nsec+0x50>
 801efb2:	1818      	adds	r0, r3, r0
 801efb4:	eb42 0106 	adc.w	r1, r2, r6
 801efb8:	b005      	add	sp, #20
 801efba:	bc70      	pop	{r4, r5, r6}
 801efbc:	4770      	bx	lr
 801efbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801efc2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801efc6:	b005      	add	sp, #20
 801efc8:	bc70      	pop	{r4, r5, r6}
 801efca:	4770      	bx	lr
 801efcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801efd0:	b005      	add	sp, #20
 801efd2:	bc70      	pop	{r4, r5, r6}
 801efd4:	4770      	bx	lr
 801efd6:	bf00      	nop
 801efd8:	25c17d04 	.word	0x25c17d04
 801efdc:	3b9aca00 	.word	0x3b9aca00

0801efe0 <on_status>:
 801efe0:	b082      	sub	sp, #8
 801efe2:	b002      	add	sp, #8
 801efe4:	4770      	bx	lr
 801efe6:	bf00      	nop

0801efe8 <on_topic>:
 801efe8:	4a23      	ldr	r2, [pc, #140]	@ (801f078 <on_topic+0x90>)
 801efea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efee:	6812      	ldr	r2, [r2, #0]
 801eff0:	b094      	sub	sp, #80	@ 0x50
 801eff2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801eff4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801eff8:	9113      	str	r1, [sp, #76]	@ 0x4c
 801effa:	9312      	str	r3, [sp, #72]	@ 0x48
 801effc:	b3c2      	cbz	r2, 801f070 <on_topic+0x88>
 801effe:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801f002:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801f006:	e001      	b.n	801f00c <on_topic+0x24>
 801f008:	6852      	ldr	r2, [r2, #4]
 801f00a:	b38a      	cbz	r2, 801f070 <on_topic+0x88>
 801f00c:	6894      	ldr	r4, [r2, #8]
 801f00e:	8aa3      	ldrh	r3, [r4, #20]
 801f010:	428b      	cmp	r3, r1
 801f012:	d1f9      	bne.n	801f008 <on_topic+0x20>
 801f014:	7da3      	ldrb	r3, [r4, #22]
 801f016:	4283      	cmp	r3, r0
 801f018:	d1f6      	bne.n	801f008 <on_topic+0x20>
 801f01a:	2248      	movs	r2, #72	@ 0x48
 801f01c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801f020:	4668      	mov	r0, sp
 801f022:	f001 fd56 	bl	8020ad2 <memcpy>
 801f026:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801f02a:	4620      	mov	r0, r4
 801f02c:	cb0c      	ldmia	r3, {r2, r3}
 801f02e:	f7fb faa5 	bl	801a57c <rmw_uxrce_get_static_input_buffer_for_entity>
 801f032:	4607      	mov	r7, r0
 801f034:	b1e0      	cbz	r0, 801f070 <on_topic+0x88>
 801f036:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801f03a:	462a      	mov	r2, r5
 801f03c:	4630      	mov	r0, r6
 801f03e:	f108 0110 	add.w	r1, r8, #16
 801f042:	f7fb ff7d 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801f046:	b930      	cbnz	r0, 801f056 <on_topic+0x6e>
 801f048:	4639      	mov	r1, r7
 801f04a:	480c      	ldr	r0, [pc, #48]	@ (801f07c <on_topic+0x94>)
 801f04c:	b014      	add	sp, #80	@ 0x50
 801f04e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f052:	f000 b8bd 	b.w	801f1d0 <put_memory>
 801f056:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801f05a:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801f05e:	f000 f967 	bl	801f330 <rmw_uros_epoch_nanos>
 801f062:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801f066:	2305      	movs	r3, #5
 801f068:	e942 0102 	strd	r0, r1, [r2, #-8]
 801f06c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801f070:	b014      	add	sp, #80	@ 0x50
 801f072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f076:	bf00      	nop
 801f078:	240693ac 	.word	0x240693ac
 801f07c:	2406939c 	.word	0x2406939c

0801f080 <on_request>:
 801f080:	4824      	ldr	r0, [pc, #144]	@ (801f114 <on_request+0x94>)
 801f082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f086:	6800      	ldr	r0, [r0, #0]
 801f088:	b094      	sub	sp, #80	@ 0x50
 801f08a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801f08c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801f090:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f092:	2800      	cmp	r0, #0
 801f094:	d03b      	beq.n	801f10e <on_request+0x8e>
 801f096:	461d      	mov	r5, r3
 801f098:	e001      	b.n	801f09e <on_request+0x1e>
 801f09a:	6840      	ldr	r0, [r0, #4]
 801f09c:	b3b8      	cbz	r0, 801f10e <on_request+0x8e>
 801f09e:	6884      	ldr	r4, [r0, #8]
 801f0a0:	8b21      	ldrh	r1, [r4, #24]
 801f0a2:	4291      	cmp	r1, r2
 801f0a4:	d1f9      	bne.n	801f09a <on_request+0x1a>
 801f0a6:	2248      	movs	r2, #72	@ 0x48
 801f0a8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801f0ac:	4668      	mov	r0, sp
 801f0ae:	f001 fd10 	bl	8020ad2 <memcpy>
 801f0b2:	f104 0320 	add.w	r3, r4, #32
 801f0b6:	4620      	mov	r0, r4
 801f0b8:	cb0c      	ldmia	r3, {r2, r3}
 801f0ba:	f7fb fa5f 	bl	801a57c <rmw_uxrce_get_static_input_buffer_for_entity>
 801f0be:	4680      	mov	r8, r0
 801f0c0:	b328      	cbz	r0, 801f10e <on_request+0x8e>
 801f0c2:	4630      	mov	r0, r6
 801f0c4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801f0c8:	463a      	mov	r2, r7
 801f0ca:	f106 0110 	add.w	r1, r6, #16
 801f0ce:	f7fb ff37 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801f0d2:	b930      	cbnz	r0, 801f0e2 <on_request+0x62>
 801f0d4:	4641      	mov	r1, r8
 801f0d6:	4810      	ldr	r0, [pc, #64]	@ (801f118 <on_request+0x98>)
 801f0d8:	b014      	add	sp, #80	@ 0x50
 801f0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f0de:	f000 b877 	b.w	801f1d0 <put_memory>
 801f0e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f0e4:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801f0e8:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801f0ec:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801f0f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f0f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 801f0f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801f0fc:	f000 f918 	bl	801f330 <rmw_uros_epoch_nanos>
 801f100:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801f104:	2303      	movs	r3, #3
 801f106:	e942 0102 	strd	r0, r1, [r2, #-8]
 801f10a:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801f10e:	b014      	add	sp, #80	@ 0x50
 801f110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f114:	2406937c 	.word	0x2406937c
 801f118:	2406939c 	.word	0x2406939c

0801f11c <on_reply>:
 801f11c:	4822      	ldr	r0, [pc, #136]	@ (801f1a8 <on_reply+0x8c>)
 801f11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f122:	6800      	ldr	r0, [r0, #0]
 801f124:	b094      	sub	sp, #80	@ 0x50
 801f126:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801f128:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801f12c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f12e:	b3b8      	cbz	r0, 801f1a0 <on_reply+0x84>
 801f130:	461d      	mov	r5, r3
 801f132:	e001      	b.n	801f138 <on_reply+0x1c>
 801f134:	6840      	ldr	r0, [r0, #4]
 801f136:	b398      	cbz	r0, 801f1a0 <on_reply+0x84>
 801f138:	6884      	ldr	r4, [r0, #8]
 801f13a:	8b21      	ldrh	r1, [r4, #24]
 801f13c:	4291      	cmp	r1, r2
 801f13e:	d1f9      	bne.n	801f134 <on_reply+0x18>
 801f140:	2248      	movs	r2, #72	@ 0x48
 801f142:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801f146:	4668      	mov	r0, sp
 801f148:	f001 fcc3 	bl	8020ad2 <memcpy>
 801f14c:	f104 0320 	add.w	r3, r4, #32
 801f150:	4620      	mov	r0, r4
 801f152:	cb0c      	ldmia	r3, {r2, r3}
 801f154:	f7fb fa12 	bl	801a57c <rmw_uxrce_get_static_input_buffer_for_entity>
 801f158:	4680      	mov	r8, r0
 801f15a:	b308      	cbz	r0, 801f1a0 <on_reply+0x84>
 801f15c:	4630      	mov	r0, r6
 801f15e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801f162:	463a      	mov	r2, r7
 801f164:	f106 0110 	add.w	r1, r6, #16
 801f168:	f7fb feea 	bl	801af40 <ucdr_deserialize_array_uint8_t>
 801f16c:	b930      	cbnz	r0, 801f17c <on_reply+0x60>
 801f16e:	4641      	mov	r1, r8
 801f170:	480e      	ldr	r0, [pc, #56]	@ (801f1ac <on_reply+0x90>)
 801f172:	b014      	add	sp, #80	@ 0x50
 801f174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f178:	f000 b82a 	b.w	801f1d0 <put_memory>
 801f17c:	2200      	movs	r2, #0
 801f17e:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801f182:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801f186:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801f18a:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801f18e:	f000 f8cf 	bl	801f330 <rmw_uros_epoch_nanos>
 801f192:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801f196:	2304      	movs	r3, #4
 801f198:	e942 0102 	strd	r0, r1, [r2, #-8]
 801f19c:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801f1a0:	b014      	add	sp, #80	@ 0x50
 801f1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1a6:	bf00      	nop
 801f1a8:	24064a90 	.word	0x24064a90
 801f1ac:	2406939c 	.word	0x2406939c

0801f1b0 <get_memory>:
 801f1b0:	4603      	mov	r3, r0
 801f1b2:	6840      	ldr	r0, [r0, #4]
 801f1b4:	b158      	cbz	r0, 801f1ce <get_memory+0x1e>
 801f1b6:	6842      	ldr	r2, [r0, #4]
 801f1b8:	605a      	str	r2, [r3, #4]
 801f1ba:	b10a      	cbz	r2, 801f1c0 <get_memory+0x10>
 801f1bc:	2100      	movs	r1, #0
 801f1be:	6011      	str	r1, [r2, #0]
 801f1c0:	681a      	ldr	r2, [r3, #0]
 801f1c2:	6042      	str	r2, [r0, #4]
 801f1c4:	b102      	cbz	r2, 801f1c8 <get_memory+0x18>
 801f1c6:	6010      	str	r0, [r2, #0]
 801f1c8:	2200      	movs	r2, #0
 801f1ca:	6002      	str	r2, [r0, #0]
 801f1cc:	6018      	str	r0, [r3, #0]
 801f1ce:	4770      	bx	lr

0801f1d0 <put_memory>:
 801f1d0:	680b      	ldr	r3, [r1, #0]
 801f1d2:	b10b      	cbz	r3, 801f1d8 <put_memory+0x8>
 801f1d4:	684a      	ldr	r2, [r1, #4]
 801f1d6:	605a      	str	r2, [r3, #4]
 801f1d8:	684a      	ldr	r2, [r1, #4]
 801f1da:	b102      	cbz	r2, 801f1de <put_memory+0xe>
 801f1dc:	6013      	str	r3, [r2, #0]
 801f1de:	6803      	ldr	r3, [r0, #0]
 801f1e0:	428b      	cmp	r3, r1
 801f1e2:	6843      	ldr	r3, [r0, #4]
 801f1e4:	bf08      	it	eq
 801f1e6:	6002      	streq	r2, [r0, #0]
 801f1e8:	604b      	str	r3, [r1, #4]
 801f1ea:	b103      	cbz	r3, 801f1ee <put_memory+0x1e>
 801f1ec:	6019      	str	r1, [r3, #0]
 801f1ee:	2300      	movs	r3, #0
 801f1f0:	600b      	str	r3, [r1, #0]
 801f1f2:	6041      	str	r1, [r0, #4]
 801f1f4:	4770      	bx	lr
 801f1f6:	bf00      	nop

0801f1f8 <rmw_create_guard_condition>:
 801f1f8:	b538      	push	{r3, r4, r5, lr}
 801f1fa:	4605      	mov	r5, r0
 801f1fc:	4808      	ldr	r0, [pc, #32]	@ (801f220 <rmw_create_guard_condition+0x28>)
 801f1fe:	f7ff ffd7 	bl	801f1b0 <get_memory>
 801f202:	4603      	mov	r3, r0
 801f204:	b148      	cbz	r0, 801f21a <rmw_create_guard_condition+0x22>
 801f206:	6884      	ldr	r4, [r0, #8]
 801f208:	2300      	movs	r3, #0
 801f20a:	61e5      	str	r5, [r4, #28]
 801f20c:	7423      	strb	r3, [r4, #16]
 801f20e:	f7f9 fd15 	bl	8018c3c <rmw_get_implementation_identifier>
 801f212:	f104 0314 	add.w	r3, r4, #20
 801f216:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801f21a:	4618      	mov	r0, r3
 801f21c:	bd38      	pop	{r3, r4, r5, pc}
 801f21e:	bf00      	nop
 801f220:	2406933c 	.word	0x2406933c

0801f224 <rmw_destroy_guard_condition>:
 801f224:	b508      	push	{r3, lr}
 801f226:	4b08      	ldr	r3, [pc, #32]	@ (801f248 <rmw_destroy_guard_condition+0x24>)
 801f228:	6819      	ldr	r1, [r3, #0]
 801f22a:	b911      	cbnz	r1, 801f232 <rmw_destroy_guard_condition+0xe>
 801f22c:	e00a      	b.n	801f244 <rmw_destroy_guard_condition+0x20>
 801f22e:	6849      	ldr	r1, [r1, #4]
 801f230:	b141      	cbz	r1, 801f244 <rmw_destroy_guard_condition+0x20>
 801f232:	688b      	ldr	r3, [r1, #8]
 801f234:	3314      	adds	r3, #20
 801f236:	4298      	cmp	r0, r3
 801f238:	d1f9      	bne.n	801f22e <rmw_destroy_guard_condition+0xa>
 801f23a:	4803      	ldr	r0, [pc, #12]	@ (801f248 <rmw_destroy_guard_condition+0x24>)
 801f23c:	f7ff ffc8 	bl	801f1d0 <put_memory>
 801f240:	2000      	movs	r0, #0
 801f242:	bd08      	pop	{r3, pc}
 801f244:	2001      	movs	r0, #1
 801f246:	bd08      	pop	{r3, pc}
 801f248:	2406933c 	.word	0x2406933c

0801f24c <create_topic>:
 801f24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f250:	4605      	mov	r5, r0
 801f252:	b084      	sub	sp, #16
 801f254:	4822      	ldr	r0, [pc, #136]	@ (801f2e0 <create_topic+0x94>)
 801f256:	460f      	mov	r7, r1
 801f258:	4616      	mov	r6, r2
 801f25a:	f7ff ffa9 	bl	801f1b0 <get_memory>
 801f25e:	4604      	mov	r4, r0
 801f260:	2800      	cmp	r0, #0
 801f262:	d039      	beq.n	801f2d8 <create_topic+0x8c>
 801f264:	692b      	ldr	r3, [r5, #16]
 801f266:	2102      	movs	r1, #2
 801f268:	6884      	ldr	r4, [r0, #8]
 801f26a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f26e:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801f2e8 <create_topic+0x9c>
 801f272:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801f276:	1c42      	adds	r2, r0, #1
 801f278:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801f27c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801f280:	f7fc f9c0 	bl	801b604 <uxr_object_id>
 801f284:	223c      	movs	r2, #60	@ 0x3c
 801f286:	6120      	str	r0, [r4, #16]
 801f288:	4641      	mov	r1, r8
 801f28a:	4638      	mov	r0, r7
 801f28c:	f7fb fb70 	bl	801a970 <generate_topic_name>
 801f290:	b1f0      	cbz	r0, 801f2d0 <create_topic+0x84>
 801f292:	4f14      	ldr	r7, [pc, #80]	@ (801f2e4 <create_topic+0x98>)
 801f294:	4630      	mov	r0, r6
 801f296:	2264      	movs	r2, #100	@ 0x64
 801f298:	4639      	mov	r1, r7
 801f29a:	f7fb fb3b 	bl	801a914 <generate_type_name>
 801f29e:	b1b8      	cbz	r0, 801f2d0 <create_topic+0x84>
 801f2a0:	6928      	ldr	r0, [r5, #16]
 801f2a2:	2106      	movs	r1, #6
 801f2a4:	696b      	ldr	r3, [r5, #20]
 801f2a6:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801f2aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f2ae:	f8cd 8000 	str.w	r8, [sp]
 801f2b2:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801f2b6:	6811      	ldr	r1, [r2, #0]
 801f2b8:	6922      	ldr	r2, [r4, #16]
 801f2ba:	f7fb ff27 	bl	801b10c <uxr_buffer_create_topic_bin>
 801f2be:	4602      	mov	r2, r0
 801f2c0:	6928      	ldr	r0, [r5, #16]
 801f2c2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f2c6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f2ca:	f7fb fa57 	bl	801a77c <run_xrce_session>
 801f2ce:	b918      	cbnz	r0, 801f2d8 <create_topic+0x8c>
 801f2d0:	4620      	mov	r0, r4
 801f2d2:	2400      	movs	r4, #0
 801f2d4:	f7fb f946 	bl	801a564 <rmw_uxrce_fini_topic_memory>
 801f2d8:	4620      	mov	r0, r4
 801f2da:	b004      	add	sp, #16
 801f2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f2e0:	240693bc 	.word	0x240693bc
 801f2e4:	24069430 	.word	0x24069430
 801f2e8:	240693f4 	.word	0x240693f4

0801f2ec <destroy_topic>:
 801f2ec:	b538      	push	{r3, r4, r5, lr}
 801f2ee:	6985      	ldr	r5, [r0, #24]
 801f2f0:	b1dd      	cbz	r5, 801f32a <destroy_topic+0x3e>
 801f2f2:	4604      	mov	r4, r0
 801f2f4:	6928      	ldr	r0, [r5, #16]
 801f2f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f2fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f2fe:	6922      	ldr	r2, [r4, #16]
 801f300:	6819      	ldr	r1, [r3, #0]
 801f302:	f7fb fe85 	bl	801b010 <uxr_buffer_delete_entity>
 801f306:	4602      	mov	r2, r0
 801f308:	6928      	ldr	r0, [r5, #16]
 801f30a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f30e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f312:	f7fb fa33 	bl	801a77c <run_xrce_session>
 801f316:	4603      	mov	r3, r0
 801f318:	4620      	mov	r0, r4
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	bf14      	ite	ne
 801f31e:	2400      	movne	r4, #0
 801f320:	2402      	moveq	r4, #2
 801f322:	f7fb f91f 	bl	801a564 <rmw_uxrce_fini_topic_memory>
 801f326:	4620      	mov	r0, r4
 801f328:	bd38      	pop	{r3, r4, r5, pc}
 801f32a:	2401      	movs	r4, #1
 801f32c:	4620      	mov	r0, r4
 801f32e:	bd38      	pop	{r3, r4, r5, pc}

0801f330 <rmw_uros_epoch_nanos>:
 801f330:	4b05      	ldr	r3, [pc, #20]	@ (801f348 <rmw_uros_epoch_nanos+0x18>)
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	b123      	cbz	r3, 801f340 <rmw_uros_epoch_nanos+0x10>
 801f336:	6898      	ldr	r0, [r3, #8]
 801f338:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f33c:	f7fc bbd8 	b.w	801baf0 <uxr_epoch_nanos>
 801f340:	2000      	movs	r0, #0
 801f342:	2100      	movs	r1, #0
 801f344:	4770      	bx	lr
 801f346:	bf00      	nop
 801f348:	2406938c 	.word	0x2406938c

0801f34c <rosidl_runtime_c__String__init>:
 801f34c:	b510      	push	{r4, lr}
 801f34e:	4604      	mov	r4, r0
 801f350:	b086      	sub	sp, #24
 801f352:	b170      	cbz	r0, 801f372 <rosidl_runtime_c__String__init+0x26>
 801f354:	a801      	add	r0, sp, #4
 801f356:	f7f5 f94d 	bl	80145f4 <rcutils_get_default_allocator>
 801f35a:	9b01      	ldr	r3, [sp, #4]
 801f35c:	9905      	ldr	r1, [sp, #20]
 801f35e:	2001      	movs	r0, #1
 801f360:	4798      	blx	r3
 801f362:	6020      	str	r0, [r4, #0]
 801f364:	b128      	cbz	r0, 801f372 <rosidl_runtime_c__String__init+0x26>
 801f366:	2100      	movs	r1, #0
 801f368:	2201      	movs	r2, #1
 801f36a:	7001      	strb	r1, [r0, #0]
 801f36c:	4610      	mov	r0, r2
 801f36e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801f372:	b006      	add	sp, #24
 801f374:	bd10      	pop	{r4, pc}
 801f376:	bf00      	nop

0801f378 <rosidl_runtime_c__String__fini>:
 801f378:	b320      	cbz	r0, 801f3c4 <rosidl_runtime_c__String__fini+0x4c>
 801f37a:	6803      	ldr	r3, [r0, #0]
 801f37c:	b510      	push	{r4, lr}
 801f37e:	4604      	mov	r4, r0
 801f380:	b086      	sub	sp, #24
 801f382:	b173      	cbz	r3, 801f3a2 <rosidl_runtime_c__String__fini+0x2a>
 801f384:	6883      	ldr	r3, [r0, #8]
 801f386:	b1f3      	cbz	r3, 801f3c6 <rosidl_runtime_c__String__fini+0x4e>
 801f388:	a801      	add	r0, sp, #4
 801f38a:	f7f5 f933 	bl	80145f4 <rcutils_get_default_allocator>
 801f38e:	9b02      	ldr	r3, [sp, #8]
 801f390:	9905      	ldr	r1, [sp, #20]
 801f392:	6820      	ldr	r0, [r4, #0]
 801f394:	4798      	blx	r3
 801f396:	2300      	movs	r3, #0
 801f398:	e9c4 3300 	strd	r3, r3, [r4]
 801f39c:	60a3      	str	r3, [r4, #8]
 801f39e:	b006      	add	sp, #24
 801f3a0:	bd10      	pop	{r4, pc}
 801f3a2:	6843      	ldr	r3, [r0, #4]
 801f3a4:	b9db      	cbnz	r3, 801f3de <rosidl_runtime_c__String__fini+0x66>
 801f3a6:	6883      	ldr	r3, [r0, #8]
 801f3a8:	2b00      	cmp	r3, #0
 801f3aa:	d0f8      	beq.n	801f39e <rosidl_runtime_c__String__fini+0x26>
 801f3ac:	4b12      	ldr	r3, [pc, #72]	@ (801f3f8 <rosidl_runtime_c__String__fini+0x80>)
 801f3ae:	2251      	movs	r2, #81	@ 0x51
 801f3b0:	2101      	movs	r1, #1
 801f3b2:	4812      	ldr	r0, [pc, #72]	@ (801f3fc <rosidl_runtime_c__String__fini+0x84>)
 801f3b4:	681b      	ldr	r3, [r3, #0]
 801f3b6:	68db      	ldr	r3, [r3, #12]
 801f3b8:	f001 f8f0 	bl	802059c <fwrite>
 801f3bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f3c0:	f000 fdac 	bl	801ff1c <exit>
 801f3c4:	4770      	bx	lr
 801f3c6:	4b0c      	ldr	r3, [pc, #48]	@ (801f3f8 <rosidl_runtime_c__String__fini+0x80>)
 801f3c8:	224c      	movs	r2, #76	@ 0x4c
 801f3ca:	2101      	movs	r1, #1
 801f3cc:	480c      	ldr	r0, [pc, #48]	@ (801f400 <rosidl_runtime_c__String__fini+0x88>)
 801f3ce:	681b      	ldr	r3, [r3, #0]
 801f3d0:	68db      	ldr	r3, [r3, #12]
 801f3d2:	f001 f8e3 	bl	802059c <fwrite>
 801f3d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f3da:	f000 fd9f 	bl	801ff1c <exit>
 801f3de:	4b06      	ldr	r3, [pc, #24]	@ (801f3f8 <rosidl_runtime_c__String__fini+0x80>)
 801f3e0:	224e      	movs	r2, #78	@ 0x4e
 801f3e2:	2101      	movs	r1, #1
 801f3e4:	4807      	ldr	r0, [pc, #28]	@ (801f404 <rosidl_runtime_c__String__fini+0x8c>)
 801f3e6:	681b      	ldr	r3, [r3, #0]
 801f3e8:	68db      	ldr	r3, [r3, #12]
 801f3ea:	f001 f8d7 	bl	802059c <fwrite>
 801f3ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f3f2:	f000 fd93 	bl	801ff1c <exit>
 801f3f6:	bf00      	nop
 801f3f8:	240013a0 	.word	0x240013a0
 801f3fc:	08023e44 	.word	0x08023e44
 801f400:	08023da4 	.word	0x08023da4
 801f404:	08023df4 	.word	0x08023df4

0801f408 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 801f408:	3800      	subs	r0, #0
 801f40a:	bf18      	it	ne
 801f40c:	2001      	movne	r0, #1
 801f40e:	4770      	bx	lr

0801f410 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 801f410:	4770      	bx	lr
 801f412:	bf00      	nop

0801f414 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 801f414:	3800      	subs	r0, #0
 801f416:	bf18      	it	ne
 801f418:	2001      	movne	r0, #1
 801f41a:	4770      	bx	lr

0801f41c <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 801f41c:	4770      	bx	lr
 801f41e:	bf00      	nop

0801f420 <ucdr_serialize_string>:
 801f420:	b510      	push	{r4, lr}
 801f422:	b082      	sub	sp, #8
 801f424:	4604      	mov	r4, r0
 801f426:	4608      	mov	r0, r1
 801f428:	9101      	str	r1, [sp, #4]
 801f42a:	f7e0 ff63 	bl	80002f4 <strlen>
 801f42e:	4602      	mov	r2, r0
 801f430:	9901      	ldr	r1, [sp, #4]
 801f432:	4620      	mov	r0, r4
 801f434:	3201      	adds	r2, #1
 801f436:	b002      	add	sp, #8
 801f438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f43c:	f7f5 bec0 	b.w	80151c0 <ucdr_serialize_sequence_char>

0801f440 <ucdr_deserialize_string>:
 801f440:	b500      	push	{lr}
 801f442:	b083      	sub	sp, #12
 801f444:	ab01      	add	r3, sp, #4
 801f446:	f7f5 fecd 	bl	80151e4 <ucdr_deserialize_sequence_char>
 801f44a:	b003      	add	sp, #12
 801f44c:	f85d fb04 	ldr.w	pc, [sp], #4

0801f450 <uxr_init_input_best_effort_stream>:
 801f450:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801f454:	8003      	strh	r3, [r0, #0]
 801f456:	4770      	bx	lr

0801f458 <uxr_reset_input_best_effort_stream>:
 801f458:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801f45c:	8003      	strh	r3, [r0, #0]
 801f45e:	4770      	bx	lr

0801f460 <uxr_receive_best_effort_message>:
 801f460:	b538      	push	{r3, r4, r5, lr}
 801f462:	4604      	mov	r4, r0
 801f464:	8800      	ldrh	r0, [r0, #0]
 801f466:	460d      	mov	r5, r1
 801f468:	f000 fd24 	bl	801feb4 <uxr_seq_num_cmp>
 801f46c:	4603      	mov	r3, r0
 801f46e:	0fc0      	lsrs	r0, r0, #31
 801f470:	2b00      	cmp	r3, #0
 801f472:	bfb8      	it	lt
 801f474:	8025      	strhlt	r5, [r4, #0]
 801f476:	bd38      	pop	{r3, r4, r5, pc}

0801f478 <on_full_input_buffer>:
 801f478:	b570      	push	{r4, r5, r6, lr}
 801f47a:	460c      	mov	r4, r1
 801f47c:	4605      	mov	r5, r0
 801f47e:	8908      	ldrh	r0, [r1, #8]
 801f480:	682b      	ldr	r3, [r5, #0]
 801f482:	7d26      	ldrb	r6, [r4, #20]
 801f484:	e9d1 1200 	ldrd	r1, r2, [r1]
 801f488:	fbb2 f2f0 	udiv	r2, r2, r0
 801f48c:	eba3 0c01 	sub.w	ip, r3, r1
 801f490:	fbbc fcf2 	udiv	ip, ip, r2
 801f494:	f10c 0c01 	add.w	ip, ip, #1
 801f498:	fa1f f38c 	uxth.w	r3, ip
 801f49c:	fbb3 fcf0 	udiv	ip, r3, r0
 801f4a0:	fb00 331c 	mls	r3, r0, ip, r3
 801f4a4:	b29b      	uxth	r3, r3
 801f4a6:	fb02 f303 	mul.w	r3, r2, r3
 801f4aa:	1d18      	adds	r0, r3, #4
 801f4ac:	4408      	add	r0, r1
 801f4ae:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801f4b2:	b116      	cbz	r6, 801f4ba <on_full_input_buffer+0x42>
 801f4b4:	2600      	movs	r6, #0
 801f4b6:	f840 6c04 	str.w	r6, [r0, #-4]
 801f4ba:	2a03      	cmp	r2, #3
 801f4bc:	d801      	bhi.n	801f4c2 <on_full_input_buffer+0x4a>
 801f4be:	2001      	movs	r0, #1
 801f4c0:	bd70      	pop	{r4, r5, r6, pc}
 801f4c2:	3308      	adds	r3, #8
 801f4c4:	4628      	mov	r0, r5
 801f4c6:	3a04      	subs	r2, #4
 801f4c8:	4419      	add	r1, r3
 801f4ca:	692b      	ldr	r3, [r5, #16]
 801f4cc:	f7f4 f832 	bl	8013534 <ucdr_init_buffer_origin>
 801f4d0:	4628      	mov	r0, r5
 801f4d2:	4622      	mov	r2, r4
 801f4d4:	4902      	ldr	r1, [pc, #8]	@ (801f4e0 <on_full_input_buffer+0x68>)
 801f4d6:	f7f4 f809 	bl	80134ec <ucdr_set_on_full_buffer_callback>
 801f4da:	2000      	movs	r0, #0
 801f4dc:	bd70      	pop	{r4, r5, r6, pc}
 801f4de:	bf00      	nop
 801f4e0:	0801f479 	.word	0x0801f479

0801f4e4 <uxr_init_input_reliable_stream>:
 801f4e4:	b510      	push	{r4, lr}
 801f4e6:	e9c0 1200 	strd	r1, r2, [r0]
 801f4ea:	2400      	movs	r4, #0
 801f4ec:	9a02      	ldr	r2, [sp, #8]
 801f4ee:	8103      	strh	r3, [r0, #8]
 801f4f0:	6102      	str	r2, [r0, #16]
 801f4f2:	7504      	strb	r4, [r0, #20]
 801f4f4:	b1c3      	cbz	r3, 801f528 <uxr_init_input_reliable_stream+0x44>
 801f4f6:	600c      	str	r4, [r1, #0]
 801f4f8:	8901      	ldrh	r1, [r0, #8]
 801f4fa:	2901      	cmp	r1, #1
 801f4fc:	d914      	bls.n	801f528 <uxr_init_input_reliable_stream+0x44>
 801f4fe:	f04f 0c01 	mov.w	ip, #1
 801f502:	6843      	ldr	r3, [r0, #4]
 801f504:	f10c 0e01 	add.w	lr, ip, #1
 801f508:	fbbc f2f1 	udiv	r2, ip, r1
 801f50c:	fbb3 f3f1 	udiv	r3, r3, r1
 801f510:	fb01 c212 	mls	r2, r1, r2, ip
 801f514:	fa1f fc8e 	uxth.w	ip, lr
 801f518:	b292      	uxth	r2, r2
 801f51a:	fb02 f303 	mul.w	r3, r2, r3
 801f51e:	6802      	ldr	r2, [r0, #0]
 801f520:	50d4      	str	r4, [r2, r3]
 801f522:	8901      	ldrh	r1, [r0, #8]
 801f524:	4561      	cmp	r1, ip
 801f526:	d8ec      	bhi.n	801f502 <uxr_init_input_reliable_stream+0x1e>
 801f528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f52c:	60c3      	str	r3, [r0, #12]
 801f52e:	bd10      	pop	{r4, pc}

0801f530 <uxr_reset_input_reliable_stream>:
 801f530:	8901      	ldrh	r1, [r0, #8]
 801f532:	b1d9      	cbz	r1, 801f56c <uxr_reset_input_reliable_stream+0x3c>
 801f534:	b510      	push	{r4, lr}
 801f536:	f04f 0e00 	mov.w	lr, #0
 801f53a:	46f4      	mov	ip, lr
 801f53c:	4674      	mov	r4, lr
 801f53e:	6843      	ldr	r3, [r0, #4]
 801f540:	f10e 0e01 	add.w	lr, lr, #1
 801f544:	fbbc f2f1 	udiv	r2, ip, r1
 801f548:	fbb3 f3f1 	udiv	r3, r3, r1
 801f54c:	fb01 c212 	mls	r2, r1, r2, ip
 801f550:	fa1f fc8e 	uxth.w	ip, lr
 801f554:	b292      	uxth	r2, r2
 801f556:	fb02 f303 	mul.w	r3, r2, r3
 801f55a:	6802      	ldr	r2, [r0, #0]
 801f55c:	50d4      	str	r4, [r2, r3]
 801f55e:	8901      	ldrh	r1, [r0, #8]
 801f560:	4561      	cmp	r1, ip
 801f562:	d8ec      	bhi.n	801f53e <uxr_reset_input_reliable_stream+0xe>
 801f564:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f568:	60c3      	str	r3, [r0, #12]
 801f56a:	bd10      	pop	{r4, pc}
 801f56c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f570:	60c3      	str	r3, [r0, #12]
 801f572:	4770      	bx	lr

0801f574 <uxr_receive_reliable_message>:
 801f574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f578:	4604      	mov	r4, r0
 801f57a:	460d      	mov	r5, r1
 801f57c:	8901      	ldrh	r1, [r0, #8]
 801f57e:	4617      	mov	r7, r2
 801f580:	8980      	ldrh	r0, [r0, #12]
 801f582:	4698      	mov	r8, r3
 801f584:	f000 fc8e 	bl	801fea4 <uxr_seq_num_add>
 801f588:	4629      	mov	r1, r5
 801f58a:	4606      	mov	r6, r0
 801f58c:	89a0      	ldrh	r0, [r4, #12]
 801f58e:	f000 fc91 	bl	801feb4 <uxr_seq_num_cmp>
 801f592:	2800      	cmp	r0, #0
 801f594:	db0a      	blt.n	801f5ac <uxr_receive_reliable_message+0x38>
 801f596:	2600      	movs	r6, #0
 801f598:	4629      	mov	r1, r5
 801f59a:	89e0      	ldrh	r0, [r4, #14]
 801f59c:	f000 fc8a 	bl	801feb4 <uxr_seq_num_cmp>
 801f5a0:	2800      	cmp	r0, #0
 801f5a2:	da00      	bge.n	801f5a6 <uxr_receive_reliable_message+0x32>
 801f5a4:	81e5      	strh	r5, [r4, #14]
 801f5a6:	4630      	mov	r0, r6
 801f5a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f5ac:	4630      	mov	r0, r6
 801f5ae:	4629      	mov	r1, r5
 801f5b0:	f000 fc80 	bl	801feb4 <uxr_seq_num_cmp>
 801f5b4:	2800      	cmp	r0, #0
 801f5b6:	dbee      	blt.n	801f596 <uxr_receive_reliable_message+0x22>
 801f5b8:	6923      	ldr	r3, [r4, #16]
 801f5ba:	4638      	mov	r0, r7
 801f5bc:	4798      	blx	r3
 801f5be:	4681      	mov	r9, r0
 801f5c0:	2101      	movs	r1, #1
 801f5c2:	89a0      	ldrh	r0, [r4, #12]
 801f5c4:	f000 fc6e 	bl	801fea4 <uxr_seq_num_add>
 801f5c8:	f1b9 0f00 	cmp.w	r9, #0
 801f5cc:	bf08      	it	eq
 801f5ce:	4285      	cmpeq	r5, r0
 801f5d0:	bf0c      	ite	eq
 801f5d2:	2601      	moveq	r6, #1
 801f5d4:	2600      	movne	r6, #0
 801f5d6:	d104      	bne.n	801f5e2 <uxr_receive_reliable_message+0x6e>
 801f5d8:	2300      	movs	r3, #0
 801f5da:	9a08      	ldr	r2, [sp, #32]
 801f5dc:	81a0      	strh	r0, [r4, #12]
 801f5de:	7013      	strb	r3, [r2, #0]
 801f5e0:	e7da      	b.n	801f598 <uxr_receive_reliable_message+0x24>
 801f5e2:	8922      	ldrh	r2, [r4, #8]
 801f5e4:	6863      	ldr	r3, [r4, #4]
 801f5e6:	fbb5 f0f2 	udiv	r0, r5, r2
 801f5ea:	fbb3 f3f2 	udiv	r3, r3, r2
 801f5ee:	fb02 5010 	mls	r0, r2, r0, r5
 801f5f2:	b280      	uxth	r0, r0
 801f5f4:	fb03 f000 	mul.w	r0, r3, r0
 801f5f8:	6823      	ldr	r3, [r4, #0]
 801f5fa:	3004      	adds	r0, #4
 801f5fc:	4418      	add	r0, r3
 801f5fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801f602:	2b00      	cmp	r3, #0
 801f604:	d1c7      	bne.n	801f596 <uxr_receive_reliable_message+0x22>
 801f606:	4639      	mov	r1, r7
 801f608:	4642      	mov	r2, r8
 801f60a:	f001 fa62 	bl	8020ad2 <memcpy>
 801f60e:	8921      	ldrh	r1, [r4, #8]
 801f610:	6863      	ldr	r3, [r4, #4]
 801f612:	fbb5 f2f1 	udiv	r2, r5, r1
 801f616:	fbb3 f3f1 	udiv	r3, r3, r1
 801f61a:	fb01 5212 	mls	r2, r1, r2, r5
 801f61e:	b292      	uxth	r2, r2
 801f620:	fb02 f303 	mul.w	r3, r2, r3
 801f624:	6822      	ldr	r2, [r4, #0]
 801f626:	f842 8003 	str.w	r8, [r2, r3]
 801f62a:	2301      	movs	r3, #1
 801f62c:	9a08      	ldr	r2, [sp, #32]
 801f62e:	7013      	strb	r3, [r2, #0]
 801f630:	f1b9 0f00 	cmp.w	r9, #0
 801f634:	d0af      	beq.n	801f596 <uxr_receive_reliable_message+0x22>
 801f636:	89a6      	ldrh	r6, [r4, #12]
 801f638:	2101      	movs	r1, #1
 801f63a:	4630      	mov	r0, r6
 801f63c:	f000 fc32 	bl	801fea4 <uxr_seq_num_add>
 801f640:	8921      	ldrh	r1, [r4, #8]
 801f642:	6863      	ldr	r3, [r4, #4]
 801f644:	4606      	mov	r6, r0
 801f646:	fbb0 f2f1 	udiv	r2, r0, r1
 801f64a:	fbb3 f3f1 	udiv	r3, r3, r1
 801f64e:	fb01 0212 	mls	r2, r1, r2, r0
 801f652:	6820      	ldr	r0, [r4, #0]
 801f654:	b292      	uxth	r2, r2
 801f656:	fb02 f303 	mul.w	r3, r2, r3
 801f65a:	3304      	adds	r3, #4
 801f65c:	4418      	add	r0, r3
 801f65e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801f662:	2b00      	cmp	r3, #0
 801f664:	d097      	beq.n	801f596 <uxr_receive_reliable_message+0x22>
 801f666:	6923      	ldr	r3, [r4, #16]
 801f668:	4798      	blx	r3
 801f66a:	2802      	cmp	r0, #2
 801f66c:	d002      	beq.n	801f674 <uxr_receive_reliable_message+0x100>
 801f66e:	2801      	cmp	r0, #1
 801f670:	d0e2      	beq.n	801f638 <uxr_receive_reliable_message+0xc4>
 801f672:	e790      	b.n	801f596 <uxr_receive_reliable_message+0x22>
 801f674:	2601      	movs	r6, #1
 801f676:	e78f      	b.n	801f598 <uxr_receive_reliable_message+0x24>

0801f678 <uxr_next_input_reliable_buffer_available>:
 801f678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f67c:	4604      	mov	r4, r0
 801f67e:	460f      	mov	r7, r1
 801f680:	8980      	ldrh	r0, [r0, #12]
 801f682:	2101      	movs	r1, #1
 801f684:	4690      	mov	r8, r2
 801f686:	f000 fc0d 	bl	801fea4 <uxr_seq_num_add>
 801f68a:	8922      	ldrh	r2, [r4, #8]
 801f68c:	6866      	ldr	r6, [r4, #4]
 801f68e:	fbb0 f3f2 	udiv	r3, r0, r2
 801f692:	fbb6 f6f2 	udiv	r6, r6, r2
 801f696:	fb02 0313 	mls	r3, r2, r3, r0
 801f69a:	b29b      	uxth	r3, r3
 801f69c:	fb03 f606 	mul.w	r6, r3, r6
 801f6a0:	6823      	ldr	r3, [r4, #0]
 801f6a2:	3604      	adds	r6, #4
 801f6a4:	441e      	add	r6, r3
 801f6a6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801f6aa:	f1b9 0f00 	cmp.w	r9, #0
 801f6ae:	d023      	beq.n	801f6f8 <uxr_next_input_reliable_buffer_available+0x80>
 801f6b0:	4605      	mov	r5, r0
 801f6b2:	6923      	ldr	r3, [r4, #16]
 801f6b4:	4630      	mov	r0, r6
 801f6b6:	4798      	blx	r3
 801f6b8:	4682      	mov	sl, r0
 801f6ba:	b300      	cbz	r0, 801f6fe <uxr_next_input_reliable_buffer_available+0x86>
 801f6bc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801f6c0:	2101      	movs	r1, #1
 801f6c2:	4650      	mov	r0, sl
 801f6c4:	f000 fbee 	bl	801fea4 <uxr_seq_num_add>
 801f6c8:	8921      	ldrh	r1, [r4, #8]
 801f6ca:	4682      	mov	sl, r0
 801f6cc:	6863      	ldr	r3, [r4, #4]
 801f6ce:	6820      	ldr	r0, [r4, #0]
 801f6d0:	fbba f2f1 	udiv	r2, sl, r1
 801f6d4:	fbb3 f3f1 	udiv	r3, r3, r1
 801f6d8:	fb01 a212 	mls	r2, r1, r2, sl
 801f6dc:	b292      	uxth	r2, r2
 801f6de:	fb02 f303 	mul.w	r3, r2, r3
 801f6e2:	3304      	adds	r3, #4
 801f6e4:	4418      	add	r0, r3
 801f6e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801f6ea:	b12b      	cbz	r3, 801f6f8 <uxr_next_input_reliable_buffer_available+0x80>
 801f6ec:	6923      	ldr	r3, [r4, #16]
 801f6ee:	4798      	blx	r3
 801f6f0:	2802      	cmp	r0, #2
 801f6f2:	d01b      	beq.n	801f72c <uxr_next_input_reliable_buffer_available+0xb4>
 801f6f4:	2801      	cmp	r0, #1
 801f6f6:	d0e3      	beq.n	801f6c0 <uxr_next_input_reliable_buffer_available+0x48>
 801f6f8:	2000      	movs	r0, #0
 801f6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6fe:	464a      	mov	r2, r9
 801f700:	4631      	mov	r1, r6
 801f702:	4638      	mov	r0, r7
 801f704:	f7f3 ff1e 	bl	8013544 <ucdr_init_buffer>
 801f708:	8921      	ldrh	r1, [r4, #8]
 801f70a:	6863      	ldr	r3, [r4, #4]
 801f70c:	2001      	movs	r0, #1
 801f70e:	fbb5 f2f1 	udiv	r2, r5, r1
 801f712:	fbb3 f3f1 	udiv	r3, r3, r1
 801f716:	fb01 5212 	mls	r2, r1, r2, r5
 801f71a:	b292      	uxth	r2, r2
 801f71c:	fb02 f303 	mul.w	r3, r2, r3
 801f720:	6822      	ldr	r2, [r4, #0]
 801f722:	f842 a003 	str.w	sl, [r2, r3]
 801f726:	81a5      	strh	r5, [r4, #12]
 801f728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f72c:	8920      	ldrh	r0, [r4, #8]
 801f72e:	eb06 0108 	add.w	r1, r6, r8
 801f732:	6863      	ldr	r3, [r4, #4]
 801f734:	eba9 0208 	sub.w	r2, r9, r8
 801f738:	fbb5 f6f0 	udiv	r6, r5, r0
 801f73c:	fbb3 f3f0 	udiv	r3, r3, r0
 801f740:	fb00 5516 	mls	r5, r0, r6, r5
 801f744:	2000      	movs	r0, #0
 801f746:	b2ad      	uxth	r5, r5
 801f748:	fb03 f505 	mul.w	r5, r3, r5
 801f74c:	6823      	ldr	r3, [r4, #0]
 801f74e:	5158      	str	r0, [r3, r5]
 801f750:	4638      	mov	r0, r7
 801f752:	f7f3 fef7 	bl	8013544 <ucdr_init_buffer>
 801f756:	4638      	mov	r0, r7
 801f758:	4622      	mov	r2, r4
 801f75a:	4903      	ldr	r1, [pc, #12]	@ (801f768 <uxr_next_input_reliable_buffer_available+0xf0>)
 801f75c:	f7f3 fec6 	bl	80134ec <ucdr_set_on_full_buffer_callback>
 801f760:	2001      	movs	r0, #1
 801f762:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801f766:	e7c8      	b.n	801f6fa <uxr_next_input_reliable_buffer_available+0x82>
 801f768:	0801f479 	.word	0x0801f479

0801f76c <uxr_process_heartbeat>:
 801f76c:	b538      	push	{r3, r4, r5, lr}
 801f76e:	4611      	mov	r1, r2
 801f770:	4604      	mov	r4, r0
 801f772:	89c0      	ldrh	r0, [r0, #14]
 801f774:	4615      	mov	r5, r2
 801f776:	f000 fb9d 	bl	801feb4 <uxr_seq_num_cmp>
 801f77a:	2800      	cmp	r0, #0
 801f77c:	bfb8      	it	lt
 801f77e:	81e5      	strhlt	r5, [r4, #14]
 801f780:	bd38      	pop	{r3, r4, r5, pc}
 801f782:	bf00      	nop

0801f784 <uxr_compute_acknack>:
 801f784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f788:	8903      	ldrh	r3, [r0, #8]
 801f78a:	4604      	mov	r4, r0
 801f78c:	460f      	mov	r7, r1
 801f78e:	8985      	ldrh	r5, [r0, #12]
 801f790:	b1db      	cbz	r3, 801f7ca <uxr_compute_acknack+0x46>
 801f792:	4628      	mov	r0, r5
 801f794:	2601      	movs	r6, #1
 801f796:	e004      	b.n	801f7a2 <uxr_compute_acknack+0x1e>
 801f798:	4566      	cmp	r6, ip
 801f79a:	f106 0601 	add.w	r6, r6, #1
 801f79e:	d214      	bcs.n	801f7ca <uxr_compute_acknack+0x46>
 801f7a0:	89a0      	ldrh	r0, [r4, #12]
 801f7a2:	b2b1      	uxth	r1, r6
 801f7a4:	f000 fb7e 	bl	801fea4 <uxr_seq_num_add>
 801f7a8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801f7ac:	fbb0 f2fc 	udiv	r2, r0, ip
 801f7b0:	e9d4 1300 	ldrd	r1, r3, [r4]
 801f7b4:	fb0c 0212 	mls	r2, ip, r2, r0
 801f7b8:	fbb3 f3fc 	udiv	r3, r3, ip
 801f7bc:	b292      	uxth	r2, r2
 801f7be:	fb02 f303 	mul.w	r3, r2, r3
 801f7c2:	58cb      	ldr	r3, [r1, r3]
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	d1e7      	bne.n	801f798 <uxr_compute_acknack+0x14>
 801f7c8:	4605      	mov	r5, r0
 801f7ca:	803d      	strh	r5, [r7, #0]
 801f7cc:	2101      	movs	r1, #1
 801f7ce:	89e6      	ldrh	r6, [r4, #14]
 801f7d0:	4628      	mov	r0, r5
 801f7d2:	f000 fb6b 	bl	801feac <uxr_seq_num_sub>
 801f7d6:	4601      	mov	r1, r0
 801f7d8:	4630      	mov	r0, r6
 801f7da:	f000 fb67 	bl	801feac <uxr_seq_num_sub>
 801f7de:	4606      	mov	r6, r0
 801f7e0:	b328      	cbz	r0, 801f82e <uxr_compute_acknack+0xaa>
 801f7e2:	f04f 0900 	mov.w	r9, #0
 801f7e6:	f04f 0801 	mov.w	r8, #1
 801f7ea:	464d      	mov	r5, r9
 801f7ec:	fa1f f189 	uxth.w	r1, r9
 801f7f0:	8838      	ldrh	r0, [r7, #0]
 801f7f2:	f000 fb57 	bl	801fea4 <uxr_seq_num_add>
 801f7f6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801f7fa:	6861      	ldr	r1, [r4, #4]
 801f7fc:	fa08 fe09 	lsl.w	lr, r8, r9
 801f800:	6822      	ldr	r2, [r4, #0]
 801f802:	f109 0901 	add.w	r9, r9, #1
 801f806:	ea4e 0e05 	orr.w	lr, lr, r5
 801f80a:	fbb0 f3fc 	udiv	r3, r0, ip
 801f80e:	fbb1 f1fc 	udiv	r1, r1, ip
 801f812:	fb03 001c 	mls	r0, r3, ip, r0
 801f816:	b283      	uxth	r3, r0
 801f818:	fb01 f303 	mul.w	r3, r1, r3
 801f81c:	58d3      	ldr	r3, [r2, r3]
 801f81e:	b90b      	cbnz	r3, 801f824 <uxr_compute_acknack+0xa0>
 801f820:	fa1f f58e 	uxth.w	r5, lr
 801f824:	454e      	cmp	r6, r9
 801f826:	d1e1      	bne.n	801f7ec <uxr_compute_acknack+0x68>
 801f828:	4628      	mov	r0, r5
 801f82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f82e:	4605      	mov	r5, r0
 801f830:	4628      	mov	r0, r5
 801f832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f836:	bf00      	nop

0801f838 <uxr_init_output_best_effort_stream>:
 801f838:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801f83c:	6001      	str	r1, [r0, #0]
 801f83e:	7303      	strb	r3, [r0, #12]
 801f840:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801f844:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801f848:	4770      	bx	lr
 801f84a:	bf00      	nop

0801f84c <uxr_reset_output_best_effort_stream>:
 801f84c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f850:	7b03      	ldrb	r3, [r0, #12]
 801f852:	81c2      	strh	r2, [r0, #14]
 801f854:	6043      	str	r3, [r0, #4]
 801f856:	4770      	bx	lr

0801f858 <uxr_prepare_best_effort_buffer_to_write>:
 801f858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f85a:	4604      	mov	r4, r0
 801f85c:	b083      	sub	sp, #12
 801f85e:	6840      	ldr	r0, [r0, #4]
 801f860:	460d      	mov	r5, r1
 801f862:	4616      	mov	r6, r2
 801f864:	f7fd fec0 	bl	801d5e8 <uxr_submessage_padding>
 801f868:	6863      	ldr	r3, [r4, #4]
 801f86a:	4418      	add	r0, r3
 801f86c:	68a3      	ldr	r3, [r4, #8]
 801f86e:	1942      	adds	r2, r0, r5
 801f870:	4293      	cmp	r3, r2
 801f872:	bf2c      	ite	cs
 801f874:	2701      	movcs	r7, #1
 801f876:	2700      	movcc	r7, #0
 801f878:	d202      	bcs.n	801f880 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801f87a:	4638      	mov	r0, r7
 801f87c:	b003      	add	sp, #12
 801f87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f880:	9000      	str	r0, [sp, #0]
 801f882:	2300      	movs	r3, #0
 801f884:	4630      	mov	r0, r6
 801f886:	6821      	ldr	r1, [r4, #0]
 801f888:	f7f3 fe4a 	bl	8013520 <ucdr_init_buffer_origin_offset>
 801f88c:	6861      	ldr	r1, [r4, #4]
 801f88e:	4638      	mov	r0, r7
 801f890:	4429      	add	r1, r5
 801f892:	6061      	str	r1, [r4, #4]
 801f894:	b003      	add	sp, #12
 801f896:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f898 <uxr_prepare_best_effort_buffer_to_send>:
 801f898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f89c:	4604      	mov	r4, r0
 801f89e:	461d      	mov	r5, r3
 801f8a0:	6840      	ldr	r0, [r0, #4]
 801f8a2:	7b23      	ldrb	r3, [r4, #12]
 801f8a4:	4298      	cmp	r0, r3
 801f8a6:	bf8c      	ite	hi
 801f8a8:	2601      	movhi	r6, #1
 801f8aa:	2600      	movls	r6, #0
 801f8ac:	d802      	bhi.n	801f8b4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801f8ae:	4630      	mov	r0, r6
 801f8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8b4:	4688      	mov	r8, r1
 801f8b6:	89e0      	ldrh	r0, [r4, #14]
 801f8b8:	2101      	movs	r1, #1
 801f8ba:	4617      	mov	r7, r2
 801f8bc:	f000 faf2 	bl	801fea4 <uxr_seq_num_add>
 801f8c0:	6823      	ldr	r3, [r4, #0]
 801f8c2:	81e0      	strh	r0, [r4, #14]
 801f8c4:	8028      	strh	r0, [r5, #0]
 801f8c6:	4630      	mov	r0, r6
 801f8c8:	f8c8 3000 	str.w	r3, [r8]
 801f8cc:	6863      	ldr	r3, [r4, #4]
 801f8ce:	603b      	str	r3, [r7, #0]
 801f8d0:	7b23      	ldrb	r3, [r4, #12]
 801f8d2:	6063      	str	r3, [r4, #4]
 801f8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f8d8 <on_full_output_buffer>:
 801f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8da:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801f8de:	460c      	mov	r4, r1
 801f8e0:	6803      	ldr	r3, [r0, #0]
 801f8e2:	4605      	mov	r5, r0
 801f8e4:	7b26      	ldrb	r6, [r4, #12]
 801f8e6:	e9d1 1200 	ldrd	r1, r2, [r1]
 801f8ea:	fbb2 f2fc 	udiv	r2, r2, ip
 801f8ee:	eba3 0e01 	sub.w	lr, r3, r1
 801f8f2:	6903      	ldr	r3, [r0, #16]
 801f8f4:	fbbe fef2 	udiv	lr, lr, r2
 801f8f8:	f10e 0e01 	add.w	lr, lr, #1
 801f8fc:	fa1f fe8e 	uxth.w	lr, lr
 801f900:	fbbe f7fc 	udiv	r7, lr, ip
 801f904:	fb0c ec17 	mls	ip, ip, r7, lr
 801f908:	fa1f fc8c 	uxth.w	ip, ip
 801f90c:	fb02 fc0c 	mul.w	ip, r2, ip
 801f910:	f851 200c 	ldr.w	r2, [r1, ip]
 801f914:	44b4      	add	ip, r6
 801f916:	1b92      	subs	r2, r2, r6
 801f918:	f10c 0c08 	add.w	ip, ip, #8
 801f91c:	3a04      	subs	r2, #4
 801f91e:	4461      	add	r1, ip
 801f920:	f7f3 fe08 	bl	8013534 <ucdr_init_buffer_origin>
 801f924:	4628      	mov	r0, r5
 801f926:	4622      	mov	r2, r4
 801f928:	4902      	ldr	r1, [pc, #8]	@ (801f934 <on_full_output_buffer+0x5c>)
 801f92a:	f7f3 fddf 	bl	80134ec <ucdr_set_on_full_buffer_callback>
 801f92e:	2000      	movs	r0, #0
 801f930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f932:	bf00      	nop
 801f934:	0801f8d9 	.word	0x0801f8d9

0801f938 <uxr_init_output_reliable_stream>:
 801f938:	b530      	push	{r4, r5, lr}
 801f93a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801f93e:	8103      	strh	r3, [r0, #8]
 801f940:	7304      	strb	r4, [r0, #12]
 801f942:	e9c0 1200 	strd	r1, r2, [r0]
 801f946:	b1e3      	cbz	r3, 801f982 <uxr_init_output_reliable_stream+0x4a>
 801f948:	600c      	str	r4, [r1, #0]
 801f94a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801f94e:	f1bc 0f01 	cmp.w	ip, #1
 801f952:	d916      	bls.n	801f982 <uxr_init_output_reliable_stream+0x4a>
 801f954:	f04f 0e01 	mov.w	lr, #1
 801f958:	6843      	ldr	r3, [r0, #4]
 801f95a:	f10e 0501 	add.w	r5, lr, #1
 801f95e:	7b04      	ldrb	r4, [r0, #12]
 801f960:	6801      	ldr	r1, [r0, #0]
 801f962:	fbbe f2fc 	udiv	r2, lr, ip
 801f966:	fbb3 f3fc 	udiv	r3, r3, ip
 801f96a:	fb0c e212 	mls	r2, ip, r2, lr
 801f96e:	fa1f fe85 	uxth.w	lr, r5
 801f972:	b292      	uxth	r2, r2
 801f974:	fb02 f303 	mul.w	r3, r2, r3
 801f978:	50cc      	str	r4, [r1, r3]
 801f97a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801f97e:	45f4      	cmp	ip, lr
 801f980:	d8ea      	bhi.n	801f958 <uxr_init_output_reliable_stream+0x20>
 801f982:	4b07      	ldr	r3, [pc, #28]	@ (801f9a0 <uxr_init_output_reliable_stream+0x68>)
 801f984:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f988:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801f98c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801f990:	f8c0 300e 	str.w	r3, [r0, #14]
 801f994:	2300      	movs	r3, #0
 801f996:	8242      	strh	r2, [r0, #18]
 801f998:	8403      	strh	r3, [r0, #32]
 801f99a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801f99e:	bd30      	pop	{r4, r5, pc}
 801f9a0:	ffff0000 	.word	0xffff0000
 801f9a4:	00000000 	.word	0x00000000

0801f9a8 <uxr_reset_output_reliable_stream>:
 801f9a8:	8901      	ldrh	r1, [r0, #8]
 801f9aa:	b510      	push	{r4, lr}
 801f9ac:	b1b1      	cbz	r1, 801f9dc <uxr_reset_output_reliable_stream+0x34>
 801f9ae:	f04f 0e00 	mov.w	lr, #0
 801f9b2:	46f4      	mov	ip, lr
 801f9b4:	6843      	ldr	r3, [r0, #4]
 801f9b6:	f10e 0e01 	add.w	lr, lr, #1
 801f9ba:	7b04      	ldrb	r4, [r0, #12]
 801f9bc:	fbbc f2f1 	udiv	r2, ip, r1
 801f9c0:	fbb3 f3f1 	udiv	r3, r3, r1
 801f9c4:	fb01 c212 	mls	r2, r1, r2, ip
 801f9c8:	fa1f fc8e 	uxth.w	ip, lr
 801f9cc:	b292      	uxth	r2, r2
 801f9ce:	fb02 f303 	mul.w	r3, r2, r3
 801f9d2:	6802      	ldr	r2, [r0, #0]
 801f9d4:	50d4      	str	r4, [r2, r3]
 801f9d6:	8901      	ldrh	r1, [r0, #8]
 801f9d8:	4561      	cmp	r1, ip
 801f9da:	d8eb      	bhi.n	801f9b4 <uxr_reset_output_reliable_stream+0xc>
 801f9dc:	4b08      	ldr	r3, [pc, #32]	@ (801fa00 <uxr_reset_output_reliable_stream+0x58>)
 801f9de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f9e2:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801f9f8 <uxr_reset_output_reliable_stream+0x50>
 801f9e6:	f8c0 300e 	str.w	r3, [r0, #14]
 801f9ea:	2300      	movs	r3, #0
 801f9ec:	8242      	strh	r2, [r0, #18]
 801f9ee:	8403      	strh	r3, [r0, #32]
 801f9f0:	ed80 7b06 	vstr	d7, [r0, #24]
 801f9f4:	bd10      	pop	{r4, pc}
 801f9f6:	bf00      	nop
 801f9f8:	ffffffff 	.word	0xffffffff
 801f9fc:	7fffffff 	.word	0x7fffffff
 801fa00:	ffff0000 	.word	0xffff0000

0801fa04 <uxr_prepare_reliable_buffer_to_write>:
 801fa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa08:	4604      	mov	r4, r0
 801fa0a:	b091      	sub	sp, #68	@ 0x44
 801fa0c:	8900      	ldrh	r0, [r0, #8]
 801fa0e:	468b      	mov	fp, r1
 801fa10:	89e6      	ldrh	r6, [r4, #14]
 801fa12:	9204      	str	r2, [sp, #16]
 801fa14:	6865      	ldr	r5, [r4, #4]
 801fa16:	6823      	ldr	r3, [r4, #0]
 801fa18:	f894 900c 	ldrb.w	r9, [r4, #12]
 801fa1c:	fbb6 f2f0 	udiv	r2, r6, r0
 801fa20:	fbb5 f5f0 	udiv	r5, r5, r0
 801fa24:	fb00 6212 	mls	r2, r0, r2, r6
 801fa28:	1f2f      	subs	r7, r5, #4
 801fa2a:	b292      	uxth	r2, r2
 801fa2c:	fb05 3202 	mla	r2, r5, r2, r3
 801fa30:	1d11      	adds	r1, r2, #4
 801fa32:	f8d2 8000 	ldr.w	r8, [r2]
 801fa36:	9103      	str	r1, [sp, #12]
 801fa38:	2800      	cmp	r0, #0
 801fa3a:	f000 814a 	beq.w	801fcd2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801fa3e:	f04f 0c00 	mov.w	ip, #0
 801fa42:	46e2      	mov	sl, ip
 801fa44:	4661      	mov	r1, ip
 801fa46:	f10c 0c01 	add.w	ip, ip, #1
 801fa4a:	fbb1 f2f0 	udiv	r2, r1, r0
 801fa4e:	fb00 1212 	mls	r2, r0, r2, r1
 801fa52:	fa1f f18c 	uxth.w	r1, ip
 801fa56:	b292      	uxth	r2, r2
 801fa58:	fb05 f202 	mul.w	r2, r5, r2
 801fa5c:	589a      	ldr	r2, [r3, r2]
 801fa5e:	454a      	cmp	r2, r9
 801fa60:	d103      	bne.n	801fa6a <uxr_prepare_reliable_buffer_to_write+0x66>
 801fa62:	f10a 0a01 	add.w	sl, sl, #1
 801fa66:	fa1f fa8a 	uxth.w	sl, sl
 801fa6a:	4281      	cmp	r1, r0
 801fa6c:	d3eb      	bcc.n	801fa46 <uxr_prepare_reliable_buffer_to_write+0x42>
 801fa6e:	4640      	mov	r0, r8
 801fa70:	2104      	movs	r1, #4
 801fa72:	f8cd a014 	str.w	sl, [sp, #20]
 801fa76:	f7f3 fd69 	bl	801354c <ucdr_alignment>
 801fa7a:	4480      	add	r8, r0
 801fa7c:	eb08 020b 	add.w	r2, r8, fp
 801fa80:	42ba      	cmp	r2, r7
 801fa82:	f240 80ca 	bls.w	801fc1a <uxr_prepare_reliable_buffer_to_write+0x216>
 801fa86:	7b22      	ldrb	r2, [r4, #12]
 801fa88:	445a      	add	r2, fp
 801fa8a:	42ba      	cmp	r2, r7
 801fa8c:	f240 80b2 	bls.w	801fbf4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801fa90:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801fa94:	b2bb      	uxth	r3, r7
 801fa96:	eba2 0209 	sub.w	r2, r2, r9
 801fa9a:	441a      	add	r2, r3
 801fa9c:	b292      	uxth	r2, r2
 801fa9e:	fb0a f902 	mul.w	r9, sl, r2
 801faa2:	9205      	str	r2, [sp, #20]
 801faa4:	45d9      	cmp	r9, fp
 801faa6:	9206      	str	r2, [sp, #24]
 801faa8:	f0c0 80b3 	bcc.w	801fc12 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801faac:	f108 0204 	add.w	r2, r8, #4
 801fab0:	42ba      	cmp	r2, r7
 801fab2:	f080 80da 	bcs.w	801fc6a <uxr_prepare_reliable_buffer_to_write+0x266>
 801fab6:	f1a3 0904 	sub.w	r9, r3, #4
 801faba:	9b05      	ldr	r3, [sp, #20]
 801fabc:	eba9 0908 	sub.w	r9, r9, r8
 801fac0:	fa1f f989 	uxth.w	r9, r9
 801fac4:	ebab 0b09 	sub.w	fp, fp, r9
 801fac8:	fbbb f2f3 	udiv	r2, fp, r3
 801facc:	fb03 b312 	mls	r3, r3, r2, fp
 801fad0:	2b00      	cmp	r3, #0
 801fad2:	f040 80c4 	bne.w	801fc5e <uxr_prepare_reliable_buffer_to_write+0x25a>
 801fad6:	b293      	uxth	r3, r2
 801fad8:	4553      	cmp	r3, sl
 801fada:	f200 809a 	bhi.w	801fc12 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801fade:	2b00      	cmp	r3, #0
 801fae0:	f000 80f9 	beq.w	801fcd6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801fae4:	f8cd 801c 	str.w	r8, [sp, #28]
 801fae8:	f04f 0a00 	mov.w	sl, #0
 801faec:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801faf0:	f10d 0b20 	add.w	fp, sp, #32
 801faf4:	9505      	str	r5, [sp, #20]
 801faf6:	461d      	mov	r5, r3
 801faf8:	e000      	b.n	801fafc <uxr_prepare_reliable_buffer_to_write+0xf8>
 801fafa:	46c1      	mov	r9, r8
 801fafc:	8922      	ldrh	r2, [r4, #8]
 801fafe:	4658      	mov	r0, fp
 801fb00:	6863      	ldr	r3, [r4, #4]
 801fb02:	f10a 0a01 	add.w	sl, sl, #1
 801fb06:	fbb6 f1f2 	udiv	r1, r6, r2
 801fb0a:	fbb3 f3f2 	udiv	r3, r3, r2
 801fb0e:	fb02 6111 	mls	r1, r2, r1, r6
 801fb12:	463a      	mov	r2, r7
 801fb14:	b289      	uxth	r1, r1
 801fb16:	fb03 f101 	mul.w	r1, r3, r1
 801fb1a:	6823      	ldr	r3, [r4, #0]
 801fb1c:	3104      	adds	r1, #4
 801fb1e:	4419      	add	r1, r3
 801fb20:	2300      	movs	r3, #0
 801fb22:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801fb26:	f8cd c000 	str.w	ip, [sp]
 801fb2a:	f7f3 fcf9 	bl	8013520 <ucdr_init_buffer_origin_offset>
 801fb2e:	464a      	mov	r2, r9
 801fb30:	2300      	movs	r3, #0
 801fb32:	210d      	movs	r1, #13
 801fb34:	4658      	mov	r0, fp
 801fb36:	f7fd fd17 	bl	801d568 <uxr_buffer_submessage_header>
 801fb3a:	8921      	ldrh	r1, [r4, #8]
 801fb3c:	6863      	ldr	r3, [r4, #4]
 801fb3e:	4630      	mov	r0, r6
 801fb40:	fbb6 f2f1 	udiv	r2, r6, r1
 801fb44:	fbb3 f3f1 	udiv	r3, r3, r1
 801fb48:	fb01 6212 	mls	r2, r1, r2, r6
 801fb4c:	2101      	movs	r1, #1
 801fb4e:	b292      	uxth	r2, r2
 801fb50:	fb02 f303 	mul.w	r3, r2, r3
 801fb54:	6822      	ldr	r2, [r4, #0]
 801fb56:	50d7      	str	r7, [r2, r3]
 801fb58:	f000 f9a4 	bl	801fea4 <uxr_seq_num_add>
 801fb5c:	4606      	mov	r6, r0
 801fb5e:	fa1f f38a 	uxth.w	r3, sl
 801fb62:	429d      	cmp	r5, r3
 801fb64:	d8c9      	bhi.n	801fafa <uxr_prepare_reliable_buffer_to_write+0xf6>
 801fb66:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801fb6a:	9d05      	ldr	r5, [sp, #20]
 801fb6c:	8920      	ldrh	r0, [r4, #8]
 801fb6e:	463a      	mov	r2, r7
 801fb70:	6863      	ldr	r3, [r4, #4]
 801fb72:	fbb6 f1f0 	udiv	r1, r6, r0
 801fb76:	fbb3 f3f0 	udiv	r3, r3, r0
 801fb7a:	fb00 6111 	mls	r1, r0, r1, r6
 801fb7e:	4658      	mov	r0, fp
 801fb80:	b289      	uxth	r1, r1
 801fb82:	fb01 f303 	mul.w	r3, r1, r3
 801fb86:	6821      	ldr	r1, [r4, #0]
 801fb88:	3304      	adds	r3, #4
 801fb8a:	4419      	add	r1, r3
 801fb8c:	2300      	movs	r3, #0
 801fb8e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801fb92:	9700      	str	r7, [sp, #0]
 801fb94:	f7f3 fcc4 	bl	8013520 <ucdr_init_buffer_origin_offset>
 801fb98:	9f06      	ldr	r7, [sp, #24]
 801fb9a:	4658      	mov	r0, fp
 801fb9c:	2302      	movs	r3, #2
 801fb9e:	b2ba      	uxth	r2, r7
 801fba0:	210d      	movs	r1, #13
 801fba2:	f7fd fce1 	bl	801d568 <uxr_buffer_submessage_header>
 801fba6:	f108 0104 	add.w	r1, r8, #4
 801fbaa:	9b03      	ldr	r3, [sp, #12]
 801fbac:	f1a5 0208 	sub.w	r2, r5, #8
 801fbb0:	8925      	ldrh	r5, [r4, #8]
 801fbb2:	440b      	add	r3, r1
 801fbb4:	eba2 0208 	sub.w	r2, r2, r8
 801fbb8:	fbb6 f0f5 	udiv	r0, r6, r5
 801fbbc:	4619      	mov	r1, r3
 801fbbe:	6863      	ldr	r3, [r4, #4]
 801fbc0:	fb05 6010 	mls	r0, r5, r0, r6
 801fbc4:	fbb3 f3f5 	udiv	r3, r3, r5
 801fbc8:	b280      	uxth	r0, r0
 801fbca:	6825      	ldr	r5, [r4, #0]
 801fbcc:	fb00 f303 	mul.w	r3, r0, r3
 801fbd0:	7b20      	ldrb	r0, [r4, #12]
 801fbd2:	3004      	adds	r0, #4
 801fbd4:	4438      	add	r0, r7
 801fbd6:	50e8      	str	r0, [r5, r3]
 801fbd8:	9d04      	ldr	r5, [sp, #16]
 801fbda:	4628      	mov	r0, r5
 801fbdc:	f7f3 fcb2 	bl	8013544 <ucdr_init_buffer>
 801fbe0:	4628      	mov	r0, r5
 801fbe2:	4622      	mov	r2, r4
 801fbe4:	493d      	ldr	r1, [pc, #244]	@ (801fcdc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801fbe6:	f7f3 fc81 	bl	80134ec <ucdr_set_on_full_buffer_callback>
 801fbea:	2001      	movs	r0, #1
 801fbec:	81e6      	strh	r6, [r4, #14]
 801fbee:	b011      	add	sp, #68	@ 0x44
 801fbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbf4:	2101      	movs	r1, #1
 801fbf6:	89e0      	ldrh	r0, [r4, #14]
 801fbf8:	f000 f954 	bl	801fea4 <uxr_seq_num_add>
 801fbfc:	4605      	mov	r5, r0
 801fbfe:	8921      	ldrh	r1, [r4, #8]
 801fc00:	8a60      	ldrh	r0, [r4, #18]
 801fc02:	f000 f94f 	bl	801fea4 <uxr_seq_num_add>
 801fc06:	4601      	mov	r1, r0
 801fc08:	4628      	mov	r0, r5
 801fc0a:	f000 f953 	bl	801feb4 <uxr_seq_num_cmp>
 801fc0e:	2800      	cmp	r0, #0
 801fc10:	dd44      	ble.n	801fc9c <uxr_prepare_reliable_buffer_to_write+0x298>
 801fc12:	2000      	movs	r0, #0
 801fc14:	b011      	add	sp, #68	@ 0x44
 801fc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc1a:	8921      	ldrh	r1, [r4, #8]
 801fc1c:	8a60      	ldrh	r0, [r4, #18]
 801fc1e:	9205      	str	r2, [sp, #20]
 801fc20:	f000 f940 	bl	801fea4 <uxr_seq_num_add>
 801fc24:	4601      	mov	r1, r0
 801fc26:	4630      	mov	r0, r6
 801fc28:	f000 f944 	bl	801feb4 <uxr_seq_num_cmp>
 801fc2c:	2800      	cmp	r0, #0
 801fc2e:	9a05      	ldr	r2, [sp, #20]
 801fc30:	dcef      	bgt.n	801fc12 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801fc32:	8925      	ldrh	r5, [r4, #8]
 801fc34:	e9d4 7300 	ldrd	r7, r3, [r4]
 801fc38:	fbb6 f4f5 	udiv	r4, r6, r5
 801fc3c:	fbb3 f3f5 	udiv	r3, r3, r5
 801fc40:	fb05 6414 	mls	r4, r5, r4, r6
 801fc44:	b2a4      	uxth	r4, r4
 801fc46:	fb04 f303 	mul.w	r3, r4, r3
 801fc4a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801fc4e:	50fa      	str	r2, [r7, r3]
 801fc50:	2300      	movs	r3, #0
 801fc52:	f8cd 8000 	str.w	r8, [sp]
 801fc56:	f7f3 fc63 	bl	8013520 <ucdr_init_buffer_origin_offset>
 801fc5a:	2001      	movs	r0, #1
 801fc5c:	e7da      	b.n	801fc14 <uxr_prepare_reliable_buffer_to_write+0x210>
 801fc5e:	3201      	adds	r2, #1
 801fc60:	9306      	str	r3, [sp, #24]
 801fc62:	b293      	uxth	r3, r2
 801fc64:	4553      	cmp	r3, sl
 801fc66:	d8d4      	bhi.n	801fc12 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801fc68:	e739      	b.n	801fade <uxr_prepare_reliable_buffer_to_write+0xda>
 801fc6a:	4630      	mov	r0, r6
 801fc6c:	2101      	movs	r1, #1
 801fc6e:	9307      	str	r3, [sp, #28]
 801fc70:	f000 f918 	bl	801fea4 <uxr_seq_num_add>
 801fc74:	4606      	mov	r6, r0
 801fc76:	8920      	ldrh	r0, [r4, #8]
 801fc78:	6862      	ldr	r2, [r4, #4]
 801fc7a:	fbb6 f1f0 	udiv	r1, r6, r0
 801fc7e:	fbb2 f2f0 	udiv	r2, r2, r0
 801fc82:	fb00 6111 	mls	r1, r0, r1, r6
 801fc86:	b289      	uxth	r1, r1
 801fc88:	fb01 f202 	mul.w	r2, r1, r2
 801fc8c:	6821      	ldr	r1, [r4, #0]
 801fc8e:	3204      	adds	r2, #4
 801fc90:	188b      	adds	r3, r1, r2
 801fc92:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801fc96:	9303      	str	r3, [sp, #12]
 801fc98:	9b07      	ldr	r3, [sp, #28]
 801fc9a:	e70c      	b.n	801fab6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801fc9c:	8921      	ldrh	r1, [r4, #8]
 801fc9e:	6863      	ldr	r3, [r4, #4]
 801fca0:	9804      	ldr	r0, [sp, #16]
 801fca2:	fbb5 f2f1 	udiv	r2, r5, r1
 801fca6:	fbb3 f3f1 	udiv	r3, r3, r1
 801fcaa:	fb01 5212 	mls	r2, r1, r2, r5
 801fcae:	6821      	ldr	r1, [r4, #0]
 801fcb0:	b292      	uxth	r2, r2
 801fcb2:	fb02 f303 	mul.w	r3, r2, r3
 801fcb6:	7b22      	ldrb	r2, [r4, #12]
 801fcb8:	3304      	adds	r3, #4
 801fcba:	445a      	add	r2, fp
 801fcbc:	4419      	add	r1, r3
 801fcbe:	f841 2c04 	str.w	r2, [r1, #-4]
 801fcc2:	7b23      	ldrb	r3, [r4, #12]
 801fcc4:	9300      	str	r3, [sp, #0]
 801fcc6:	2300      	movs	r3, #0
 801fcc8:	f7f3 fc2a 	bl	8013520 <ucdr_init_buffer_origin_offset>
 801fccc:	2001      	movs	r0, #1
 801fcce:	81e5      	strh	r5, [r4, #14]
 801fcd0:	e7a0      	b.n	801fc14 <uxr_prepare_reliable_buffer_to_write+0x210>
 801fcd2:	4682      	mov	sl, r0
 801fcd4:	e6cb      	b.n	801fa6e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801fcd6:	f10d 0b20 	add.w	fp, sp, #32
 801fcda:	e747      	b.n	801fb6c <uxr_prepare_reliable_buffer_to_write+0x168>
 801fcdc:	0801f8d9 	.word	0x0801f8d9

0801fce0 <uxr_prepare_next_reliable_buffer_to_send>:
 801fce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fce2:	4604      	mov	r4, r0
 801fce4:	461d      	mov	r5, r3
 801fce6:	460f      	mov	r7, r1
 801fce8:	8a00      	ldrh	r0, [r0, #16]
 801fcea:	2101      	movs	r1, #1
 801fcec:	4616      	mov	r6, r2
 801fcee:	f000 f8d9 	bl	801fea4 <uxr_seq_num_add>
 801fcf2:	8028      	strh	r0, [r5, #0]
 801fcf4:	8922      	ldrh	r2, [r4, #8]
 801fcf6:	6863      	ldr	r3, [r4, #4]
 801fcf8:	fbb0 f1f2 	udiv	r1, r0, r2
 801fcfc:	fbb3 f3f2 	udiv	r3, r3, r2
 801fd00:	fb02 0c11 	mls	ip, r2, r1, r0
 801fd04:	89e1      	ldrh	r1, [r4, #14]
 801fd06:	fa1f fc8c 	uxth.w	ip, ip
 801fd0a:	fb0c fc03 	mul.w	ip, ip, r3
 801fd0e:	6823      	ldr	r3, [r4, #0]
 801fd10:	f10c 0c04 	add.w	ip, ip, #4
 801fd14:	4463      	add	r3, ip
 801fd16:	603b      	str	r3, [r7, #0]
 801fd18:	6823      	ldr	r3, [r4, #0]
 801fd1a:	449c      	add	ip, r3
 801fd1c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801fd20:	6033      	str	r3, [r6, #0]
 801fd22:	f000 f8c7 	bl	801feb4 <uxr_seq_num_cmp>
 801fd26:	2800      	cmp	r0, #0
 801fd28:	dd01      	ble.n	801fd2e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801fd2a:	2000      	movs	r0, #0
 801fd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd2e:	7b23      	ldrb	r3, [r4, #12]
 801fd30:	6832      	ldr	r2, [r6, #0]
 801fd32:	429a      	cmp	r2, r3
 801fd34:	d9f9      	bls.n	801fd2a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801fd36:	8a61      	ldrh	r1, [r4, #18]
 801fd38:	8a20      	ldrh	r0, [r4, #16]
 801fd3a:	f000 f8b7 	bl	801feac <uxr_seq_num_sub>
 801fd3e:	8923      	ldrh	r3, [r4, #8]
 801fd40:	4283      	cmp	r3, r0
 801fd42:	d0f2      	beq.n	801fd2a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801fd44:	8828      	ldrh	r0, [r5, #0]
 801fd46:	89e3      	ldrh	r3, [r4, #14]
 801fd48:	8220      	strh	r0, [r4, #16]
 801fd4a:	4298      	cmp	r0, r3
 801fd4c:	d001      	beq.n	801fd52 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801fd4e:	2001      	movs	r0, #1
 801fd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd52:	2101      	movs	r1, #1
 801fd54:	f000 f8a6 	bl	801fea4 <uxr_seq_num_add>
 801fd58:	4603      	mov	r3, r0
 801fd5a:	2001      	movs	r0, #1
 801fd5c:	81e3      	strh	r3, [r4, #14]
 801fd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801fd60 <uxr_update_output_stream_heartbeat_timestamp>:
 801fd60:	b570      	push	{r4, r5, r6, lr}
 801fd62:	8a01      	ldrh	r1, [r0, #16]
 801fd64:	4604      	mov	r4, r0
 801fd66:	8a40      	ldrh	r0, [r0, #18]
 801fd68:	4615      	mov	r5, r2
 801fd6a:	461e      	mov	r6, r3
 801fd6c:	f000 f8a2 	bl	801feb4 <uxr_seq_num_cmp>
 801fd70:	2800      	cmp	r0, #0
 801fd72:	db07      	blt.n	801fd84 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801fd74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801fd78:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801fd7c:	2000      	movs	r0, #0
 801fd7e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801fd82:	bd70      	pop	{r4, r5, r6, pc}
 801fd84:	f894 0020 	ldrb.w	r0, [r4, #32]
 801fd88:	b940      	cbnz	r0, 801fd9c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801fd8a:	2301      	movs	r3, #1
 801fd8c:	f884 3020 	strb.w	r3, [r4, #32]
 801fd90:	3564      	adds	r5, #100	@ 0x64
 801fd92:	f146 0600 	adc.w	r6, r6, #0
 801fd96:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801fd9a:	bd70      	pop	{r4, r5, r6, pc}
 801fd9c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801fda0:	4295      	cmp	r5, r2
 801fda2:	eb76 0303 	sbcs.w	r3, r6, r3
 801fda6:	db04      	blt.n	801fdb2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801fda8:	1c43      	adds	r3, r0, #1
 801fdaa:	2001      	movs	r0, #1
 801fdac:	f884 3020 	strb.w	r3, [r4, #32]
 801fdb0:	e7ee      	b.n	801fd90 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801fdb2:	2000      	movs	r0, #0
 801fdb4:	e7ec      	b.n	801fd90 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801fdb6:	bf00      	nop

0801fdb8 <uxr_begin_output_nack_buffer_it>:
 801fdb8:	8a40      	ldrh	r0, [r0, #18]
 801fdba:	4770      	bx	lr

0801fdbc <uxr_next_reliable_nack_buffer_to_send>:
 801fdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdc0:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801fdc4:	b197      	cbz	r7, 801fdec <uxr_next_reliable_nack_buffer_to_send+0x30>
 801fdc6:	4680      	mov	r8, r0
 801fdc8:	460d      	mov	r5, r1
 801fdca:	4616      	mov	r6, r2
 801fdcc:	461c      	mov	r4, r3
 801fdce:	8818      	ldrh	r0, [r3, #0]
 801fdd0:	2101      	movs	r1, #1
 801fdd2:	f000 f867 	bl	801fea4 <uxr_seq_num_add>
 801fdd6:	8020      	strh	r0, [r4, #0]
 801fdd8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801fddc:	f000 f86a 	bl	801feb4 <uxr_seq_num_cmp>
 801fde0:	2800      	cmp	r0, #0
 801fde2:	dd06      	ble.n	801fdf2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801fde4:	2300      	movs	r3, #0
 801fde6:	461f      	mov	r7, r3
 801fde8:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801fdec:	4638      	mov	r0, r7
 801fdee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fdf2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801fdf6:	8820      	ldrh	r0, [r4, #0]
 801fdf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fdfc:	fbb0 f3f2 	udiv	r3, r0, r2
 801fe00:	fbb1 fcf2 	udiv	ip, r1, r2
 801fe04:	fb02 0313 	mls	r3, r2, r3, r0
 801fe08:	b29b      	uxth	r3, r3
 801fe0a:	fb03 fc0c 	mul.w	ip, r3, ip
 801fe0e:	f8d8 3000 	ldr.w	r3, [r8]
 801fe12:	f10c 0c04 	add.w	ip, ip, #4
 801fe16:	4463      	add	r3, ip
 801fe18:	602b      	str	r3, [r5, #0]
 801fe1a:	f8d8 3000 	ldr.w	r3, [r8]
 801fe1e:	4463      	add	r3, ip
 801fe20:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801fe24:	6033      	str	r3, [r6, #0]
 801fe26:	f898 200c 	ldrb.w	r2, [r8, #12]
 801fe2a:	429a      	cmp	r2, r3
 801fe2c:	d0d0      	beq.n	801fdd0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801fe2e:	e7dd      	b.n	801fdec <uxr_next_reliable_nack_buffer_to_send+0x30>

0801fe30 <uxr_process_acknack>:
 801fe30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe32:	4604      	mov	r4, r0
 801fe34:	460e      	mov	r6, r1
 801fe36:	4610      	mov	r0, r2
 801fe38:	2101      	movs	r1, #1
 801fe3a:	f000 f837 	bl	801feac <uxr_seq_num_sub>
 801fe3e:	8a61      	ldrh	r1, [r4, #18]
 801fe40:	f000 f834 	bl	801feac <uxr_seq_num_sub>
 801fe44:	b1c8      	cbz	r0, 801fe7a <uxr_process_acknack+0x4a>
 801fe46:	4605      	mov	r5, r0
 801fe48:	2700      	movs	r7, #0
 801fe4a:	2101      	movs	r1, #1
 801fe4c:	8a60      	ldrh	r0, [r4, #18]
 801fe4e:	f000 f829 	bl	801fea4 <uxr_seq_num_add>
 801fe52:	8923      	ldrh	r3, [r4, #8]
 801fe54:	6862      	ldr	r2, [r4, #4]
 801fe56:	3701      	adds	r7, #1
 801fe58:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801fe5c:	6821      	ldr	r1, [r4, #0]
 801fe5e:	42bd      	cmp	r5, r7
 801fe60:	8260      	strh	r0, [r4, #18]
 801fe62:	fbb0 fef3 	udiv	lr, r0, r3
 801fe66:	fbb2 f2f3 	udiv	r2, r2, r3
 801fe6a:	fb03 031e 	mls	r3, r3, lr, r0
 801fe6e:	b29b      	uxth	r3, r3
 801fe70:	fb02 f303 	mul.w	r3, r2, r3
 801fe74:	f841 c003 	str.w	ip, [r1, r3]
 801fe78:	d1e7      	bne.n	801fe4a <uxr_process_acknack+0x1a>
 801fe7a:	3e00      	subs	r6, #0
 801fe7c:	f04f 0300 	mov.w	r3, #0
 801fe80:	bf18      	it	ne
 801fe82:	2601      	movne	r6, #1
 801fe84:	f884 3020 	strb.w	r3, [r4, #32]
 801fe88:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801fe8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe8e:	bf00      	nop

0801fe90 <uxr_is_output_up_to_date>:
 801fe90:	8a01      	ldrh	r1, [r0, #16]
 801fe92:	8a40      	ldrh	r0, [r0, #18]
 801fe94:	b508      	push	{r3, lr}
 801fe96:	f000 f80d 	bl	801feb4 <uxr_seq_num_cmp>
 801fe9a:	fab0 f080 	clz	r0, r0
 801fe9e:	0940      	lsrs	r0, r0, #5
 801fea0:	bd08      	pop	{r3, pc}
 801fea2:	bf00      	nop

0801fea4 <uxr_seq_num_add>:
 801fea4:	4408      	add	r0, r1
 801fea6:	b280      	uxth	r0, r0
 801fea8:	4770      	bx	lr
 801feaa:	bf00      	nop

0801feac <uxr_seq_num_sub>:
 801feac:	1a40      	subs	r0, r0, r1
 801feae:	b280      	uxth	r0, r0
 801feb0:	4770      	bx	lr
 801feb2:	bf00      	nop

0801feb4 <uxr_seq_num_cmp>:
 801feb4:	4288      	cmp	r0, r1
 801feb6:	d011      	beq.n	801fedc <uxr_seq_num_cmp+0x28>
 801feb8:	d309      	bcc.n	801fece <uxr_seq_num_cmp+0x1a>
 801feba:	4288      	cmp	r0, r1
 801febc:	d910      	bls.n	801fee0 <uxr_seq_num_cmp+0x2c>
 801febe:	1a40      	subs	r0, r0, r1
 801fec0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801fec4:	bfd4      	ite	le
 801fec6:	2001      	movle	r0, #1
 801fec8:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801fecc:	4770      	bx	lr
 801fece:	1a0b      	subs	r3, r1, r0
 801fed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801fed4:	daf1      	bge.n	801feba <uxr_seq_num_cmp+0x6>
 801fed6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801feda:	4770      	bx	lr
 801fedc:	2000      	movs	r0, #0
 801fede:	4770      	bx	lr
 801fee0:	2001      	movs	r0, #1
 801fee2:	4770      	bx	lr

0801fee4 <calloc>:
 801fee4:	4b02      	ldr	r3, [pc, #8]	@ (801fef0 <calloc+0xc>)
 801fee6:	460a      	mov	r2, r1
 801fee8:	4601      	mov	r1, r0
 801feea:	6818      	ldr	r0, [r3, #0]
 801feec:	f000 b802 	b.w	801fef4 <_calloc_r>
 801fef0:	240013a0 	.word	0x240013a0

0801fef4 <_calloc_r>:
 801fef4:	b570      	push	{r4, r5, r6, lr}
 801fef6:	fba1 5402 	umull	r5, r4, r1, r2
 801fefa:	b93c      	cbnz	r4, 801ff0c <_calloc_r+0x18>
 801fefc:	4629      	mov	r1, r5
 801fefe:	f000 f899 	bl	8020034 <_malloc_r>
 801ff02:	4606      	mov	r6, r0
 801ff04:	b928      	cbnz	r0, 801ff12 <_calloc_r+0x1e>
 801ff06:	2600      	movs	r6, #0
 801ff08:	4630      	mov	r0, r6
 801ff0a:	bd70      	pop	{r4, r5, r6, pc}
 801ff0c:	220c      	movs	r2, #12
 801ff0e:	6002      	str	r2, [r0, #0]
 801ff10:	e7f9      	b.n	801ff06 <_calloc_r+0x12>
 801ff12:	462a      	mov	r2, r5
 801ff14:	4621      	mov	r1, r4
 801ff16:	f000 fcbd 	bl	8020894 <memset>
 801ff1a:	e7f5      	b.n	801ff08 <_calloc_r+0x14>

0801ff1c <exit>:
 801ff1c:	b508      	push	{r3, lr}
 801ff1e:	4b06      	ldr	r3, [pc, #24]	@ (801ff38 <exit+0x1c>)
 801ff20:	4604      	mov	r4, r0
 801ff22:	b113      	cbz	r3, 801ff2a <exit+0xe>
 801ff24:	2100      	movs	r1, #0
 801ff26:	f3af 8000 	nop.w
 801ff2a:	4b04      	ldr	r3, [pc, #16]	@ (801ff3c <exit+0x20>)
 801ff2c:	681b      	ldr	r3, [r3, #0]
 801ff2e:	b103      	cbz	r3, 801ff32 <exit+0x16>
 801ff30:	4798      	blx	r3
 801ff32:	4620      	mov	r0, r4
 801ff34:	f7e2 f88e 	bl	8002054 <_exit>
 801ff38:	00000000 	.word	0x00000000
 801ff3c:	240695d4 	.word	0x240695d4

0801ff40 <getenv>:
 801ff40:	b507      	push	{r0, r1, r2, lr}
 801ff42:	4b04      	ldr	r3, [pc, #16]	@ (801ff54 <getenv+0x14>)
 801ff44:	4601      	mov	r1, r0
 801ff46:	aa01      	add	r2, sp, #4
 801ff48:	6818      	ldr	r0, [r3, #0]
 801ff4a:	f000 f805 	bl	801ff58 <_findenv_r>
 801ff4e:	b003      	add	sp, #12
 801ff50:	f85d fb04 	ldr.w	pc, [sp], #4
 801ff54:	240013a0 	.word	0x240013a0

0801ff58 <_findenv_r>:
 801ff58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff5c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801ffcc <_findenv_r+0x74>
 801ff60:	4606      	mov	r6, r0
 801ff62:	4689      	mov	r9, r1
 801ff64:	4617      	mov	r7, r2
 801ff66:	f000 fde1 	bl	8020b2c <__env_lock>
 801ff6a:	f8da 4000 	ldr.w	r4, [sl]
 801ff6e:	b134      	cbz	r4, 801ff7e <_findenv_r+0x26>
 801ff70:	464b      	mov	r3, r9
 801ff72:	4698      	mov	r8, r3
 801ff74:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ff78:	b13a      	cbz	r2, 801ff8a <_findenv_r+0x32>
 801ff7a:	2a3d      	cmp	r2, #61	@ 0x3d
 801ff7c:	d1f9      	bne.n	801ff72 <_findenv_r+0x1a>
 801ff7e:	4630      	mov	r0, r6
 801ff80:	f000 fdda 	bl	8020b38 <__env_unlock>
 801ff84:	2000      	movs	r0, #0
 801ff86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff8a:	eba8 0809 	sub.w	r8, r8, r9
 801ff8e:	46a3      	mov	fp, r4
 801ff90:	f854 0b04 	ldr.w	r0, [r4], #4
 801ff94:	2800      	cmp	r0, #0
 801ff96:	d0f2      	beq.n	801ff7e <_findenv_r+0x26>
 801ff98:	4642      	mov	r2, r8
 801ff9a:	4649      	mov	r1, r9
 801ff9c:	f000 fc8f 	bl	80208be <strncmp>
 801ffa0:	2800      	cmp	r0, #0
 801ffa2:	d1f4      	bne.n	801ff8e <_findenv_r+0x36>
 801ffa4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ffa8:	eb03 0508 	add.w	r5, r3, r8
 801ffac:	f813 3008 	ldrb.w	r3, [r3, r8]
 801ffb0:	2b3d      	cmp	r3, #61	@ 0x3d
 801ffb2:	d1ec      	bne.n	801ff8e <_findenv_r+0x36>
 801ffb4:	f8da 3000 	ldr.w	r3, [sl]
 801ffb8:	ebab 0303 	sub.w	r3, fp, r3
 801ffbc:	109b      	asrs	r3, r3, #2
 801ffbe:	4630      	mov	r0, r6
 801ffc0:	603b      	str	r3, [r7, #0]
 801ffc2:	f000 fdb9 	bl	8020b38 <__env_unlock>
 801ffc6:	1c68      	adds	r0, r5, #1
 801ffc8:	e7dd      	b.n	801ff86 <_findenv_r+0x2e>
 801ffca:	bf00      	nop
 801ffcc:	24000000 	.word	0x24000000

0801ffd0 <malloc>:
 801ffd0:	4b02      	ldr	r3, [pc, #8]	@ (801ffdc <malloc+0xc>)
 801ffd2:	4601      	mov	r1, r0
 801ffd4:	6818      	ldr	r0, [r3, #0]
 801ffd6:	f000 b82d 	b.w	8020034 <_malloc_r>
 801ffda:	bf00      	nop
 801ffdc:	240013a0 	.word	0x240013a0

0801ffe0 <free>:
 801ffe0:	4b02      	ldr	r3, [pc, #8]	@ (801ffec <free+0xc>)
 801ffe2:	4601      	mov	r1, r0
 801ffe4:	6818      	ldr	r0, [r3, #0]
 801ffe6:	f000 bdad 	b.w	8020b44 <_free_r>
 801ffea:	bf00      	nop
 801ffec:	240013a0 	.word	0x240013a0

0801fff0 <sbrk_aligned>:
 801fff0:	b570      	push	{r4, r5, r6, lr}
 801fff2:	4e0f      	ldr	r6, [pc, #60]	@ (8020030 <sbrk_aligned+0x40>)
 801fff4:	460c      	mov	r4, r1
 801fff6:	6831      	ldr	r1, [r6, #0]
 801fff8:	4605      	mov	r5, r0
 801fffa:	b911      	cbnz	r1, 8020002 <sbrk_aligned+0x12>
 801fffc:	f000 fd12 	bl	8020a24 <_sbrk_r>
 8020000:	6030      	str	r0, [r6, #0]
 8020002:	4621      	mov	r1, r4
 8020004:	4628      	mov	r0, r5
 8020006:	f000 fd0d 	bl	8020a24 <_sbrk_r>
 802000a:	1c43      	adds	r3, r0, #1
 802000c:	d103      	bne.n	8020016 <sbrk_aligned+0x26>
 802000e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8020012:	4620      	mov	r0, r4
 8020014:	bd70      	pop	{r4, r5, r6, pc}
 8020016:	1cc4      	adds	r4, r0, #3
 8020018:	f024 0403 	bic.w	r4, r4, #3
 802001c:	42a0      	cmp	r0, r4
 802001e:	d0f8      	beq.n	8020012 <sbrk_aligned+0x22>
 8020020:	1a21      	subs	r1, r4, r0
 8020022:	4628      	mov	r0, r5
 8020024:	f000 fcfe 	bl	8020a24 <_sbrk_r>
 8020028:	3001      	adds	r0, #1
 802002a:	d1f2      	bne.n	8020012 <sbrk_aligned+0x22>
 802002c:	e7ef      	b.n	802000e <sbrk_aligned+0x1e>
 802002e:	bf00      	nop
 8020030:	24069494 	.word	0x24069494

08020034 <_malloc_r>:
 8020034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020038:	1ccd      	adds	r5, r1, #3
 802003a:	f025 0503 	bic.w	r5, r5, #3
 802003e:	3508      	adds	r5, #8
 8020040:	2d0c      	cmp	r5, #12
 8020042:	bf38      	it	cc
 8020044:	250c      	movcc	r5, #12
 8020046:	2d00      	cmp	r5, #0
 8020048:	4606      	mov	r6, r0
 802004a:	db01      	blt.n	8020050 <_malloc_r+0x1c>
 802004c:	42a9      	cmp	r1, r5
 802004e:	d904      	bls.n	802005a <_malloc_r+0x26>
 8020050:	230c      	movs	r3, #12
 8020052:	6033      	str	r3, [r6, #0]
 8020054:	2000      	movs	r0, #0
 8020056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802005a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8020130 <_malloc_r+0xfc>
 802005e:	f000 f869 	bl	8020134 <__malloc_lock>
 8020062:	f8d8 3000 	ldr.w	r3, [r8]
 8020066:	461c      	mov	r4, r3
 8020068:	bb44      	cbnz	r4, 80200bc <_malloc_r+0x88>
 802006a:	4629      	mov	r1, r5
 802006c:	4630      	mov	r0, r6
 802006e:	f7ff ffbf 	bl	801fff0 <sbrk_aligned>
 8020072:	1c43      	adds	r3, r0, #1
 8020074:	4604      	mov	r4, r0
 8020076:	d158      	bne.n	802012a <_malloc_r+0xf6>
 8020078:	f8d8 4000 	ldr.w	r4, [r8]
 802007c:	4627      	mov	r7, r4
 802007e:	2f00      	cmp	r7, #0
 8020080:	d143      	bne.n	802010a <_malloc_r+0xd6>
 8020082:	2c00      	cmp	r4, #0
 8020084:	d04b      	beq.n	802011e <_malloc_r+0xea>
 8020086:	6823      	ldr	r3, [r4, #0]
 8020088:	4639      	mov	r1, r7
 802008a:	4630      	mov	r0, r6
 802008c:	eb04 0903 	add.w	r9, r4, r3
 8020090:	f000 fcc8 	bl	8020a24 <_sbrk_r>
 8020094:	4581      	cmp	r9, r0
 8020096:	d142      	bne.n	802011e <_malloc_r+0xea>
 8020098:	6821      	ldr	r1, [r4, #0]
 802009a:	1a6d      	subs	r5, r5, r1
 802009c:	4629      	mov	r1, r5
 802009e:	4630      	mov	r0, r6
 80200a0:	f7ff ffa6 	bl	801fff0 <sbrk_aligned>
 80200a4:	3001      	adds	r0, #1
 80200a6:	d03a      	beq.n	802011e <_malloc_r+0xea>
 80200a8:	6823      	ldr	r3, [r4, #0]
 80200aa:	442b      	add	r3, r5
 80200ac:	6023      	str	r3, [r4, #0]
 80200ae:	f8d8 3000 	ldr.w	r3, [r8]
 80200b2:	685a      	ldr	r2, [r3, #4]
 80200b4:	bb62      	cbnz	r2, 8020110 <_malloc_r+0xdc>
 80200b6:	f8c8 7000 	str.w	r7, [r8]
 80200ba:	e00f      	b.n	80200dc <_malloc_r+0xa8>
 80200bc:	6822      	ldr	r2, [r4, #0]
 80200be:	1b52      	subs	r2, r2, r5
 80200c0:	d420      	bmi.n	8020104 <_malloc_r+0xd0>
 80200c2:	2a0b      	cmp	r2, #11
 80200c4:	d917      	bls.n	80200f6 <_malloc_r+0xc2>
 80200c6:	1961      	adds	r1, r4, r5
 80200c8:	42a3      	cmp	r3, r4
 80200ca:	6025      	str	r5, [r4, #0]
 80200cc:	bf18      	it	ne
 80200ce:	6059      	strne	r1, [r3, #4]
 80200d0:	6863      	ldr	r3, [r4, #4]
 80200d2:	bf08      	it	eq
 80200d4:	f8c8 1000 	streq.w	r1, [r8]
 80200d8:	5162      	str	r2, [r4, r5]
 80200da:	604b      	str	r3, [r1, #4]
 80200dc:	4630      	mov	r0, r6
 80200de:	f000 f82f 	bl	8020140 <__malloc_unlock>
 80200e2:	f104 000b 	add.w	r0, r4, #11
 80200e6:	1d23      	adds	r3, r4, #4
 80200e8:	f020 0007 	bic.w	r0, r0, #7
 80200ec:	1ac2      	subs	r2, r0, r3
 80200ee:	bf1c      	itt	ne
 80200f0:	1a1b      	subne	r3, r3, r0
 80200f2:	50a3      	strne	r3, [r4, r2]
 80200f4:	e7af      	b.n	8020056 <_malloc_r+0x22>
 80200f6:	6862      	ldr	r2, [r4, #4]
 80200f8:	42a3      	cmp	r3, r4
 80200fa:	bf0c      	ite	eq
 80200fc:	f8c8 2000 	streq.w	r2, [r8]
 8020100:	605a      	strne	r2, [r3, #4]
 8020102:	e7eb      	b.n	80200dc <_malloc_r+0xa8>
 8020104:	4623      	mov	r3, r4
 8020106:	6864      	ldr	r4, [r4, #4]
 8020108:	e7ae      	b.n	8020068 <_malloc_r+0x34>
 802010a:	463c      	mov	r4, r7
 802010c:	687f      	ldr	r7, [r7, #4]
 802010e:	e7b6      	b.n	802007e <_malloc_r+0x4a>
 8020110:	461a      	mov	r2, r3
 8020112:	685b      	ldr	r3, [r3, #4]
 8020114:	42a3      	cmp	r3, r4
 8020116:	d1fb      	bne.n	8020110 <_malloc_r+0xdc>
 8020118:	2300      	movs	r3, #0
 802011a:	6053      	str	r3, [r2, #4]
 802011c:	e7de      	b.n	80200dc <_malloc_r+0xa8>
 802011e:	230c      	movs	r3, #12
 8020120:	6033      	str	r3, [r6, #0]
 8020122:	4630      	mov	r0, r6
 8020124:	f000 f80c 	bl	8020140 <__malloc_unlock>
 8020128:	e794      	b.n	8020054 <_malloc_r+0x20>
 802012a:	6005      	str	r5, [r0, #0]
 802012c:	e7d6      	b.n	80200dc <_malloc_r+0xa8>
 802012e:	bf00      	nop
 8020130:	24069498 	.word	0x24069498

08020134 <__malloc_lock>:
 8020134:	4801      	ldr	r0, [pc, #4]	@ (802013c <__malloc_lock+0x8>)
 8020136:	f000 bcc2 	b.w	8020abe <__retarget_lock_acquire_recursive>
 802013a:	bf00      	nop
 802013c:	240695dd 	.word	0x240695dd

08020140 <__malloc_unlock>:
 8020140:	4801      	ldr	r0, [pc, #4]	@ (8020148 <__malloc_unlock+0x8>)
 8020142:	f000 bcbd 	b.w	8020ac0 <__retarget_lock_release_recursive>
 8020146:	bf00      	nop
 8020148:	240695dd 	.word	0x240695dd

0802014c <srand>:
 802014c:	b538      	push	{r3, r4, r5, lr}
 802014e:	4b10      	ldr	r3, [pc, #64]	@ (8020190 <srand+0x44>)
 8020150:	681d      	ldr	r5, [r3, #0]
 8020152:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8020154:	4604      	mov	r4, r0
 8020156:	b9b3      	cbnz	r3, 8020186 <srand+0x3a>
 8020158:	2018      	movs	r0, #24
 802015a:	f7ff ff39 	bl	801ffd0 <malloc>
 802015e:	4602      	mov	r2, r0
 8020160:	6328      	str	r0, [r5, #48]	@ 0x30
 8020162:	b920      	cbnz	r0, 802016e <srand+0x22>
 8020164:	4b0b      	ldr	r3, [pc, #44]	@ (8020194 <srand+0x48>)
 8020166:	480c      	ldr	r0, [pc, #48]	@ (8020198 <srand+0x4c>)
 8020168:	2146      	movs	r1, #70	@ 0x46
 802016a:	f000 fcc1 	bl	8020af0 <__assert_func>
 802016e:	490b      	ldr	r1, [pc, #44]	@ (802019c <srand+0x50>)
 8020170:	4b0b      	ldr	r3, [pc, #44]	@ (80201a0 <srand+0x54>)
 8020172:	e9c0 1300 	strd	r1, r3, [r0]
 8020176:	4b0b      	ldr	r3, [pc, #44]	@ (80201a4 <srand+0x58>)
 8020178:	6083      	str	r3, [r0, #8]
 802017a:	230b      	movs	r3, #11
 802017c:	8183      	strh	r3, [r0, #12]
 802017e:	2100      	movs	r1, #0
 8020180:	2001      	movs	r0, #1
 8020182:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020186:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8020188:	2200      	movs	r2, #0
 802018a:	611c      	str	r4, [r3, #16]
 802018c:	615a      	str	r2, [r3, #20]
 802018e:	bd38      	pop	{r3, r4, r5, pc}
 8020190:	240013a0 	.word	0x240013a0
 8020194:	08023e96 	.word	0x08023e96
 8020198:	08023ead 	.word	0x08023ead
 802019c:	abcd330e 	.word	0xabcd330e
 80201a0:	e66d1234 	.word	0xe66d1234
 80201a4:	0005deec 	.word	0x0005deec

080201a8 <rand>:
 80201a8:	4b16      	ldr	r3, [pc, #88]	@ (8020204 <rand+0x5c>)
 80201aa:	b510      	push	{r4, lr}
 80201ac:	681c      	ldr	r4, [r3, #0]
 80201ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80201b0:	b9b3      	cbnz	r3, 80201e0 <rand+0x38>
 80201b2:	2018      	movs	r0, #24
 80201b4:	f7ff ff0c 	bl	801ffd0 <malloc>
 80201b8:	4602      	mov	r2, r0
 80201ba:	6320      	str	r0, [r4, #48]	@ 0x30
 80201bc:	b920      	cbnz	r0, 80201c8 <rand+0x20>
 80201be:	4b12      	ldr	r3, [pc, #72]	@ (8020208 <rand+0x60>)
 80201c0:	4812      	ldr	r0, [pc, #72]	@ (802020c <rand+0x64>)
 80201c2:	2152      	movs	r1, #82	@ 0x52
 80201c4:	f000 fc94 	bl	8020af0 <__assert_func>
 80201c8:	4911      	ldr	r1, [pc, #68]	@ (8020210 <rand+0x68>)
 80201ca:	4b12      	ldr	r3, [pc, #72]	@ (8020214 <rand+0x6c>)
 80201cc:	e9c0 1300 	strd	r1, r3, [r0]
 80201d0:	4b11      	ldr	r3, [pc, #68]	@ (8020218 <rand+0x70>)
 80201d2:	6083      	str	r3, [r0, #8]
 80201d4:	230b      	movs	r3, #11
 80201d6:	8183      	strh	r3, [r0, #12]
 80201d8:	2100      	movs	r1, #0
 80201da:	2001      	movs	r0, #1
 80201dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80201e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80201e2:	480e      	ldr	r0, [pc, #56]	@ (802021c <rand+0x74>)
 80201e4:	690b      	ldr	r3, [r1, #16]
 80201e6:	694c      	ldr	r4, [r1, #20]
 80201e8:	4a0d      	ldr	r2, [pc, #52]	@ (8020220 <rand+0x78>)
 80201ea:	4358      	muls	r0, r3
 80201ec:	fb02 0004 	mla	r0, r2, r4, r0
 80201f0:	fba3 3202 	umull	r3, r2, r3, r2
 80201f4:	3301      	adds	r3, #1
 80201f6:	eb40 0002 	adc.w	r0, r0, r2
 80201fa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80201fe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8020202:	bd10      	pop	{r4, pc}
 8020204:	240013a0 	.word	0x240013a0
 8020208:	08023e96 	.word	0x08023e96
 802020c:	08023ead 	.word	0x08023ead
 8020210:	abcd330e 	.word	0xabcd330e
 8020214:	e66d1234 	.word	0xe66d1234
 8020218:	0005deec 	.word	0x0005deec
 802021c:	5851f42d 	.word	0x5851f42d
 8020220:	4c957f2d 	.word	0x4c957f2d

08020224 <realloc>:
 8020224:	4b02      	ldr	r3, [pc, #8]	@ (8020230 <realloc+0xc>)
 8020226:	460a      	mov	r2, r1
 8020228:	4601      	mov	r1, r0
 802022a:	6818      	ldr	r0, [r3, #0]
 802022c:	f000 b802 	b.w	8020234 <_realloc_r>
 8020230:	240013a0 	.word	0x240013a0

08020234 <_realloc_r>:
 8020234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020238:	4680      	mov	r8, r0
 802023a:	4615      	mov	r5, r2
 802023c:	460c      	mov	r4, r1
 802023e:	b921      	cbnz	r1, 802024a <_realloc_r+0x16>
 8020240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020244:	4611      	mov	r1, r2
 8020246:	f7ff bef5 	b.w	8020034 <_malloc_r>
 802024a:	b92a      	cbnz	r2, 8020258 <_realloc_r+0x24>
 802024c:	f000 fc7a 	bl	8020b44 <_free_r>
 8020250:	2400      	movs	r4, #0
 8020252:	4620      	mov	r0, r4
 8020254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020258:	f000 fcbe 	bl	8020bd8 <_malloc_usable_size_r>
 802025c:	4285      	cmp	r5, r0
 802025e:	4606      	mov	r6, r0
 8020260:	d802      	bhi.n	8020268 <_realloc_r+0x34>
 8020262:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8020266:	d8f4      	bhi.n	8020252 <_realloc_r+0x1e>
 8020268:	4629      	mov	r1, r5
 802026a:	4640      	mov	r0, r8
 802026c:	f7ff fee2 	bl	8020034 <_malloc_r>
 8020270:	4607      	mov	r7, r0
 8020272:	2800      	cmp	r0, #0
 8020274:	d0ec      	beq.n	8020250 <_realloc_r+0x1c>
 8020276:	42b5      	cmp	r5, r6
 8020278:	462a      	mov	r2, r5
 802027a:	4621      	mov	r1, r4
 802027c:	bf28      	it	cs
 802027e:	4632      	movcs	r2, r6
 8020280:	f000 fc27 	bl	8020ad2 <memcpy>
 8020284:	4621      	mov	r1, r4
 8020286:	4640      	mov	r0, r8
 8020288:	f000 fc5c 	bl	8020b44 <_free_r>
 802028c:	463c      	mov	r4, r7
 802028e:	e7e0      	b.n	8020252 <_realloc_r+0x1e>

08020290 <_strtoul_l.constprop.0>:
 8020290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020294:	4e34      	ldr	r6, [pc, #208]	@ (8020368 <_strtoul_l.constprop.0+0xd8>)
 8020296:	4686      	mov	lr, r0
 8020298:	460d      	mov	r5, r1
 802029a:	4628      	mov	r0, r5
 802029c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80202a0:	5d37      	ldrb	r7, [r6, r4]
 80202a2:	f017 0708 	ands.w	r7, r7, #8
 80202a6:	d1f8      	bne.n	802029a <_strtoul_l.constprop.0+0xa>
 80202a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80202aa:	d12f      	bne.n	802030c <_strtoul_l.constprop.0+0x7c>
 80202ac:	782c      	ldrb	r4, [r5, #0]
 80202ae:	2701      	movs	r7, #1
 80202b0:	1c85      	adds	r5, r0, #2
 80202b2:	f033 0010 	bics.w	r0, r3, #16
 80202b6:	d109      	bne.n	80202cc <_strtoul_l.constprop.0+0x3c>
 80202b8:	2c30      	cmp	r4, #48	@ 0x30
 80202ba:	d12c      	bne.n	8020316 <_strtoul_l.constprop.0+0x86>
 80202bc:	7828      	ldrb	r0, [r5, #0]
 80202be:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80202c2:	2858      	cmp	r0, #88	@ 0x58
 80202c4:	d127      	bne.n	8020316 <_strtoul_l.constprop.0+0x86>
 80202c6:	786c      	ldrb	r4, [r5, #1]
 80202c8:	2310      	movs	r3, #16
 80202ca:	3502      	adds	r5, #2
 80202cc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80202d0:	2600      	movs	r6, #0
 80202d2:	fbb8 f8f3 	udiv	r8, r8, r3
 80202d6:	fb03 f908 	mul.w	r9, r3, r8
 80202da:	ea6f 0909 	mvn.w	r9, r9
 80202de:	4630      	mov	r0, r6
 80202e0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80202e4:	f1bc 0f09 	cmp.w	ip, #9
 80202e8:	d81c      	bhi.n	8020324 <_strtoul_l.constprop.0+0x94>
 80202ea:	4664      	mov	r4, ip
 80202ec:	42a3      	cmp	r3, r4
 80202ee:	dd2a      	ble.n	8020346 <_strtoul_l.constprop.0+0xb6>
 80202f0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80202f4:	d007      	beq.n	8020306 <_strtoul_l.constprop.0+0x76>
 80202f6:	4580      	cmp	r8, r0
 80202f8:	d322      	bcc.n	8020340 <_strtoul_l.constprop.0+0xb0>
 80202fa:	d101      	bne.n	8020300 <_strtoul_l.constprop.0+0x70>
 80202fc:	45a1      	cmp	r9, r4
 80202fe:	db1f      	blt.n	8020340 <_strtoul_l.constprop.0+0xb0>
 8020300:	fb00 4003 	mla	r0, r0, r3, r4
 8020304:	2601      	movs	r6, #1
 8020306:	f815 4b01 	ldrb.w	r4, [r5], #1
 802030a:	e7e9      	b.n	80202e0 <_strtoul_l.constprop.0+0x50>
 802030c:	2c2b      	cmp	r4, #43	@ 0x2b
 802030e:	bf04      	itt	eq
 8020310:	782c      	ldrbeq	r4, [r5, #0]
 8020312:	1c85      	addeq	r5, r0, #2
 8020314:	e7cd      	b.n	80202b2 <_strtoul_l.constprop.0+0x22>
 8020316:	2b00      	cmp	r3, #0
 8020318:	d1d8      	bne.n	80202cc <_strtoul_l.constprop.0+0x3c>
 802031a:	2c30      	cmp	r4, #48	@ 0x30
 802031c:	bf0c      	ite	eq
 802031e:	2308      	moveq	r3, #8
 8020320:	230a      	movne	r3, #10
 8020322:	e7d3      	b.n	80202cc <_strtoul_l.constprop.0+0x3c>
 8020324:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8020328:	f1bc 0f19 	cmp.w	ip, #25
 802032c:	d801      	bhi.n	8020332 <_strtoul_l.constprop.0+0xa2>
 802032e:	3c37      	subs	r4, #55	@ 0x37
 8020330:	e7dc      	b.n	80202ec <_strtoul_l.constprop.0+0x5c>
 8020332:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8020336:	f1bc 0f19 	cmp.w	ip, #25
 802033a:	d804      	bhi.n	8020346 <_strtoul_l.constprop.0+0xb6>
 802033c:	3c57      	subs	r4, #87	@ 0x57
 802033e:	e7d5      	b.n	80202ec <_strtoul_l.constprop.0+0x5c>
 8020340:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8020344:	e7df      	b.n	8020306 <_strtoul_l.constprop.0+0x76>
 8020346:	1c73      	adds	r3, r6, #1
 8020348:	d106      	bne.n	8020358 <_strtoul_l.constprop.0+0xc8>
 802034a:	2322      	movs	r3, #34	@ 0x22
 802034c:	f8ce 3000 	str.w	r3, [lr]
 8020350:	4630      	mov	r0, r6
 8020352:	b932      	cbnz	r2, 8020362 <_strtoul_l.constprop.0+0xd2>
 8020354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020358:	b107      	cbz	r7, 802035c <_strtoul_l.constprop.0+0xcc>
 802035a:	4240      	negs	r0, r0
 802035c:	2a00      	cmp	r2, #0
 802035e:	d0f9      	beq.n	8020354 <_strtoul_l.constprop.0+0xc4>
 8020360:	b106      	cbz	r6, 8020364 <_strtoul_l.constprop.0+0xd4>
 8020362:	1e69      	subs	r1, r5, #1
 8020364:	6011      	str	r1, [r2, #0]
 8020366:	e7f5      	b.n	8020354 <_strtoul_l.constprop.0+0xc4>
 8020368:	08023f06 	.word	0x08023f06

0802036c <strtoul>:
 802036c:	4613      	mov	r3, r2
 802036e:	460a      	mov	r2, r1
 8020370:	4601      	mov	r1, r0
 8020372:	4802      	ldr	r0, [pc, #8]	@ (802037c <strtoul+0x10>)
 8020374:	6800      	ldr	r0, [r0, #0]
 8020376:	f7ff bf8b 	b.w	8020290 <_strtoul_l.constprop.0>
 802037a:	bf00      	nop
 802037c:	240013a0 	.word	0x240013a0

08020380 <std>:
 8020380:	2300      	movs	r3, #0
 8020382:	b510      	push	{r4, lr}
 8020384:	4604      	mov	r4, r0
 8020386:	e9c0 3300 	strd	r3, r3, [r0]
 802038a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802038e:	6083      	str	r3, [r0, #8]
 8020390:	8181      	strh	r1, [r0, #12]
 8020392:	6643      	str	r3, [r0, #100]	@ 0x64
 8020394:	81c2      	strh	r2, [r0, #14]
 8020396:	6183      	str	r3, [r0, #24]
 8020398:	4619      	mov	r1, r3
 802039a:	2208      	movs	r2, #8
 802039c:	305c      	adds	r0, #92	@ 0x5c
 802039e:	f000 fa79 	bl	8020894 <memset>
 80203a2:	4b0d      	ldr	r3, [pc, #52]	@ (80203d8 <std+0x58>)
 80203a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80203a6:	4b0d      	ldr	r3, [pc, #52]	@ (80203dc <std+0x5c>)
 80203a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80203aa:	4b0d      	ldr	r3, [pc, #52]	@ (80203e0 <std+0x60>)
 80203ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80203ae:	4b0d      	ldr	r3, [pc, #52]	@ (80203e4 <std+0x64>)
 80203b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80203b2:	4b0d      	ldr	r3, [pc, #52]	@ (80203e8 <std+0x68>)
 80203b4:	6224      	str	r4, [r4, #32]
 80203b6:	429c      	cmp	r4, r3
 80203b8:	d006      	beq.n	80203c8 <std+0x48>
 80203ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80203be:	4294      	cmp	r4, r2
 80203c0:	d002      	beq.n	80203c8 <std+0x48>
 80203c2:	33d0      	adds	r3, #208	@ 0xd0
 80203c4:	429c      	cmp	r4, r3
 80203c6:	d105      	bne.n	80203d4 <std+0x54>
 80203c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80203cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203d0:	f000 bb74 	b.w	8020abc <__retarget_lock_init_recursive>
 80203d4:	bd10      	pop	{r4, pc}
 80203d6:	bf00      	nop
 80203d8:	08020621 	.word	0x08020621
 80203dc:	08020643 	.word	0x08020643
 80203e0:	0802067b 	.word	0x0802067b
 80203e4:	0802069f 	.word	0x0802069f
 80203e8:	2406949c 	.word	0x2406949c

080203ec <stdio_exit_handler>:
 80203ec:	4a02      	ldr	r2, [pc, #8]	@ (80203f8 <stdio_exit_handler+0xc>)
 80203ee:	4903      	ldr	r1, [pc, #12]	@ (80203fc <stdio_exit_handler+0x10>)
 80203f0:	4803      	ldr	r0, [pc, #12]	@ (8020400 <stdio_exit_handler+0x14>)
 80203f2:	f000 b869 	b.w	80204c8 <_fwalk_sglue>
 80203f6:	bf00      	nop
 80203f8:	24001394 	.word	0x24001394
 80203fc:	080212bd 	.word	0x080212bd
 8020400:	240013a4 	.word	0x240013a4

08020404 <cleanup_stdio>:
 8020404:	6841      	ldr	r1, [r0, #4]
 8020406:	4b0c      	ldr	r3, [pc, #48]	@ (8020438 <cleanup_stdio+0x34>)
 8020408:	4299      	cmp	r1, r3
 802040a:	b510      	push	{r4, lr}
 802040c:	4604      	mov	r4, r0
 802040e:	d001      	beq.n	8020414 <cleanup_stdio+0x10>
 8020410:	f000 ff54 	bl	80212bc <_fflush_r>
 8020414:	68a1      	ldr	r1, [r4, #8]
 8020416:	4b09      	ldr	r3, [pc, #36]	@ (802043c <cleanup_stdio+0x38>)
 8020418:	4299      	cmp	r1, r3
 802041a:	d002      	beq.n	8020422 <cleanup_stdio+0x1e>
 802041c:	4620      	mov	r0, r4
 802041e:	f000 ff4d 	bl	80212bc <_fflush_r>
 8020422:	68e1      	ldr	r1, [r4, #12]
 8020424:	4b06      	ldr	r3, [pc, #24]	@ (8020440 <cleanup_stdio+0x3c>)
 8020426:	4299      	cmp	r1, r3
 8020428:	d004      	beq.n	8020434 <cleanup_stdio+0x30>
 802042a:	4620      	mov	r0, r4
 802042c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020430:	f000 bf44 	b.w	80212bc <_fflush_r>
 8020434:	bd10      	pop	{r4, pc}
 8020436:	bf00      	nop
 8020438:	2406949c 	.word	0x2406949c
 802043c:	24069504 	.word	0x24069504
 8020440:	2406956c 	.word	0x2406956c

08020444 <global_stdio_init.part.0>:
 8020444:	b510      	push	{r4, lr}
 8020446:	4b0b      	ldr	r3, [pc, #44]	@ (8020474 <global_stdio_init.part.0+0x30>)
 8020448:	4c0b      	ldr	r4, [pc, #44]	@ (8020478 <global_stdio_init.part.0+0x34>)
 802044a:	4a0c      	ldr	r2, [pc, #48]	@ (802047c <global_stdio_init.part.0+0x38>)
 802044c:	601a      	str	r2, [r3, #0]
 802044e:	4620      	mov	r0, r4
 8020450:	2200      	movs	r2, #0
 8020452:	2104      	movs	r1, #4
 8020454:	f7ff ff94 	bl	8020380 <std>
 8020458:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802045c:	2201      	movs	r2, #1
 802045e:	2109      	movs	r1, #9
 8020460:	f7ff ff8e 	bl	8020380 <std>
 8020464:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020468:	2202      	movs	r2, #2
 802046a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802046e:	2112      	movs	r1, #18
 8020470:	f7ff bf86 	b.w	8020380 <std>
 8020474:	240695d4 	.word	0x240695d4
 8020478:	2406949c 	.word	0x2406949c
 802047c:	080203ed 	.word	0x080203ed

08020480 <__sfp_lock_acquire>:
 8020480:	4801      	ldr	r0, [pc, #4]	@ (8020488 <__sfp_lock_acquire+0x8>)
 8020482:	f000 bb1c 	b.w	8020abe <__retarget_lock_acquire_recursive>
 8020486:	bf00      	nop
 8020488:	240695de 	.word	0x240695de

0802048c <__sfp_lock_release>:
 802048c:	4801      	ldr	r0, [pc, #4]	@ (8020494 <__sfp_lock_release+0x8>)
 802048e:	f000 bb17 	b.w	8020ac0 <__retarget_lock_release_recursive>
 8020492:	bf00      	nop
 8020494:	240695de 	.word	0x240695de

08020498 <__sinit>:
 8020498:	b510      	push	{r4, lr}
 802049a:	4604      	mov	r4, r0
 802049c:	f7ff fff0 	bl	8020480 <__sfp_lock_acquire>
 80204a0:	6a23      	ldr	r3, [r4, #32]
 80204a2:	b11b      	cbz	r3, 80204ac <__sinit+0x14>
 80204a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204a8:	f7ff bff0 	b.w	802048c <__sfp_lock_release>
 80204ac:	4b04      	ldr	r3, [pc, #16]	@ (80204c0 <__sinit+0x28>)
 80204ae:	6223      	str	r3, [r4, #32]
 80204b0:	4b04      	ldr	r3, [pc, #16]	@ (80204c4 <__sinit+0x2c>)
 80204b2:	681b      	ldr	r3, [r3, #0]
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	d1f5      	bne.n	80204a4 <__sinit+0xc>
 80204b8:	f7ff ffc4 	bl	8020444 <global_stdio_init.part.0>
 80204bc:	e7f2      	b.n	80204a4 <__sinit+0xc>
 80204be:	bf00      	nop
 80204c0:	08020405 	.word	0x08020405
 80204c4:	240695d4 	.word	0x240695d4

080204c8 <_fwalk_sglue>:
 80204c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204cc:	4607      	mov	r7, r0
 80204ce:	4688      	mov	r8, r1
 80204d0:	4614      	mov	r4, r2
 80204d2:	2600      	movs	r6, #0
 80204d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80204d8:	f1b9 0901 	subs.w	r9, r9, #1
 80204dc:	d505      	bpl.n	80204ea <_fwalk_sglue+0x22>
 80204de:	6824      	ldr	r4, [r4, #0]
 80204e0:	2c00      	cmp	r4, #0
 80204e2:	d1f7      	bne.n	80204d4 <_fwalk_sglue+0xc>
 80204e4:	4630      	mov	r0, r6
 80204e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80204ea:	89ab      	ldrh	r3, [r5, #12]
 80204ec:	2b01      	cmp	r3, #1
 80204ee:	d907      	bls.n	8020500 <_fwalk_sglue+0x38>
 80204f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80204f4:	3301      	adds	r3, #1
 80204f6:	d003      	beq.n	8020500 <_fwalk_sglue+0x38>
 80204f8:	4629      	mov	r1, r5
 80204fa:	4638      	mov	r0, r7
 80204fc:	47c0      	blx	r8
 80204fe:	4306      	orrs	r6, r0
 8020500:	3568      	adds	r5, #104	@ 0x68
 8020502:	e7e9      	b.n	80204d8 <_fwalk_sglue+0x10>

08020504 <_fwrite_r>:
 8020504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020508:	9c08      	ldr	r4, [sp, #32]
 802050a:	468a      	mov	sl, r1
 802050c:	4690      	mov	r8, r2
 802050e:	fb02 f903 	mul.w	r9, r2, r3
 8020512:	4606      	mov	r6, r0
 8020514:	b118      	cbz	r0, 802051e <_fwrite_r+0x1a>
 8020516:	6a03      	ldr	r3, [r0, #32]
 8020518:	b90b      	cbnz	r3, 802051e <_fwrite_r+0x1a>
 802051a:	f7ff ffbd 	bl	8020498 <__sinit>
 802051e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020520:	07dd      	lsls	r5, r3, #31
 8020522:	d405      	bmi.n	8020530 <_fwrite_r+0x2c>
 8020524:	89a3      	ldrh	r3, [r4, #12]
 8020526:	0598      	lsls	r0, r3, #22
 8020528:	d402      	bmi.n	8020530 <_fwrite_r+0x2c>
 802052a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802052c:	f000 fac7 	bl	8020abe <__retarget_lock_acquire_recursive>
 8020530:	89a3      	ldrh	r3, [r4, #12]
 8020532:	0719      	lsls	r1, r3, #28
 8020534:	d516      	bpl.n	8020564 <_fwrite_r+0x60>
 8020536:	6923      	ldr	r3, [r4, #16]
 8020538:	b1a3      	cbz	r3, 8020564 <_fwrite_r+0x60>
 802053a:	2500      	movs	r5, #0
 802053c:	454d      	cmp	r5, r9
 802053e:	d01f      	beq.n	8020580 <_fwrite_r+0x7c>
 8020540:	68a7      	ldr	r7, [r4, #8]
 8020542:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8020546:	3f01      	subs	r7, #1
 8020548:	2f00      	cmp	r7, #0
 802054a:	60a7      	str	r7, [r4, #8]
 802054c:	da04      	bge.n	8020558 <_fwrite_r+0x54>
 802054e:	69a3      	ldr	r3, [r4, #24]
 8020550:	429f      	cmp	r7, r3
 8020552:	db0f      	blt.n	8020574 <_fwrite_r+0x70>
 8020554:	290a      	cmp	r1, #10
 8020556:	d00d      	beq.n	8020574 <_fwrite_r+0x70>
 8020558:	6823      	ldr	r3, [r4, #0]
 802055a:	1c5a      	adds	r2, r3, #1
 802055c:	6022      	str	r2, [r4, #0]
 802055e:	7019      	strb	r1, [r3, #0]
 8020560:	3501      	adds	r5, #1
 8020562:	e7eb      	b.n	802053c <_fwrite_r+0x38>
 8020564:	4621      	mov	r1, r4
 8020566:	4630      	mov	r0, r6
 8020568:	f000 f914 	bl	8020794 <__swsetup_r>
 802056c:	2800      	cmp	r0, #0
 802056e:	d0e4      	beq.n	802053a <_fwrite_r+0x36>
 8020570:	2500      	movs	r5, #0
 8020572:	e005      	b.n	8020580 <_fwrite_r+0x7c>
 8020574:	4622      	mov	r2, r4
 8020576:	4630      	mov	r0, r6
 8020578:	f000 f8ce 	bl	8020718 <__swbuf_r>
 802057c:	3001      	adds	r0, #1
 802057e:	d1ef      	bne.n	8020560 <_fwrite_r+0x5c>
 8020580:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020582:	07da      	lsls	r2, r3, #31
 8020584:	d405      	bmi.n	8020592 <_fwrite_r+0x8e>
 8020586:	89a3      	ldrh	r3, [r4, #12]
 8020588:	059b      	lsls	r3, r3, #22
 802058a:	d402      	bmi.n	8020592 <_fwrite_r+0x8e>
 802058c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802058e:	f000 fa97 	bl	8020ac0 <__retarget_lock_release_recursive>
 8020592:	fbb5 f0f8 	udiv	r0, r5, r8
 8020596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0802059c <fwrite>:
 802059c:	b507      	push	{r0, r1, r2, lr}
 802059e:	9300      	str	r3, [sp, #0]
 80205a0:	4613      	mov	r3, r2
 80205a2:	460a      	mov	r2, r1
 80205a4:	4601      	mov	r1, r0
 80205a6:	4803      	ldr	r0, [pc, #12]	@ (80205b4 <fwrite+0x18>)
 80205a8:	6800      	ldr	r0, [r0, #0]
 80205aa:	f7ff ffab 	bl	8020504 <_fwrite_r>
 80205ae:	b003      	add	sp, #12
 80205b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80205b4:	240013a0 	.word	0x240013a0

080205b8 <sniprintf>:
 80205b8:	b40c      	push	{r2, r3}
 80205ba:	b530      	push	{r4, r5, lr}
 80205bc:	4b17      	ldr	r3, [pc, #92]	@ (802061c <sniprintf+0x64>)
 80205be:	1e0c      	subs	r4, r1, #0
 80205c0:	681d      	ldr	r5, [r3, #0]
 80205c2:	b09d      	sub	sp, #116	@ 0x74
 80205c4:	da08      	bge.n	80205d8 <sniprintf+0x20>
 80205c6:	238b      	movs	r3, #139	@ 0x8b
 80205c8:	602b      	str	r3, [r5, #0]
 80205ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80205ce:	b01d      	add	sp, #116	@ 0x74
 80205d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80205d4:	b002      	add	sp, #8
 80205d6:	4770      	bx	lr
 80205d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80205dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80205e0:	bf14      	ite	ne
 80205e2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80205e6:	4623      	moveq	r3, r4
 80205e8:	9304      	str	r3, [sp, #16]
 80205ea:	9307      	str	r3, [sp, #28]
 80205ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80205f0:	9002      	str	r0, [sp, #8]
 80205f2:	9006      	str	r0, [sp, #24]
 80205f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80205f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80205fa:	ab21      	add	r3, sp, #132	@ 0x84
 80205fc:	a902      	add	r1, sp, #8
 80205fe:	4628      	mov	r0, r5
 8020600:	9301      	str	r3, [sp, #4]
 8020602:	f000 fb4d 	bl	8020ca0 <_svfiprintf_r>
 8020606:	1c43      	adds	r3, r0, #1
 8020608:	bfbc      	itt	lt
 802060a:	238b      	movlt	r3, #139	@ 0x8b
 802060c:	602b      	strlt	r3, [r5, #0]
 802060e:	2c00      	cmp	r4, #0
 8020610:	d0dd      	beq.n	80205ce <sniprintf+0x16>
 8020612:	9b02      	ldr	r3, [sp, #8]
 8020614:	2200      	movs	r2, #0
 8020616:	701a      	strb	r2, [r3, #0]
 8020618:	e7d9      	b.n	80205ce <sniprintf+0x16>
 802061a:	bf00      	nop
 802061c:	240013a0 	.word	0x240013a0

08020620 <__sread>:
 8020620:	b510      	push	{r4, lr}
 8020622:	460c      	mov	r4, r1
 8020624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020628:	f000 f9ea 	bl	8020a00 <_read_r>
 802062c:	2800      	cmp	r0, #0
 802062e:	bfab      	itete	ge
 8020630:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020632:	89a3      	ldrhlt	r3, [r4, #12]
 8020634:	181b      	addge	r3, r3, r0
 8020636:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802063a:	bfac      	ite	ge
 802063c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802063e:	81a3      	strhlt	r3, [r4, #12]
 8020640:	bd10      	pop	{r4, pc}

08020642 <__swrite>:
 8020642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020646:	461f      	mov	r7, r3
 8020648:	898b      	ldrh	r3, [r1, #12]
 802064a:	05db      	lsls	r3, r3, #23
 802064c:	4605      	mov	r5, r0
 802064e:	460c      	mov	r4, r1
 8020650:	4616      	mov	r6, r2
 8020652:	d505      	bpl.n	8020660 <__swrite+0x1e>
 8020654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020658:	2302      	movs	r3, #2
 802065a:	2200      	movs	r2, #0
 802065c:	f000 f9be 	bl	80209dc <_lseek_r>
 8020660:	89a3      	ldrh	r3, [r4, #12]
 8020662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020666:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802066a:	81a3      	strh	r3, [r4, #12]
 802066c:	4632      	mov	r2, r6
 802066e:	463b      	mov	r3, r7
 8020670:	4628      	mov	r0, r5
 8020672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020676:	f000 b9e5 	b.w	8020a44 <_write_r>

0802067a <__sseek>:
 802067a:	b510      	push	{r4, lr}
 802067c:	460c      	mov	r4, r1
 802067e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020682:	f000 f9ab 	bl	80209dc <_lseek_r>
 8020686:	1c43      	adds	r3, r0, #1
 8020688:	89a3      	ldrh	r3, [r4, #12]
 802068a:	bf15      	itete	ne
 802068c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802068e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020692:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8020696:	81a3      	strheq	r3, [r4, #12]
 8020698:	bf18      	it	ne
 802069a:	81a3      	strhne	r3, [r4, #12]
 802069c:	bd10      	pop	{r4, pc}

0802069e <__sclose>:
 802069e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80206a2:	f000 b935 	b.w	8020910 <_close_r>

080206a6 <_vsniprintf_r>:
 80206a6:	b530      	push	{r4, r5, lr}
 80206a8:	4614      	mov	r4, r2
 80206aa:	2c00      	cmp	r4, #0
 80206ac:	b09b      	sub	sp, #108	@ 0x6c
 80206ae:	4605      	mov	r5, r0
 80206b0:	461a      	mov	r2, r3
 80206b2:	da05      	bge.n	80206c0 <_vsniprintf_r+0x1a>
 80206b4:	238b      	movs	r3, #139	@ 0x8b
 80206b6:	6003      	str	r3, [r0, #0]
 80206b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80206bc:	b01b      	add	sp, #108	@ 0x6c
 80206be:	bd30      	pop	{r4, r5, pc}
 80206c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80206c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80206c8:	bf14      	ite	ne
 80206ca:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80206ce:	4623      	moveq	r3, r4
 80206d0:	9302      	str	r3, [sp, #8]
 80206d2:	9305      	str	r3, [sp, #20]
 80206d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80206d8:	9100      	str	r1, [sp, #0]
 80206da:	9104      	str	r1, [sp, #16]
 80206dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80206e0:	4669      	mov	r1, sp
 80206e2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80206e4:	f000 fadc 	bl	8020ca0 <_svfiprintf_r>
 80206e8:	1c43      	adds	r3, r0, #1
 80206ea:	bfbc      	itt	lt
 80206ec:	238b      	movlt	r3, #139	@ 0x8b
 80206ee:	602b      	strlt	r3, [r5, #0]
 80206f0:	2c00      	cmp	r4, #0
 80206f2:	d0e3      	beq.n	80206bc <_vsniprintf_r+0x16>
 80206f4:	9b00      	ldr	r3, [sp, #0]
 80206f6:	2200      	movs	r2, #0
 80206f8:	701a      	strb	r2, [r3, #0]
 80206fa:	e7df      	b.n	80206bc <_vsniprintf_r+0x16>

080206fc <vsniprintf>:
 80206fc:	b507      	push	{r0, r1, r2, lr}
 80206fe:	9300      	str	r3, [sp, #0]
 8020700:	4613      	mov	r3, r2
 8020702:	460a      	mov	r2, r1
 8020704:	4601      	mov	r1, r0
 8020706:	4803      	ldr	r0, [pc, #12]	@ (8020714 <vsniprintf+0x18>)
 8020708:	6800      	ldr	r0, [r0, #0]
 802070a:	f7ff ffcc 	bl	80206a6 <_vsniprintf_r>
 802070e:	b003      	add	sp, #12
 8020710:	f85d fb04 	ldr.w	pc, [sp], #4
 8020714:	240013a0 	.word	0x240013a0

08020718 <__swbuf_r>:
 8020718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802071a:	460e      	mov	r6, r1
 802071c:	4614      	mov	r4, r2
 802071e:	4605      	mov	r5, r0
 8020720:	b118      	cbz	r0, 802072a <__swbuf_r+0x12>
 8020722:	6a03      	ldr	r3, [r0, #32]
 8020724:	b90b      	cbnz	r3, 802072a <__swbuf_r+0x12>
 8020726:	f7ff feb7 	bl	8020498 <__sinit>
 802072a:	69a3      	ldr	r3, [r4, #24]
 802072c:	60a3      	str	r3, [r4, #8]
 802072e:	89a3      	ldrh	r3, [r4, #12]
 8020730:	071a      	lsls	r2, r3, #28
 8020732:	d501      	bpl.n	8020738 <__swbuf_r+0x20>
 8020734:	6923      	ldr	r3, [r4, #16]
 8020736:	b943      	cbnz	r3, 802074a <__swbuf_r+0x32>
 8020738:	4621      	mov	r1, r4
 802073a:	4628      	mov	r0, r5
 802073c:	f000 f82a 	bl	8020794 <__swsetup_r>
 8020740:	b118      	cbz	r0, 802074a <__swbuf_r+0x32>
 8020742:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8020746:	4638      	mov	r0, r7
 8020748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802074a:	6823      	ldr	r3, [r4, #0]
 802074c:	6922      	ldr	r2, [r4, #16]
 802074e:	1a98      	subs	r0, r3, r2
 8020750:	6963      	ldr	r3, [r4, #20]
 8020752:	b2f6      	uxtb	r6, r6
 8020754:	4283      	cmp	r3, r0
 8020756:	4637      	mov	r7, r6
 8020758:	dc05      	bgt.n	8020766 <__swbuf_r+0x4e>
 802075a:	4621      	mov	r1, r4
 802075c:	4628      	mov	r0, r5
 802075e:	f000 fdad 	bl	80212bc <_fflush_r>
 8020762:	2800      	cmp	r0, #0
 8020764:	d1ed      	bne.n	8020742 <__swbuf_r+0x2a>
 8020766:	68a3      	ldr	r3, [r4, #8]
 8020768:	3b01      	subs	r3, #1
 802076a:	60a3      	str	r3, [r4, #8]
 802076c:	6823      	ldr	r3, [r4, #0]
 802076e:	1c5a      	adds	r2, r3, #1
 8020770:	6022      	str	r2, [r4, #0]
 8020772:	701e      	strb	r6, [r3, #0]
 8020774:	6962      	ldr	r2, [r4, #20]
 8020776:	1c43      	adds	r3, r0, #1
 8020778:	429a      	cmp	r2, r3
 802077a:	d004      	beq.n	8020786 <__swbuf_r+0x6e>
 802077c:	89a3      	ldrh	r3, [r4, #12]
 802077e:	07db      	lsls	r3, r3, #31
 8020780:	d5e1      	bpl.n	8020746 <__swbuf_r+0x2e>
 8020782:	2e0a      	cmp	r6, #10
 8020784:	d1df      	bne.n	8020746 <__swbuf_r+0x2e>
 8020786:	4621      	mov	r1, r4
 8020788:	4628      	mov	r0, r5
 802078a:	f000 fd97 	bl	80212bc <_fflush_r>
 802078e:	2800      	cmp	r0, #0
 8020790:	d0d9      	beq.n	8020746 <__swbuf_r+0x2e>
 8020792:	e7d6      	b.n	8020742 <__swbuf_r+0x2a>

08020794 <__swsetup_r>:
 8020794:	b538      	push	{r3, r4, r5, lr}
 8020796:	4b29      	ldr	r3, [pc, #164]	@ (802083c <__swsetup_r+0xa8>)
 8020798:	4605      	mov	r5, r0
 802079a:	6818      	ldr	r0, [r3, #0]
 802079c:	460c      	mov	r4, r1
 802079e:	b118      	cbz	r0, 80207a8 <__swsetup_r+0x14>
 80207a0:	6a03      	ldr	r3, [r0, #32]
 80207a2:	b90b      	cbnz	r3, 80207a8 <__swsetup_r+0x14>
 80207a4:	f7ff fe78 	bl	8020498 <__sinit>
 80207a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80207ac:	0719      	lsls	r1, r3, #28
 80207ae:	d422      	bmi.n	80207f6 <__swsetup_r+0x62>
 80207b0:	06da      	lsls	r2, r3, #27
 80207b2:	d407      	bmi.n	80207c4 <__swsetup_r+0x30>
 80207b4:	2209      	movs	r2, #9
 80207b6:	602a      	str	r2, [r5, #0]
 80207b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80207bc:	81a3      	strh	r3, [r4, #12]
 80207be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80207c2:	e033      	b.n	802082c <__swsetup_r+0x98>
 80207c4:	0758      	lsls	r0, r3, #29
 80207c6:	d512      	bpl.n	80207ee <__swsetup_r+0x5a>
 80207c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80207ca:	b141      	cbz	r1, 80207de <__swsetup_r+0x4a>
 80207cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80207d0:	4299      	cmp	r1, r3
 80207d2:	d002      	beq.n	80207da <__swsetup_r+0x46>
 80207d4:	4628      	mov	r0, r5
 80207d6:	f000 f9b5 	bl	8020b44 <_free_r>
 80207da:	2300      	movs	r3, #0
 80207dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80207de:	89a3      	ldrh	r3, [r4, #12]
 80207e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80207e4:	81a3      	strh	r3, [r4, #12]
 80207e6:	2300      	movs	r3, #0
 80207e8:	6063      	str	r3, [r4, #4]
 80207ea:	6923      	ldr	r3, [r4, #16]
 80207ec:	6023      	str	r3, [r4, #0]
 80207ee:	89a3      	ldrh	r3, [r4, #12]
 80207f0:	f043 0308 	orr.w	r3, r3, #8
 80207f4:	81a3      	strh	r3, [r4, #12]
 80207f6:	6923      	ldr	r3, [r4, #16]
 80207f8:	b94b      	cbnz	r3, 802080e <__swsetup_r+0x7a>
 80207fa:	89a3      	ldrh	r3, [r4, #12]
 80207fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020804:	d003      	beq.n	802080e <__swsetup_r+0x7a>
 8020806:	4621      	mov	r1, r4
 8020808:	4628      	mov	r0, r5
 802080a:	f000 fdb7 	bl	802137c <__smakebuf_r>
 802080e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020812:	f013 0201 	ands.w	r2, r3, #1
 8020816:	d00a      	beq.n	802082e <__swsetup_r+0x9a>
 8020818:	2200      	movs	r2, #0
 802081a:	60a2      	str	r2, [r4, #8]
 802081c:	6962      	ldr	r2, [r4, #20]
 802081e:	4252      	negs	r2, r2
 8020820:	61a2      	str	r2, [r4, #24]
 8020822:	6922      	ldr	r2, [r4, #16]
 8020824:	b942      	cbnz	r2, 8020838 <__swsetup_r+0xa4>
 8020826:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802082a:	d1c5      	bne.n	80207b8 <__swsetup_r+0x24>
 802082c:	bd38      	pop	{r3, r4, r5, pc}
 802082e:	0799      	lsls	r1, r3, #30
 8020830:	bf58      	it	pl
 8020832:	6962      	ldrpl	r2, [r4, #20]
 8020834:	60a2      	str	r2, [r4, #8]
 8020836:	e7f4      	b.n	8020822 <__swsetup_r+0x8e>
 8020838:	2000      	movs	r0, #0
 802083a:	e7f7      	b.n	802082c <__swsetup_r+0x98>
 802083c:	240013a0 	.word	0x240013a0

08020840 <memcmp>:
 8020840:	b510      	push	{r4, lr}
 8020842:	3901      	subs	r1, #1
 8020844:	4402      	add	r2, r0
 8020846:	4290      	cmp	r0, r2
 8020848:	d101      	bne.n	802084e <memcmp+0xe>
 802084a:	2000      	movs	r0, #0
 802084c:	e005      	b.n	802085a <memcmp+0x1a>
 802084e:	7803      	ldrb	r3, [r0, #0]
 8020850:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020854:	42a3      	cmp	r3, r4
 8020856:	d001      	beq.n	802085c <memcmp+0x1c>
 8020858:	1b18      	subs	r0, r3, r4
 802085a:	bd10      	pop	{r4, pc}
 802085c:	3001      	adds	r0, #1
 802085e:	e7f2      	b.n	8020846 <memcmp+0x6>

08020860 <memmove>:
 8020860:	4288      	cmp	r0, r1
 8020862:	b510      	push	{r4, lr}
 8020864:	eb01 0402 	add.w	r4, r1, r2
 8020868:	d902      	bls.n	8020870 <memmove+0x10>
 802086a:	4284      	cmp	r4, r0
 802086c:	4623      	mov	r3, r4
 802086e:	d807      	bhi.n	8020880 <memmove+0x20>
 8020870:	1e43      	subs	r3, r0, #1
 8020872:	42a1      	cmp	r1, r4
 8020874:	d008      	beq.n	8020888 <memmove+0x28>
 8020876:	f811 2b01 	ldrb.w	r2, [r1], #1
 802087a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802087e:	e7f8      	b.n	8020872 <memmove+0x12>
 8020880:	4402      	add	r2, r0
 8020882:	4601      	mov	r1, r0
 8020884:	428a      	cmp	r2, r1
 8020886:	d100      	bne.n	802088a <memmove+0x2a>
 8020888:	bd10      	pop	{r4, pc}
 802088a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802088e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020892:	e7f7      	b.n	8020884 <memmove+0x24>

08020894 <memset>:
 8020894:	4402      	add	r2, r0
 8020896:	4603      	mov	r3, r0
 8020898:	4293      	cmp	r3, r2
 802089a:	d100      	bne.n	802089e <memset+0xa>
 802089c:	4770      	bx	lr
 802089e:	f803 1b01 	strb.w	r1, [r3], #1
 80208a2:	e7f9      	b.n	8020898 <memset+0x4>

080208a4 <strchr>:
 80208a4:	b2c9      	uxtb	r1, r1
 80208a6:	4603      	mov	r3, r0
 80208a8:	4618      	mov	r0, r3
 80208aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80208ae:	b112      	cbz	r2, 80208b6 <strchr+0x12>
 80208b0:	428a      	cmp	r2, r1
 80208b2:	d1f9      	bne.n	80208a8 <strchr+0x4>
 80208b4:	4770      	bx	lr
 80208b6:	2900      	cmp	r1, #0
 80208b8:	bf18      	it	ne
 80208ba:	2000      	movne	r0, #0
 80208bc:	4770      	bx	lr

080208be <strncmp>:
 80208be:	b510      	push	{r4, lr}
 80208c0:	b16a      	cbz	r2, 80208de <strncmp+0x20>
 80208c2:	3901      	subs	r1, #1
 80208c4:	1884      	adds	r4, r0, r2
 80208c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80208ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80208ce:	429a      	cmp	r2, r3
 80208d0:	d103      	bne.n	80208da <strncmp+0x1c>
 80208d2:	42a0      	cmp	r0, r4
 80208d4:	d001      	beq.n	80208da <strncmp+0x1c>
 80208d6:	2a00      	cmp	r2, #0
 80208d8:	d1f5      	bne.n	80208c6 <strncmp+0x8>
 80208da:	1ad0      	subs	r0, r2, r3
 80208dc:	bd10      	pop	{r4, pc}
 80208de:	4610      	mov	r0, r2
 80208e0:	e7fc      	b.n	80208dc <strncmp+0x1e>

080208e2 <strstr>:
 80208e2:	780a      	ldrb	r2, [r1, #0]
 80208e4:	b570      	push	{r4, r5, r6, lr}
 80208e6:	b96a      	cbnz	r2, 8020904 <strstr+0x22>
 80208e8:	bd70      	pop	{r4, r5, r6, pc}
 80208ea:	429a      	cmp	r2, r3
 80208ec:	d109      	bne.n	8020902 <strstr+0x20>
 80208ee:	460c      	mov	r4, r1
 80208f0:	4605      	mov	r5, r0
 80208f2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80208f6:	2b00      	cmp	r3, #0
 80208f8:	d0f6      	beq.n	80208e8 <strstr+0x6>
 80208fa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80208fe:	429e      	cmp	r6, r3
 8020900:	d0f7      	beq.n	80208f2 <strstr+0x10>
 8020902:	3001      	adds	r0, #1
 8020904:	7803      	ldrb	r3, [r0, #0]
 8020906:	2b00      	cmp	r3, #0
 8020908:	d1ef      	bne.n	80208ea <strstr+0x8>
 802090a:	4618      	mov	r0, r3
 802090c:	e7ec      	b.n	80208e8 <strstr+0x6>
	...

08020910 <_close_r>:
 8020910:	b538      	push	{r3, r4, r5, lr}
 8020912:	4d06      	ldr	r5, [pc, #24]	@ (802092c <_close_r+0x1c>)
 8020914:	2300      	movs	r3, #0
 8020916:	4604      	mov	r4, r0
 8020918:	4608      	mov	r0, r1
 802091a:	602b      	str	r3, [r5, #0]
 802091c:	f7e1 fbde 	bl	80020dc <_close>
 8020920:	1c43      	adds	r3, r0, #1
 8020922:	d102      	bne.n	802092a <_close_r+0x1a>
 8020924:	682b      	ldr	r3, [r5, #0]
 8020926:	b103      	cbz	r3, 802092a <_close_r+0x1a>
 8020928:	6023      	str	r3, [r4, #0]
 802092a:	bd38      	pop	{r3, r4, r5, pc}
 802092c:	240695d8 	.word	0x240695d8

08020930 <_reclaim_reent>:
 8020930:	4b29      	ldr	r3, [pc, #164]	@ (80209d8 <_reclaim_reent+0xa8>)
 8020932:	681b      	ldr	r3, [r3, #0]
 8020934:	4283      	cmp	r3, r0
 8020936:	b570      	push	{r4, r5, r6, lr}
 8020938:	4604      	mov	r4, r0
 802093a:	d04b      	beq.n	80209d4 <_reclaim_reent+0xa4>
 802093c:	69c3      	ldr	r3, [r0, #28]
 802093e:	b1ab      	cbz	r3, 802096c <_reclaim_reent+0x3c>
 8020940:	68db      	ldr	r3, [r3, #12]
 8020942:	b16b      	cbz	r3, 8020960 <_reclaim_reent+0x30>
 8020944:	2500      	movs	r5, #0
 8020946:	69e3      	ldr	r3, [r4, #28]
 8020948:	68db      	ldr	r3, [r3, #12]
 802094a:	5959      	ldr	r1, [r3, r5]
 802094c:	2900      	cmp	r1, #0
 802094e:	d13b      	bne.n	80209c8 <_reclaim_reent+0x98>
 8020950:	3504      	adds	r5, #4
 8020952:	2d80      	cmp	r5, #128	@ 0x80
 8020954:	d1f7      	bne.n	8020946 <_reclaim_reent+0x16>
 8020956:	69e3      	ldr	r3, [r4, #28]
 8020958:	4620      	mov	r0, r4
 802095a:	68d9      	ldr	r1, [r3, #12]
 802095c:	f000 f8f2 	bl	8020b44 <_free_r>
 8020960:	69e3      	ldr	r3, [r4, #28]
 8020962:	6819      	ldr	r1, [r3, #0]
 8020964:	b111      	cbz	r1, 802096c <_reclaim_reent+0x3c>
 8020966:	4620      	mov	r0, r4
 8020968:	f000 f8ec 	bl	8020b44 <_free_r>
 802096c:	6961      	ldr	r1, [r4, #20]
 802096e:	b111      	cbz	r1, 8020976 <_reclaim_reent+0x46>
 8020970:	4620      	mov	r0, r4
 8020972:	f000 f8e7 	bl	8020b44 <_free_r>
 8020976:	69e1      	ldr	r1, [r4, #28]
 8020978:	b111      	cbz	r1, 8020980 <_reclaim_reent+0x50>
 802097a:	4620      	mov	r0, r4
 802097c:	f000 f8e2 	bl	8020b44 <_free_r>
 8020980:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8020982:	b111      	cbz	r1, 802098a <_reclaim_reent+0x5a>
 8020984:	4620      	mov	r0, r4
 8020986:	f000 f8dd 	bl	8020b44 <_free_r>
 802098a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802098c:	b111      	cbz	r1, 8020994 <_reclaim_reent+0x64>
 802098e:	4620      	mov	r0, r4
 8020990:	f000 f8d8 	bl	8020b44 <_free_r>
 8020994:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8020996:	b111      	cbz	r1, 802099e <_reclaim_reent+0x6e>
 8020998:	4620      	mov	r0, r4
 802099a:	f000 f8d3 	bl	8020b44 <_free_r>
 802099e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80209a0:	b111      	cbz	r1, 80209a8 <_reclaim_reent+0x78>
 80209a2:	4620      	mov	r0, r4
 80209a4:	f000 f8ce 	bl	8020b44 <_free_r>
 80209a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80209aa:	b111      	cbz	r1, 80209b2 <_reclaim_reent+0x82>
 80209ac:	4620      	mov	r0, r4
 80209ae:	f000 f8c9 	bl	8020b44 <_free_r>
 80209b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80209b4:	b111      	cbz	r1, 80209bc <_reclaim_reent+0x8c>
 80209b6:	4620      	mov	r0, r4
 80209b8:	f000 f8c4 	bl	8020b44 <_free_r>
 80209bc:	6a23      	ldr	r3, [r4, #32]
 80209be:	b14b      	cbz	r3, 80209d4 <_reclaim_reent+0xa4>
 80209c0:	4620      	mov	r0, r4
 80209c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80209c6:	4718      	bx	r3
 80209c8:	680e      	ldr	r6, [r1, #0]
 80209ca:	4620      	mov	r0, r4
 80209cc:	f000 f8ba 	bl	8020b44 <_free_r>
 80209d0:	4631      	mov	r1, r6
 80209d2:	e7bb      	b.n	802094c <_reclaim_reent+0x1c>
 80209d4:	bd70      	pop	{r4, r5, r6, pc}
 80209d6:	bf00      	nop
 80209d8:	240013a0 	.word	0x240013a0

080209dc <_lseek_r>:
 80209dc:	b538      	push	{r3, r4, r5, lr}
 80209de:	4d07      	ldr	r5, [pc, #28]	@ (80209fc <_lseek_r+0x20>)
 80209e0:	4604      	mov	r4, r0
 80209e2:	4608      	mov	r0, r1
 80209e4:	4611      	mov	r1, r2
 80209e6:	2200      	movs	r2, #0
 80209e8:	602a      	str	r2, [r5, #0]
 80209ea:	461a      	mov	r2, r3
 80209ec:	f7e1 fb9d 	bl	800212a <_lseek>
 80209f0:	1c43      	adds	r3, r0, #1
 80209f2:	d102      	bne.n	80209fa <_lseek_r+0x1e>
 80209f4:	682b      	ldr	r3, [r5, #0]
 80209f6:	b103      	cbz	r3, 80209fa <_lseek_r+0x1e>
 80209f8:	6023      	str	r3, [r4, #0]
 80209fa:	bd38      	pop	{r3, r4, r5, pc}
 80209fc:	240695d8 	.word	0x240695d8

08020a00 <_read_r>:
 8020a00:	b538      	push	{r3, r4, r5, lr}
 8020a02:	4d07      	ldr	r5, [pc, #28]	@ (8020a20 <_read_r+0x20>)
 8020a04:	4604      	mov	r4, r0
 8020a06:	4608      	mov	r0, r1
 8020a08:	4611      	mov	r1, r2
 8020a0a:	2200      	movs	r2, #0
 8020a0c:	602a      	str	r2, [r5, #0]
 8020a0e:	461a      	mov	r2, r3
 8020a10:	f7e1 fb2b 	bl	800206a <_read>
 8020a14:	1c43      	adds	r3, r0, #1
 8020a16:	d102      	bne.n	8020a1e <_read_r+0x1e>
 8020a18:	682b      	ldr	r3, [r5, #0]
 8020a1a:	b103      	cbz	r3, 8020a1e <_read_r+0x1e>
 8020a1c:	6023      	str	r3, [r4, #0]
 8020a1e:	bd38      	pop	{r3, r4, r5, pc}
 8020a20:	240695d8 	.word	0x240695d8

08020a24 <_sbrk_r>:
 8020a24:	b538      	push	{r3, r4, r5, lr}
 8020a26:	4d06      	ldr	r5, [pc, #24]	@ (8020a40 <_sbrk_r+0x1c>)
 8020a28:	2300      	movs	r3, #0
 8020a2a:	4604      	mov	r4, r0
 8020a2c:	4608      	mov	r0, r1
 8020a2e:	602b      	str	r3, [r5, #0]
 8020a30:	f7e1 fb88 	bl	8002144 <_sbrk>
 8020a34:	1c43      	adds	r3, r0, #1
 8020a36:	d102      	bne.n	8020a3e <_sbrk_r+0x1a>
 8020a38:	682b      	ldr	r3, [r5, #0]
 8020a3a:	b103      	cbz	r3, 8020a3e <_sbrk_r+0x1a>
 8020a3c:	6023      	str	r3, [r4, #0]
 8020a3e:	bd38      	pop	{r3, r4, r5, pc}
 8020a40:	240695d8 	.word	0x240695d8

08020a44 <_write_r>:
 8020a44:	b538      	push	{r3, r4, r5, lr}
 8020a46:	4d07      	ldr	r5, [pc, #28]	@ (8020a64 <_write_r+0x20>)
 8020a48:	4604      	mov	r4, r0
 8020a4a:	4608      	mov	r0, r1
 8020a4c:	4611      	mov	r1, r2
 8020a4e:	2200      	movs	r2, #0
 8020a50:	602a      	str	r2, [r5, #0]
 8020a52:	461a      	mov	r2, r3
 8020a54:	f7e1 fb26 	bl	80020a4 <_write>
 8020a58:	1c43      	adds	r3, r0, #1
 8020a5a:	d102      	bne.n	8020a62 <_write_r+0x1e>
 8020a5c:	682b      	ldr	r3, [r5, #0]
 8020a5e:	b103      	cbz	r3, 8020a62 <_write_r+0x1e>
 8020a60:	6023      	str	r3, [r4, #0]
 8020a62:	bd38      	pop	{r3, r4, r5, pc}
 8020a64:	240695d8 	.word	0x240695d8

08020a68 <__errno>:
 8020a68:	4b01      	ldr	r3, [pc, #4]	@ (8020a70 <__errno+0x8>)
 8020a6a:	6818      	ldr	r0, [r3, #0]
 8020a6c:	4770      	bx	lr
 8020a6e:	bf00      	nop
 8020a70:	240013a0 	.word	0x240013a0

08020a74 <__libc_init_array>:
 8020a74:	b570      	push	{r4, r5, r6, lr}
 8020a76:	4d0d      	ldr	r5, [pc, #52]	@ (8020aac <__libc_init_array+0x38>)
 8020a78:	4c0d      	ldr	r4, [pc, #52]	@ (8020ab0 <__libc_init_array+0x3c>)
 8020a7a:	1b64      	subs	r4, r4, r5
 8020a7c:	10a4      	asrs	r4, r4, #2
 8020a7e:	2600      	movs	r6, #0
 8020a80:	42a6      	cmp	r6, r4
 8020a82:	d109      	bne.n	8020a98 <__libc_init_array+0x24>
 8020a84:	4d0b      	ldr	r5, [pc, #44]	@ (8020ab4 <__libc_init_array+0x40>)
 8020a86:	4c0c      	ldr	r4, [pc, #48]	@ (8020ab8 <__libc_init_array+0x44>)
 8020a88:	f000 fe62 	bl	8021750 <_init>
 8020a8c:	1b64      	subs	r4, r4, r5
 8020a8e:	10a4      	asrs	r4, r4, #2
 8020a90:	2600      	movs	r6, #0
 8020a92:	42a6      	cmp	r6, r4
 8020a94:	d105      	bne.n	8020aa2 <__libc_init_array+0x2e>
 8020a96:	bd70      	pop	{r4, r5, r6, pc}
 8020a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8020a9c:	4798      	blx	r3
 8020a9e:	3601      	adds	r6, #1
 8020aa0:	e7ee      	b.n	8020a80 <__libc_init_array+0xc>
 8020aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8020aa6:	4798      	blx	r3
 8020aa8:	3601      	adds	r6, #1
 8020aaa:	e7f2      	b.n	8020a92 <__libc_init_array+0x1e>
 8020aac:	08024080 	.word	0x08024080
 8020ab0:	08024080 	.word	0x08024080
 8020ab4:	08024080 	.word	0x08024080
 8020ab8:	080240c0 	.word	0x080240c0

08020abc <__retarget_lock_init_recursive>:
 8020abc:	4770      	bx	lr

08020abe <__retarget_lock_acquire_recursive>:
 8020abe:	4770      	bx	lr

08020ac0 <__retarget_lock_release_recursive>:
 8020ac0:	4770      	bx	lr

08020ac2 <strcpy>:
 8020ac2:	4603      	mov	r3, r0
 8020ac4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020ac8:	f803 2b01 	strb.w	r2, [r3], #1
 8020acc:	2a00      	cmp	r2, #0
 8020ace:	d1f9      	bne.n	8020ac4 <strcpy+0x2>
 8020ad0:	4770      	bx	lr

08020ad2 <memcpy>:
 8020ad2:	440a      	add	r2, r1
 8020ad4:	4291      	cmp	r1, r2
 8020ad6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8020ada:	d100      	bne.n	8020ade <memcpy+0xc>
 8020adc:	4770      	bx	lr
 8020ade:	b510      	push	{r4, lr}
 8020ae0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020ae4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020ae8:	4291      	cmp	r1, r2
 8020aea:	d1f9      	bne.n	8020ae0 <memcpy+0xe>
 8020aec:	bd10      	pop	{r4, pc}
	...

08020af0 <__assert_func>:
 8020af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020af2:	4614      	mov	r4, r2
 8020af4:	461a      	mov	r2, r3
 8020af6:	4b09      	ldr	r3, [pc, #36]	@ (8020b1c <__assert_func+0x2c>)
 8020af8:	681b      	ldr	r3, [r3, #0]
 8020afa:	4605      	mov	r5, r0
 8020afc:	68d8      	ldr	r0, [r3, #12]
 8020afe:	b954      	cbnz	r4, 8020b16 <__assert_func+0x26>
 8020b00:	4b07      	ldr	r3, [pc, #28]	@ (8020b20 <__assert_func+0x30>)
 8020b02:	461c      	mov	r4, r3
 8020b04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020b08:	9100      	str	r1, [sp, #0]
 8020b0a:	462b      	mov	r3, r5
 8020b0c:	4905      	ldr	r1, [pc, #20]	@ (8020b24 <__assert_func+0x34>)
 8020b0e:	f000 fbfd 	bl	802130c <fiprintf>
 8020b12:	f000 fc91 	bl	8021438 <abort>
 8020b16:	4b04      	ldr	r3, [pc, #16]	@ (8020b28 <__assert_func+0x38>)
 8020b18:	e7f4      	b.n	8020b04 <__assert_func+0x14>
 8020b1a:	bf00      	nop
 8020b1c:	240013a0 	.word	0x240013a0
 8020b20:	08024041 	.word	0x08024041
 8020b24:	08024013 	.word	0x08024013
 8020b28:	08024006 	.word	0x08024006

08020b2c <__env_lock>:
 8020b2c:	4801      	ldr	r0, [pc, #4]	@ (8020b34 <__env_lock+0x8>)
 8020b2e:	f7ff bfc6 	b.w	8020abe <__retarget_lock_acquire_recursive>
 8020b32:	bf00      	nop
 8020b34:	240695dc 	.word	0x240695dc

08020b38 <__env_unlock>:
 8020b38:	4801      	ldr	r0, [pc, #4]	@ (8020b40 <__env_unlock+0x8>)
 8020b3a:	f7ff bfc1 	b.w	8020ac0 <__retarget_lock_release_recursive>
 8020b3e:	bf00      	nop
 8020b40:	240695dc 	.word	0x240695dc

08020b44 <_free_r>:
 8020b44:	b538      	push	{r3, r4, r5, lr}
 8020b46:	4605      	mov	r5, r0
 8020b48:	2900      	cmp	r1, #0
 8020b4a:	d041      	beq.n	8020bd0 <_free_r+0x8c>
 8020b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020b50:	1f0c      	subs	r4, r1, #4
 8020b52:	2b00      	cmp	r3, #0
 8020b54:	bfb8      	it	lt
 8020b56:	18e4      	addlt	r4, r4, r3
 8020b58:	f7ff faec 	bl	8020134 <__malloc_lock>
 8020b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8020bd4 <_free_r+0x90>)
 8020b5e:	6813      	ldr	r3, [r2, #0]
 8020b60:	b933      	cbnz	r3, 8020b70 <_free_r+0x2c>
 8020b62:	6063      	str	r3, [r4, #4]
 8020b64:	6014      	str	r4, [r2, #0]
 8020b66:	4628      	mov	r0, r5
 8020b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020b6c:	f7ff bae8 	b.w	8020140 <__malloc_unlock>
 8020b70:	42a3      	cmp	r3, r4
 8020b72:	d908      	bls.n	8020b86 <_free_r+0x42>
 8020b74:	6820      	ldr	r0, [r4, #0]
 8020b76:	1821      	adds	r1, r4, r0
 8020b78:	428b      	cmp	r3, r1
 8020b7a:	bf01      	itttt	eq
 8020b7c:	6819      	ldreq	r1, [r3, #0]
 8020b7e:	685b      	ldreq	r3, [r3, #4]
 8020b80:	1809      	addeq	r1, r1, r0
 8020b82:	6021      	streq	r1, [r4, #0]
 8020b84:	e7ed      	b.n	8020b62 <_free_r+0x1e>
 8020b86:	461a      	mov	r2, r3
 8020b88:	685b      	ldr	r3, [r3, #4]
 8020b8a:	b10b      	cbz	r3, 8020b90 <_free_r+0x4c>
 8020b8c:	42a3      	cmp	r3, r4
 8020b8e:	d9fa      	bls.n	8020b86 <_free_r+0x42>
 8020b90:	6811      	ldr	r1, [r2, #0]
 8020b92:	1850      	adds	r0, r2, r1
 8020b94:	42a0      	cmp	r0, r4
 8020b96:	d10b      	bne.n	8020bb0 <_free_r+0x6c>
 8020b98:	6820      	ldr	r0, [r4, #0]
 8020b9a:	4401      	add	r1, r0
 8020b9c:	1850      	adds	r0, r2, r1
 8020b9e:	4283      	cmp	r3, r0
 8020ba0:	6011      	str	r1, [r2, #0]
 8020ba2:	d1e0      	bne.n	8020b66 <_free_r+0x22>
 8020ba4:	6818      	ldr	r0, [r3, #0]
 8020ba6:	685b      	ldr	r3, [r3, #4]
 8020ba8:	6053      	str	r3, [r2, #4]
 8020baa:	4408      	add	r0, r1
 8020bac:	6010      	str	r0, [r2, #0]
 8020bae:	e7da      	b.n	8020b66 <_free_r+0x22>
 8020bb0:	d902      	bls.n	8020bb8 <_free_r+0x74>
 8020bb2:	230c      	movs	r3, #12
 8020bb4:	602b      	str	r3, [r5, #0]
 8020bb6:	e7d6      	b.n	8020b66 <_free_r+0x22>
 8020bb8:	6820      	ldr	r0, [r4, #0]
 8020bba:	1821      	adds	r1, r4, r0
 8020bbc:	428b      	cmp	r3, r1
 8020bbe:	bf04      	itt	eq
 8020bc0:	6819      	ldreq	r1, [r3, #0]
 8020bc2:	685b      	ldreq	r3, [r3, #4]
 8020bc4:	6063      	str	r3, [r4, #4]
 8020bc6:	bf04      	itt	eq
 8020bc8:	1809      	addeq	r1, r1, r0
 8020bca:	6021      	streq	r1, [r4, #0]
 8020bcc:	6054      	str	r4, [r2, #4]
 8020bce:	e7ca      	b.n	8020b66 <_free_r+0x22>
 8020bd0:	bd38      	pop	{r3, r4, r5, pc}
 8020bd2:	bf00      	nop
 8020bd4:	24069498 	.word	0x24069498

08020bd8 <_malloc_usable_size_r>:
 8020bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020bdc:	1f18      	subs	r0, r3, #4
 8020bde:	2b00      	cmp	r3, #0
 8020be0:	bfbc      	itt	lt
 8020be2:	580b      	ldrlt	r3, [r1, r0]
 8020be4:	18c0      	addlt	r0, r0, r3
 8020be6:	4770      	bx	lr

08020be8 <__ssputs_r>:
 8020be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020bec:	688e      	ldr	r6, [r1, #8]
 8020bee:	461f      	mov	r7, r3
 8020bf0:	42be      	cmp	r6, r7
 8020bf2:	680b      	ldr	r3, [r1, #0]
 8020bf4:	4682      	mov	sl, r0
 8020bf6:	460c      	mov	r4, r1
 8020bf8:	4690      	mov	r8, r2
 8020bfa:	d82d      	bhi.n	8020c58 <__ssputs_r+0x70>
 8020bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020c00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020c04:	d026      	beq.n	8020c54 <__ssputs_r+0x6c>
 8020c06:	6965      	ldr	r5, [r4, #20]
 8020c08:	6909      	ldr	r1, [r1, #16]
 8020c0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020c0e:	eba3 0901 	sub.w	r9, r3, r1
 8020c12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020c16:	1c7b      	adds	r3, r7, #1
 8020c18:	444b      	add	r3, r9
 8020c1a:	106d      	asrs	r5, r5, #1
 8020c1c:	429d      	cmp	r5, r3
 8020c1e:	bf38      	it	cc
 8020c20:	461d      	movcc	r5, r3
 8020c22:	0553      	lsls	r3, r2, #21
 8020c24:	d527      	bpl.n	8020c76 <__ssputs_r+0x8e>
 8020c26:	4629      	mov	r1, r5
 8020c28:	f7ff fa04 	bl	8020034 <_malloc_r>
 8020c2c:	4606      	mov	r6, r0
 8020c2e:	b360      	cbz	r0, 8020c8a <__ssputs_r+0xa2>
 8020c30:	6921      	ldr	r1, [r4, #16]
 8020c32:	464a      	mov	r2, r9
 8020c34:	f7ff ff4d 	bl	8020ad2 <memcpy>
 8020c38:	89a3      	ldrh	r3, [r4, #12]
 8020c3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8020c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020c42:	81a3      	strh	r3, [r4, #12]
 8020c44:	6126      	str	r6, [r4, #16]
 8020c46:	6165      	str	r5, [r4, #20]
 8020c48:	444e      	add	r6, r9
 8020c4a:	eba5 0509 	sub.w	r5, r5, r9
 8020c4e:	6026      	str	r6, [r4, #0]
 8020c50:	60a5      	str	r5, [r4, #8]
 8020c52:	463e      	mov	r6, r7
 8020c54:	42be      	cmp	r6, r7
 8020c56:	d900      	bls.n	8020c5a <__ssputs_r+0x72>
 8020c58:	463e      	mov	r6, r7
 8020c5a:	6820      	ldr	r0, [r4, #0]
 8020c5c:	4632      	mov	r2, r6
 8020c5e:	4641      	mov	r1, r8
 8020c60:	f7ff fdfe 	bl	8020860 <memmove>
 8020c64:	68a3      	ldr	r3, [r4, #8]
 8020c66:	1b9b      	subs	r3, r3, r6
 8020c68:	60a3      	str	r3, [r4, #8]
 8020c6a:	6823      	ldr	r3, [r4, #0]
 8020c6c:	4433      	add	r3, r6
 8020c6e:	6023      	str	r3, [r4, #0]
 8020c70:	2000      	movs	r0, #0
 8020c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c76:	462a      	mov	r2, r5
 8020c78:	f7ff fadc 	bl	8020234 <_realloc_r>
 8020c7c:	4606      	mov	r6, r0
 8020c7e:	2800      	cmp	r0, #0
 8020c80:	d1e0      	bne.n	8020c44 <__ssputs_r+0x5c>
 8020c82:	6921      	ldr	r1, [r4, #16]
 8020c84:	4650      	mov	r0, sl
 8020c86:	f7ff ff5d 	bl	8020b44 <_free_r>
 8020c8a:	230c      	movs	r3, #12
 8020c8c:	f8ca 3000 	str.w	r3, [sl]
 8020c90:	89a3      	ldrh	r3, [r4, #12]
 8020c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020c96:	81a3      	strh	r3, [r4, #12]
 8020c98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020c9c:	e7e9      	b.n	8020c72 <__ssputs_r+0x8a>
	...

08020ca0 <_svfiprintf_r>:
 8020ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ca4:	4698      	mov	r8, r3
 8020ca6:	898b      	ldrh	r3, [r1, #12]
 8020ca8:	061b      	lsls	r3, r3, #24
 8020caa:	b09d      	sub	sp, #116	@ 0x74
 8020cac:	4607      	mov	r7, r0
 8020cae:	460d      	mov	r5, r1
 8020cb0:	4614      	mov	r4, r2
 8020cb2:	d510      	bpl.n	8020cd6 <_svfiprintf_r+0x36>
 8020cb4:	690b      	ldr	r3, [r1, #16]
 8020cb6:	b973      	cbnz	r3, 8020cd6 <_svfiprintf_r+0x36>
 8020cb8:	2140      	movs	r1, #64	@ 0x40
 8020cba:	f7ff f9bb 	bl	8020034 <_malloc_r>
 8020cbe:	6028      	str	r0, [r5, #0]
 8020cc0:	6128      	str	r0, [r5, #16]
 8020cc2:	b930      	cbnz	r0, 8020cd2 <_svfiprintf_r+0x32>
 8020cc4:	230c      	movs	r3, #12
 8020cc6:	603b      	str	r3, [r7, #0]
 8020cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020ccc:	b01d      	add	sp, #116	@ 0x74
 8020cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cd2:	2340      	movs	r3, #64	@ 0x40
 8020cd4:	616b      	str	r3, [r5, #20]
 8020cd6:	2300      	movs	r3, #0
 8020cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8020cda:	2320      	movs	r3, #32
 8020cdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8020ce4:	2330      	movs	r3, #48	@ 0x30
 8020ce6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8020e84 <_svfiprintf_r+0x1e4>
 8020cea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020cee:	f04f 0901 	mov.w	r9, #1
 8020cf2:	4623      	mov	r3, r4
 8020cf4:	469a      	mov	sl, r3
 8020cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020cfa:	b10a      	cbz	r2, 8020d00 <_svfiprintf_r+0x60>
 8020cfc:	2a25      	cmp	r2, #37	@ 0x25
 8020cfe:	d1f9      	bne.n	8020cf4 <_svfiprintf_r+0x54>
 8020d00:	ebba 0b04 	subs.w	fp, sl, r4
 8020d04:	d00b      	beq.n	8020d1e <_svfiprintf_r+0x7e>
 8020d06:	465b      	mov	r3, fp
 8020d08:	4622      	mov	r2, r4
 8020d0a:	4629      	mov	r1, r5
 8020d0c:	4638      	mov	r0, r7
 8020d0e:	f7ff ff6b 	bl	8020be8 <__ssputs_r>
 8020d12:	3001      	adds	r0, #1
 8020d14:	f000 80a7 	beq.w	8020e66 <_svfiprintf_r+0x1c6>
 8020d18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020d1a:	445a      	add	r2, fp
 8020d1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8020d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	f000 809f 	beq.w	8020e66 <_svfiprintf_r+0x1c6>
 8020d28:	2300      	movs	r3, #0
 8020d2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020d32:	f10a 0a01 	add.w	sl, sl, #1
 8020d36:	9304      	str	r3, [sp, #16]
 8020d38:	9307      	str	r3, [sp, #28]
 8020d3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020d3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8020d40:	4654      	mov	r4, sl
 8020d42:	2205      	movs	r2, #5
 8020d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d48:	484e      	ldr	r0, [pc, #312]	@ (8020e84 <_svfiprintf_r+0x1e4>)
 8020d4a:	f7df fae1 	bl	8000310 <memchr>
 8020d4e:	9a04      	ldr	r2, [sp, #16]
 8020d50:	b9d8      	cbnz	r0, 8020d8a <_svfiprintf_r+0xea>
 8020d52:	06d0      	lsls	r0, r2, #27
 8020d54:	bf44      	itt	mi
 8020d56:	2320      	movmi	r3, #32
 8020d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020d5c:	0711      	lsls	r1, r2, #28
 8020d5e:	bf44      	itt	mi
 8020d60:	232b      	movmi	r3, #43	@ 0x2b
 8020d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020d66:	f89a 3000 	ldrb.w	r3, [sl]
 8020d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8020d6c:	d015      	beq.n	8020d9a <_svfiprintf_r+0xfa>
 8020d6e:	9a07      	ldr	r2, [sp, #28]
 8020d70:	4654      	mov	r4, sl
 8020d72:	2000      	movs	r0, #0
 8020d74:	f04f 0c0a 	mov.w	ip, #10
 8020d78:	4621      	mov	r1, r4
 8020d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020d7e:	3b30      	subs	r3, #48	@ 0x30
 8020d80:	2b09      	cmp	r3, #9
 8020d82:	d94b      	bls.n	8020e1c <_svfiprintf_r+0x17c>
 8020d84:	b1b0      	cbz	r0, 8020db4 <_svfiprintf_r+0x114>
 8020d86:	9207      	str	r2, [sp, #28]
 8020d88:	e014      	b.n	8020db4 <_svfiprintf_r+0x114>
 8020d8a:	eba0 0308 	sub.w	r3, r0, r8
 8020d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8020d92:	4313      	orrs	r3, r2
 8020d94:	9304      	str	r3, [sp, #16]
 8020d96:	46a2      	mov	sl, r4
 8020d98:	e7d2      	b.n	8020d40 <_svfiprintf_r+0xa0>
 8020d9a:	9b03      	ldr	r3, [sp, #12]
 8020d9c:	1d19      	adds	r1, r3, #4
 8020d9e:	681b      	ldr	r3, [r3, #0]
 8020da0:	9103      	str	r1, [sp, #12]
 8020da2:	2b00      	cmp	r3, #0
 8020da4:	bfbb      	ittet	lt
 8020da6:	425b      	neglt	r3, r3
 8020da8:	f042 0202 	orrlt.w	r2, r2, #2
 8020dac:	9307      	strge	r3, [sp, #28]
 8020dae:	9307      	strlt	r3, [sp, #28]
 8020db0:	bfb8      	it	lt
 8020db2:	9204      	strlt	r2, [sp, #16]
 8020db4:	7823      	ldrb	r3, [r4, #0]
 8020db6:	2b2e      	cmp	r3, #46	@ 0x2e
 8020db8:	d10a      	bne.n	8020dd0 <_svfiprintf_r+0x130>
 8020dba:	7863      	ldrb	r3, [r4, #1]
 8020dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8020dbe:	d132      	bne.n	8020e26 <_svfiprintf_r+0x186>
 8020dc0:	9b03      	ldr	r3, [sp, #12]
 8020dc2:	1d1a      	adds	r2, r3, #4
 8020dc4:	681b      	ldr	r3, [r3, #0]
 8020dc6:	9203      	str	r2, [sp, #12]
 8020dc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020dcc:	3402      	adds	r4, #2
 8020dce:	9305      	str	r3, [sp, #20]
 8020dd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8020e94 <_svfiprintf_r+0x1f4>
 8020dd4:	7821      	ldrb	r1, [r4, #0]
 8020dd6:	2203      	movs	r2, #3
 8020dd8:	4650      	mov	r0, sl
 8020dda:	f7df fa99 	bl	8000310 <memchr>
 8020dde:	b138      	cbz	r0, 8020df0 <_svfiprintf_r+0x150>
 8020de0:	9b04      	ldr	r3, [sp, #16]
 8020de2:	eba0 000a 	sub.w	r0, r0, sl
 8020de6:	2240      	movs	r2, #64	@ 0x40
 8020de8:	4082      	lsls	r2, r0
 8020dea:	4313      	orrs	r3, r2
 8020dec:	3401      	adds	r4, #1
 8020dee:	9304      	str	r3, [sp, #16]
 8020df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020df4:	4824      	ldr	r0, [pc, #144]	@ (8020e88 <_svfiprintf_r+0x1e8>)
 8020df6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020dfa:	2206      	movs	r2, #6
 8020dfc:	f7df fa88 	bl	8000310 <memchr>
 8020e00:	2800      	cmp	r0, #0
 8020e02:	d036      	beq.n	8020e72 <_svfiprintf_r+0x1d2>
 8020e04:	4b21      	ldr	r3, [pc, #132]	@ (8020e8c <_svfiprintf_r+0x1ec>)
 8020e06:	bb1b      	cbnz	r3, 8020e50 <_svfiprintf_r+0x1b0>
 8020e08:	9b03      	ldr	r3, [sp, #12]
 8020e0a:	3307      	adds	r3, #7
 8020e0c:	f023 0307 	bic.w	r3, r3, #7
 8020e10:	3308      	adds	r3, #8
 8020e12:	9303      	str	r3, [sp, #12]
 8020e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e16:	4433      	add	r3, r6
 8020e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8020e1a:	e76a      	b.n	8020cf2 <_svfiprintf_r+0x52>
 8020e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8020e20:	460c      	mov	r4, r1
 8020e22:	2001      	movs	r0, #1
 8020e24:	e7a8      	b.n	8020d78 <_svfiprintf_r+0xd8>
 8020e26:	2300      	movs	r3, #0
 8020e28:	3401      	adds	r4, #1
 8020e2a:	9305      	str	r3, [sp, #20]
 8020e2c:	4619      	mov	r1, r3
 8020e2e:	f04f 0c0a 	mov.w	ip, #10
 8020e32:	4620      	mov	r0, r4
 8020e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020e38:	3a30      	subs	r2, #48	@ 0x30
 8020e3a:	2a09      	cmp	r2, #9
 8020e3c:	d903      	bls.n	8020e46 <_svfiprintf_r+0x1a6>
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	d0c6      	beq.n	8020dd0 <_svfiprintf_r+0x130>
 8020e42:	9105      	str	r1, [sp, #20]
 8020e44:	e7c4      	b.n	8020dd0 <_svfiprintf_r+0x130>
 8020e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8020e4a:	4604      	mov	r4, r0
 8020e4c:	2301      	movs	r3, #1
 8020e4e:	e7f0      	b.n	8020e32 <_svfiprintf_r+0x192>
 8020e50:	ab03      	add	r3, sp, #12
 8020e52:	9300      	str	r3, [sp, #0]
 8020e54:	462a      	mov	r2, r5
 8020e56:	4b0e      	ldr	r3, [pc, #56]	@ (8020e90 <_svfiprintf_r+0x1f0>)
 8020e58:	a904      	add	r1, sp, #16
 8020e5a:	4638      	mov	r0, r7
 8020e5c:	f3af 8000 	nop.w
 8020e60:	1c42      	adds	r2, r0, #1
 8020e62:	4606      	mov	r6, r0
 8020e64:	d1d6      	bne.n	8020e14 <_svfiprintf_r+0x174>
 8020e66:	89ab      	ldrh	r3, [r5, #12]
 8020e68:	065b      	lsls	r3, r3, #25
 8020e6a:	f53f af2d 	bmi.w	8020cc8 <_svfiprintf_r+0x28>
 8020e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020e70:	e72c      	b.n	8020ccc <_svfiprintf_r+0x2c>
 8020e72:	ab03      	add	r3, sp, #12
 8020e74:	9300      	str	r3, [sp, #0]
 8020e76:	462a      	mov	r2, r5
 8020e78:	4b05      	ldr	r3, [pc, #20]	@ (8020e90 <_svfiprintf_r+0x1f0>)
 8020e7a:	a904      	add	r1, sp, #16
 8020e7c:	4638      	mov	r0, r7
 8020e7e:	f000 f879 	bl	8020f74 <_printf_i>
 8020e82:	e7ed      	b.n	8020e60 <_svfiprintf_r+0x1c0>
 8020e84:	08024042 	.word	0x08024042
 8020e88:	0802404c 	.word	0x0802404c
 8020e8c:	00000000 	.word	0x00000000
 8020e90:	08020be9 	.word	0x08020be9
 8020e94:	08024048 	.word	0x08024048

08020e98 <_printf_common>:
 8020e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020e9c:	4616      	mov	r6, r2
 8020e9e:	4698      	mov	r8, r3
 8020ea0:	688a      	ldr	r2, [r1, #8]
 8020ea2:	690b      	ldr	r3, [r1, #16]
 8020ea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020ea8:	4293      	cmp	r3, r2
 8020eaa:	bfb8      	it	lt
 8020eac:	4613      	movlt	r3, r2
 8020eae:	6033      	str	r3, [r6, #0]
 8020eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020eb4:	4607      	mov	r7, r0
 8020eb6:	460c      	mov	r4, r1
 8020eb8:	b10a      	cbz	r2, 8020ebe <_printf_common+0x26>
 8020eba:	3301      	adds	r3, #1
 8020ebc:	6033      	str	r3, [r6, #0]
 8020ebe:	6823      	ldr	r3, [r4, #0]
 8020ec0:	0699      	lsls	r1, r3, #26
 8020ec2:	bf42      	ittt	mi
 8020ec4:	6833      	ldrmi	r3, [r6, #0]
 8020ec6:	3302      	addmi	r3, #2
 8020ec8:	6033      	strmi	r3, [r6, #0]
 8020eca:	6825      	ldr	r5, [r4, #0]
 8020ecc:	f015 0506 	ands.w	r5, r5, #6
 8020ed0:	d106      	bne.n	8020ee0 <_printf_common+0x48>
 8020ed2:	f104 0a19 	add.w	sl, r4, #25
 8020ed6:	68e3      	ldr	r3, [r4, #12]
 8020ed8:	6832      	ldr	r2, [r6, #0]
 8020eda:	1a9b      	subs	r3, r3, r2
 8020edc:	42ab      	cmp	r3, r5
 8020ede:	dc26      	bgt.n	8020f2e <_printf_common+0x96>
 8020ee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020ee4:	6822      	ldr	r2, [r4, #0]
 8020ee6:	3b00      	subs	r3, #0
 8020ee8:	bf18      	it	ne
 8020eea:	2301      	movne	r3, #1
 8020eec:	0692      	lsls	r2, r2, #26
 8020eee:	d42b      	bmi.n	8020f48 <_printf_common+0xb0>
 8020ef0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020ef4:	4641      	mov	r1, r8
 8020ef6:	4638      	mov	r0, r7
 8020ef8:	47c8      	blx	r9
 8020efa:	3001      	adds	r0, #1
 8020efc:	d01e      	beq.n	8020f3c <_printf_common+0xa4>
 8020efe:	6823      	ldr	r3, [r4, #0]
 8020f00:	6922      	ldr	r2, [r4, #16]
 8020f02:	f003 0306 	and.w	r3, r3, #6
 8020f06:	2b04      	cmp	r3, #4
 8020f08:	bf02      	ittt	eq
 8020f0a:	68e5      	ldreq	r5, [r4, #12]
 8020f0c:	6833      	ldreq	r3, [r6, #0]
 8020f0e:	1aed      	subeq	r5, r5, r3
 8020f10:	68a3      	ldr	r3, [r4, #8]
 8020f12:	bf0c      	ite	eq
 8020f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020f18:	2500      	movne	r5, #0
 8020f1a:	4293      	cmp	r3, r2
 8020f1c:	bfc4      	itt	gt
 8020f1e:	1a9b      	subgt	r3, r3, r2
 8020f20:	18ed      	addgt	r5, r5, r3
 8020f22:	2600      	movs	r6, #0
 8020f24:	341a      	adds	r4, #26
 8020f26:	42b5      	cmp	r5, r6
 8020f28:	d11a      	bne.n	8020f60 <_printf_common+0xc8>
 8020f2a:	2000      	movs	r0, #0
 8020f2c:	e008      	b.n	8020f40 <_printf_common+0xa8>
 8020f2e:	2301      	movs	r3, #1
 8020f30:	4652      	mov	r2, sl
 8020f32:	4641      	mov	r1, r8
 8020f34:	4638      	mov	r0, r7
 8020f36:	47c8      	blx	r9
 8020f38:	3001      	adds	r0, #1
 8020f3a:	d103      	bne.n	8020f44 <_printf_common+0xac>
 8020f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f44:	3501      	adds	r5, #1
 8020f46:	e7c6      	b.n	8020ed6 <_printf_common+0x3e>
 8020f48:	18e1      	adds	r1, r4, r3
 8020f4a:	1c5a      	adds	r2, r3, #1
 8020f4c:	2030      	movs	r0, #48	@ 0x30
 8020f4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020f52:	4422      	add	r2, r4
 8020f54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020f58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8020f5c:	3302      	adds	r3, #2
 8020f5e:	e7c7      	b.n	8020ef0 <_printf_common+0x58>
 8020f60:	2301      	movs	r3, #1
 8020f62:	4622      	mov	r2, r4
 8020f64:	4641      	mov	r1, r8
 8020f66:	4638      	mov	r0, r7
 8020f68:	47c8      	blx	r9
 8020f6a:	3001      	adds	r0, #1
 8020f6c:	d0e6      	beq.n	8020f3c <_printf_common+0xa4>
 8020f6e:	3601      	adds	r6, #1
 8020f70:	e7d9      	b.n	8020f26 <_printf_common+0x8e>
	...

08020f74 <_printf_i>:
 8020f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020f78:	7e0f      	ldrb	r7, [r1, #24]
 8020f7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020f7c:	2f78      	cmp	r7, #120	@ 0x78
 8020f7e:	4691      	mov	r9, r2
 8020f80:	4680      	mov	r8, r0
 8020f82:	460c      	mov	r4, r1
 8020f84:	469a      	mov	sl, r3
 8020f86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8020f8a:	d807      	bhi.n	8020f9c <_printf_i+0x28>
 8020f8c:	2f62      	cmp	r7, #98	@ 0x62
 8020f8e:	d80a      	bhi.n	8020fa6 <_printf_i+0x32>
 8020f90:	2f00      	cmp	r7, #0
 8020f92:	f000 80d2 	beq.w	802113a <_printf_i+0x1c6>
 8020f96:	2f58      	cmp	r7, #88	@ 0x58
 8020f98:	f000 80b9 	beq.w	802110e <_printf_i+0x19a>
 8020f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020fa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020fa4:	e03a      	b.n	802101c <_printf_i+0xa8>
 8020fa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020faa:	2b15      	cmp	r3, #21
 8020fac:	d8f6      	bhi.n	8020f9c <_printf_i+0x28>
 8020fae:	a101      	add	r1, pc, #4	@ (adr r1, 8020fb4 <_printf_i+0x40>)
 8020fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020fb4:	0802100d 	.word	0x0802100d
 8020fb8:	08021021 	.word	0x08021021
 8020fbc:	08020f9d 	.word	0x08020f9d
 8020fc0:	08020f9d 	.word	0x08020f9d
 8020fc4:	08020f9d 	.word	0x08020f9d
 8020fc8:	08020f9d 	.word	0x08020f9d
 8020fcc:	08021021 	.word	0x08021021
 8020fd0:	08020f9d 	.word	0x08020f9d
 8020fd4:	08020f9d 	.word	0x08020f9d
 8020fd8:	08020f9d 	.word	0x08020f9d
 8020fdc:	08020f9d 	.word	0x08020f9d
 8020fe0:	08021121 	.word	0x08021121
 8020fe4:	0802104b 	.word	0x0802104b
 8020fe8:	080210db 	.word	0x080210db
 8020fec:	08020f9d 	.word	0x08020f9d
 8020ff0:	08020f9d 	.word	0x08020f9d
 8020ff4:	08021143 	.word	0x08021143
 8020ff8:	08020f9d 	.word	0x08020f9d
 8020ffc:	0802104b 	.word	0x0802104b
 8021000:	08020f9d 	.word	0x08020f9d
 8021004:	08020f9d 	.word	0x08020f9d
 8021008:	080210e3 	.word	0x080210e3
 802100c:	6833      	ldr	r3, [r6, #0]
 802100e:	1d1a      	adds	r2, r3, #4
 8021010:	681b      	ldr	r3, [r3, #0]
 8021012:	6032      	str	r2, [r6, #0]
 8021014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802101c:	2301      	movs	r3, #1
 802101e:	e09d      	b.n	802115c <_printf_i+0x1e8>
 8021020:	6833      	ldr	r3, [r6, #0]
 8021022:	6820      	ldr	r0, [r4, #0]
 8021024:	1d19      	adds	r1, r3, #4
 8021026:	6031      	str	r1, [r6, #0]
 8021028:	0606      	lsls	r6, r0, #24
 802102a:	d501      	bpl.n	8021030 <_printf_i+0xbc>
 802102c:	681d      	ldr	r5, [r3, #0]
 802102e:	e003      	b.n	8021038 <_printf_i+0xc4>
 8021030:	0645      	lsls	r5, r0, #25
 8021032:	d5fb      	bpl.n	802102c <_printf_i+0xb8>
 8021034:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021038:	2d00      	cmp	r5, #0
 802103a:	da03      	bge.n	8021044 <_printf_i+0xd0>
 802103c:	232d      	movs	r3, #45	@ 0x2d
 802103e:	426d      	negs	r5, r5
 8021040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021044:	4859      	ldr	r0, [pc, #356]	@ (80211ac <_printf_i+0x238>)
 8021046:	230a      	movs	r3, #10
 8021048:	e011      	b.n	802106e <_printf_i+0xfa>
 802104a:	6821      	ldr	r1, [r4, #0]
 802104c:	6833      	ldr	r3, [r6, #0]
 802104e:	0608      	lsls	r0, r1, #24
 8021050:	f853 5b04 	ldr.w	r5, [r3], #4
 8021054:	d402      	bmi.n	802105c <_printf_i+0xe8>
 8021056:	0649      	lsls	r1, r1, #25
 8021058:	bf48      	it	mi
 802105a:	b2ad      	uxthmi	r5, r5
 802105c:	2f6f      	cmp	r7, #111	@ 0x6f
 802105e:	4853      	ldr	r0, [pc, #332]	@ (80211ac <_printf_i+0x238>)
 8021060:	6033      	str	r3, [r6, #0]
 8021062:	bf14      	ite	ne
 8021064:	230a      	movne	r3, #10
 8021066:	2308      	moveq	r3, #8
 8021068:	2100      	movs	r1, #0
 802106a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802106e:	6866      	ldr	r6, [r4, #4]
 8021070:	60a6      	str	r6, [r4, #8]
 8021072:	2e00      	cmp	r6, #0
 8021074:	bfa2      	ittt	ge
 8021076:	6821      	ldrge	r1, [r4, #0]
 8021078:	f021 0104 	bicge.w	r1, r1, #4
 802107c:	6021      	strge	r1, [r4, #0]
 802107e:	b90d      	cbnz	r5, 8021084 <_printf_i+0x110>
 8021080:	2e00      	cmp	r6, #0
 8021082:	d04b      	beq.n	802111c <_printf_i+0x1a8>
 8021084:	4616      	mov	r6, r2
 8021086:	fbb5 f1f3 	udiv	r1, r5, r3
 802108a:	fb03 5711 	mls	r7, r3, r1, r5
 802108e:	5dc7      	ldrb	r7, [r0, r7]
 8021090:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021094:	462f      	mov	r7, r5
 8021096:	42bb      	cmp	r3, r7
 8021098:	460d      	mov	r5, r1
 802109a:	d9f4      	bls.n	8021086 <_printf_i+0x112>
 802109c:	2b08      	cmp	r3, #8
 802109e:	d10b      	bne.n	80210b8 <_printf_i+0x144>
 80210a0:	6823      	ldr	r3, [r4, #0]
 80210a2:	07df      	lsls	r7, r3, #31
 80210a4:	d508      	bpl.n	80210b8 <_printf_i+0x144>
 80210a6:	6923      	ldr	r3, [r4, #16]
 80210a8:	6861      	ldr	r1, [r4, #4]
 80210aa:	4299      	cmp	r1, r3
 80210ac:	bfde      	ittt	le
 80210ae:	2330      	movle	r3, #48	@ 0x30
 80210b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80210b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80210b8:	1b92      	subs	r2, r2, r6
 80210ba:	6122      	str	r2, [r4, #16]
 80210bc:	f8cd a000 	str.w	sl, [sp]
 80210c0:	464b      	mov	r3, r9
 80210c2:	aa03      	add	r2, sp, #12
 80210c4:	4621      	mov	r1, r4
 80210c6:	4640      	mov	r0, r8
 80210c8:	f7ff fee6 	bl	8020e98 <_printf_common>
 80210cc:	3001      	adds	r0, #1
 80210ce:	d14a      	bne.n	8021166 <_printf_i+0x1f2>
 80210d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80210d4:	b004      	add	sp, #16
 80210d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80210da:	6823      	ldr	r3, [r4, #0]
 80210dc:	f043 0320 	orr.w	r3, r3, #32
 80210e0:	6023      	str	r3, [r4, #0]
 80210e2:	4833      	ldr	r0, [pc, #204]	@ (80211b0 <_printf_i+0x23c>)
 80210e4:	2778      	movs	r7, #120	@ 0x78
 80210e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80210ea:	6823      	ldr	r3, [r4, #0]
 80210ec:	6831      	ldr	r1, [r6, #0]
 80210ee:	061f      	lsls	r7, r3, #24
 80210f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80210f4:	d402      	bmi.n	80210fc <_printf_i+0x188>
 80210f6:	065f      	lsls	r7, r3, #25
 80210f8:	bf48      	it	mi
 80210fa:	b2ad      	uxthmi	r5, r5
 80210fc:	6031      	str	r1, [r6, #0]
 80210fe:	07d9      	lsls	r1, r3, #31
 8021100:	bf44      	itt	mi
 8021102:	f043 0320 	orrmi.w	r3, r3, #32
 8021106:	6023      	strmi	r3, [r4, #0]
 8021108:	b11d      	cbz	r5, 8021112 <_printf_i+0x19e>
 802110a:	2310      	movs	r3, #16
 802110c:	e7ac      	b.n	8021068 <_printf_i+0xf4>
 802110e:	4827      	ldr	r0, [pc, #156]	@ (80211ac <_printf_i+0x238>)
 8021110:	e7e9      	b.n	80210e6 <_printf_i+0x172>
 8021112:	6823      	ldr	r3, [r4, #0]
 8021114:	f023 0320 	bic.w	r3, r3, #32
 8021118:	6023      	str	r3, [r4, #0]
 802111a:	e7f6      	b.n	802110a <_printf_i+0x196>
 802111c:	4616      	mov	r6, r2
 802111e:	e7bd      	b.n	802109c <_printf_i+0x128>
 8021120:	6833      	ldr	r3, [r6, #0]
 8021122:	6825      	ldr	r5, [r4, #0]
 8021124:	6961      	ldr	r1, [r4, #20]
 8021126:	1d18      	adds	r0, r3, #4
 8021128:	6030      	str	r0, [r6, #0]
 802112a:	062e      	lsls	r6, r5, #24
 802112c:	681b      	ldr	r3, [r3, #0]
 802112e:	d501      	bpl.n	8021134 <_printf_i+0x1c0>
 8021130:	6019      	str	r1, [r3, #0]
 8021132:	e002      	b.n	802113a <_printf_i+0x1c6>
 8021134:	0668      	lsls	r0, r5, #25
 8021136:	d5fb      	bpl.n	8021130 <_printf_i+0x1bc>
 8021138:	8019      	strh	r1, [r3, #0]
 802113a:	2300      	movs	r3, #0
 802113c:	6123      	str	r3, [r4, #16]
 802113e:	4616      	mov	r6, r2
 8021140:	e7bc      	b.n	80210bc <_printf_i+0x148>
 8021142:	6833      	ldr	r3, [r6, #0]
 8021144:	1d1a      	adds	r2, r3, #4
 8021146:	6032      	str	r2, [r6, #0]
 8021148:	681e      	ldr	r6, [r3, #0]
 802114a:	6862      	ldr	r2, [r4, #4]
 802114c:	2100      	movs	r1, #0
 802114e:	4630      	mov	r0, r6
 8021150:	f7df f8de 	bl	8000310 <memchr>
 8021154:	b108      	cbz	r0, 802115a <_printf_i+0x1e6>
 8021156:	1b80      	subs	r0, r0, r6
 8021158:	6060      	str	r0, [r4, #4]
 802115a:	6863      	ldr	r3, [r4, #4]
 802115c:	6123      	str	r3, [r4, #16]
 802115e:	2300      	movs	r3, #0
 8021160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021164:	e7aa      	b.n	80210bc <_printf_i+0x148>
 8021166:	6923      	ldr	r3, [r4, #16]
 8021168:	4632      	mov	r2, r6
 802116a:	4649      	mov	r1, r9
 802116c:	4640      	mov	r0, r8
 802116e:	47d0      	blx	sl
 8021170:	3001      	adds	r0, #1
 8021172:	d0ad      	beq.n	80210d0 <_printf_i+0x15c>
 8021174:	6823      	ldr	r3, [r4, #0]
 8021176:	079b      	lsls	r3, r3, #30
 8021178:	d413      	bmi.n	80211a2 <_printf_i+0x22e>
 802117a:	68e0      	ldr	r0, [r4, #12]
 802117c:	9b03      	ldr	r3, [sp, #12]
 802117e:	4298      	cmp	r0, r3
 8021180:	bfb8      	it	lt
 8021182:	4618      	movlt	r0, r3
 8021184:	e7a6      	b.n	80210d4 <_printf_i+0x160>
 8021186:	2301      	movs	r3, #1
 8021188:	4632      	mov	r2, r6
 802118a:	4649      	mov	r1, r9
 802118c:	4640      	mov	r0, r8
 802118e:	47d0      	blx	sl
 8021190:	3001      	adds	r0, #1
 8021192:	d09d      	beq.n	80210d0 <_printf_i+0x15c>
 8021194:	3501      	adds	r5, #1
 8021196:	68e3      	ldr	r3, [r4, #12]
 8021198:	9903      	ldr	r1, [sp, #12]
 802119a:	1a5b      	subs	r3, r3, r1
 802119c:	42ab      	cmp	r3, r5
 802119e:	dcf2      	bgt.n	8021186 <_printf_i+0x212>
 80211a0:	e7eb      	b.n	802117a <_printf_i+0x206>
 80211a2:	2500      	movs	r5, #0
 80211a4:	f104 0619 	add.w	r6, r4, #25
 80211a8:	e7f5      	b.n	8021196 <_printf_i+0x222>
 80211aa:	bf00      	nop
 80211ac:	08024053 	.word	0x08024053
 80211b0:	08024064 	.word	0x08024064

080211b4 <__sflush_r>:
 80211b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80211b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80211bc:	0716      	lsls	r6, r2, #28
 80211be:	4605      	mov	r5, r0
 80211c0:	460c      	mov	r4, r1
 80211c2:	d454      	bmi.n	802126e <__sflush_r+0xba>
 80211c4:	684b      	ldr	r3, [r1, #4]
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	dc02      	bgt.n	80211d0 <__sflush_r+0x1c>
 80211ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80211cc:	2b00      	cmp	r3, #0
 80211ce:	dd48      	ble.n	8021262 <__sflush_r+0xae>
 80211d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80211d2:	2e00      	cmp	r6, #0
 80211d4:	d045      	beq.n	8021262 <__sflush_r+0xae>
 80211d6:	2300      	movs	r3, #0
 80211d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80211dc:	682f      	ldr	r7, [r5, #0]
 80211de:	6a21      	ldr	r1, [r4, #32]
 80211e0:	602b      	str	r3, [r5, #0]
 80211e2:	d030      	beq.n	8021246 <__sflush_r+0x92>
 80211e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80211e6:	89a3      	ldrh	r3, [r4, #12]
 80211e8:	0759      	lsls	r1, r3, #29
 80211ea:	d505      	bpl.n	80211f8 <__sflush_r+0x44>
 80211ec:	6863      	ldr	r3, [r4, #4]
 80211ee:	1ad2      	subs	r2, r2, r3
 80211f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80211f2:	b10b      	cbz	r3, 80211f8 <__sflush_r+0x44>
 80211f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80211f6:	1ad2      	subs	r2, r2, r3
 80211f8:	2300      	movs	r3, #0
 80211fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80211fc:	6a21      	ldr	r1, [r4, #32]
 80211fe:	4628      	mov	r0, r5
 8021200:	47b0      	blx	r6
 8021202:	1c43      	adds	r3, r0, #1
 8021204:	89a3      	ldrh	r3, [r4, #12]
 8021206:	d106      	bne.n	8021216 <__sflush_r+0x62>
 8021208:	6829      	ldr	r1, [r5, #0]
 802120a:	291d      	cmp	r1, #29
 802120c:	d82b      	bhi.n	8021266 <__sflush_r+0xb2>
 802120e:	4a2a      	ldr	r2, [pc, #168]	@ (80212b8 <__sflush_r+0x104>)
 8021210:	410a      	asrs	r2, r1
 8021212:	07d6      	lsls	r6, r2, #31
 8021214:	d427      	bmi.n	8021266 <__sflush_r+0xb2>
 8021216:	2200      	movs	r2, #0
 8021218:	6062      	str	r2, [r4, #4]
 802121a:	04d9      	lsls	r1, r3, #19
 802121c:	6922      	ldr	r2, [r4, #16]
 802121e:	6022      	str	r2, [r4, #0]
 8021220:	d504      	bpl.n	802122c <__sflush_r+0x78>
 8021222:	1c42      	adds	r2, r0, #1
 8021224:	d101      	bne.n	802122a <__sflush_r+0x76>
 8021226:	682b      	ldr	r3, [r5, #0]
 8021228:	b903      	cbnz	r3, 802122c <__sflush_r+0x78>
 802122a:	6560      	str	r0, [r4, #84]	@ 0x54
 802122c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802122e:	602f      	str	r7, [r5, #0]
 8021230:	b1b9      	cbz	r1, 8021262 <__sflush_r+0xae>
 8021232:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021236:	4299      	cmp	r1, r3
 8021238:	d002      	beq.n	8021240 <__sflush_r+0x8c>
 802123a:	4628      	mov	r0, r5
 802123c:	f7ff fc82 	bl	8020b44 <_free_r>
 8021240:	2300      	movs	r3, #0
 8021242:	6363      	str	r3, [r4, #52]	@ 0x34
 8021244:	e00d      	b.n	8021262 <__sflush_r+0xae>
 8021246:	2301      	movs	r3, #1
 8021248:	4628      	mov	r0, r5
 802124a:	47b0      	blx	r6
 802124c:	4602      	mov	r2, r0
 802124e:	1c50      	adds	r0, r2, #1
 8021250:	d1c9      	bne.n	80211e6 <__sflush_r+0x32>
 8021252:	682b      	ldr	r3, [r5, #0]
 8021254:	2b00      	cmp	r3, #0
 8021256:	d0c6      	beq.n	80211e6 <__sflush_r+0x32>
 8021258:	2b1d      	cmp	r3, #29
 802125a:	d001      	beq.n	8021260 <__sflush_r+0xac>
 802125c:	2b16      	cmp	r3, #22
 802125e:	d11e      	bne.n	802129e <__sflush_r+0xea>
 8021260:	602f      	str	r7, [r5, #0]
 8021262:	2000      	movs	r0, #0
 8021264:	e022      	b.n	80212ac <__sflush_r+0xf8>
 8021266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802126a:	b21b      	sxth	r3, r3
 802126c:	e01b      	b.n	80212a6 <__sflush_r+0xf2>
 802126e:	690f      	ldr	r7, [r1, #16]
 8021270:	2f00      	cmp	r7, #0
 8021272:	d0f6      	beq.n	8021262 <__sflush_r+0xae>
 8021274:	0793      	lsls	r3, r2, #30
 8021276:	680e      	ldr	r6, [r1, #0]
 8021278:	bf08      	it	eq
 802127a:	694b      	ldreq	r3, [r1, #20]
 802127c:	600f      	str	r7, [r1, #0]
 802127e:	bf18      	it	ne
 8021280:	2300      	movne	r3, #0
 8021282:	eba6 0807 	sub.w	r8, r6, r7
 8021286:	608b      	str	r3, [r1, #8]
 8021288:	f1b8 0f00 	cmp.w	r8, #0
 802128c:	dde9      	ble.n	8021262 <__sflush_r+0xae>
 802128e:	6a21      	ldr	r1, [r4, #32]
 8021290:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021292:	4643      	mov	r3, r8
 8021294:	463a      	mov	r2, r7
 8021296:	4628      	mov	r0, r5
 8021298:	47b0      	blx	r6
 802129a:	2800      	cmp	r0, #0
 802129c:	dc08      	bgt.n	80212b0 <__sflush_r+0xfc>
 802129e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80212a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80212a6:	81a3      	strh	r3, [r4, #12]
 80212a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80212ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80212b0:	4407      	add	r7, r0
 80212b2:	eba8 0800 	sub.w	r8, r8, r0
 80212b6:	e7e7      	b.n	8021288 <__sflush_r+0xd4>
 80212b8:	dfbffffe 	.word	0xdfbffffe

080212bc <_fflush_r>:
 80212bc:	b538      	push	{r3, r4, r5, lr}
 80212be:	690b      	ldr	r3, [r1, #16]
 80212c0:	4605      	mov	r5, r0
 80212c2:	460c      	mov	r4, r1
 80212c4:	b913      	cbnz	r3, 80212cc <_fflush_r+0x10>
 80212c6:	2500      	movs	r5, #0
 80212c8:	4628      	mov	r0, r5
 80212ca:	bd38      	pop	{r3, r4, r5, pc}
 80212cc:	b118      	cbz	r0, 80212d6 <_fflush_r+0x1a>
 80212ce:	6a03      	ldr	r3, [r0, #32]
 80212d0:	b90b      	cbnz	r3, 80212d6 <_fflush_r+0x1a>
 80212d2:	f7ff f8e1 	bl	8020498 <__sinit>
 80212d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80212da:	2b00      	cmp	r3, #0
 80212dc:	d0f3      	beq.n	80212c6 <_fflush_r+0xa>
 80212de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80212e0:	07d0      	lsls	r0, r2, #31
 80212e2:	d404      	bmi.n	80212ee <_fflush_r+0x32>
 80212e4:	0599      	lsls	r1, r3, #22
 80212e6:	d402      	bmi.n	80212ee <_fflush_r+0x32>
 80212e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80212ea:	f7ff fbe8 	bl	8020abe <__retarget_lock_acquire_recursive>
 80212ee:	4628      	mov	r0, r5
 80212f0:	4621      	mov	r1, r4
 80212f2:	f7ff ff5f 	bl	80211b4 <__sflush_r>
 80212f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80212f8:	07da      	lsls	r2, r3, #31
 80212fa:	4605      	mov	r5, r0
 80212fc:	d4e4      	bmi.n	80212c8 <_fflush_r+0xc>
 80212fe:	89a3      	ldrh	r3, [r4, #12]
 8021300:	059b      	lsls	r3, r3, #22
 8021302:	d4e1      	bmi.n	80212c8 <_fflush_r+0xc>
 8021304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021306:	f7ff fbdb 	bl	8020ac0 <__retarget_lock_release_recursive>
 802130a:	e7dd      	b.n	80212c8 <_fflush_r+0xc>

0802130c <fiprintf>:
 802130c:	b40e      	push	{r1, r2, r3}
 802130e:	b503      	push	{r0, r1, lr}
 8021310:	4601      	mov	r1, r0
 8021312:	ab03      	add	r3, sp, #12
 8021314:	4805      	ldr	r0, [pc, #20]	@ (802132c <fiprintf+0x20>)
 8021316:	f853 2b04 	ldr.w	r2, [r3], #4
 802131a:	6800      	ldr	r0, [r0, #0]
 802131c:	9301      	str	r3, [sp, #4]
 802131e:	f000 f8bb 	bl	8021498 <_vfiprintf_r>
 8021322:	b002      	add	sp, #8
 8021324:	f85d eb04 	ldr.w	lr, [sp], #4
 8021328:	b003      	add	sp, #12
 802132a:	4770      	bx	lr
 802132c:	240013a0 	.word	0x240013a0

08021330 <__swhatbuf_r>:
 8021330:	b570      	push	{r4, r5, r6, lr}
 8021332:	460c      	mov	r4, r1
 8021334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021338:	2900      	cmp	r1, #0
 802133a:	b096      	sub	sp, #88	@ 0x58
 802133c:	4615      	mov	r5, r2
 802133e:	461e      	mov	r6, r3
 8021340:	da0d      	bge.n	802135e <__swhatbuf_r+0x2e>
 8021342:	89a3      	ldrh	r3, [r4, #12]
 8021344:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021348:	f04f 0100 	mov.w	r1, #0
 802134c:	bf14      	ite	ne
 802134e:	2340      	movne	r3, #64	@ 0x40
 8021350:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021354:	2000      	movs	r0, #0
 8021356:	6031      	str	r1, [r6, #0]
 8021358:	602b      	str	r3, [r5, #0]
 802135a:	b016      	add	sp, #88	@ 0x58
 802135c:	bd70      	pop	{r4, r5, r6, pc}
 802135e:	466a      	mov	r2, sp
 8021360:	f000 f848 	bl	80213f4 <_fstat_r>
 8021364:	2800      	cmp	r0, #0
 8021366:	dbec      	blt.n	8021342 <__swhatbuf_r+0x12>
 8021368:	9901      	ldr	r1, [sp, #4]
 802136a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802136e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021372:	4259      	negs	r1, r3
 8021374:	4159      	adcs	r1, r3
 8021376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802137a:	e7eb      	b.n	8021354 <__swhatbuf_r+0x24>

0802137c <__smakebuf_r>:
 802137c:	898b      	ldrh	r3, [r1, #12]
 802137e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021380:	079d      	lsls	r5, r3, #30
 8021382:	4606      	mov	r6, r0
 8021384:	460c      	mov	r4, r1
 8021386:	d507      	bpl.n	8021398 <__smakebuf_r+0x1c>
 8021388:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802138c:	6023      	str	r3, [r4, #0]
 802138e:	6123      	str	r3, [r4, #16]
 8021390:	2301      	movs	r3, #1
 8021392:	6163      	str	r3, [r4, #20]
 8021394:	b003      	add	sp, #12
 8021396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021398:	ab01      	add	r3, sp, #4
 802139a:	466a      	mov	r2, sp
 802139c:	f7ff ffc8 	bl	8021330 <__swhatbuf_r>
 80213a0:	9f00      	ldr	r7, [sp, #0]
 80213a2:	4605      	mov	r5, r0
 80213a4:	4639      	mov	r1, r7
 80213a6:	4630      	mov	r0, r6
 80213a8:	f7fe fe44 	bl	8020034 <_malloc_r>
 80213ac:	b948      	cbnz	r0, 80213c2 <__smakebuf_r+0x46>
 80213ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80213b2:	059a      	lsls	r2, r3, #22
 80213b4:	d4ee      	bmi.n	8021394 <__smakebuf_r+0x18>
 80213b6:	f023 0303 	bic.w	r3, r3, #3
 80213ba:	f043 0302 	orr.w	r3, r3, #2
 80213be:	81a3      	strh	r3, [r4, #12]
 80213c0:	e7e2      	b.n	8021388 <__smakebuf_r+0xc>
 80213c2:	89a3      	ldrh	r3, [r4, #12]
 80213c4:	6020      	str	r0, [r4, #0]
 80213c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80213ca:	81a3      	strh	r3, [r4, #12]
 80213cc:	9b01      	ldr	r3, [sp, #4]
 80213ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80213d2:	b15b      	cbz	r3, 80213ec <__smakebuf_r+0x70>
 80213d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80213d8:	4630      	mov	r0, r6
 80213da:	f000 f81d 	bl	8021418 <_isatty_r>
 80213de:	b128      	cbz	r0, 80213ec <__smakebuf_r+0x70>
 80213e0:	89a3      	ldrh	r3, [r4, #12]
 80213e2:	f023 0303 	bic.w	r3, r3, #3
 80213e6:	f043 0301 	orr.w	r3, r3, #1
 80213ea:	81a3      	strh	r3, [r4, #12]
 80213ec:	89a3      	ldrh	r3, [r4, #12]
 80213ee:	431d      	orrs	r5, r3
 80213f0:	81a5      	strh	r5, [r4, #12]
 80213f2:	e7cf      	b.n	8021394 <__smakebuf_r+0x18>

080213f4 <_fstat_r>:
 80213f4:	b538      	push	{r3, r4, r5, lr}
 80213f6:	4d07      	ldr	r5, [pc, #28]	@ (8021414 <_fstat_r+0x20>)
 80213f8:	2300      	movs	r3, #0
 80213fa:	4604      	mov	r4, r0
 80213fc:	4608      	mov	r0, r1
 80213fe:	4611      	mov	r1, r2
 8021400:	602b      	str	r3, [r5, #0]
 8021402:	f7e0 fe77 	bl	80020f4 <_fstat>
 8021406:	1c43      	adds	r3, r0, #1
 8021408:	d102      	bne.n	8021410 <_fstat_r+0x1c>
 802140a:	682b      	ldr	r3, [r5, #0]
 802140c:	b103      	cbz	r3, 8021410 <_fstat_r+0x1c>
 802140e:	6023      	str	r3, [r4, #0]
 8021410:	bd38      	pop	{r3, r4, r5, pc}
 8021412:	bf00      	nop
 8021414:	240695d8 	.word	0x240695d8

08021418 <_isatty_r>:
 8021418:	b538      	push	{r3, r4, r5, lr}
 802141a:	4d06      	ldr	r5, [pc, #24]	@ (8021434 <_isatty_r+0x1c>)
 802141c:	2300      	movs	r3, #0
 802141e:	4604      	mov	r4, r0
 8021420:	4608      	mov	r0, r1
 8021422:	602b      	str	r3, [r5, #0]
 8021424:	f7e0 fe76 	bl	8002114 <_isatty>
 8021428:	1c43      	adds	r3, r0, #1
 802142a:	d102      	bne.n	8021432 <_isatty_r+0x1a>
 802142c:	682b      	ldr	r3, [r5, #0]
 802142e:	b103      	cbz	r3, 8021432 <_isatty_r+0x1a>
 8021430:	6023      	str	r3, [r4, #0]
 8021432:	bd38      	pop	{r3, r4, r5, pc}
 8021434:	240695d8 	.word	0x240695d8

08021438 <abort>:
 8021438:	b508      	push	{r3, lr}
 802143a:	2006      	movs	r0, #6
 802143c:	f000 f96c 	bl	8021718 <raise>
 8021440:	2001      	movs	r0, #1
 8021442:	f7e0 fe07 	bl	8002054 <_exit>

08021446 <__sfputc_r>:
 8021446:	6893      	ldr	r3, [r2, #8]
 8021448:	3b01      	subs	r3, #1
 802144a:	2b00      	cmp	r3, #0
 802144c:	b410      	push	{r4}
 802144e:	6093      	str	r3, [r2, #8]
 8021450:	da08      	bge.n	8021464 <__sfputc_r+0x1e>
 8021452:	6994      	ldr	r4, [r2, #24]
 8021454:	42a3      	cmp	r3, r4
 8021456:	db01      	blt.n	802145c <__sfputc_r+0x16>
 8021458:	290a      	cmp	r1, #10
 802145a:	d103      	bne.n	8021464 <__sfputc_r+0x1e>
 802145c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021460:	f7ff b95a 	b.w	8020718 <__swbuf_r>
 8021464:	6813      	ldr	r3, [r2, #0]
 8021466:	1c58      	adds	r0, r3, #1
 8021468:	6010      	str	r0, [r2, #0]
 802146a:	7019      	strb	r1, [r3, #0]
 802146c:	4608      	mov	r0, r1
 802146e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021472:	4770      	bx	lr

08021474 <__sfputs_r>:
 8021474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021476:	4606      	mov	r6, r0
 8021478:	460f      	mov	r7, r1
 802147a:	4614      	mov	r4, r2
 802147c:	18d5      	adds	r5, r2, r3
 802147e:	42ac      	cmp	r4, r5
 8021480:	d101      	bne.n	8021486 <__sfputs_r+0x12>
 8021482:	2000      	movs	r0, #0
 8021484:	e007      	b.n	8021496 <__sfputs_r+0x22>
 8021486:	f814 1b01 	ldrb.w	r1, [r4], #1
 802148a:	463a      	mov	r2, r7
 802148c:	4630      	mov	r0, r6
 802148e:	f7ff ffda 	bl	8021446 <__sfputc_r>
 8021492:	1c43      	adds	r3, r0, #1
 8021494:	d1f3      	bne.n	802147e <__sfputs_r+0xa>
 8021496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021498 <_vfiprintf_r>:
 8021498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802149c:	460d      	mov	r5, r1
 802149e:	b09d      	sub	sp, #116	@ 0x74
 80214a0:	4614      	mov	r4, r2
 80214a2:	4698      	mov	r8, r3
 80214a4:	4606      	mov	r6, r0
 80214a6:	b118      	cbz	r0, 80214b0 <_vfiprintf_r+0x18>
 80214a8:	6a03      	ldr	r3, [r0, #32]
 80214aa:	b90b      	cbnz	r3, 80214b0 <_vfiprintf_r+0x18>
 80214ac:	f7fe fff4 	bl	8020498 <__sinit>
 80214b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80214b2:	07d9      	lsls	r1, r3, #31
 80214b4:	d405      	bmi.n	80214c2 <_vfiprintf_r+0x2a>
 80214b6:	89ab      	ldrh	r3, [r5, #12]
 80214b8:	059a      	lsls	r2, r3, #22
 80214ba:	d402      	bmi.n	80214c2 <_vfiprintf_r+0x2a>
 80214bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80214be:	f7ff fafe 	bl	8020abe <__retarget_lock_acquire_recursive>
 80214c2:	89ab      	ldrh	r3, [r5, #12]
 80214c4:	071b      	lsls	r3, r3, #28
 80214c6:	d501      	bpl.n	80214cc <_vfiprintf_r+0x34>
 80214c8:	692b      	ldr	r3, [r5, #16]
 80214ca:	b99b      	cbnz	r3, 80214f4 <_vfiprintf_r+0x5c>
 80214cc:	4629      	mov	r1, r5
 80214ce:	4630      	mov	r0, r6
 80214d0:	f7ff f960 	bl	8020794 <__swsetup_r>
 80214d4:	b170      	cbz	r0, 80214f4 <_vfiprintf_r+0x5c>
 80214d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80214d8:	07dc      	lsls	r4, r3, #31
 80214da:	d504      	bpl.n	80214e6 <_vfiprintf_r+0x4e>
 80214dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80214e0:	b01d      	add	sp, #116	@ 0x74
 80214e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214e6:	89ab      	ldrh	r3, [r5, #12]
 80214e8:	0598      	lsls	r0, r3, #22
 80214ea:	d4f7      	bmi.n	80214dc <_vfiprintf_r+0x44>
 80214ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80214ee:	f7ff fae7 	bl	8020ac0 <__retarget_lock_release_recursive>
 80214f2:	e7f3      	b.n	80214dc <_vfiprintf_r+0x44>
 80214f4:	2300      	movs	r3, #0
 80214f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80214f8:	2320      	movs	r3, #32
 80214fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80214fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8021502:	2330      	movs	r3, #48	@ 0x30
 8021504:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80216b4 <_vfiprintf_r+0x21c>
 8021508:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802150c:	f04f 0901 	mov.w	r9, #1
 8021510:	4623      	mov	r3, r4
 8021512:	469a      	mov	sl, r3
 8021514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021518:	b10a      	cbz	r2, 802151e <_vfiprintf_r+0x86>
 802151a:	2a25      	cmp	r2, #37	@ 0x25
 802151c:	d1f9      	bne.n	8021512 <_vfiprintf_r+0x7a>
 802151e:	ebba 0b04 	subs.w	fp, sl, r4
 8021522:	d00b      	beq.n	802153c <_vfiprintf_r+0xa4>
 8021524:	465b      	mov	r3, fp
 8021526:	4622      	mov	r2, r4
 8021528:	4629      	mov	r1, r5
 802152a:	4630      	mov	r0, r6
 802152c:	f7ff ffa2 	bl	8021474 <__sfputs_r>
 8021530:	3001      	adds	r0, #1
 8021532:	f000 80a7 	beq.w	8021684 <_vfiprintf_r+0x1ec>
 8021536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021538:	445a      	add	r2, fp
 802153a:	9209      	str	r2, [sp, #36]	@ 0x24
 802153c:	f89a 3000 	ldrb.w	r3, [sl]
 8021540:	2b00      	cmp	r3, #0
 8021542:	f000 809f 	beq.w	8021684 <_vfiprintf_r+0x1ec>
 8021546:	2300      	movs	r3, #0
 8021548:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802154c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021550:	f10a 0a01 	add.w	sl, sl, #1
 8021554:	9304      	str	r3, [sp, #16]
 8021556:	9307      	str	r3, [sp, #28]
 8021558:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802155c:	931a      	str	r3, [sp, #104]	@ 0x68
 802155e:	4654      	mov	r4, sl
 8021560:	2205      	movs	r2, #5
 8021562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021566:	4853      	ldr	r0, [pc, #332]	@ (80216b4 <_vfiprintf_r+0x21c>)
 8021568:	f7de fed2 	bl	8000310 <memchr>
 802156c:	9a04      	ldr	r2, [sp, #16]
 802156e:	b9d8      	cbnz	r0, 80215a8 <_vfiprintf_r+0x110>
 8021570:	06d1      	lsls	r1, r2, #27
 8021572:	bf44      	itt	mi
 8021574:	2320      	movmi	r3, #32
 8021576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802157a:	0713      	lsls	r3, r2, #28
 802157c:	bf44      	itt	mi
 802157e:	232b      	movmi	r3, #43	@ 0x2b
 8021580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021584:	f89a 3000 	ldrb.w	r3, [sl]
 8021588:	2b2a      	cmp	r3, #42	@ 0x2a
 802158a:	d015      	beq.n	80215b8 <_vfiprintf_r+0x120>
 802158c:	9a07      	ldr	r2, [sp, #28]
 802158e:	4654      	mov	r4, sl
 8021590:	2000      	movs	r0, #0
 8021592:	f04f 0c0a 	mov.w	ip, #10
 8021596:	4621      	mov	r1, r4
 8021598:	f811 3b01 	ldrb.w	r3, [r1], #1
 802159c:	3b30      	subs	r3, #48	@ 0x30
 802159e:	2b09      	cmp	r3, #9
 80215a0:	d94b      	bls.n	802163a <_vfiprintf_r+0x1a2>
 80215a2:	b1b0      	cbz	r0, 80215d2 <_vfiprintf_r+0x13a>
 80215a4:	9207      	str	r2, [sp, #28]
 80215a6:	e014      	b.n	80215d2 <_vfiprintf_r+0x13a>
 80215a8:	eba0 0308 	sub.w	r3, r0, r8
 80215ac:	fa09 f303 	lsl.w	r3, r9, r3
 80215b0:	4313      	orrs	r3, r2
 80215b2:	9304      	str	r3, [sp, #16]
 80215b4:	46a2      	mov	sl, r4
 80215b6:	e7d2      	b.n	802155e <_vfiprintf_r+0xc6>
 80215b8:	9b03      	ldr	r3, [sp, #12]
 80215ba:	1d19      	adds	r1, r3, #4
 80215bc:	681b      	ldr	r3, [r3, #0]
 80215be:	9103      	str	r1, [sp, #12]
 80215c0:	2b00      	cmp	r3, #0
 80215c2:	bfbb      	ittet	lt
 80215c4:	425b      	neglt	r3, r3
 80215c6:	f042 0202 	orrlt.w	r2, r2, #2
 80215ca:	9307      	strge	r3, [sp, #28]
 80215cc:	9307      	strlt	r3, [sp, #28]
 80215ce:	bfb8      	it	lt
 80215d0:	9204      	strlt	r2, [sp, #16]
 80215d2:	7823      	ldrb	r3, [r4, #0]
 80215d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80215d6:	d10a      	bne.n	80215ee <_vfiprintf_r+0x156>
 80215d8:	7863      	ldrb	r3, [r4, #1]
 80215da:	2b2a      	cmp	r3, #42	@ 0x2a
 80215dc:	d132      	bne.n	8021644 <_vfiprintf_r+0x1ac>
 80215de:	9b03      	ldr	r3, [sp, #12]
 80215e0:	1d1a      	adds	r2, r3, #4
 80215e2:	681b      	ldr	r3, [r3, #0]
 80215e4:	9203      	str	r2, [sp, #12]
 80215e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80215ea:	3402      	adds	r4, #2
 80215ec:	9305      	str	r3, [sp, #20]
 80215ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80216c4 <_vfiprintf_r+0x22c>
 80215f2:	7821      	ldrb	r1, [r4, #0]
 80215f4:	2203      	movs	r2, #3
 80215f6:	4650      	mov	r0, sl
 80215f8:	f7de fe8a 	bl	8000310 <memchr>
 80215fc:	b138      	cbz	r0, 802160e <_vfiprintf_r+0x176>
 80215fe:	9b04      	ldr	r3, [sp, #16]
 8021600:	eba0 000a 	sub.w	r0, r0, sl
 8021604:	2240      	movs	r2, #64	@ 0x40
 8021606:	4082      	lsls	r2, r0
 8021608:	4313      	orrs	r3, r2
 802160a:	3401      	adds	r4, #1
 802160c:	9304      	str	r3, [sp, #16]
 802160e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021612:	4829      	ldr	r0, [pc, #164]	@ (80216b8 <_vfiprintf_r+0x220>)
 8021614:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021618:	2206      	movs	r2, #6
 802161a:	f7de fe79 	bl	8000310 <memchr>
 802161e:	2800      	cmp	r0, #0
 8021620:	d03f      	beq.n	80216a2 <_vfiprintf_r+0x20a>
 8021622:	4b26      	ldr	r3, [pc, #152]	@ (80216bc <_vfiprintf_r+0x224>)
 8021624:	bb1b      	cbnz	r3, 802166e <_vfiprintf_r+0x1d6>
 8021626:	9b03      	ldr	r3, [sp, #12]
 8021628:	3307      	adds	r3, #7
 802162a:	f023 0307 	bic.w	r3, r3, #7
 802162e:	3308      	adds	r3, #8
 8021630:	9303      	str	r3, [sp, #12]
 8021632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021634:	443b      	add	r3, r7
 8021636:	9309      	str	r3, [sp, #36]	@ 0x24
 8021638:	e76a      	b.n	8021510 <_vfiprintf_r+0x78>
 802163a:	fb0c 3202 	mla	r2, ip, r2, r3
 802163e:	460c      	mov	r4, r1
 8021640:	2001      	movs	r0, #1
 8021642:	e7a8      	b.n	8021596 <_vfiprintf_r+0xfe>
 8021644:	2300      	movs	r3, #0
 8021646:	3401      	adds	r4, #1
 8021648:	9305      	str	r3, [sp, #20]
 802164a:	4619      	mov	r1, r3
 802164c:	f04f 0c0a 	mov.w	ip, #10
 8021650:	4620      	mov	r0, r4
 8021652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021656:	3a30      	subs	r2, #48	@ 0x30
 8021658:	2a09      	cmp	r2, #9
 802165a:	d903      	bls.n	8021664 <_vfiprintf_r+0x1cc>
 802165c:	2b00      	cmp	r3, #0
 802165e:	d0c6      	beq.n	80215ee <_vfiprintf_r+0x156>
 8021660:	9105      	str	r1, [sp, #20]
 8021662:	e7c4      	b.n	80215ee <_vfiprintf_r+0x156>
 8021664:	fb0c 2101 	mla	r1, ip, r1, r2
 8021668:	4604      	mov	r4, r0
 802166a:	2301      	movs	r3, #1
 802166c:	e7f0      	b.n	8021650 <_vfiprintf_r+0x1b8>
 802166e:	ab03      	add	r3, sp, #12
 8021670:	9300      	str	r3, [sp, #0]
 8021672:	462a      	mov	r2, r5
 8021674:	4b12      	ldr	r3, [pc, #72]	@ (80216c0 <_vfiprintf_r+0x228>)
 8021676:	a904      	add	r1, sp, #16
 8021678:	4630      	mov	r0, r6
 802167a:	f3af 8000 	nop.w
 802167e:	4607      	mov	r7, r0
 8021680:	1c78      	adds	r0, r7, #1
 8021682:	d1d6      	bne.n	8021632 <_vfiprintf_r+0x19a>
 8021684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021686:	07d9      	lsls	r1, r3, #31
 8021688:	d405      	bmi.n	8021696 <_vfiprintf_r+0x1fe>
 802168a:	89ab      	ldrh	r3, [r5, #12]
 802168c:	059a      	lsls	r2, r3, #22
 802168e:	d402      	bmi.n	8021696 <_vfiprintf_r+0x1fe>
 8021690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021692:	f7ff fa15 	bl	8020ac0 <__retarget_lock_release_recursive>
 8021696:	89ab      	ldrh	r3, [r5, #12]
 8021698:	065b      	lsls	r3, r3, #25
 802169a:	f53f af1f 	bmi.w	80214dc <_vfiprintf_r+0x44>
 802169e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80216a0:	e71e      	b.n	80214e0 <_vfiprintf_r+0x48>
 80216a2:	ab03      	add	r3, sp, #12
 80216a4:	9300      	str	r3, [sp, #0]
 80216a6:	462a      	mov	r2, r5
 80216a8:	4b05      	ldr	r3, [pc, #20]	@ (80216c0 <_vfiprintf_r+0x228>)
 80216aa:	a904      	add	r1, sp, #16
 80216ac:	4630      	mov	r0, r6
 80216ae:	f7ff fc61 	bl	8020f74 <_printf_i>
 80216b2:	e7e4      	b.n	802167e <_vfiprintf_r+0x1e6>
 80216b4:	08024042 	.word	0x08024042
 80216b8:	0802404c 	.word	0x0802404c
 80216bc:	00000000 	.word	0x00000000
 80216c0:	08021475 	.word	0x08021475
 80216c4:	08024048 	.word	0x08024048

080216c8 <_raise_r>:
 80216c8:	291f      	cmp	r1, #31
 80216ca:	b538      	push	{r3, r4, r5, lr}
 80216cc:	4605      	mov	r5, r0
 80216ce:	460c      	mov	r4, r1
 80216d0:	d904      	bls.n	80216dc <_raise_r+0x14>
 80216d2:	2316      	movs	r3, #22
 80216d4:	6003      	str	r3, [r0, #0]
 80216d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80216da:	bd38      	pop	{r3, r4, r5, pc}
 80216dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80216de:	b112      	cbz	r2, 80216e6 <_raise_r+0x1e>
 80216e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80216e4:	b94b      	cbnz	r3, 80216fa <_raise_r+0x32>
 80216e6:	4628      	mov	r0, r5
 80216e8:	f000 f830 	bl	802174c <_getpid_r>
 80216ec:	4622      	mov	r2, r4
 80216ee:	4601      	mov	r1, r0
 80216f0:	4628      	mov	r0, r5
 80216f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80216f6:	f000 b817 	b.w	8021728 <_kill_r>
 80216fa:	2b01      	cmp	r3, #1
 80216fc:	d00a      	beq.n	8021714 <_raise_r+0x4c>
 80216fe:	1c59      	adds	r1, r3, #1
 8021700:	d103      	bne.n	802170a <_raise_r+0x42>
 8021702:	2316      	movs	r3, #22
 8021704:	6003      	str	r3, [r0, #0]
 8021706:	2001      	movs	r0, #1
 8021708:	e7e7      	b.n	80216da <_raise_r+0x12>
 802170a:	2100      	movs	r1, #0
 802170c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021710:	4620      	mov	r0, r4
 8021712:	4798      	blx	r3
 8021714:	2000      	movs	r0, #0
 8021716:	e7e0      	b.n	80216da <_raise_r+0x12>

08021718 <raise>:
 8021718:	4b02      	ldr	r3, [pc, #8]	@ (8021724 <raise+0xc>)
 802171a:	4601      	mov	r1, r0
 802171c:	6818      	ldr	r0, [r3, #0]
 802171e:	f7ff bfd3 	b.w	80216c8 <_raise_r>
 8021722:	bf00      	nop
 8021724:	240013a0 	.word	0x240013a0

08021728 <_kill_r>:
 8021728:	b538      	push	{r3, r4, r5, lr}
 802172a:	4d07      	ldr	r5, [pc, #28]	@ (8021748 <_kill_r+0x20>)
 802172c:	2300      	movs	r3, #0
 802172e:	4604      	mov	r4, r0
 8021730:	4608      	mov	r0, r1
 8021732:	4611      	mov	r1, r2
 8021734:	602b      	str	r3, [r5, #0]
 8021736:	f7e0 fc7d 	bl	8002034 <_kill>
 802173a:	1c43      	adds	r3, r0, #1
 802173c:	d102      	bne.n	8021744 <_kill_r+0x1c>
 802173e:	682b      	ldr	r3, [r5, #0]
 8021740:	b103      	cbz	r3, 8021744 <_kill_r+0x1c>
 8021742:	6023      	str	r3, [r4, #0]
 8021744:	bd38      	pop	{r3, r4, r5, pc}
 8021746:	bf00      	nop
 8021748:	240695d8 	.word	0x240695d8

0802174c <_getpid_r>:
 802174c:	f7e0 bc6a 	b.w	8002024 <_getpid>

08021750 <_init>:
 8021750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021752:	bf00      	nop
 8021754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021756:	bc08      	pop	{r3}
 8021758:	469e      	mov	lr, r3
 802175a:	4770      	bx	lr

0802175c <_fini>:
 802175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802175e:	bf00      	nop
 8021760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021762:	bc08      	pop	{r3}
 8021764:	469e      	mov	lr, r3
 8021766:	4770      	bx	lr
