
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d08  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d30  08013fa8  08013fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015cd8  08015cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000044  08015ce0  08015ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015d24  08015d24  00016d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00001308  24000000  08015d28  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0003214c  24001308  08017030  00018308  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24033454  08017030  00018454  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00018308  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002aa1a  00000000  00000000  00018336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000051e1  00000000  00000000  00042d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e60  00000000  00000000  00047f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001779  00000000  00000000  00049d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f224  00000000  00000000  0004b511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002efa9  00000000  00000000  0008a735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018f1e6  00000000  00000000  000b96de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  002488c4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000087d0  00000000  00000000  0024893c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  0025110c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001308 	.word	0x24001308
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013f90 	.word	0x08013f90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400130c 	.word	0x2400130c
 80002dc:	08013f90 	.word	0x08013f90

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_uldivmod>:
 8000304:	b953      	cbnz	r3, 800031c <__aeabi_uldivmod+0x18>
 8000306:	b94a      	cbnz	r2, 800031c <__aeabi_uldivmod+0x18>
 8000308:	2900      	cmp	r1, #0
 800030a:	bf08      	it	eq
 800030c:	2800      	cmpeq	r0, #0
 800030e:	bf1c      	itt	ne
 8000310:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000314:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000318:	f000 b96a 	b.w	80005f0 <__aeabi_idiv0>
 800031c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000324:	f000 f806 	bl	8000334 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4770      	bx	lr

08000334 <__udivmoddi4>:
 8000334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000338:	9d08      	ldr	r5, [sp, #32]
 800033a:	460c      	mov	r4, r1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d14e      	bne.n	80003de <__udivmoddi4+0xaa>
 8000340:	4694      	mov	ip, r2
 8000342:	458c      	cmp	ip, r1
 8000344:	4686      	mov	lr, r0
 8000346:	fab2 f282 	clz	r2, r2
 800034a:	d962      	bls.n	8000412 <__udivmoddi4+0xde>
 800034c:	b14a      	cbz	r2, 8000362 <__udivmoddi4+0x2e>
 800034e:	f1c2 0320 	rsb	r3, r2, #32
 8000352:	4091      	lsls	r1, r2
 8000354:	fa20 f303 	lsr.w	r3, r0, r3
 8000358:	fa0c fc02 	lsl.w	ip, ip, r2
 800035c:	4319      	orrs	r1, r3
 800035e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f f68c 	uxth.w	r6, ip
 800036a:	fbb1 f4f7 	udiv	r4, r1, r7
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb07 1114 	mls	r1, r7, r4, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb04 f106 	mul.w	r1, r4, r6
 800037e:	4299      	cmp	r1, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x64>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800038a:	f080 8112 	bcs.w	80005b2 <__udivmoddi4+0x27e>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 810f 	bls.w	80005b2 <__udivmoddi4+0x27e>
 8000394:	3c02      	subs	r4, #2
 8000396:	4463      	add	r3, ip
 8000398:	1a59      	subs	r1, r3, r1
 800039a:	fa1f f38e 	uxth.w	r3, lr
 800039e:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a2:	fb07 1110 	mls	r1, r7, r0, r1
 80003a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003aa:	fb00 f606 	mul.w	r6, r0, r6
 80003ae:	429e      	cmp	r6, r3
 80003b0:	d90a      	bls.n	80003c8 <__udivmoddi4+0x94>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003ba:	f080 80fc 	bcs.w	80005b6 <__udivmoddi4+0x282>
 80003be:	429e      	cmp	r6, r3
 80003c0:	f240 80f9 	bls.w	80005b6 <__udivmoddi4+0x282>
 80003c4:	4463      	add	r3, ip
 80003c6:	3802      	subs	r0, #2
 80003c8:	1b9b      	subs	r3, r3, r6
 80003ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ce:	2100      	movs	r1, #0
 80003d0:	b11d      	cbz	r5, 80003da <__udivmoddi4+0xa6>
 80003d2:	40d3      	lsrs	r3, r2
 80003d4:	2200      	movs	r2, #0
 80003d6:	e9c5 3200 	strd	r3, r2, [r5]
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	428b      	cmp	r3, r1
 80003e0:	d905      	bls.n	80003ee <__udivmoddi4+0xba>
 80003e2:	b10d      	cbz	r5, 80003e8 <__udivmoddi4+0xb4>
 80003e4:	e9c5 0100 	strd	r0, r1, [r5]
 80003e8:	2100      	movs	r1, #0
 80003ea:	4608      	mov	r0, r1
 80003ec:	e7f5      	b.n	80003da <__udivmoddi4+0xa6>
 80003ee:	fab3 f183 	clz	r1, r3
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d146      	bne.n	8000484 <__udivmoddi4+0x150>
 80003f6:	42a3      	cmp	r3, r4
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xcc>
 80003fa:	4290      	cmp	r0, r2
 80003fc:	f0c0 80f0 	bcc.w	80005e0 <__udivmoddi4+0x2ac>
 8000400:	1a86      	subs	r6, r0, r2
 8000402:	eb64 0303 	sbc.w	r3, r4, r3
 8000406:	2001      	movs	r0, #1
 8000408:	2d00      	cmp	r5, #0
 800040a:	d0e6      	beq.n	80003da <__udivmoddi4+0xa6>
 800040c:	e9c5 6300 	strd	r6, r3, [r5]
 8000410:	e7e3      	b.n	80003da <__udivmoddi4+0xa6>
 8000412:	2a00      	cmp	r2, #0
 8000414:	f040 8090 	bne.w	8000538 <__udivmoddi4+0x204>
 8000418:	eba1 040c 	sub.w	r4, r1, ip
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	2101      	movs	r1, #1
 8000426:	fbb4 f6f8 	udiv	r6, r4, r8
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb08 4416 	mls	r4, r8, r6, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb07 f006 	mul.w	r0, r7, r6
 800043a:	4298      	cmp	r0, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x11c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x11a>
 8000448:	4298      	cmp	r0, r3
 800044a:	f200 80cd 	bhi.w	80005e8 <__udivmoddi4+0x2b4>
 800044e:	4626      	mov	r6, r4
 8000450:	1a1c      	subs	r4, r3, r0
 8000452:	fa1f f38e 	uxth.w	r3, lr
 8000456:	fbb4 f0f8 	udiv	r0, r4, r8
 800045a:	fb08 4410 	mls	r4, r8, r0, r4
 800045e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000462:	fb00 f707 	mul.w	r7, r0, r7
 8000466:	429f      	cmp	r7, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x148>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x146>
 8000474:	429f      	cmp	r7, r3
 8000476:	f200 80b0 	bhi.w	80005da <__udivmoddi4+0x2a6>
 800047a:	4620      	mov	r0, r4
 800047c:	1bdb      	subs	r3, r3, r7
 800047e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000482:	e7a5      	b.n	80003d0 <__udivmoddi4+0x9c>
 8000484:	f1c1 0620 	rsb	r6, r1, #32
 8000488:	408b      	lsls	r3, r1
 800048a:	fa22 f706 	lsr.w	r7, r2, r6
 800048e:	431f      	orrs	r7, r3
 8000490:	fa20 fc06 	lsr.w	ip, r0, r6
 8000494:	fa04 f301 	lsl.w	r3, r4, r1
 8000498:	ea43 030c 	orr.w	r3, r3, ip
 800049c:	40f4      	lsrs	r4, r6
 800049e:	fa00 f801 	lsl.w	r8, r0, r1
 80004a2:	0c38      	lsrs	r0, r7, #16
 80004a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004a8:	fbb4 fef0 	udiv	lr, r4, r0
 80004ac:	fa1f fc87 	uxth.w	ip, r7
 80004b0:	fb00 441e 	mls	r4, r0, lr, r4
 80004b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b8:	fb0e f90c 	mul.w	r9, lr, ip
 80004bc:	45a1      	cmp	r9, r4
 80004be:	fa02 f201 	lsl.w	r2, r2, r1
 80004c2:	d90a      	bls.n	80004da <__udivmoddi4+0x1a6>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004ca:	f080 8084 	bcs.w	80005d6 <__udivmoddi4+0x2a2>
 80004ce:	45a1      	cmp	r9, r4
 80004d0:	f240 8081 	bls.w	80005d6 <__udivmoddi4+0x2a2>
 80004d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004d8:	443c      	add	r4, r7
 80004da:	eba4 0409 	sub.w	r4, r4, r9
 80004de:	fa1f f983 	uxth.w	r9, r3
 80004e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004e6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f2:	45a4      	cmp	ip, r4
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1d2>
 80004f6:	193c      	adds	r4, r7, r4
 80004f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004fc:	d267      	bcs.n	80005ce <__udivmoddi4+0x29a>
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d965      	bls.n	80005ce <__udivmoddi4+0x29a>
 8000502:	3b02      	subs	r3, #2
 8000504:	443c      	add	r4, r7
 8000506:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800050a:	fba0 9302 	umull	r9, r3, r0, r2
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	429c      	cmp	r4, r3
 8000514:	46ce      	mov	lr, r9
 8000516:	469c      	mov	ip, r3
 8000518:	d351      	bcc.n	80005be <__udivmoddi4+0x28a>
 800051a:	d04e      	beq.n	80005ba <__udivmoddi4+0x286>
 800051c:	b155      	cbz	r5, 8000534 <__udivmoddi4+0x200>
 800051e:	ebb8 030e 	subs.w	r3, r8, lr
 8000522:	eb64 040c 	sbc.w	r4, r4, ip
 8000526:	fa04 f606 	lsl.w	r6, r4, r6
 800052a:	40cb      	lsrs	r3, r1
 800052c:	431e      	orrs	r6, r3
 800052e:	40cc      	lsrs	r4, r1
 8000530:	e9c5 6400 	strd	r6, r4, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	e750      	b.n	80003da <__udivmoddi4+0xa6>
 8000538:	f1c2 0320 	rsb	r3, r2, #32
 800053c:	fa20 f103 	lsr.w	r1, r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa24 f303 	lsr.w	r3, r4, r3
 8000548:	4094      	lsls	r4, r2
 800054a:	430c      	orrs	r4, r1
 800054c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000550:	fa00 fe02 	lsl.w	lr, r0, r2
 8000554:	fa1f f78c 	uxth.w	r7, ip
 8000558:	fbb3 f0f8 	udiv	r0, r3, r8
 800055c:	fb08 3110 	mls	r1, r8, r0, r3
 8000560:	0c23      	lsrs	r3, r4, #16
 8000562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000566:	fb00 f107 	mul.w	r1, r0, r7
 800056a:	4299      	cmp	r1, r3
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x24c>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000576:	d22c      	bcs.n	80005d2 <__udivmoddi4+0x29e>
 8000578:	4299      	cmp	r1, r3
 800057a:	d92a      	bls.n	80005d2 <__udivmoddi4+0x29e>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1a5b      	subs	r3, r3, r1
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb3 f1f8 	udiv	r1, r3, r8
 8000588:	fb08 3311 	mls	r3, r8, r1, r3
 800058c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000590:	fb01 f307 	mul.w	r3, r1, r7
 8000594:	42a3      	cmp	r3, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x276>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a0:	d213      	bcs.n	80005ca <__udivmoddi4+0x296>
 80005a2:	42a3      	cmp	r3, r4
 80005a4:	d911      	bls.n	80005ca <__udivmoddi4+0x296>
 80005a6:	3902      	subs	r1, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	1ae4      	subs	r4, r4, r3
 80005ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b0:	e739      	b.n	8000426 <__udivmoddi4+0xf2>
 80005b2:	4604      	mov	r4, r0
 80005b4:	e6f0      	b.n	8000398 <__udivmoddi4+0x64>
 80005b6:	4608      	mov	r0, r1
 80005b8:	e706      	b.n	80003c8 <__udivmoddi4+0x94>
 80005ba:	45c8      	cmp	r8, r9
 80005bc:	d2ae      	bcs.n	800051c <__udivmoddi4+0x1e8>
 80005be:	ebb9 0e02 	subs.w	lr, r9, r2
 80005c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7a8      	b.n	800051c <__udivmoddi4+0x1e8>
 80005ca:	4631      	mov	r1, r6
 80005cc:	e7ed      	b.n	80005aa <__udivmoddi4+0x276>
 80005ce:	4603      	mov	r3, r0
 80005d0:	e799      	b.n	8000506 <__udivmoddi4+0x1d2>
 80005d2:	4630      	mov	r0, r6
 80005d4:	e7d4      	b.n	8000580 <__udivmoddi4+0x24c>
 80005d6:	46d6      	mov	lr, sl
 80005d8:	e77f      	b.n	80004da <__udivmoddi4+0x1a6>
 80005da:	4463      	add	r3, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e74d      	b.n	800047c <__udivmoddi4+0x148>
 80005e0:	4606      	mov	r6, r0
 80005e2:	4623      	mov	r3, r4
 80005e4:	4608      	mov	r0, r1
 80005e6:	e70f      	b.n	8000408 <__udivmoddi4+0xd4>
 80005e8:	3e02      	subs	r6, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	e730      	b.n	8000450 <__udivmoddi4+0x11c>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000618:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800061a:	4a38      	ldr	r2, [pc, #224]	@ (80006fc <MX_ADC1_Init+0x108>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800061e:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000620:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000626:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800062e:	2201      	movs	r2, #1
 8000630:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000634:	2204      	movs	r2, #4
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000640:	2201      	movs	r2, #1
 8000642:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000644:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000646:	2202      	movs	r2, #2
 8000648:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800065e:	2203      	movs	r2, #3
 8000660:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800066e:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000676:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000678:	f001 ff64 	bl	8002544 <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000682:	f000 fd3b 	bl	80010fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000692:	f002 ff87 	bl	80035a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800069c:	f000 fd2e 	bl	80010fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_ADC1_Init+0x10c>)
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2306      	movs	r3, #6
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80006a8:	2306      	movs	r3, #6
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ac:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006c4:	f002 f9c2 	bl	8002a4c <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ce:	f000 fd15 	bl	80010fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_ADC1_Init+0x110>)
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006d6:	230c      	movs	r3, #12
 80006d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006e0:	f002 f9b4 	bl	8002a4c <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006ea:	f000 fd07 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24001324 	.word	0x24001324
 80006fc:	40022000 	.word	0x40022000
 8000700:	19200040 	.word	0x19200040
 8000704:	08600004 	.word	0x08600004

08000708 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ba      	sub	sp, #232	@ 0xe8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	22c0      	movs	r2, #192	@ 0xc0
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f013 f9bf 	bl	8013aac <memset>
  if(adcHandle->Instance==ADC1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a45      	ldr	r2, [pc, #276]	@ (8000848 <HAL_ADC_MspInit+0x140>)
 8000734:	4293      	cmp	r3, r2
 8000736:	f040 8083 	bne.w	8000840 <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 800074a:	2325      	movs	r3, #37	@ 0x25
 800074c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800075e:	2320      	movs	r3, #32
 8000760:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4618      	mov	r0, r3
 8000774:	f007 f956 	bl	8007a24 <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800077e:	f000 fcbd 	bl	80010fc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000788:	4a30      	ldr	r2, [pc, #192]	@ (800084c <HAL_ADC_MspInit+0x144>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000792:	4b2e      	ldr	r3, [pc, #184]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000798:	f003 0320 	and.w	r3, r3, #32
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a0:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	4a29      	ldr	r2, [pc, #164]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d6:	4619      	mov	r1, r3
 80007d8:	481d      	ldr	r0, [pc, #116]	@ (8000850 <HAL_ADC_MspInit+0x148>)
 80007da:	f005 fedd 	bl	8006598 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000858 <HAL_ADC_MspInit+0x150>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e6:	2209      	movs	r2, #9
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000800:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000804:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000808:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000814:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000818:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800081c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000826:	f003 f87b 	bl	8003920 <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8000830:	f000 fc64 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000838:	64da      	str	r2, [r3, #76]	@ 0x4c
 800083a:	4a06      	ldr	r2, [pc, #24]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	37e8      	adds	r7, #232	@ 0xe8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40022000 	.word	0x40022000
 800084c:	58024400 	.word	0x58024400
 8000850:	58021400 	.word	0x58021400
 8000854:	24001388 	.word	0x24001388
 8000858:	40020410 	.word	0x40020410

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000868:	4a1f      	ldr	r2, [pc, #124]	@ (80008e8 <MX_DMA_Init+0x8c>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000886:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	200b      	movs	r0, #11
 80008a4:	f003 f814 	bl	80038d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008a8:	200b      	movs	r0, #11
 80008aa:	f003 f82b 	bl	8003904 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	200c      	movs	r0, #12
 80008b4:	f003 f80c 	bl	80038d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008b8:	200c      	movs	r0, #12
 80008ba:	f003 f823 	bl	8003904 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	2039      	movs	r0, #57	@ 0x39
 80008c4:	f003 f804 	bl	80038d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008c8:	2039      	movs	r0, #57	@ 0x39
 80008ca:	f003 f81b 	bl	8003904 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203a      	movs	r0, #58	@ 0x3a
 80008d4:	f002 fffc 	bl	80038d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008d8:	203a      	movs	r0, #58	@ 0x3a
 80008da:	f003 f813 	bl	8003904 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	58024400 	.word	0x58024400

080008ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 80008f0:	480a      	ldr	r0, [pc, #40]	@ (800091c <MX_FREERTOS_Init+0x30>)
 80008f2:	f00c facc 	bl	800ce8e <osMutexNew>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <MX_FREERTOS_Init+0x34>)
 80008fa:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <MX_FREERTOS_Init+0x38>)
 80008fe:	f00c fac6 	bl	800ce8e <osMutexNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <MX_FREERTOS_Init+0x3c>)
 8000906:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8000908:	4a08      	ldr	r2, [pc, #32]	@ (800092c <MX_FREERTOS_Init+0x40>)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <MX_FREERTOS_Init+0x44>)
 800090e:	f00c f920 	bl	800cb52 <osThreadNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <MX_FREERTOS_Init+0x48>)
 8000916:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	0801402c 	.word	0x0801402c
 8000920:	24001408 	.word	0x24001408
 8000924:	0801403c 	.word	0x0801403c
 8000928:	2400140c 	.word	0x2400140c
 800092c:	08014008 	.word	0x08014008
 8000930:	0800157d 	.word	0x0800157d
 8000934:	24001400 	.word	0x24001400

08000938 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	@ 0x38
 800093c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b9e      	ldr	r3, [pc, #632]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	4a9c      	ldr	r2, [pc, #624]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095e:	4b9a      	ldr	r3, [pc, #616]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	623b      	str	r3, [r7, #32]
 800096a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096c:	4b96      	ldr	r3, [pc, #600]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	4a95      	ldr	r2, [pc, #596]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097c:	4b92      	ldr	r3, [pc, #584]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b8f      	ldr	r3, [pc, #572]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	4a8d      	ldr	r2, [pc, #564]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099a:	4b8b      	ldr	r3, [pc, #556]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b87      	ldr	r3, [pc, #540]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	4a86      	ldr	r2, [pc, #536]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b8:	4b83      	ldr	r3, [pc, #524]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	4b80      	ldr	r3, [pc, #512]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009cc:	4a7e      	ldr	r2, [pc, #504]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d6:	4b7c      	ldr	r3, [pc, #496]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	f003 0320 	and.w	r3, r3, #32
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4b78      	ldr	r3, [pc, #480]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	4a77      	ldr	r2, [pc, #476]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f4:	4b74      	ldr	r3, [pc, #464]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a02:	4b71      	ldr	r3, [pc, #452]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a08:	4a6f      	ldr	r2, [pc, #444]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a12:	4b6d      	ldr	r3, [pc, #436]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a20:	4b69      	ldr	r3, [pc, #420]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a26:	4a68      	ldr	r2, [pc, #416]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a30:	4b65      	ldr	r3, [pc, #404]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a44:	4861      	ldr	r0, [pc, #388]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000a46:	f005 ff57 	bl	80068f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a50:	485f      	ldr	r0, [pc, #380]	@ (8000bd0 <MX_GPIO_Init+0x298>)
 8000a52:	f005 ff51 	bl	80068f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	485e      	ldr	r0, [pc, #376]	@ (8000bd4 <MX_GPIO_Init+0x29c>)
 8000a5c:	f005 ff4c 	bl	80068f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4858      	ldr	r0, [pc, #352]	@ (8000bd8 <MX_GPIO_Init+0x2a0>)
 8000a76:	f005 fd8f 	bl	8006598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a7a:	2332      	movs	r3, #50	@ 0x32
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4850      	ldr	r0, [pc, #320]	@ (8000bd8 <MX_GPIO_Init+0x2a0>)
 8000a96:	f005 fd7f 	bl	8006598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a9a:	2386      	movs	r3, #134	@ 0x86
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aaa:	230b      	movs	r3, #11
 8000aac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4849      	ldr	r0, [pc, #292]	@ (8000bdc <MX_GPIO_Init+0x2a4>)
 8000ab6:	f005 fd6f 	bl	8006598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aba:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	483e      	ldr	r0, [pc, #248]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000ad4:	f005 fd60 	bl	8006598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ade:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	483c      	ldr	r0, [pc, #240]	@ (8000be0 <MX_GPIO_Init+0x2a8>)
 8000af0:	f005 fd52 	bl	8006598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b06:	230b      	movs	r3, #11
 8000b08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482e      	ldr	r0, [pc, #184]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000b12:	f005 fd41 	bl	8006598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4828      	ldr	r0, [pc, #160]	@ (8000bd0 <MX_GPIO_Init+0x298>)
 8000b30:	f005 fd32 	bl	8006598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4826      	ldr	r0, [pc, #152]	@ (8000be4 <MX_GPIO_Init+0x2ac>)
 8000b4a:	f005 fd25 	bl	8006598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b4e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b60:	230a      	movs	r3, #10
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481c      	ldr	r0, [pc, #112]	@ (8000bdc <MX_GPIO_Init+0x2a4>)
 8000b6c:	f005 fd14 	bl	8006598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b70:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4815      	ldr	r0, [pc, #84]	@ (8000be4 <MX_GPIO_Init+0x2ac>)
 8000b8e:	f005 fd03 	bl	8006598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b92:	2302      	movs	r3, #2
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480a      	ldr	r0, [pc, #40]	@ (8000bd4 <MX_GPIO_Init+0x29c>)
 8000baa:	f005 fcf5 	bl	8006598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2107      	movs	r1, #7
 8000bb2:	2028      	movs	r0, #40	@ 0x28
 8000bb4:	f002 fe8c 	bl	80038d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb8:	2028      	movs	r0, #40	@ 0x28
 8000bba:	f002 fea3 	bl	8003904 <HAL_NVIC_EnableIRQ>

}
 8000bbe:	bf00      	nop
 8000bc0:	3738      	adds	r7, #56	@ 0x38
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58020400 	.word	0x58020400
 8000bd0:	58020c00 	.word	0x58020c00
 8000bd4:	58021000 	.word	0x58021000
 8000bd8:	58020800 	.word	0x58020800
 8000bdc:	58020000 	.word	0x58020000
 8000be0:	58021400 	.word	0x58021400
 8000be4:	58021800 	.word	0x58021800

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f001 fa36 	bl	800205c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f81c 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f7ff fea0 	bl	8000938 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf8:	f7ff fe30 	bl	800085c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000bfc:	f000 fef6 	bl	80019ec <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c00:	f7ff fcf8 	bl	80005f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000c04:	f000 fea6 	bl	8001954 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 8000c08:	2202      	movs	r2, #2
 8000c0a:	4906      	ldr	r1, [pc, #24]	@ (8000c24 <main+0x3c>)
 8000c0c:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <main+0x40>)
 8000c0e:	f001 fe3b 	bl	8002888 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c12:	f00b ff3f 	bl	800ca94 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c16:	f7ff fe69 	bl	80008ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c1a:	f00b ff5f 	bl	800cadc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1e:	bf00      	nop
 8000c20:	e7fd      	b.n	8000c1e <main+0x36>
 8000c22:	bf00      	nop
 8000c24:	24001414 	.word	0x24001414
 8000c28:	24001324 	.word	0x24001324

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09e      	sub	sp, #120	@ 0x78
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c36:	224c      	movs	r2, #76	@ 0x4c
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f012 ff36 	bl	8013aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2220      	movs	r2, #32
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f012 ff2f 	bl	8013aac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f005 fe86 	bl	8006960 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b49      	ldr	r3, [pc, #292]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5c:	4a48      	ldr	r2, [pc, #288]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c64:	4b46      	ldr	r3, [pc, #280]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b45      	ldr	r3, [pc, #276]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a44      	ldr	r2, [pc, #272]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b42      	ldr	r3, [pc, #264]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c86:	bf00      	nop
 8000c88:	4b3e      	ldr	r3, [pc, #248]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c94:	d1f8      	bne.n	8000c88 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b3c      	ldr	r3, [pc, #240]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c9c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ca6:	4b38      	ldr	r3, [pc, #224]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	4b32      	ldr	r3, [pc, #200]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a31      	ldr	r2, [pc, #196]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce6:	bf00      	nop
 8000ce8:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cf4:	d1f8      	bne.n	8000ce8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000cfa:	2380      	movs	r3, #128	@ 0x80
 8000cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000d06:	2301      	movs	r3, #1
 8000d08:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000d0e:	23f0      	movs	r3, #240	@ 0xf0
 8000d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d16:	2304      	movs	r3, #4
 8000d18:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 fe50 	bl	80069d4 <HAL_RCC_OscConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000d3a:	f000 f9df 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3e:	233f      	movs	r3, #63	@ 0x3f
 8000d40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	2303      	movs	r3, #3
 8000d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d4e:	2340      	movs	r3, #64	@ 0x40
 8000d50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d52:	2340      	movs	r3, #64	@ 0x40
 8000d54:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d5c:	2340      	movs	r3, #64	@ 0x40
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2104      	movs	r1, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f006 fa8e 	bl	8007288 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000d72:	f000 f9c3 	bl	80010fc <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3778      	adds	r7, #120	@ 0x78
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58000400 	.word	0x58000400
 8000d84:	58024800 	.word	0x58024800
 8000d88:	58024400 	.word	0x58024400

08000d8c <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d9c:	d11a      	bne.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x48>

    unsigned int uiTick = osKernelGetTickCount();
 8000d9e:	f00b fec3 	bl	800cb28 <osKernelGetTickCount>
 8000da2:	60f8      	str	r0, [r7, #12]

    if(uiTick > (uiJoySWTickOnPress + DEBOUNCE_TICKS)) // DEBOUNCE_TICKS debounce
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <HAL_GPIO_EXTI_Callback+0x50>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d910      	bls.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x48>
    {
      ucButtonState ^= 1;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	f083 0301 	eor.w	r3, r3, #1
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000dbe:	701a      	strb	r2, [r3, #0]
      uiJoySWTickOnPress = uiTick;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <HAL_GPIO_EXTI_Callback+0x50>)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6013      	str	r3, [r2, #0]
      osThreadFlagsSet(TaskControleHandle, 0x1000);
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00b ff52 	bl	800cc78 <osThreadFlagsSet>
    }
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2400141c 	.word	0x2400141c
 8000de0:	24001410 	.word	0x24001410
 8000de4:	24001400 	.word	0x24001400

08000de8 <HAL_UART_RxCpltCallback>:
  * @brief  ISR callback for reading msg from UART with UART2_DMA_BUFFER_SIZE bytes.
  * @param  huart: Handle for serial UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(&huart2 == huart)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4ab5      	ldr	r2, [pc, #724]	@ (80010c8 <HAL_UART_RxCpltCallback+0x2e0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	f040 8163 	bne.w	80010c0 <HAL_UART_RxCpltCallback+0x2d8>
  {

    // State machine state
    unsigned int ucSmState = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]

    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	72fb      	strb	r3, [r7, #11]
 8000e02:	e154      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2c6>
    {
      switch (ucSmState)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b2b      	cmp	r3, #43	@ 0x2b
 8000e08:	f200 814a 	bhi.w	80010a0 <HAL_UART_RxCpltCallback+0x2b8>
 8000e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e14 <HAL_UART_RxCpltCallback+0x2c>)
 8000e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e12:	bf00      	nop
 8000e14:	08000ec5 	.word	0x08000ec5
 8000e18:	08000ed7 	.word	0x08000ed7
 8000e1c:	080010a1 	.word	0x080010a1
 8000e20:	080010a1 	.word	0x080010a1
 8000e24:	080010a1 	.word	0x080010a1
 8000e28:	080010a1 	.word	0x080010a1
 8000e2c:	080010a1 	.word	0x080010a1
 8000e30:	080010a1 	.word	0x080010a1
 8000e34:	080010a1 	.word	0x080010a1
 8000e38:	080010a1 	.word	0x080010a1
 8000e3c:	08000fa1 	.word	0x08000fa1
 8000e40:	08000fb1 	.word	0x08000fb1
 8000e44:	08000fc1 	.word	0x08000fc1
 8000e48:	08000fd1 	.word	0x08000fd1
 8000e4c:	080010a1 	.word	0x080010a1
 8000e50:	080010a1 	.word	0x080010a1
 8000e54:	080010a1 	.word	0x080010a1
 8000e58:	080010a1 	.word	0x080010a1
 8000e5c:	080010a1 	.word	0x080010a1
 8000e60:	080010a1 	.word	0x080010a1
 8000e64:	08000fe1 	.word	0x08000fe1
 8000e68:	08000ff1 	.word	0x08000ff1
 8000e6c:	08001001 	.word	0x08001001
 8000e70:	08001011 	.word	0x08001011
 8000e74:	080010a1 	.word	0x080010a1
 8000e78:	080010a1 	.word	0x080010a1
 8000e7c:	080010a1 	.word	0x080010a1
 8000e80:	080010a1 	.word	0x080010a1
 8000e84:	080010a1 	.word	0x080010a1
 8000e88:	080010a1 	.word	0x080010a1
 8000e8c:	08001021 	.word	0x08001021
 8000e90:	08001031 	.word	0x08001031
 8000e94:	08001041 	.word	0x08001041
 8000e98:	08001051 	.word	0x08001051
 8000e9c:	080010a1 	.word	0x080010a1
 8000ea0:	080010a1 	.word	0x080010a1
 8000ea4:	080010a1 	.word	0x080010a1
 8000ea8:	080010a1 	.word	0x080010a1
 8000eac:	080010a1 	.word	0x080010a1
 8000eb0:	080010a1 	.word	0x080010a1
 8000eb4:	08001061 	.word	0x08001061
 8000eb8:	08001071 	.word	0x08001071
 8000ebc:	08001081 	.word	0x08001081
 8000ec0:	08001091 	.word	0x08001091
      {
        case 0:
          if('#' == ucDmaBuffer[i])
 8000ec4:	7afb      	ldrb	r3, [r7, #11]
 8000ec6:	4a81      	ldr	r2, [pc, #516]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	2b23      	cmp	r3, #35	@ 0x23
 8000ecc:	f040 80eb 	bne.w	80010a6 <HAL_UART_RxCpltCallback+0x2be>
          {
            ucSmState = 1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000ed4:	e0e7      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2be>

        case 1:
          switch (ucDmaBuffer[i])
 8000ed6:	7afb      	ldrb	r3, [r7, #11]
 8000ed8:	4a7c      	ldr	r2, [pc, #496]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	3b24      	subs	r3, #36	@ 0x24
 8000ede:	2b20      	cmp	r3, #32
 8000ee0:	d85a      	bhi.n	8000f98 <HAL_UART_RxCpltCallback+0x1b0>
 8000ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee8 <HAL_UART_RxCpltCallback+0x100>)
 8000ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee8:	08000f85 	.word	0x08000f85
 8000eec:	08000f99 	.word	0x08000f99
 8000ef0:	08000f99 	.word	0x08000f99
 8000ef4:	08000f99 	.word	0x08000f99
 8000ef8:	08000f99 	.word	0x08000f99
 8000efc:	08000f99 	.word	0x08000f99
 8000f00:	08000f99 	.word	0x08000f99
 8000f04:	08000f99 	.word	0x08000f99
 8000f08:	08000f99 	.word	0x08000f99
 8000f0c:	08000f99 	.word	0x08000f99
 8000f10:	08000f99 	.word	0x08000f99
 8000f14:	08000f99 	.word	0x08000f99
 8000f18:	08000f99 	.word	0x08000f99
 8000f1c:	08000f99 	.word	0x08000f99
 8000f20:	08000f99 	.word	0x08000f99
 8000f24:	08000f99 	.word	0x08000f99
 8000f28:	08000f99 	.word	0x08000f99
 8000f2c:	08000f99 	.word	0x08000f99
 8000f30:	08000f99 	.word	0x08000f99
 8000f34:	08000f99 	.word	0x08000f99
 8000f38:	08000f99 	.word	0x08000f99
 8000f3c:	08000f99 	.word	0x08000f99
 8000f40:	08000f99 	.word	0x08000f99
 8000f44:	08000f99 	.word	0x08000f99
 8000f48:	08000f99 	.word	0x08000f99
 8000f4c:	08000f99 	.word	0x08000f99
 8000f50:	08000f99 	.word	0x08000f99
 8000f54:	08000f99 	.word	0x08000f99
 8000f58:	08000f99 	.word	0x08000f99
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	08000f73 	.word	0x08000f73
 8000f64:	08000f79 	.word	0x08000f79
 8000f68:	08000f7f 	.word	0x08000f7f
          {
            case 'A':
            ucSmState = 10;
 8000f6c:	230a      	movs	r3, #10
 8000f6e:	60fb      	str	r3, [r7, #12]
            break;
 8000f70:	e015      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1b6>

            case 'B':
            ucSmState = 20;
 8000f72:	2314      	movs	r3, #20
 8000f74:	60fb      	str	r3, [r7, #12]
            break;
 8000f76:	e012      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1b6>

            case 'C':
            ucSmState = 30;
 8000f78:	231e      	movs	r3, #30
 8000f7a:	60fb      	str	r3, [r7, #12]
            break;
 8000f7c:	e00f      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1b6>

            case 'D':
            ucSmState = 40;
 8000f7e:	2328      	movs	r3, #40	@ 0x28
 8000f80:	60fb      	str	r3, [r7, #12]
            break;
 8000f82:	e00c      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1b6>

            case '$':
            ucSmState = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]

            // Message fully received, setting TaskControle ThreadFlag for sync.
            osThreadFlagsSet(TaskControleHandle, 0x10000);
 8000f88:	4b51      	ldr	r3, [pc, #324]	@ (80010d0 <HAL_UART_RxCpltCallback+0x2e8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00b fe71 	bl	800cc78 <osThreadFlagsSet>
            break;
 8000f96:	e002      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1b6>

            default:
              ucSmState = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
              break;
 8000f9c:	bf00      	nop
          }
          break;
 8000f9e:	e083      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 10:
          xVehicleStatus.xLongSpeed.ucBytes[0] = ucDmaBuffer[i];
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	4a4a      	ldr	r2, [pc, #296]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000fa4:	5cd2      	ldrb	r2, [r2, r3]
 8000fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000fa8:	701a      	strb	r2, [r3, #0]
          ucSmState = 11;
 8000faa:	230b      	movs	r3, #11
 8000fac:	60fb      	str	r3, [r7, #12]
          break;
 8000fae:	e07b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 11:
          xVehicleStatus.xLongSpeed.ucBytes[1] = ucDmaBuffer[i];
 8000fb0:	7afb      	ldrb	r3, [r7, #11]
 8000fb2:	4a46      	ldr	r2, [pc, #280]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000fb4:	5cd2      	ldrb	r2, [r2, r3]
 8000fb6:	4b47      	ldr	r3, [pc, #284]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000fb8:	705a      	strb	r2, [r3, #1]
          ucSmState = 12;
 8000fba:	230c      	movs	r3, #12
 8000fbc:	60fb      	str	r3, [r7, #12]
          break;
 8000fbe:	e073      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 12:
          xVehicleStatus.xLongSpeed.ucBytes[2] = ucDmaBuffer[i];
 8000fc0:	7afb      	ldrb	r3, [r7, #11]
 8000fc2:	4a42      	ldr	r2, [pc, #264]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000fc4:	5cd2      	ldrb	r2, [r2, r3]
 8000fc6:	4b43      	ldr	r3, [pc, #268]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000fc8:	709a      	strb	r2, [r3, #2]
          ucSmState = 13;
 8000fca:	230d      	movs	r3, #13
 8000fcc:	60fb      	str	r3, [r7, #12]
          break;
 8000fce:	e06b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 13:
          xVehicleStatus.xLongSpeed.ucBytes[3] = ucDmaBuffer[i];
 8000fd0:	7afb      	ldrb	r3, [r7, #11]
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000fd4:	5cd2      	ldrb	r2, [r2, r3]
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000fd8:	70da      	strb	r2, [r3, #3]
          ucSmState = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
          break;
 8000fde:	e063      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 20:
          xVehicleStatus.xLatSpeed.ucBytes[0] = ucDmaBuffer[i];
 8000fe0:	7afb      	ldrb	r3, [r7, #11]
 8000fe2:	4a3a      	ldr	r2, [pc, #232]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000fe4:	5cd2      	ldrb	r2, [r2, r3]
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000fe8:	711a      	strb	r2, [r3, #4]
          ucSmState = 21;
 8000fea:	2315      	movs	r3, #21
 8000fec:	60fb      	str	r3, [r7, #12]
          break;
 8000fee:	e05b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 21:
          xVehicleStatus.xLatSpeed.ucBytes[1] = ucDmaBuffer[i];
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
 8000ff2:	4a36      	ldr	r2, [pc, #216]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000ff4:	5cd2      	ldrb	r2, [r2, r3]
 8000ff6:	4b37      	ldr	r3, [pc, #220]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000ff8:	715a      	strb	r2, [r3, #5]
          ucSmState = 22;
 8000ffa:	2316      	movs	r3, #22
 8000ffc:	60fb      	str	r3, [r7, #12]
          break;
 8000ffe:	e053      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 22:
          xVehicleStatus.xLatSpeed.ucBytes[2] = ucDmaBuffer[i];
 8001000:	7afb      	ldrb	r3, [r7, #11]
 8001002:	4a32      	ldr	r2, [pc, #200]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001004:	5cd2      	ldrb	r2, [r2, r3]
 8001006:	4b33      	ldr	r3, [pc, #204]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001008:	719a      	strb	r2, [r3, #6]
          ucSmState = 23;
 800100a:	2317      	movs	r3, #23
 800100c:	60fb      	str	r3, [r7, #12]
          break;
 800100e:	e04b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 23:
          xVehicleStatus.xLatSpeed.ucBytes[3] = ucDmaBuffer[i];
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	4a2e      	ldr	r2, [pc, #184]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001014:	5cd2      	ldrb	r2, [r2, r3]
 8001016:	4b2f      	ldr	r3, [pc, #188]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001018:	71da      	strb	r2, [r3, #7]
          ucSmState = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
          break;
 800101e:	e043      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 30:
          xVehicleStatus.xHeadingRate.ucBytes[0] = ucDmaBuffer[i];
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	4a2a      	ldr	r2, [pc, #168]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001024:	5cd2      	ldrb	r2, [r2, r3]
 8001026:	4b2b      	ldr	r3, [pc, #172]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001028:	721a      	strb	r2, [r3, #8]
          ucSmState = 31;
 800102a:	231f      	movs	r3, #31
 800102c:	60fb      	str	r3, [r7, #12]
          break;
 800102e:	e03b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 31:
          xVehicleStatus.xHeadingRate.ucBytes[1] = ucDmaBuffer[i];
 8001030:	7afb      	ldrb	r3, [r7, #11]
 8001032:	4a26      	ldr	r2, [pc, #152]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001034:	5cd2      	ldrb	r2, [r2, r3]
 8001036:	4b27      	ldr	r3, [pc, #156]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001038:	725a      	strb	r2, [r3, #9]
          ucSmState = 32;
 800103a:	2320      	movs	r3, #32
 800103c:	60fb      	str	r3, [r7, #12]
          break;
 800103e:	e033      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 32:
          xVehicleStatus.xHeadingRate.ucBytes[2] = ucDmaBuffer[i];
 8001040:	7afb      	ldrb	r3, [r7, #11]
 8001042:	4a22      	ldr	r2, [pc, #136]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001044:	5cd2      	ldrb	r2, [r2, r3]
 8001046:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001048:	729a      	strb	r2, [r3, #10]
          ucSmState = 33;
 800104a:	2321      	movs	r3, #33	@ 0x21
 800104c:	60fb      	str	r3, [r7, #12]
          break;
 800104e:	e02b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 33:
          xVehicleStatus.xHeadingRate.ucBytes[3] = ucDmaBuffer[i];
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	4a1e      	ldr	r2, [pc, #120]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001054:	5cd2      	ldrb	r2, [r2, r3]
 8001056:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001058:	72da      	strb	r2, [r3, #11]
          ucSmState = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
          break;
 800105e:	e023      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 40:
          xVehicleStatus.xSteeringStatus.ucBytes[0] = ucDmaBuffer[i];
 8001060:	7afb      	ldrb	r3, [r7, #11]
 8001062:	4a1a      	ldr	r2, [pc, #104]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001064:	5cd2      	ldrb	r2, [r2, r3]
 8001066:	4b1b      	ldr	r3, [pc, #108]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001068:	731a      	strb	r2, [r3, #12]
          ucSmState = 41;
 800106a:	2329      	movs	r3, #41	@ 0x29
 800106c:	60fb      	str	r3, [r7, #12]
          break;
 800106e:	e01b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 41:
          xVehicleStatus.xSteeringStatus.ucBytes[1] = ucDmaBuffer[i];
 8001070:	7afb      	ldrb	r3, [r7, #11]
 8001072:	4a16      	ldr	r2, [pc, #88]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001074:	5cd2      	ldrb	r2, [r2, r3]
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001078:	735a      	strb	r2, [r3, #13]
          ucSmState = 42;
 800107a:	232a      	movs	r3, #42	@ 0x2a
 800107c:	60fb      	str	r3, [r7, #12]
          break;
 800107e:	e013      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 42:
          xVehicleStatus.xSteeringStatus.ucBytes[2] = ucDmaBuffer[i];
 8001080:	7afb      	ldrb	r3, [r7, #11]
 8001082:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001084:	5cd2      	ldrb	r2, [r2, r3]
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001088:	739a      	strb	r2, [r3, #14]
          ucSmState = 43;
 800108a:	232b      	movs	r3, #43	@ 0x2b
 800108c:	60fb      	str	r3, [r7, #12]
          break;
 800108e:	e00b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 43:
          xVehicleStatus.xSteeringStatus.ucBytes[3] = ucDmaBuffer[i];
 8001090:	7afb      	ldrb	r3, [r7, #11]
 8001092:	4a0e      	ldr	r2, [pc, #56]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001094:	5cd2      	ldrb	r2, [r2, r3]
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001098:	73da      	strb	r2, [r3, #15]
          ucSmState = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
          break;
 800109e:	e003      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        default:
		      ucSmState = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
          break;
 80010a4:	e000      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>
          break;
 80010a6:	bf00      	nop
    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	3301      	adds	r3, #1
 80010ac:	72fb      	strb	r3, [r7, #11]
 80010ae:	7afb      	ldrb	r3, [r7, #11]
 80010b0:	2b15      	cmp	r3, #21
 80010b2:	f67f aea7 	bls.w	8000e04 <HAL_UART_RxCpltCallback+0x1c>
      }
    }
    // Starting other UART reading
    HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 80010b6:	2216      	movs	r2, #22
 80010b8:	4904      	ldr	r1, [pc, #16]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 80010ba:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <HAL_UART_RxCpltCallback+0x2e0>)
 80010bc:	f009 fd4e 	bl	800ab5c <HAL_UART_Receive_DMA>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	240014d4 	.word	0x240014d4
 80010cc:	2400146c 	.word	0x2400146c
 80010d0:	24001400 	.word	0x24001400
 80010d4:	2400145c 	.word	0x2400145c

080010d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ea:	f000 fff3 	bl	80020d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40001000 	.word	0x40001000

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <Error_Handler+0x8>

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <HAL_MspInit+0x38>)
 8001110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001114:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <HAL_MspInit+0x38>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_MspInit+0x38>)
 8001120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	210f      	movs	r1, #15
 8001130:	f06f 0001 	mvn.w	r0, #1
 8001134:	f002 fbcc 	bl	80038d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	58024400 	.word	0x58024400

08001144 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b090      	sub	sp, #64	@ 0x40
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	d827      	bhi.n	80011a2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001152:	2200      	movs	r2, #0
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	2036      	movs	r0, #54	@ 0x36
 8001158:	f002 fbba 	bl	80038d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800115c:	2036      	movs	r0, #54	@ 0x36
 800115e:	f002 fbd1 	bl	8003904 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001162:	4a29      	ldr	r2, [pc, #164]	@ (8001208 <HAL_InitTick+0xc4>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001168:	4b28      	ldr	r3, [pc, #160]	@ (800120c <HAL_InitTick+0xc8>)
 800116a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800116e:	4a27      	ldr	r2, [pc, #156]	@ (800120c <HAL_InitTick+0xc8>)
 8001170:	f043 0310 	orr.w	r3, r3, #16
 8001174:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001178:	4b24      	ldr	r3, [pc, #144]	@ (800120c <HAL_InitTick+0xc8>)
 800117a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001186:	f107 0210 	add.w	r2, r7, #16
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f006 fc05 	bl	80079a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001198:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800119a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <HAL_InitTick+0x6a>
 80011a0:	e001      	b.n	80011a6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e02b      	b.n	80011fe <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011a6:	f006 fbcf 	bl	8007948 <HAL_RCC_GetPCLK1Freq>
 80011aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80011ac:	e004      	b.n	80011b8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ae:	f006 fbcb 	bl	8007948 <HAL_RCC_GetPCLK1Freq>
 80011b2:	4603      	mov	r3, r0
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ba:	4a15      	ldr	r2, [pc, #84]	@ (8001210 <HAL_InitTick+0xcc>)
 80011bc:	fba2 2303 	umull	r2, r3, r2, r3
 80011c0:	0c9b      	lsrs	r3, r3, #18
 80011c2:	3b01      	subs	r3, #1
 80011c4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011c6:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <HAL_InitTick+0xd0>)
 80011c8:	4a13      	ldr	r2, [pc, #76]	@ (8001218 <HAL_InitTick+0xd4>)
 80011ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <HAL_InitTick+0xd0>)
 80011ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <HAL_InitTick+0xd0>)
 80011d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_InitTick+0xd0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_InitTick+0xd0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011e6:	480b      	ldr	r0, [pc, #44]	@ (8001214 <HAL_InitTick+0xd0>)
 80011e8:	f009 f91a 	bl	800a420 <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d104      	bne.n	80011fc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011f2:	4808      	ldr	r0, [pc, #32]	@ (8001214 <HAL_InitTick+0xd0>)
 80011f4:	f009 f976 	bl	800a4e4 <HAL_TIM_Base_Start_IT>
 80011f8:	4603      	mov	r3, r0
 80011fa:	e000      	b.n	80011fe <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3740      	adds	r7, #64	@ 0x40
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	24000008 	.word	0x24000008
 800120c:	58024400 	.word	0x58024400
 8001210:	431bde83 	.word	0x431bde83
 8001214:	24001484 	.word	0x24001484
 8001218:	40001000 	.word	0x40001000

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <NMI_Handler+0x4>

08001224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <MemManage_Handler+0x4>

08001234 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <UsageFault_Handler+0x4>

08001244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <DMA1_Stream0_IRQHandler+0x10>)
 800125a:	f003 fe8b 	bl	8004f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240016ec 	.word	0x240016ec

08001268 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <DMA1_Stream1_IRQHandler+0x10>)
 800126e:	f003 fe81 	bl	8004f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	24001764 	.word	0x24001764

0800127c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <USART2_IRQHandler+0x10>)
 8001282:	f009 fcb7 	bl	800abf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	240014d4 	.word	0x240014d4

08001290 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <USART3_IRQHandler+0x10>)
 8001296:	f009 fcad 	bl	800abf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	24001568 	.word	0x24001568

080012a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 80012a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012ac:	f005 fb3d 	bl	800692a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <TIM6_DAC_IRQHandler+0x10>)
 80012ba:	f009 f98b 	bl	800a5d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	24001484 	.word	0x24001484

080012c8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <DMA2_Stream1_IRQHandler+0x10>)
 80012ce:	f003 fe51 	bl	8004f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	240015fc 	.word	0x240015fc

080012dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <DMA2_Stream2_IRQHandler+0x10>)
 80012e2:	f003 fe47 	bl	8004f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	24001674 	.word	0x24001674

080012f0 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012fa:	f012 fc8b 	bl	8013c14 <__errno>
 80012fe:	4603      	mov	r3, r0
 8001300:	2216      	movs	r2, #22
 8001302:	601a      	str	r2, [r3, #0]
  return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_exit>:

void _exit (int status)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001318:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ffe7 	bl	80012f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001322:	bf00      	nop
 8001324:	e7fd      	b.n	8001322 <_exit+0x12>

08001326 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	e00a      	b.n	800134e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001338:	f3af 8000 	nop.w
 800133c:	4601      	mov	r1, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	60ba      	str	r2, [r7, #8]
 8001344:	b2ca      	uxtb	r2, r1
 8001346:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbf0      	blt.n	8001338 <_read+0x12>
  }

  return len;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e009      	b.n	8001386 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	60ba      	str	r2, [r7, #8]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	dbf1      	blt.n	8001372 <_write+0x12>
  }
  return len;
 800138e:	687b      	ldr	r3, [r7, #4]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_close>:

int _close(int file)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c0:	605a      	str	r2, [r3, #4]
  return 0;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_isatty>:

int _isatty(int file)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013d8:	2301      	movs	r3, #1
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	@ (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f012 fbf0 	bl	8013c14 <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	24080000 	.word	0x24080000
 8001460:	00000400 	.word	0x00000400
 8001464:	240014d0 	.word	0x240014d0
 8001468:	24033458 	.word	0x24033458

0800146c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001470:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <SystemInit+0xe4>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001476:	4a36      	ldr	r2, [pc, #216]	@ (8001550 <SystemInit+0xe4>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001480:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <SystemInit+0xe8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	2b06      	cmp	r3, #6
 800148a:	d807      	bhi.n	800149c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800148c:	4b31      	ldr	r3, [pc, #196]	@ (8001554 <SystemInit+0xe8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 030f 	bic.w	r3, r3, #15
 8001494:	4a2f      	ldr	r2, [pc, #188]	@ (8001554 <SystemInit+0xe8>)
 8001496:	f043 0307 	orr.w	r3, r3, #7
 800149a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800149c:	4b2e      	ldr	r3, [pc, #184]	@ (8001558 <SystemInit+0xec>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001558 <SystemInit+0xec>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001558 <SystemInit+0xec>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <SystemInit+0xec>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4929      	ldr	r1, [pc, #164]	@ (8001558 <SystemInit+0xec>)
 80014b4:	4b29      	ldr	r3, [pc, #164]	@ (800155c <SystemInit+0xf0>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ba:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <SystemInit+0xe8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014c6:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <SystemInit+0xe8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 030f 	bic.w	r3, r3, #15
 80014ce:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <SystemInit+0xe8>)
 80014d0:	f043 0307 	orr.w	r3, r3, #7
 80014d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <SystemInit+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <SystemInit+0xec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <SystemInit+0xec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <SystemInit+0xec>)
 80014ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001560 <SystemInit+0xf4>)
 80014ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <SystemInit+0xec>)
 80014f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001564 <SystemInit+0xf8>)
 80014f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014f4:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <SystemInit+0xec>)
 80014f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001568 <SystemInit+0xfc>)
 80014f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <SystemInit+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <SystemInit+0xec>)
 8001502:	4a19      	ldr	r2, [pc, #100]	@ (8001568 <SystemInit+0xfc>)
 8001504:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <SystemInit+0xec>)
 8001508:	2200      	movs	r2, #0
 800150a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <SystemInit+0xec>)
 800150e:	4a16      	ldr	r2, [pc, #88]	@ (8001568 <SystemInit+0xfc>)
 8001510:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <SystemInit+0xec>)
 8001514:	2200      	movs	r2, #0
 8001516:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001518:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <SystemInit+0xec>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0e      	ldr	r2, [pc, #56]	@ (8001558 <SystemInit+0xec>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001522:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <SystemInit+0xec>)
 8001526:	2200      	movs	r2, #0
 8001528:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <SystemInit+0x100>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <SystemInit+0x104>)
 8001530:	4013      	ands	r3, r2
 8001532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001536:	d202      	bcs.n	800153e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001538:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <SystemInit+0x108>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <SystemInit+0x10c>)
 8001540:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001544:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	52002000 	.word	0x52002000
 8001558:	58024400 	.word	0x58024400
 800155c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001560:	02020200 	.word	0x02020200
 8001564:	01ff0000 	.word	0x01ff0000
 8001568:	01010280 	.word	0x01010280
 800156c:	5c001000 	.word	0x5c001000
 8001570:	ffff0000 	.word	0xffff0000
 8001574:	51008108 	.word	0x51008108
 8001578:	52004000 	.word	0x52004000

0800157c <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void * argument)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b099      	sub	sp, #100	@ 0x64
 8001580:	af04      	add	r7, sp, #16
 8001582:	6078      	str	r0, [r7, #4]
  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  // Joystick calibration
  unsigned int uiX0   = 33970;
 8001584:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 8001588:	64bb      	str	r3, [r7, #72]	@ 0x48
  unsigned int uiXMin = 1057;
 800158a:	f240 4321 	movw	r3, #1057	@ 0x421
 800158e:	647b      	str	r3, [r7, #68]	@ 0x44
  unsigned int uiXMax = 65535;
 8001590:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001594:	643b      	str	r3, [r7, #64]	@ 0x40
  unsigned int uiY0   = 33580;
 8001596:	f248 332c 	movw	r3, #33580	@ 0x832c
 800159a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  unsigned int uiYMin = 1062;
 800159c:	f240 4326 	movw	r3, #1062	@ 0x426
 80015a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int uiYMax = 65535;
 80015a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015a6:	637b      	str	r3, [r7, #52]	@ 0x34

  // Return flags
  unsigned int uiFlags = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	@ 0x30
  unsigned char ucTxMsgToCarla[MSG_TO_CARLA_SIZE];

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 80015ac:	2216      	movs	r2, #22
 80015ae:	498b      	ldr	r1, [pc, #556]	@ (80017dc <StartTaskControle+0x260>)
 80015b0:	488b      	ldr	r0, [pc, #556]	@ (80017e0 <StartTaskControle+0x264>)
 80015b2:	f009 fad3 	bl	800ab5c <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = MANUAL; // ! MANUAL to test communication with carla
 80015b6:	2304      	movs	r3, #4
 80015b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  
  //uiFlags = osThreadFlagsGet();
  //uiFlags = osThreadFlagsWait(MICRO_ROS_AGENT_ONLINE_FLAG, osFlagsWaitAny, 1000 * 20); // Wait 20 seconds for uROS init

  if(osFlagsErrorTimeout == uiFlags)
 80015bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015be:	f113 0f02 	cmn.w	r3, #2
 80015c2:	d102      	bne.n	80015ca <StartTaskControle+0x4e>
  {
    ucControlMode = MANUAL;
 80015c4:	2304      	movs	r3, #4
 80015c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  // Task loop
  for(;;)
  {

    // Looking fot operation mode change by Autoware -- START
	uiFlags = osThreadFlagsGet();
 80015ca:	f00b fba3 	bl	800cd14 <osThreadFlagsGet>
 80015ce:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2011      	movs	r0, #17
 80015d6:	f00b fbbe 	bl	800cd56 <osThreadFlagsWait>
 80015da:	6338      	str	r0, [r7, #48]	@ 0x30

    if(TO_AUTOWARE_MODE_FLAG == uiFlags)
 80015dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d103      	bne.n	80015ea <StartTaskControle+0x6e>
    {
      ucControlMode = AUTOWARE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80015e8:	e00c      	b.n	8001604 <StartTaskControle+0x88>
    }
    else if(TO_MANUAL_MODE_FLAG == uiFlags)
 80015ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ec:	2b10      	cmp	r3, #16
 80015ee:	d103      	bne.n	80015f8 <StartTaskControle+0x7c>
    {
      ucControlMode = MANUAL;
 80015f0:	2304      	movs	r3, #4
 80015f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80015f6:	e005      	b.n	8001604 <StartTaskControle+0x88>
    }
    else if((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG) == uiFlags)
 80015f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015fa:	2b11      	cmp	r3, #17
 80015fc:	d102      	bne.n	8001604 <StartTaskControle+0x88>
    {
      ucControlMode = MANUAL;
 80015fe:	2304      	movs	r3, #4
 8001600:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
    // Looking for operation mode change by Autoware -- END

    // Looking for operation mode change by JoySW -- START
    uiFlags = osThreadFlagsGet();
 8001604:	f00b fb86 	bl	800cd14 <osThreadFlagsGet>
 8001608:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(JOYSW_FLAG, osFlagsWaitAll, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2101      	movs	r1, #1
 800160e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001612:	f00b fba0 	bl	800cd56 <osThreadFlagsWait>
 8001616:	6338      	str	r0, [r7, #48]	@ 0x30

    if(JOYSW_FLAG == uiFlags)
 8001618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800161a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800161e:	d11a      	bne.n	8001656 <StartTaskControle+0xda>
    {
      if(AUTOWARE == ucControlMode)
 8001620:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001624:	2b01      	cmp	r3, #1
 8001626:	d109      	bne.n	800163c <StartTaskControle+0xc0>
      {
        ucControlMode = MANUAL;
 8001628:	2304      	movs	r3, #4
 800162a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 800162e:	4b6d      	ldr	r3, [pc, #436]	@ (80017e4 <StartTaskControle+0x268>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2110      	movs	r1, #16
 8001634:	4618      	mov	r0, r3
 8001636:	f00b fb1f 	bl	800cc78 <osThreadFlagsSet>
 800163a:	e00c      	b.n	8001656 <StartTaskControle+0xda>
      }
      else if(MANUAL == ucControlMode)
 800163c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001640:	2b04      	cmp	r3, #4
 8001642:	d108      	bne.n	8001656 <StartTaskControle+0xda>
      {
        ucControlMode = AUTOWARE;
 8001644:	2301      	movs	r3, #1
 8001646:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 800164a:	4b66      	ldr	r3, [pc, #408]	@ (80017e4 <StartTaskControle+0x268>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2101      	movs	r1, #1
 8001650:	4618      	mov	r0, r3
 8001652:	f00b fb11 	bl	800cc78 <osThreadFlagsSet>
      }
    }
    // Looking for operation mode change by JoySW -- END

    // Autonomous mode (AUTOWARE) routine -- START
    if(AUTOWARE == ucControlMode)
 8001656:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800165a:	2b01      	cmp	r3, #1
 800165c:	d176      	bne.n	800174c <StartTaskControle+0x1d0>
    {
      // Setting driving mode lights
	    vDrivingModeLights(ucControlMode);
 800165e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fc86 	bl	8001f74 <vDrivingModeLights>

      // WAIT for flag to sync xControlAction update
  	  uiFlags = osThreadFlagsGet();
 8001668:	f00b fb54 	bl	800cd14 <osThreadFlagsGet>
 800166c:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_ACTION);
 800166e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001672:	2101      	movs	r1, #1
 8001674:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001678:	f00b fb6d 	bl	800cd56 <osThreadFlagsWait>
 800167c:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error
      if(osFlagsErrorTimeout == uiFlags)
 800167e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001680:	f113 0f02 	cmn.w	r3, #2
 8001684:	d108      	bne.n	8001698 <StartTaskControle+0x11c>
      {
        ucControlMode = MANUAL;
 8001686:	2304      	movs	r3, #4
 8001688:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 800168c:	4b55      	ldr	r3, [pc, #340]	@ (80017e4 <StartTaskControle+0x268>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2110      	movs	r1, #16
 8001692:	4618      	mov	r0, r3
 8001694:	f00b faf0 	bl	800cc78 <osThreadFlagsSet>
      }

      if(DATA_UPDATED_FLAG == uiFlags)
 8001698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800169a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800169e:	d155      	bne.n	800174c <StartTaskControle+0x1d0>
      {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 80016a0:	4b51      	ldr	r3, [pc, #324]	@ (80017e8 <StartTaskControle+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016a8:	4618      	mov	r0, r3
 80016aa:	f00b fc76 	bl	800cf9a <osMutexAcquire>
        vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 80016ae:	4b4f      	ldr	r3, [pc, #316]	@ (80017ec <StartTaskControle+0x270>)
 80016b0:	f107 0208 	add.w	r2, r7, #8
 80016b4:	9202      	str	r2, [sp, #8]
 80016b6:	466c      	mov	r4, sp
 80016b8:	f103 0210 	add.w	r2, r3, #16
 80016bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80016c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c6:	f000 fbd1 	bl	8001e6c <vGetStringFromControlAction>
        osMutexRelease(MutexControlActionHandle);
 80016ca:	4b47      	ldr	r3, [pc, #284]	@ (80017e8 <StartTaskControle+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f00b fcae 	bl	800d030 <osMutexRelease>

        // Send cTxMsgToCarla to CARLA
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	221e      	movs	r2, #30
 80016da:	4619      	mov	r1, r3
 80016dc:	4840      	ldr	r0, [pc, #256]	@ (80017e0 <StartTaskControle+0x264>)
 80016de:	f009 f9bd 	bl	800aa5c <HAL_UART_Transmit_DMA>

        // Wait CARLA full msg xVehicleStatusRx
        uiFlags = osThreadFlagsGet();
 80016e2:	f00b fb17 	bl	800cd14 <osThreadFlagsGet>
 80016e6:	6338      	str	r0, [r7, #48]	@ 0x30
        uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 80016e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016ec:	2101      	movs	r1, #1
 80016ee:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80016f2:	f00b fb30 	bl	800cd56 <osThreadFlagsWait>
 80016f6:	6338      	str	r0, [r7, #48]	@ 0x30

        // Timeout error
        if(osFlagsErrorTimeout == uiFlags)
 80016f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016fa:	f113 0f02 	cmn.w	r3, #2
 80016fe:	d102      	bne.n	8001706 <StartTaskControle+0x18a>
        {
          ucControlMode = EMERGENCY;
 8001700:	2300      	movs	r3, #0
 8001702:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        }

        osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8001706:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <StartTaskControle+0x274>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800170e:	4618      	mov	r0, r3
 8001710:	f00b fc43 	bl	800cf9a <osMutexAcquire>

        xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8001714:	4b37      	ldr	r3, [pc, #220]	@ (80017f4 <StartTaskControle+0x278>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a37      	ldr	r2, [pc, #220]	@ (80017f8 <StartTaskControle+0x27c>)
 800171a:	6153      	str	r3, [r2, #20]
        xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 800171c:	4b35      	ldr	r3, [pc, #212]	@ (80017f4 <StartTaskControle+0x278>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	4a35      	ldr	r2, [pc, #212]	@ (80017f8 <StartTaskControle+0x27c>)
 8001722:	6193      	str	r3, [r2, #24]
        xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8001724:	4b33      	ldr	r3, [pc, #204]	@ (80017f4 <StartTaskControle+0x278>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a33      	ldr	r2, [pc, #204]	@ (80017f8 <StartTaskControle+0x27c>)
 800172a:	61d3      	str	r3, [r2, #28]
        xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 800172c:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <StartTaskControle+0x278>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4a31      	ldr	r2, [pc, #196]	@ (80017f8 <StartTaskControle+0x27c>)
 8001732:	6213      	str	r3, [r2, #32]

        osMutexRelease(MutexControlSignalHandle);
 8001734:	4b2e      	ldr	r3, [pc, #184]	@ (80017f0 <StartTaskControle+0x274>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f00b fc79 	bl	800d030 <osMutexRelease>

        osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 800173e:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <StartTaskControle+0x268>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001746:	4618      	mov	r0, r3
 8001748:	f00b fa96 	bl	800cc78 <osThreadFlagsSet>
    }
    // Autonomous mode (AUTOWARE) routine -- END


    // Manual mode (MANUAL) routine -- START
    if(MANUAL == ucControlMode)
 800174c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001750:	2b04      	cmp	r3, #4
 8001752:	f040 80ae 	bne.w	80018b2 <StartTaskControle+0x336>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8001756:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fc0a 	bl	8001f74 <vDrivingModeLights>

      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 8001760:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <StartTaskControle+0x280>)
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001766:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001768:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800176a:	f000 fb4b 	bl	8001e04 <fGetJoyPostition>
 800176e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 8001772:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <StartTaskControle+0x280>)
 8001774:	6858      	ldr	r0, [r3, #4]
 8001776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800177a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800177c:	f000 fb42 	bl	8001e04 <fGetJoyPostition>
 8001780:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

      // Assembling xControlAction
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8001784:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <StartTaskControle+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800178c:	4618      	mov	r0, r3
 800178e:	f00b fc04 	bl	800cf9a <osMutexAcquire>
      xControlAction.xSteeringAngle.fFloat = -fJoyXAxis*MAX_STEERING_ANGLE;
 8001792:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001796:	eef1 7a67 	vneg.f32	s15, s15
 800179a:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <StartTaskControle+0x270>)
 800179c:	edc3 7a00 	vstr	s15, [r3]
      xControlAction.xSteeringVelocity.fFloat = 0;
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <StartTaskControle+0x270>)
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = (fJoyYAxis > 0) ? fJoyYAxis*MAX_TROTTLE : 0.0;
 80017a8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	dd01      	ble.n	80017ba <StartTaskControle+0x23e>
 80017b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b8:	e001      	b.n	80017be <StartTaskControle+0x242>
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	4a0b      	ldr	r2, [pc, #44]	@ (80017ec <StartTaskControle+0x270>)
 80017c0:	6093      	str	r3, [r2, #8]
      xControlAction.xAcceleration.fFloat = (fJoyYAxis < 0) ? -fJoyYAxis*MAX_BRAKE : 0.0;
 80017c2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ce:	d519      	bpl.n	8001804 <StartTaskControle+0x288>
 80017d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017d4:	eef1 7a67 	vneg.f32	s15, s15
 80017d8:	e016      	b.n	8001808 <StartTaskControle+0x28c>
 80017da:	bf00      	nop
 80017dc:	2400146c 	.word	0x2400146c
 80017e0:	240014d4 	.word	0x240014d4
 80017e4:	24001404 	.word	0x24001404
 80017e8:	2400140c 	.word	0x2400140c
 80017ec:	24001420 	.word	0x24001420
 80017f0:	24001408 	.word	0x24001408
 80017f4:	2400145c 	.word	0x2400145c
 80017f8:	24001438 	.word	0x24001438
 80017fc:	24001414 	.word	0x24001414
 8001800:	00000000 	.word	0x00000000
 8001804:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001800 <StartTaskControle+0x284>
 8001808:	4b4b      	ldr	r3, [pc, #300]	@ (8001938 <StartTaskControle+0x3bc>)
 800180a:	edc3 7a03 	vstr	s15, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 800180e:	4b4a      	ldr	r3, [pc, #296]	@ (8001938 <StartTaskControle+0x3bc>)
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = MANUAL;
 8001816:	4b48      	ldr	r3, [pc, #288]	@ (8001938 <StartTaskControle+0x3bc>)
 8001818:	2204      	movs	r2, #4
 800181a:	751a      	strb	r2, [r3, #20]
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 800181c:	4b46      	ldr	r3, [pc, #280]	@ (8001938 <StartTaskControle+0x3bc>)
 800181e:	f107 0208 	add.w	r2, r7, #8
 8001822:	9202      	str	r2, [sp, #8]
 8001824:	466c      	mov	r4, sp
 8001826:	f103 0210 	add.w	r2, r3, #16
 800182a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800182e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001834:	f000 fb1a 	bl	8001e6c <vGetStringFromControlAction>

      osMutexRelease(MutexControlActionHandle);
 8001838:	4b40      	ldr	r3, [pc, #256]	@ (800193c <StartTaskControle+0x3c0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f00b fbf7 	bl	800d030 <osMutexRelease>

      // Send cTxMsgToCarla to CARLA
      HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	221e      	movs	r2, #30
 8001848:	4619      	mov	r1, r3
 800184a:	483d      	ldr	r0, [pc, #244]	@ (8001940 <StartTaskControle+0x3c4>)
 800184c:	f009 f906 	bl	800aa5c <HAL_UART_Transmit_DMA>

      // Wait CARLA full msg xVehicleStatusRx
  	  uiFlags = osThreadFlagsGet();
 8001850:	f00b fa60 	bl	800cd14 <osThreadFlagsGet>
 8001854:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8001856:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800185a:	2101      	movs	r1, #1
 800185c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001860:	f00b fa79 	bl	800cd56 <osThreadFlagsWait>
 8001864:	6338      	str	r0, [r7, #48]	@ 0x30
      {
        //ucControlMode = EMERGENCY;
      }

      // Assembling xControlSignal
      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8001866:	4b37      	ldr	r3, [pc, #220]	@ (8001944 <StartTaskControle+0x3c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800186e:	4618      	mov	r0, r3
 8001870:	f00b fb93 	bl	800cf9a <osMutexAcquire>

      xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8001874:	4b34      	ldr	r3, [pc, #208]	@ (8001948 <StartTaskControle+0x3cc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a34      	ldr	r2, [pc, #208]	@ (800194c <StartTaskControle+0x3d0>)
 800187a:	6153      	str	r3, [r2, #20]
      xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 800187c:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <StartTaskControle+0x3cc>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a32      	ldr	r2, [pc, #200]	@ (800194c <StartTaskControle+0x3d0>)
 8001882:	6193      	str	r3, [r2, #24]
      xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8001884:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <StartTaskControle+0x3cc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4a30      	ldr	r2, [pc, #192]	@ (800194c <StartTaskControle+0x3d0>)
 800188a:	61d3      	str	r3, [r2, #28]
      xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 800188c:	4b2e      	ldr	r3, [pc, #184]	@ (8001948 <StartTaskControle+0x3cc>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4a2e      	ldr	r2, [pc, #184]	@ (800194c <StartTaskControle+0x3d0>)
 8001892:	6213      	str	r3, [r2, #32]

      osMutexRelease(MutexControlSignalHandle);
 8001894:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <StartTaskControle+0x3c8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f00b fbc9 	bl	800d030 <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 800189e:	4b2c      	ldr	r3, [pc, #176]	@ (8001950 <StartTaskControle+0x3d4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018a6:	4618      	mov	r0, r3
 80018a8:	f00b f9e6 	bl	800cc78 <osThreadFlagsSet>

      // WAIT
      osDelay(MANUAL_CONTROL_TIME_COMMAND);
 80018ac:	20c8      	movs	r0, #200	@ 0xc8
 80018ae:	f00b fad3 	bl	800ce58 <osDelay>
    }
    // Manual mode (MANUAL) routine -- END

    // Emergency mode (EMERGENCY) routine -- START
    if(EMERGENCY == ucControlMode)
 80018b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f47f ae87 	bne.w	80015ca <StartTaskControle+0x4e>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 80018bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fb57 	bl	8001f74 <vDrivingModeLights>
    
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 80018c6:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <StartTaskControle+0x3c0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00b fb63 	bl	800cf9a <osMutexAcquire>

      xControlAction.xSteeringAngle.fFloat = 0;
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <StartTaskControle+0x3bc>)
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
      xControlAction.xSteeringVelocity.fFloat = 0;
 80018dc:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <StartTaskControle+0x3bc>)
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = 0;
 80018e4:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <StartTaskControle+0x3bc>)
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
      xControlAction.xAcceleration.fFloat = 0;
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <StartTaskControle+0x3bc>)
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 80018f4:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <StartTaskControle+0x3bc>)
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = EMERGENCY;
 80018fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <StartTaskControle+0x3bc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	751a      	strb	r2, [r3, #20]
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8001902:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <StartTaskControle+0x3bc>)
 8001904:	f107 0208 	add.w	r2, r7, #8
 8001908:	9202      	str	r2, [sp, #8]
 800190a:	466c      	mov	r4, sp
 800190c:	f103 0210 	add.w	r2, r3, #16
 8001910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001914:	e884 0003 	stmia.w	r4, {r0, r1}
 8001918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800191a:	f000 faa7 	bl	8001e6c <vGetStringFromControlAction>

      // Try to stop the car whatever it takes
      while(1)
      {

        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	221e      	movs	r2, #30
 8001924:	4619      	mov	r1, r3
 8001926:	4806      	ldr	r0, [pc, #24]	@ (8001940 <StartTaskControle+0x3c4>)
 8001928:	f009 f898 	bl	800aa5c <HAL_UART_Transmit_DMA>

        HAL_Delay(MANUAL_CONTROL_TIME_COMMAND);
 800192c:	20c8      	movs	r0, #200	@ 0xc8
 800192e:	f000 fbf1 	bl	8002114 <HAL_Delay>
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8001932:	bf00      	nop
 8001934:	e7f3      	b.n	800191e <StartTaskControle+0x3a2>
 8001936:	bf00      	nop
 8001938:	24001420 	.word	0x24001420
 800193c:	2400140c 	.word	0x2400140c
 8001940:	240014d4 	.word	0x240014d4
 8001944:	24001408 	.word	0x24001408
 8001948:	2400145c 	.word	0x2400145c
 800194c:	24001438 	.word	0x24001438
 8001950:	24001404 	.word	0x24001404

08001954 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001958:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 800195a:	4a23      	ldr	r2, [pc, #140]	@ (80019e8 <MX_USART2_UART_Init+0x94>)
 800195c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800195e:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 8001960:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b1f      	ldr	r3, [pc, #124]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001972:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001978:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 800197a:	220c      	movs	r2, #12
 800197c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198a:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001990:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001996:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800199c:	4811      	ldr	r0, [pc, #68]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 800199e:	f009 f80d 	bl	800a9bc <HAL_UART_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80019a8:	f7ff fba8 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ac:	2100      	movs	r1, #0
 80019ae:	480d      	ldr	r0, [pc, #52]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 80019b0:	f00a ff62 	bl	800c878 <HAL_UARTEx_SetTxFifoThreshold>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80019ba:	f7ff fb9f 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019be:	2100      	movs	r1, #0
 80019c0:	4808      	ldr	r0, [pc, #32]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 80019c2:	f00a ff97 	bl	800c8f4 <HAL_UARTEx_SetRxFifoThreshold>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80019cc:	f7ff fb96 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019d0:	4804      	ldr	r0, [pc, #16]	@ (80019e4 <MX_USART2_UART_Init+0x90>)
 80019d2:	f00a ff18 	bl	800c806 <HAL_UARTEx_DisableFifoMode>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80019dc:	f7ff fb8e 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	240014d4 	.word	0x240014d4
 80019e8:	40004400 	.word	0x40004400

080019ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019f0:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 80019f2:	4a23      	ldr	r2, [pc, #140]	@ (8001a80 <MX_USART3_UART_Init+0x94>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80019f6:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 80019f8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80019fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a28:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a34:	4811      	ldr	r0, [pc, #68]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a36:	f008 ffc1 	bl	800a9bc <HAL_UART_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a40:	f7ff fb5c 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a44:	2100      	movs	r1, #0
 8001a46:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a48:	f00a ff16 	bl	800c878 <HAL_UARTEx_SetTxFifoThreshold>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a52:	f7ff fb53 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a56:	2100      	movs	r1, #0
 8001a58:	4808      	ldr	r0, [pc, #32]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a5a:	f00a ff4b 	bl	800c8f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a64:	f7ff fb4a 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	@ (8001a7c <MX_USART3_UART_Init+0x90>)
 8001a6a:	f00a fecc 	bl	800c806 <HAL_UARTEx_DisableFifoMode>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a74:	f7ff fb42 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	24001568 	.word	0x24001568
 8001a80:	40004800 	.word	0x40004800

08001a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b0be      	sub	sp, #248	@ 0xf8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a9c:	f107 0320 	add.w	r3, r7, #32
 8001aa0:	22c0      	movs	r2, #192	@ 0xc0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f012 f801 	bl	8013aac <memset>
  if(uartHandle->Instance==USART2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6a      	ldr	r2, [pc, #424]	@ (8001c58 <HAL_UART_MspInit+0x1d4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	f040 80e1 	bne.w	8001c78 <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ab6:	f04f 0202 	mov.w	r2, #2
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac8:	f107 0320 	add.w	r3, r7, #32
 8001acc:	4618      	mov	r0, r3
 8001ace:	f005 ffa9 	bl	8007a24 <HAL_RCCEx_PeriphCLKConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001ad8:	f7ff fb10 	bl	80010fc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001adc:	4b5f      	ldr	r3, [pc, #380]	@ (8001c5c <HAL_UART_MspInit+0x1d8>)
 8001ade:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ae2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c5c <HAL_UART_MspInit+0x1d8>)
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001aec:	4b5b      	ldr	r3, [pc, #364]	@ (8001c5c <HAL_UART_MspInit+0x1d8>)
 8001aee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b58      	ldr	r3, [pc, #352]	@ (8001c5c <HAL_UART_MspInit+0x1d8>)
 8001afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b00:	4a56      	ldr	r2, [pc, #344]	@ (8001c5c <HAL_UART_MspInit+0x1d8>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b0a:	4b54      	ldr	r3, [pc, #336]	@ (8001c5c <HAL_UART_MspInit+0x1d8>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b18:	4b50      	ldr	r3, [pc, #320]	@ (8001c5c <HAL_UART_MspInit+0x1d8>)
 8001b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b1e:	4a4f      	ldr	r2, [pc, #316]	@ (8001c5c <HAL_UART_MspInit+0x1d8>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b28:	4b4c      	ldr	r3, [pc, #304]	@ (8001c5c <HAL_UART_MspInit+0x1d8>)
 8001b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b36:	2308      	movs	r3, #8
 8001b38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4841      	ldr	r0, [pc, #260]	@ (8001c60 <HAL_UART_MspInit+0x1dc>)
 8001b5c:	f004 fd1c 	bl	8006598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b60:	2320      	movs	r3, #32
 8001b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b7e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4837      	ldr	r0, [pc, #220]	@ (8001c64 <HAL_UART_MspInit+0x1e0>)
 8001b86:	f004 fd07 	bl	8006598 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8001b8a:	4b37      	ldr	r3, [pc, #220]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001b8c:	4a37      	ldr	r2, [pc, #220]	@ (8001c6c <HAL_UART_MspInit+0x1e8>)
 8001b8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001b90:	4b35      	ldr	r3, [pc, #212]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001b92:	222b      	movs	r2, #43	@ 0x2b
 8001b94:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b96:	4b34      	ldr	r3, [pc, #208]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b9c:	4b32      	ldr	r3, [pc, #200]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba2:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001ba4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ba8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001baa:	4b2f      	ldr	r3, [pc, #188]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001bbe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001bc2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc4:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bca:	4827      	ldr	r0, [pc, #156]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001bcc:	f001 fea8 	bl	8003920 <HAL_DMA_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8001bd6:	f7ff fa91 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a22      	ldr	r2, [pc, #136]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001bde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001be2:	4a21      	ldr	r2, [pc, #132]	@ (8001c68 <HAL_UART_MspInit+0x1e4>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 8001be8:	4b21      	ldr	r3, [pc, #132]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001bea:	4a22      	ldr	r2, [pc, #136]	@ (8001c74 <HAL_UART_MspInit+0x1f0>)
 8001bec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001bee:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001bf0:	222c      	movs	r2, #44	@ 0x2c
 8001bf2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001bf6:	2240      	movs	r2, #64	@ 0x40
 8001bf8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c00:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001c02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c06:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c08:	4b19      	ldr	r3, [pc, #100]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c14:	4b16      	ldr	r3, [pc, #88]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001c1c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c20:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c22:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c28:	4811      	ldr	r0, [pc, #68]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001c2a:	f001 fe79 	bl	8003920 <HAL_DMA_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0x1b4>
    {
      Error_Handler();
 8001c34:	f7ff fa62 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001c3c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c70 <HAL_UART_MspInit+0x1ec>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2105      	movs	r1, #5
 8001c48:	2026      	movs	r0, #38	@ 0x26
 8001c4a:	f001 fe41 	bl	80038d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c4e:	2026      	movs	r0, #38	@ 0x26
 8001c50:	f001 fe58 	bl	8003904 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c54:	e0c3      	b.n	8001dde <HAL_UART_MspInit+0x35a>
 8001c56:	bf00      	nop
 8001c58:	40004400 	.word	0x40004400
 8001c5c:	58024400 	.word	0x58024400
 8001c60:	58020000 	.word	0x58020000
 8001c64:	58020c00 	.word	0x58020c00
 8001c68:	240015fc 	.word	0x240015fc
 8001c6c:	40020428 	.word	0x40020428
 8001c70:	24001674 	.word	0x24001674
 8001c74:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001de8 <HAL_UART_MspInit+0x364>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	f040 80ad 	bne.w	8001dde <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c84:	f04f 0202 	mov.w	r2, #2
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c96:	f107 0320 	add.w	r3, r7, #32
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f005 fec2 	bl	8007a24 <HAL_RCCEx_PeriphCLKConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_UART_MspInit+0x226>
      Error_Handler();
 8001ca6:	f7ff fa29 	bl	80010fc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001caa:	4b50      	ldr	r3, [pc, #320]	@ (8001dec <HAL_UART_MspInit+0x368>)
 8001cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cb0:	4a4e      	ldr	r2, [pc, #312]	@ (8001dec <HAL_UART_MspInit+0x368>)
 8001cb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cba:	4b4c      	ldr	r3, [pc, #304]	@ (8001dec <HAL_UART_MspInit+0x368>)
 8001cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc8:	4b48      	ldr	r3, [pc, #288]	@ (8001dec <HAL_UART_MspInit+0x368>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cce:	4a47      	ldr	r2, [pc, #284]	@ (8001dec <HAL_UART_MspInit+0x368>)
 8001cd0:	f043 0308 	orr.w	r3, r3, #8
 8001cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cd8:	4b44      	ldr	r3, [pc, #272]	@ (8001dec <HAL_UART_MspInit+0x368>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ce6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d00:	2307      	movs	r3, #7
 8001d02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d06:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4838      	ldr	r0, [pc, #224]	@ (8001df0 <HAL_UART_MspInit+0x36c>)
 8001d0e:	f004 fc43 	bl	8006598 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001d12:	4b38      	ldr	r3, [pc, #224]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d14:	4a38      	ldr	r2, [pc, #224]	@ (8001df8 <HAL_UART_MspInit+0x374>)
 8001d16:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d18:	4b36      	ldr	r3, [pc, #216]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d1a:	222d      	movs	r2, #45	@ 0x2d
 8001d1c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d1e:	4b35      	ldr	r3, [pc, #212]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d24:	4b33      	ldr	r3, [pc, #204]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d2a:	4b32      	ldr	r3, [pc, #200]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d30:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d32:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d38:	4b2e      	ldr	r3, [pc, #184]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d44:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d46:	4b2b      	ldr	r3, [pc, #172]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d48:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d4c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d4e:	4b29      	ldr	r3, [pc, #164]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d54:	4827      	ldr	r0, [pc, #156]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d56:	f001 fde3 	bl	8003920 <HAL_DMA_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8001d60:	f7ff f9cc 	bl	80010fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a23      	ldr	r2, [pc, #140]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001d6c:	4a21      	ldr	r2, [pc, #132]	@ (8001df4 <HAL_UART_MspInit+0x370>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001d72:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001d74:	4a22      	ldr	r2, [pc, #136]	@ (8001e00 <HAL_UART_MspInit+0x37c>)
 8001d76:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001d78:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001d7a:	222e      	movs	r2, #46	@ 0x2e
 8001d7c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001d80:	2240      	movs	r2, #64	@ 0x40
 8001d82:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001d8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d90:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d98:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001d9e:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001da4:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001da6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001daa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dac:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001db2:	4812      	ldr	r0, [pc, #72]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001db4:	f001 fdb4 	bl	8003920 <HAL_DMA_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 8001dbe:	f7ff f99d 	bl	80010fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001dc6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001dfc <HAL_UART_MspInit+0x378>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2108      	movs	r1, #8
 8001dd2:	2027      	movs	r0, #39	@ 0x27
 8001dd4:	f001 fd7c 	bl	80038d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dd8:	2027      	movs	r0, #39	@ 0x27
 8001dda:	f001 fd93 	bl	8003904 <HAL_NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	37f8      	adds	r7, #248	@ 0xf8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40004800 	.word	0x40004800
 8001dec:	58024400 	.word	0x58024400
 8001df0:	58020c00 	.word	0x58020c00
 8001df4:	240016ec 	.word	0x240016ec
 8001df8:	40020010 	.word	0x40020010
 8001dfc:	24001764 	.word	0x24001764
 8001e00:	40020028 	.word	0x40020028

08001e04 <fGetJoyPostition>:
  * @param  uiRefMax: Analog value for axis maximum limit.
  * @param  uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
  return ((int)(uiValue - uiRef0) > 0) ? ((int)(uiValue - uiRef0))/((float)(uiRefMax - uiRef0)) : ((int)(uiValue - uiRef0))/((float)(uiRef0 - uiRefMin));
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	dd10      	ble.n	8001e3e <fGetJoyPostition+0x3a>
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e3c:	e00f      	b.n	8001e5e <fGetJoyPostition+0x5a>
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8001e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	b490      	push	{r4, r7}
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	f107 0408 	add.w	r4, r7, #8
 8001e76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ucTxMsg[0]  = (unsigned char)'#';
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	2223      	movs	r2, #35	@ 0x23
 8001e7e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'S';
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	3301      	adds	r3, #1
 8001e84:	2253      	movs	r2, #83	@ 0x53
 8001e86:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xControlActionTx.xSteeringAngle.ucBytes[0];
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	7a3a      	ldrb	r2, [r7, #8]
 8001e8e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xControlActionTx.xSteeringAngle.ucBytes[1];
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	3303      	adds	r3, #3
 8001e94:	7a7a      	ldrb	r2, [r7, #9]
 8001e96:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xControlActionTx.xSteeringAngle.ucBytes[2];
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	7aba      	ldrb	r2, [r7, #10]
 8001e9e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xControlActionTx.xSteeringAngle.ucBytes[3];
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	3305      	adds	r3, #5
 8001ea4:	7afa      	ldrb	r2, [r7, #11]
 8001ea6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'W';
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	3306      	adds	r3, #6
 8001eac:	2257      	movs	r2, #87	@ 0x57
 8001eae:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xControlActionTx.xSteeringVelocity.ucBytes[0];
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	7b3a      	ldrb	r2, [r7, #12]
 8001eb6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xControlActionTx.xSteeringVelocity.ucBytes[1];
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	3308      	adds	r3, #8
 8001ebc:	7b7a      	ldrb	r2, [r7, #13]
 8001ebe:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xControlActionTx.xSteeringVelocity.ucBytes[2];
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	3309      	adds	r3, #9
 8001ec4:	7bba      	ldrb	r2, [r7, #14]
 8001ec6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xControlActionTx.xSteeringVelocity.ucBytes[3];
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	330a      	adds	r3, #10
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'V';
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	330b      	adds	r3, #11
 8001ed4:	2256      	movs	r2, #86	@ 0x56
 8001ed6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xControlActionTx.xSpeed.ucBytes[0];
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	330c      	adds	r3, #12
 8001edc:	7c3a      	ldrb	r2, [r7, #16]
 8001ede:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xControlActionTx.xSpeed.ucBytes[1];
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	330d      	adds	r3, #13
 8001ee4:	7c7a      	ldrb	r2, [r7, #17]
 8001ee6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xControlActionTx.xSpeed.ucBytes[2];
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	330e      	adds	r3, #14
 8001eec:	7cba      	ldrb	r2, [r7, #18]
 8001eee:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xControlActionTx.xSpeed.ucBytes[3];
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	330f      	adds	r3, #15
 8001ef4:	7cfa      	ldrb	r2, [r7, #19]
 8001ef6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'A';
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	3310      	adds	r3, #16
 8001efc:	2241      	movs	r2, #65	@ 0x41
 8001efe:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.xAcceleration.ucBytes[0];
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	3311      	adds	r3, #17
 8001f04:	7d3a      	ldrb	r2, [r7, #20]
 8001f06:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = xControlActionTx.xAcceleration.ucBytes[1];
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	3312      	adds	r3, #18
 8001f0c:	7d7a      	ldrb	r2, [r7, #21]
 8001f0e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.xAcceleration.ucBytes[2];
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	3313      	adds	r3, #19
 8001f14:	7dba      	ldrb	r2, [r7, #22]
 8001f16:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = xControlActionTx.xAcceleration.ucBytes[3];
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	3314      	adds	r3, #20
 8001f1c:	7dfa      	ldrb	r2, [r7, #23]
 8001f1e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = (unsigned char)'J';
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	3315      	adds	r3, #21
 8001f24:	224a      	movs	r2, #74	@ 0x4a
 8001f26:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = xControlActionTx.xJerk.ucBytes[0];
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	3316      	adds	r3, #22
 8001f2c:	7e3a      	ldrb	r2, [r7, #24]
 8001f2e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.xJerk.ucBytes[1];
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	3317      	adds	r3, #23
 8001f34:	7e7a      	ldrb	r2, [r7, #25]
 8001f36:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = xControlActionTx.xJerk.ucBytes[2];
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	3318      	adds	r3, #24
 8001f3c:	7eba      	ldrb	r2, [r7, #26]
 8001f3e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = xControlActionTx.xJerk.ucBytes[3];
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	3319      	adds	r3, #25
 8001f44:	7efa      	ldrb	r2, [r7, #27]
 8001f46:	701a      	strb	r2, [r3, #0]
  ucTxMsg[26] = (unsigned char)'M';
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	331a      	adds	r3, #26
 8001f4c:	224d      	movs	r2, #77	@ 0x4d
 8001f4e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[27] = xControlActionTx.ucControlMode;
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	331b      	adds	r3, #27
 8001f54:	7f3a      	ldrb	r2, [r7, #28]
 8001f56:	701a      	strb	r2, [r3, #0]
  ucTxMsg[28] = (unsigned char)'$';
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	331c      	adds	r3, #28
 8001f5c:	2224      	movs	r2, #36	@ 0x24
 8001f5e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[29] = (unsigned char)'\0';
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	331d      	adds	r3, #29
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
  
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc90      	pop	{r4, r7}
 8001f6e:	b004      	add	sp, #16
 8001f70:	4770      	bx	lr
	...

08001f74 <vDrivingModeLights>:
  * @brief  Update driving mode signaling lights
  * @param  ucDrivingMode:  Driving mode
  * @retval None
  */
void vDrivingModeLights(unsigned char ucDrivingMode)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  switch (ucDrivingMode)
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d016      	beq.n	8001fb2 <vDrivingModeLights+0x3e>
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	dc36      	bgt.n	8001ff6 <vDrivingModeLights+0x82>
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <vDrivingModeLights+0x60>
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d132      	bne.n	8001ff6 <vDrivingModeLights+0x82>
  {
    case AUTOWARE:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Green LED
 8001f90:	2200      	movs	r2, #0
 8001f92:	2101      	movs	r1, #1
 8001f94:	481a      	ldr	r0, [pc, #104]	@ (8002000 <vDrivingModeLights+0x8c>)
 8001f96:	f004 fcaf 	bl	80068f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1); // Ambar LED
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4819      	ldr	r0, [pc, #100]	@ (8002004 <vDrivingModeLights+0x90>)
 8001fa0:	f004 fcaa 	bl	80068f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001faa:	4815      	ldr	r0, [pc, #84]	@ (8002000 <vDrivingModeLights+0x8c>)
 8001fac:	f004 fca4 	bl	80068f8 <HAL_GPIO_WritePin>
      break;
 8001fb0:	e022      	b.n	8001ff8 <vDrivingModeLights+0x84>

    case MANUAL:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 1); // Green LED
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4812      	ldr	r0, [pc, #72]	@ (8002000 <vDrivingModeLights+0x8c>)
 8001fb8:	f004 fc9e 	bl	80068f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Ambar LED
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	4810      	ldr	r0, [pc, #64]	@ (8002004 <vDrivingModeLights+0x90>)
 8001fc2:	f004 fc99 	bl	80068f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fcc:	480c      	ldr	r0, [pc, #48]	@ (8002000 <vDrivingModeLights+0x8c>)
 8001fce:	f004 fc93 	bl	80068f8 <HAL_GPIO_WritePin>
      break;
 8001fd2:	e011      	b.n	8001ff8 <vDrivingModeLights+0x84>

    case EMERGENCY:
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Green LED
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	480a      	ldr	r0, [pc, #40]	@ (8002004 <vDrivingModeLights+0x90>)
 8001fda:	f004 fc8d 	bl	80068f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Ambar LED
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	4807      	ldr	r0, [pc, #28]	@ (8002000 <vDrivingModeLights+0x8c>)
 8001fe4:	f004 fc88 	bl	80068f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 1); // Red LED
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fee:	4804      	ldr	r0, [pc, #16]	@ (8002000 <vDrivingModeLights+0x8c>)
 8001ff0:	f004 fc82 	bl	80068f8 <HAL_GPIO_WritePin>
      break;
 8001ff4:	e000      	b.n	8001ff8 <vDrivingModeLights+0x84>

    default:
      break;
 8001ff6:	bf00      	nop
  }

}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	58020400 	.word	0x58020400
 8002004:	58021000 	.word	0x58021000

08002008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002040 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800200c:	f7ff fa2e 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002010:	480c      	ldr	r0, [pc, #48]	@ (8002044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002012:	490d      	ldr	r1, [pc, #52]	@ (8002048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002018:	e002      	b.n	8002020 <LoopCopyDataInit>

0800201a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800201c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201e:	3304      	adds	r3, #4

08002020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002024:	d3f9      	bcc.n	800201a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002026:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002028:	4c0a      	ldr	r4, [pc, #40]	@ (8002054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800202c:	e001      	b.n	8002032 <LoopFillZerobss>

0800202e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002030:	3204      	adds	r2, #4

08002032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002034:	d3fb      	bcc.n	800202e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002036:	f011 fdf3 	bl	8013c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203a:	f7fe fdd5 	bl	8000be8 <main>
  bx  lr
 800203e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002040:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002044:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002048:	24001308 	.word	0x24001308
  ldr r2, =_sidata
 800204c:	08015d28 	.word	0x08015d28
  ldr r2, =_sbss
 8002050:	24001308 	.word	0x24001308
  ldr r4, =_ebss
 8002054:	24033454 	.word	0x24033454

08002058 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC3_IRQHandler>
	...

0800205c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002062:	2003      	movs	r0, #3
 8002064:	f001 fc29 	bl	80038ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002068:	f005 fac4 	bl	80075f4 <HAL_RCC_GetSysClockFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <HAL_Init+0x68>)
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	4913      	ldr	r1, [pc, #76]	@ (80020c8 <HAL_Init+0x6c>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002086:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <HAL_Init+0x68>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	4a0e      	ldr	r2, [pc, #56]	@ (80020c8 <HAL_Init+0x6c>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	4a0b      	ldr	r2, [pc, #44]	@ (80020cc <HAL_Init+0x70>)
 800209e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020a0:	4a0b      	ldr	r2, [pc, #44]	@ (80020d0 <HAL_Init+0x74>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020a6:	200f      	movs	r0, #15
 80020a8:	f7ff f84c 	bl	8001144 <HAL_InitTick>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e002      	b.n	80020bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020b6:	f7ff f827 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	58024400 	.word	0x58024400
 80020c8:	0801404c 	.word	0x0801404c
 80020cc:	24000004 	.word	0x24000004
 80020d0:	24000000 	.word	0x24000000

080020d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_IncTick+0x20>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_IncTick+0x24>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	@ (80020f8 <HAL_IncTick+0x24>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	2400000c 	.word	0x2400000c
 80020f8:	240017dc 	.word	0x240017dc

080020fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b03      	ldr	r3, [pc, #12]	@ (8002110 <HAL_GetTick+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	240017dc 	.word	0x240017dc

08002114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff ffee 	bl	80020fc <HAL_GetTick>
 8002120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800212c:	d005      	beq.n	800213a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212e:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <HAL_Delay+0x44>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800213a:	bf00      	nop
 800213c:	f7ff ffde 	bl	80020fc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	429a      	cmp	r2, r3
 800214a:	d8f7      	bhi.n	800213c <HAL_Delay+0x28>
  {
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2400000c 	.word	0x2400000c

0800215c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <HAL_GetREVID+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0c1b      	lsrs	r3, r3, #16
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	5c001000 	.word	0x5c001000

08002174 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	609a      	str	r2, [r3, #8]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3360      	adds	r3, #96	@ 0x60
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	430b      	orrs	r3, r1
 800220a:	431a      	orrs	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	431a      	orrs	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	611a      	str	r2, [r3, #16]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800224e:	b480      	push	{r7}
 8002250:	b087      	sub	sp, #28
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3360      	adds	r3, #96	@ 0x60
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	431a      	orrs	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	601a      	str	r2, [r3, #0]
  }
}
 8002278:	bf00      	nop
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b087      	sub	sp, #28
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3330      	adds	r3, #48	@ 0x30
 80022ba:	461a      	mov	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	4413      	add	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	211f      	movs	r1, #31
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	401a      	ands	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	f003 011f 	and.w	r1, r3, #31
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	431a      	orrs	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022f6:	bf00      	nop
 80022f8:	371c      	adds	r7, #28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f023 0203 	bic.w	r2, r3, #3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	60da      	str	r2, [r3, #12]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3314      	adds	r3, #20
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	0e5b      	lsrs	r3, r3, #25
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	4413      	add	r3, r2
 8002346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	0d1b      	lsrs	r3, r3, #20
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	2107      	movs	r1, #7
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	401a      	ands	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	0d1b      	lsrs	r3, r3, #20
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	431a      	orrs	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002398:	43db      	mvns	r3, r3
 800239a:	401a      	ands	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0318 	and.w	r3, r3, #24
 80023a2:	4908      	ldr	r1, [pc, #32]	@ (80023c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023a4:	40d9      	lsrs	r1, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	400b      	ands	r3, r1
 80023aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ae:	431a      	orrs	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	000fffff 	.word	0x000fffff

080023c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 031f 	and.w	r3, r3, #31
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <LL_ADC_DisableDeepPowerDown+0x20>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6093      	str	r3, [r2, #8]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	5fffffc0 	.word	0x5fffffc0

08002408 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800241c:	d101      	bne.n	8002422 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <LL_ADC_EnableInternalRegulator+0x24>)
 800243e:	4013      	ands	r3, r2
 8002440:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	6fffffc0 	.word	0x6fffffc0

08002458 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002468:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800246c:	d101      	bne.n	8002472 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <LL_ADC_Enable+0x24>)
 800248e:	4013      	ands	r3, r2
 8002490:	f043 0201 	orr.w	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	7fffffc0 	.word	0x7fffffc0

080024a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <LL_ADC_IsEnabled+0x18>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <LL_ADC_IsEnabled+0x1a>
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <LL_ADC_REG_StartConversion+0x24>)
 80024de:	4013      	ands	r3, r2
 80024e0:	f043 0204 	orr.w	r2, r3, #4
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	7fffffc0 	.word	0x7fffffc0

080024f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b04      	cmp	r3, #4
 800250a:	d101      	bne.n	8002510 <LL_ADC_REG_IsConversionOngoing+0x18>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b08      	cmp	r3, #8
 8002530:	d101      	bne.n	8002536 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e18f      	b.n	800287e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7fe f8cb 	bl	8000708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff3f 	bl	8002408 <LL_ADC_IsDeepPowerDownEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff25 	bl	80023e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff5a 	bl	8002458 <LL_ADC_IsInternalRegulatorEnabled>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d114      	bne.n	80025d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff3e 	bl	8002430 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025b4:	4b87      	ldr	r3, [pc, #540]	@ (80027d4 <HAL_ADC_Init+0x290>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	4a87      	ldr	r2, [pc, #540]	@ (80027d8 <HAL_ADC_Init+0x294>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	3301      	adds	r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025c6:	e002      	b.n	80025ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f9      	bne.n	80025c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff3d 	bl	8002458 <LL_ADC_IsInternalRegulatorEnabled>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10d      	bne.n	8002600 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e8:	f043 0210 	orr.w	r2, r3, #16
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff77 	bl	80024f8 <LL_ADC_REG_IsConversionOngoing>
 800260a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 8129 	bne.w	800286c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 8125 	bne.w	800286c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002626:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff36 	bl	80024a8 <LL_ADC_IsEnabled>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d136      	bne.n	80026b0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a65      	ldr	r2, [pc, #404]	@ (80027dc <HAL_ADC_Init+0x298>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d004      	beq.n	8002656 <HAL_ADC_Init+0x112>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a63      	ldr	r2, [pc, #396]	@ (80027e0 <HAL_ADC_Init+0x29c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10e      	bne.n	8002674 <HAL_ADC_Init+0x130>
 8002656:	4861      	ldr	r0, [pc, #388]	@ (80027dc <HAL_ADC_Init+0x298>)
 8002658:	f7ff ff26 	bl	80024a8 <LL_ADC_IsEnabled>
 800265c:	4604      	mov	r4, r0
 800265e:	4860      	ldr	r0, [pc, #384]	@ (80027e0 <HAL_ADC_Init+0x29c>)
 8002660:	f7ff ff22 	bl	80024a8 <LL_ADC_IsEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	4323      	orrs	r3, r4
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e008      	b.n	8002686 <HAL_ADC_Init+0x142>
 8002674:	485b      	ldr	r0, [pc, #364]	@ (80027e4 <HAL_ADC_Init+0x2a0>)
 8002676:	f7ff ff17 	bl	80024a8 <LL_ADC_IsEnabled>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d012      	beq.n	80026b0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a53      	ldr	r2, [pc, #332]	@ (80027dc <HAL_ADC_Init+0x298>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d004      	beq.n	800269e <HAL_ADC_Init+0x15a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a51      	ldr	r2, [pc, #324]	@ (80027e0 <HAL_ADC_Init+0x29c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_Init+0x15e>
 800269e:	4a52      	ldr	r2, [pc, #328]	@ (80027e8 <HAL_ADC_Init+0x2a4>)
 80026a0:	e000      	b.n	80026a4 <HAL_ADC_Init+0x160>
 80026a2:	4a52      	ldr	r2, [pc, #328]	@ (80027ec <HAL_ADC_Init+0x2a8>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f7ff fd62 	bl	8002174 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80026b0:	f7ff fd54 	bl	800215c <HAL_GetREVID>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d914      	bls.n	80026e8 <HAL_ADC_Init+0x1a4>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d110      	bne.n	80026e8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7d5b      	ldrb	r3, [r3, #21]
 80026ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026d0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80026d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7f1b      	ldrb	r3, [r3, #28]
 80026dc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80026de:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026e0:	f043 030c 	orr.w	r3, r3, #12
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	e00d      	b.n	8002704 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7d5b      	ldrb	r3, [r3, #21]
 80026ec:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026f2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80026f8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7f1b      	ldrb	r3, [r3, #28]
 80026fe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7f1b      	ldrb	r3, [r3, #28]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d106      	bne.n	800271a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	3b01      	subs	r3, #1
 8002712:	045b      	lsls	r3, r3, #17
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4b2c      	ldr	r3, [pc, #176]	@ (80027f0 <HAL_ADC_Init+0x2ac>)
 800273e:	4013      	ands	r3, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	69b9      	ldr	r1, [r7, #24]
 8002746:	430b      	orrs	r3, r1
 8002748:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fed2 	bl	80024f8 <LL_ADC_REG_IsConversionOngoing>
 8002754:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fedf 	bl	800251e <LL_ADC_INJ_IsConversionOngoing>
 8002760:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d15f      	bne.n	8002828 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d15c      	bne.n	8002828 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7d1b      	ldrb	r3, [r3, #20]
 8002772:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	4b1c      	ldr	r3, [pc, #112]	@ (80027f4 <HAL_ADC_Init+0x2b0>)
 8002784:	4013      	ands	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	430b      	orrs	r3, r1
 800278e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002796:	2b01      	cmp	r3, #1
 8002798:	d130      	bne.n	80027fc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <HAL_ADC_Init+0x2b4>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027ae:	3a01      	subs	r2, #1
 80027b0:	0411      	lsls	r1, r2, #16
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027b6:	4311      	orrs	r1, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80027bc:	4311      	orrs	r1, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027c2:	430a      	orrs	r2, r1
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	611a      	str	r2, [r3, #16]
 80027d0:	e01c      	b.n	800280c <HAL_ADC_Init+0x2c8>
 80027d2:	bf00      	nop
 80027d4:	24000000 	.word	0x24000000
 80027d8:	053e2d63 	.word	0x053e2d63
 80027dc:	40022000 	.word	0x40022000
 80027e0:	40022100 	.word	0x40022100
 80027e4:	58026000 	.word	0x58026000
 80027e8:	40022300 	.word	0x40022300
 80027ec:	58026300 	.word	0x58026300
 80027f0:	fff0c003 	.word	0xfff0c003
 80027f4:	ffffbffc 	.word	0xffffbffc
 80027f8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fd8c 	bl	8003340 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10c      	bne.n	800284a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	f023 010f 	bic.w	r1, r3, #15
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	1e5a      	subs	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30
 8002848:	e007      	b.n	800285a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 020f 	bic.w	r2, r2, #15
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285e:	f023 0303 	bic.w	r3, r3, #3
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	655a      	str	r2, [r3, #84]	@ 0x54
 800286a:	e007      	b.n	800287c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	f043 0210 	orr.w	r2, r3, #16
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800287c:	7ffb      	ldrb	r3, [r7, #31]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3724      	adds	r7, #36	@ 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	bf00      	nop

08002888 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a55      	ldr	r2, [pc, #340]	@ (80029f0 <HAL_ADC_Start_DMA+0x168>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d004      	beq.n	80028a8 <HAL_ADC_Start_DMA+0x20>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a54      	ldr	r2, [pc, #336]	@ (80029f4 <HAL_ADC_Start_DMA+0x16c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_Start_DMA+0x24>
 80028a8:	4b53      	ldr	r3, [pc, #332]	@ (80029f8 <HAL_ADC_Start_DMA+0x170>)
 80028aa:	e000      	b.n	80028ae <HAL_ADC_Start_DMA+0x26>
 80028ac:	4b53      	ldr	r3, [pc, #332]	@ (80029fc <HAL_ADC_Start_DMA+0x174>)
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fd8a 	bl	80023c8 <LL_ADC_GetMultimode>
 80028b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fe1c 	bl	80024f8 <LL_ADC_REG_IsConversionOngoing>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 808c 	bne.w	80029e0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Start_DMA+0x4e>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e087      	b.n	80029e6 <HAL_ADC_Start_DMA+0x15e>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d002      	beq.n	80028f0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b09      	cmp	r3, #9
 80028ee:	d170      	bne.n	80029d2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fc07 	bl	8003104 <ADC_Enable>
 80028f6:	4603      	mov	r3, r0
 80028f8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d163      	bne.n	80029c8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002904:	4b3e      	ldr	r3, [pc, #248]	@ (8002a00 <HAL_ADC_Start_DMA+0x178>)
 8002906:	4013      	ands	r3, r2
 8002908:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a37      	ldr	r2, [pc, #220]	@ (80029f4 <HAL_ADC_Start_DMA+0x16c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d002      	beq.n	8002920 <HAL_ADC_Start_DMA+0x98>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	e000      	b.n	8002922 <HAL_ADC_Start_DMA+0x9a>
 8002920:	4b33      	ldr	r3, [pc, #204]	@ (80029f0 <HAL_ADC_Start_DMA+0x168>)
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	4293      	cmp	r3, r2
 8002928:	d002      	beq.n	8002930 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294c:	f023 0206 	bic.w	r2, r3, #6
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	659a      	str	r2, [r3, #88]	@ 0x58
 8002954:	e002      	b.n	800295c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002960:	4a28      	ldr	r2, [pc, #160]	@ (8002a04 <HAL_ADC_Start_DMA+0x17c>)
 8002962:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002968:	4a27      	ldr	r2, [pc, #156]	@ (8002a08 <HAL_ADC_Start_DMA+0x180>)
 800296a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002970:	4a26      	ldr	r2, [pc, #152]	@ (8002a0c <HAL_ADC_Start_DMA+0x184>)
 8002972:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	221c      	movs	r2, #28
 800297a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0210 	orr.w	r2, r2, #16
 8002992:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f7ff fcaf 	bl	8002302 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3340      	adds	r3, #64	@ 0x40
 80029ae:	4619      	mov	r1, r3
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f001 fb10 	bl	8003fd8 <HAL_DMA_Start_IT>
 80029b8:	4603      	mov	r3, r0
 80029ba:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fd85 	bl	80024d0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80029c6:	e00d      	b.n	80029e4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80029d0:	e008      	b.n	80029e4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80029de:	e001      	b.n	80029e4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
 80029e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40022100 	.word	0x40022100
 80029f8:	40022300 	.word	0x40022300
 80029fc:	58026300 	.word	0x58026300
 8002a00:	fffff0fe 	.word	0xfffff0fe
 8002a04:	08003219 	.word	0x08003219
 8002a08:	080032f1 	.word	0x080032f1
 8002a0c:	0800330d 	.word	0x0800330d

08002a10 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b0a1      	sub	sp, #132	@ 0x84
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a65      	ldr	r2, [pc, #404]	@ (8002bfc <HAL_ADC_ConfigChannel+0x1b0>)
 8002a66:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x2a>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e32e      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x688>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fd38 	bl	80024f8 <LL_ADC_REG_IsConversionOngoing>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 8313 	bne.w	80030b6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db2c      	blt.n	8002af2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d108      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x6a>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0e9b      	lsrs	r3, r3, #26
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2201      	movs	r2, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	e016      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x98>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ac4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ac6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ac8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e003      	b.n	8002ada <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002ad2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2201      	movs	r2, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	69d1      	ldr	r1, [r2, #28]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	430b      	orrs	r3, r1
 8002af0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6859      	ldr	r1, [r3, #4]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	f7ff fbd3 	bl	80022aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fcf5 	bl	80024f8 <LL_ADC_REG_IsConversionOngoing>
 8002b0e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fd02 	bl	800251e <LL_ADC_INJ_IsConversionOngoing>
 8002b1a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 80b8 	bne.w	8002c94 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 80b4 	bne.w	8002c94 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6819      	ldr	r1, [r3, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f7ff fbf5 	bl	8002328 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b3e:	4b30      	ldr	r3, [pc, #192]	@ (8002c00 <HAL_ADC_ConfigChannel+0x1b4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002b46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b4a:	d10b      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x118>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	e01d      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x154>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10b      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x13e>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	e00a      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x154>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d02c      	beq.n	8002c04 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6919      	ldr	r1, [r3, #16]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bb8:	f7ff fb10 	bl	80021dc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6919      	ldr	r1, [r3, #16]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	7e5b      	ldrb	r3, [r3, #25]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d102      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x186>
 8002bcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002bd0:	e000      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x188>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f7ff fb3a 	bl	800224e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6919      	ldr	r1, [r3, #16]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	7e1b      	ldrb	r3, [r3, #24]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d102      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x1a4>
 8002bea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002bee:	e000      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x1a6>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f7ff fb12 	bl	800221c <LL_ADC_SetDataRightShift>
 8002bf8:	e04c      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x248>
 8002bfa:	bf00      	nop
 8002bfc:	47ff0000 	.word	0x47ff0000
 8002c00:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	069b      	lsls	r3, r3, #26
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d107      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c26:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	069b      	lsls	r3, r3, #26
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d107      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c4a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	069b      	lsls	r3, r3, #26
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d107      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c6e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	069b      	lsls	r3, r3, #26
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d107      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c92:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fc05 	bl	80024a8 <LL_ADC_IsEnabled>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 8211 	bne.w	80030c8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6819      	ldr	r1, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f7ff fb64 	bl	8002380 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4aa1      	ldr	r2, [pc, #644]	@ (8002f44 <HAL_ADC_ConfigChannel+0x4f8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	f040 812e 	bne.w	8002f20 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10b      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x2a0>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0e9b      	lsrs	r3, r3, #26
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2b09      	cmp	r3, #9
 8002ce2:	bf94      	ite	ls
 8002ce4:	2301      	movls	r3, #1
 8002ce6:	2300      	movhi	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	e019      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x2d4>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cf4:	fa93 f3a3 	rbit	r3, r3
 8002cf8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002d04:	2320      	movs	r3, #32
 8002d06:	e003      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002d08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2b09      	cmp	r3, #9
 8002d18:	bf94      	ite	ls
 8002d1a:	2301      	movls	r3, #1
 8002d1c:	2300      	movhi	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d079      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x2f4>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0e9b      	lsrs	r3, r3, #26
 8002d36:	3301      	adds	r3, #1
 8002d38:	069b      	lsls	r3, r3, #26
 8002d3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d3e:	e015      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x320>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d50:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e003      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	069b      	lsls	r3, r3, #26
 8002d68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x340>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	2101      	movs	r1, #1
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	e017      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x370>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d9c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002da4:	2320      	movs	r3, #32
 8002da6:	e003      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2101      	movs	r1, #1
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	ea42 0103 	orr.w	r1, r2, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x396>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0e9b      	lsrs	r3, r3, #26
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	051b      	lsls	r3, r3, #20
 8002de0:	e018      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x3c8>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	e003      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e14:	430b      	orrs	r3, r1
 8002e16:	e07e      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x3e8>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0e9b      	lsrs	r3, r3, #26
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	069b      	lsls	r3, r3, #26
 8002e2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e32:	e015      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x414>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e003      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	069b      	lsls	r3, r3, #26
 8002e5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x434>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	0e9b      	lsrs	r3, r3, #26
 8002e72:	3301      	adds	r3, #1
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	e017      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x464>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	61bb      	str	r3, [r7, #24]
  return result;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002e98:	2320      	movs	r3, #32
 8002e9a:	e003      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	ea42 0103 	orr.w	r1, r2, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x490>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3b1e      	subs	r3, #30
 8002ed4:	051b      	lsls	r3, r3, #20
 8002ed6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002eda:	e01b      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x4c8>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	60fb      	str	r3, [r7, #12]
  return result;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	e003      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f003 021f 	and.w	r2, r3, #31
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b1e      	subs	r3, #30
 8002f0e:	051b      	lsls	r3, r3, #20
 8002f10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f14:	430b      	orrs	r3, r1
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	6892      	ldr	r2, [r2, #8]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f7ff fa04 	bl	8002328 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f280 80cf 	bge.w	80030c8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a06      	ldr	r2, [pc, #24]	@ (8002f48 <HAL_ADC_ConfigChannel+0x4fc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x4f2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a04      	ldr	r2, [pc, #16]	@ (8002f4c <HAL_ADC_ConfigChannel+0x500>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10a      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x508>
 8002f3e:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <HAL_ADC_ConfigChannel+0x504>)
 8002f40:	e009      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x50a>
 8002f42:	bf00      	nop
 8002f44:	47ff0000 	.word	0x47ff0000
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	40022100 	.word	0x40022100
 8002f50:	40022300 	.word	0x40022300
 8002f54:	4b61      	ldr	r3, [pc, #388]	@ (80030dc <HAL_ADC_ConfigChannel+0x690>)
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff f932 	bl	80021c0 <LL_ADC_GetCommonPathInternalCh>
 8002f5c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a5f      	ldr	r2, [pc, #380]	@ (80030e0 <HAL_ADC_ConfigChannel+0x694>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0x526>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80030e4 <HAL_ADC_ConfigChannel+0x698>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d10e      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x544>
 8002f72:	485b      	ldr	r0, [pc, #364]	@ (80030e0 <HAL_ADC_ConfigChannel+0x694>)
 8002f74:	f7ff fa98 	bl	80024a8 <LL_ADC_IsEnabled>
 8002f78:	4604      	mov	r4, r0
 8002f7a:	485a      	ldr	r0, [pc, #360]	@ (80030e4 <HAL_ADC_ConfigChannel+0x698>)
 8002f7c:	f7ff fa94 	bl	80024a8 <LL_ADC_IsEnabled>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4323      	orrs	r3, r4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e008      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x556>
 8002f90:	4855      	ldr	r0, [pc, #340]	@ (80030e8 <HAL_ADC_ConfigChannel+0x69c>)
 8002f92:	f7ff fa89 	bl	80024a8 <LL_ADC_IsEnabled>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d07d      	beq.n	80030a2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a50      	ldr	r2, [pc, #320]	@ (80030ec <HAL_ADC_ConfigChannel+0x6a0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d130      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x5c6>
 8002fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d12b      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a4a      	ldr	r2, [pc, #296]	@ (80030e8 <HAL_ADC_ConfigChannel+0x69c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	f040 8081 	bne.w	80030c8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a45      	ldr	r2, [pc, #276]	@ (80030e0 <HAL_ADC_ConfigChannel+0x694>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_ADC_ConfigChannel+0x58e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a43      	ldr	r2, [pc, #268]	@ (80030e4 <HAL_ADC_ConfigChannel+0x698>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x592>
 8002fda:	4a45      	ldr	r2, [pc, #276]	@ (80030f0 <HAL_ADC_ConfigChannel+0x6a4>)
 8002fdc:	e000      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x594>
 8002fde:	4a3f      	ldr	r2, [pc, #252]	@ (80030dc <HAL_ADC_ConfigChannel+0x690>)
 8002fe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fe2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f7ff f8d6 	bl	800219a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fee:	4b41      	ldr	r3, [pc, #260]	@ (80030f4 <HAL_ADC_ConfigChannel+0x6a8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	4a40      	ldr	r2, [pc, #256]	@ (80030f8 <HAL_ADC_ConfigChannel+0x6ac>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	099b      	lsrs	r3, r3, #6
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003002:	e002      	b.n	800300a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	3b01      	subs	r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f9      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003010:	e05a      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a39      	ldr	r2, [pc, #228]	@ (80030fc <HAL_ADC_ConfigChannel+0x6b0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d11e      	bne.n	800305a <HAL_ADC_ConfigChannel+0x60e>
 800301c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800301e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d119      	bne.n	800305a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a2f      	ldr	r2, [pc, #188]	@ (80030e8 <HAL_ADC_ConfigChannel+0x69c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d14b      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2a      	ldr	r2, [pc, #168]	@ (80030e0 <HAL_ADC_ConfigChannel+0x694>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d004      	beq.n	8003044 <HAL_ADC_ConfigChannel+0x5f8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a29      	ldr	r2, [pc, #164]	@ (80030e4 <HAL_ADC_ConfigChannel+0x698>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x5fc>
 8003044:	4a2a      	ldr	r2, [pc, #168]	@ (80030f0 <HAL_ADC_ConfigChannel+0x6a4>)
 8003046:	e000      	b.n	800304a <HAL_ADC_ConfigChannel+0x5fe>
 8003048:	4a24      	ldr	r2, [pc, #144]	@ (80030dc <HAL_ADC_ConfigChannel+0x690>)
 800304a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800304c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f7ff f8a1 	bl	800219a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003058:	e036      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a28      	ldr	r2, [pc, #160]	@ (8003100 <HAL_ADC_ConfigChannel+0x6b4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d131      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x67c>
 8003064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d12c      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1d      	ldr	r2, [pc, #116]	@ (80030e8 <HAL_ADC_ConfigChannel+0x69c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d127      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a18      	ldr	r2, [pc, #96]	@ (80030e0 <HAL_ADC_ConfigChannel+0x694>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_ADC_ConfigChannel+0x640>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a17      	ldr	r2, [pc, #92]	@ (80030e4 <HAL_ADC_ConfigChannel+0x698>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x644>
 800308c:	4a18      	ldr	r2, [pc, #96]	@ (80030f0 <HAL_ADC_ConfigChannel+0x6a4>)
 800308e:	e000      	b.n	8003092 <HAL_ADC_ConfigChannel+0x646>
 8003090:	4a12      	ldr	r2, [pc, #72]	@ (80030dc <HAL_ADC_ConfigChannel+0x690>)
 8003092:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003094:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f7ff f87d 	bl	800219a <LL_ADC_SetCommonPathInternalCh>
 80030a0:	e012      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80030b4:	e008      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ba:	f043 0220 	orr.w	r2, r3, #32
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80030d0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3784      	adds	r7, #132	@ 0x84
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd90      	pop	{r4, r7, pc}
 80030dc:	58026300 	.word	0x58026300
 80030e0:	40022000 	.word	0x40022000
 80030e4:	40022100 	.word	0x40022100
 80030e8:	58026000 	.word	0x58026000
 80030ec:	cb840000 	.word	0xcb840000
 80030f0:	40022300 	.word	0x40022300
 80030f4:	24000000 	.word	0x24000000
 80030f8:	053e2d63 	.word	0x053e2d63
 80030fc:	c7520000 	.word	0xc7520000
 8003100:	cfb80000 	.word	0xcfb80000

08003104 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f9c9 	bl	80024a8 <LL_ADC_IsEnabled>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d16e      	bne.n	80031fa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	4b38      	ldr	r3, [pc, #224]	@ (8003204 <ADC_Enable+0x100>)
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00d      	beq.n	8003146 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312e:	f043 0210 	orr.w	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e05a      	b.n	80031fc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff f998 	bl	8002480 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003150:	f7fe ffd4 	bl	80020fc <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2b      	ldr	r2, [pc, #172]	@ (8003208 <ADC_Enable+0x104>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <ADC_Enable+0x66>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a29      	ldr	r2, [pc, #164]	@ (800320c <ADC_Enable+0x108>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <ADC_Enable+0x6a>
 800316a:	4b29      	ldr	r3, [pc, #164]	@ (8003210 <ADC_Enable+0x10c>)
 800316c:	e000      	b.n	8003170 <ADC_Enable+0x6c>
 800316e:	4b29      	ldr	r3, [pc, #164]	@ (8003214 <ADC_Enable+0x110>)
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff f929 	bl	80023c8 <LL_ADC_GetMultimode>
 8003176:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a23      	ldr	r2, [pc, #140]	@ (800320c <ADC_Enable+0x108>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d002      	beq.n	8003188 <ADC_Enable+0x84>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	e000      	b.n	800318a <ADC_Enable+0x86>
 8003188:	4b1f      	ldr	r3, [pc, #124]	@ (8003208 <ADC_Enable+0x104>)
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	4293      	cmp	r3, r2
 8003190:	d02c      	beq.n	80031ec <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d130      	bne.n	80031fa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003198:	e028      	b.n	80031ec <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff f982 	bl	80024a8 <LL_ADC_IsEnabled>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d104      	bne.n	80031b4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff f966 	bl	8002480 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031b4:	f7fe ffa2 	bl	80020fc <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d914      	bls.n	80031ec <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d00d      	beq.n	80031ec <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d4:	f043 0210 	orr.w	r2, r3, #16
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e0:	f043 0201 	orr.w	r2, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e007      	b.n	80031fc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d1cf      	bne.n	800319a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	8000003f 	.word	0x8000003f
 8003208:	40022000 	.word	0x40022000
 800320c:	40022100 	.word	0x40022100
 8003210:	40022300 	.word	0x40022300
 8003214:	58026300 	.word	0x58026300

08003218 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003224:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800322e:	2b00      	cmp	r3, #0
 8003230:	d14b      	bne.n	80032ca <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003236:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d021      	beq.n	8003290 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff f817 	bl	8002284 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d032      	beq.n	80032c2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d12b      	bne.n	80032c2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11f      	bne.n	80032c2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	655a      	str	r2, [r3, #84]	@ 0x54
 800328e:	e018      	b.n	80032c2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d111      	bne.n	80032c2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff fba4 	bl	8002a10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032c8:	e00e      	b.n	80032e8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff fbae 	bl	8002a38 <HAL_ADC_ErrorCallback>
}
 80032dc:	e004      	b.n	80032e8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff fb90 	bl	8002a24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332a:	f043 0204 	orr.w	r2, r3, #4
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff fb80 	bl	8002a38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a7a      	ldr	r2, [pc, #488]	@ (8003538 <ADC_ConfigureBoostMode+0x1f8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d004      	beq.n	800335c <ADC_ConfigureBoostMode+0x1c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a79      	ldr	r2, [pc, #484]	@ (800353c <ADC_ConfigureBoostMode+0x1fc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d109      	bne.n	8003370 <ADC_ConfigureBoostMode+0x30>
 800335c:	4b78      	ldr	r3, [pc, #480]	@ (8003540 <ADC_ConfigureBoostMode+0x200>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	e008      	b.n	8003382 <ADC_ConfigureBoostMode+0x42>
 8003370:	4b74      	ldr	r3, [pc, #464]	@ (8003544 <ADC_ConfigureBoostMode+0x204>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf14      	ite	ne
 800337c:	2301      	movne	r3, #1
 800337e:	2300      	moveq	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01c      	beq.n	80033c0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003386:	f004 faaf 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 800338a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003394:	d010      	beq.n	80033b8 <ADC_ConfigureBoostMode+0x78>
 8003396:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800339a:	d873      	bhi.n	8003484 <ADC_ConfigureBoostMode+0x144>
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a0:	d002      	beq.n	80033a8 <ADC_ConfigureBoostMode+0x68>
 80033a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033a6:	d16d      	bne.n	8003484 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	0c1b      	lsrs	r3, r3, #16
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	60fb      	str	r3, [r7, #12]
        break;
 80033b6:	e068      	b.n	800348a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	60fb      	str	r3, [r7, #12]
        break;
 80033be:	e064      	b.n	800348a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80033c0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	f005 fd36 	bl	8008e38 <HAL_RCCEx_GetPeriphCLKFreq>
 80033cc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033d6:	d051      	beq.n	800347c <ADC_ConfigureBoostMode+0x13c>
 80033d8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033dc:	d854      	bhi.n	8003488 <ADC_ConfigureBoostMode+0x148>
 80033de:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033e2:	d047      	beq.n	8003474 <ADC_ConfigureBoostMode+0x134>
 80033e4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033e8:	d84e      	bhi.n	8003488 <ADC_ConfigureBoostMode+0x148>
 80033ea:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033ee:	d03d      	beq.n	800346c <ADC_ConfigureBoostMode+0x12c>
 80033f0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033f4:	d848      	bhi.n	8003488 <ADC_ConfigureBoostMode+0x148>
 80033f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033fa:	d033      	beq.n	8003464 <ADC_ConfigureBoostMode+0x124>
 80033fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003400:	d842      	bhi.n	8003488 <ADC_ConfigureBoostMode+0x148>
 8003402:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003406:	d029      	beq.n	800345c <ADC_ConfigureBoostMode+0x11c>
 8003408:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800340c:	d83c      	bhi.n	8003488 <ADC_ConfigureBoostMode+0x148>
 800340e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003412:	d01a      	beq.n	800344a <ADC_ConfigureBoostMode+0x10a>
 8003414:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003418:	d836      	bhi.n	8003488 <ADC_ConfigureBoostMode+0x148>
 800341a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800341e:	d014      	beq.n	800344a <ADC_ConfigureBoostMode+0x10a>
 8003420:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003424:	d830      	bhi.n	8003488 <ADC_ConfigureBoostMode+0x148>
 8003426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800342a:	d00e      	beq.n	800344a <ADC_ConfigureBoostMode+0x10a>
 800342c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003430:	d82a      	bhi.n	8003488 <ADC_ConfigureBoostMode+0x148>
 8003432:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003436:	d008      	beq.n	800344a <ADC_ConfigureBoostMode+0x10a>
 8003438:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800343c:	d824      	bhi.n	8003488 <ADC_ConfigureBoostMode+0x148>
 800343e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003442:	d002      	beq.n	800344a <ADC_ConfigureBoostMode+0x10a>
 8003444:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003448:	d11e      	bne.n	8003488 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	0c9b      	lsrs	r3, r3, #18
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	60fb      	str	r3, [r7, #12]
        break;
 800345a:	e016      	b.n	800348a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	60fb      	str	r3, [r7, #12]
        break;
 8003462:	e012      	b.n	800348a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	60fb      	str	r3, [r7, #12]
        break;
 800346a:	e00e      	b.n	800348a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	099b      	lsrs	r3, r3, #6
 8003470:	60fb      	str	r3, [r7, #12]
        break;
 8003472:	e00a      	b.n	800348a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	09db      	lsrs	r3, r3, #7
 8003478:	60fb      	str	r3, [r7, #12]
        break;
 800347a:	e006      	b.n	800348a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	60fb      	str	r3, [r7, #12]
        break;
 8003482:	e002      	b.n	800348a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003484:	bf00      	nop
 8003486:	e000      	b.n	800348a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003488:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800348a:	f7fe fe67 	bl	800215c <HAL_GetREVID>
 800348e:	4603      	mov	r3, r0
 8003490:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003494:	4293      	cmp	r3, r2
 8003496:	d815      	bhi.n	80034c4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a2b      	ldr	r2, [pc, #172]	@ (8003548 <ADC_ConfigureBoostMode+0x208>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d908      	bls.n	80034b2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80034b0:	e03e      	b.n	8003530 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034c0:	609a      	str	r2, [r3, #8]
}
 80034c2:	e035      	b.n	8003530 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	085b      	lsrs	r3, r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a1f      	ldr	r2, [pc, #124]	@ (800354c <ADC_ConfigureBoostMode+0x20c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d808      	bhi.n	80034e4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80034e0:	609a      	str	r2, [r3, #8]
}
 80034e2:	e025      	b.n	8003530 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003550 <ADC_ConfigureBoostMode+0x210>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d80a      	bhi.n	8003502 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034fe:	609a      	str	r2, [r3, #8]
}
 8003500:	e016      	b.n	8003530 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4a13      	ldr	r2, [pc, #76]	@ (8003554 <ADC_ConfigureBoostMode+0x214>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d80a      	bhi.n	8003520 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800351c:	609a      	str	r2, [r3, #8]
}
 800351e:	e007      	b.n	8003530 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800352e:	609a      	str	r2, [r3, #8]
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40022000 	.word	0x40022000
 800353c:	40022100 	.word	0x40022100
 8003540:	40022300 	.word	0x40022300
 8003544:	58026300 	.word	0x58026300
 8003548:	01312d00 	.word	0x01312d00
 800354c:	005f5e10 	.word	0x005f5e10
 8003550:	00bebc20 	.word	0x00bebc20
 8003554:	017d7840 	.word	0x017d7840

08003558 <LL_ADC_IsEnabled>:
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <LL_ADC_IsEnabled+0x18>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <LL_ADC_IsEnabled+0x1a>
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <LL_ADC_REG_IsConversionOngoing>:
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d101      	bne.n	8003596 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b09f      	sub	sp, #124	@ 0x7c
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035be:	2302      	movs	r3, #2
 80035c0:	e0be      	b.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d102      	bne.n	80035e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035dc:	4b5b      	ldr	r3, [pc, #364]	@ (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	e001      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e09d      	b.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ffb9 	bl	800357e <LL_ADC_REG_IsConversionOngoing>
 800360c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ffb3 	bl	800357e <LL_ADC_REG_IsConversionOngoing>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d17f      	bne.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800361e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003620:	2b00      	cmp	r3, #0
 8003622:	d17c      	bne.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a47      	ldr	r2, [pc, #284]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a46      	ldr	r2, [pc, #280]	@ (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d101      	bne.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003638:	4b45      	ldr	r3, [pc, #276]	@ (8003750 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800363a:	e000      	b.n	800363e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800363c:	4b45      	ldr	r3, [pc, #276]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800363e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d039      	beq.n	80036bc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	431a      	orrs	r2, r3
 8003656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003658:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a3a      	ldr	r2, [pc, #232]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a38      	ldr	r2, [pc, #224]	@ (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10e      	bne.n	800368c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800366e:	4836      	ldr	r0, [pc, #216]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003670:	f7ff ff72 	bl	8003558 <LL_ADC_IsEnabled>
 8003674:	4604      	mov	r4, r0
 8003676:	4835      	ldr	r0, [pc, #212]	@ (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003678:	f7ff ff6e 	bl	8003558 <LL_ADC_IsEnabled>
 800367c:	4603      	mov	r3, r0
 800367e:	4323      	orrs	r3, r4
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e008      	b.n	800369e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800368c:	4832      	ldr	r0, [pc, #200]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800368e:	f7ff ff63 	bl	8003558 <LL_ADC_IsEnabled>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d047      	beq.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	4b2d      	ldr	r3, [pc, #180]	@ (800375c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	6811      	ldr	r1, [r2, #0]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	6892      	ldr	r2, [r2, #8]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	431a      	orrs	r2, r3
 80036b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036b8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036ba:	e03a      	b.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80036bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d004      	beq.n	80036dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1d      	ldr	r2, [pc, #116]	@ (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d10e      	bne.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80036dc:	481a      	ldr	r0, [pc, #104]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036de:	f7ff ff3b 	bl	8003558 <LL_ADC_IsEnabled>
 80036e2:	4604      	mov	r4, r0
 80036e4:	4819      	ldr	r0, [pc, #100]	@ (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036e6:	f7ff ff37 	bl	8003558 <LL_ADC_IsEnabled>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4323      	orrs	r3, r4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e008      	b.n	800370c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80036fa:	4817      	ldr	r0, [pc, #92]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80036fc:	f7ff ff2c 	bl	8003558 <LL_ADC_IsEnabled>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	bf0c      	ite	eq
 8003706:	2301      	moveq	r3, #1
 8003708:	2300      	movne	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d010      	beq.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	4b11      	ldr	r3, [pc, #68]	@ (800375c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003716:	4013      	ands	r3, r2
 8003718:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800371a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800371c:	e009      	b.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003722:	f043 0220 	orr.w	r2, r3, #32
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003730:	e000      	b.n	8003734 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003732:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800373c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003740:	4618      	mov	r0, r3
 8003742:	377c      	adds	r7, #124	@ 0x7c
 8003744:	46bd      	mov	sp, r7
 8003746:	bd90      	pop	{r4, r7, pc}
 8003748:	40022000 	.word	0x40022000
 800374c:	40022100 	.word	0x40022100
 8003750:	40022300 	.word	0x40022300
 8003754:	58026300 	.word	0x58026300
 8003758:	58026000 	.word	0x58026000
 800375c:	fffff0e0 	.word	0xfffff0e0

08003760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003770:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800377c:	4013      	ands	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <__NVIC_SetPriorityGrouping+0x44>)
 800378a:	4313      	orrs	r3, r2
 800378c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378e:	4a04      	ldr	r2, [pc, #16]	@ (80037a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	60d3      	str	r3, [r2, #12]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00
 80037a4:	05fa0000 	.word	0x05fa0000

080037a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037ac:	4b04      	ldr	r3, [pc, #16]	@ (80037c0 <__NVIC_GetPriorityGrouping+0x18>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	0a1b      	lsrs	r3, r3, #8
 80037b2:	f003 0307 	and.w	r3, r3, #7
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	db0b      	blt.n	80037ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	f003 021f 	and.w	r2, r3, #31
 80037dc:	4907      	ldr	r1, [pc, #28]	@ (80037fc <__NVIC_EnableIRQ+0x38>)
 80037de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2001      	movs	r0, #1
 80037e6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000e100 	.word	0xe000e100

08003800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	6039      	str	r1, [r7, #0]
 800380a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800380c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003810:	2b00      	cmp	r3, #0
 8003812:	db0a      	blt.n	800382a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	490c      	ldr	r1, [pc, #48]	@ (800384c <__NVIC_SetPriority+0x4c>)
 800381a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	440b      	add	r3, r1
 8003824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003828:	e00a      	b.n	8003840 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4908      	ldr	r1, [pc, #32]	@ (8003850 <__NVIC_SetPriority+0x50>)
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	3b04      	subs	r3, #4
 8003838:	0112      	lsls	r2, r2, #4
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	440b      	add	r3, r1
 800383e:	761a      	strb	r2, [r3, #24]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000e100 	.word	0xe000e100
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003854:	b480      	push	{r7}
 8003856:	b089      	sub	sp, #36	@ 0x24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f1c3 0307 	rsb	r3, r3, #7
 800386e:	2b04      	cmp	r3, #4
 8003870:	bf28      	it	cs
 8003872:	2304      	movcs	r3, #4
 8003874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3304      	adds	r3, #4
 800387a:	2b06      	cmp	r3, #6
 800387c:	d902      	bls.n	8003884 <NVIC_EncodePriority+0x30>
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3b03      	subs	r3, #3
 8003882:	e000      	b.n	8003886 <NVIC_EncodePriority+0x32>
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43da      	mvns	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	401a      	ands	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800389c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	fa01 f303 	lsl.w	r3, r1, r3
 80038a6:	43d9      	mvns	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	4313      	orrs	r3, r2
         );
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3724      	adds	r7, #36	@ 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ff4c 	bl	8003760 <__NVIC_SetPriorityGrouping>
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038de:	f7ff ff63 	bl	80037a8 <__NVIC_GetPriorityGrouping>
 80038e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	6978      	ldr	r0, [r7, #20]
 80038ea:	f7ff ffb3 	bl	8003854 <NVIC_EncodePriority>
 80038ee:	4602      	mov	r2, r0
 80038f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff82 	bl	8003800 <__NVIC_SetPriority>
}
 80038fc:	bf00      	nop
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800390e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ff56 	bl	80037c4 <__NVIC_EnableIRQ>
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003928:	f7fe fbe8 	bl	80020fc <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e316      	b.n	8003f66 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a66      	ldr	r2, [pc, #408]	@ (8003ad8 <HAL_DMA_Init+0x1b8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d04a      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a65      	ldr	r2, [pc, #404]	@ (8003adc <HAL_DMA_Init+0x1bc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d045      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a63      	ldr	r2, [pc, #396]	@ (8003ae0 <HAL_DMA_Init+0x1c0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d040      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a62      	ldr	r2, [pc, #392]	@ (8003ae4 <HAL_DMA_Init+0x1c4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d03b      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a60      	ldr	r2, [pc, #384]	@ (8003ae8 <HAL_DMA_Init+0x1c8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d036      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a5f      	ldr	r2, [pc, #380]	@ (8003aec <HAL_DMA_Init+0x1cc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d031      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a5d      	ldr	r2, [pc, #372]	@ (8003af0 <HAL_DMA_Init+0x1d0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d02c      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a5c      	ldr	r2, [pc, #368]	@ (8003af4 <HAL_DMA_Init+0x1d4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d027      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a5a      	ldr	r2, [pc, #360]	@ (8003af8 <HAL_DMA_Init+0x1d8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d022      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a59      	ldr	r2, [pc, #356]	@ (8003afc <HAL_DMA_Init+0x1dc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d01d      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a57      	ldr	r2, [pc, #348]	@ (8003b00 <HAL_DMA_Init+0x1e0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d018      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a56      	ldr	r2, [pc, #344]	@ (8003b04 <HAL_DMA_Init+0x1e4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d013      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a54      	ldr	r2, [pc, #336]	@ (8003b08 <HAL_DMA_Init+0x1e8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00e      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a53      	ldr	r2, [pc, #332]	@ (8003b0c <HAL_DMA_Init+0x1ec>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d009      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a51      	ldr	r2, [pc, #324]	@ (8003b10 <HAL_DMA_Init+0x1f0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_DMA_Init+0xb8>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a50      	ldr	r2, [pc, #320]	@ (8003b14 <HAL_DMA_Init+0x1f4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d101      	bne.n	80039dc <HAL_DMA_Init+0xbc>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <HAL_DMA_Init+0xbe>
 80039dc:	2300      	movs	r3, #0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 813b 	beq.w	8003c5a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a37      	ldr	r2, [pc, #220]	@ (8003ad8 <HAL_DMA_Init+0x1b8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d04a      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a36      	ldr	r2, [pc, #216]	@ (8003adc <HAL_DMA_Init+0x1bc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d045      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a34      	ldr	r2, [pc, #208]	@ (8003ae0 <HAL_DMA_Init+0x1c0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d040      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a33      	ldr	r2, [pc, #204]	@ (8003ae4 <HAL_DMA_Init+0x1c4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d03b      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a31      	ldr	r2, [pc, #196]	@ (8003ae8 <HAL_DMA_Init+0x1c8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d036      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a30      	ldr	r2, [pc, #192]	@ (8003aec <HAL_DMA_Init+0x1cc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d031      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a2e      	ldr	r2, [pc, #184]	@ (8003af0 <HAL_DMA_Init+0x1d0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02c      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8003af4 <HAL_DMA_Init+0x1d4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d027      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2b      	ldr	r2, [pc, #172]	@ (8003af8 <HAL_DMA_Init+0x1d8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d022      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2a      	ldr	r2, [pc, #168]	@ (8003afc <HAL_DMA_Init+0x1dc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d01d      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a28      	ldr	r2, [pc, #160]	@ (8003b00 <HAL_DMA_Init+0x1e0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d018      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a27      	ldr	r2, [pc, #156]	@ (8003b04 <HAL_DMA_Init+0x1e4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a25      	ldr	r2, [pc, #148]	@ (8003b08 <HAL_DMA_Init+0x1e8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a24      	ldr	r2, [pc, #144]	@ (8003b0c <HAL_DMA_Init+0x1ec>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d009      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a22      	ldr	r2, [pc, #136]	@ (8003b10 <HAL_DMA_Init+0x1f0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <HAL_DMA_Init+0x174>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a21      	ldr	r2, [pc, #132]	@ (8003b14 <HAL_DMA_Init+0x1f4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d108      	bne.n	8003aa6 <HAL_DMA_Init+0x186>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	e007      	b.n	8003ab6 <HAL_DMA_Init+0x196>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ab6:	e02f      	b.n	8003b18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ab8:	f7fe fb20 	bl	80020fc <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	d928      	bls.n	8003b18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2203      	movs	r2, #3
 8003ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e246      	b.n	8003f66 <HAL_DMA_Init+0x646>
 8003ad8:	40020010 	.word	0x40020010
 8003adc:	40020028 	.word	0x40020028
 8003ae0:	40020040 	.word	0x40020040
 8003ae4:	40020058 	.word	0x40020058
 8003ae8:	40020070 	.word	0x40020070
 8003aec:	40020088 	.word	0x40020088
 8003af0:	400200a0 	.word	0x400200a0
 8003af4:	400200b8 	.word	0x400200b8
 8003af8:	40020410 	.word	0x40020410
 8003afc:	40020428 	.word	0x40020428
 8003b00:	40020440 	.word	0x40020440
 8003b04:	40020458 	.word	0x40020458
 8003b08:	40020470 	.word	0x40020470
 8003b0c:	40020488 	.word	0x40020488
 8003b10:	400204a0 	.word	0x400204a0
 8003b14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1c8      	bne.n	8003ab8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4b83      	ldr	r3, [pc, #524]	@ (8003d40 <HAL_DMA_Init+0x420>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003b3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d107      	bne.n	8003b7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b74:	4313      	orrs	r3, r2
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003b7c:	4b71      	ldr	r3, [pc, #452]	@ (8003d44 <HAL_DMA_Init+0x424>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b71      	ldr	r3, [pc, #452]	@ (8003d48 <HAL_DMA_Init+0x428>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b88:	d328      	bcc.n	8003bdc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b28      	cmp	r3, #40	@ 0x28
 8003b90:	d903      	bls.n	8003b9a <HAL_DMA_Init+0x27a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b98:	d917      	bls.n	8003bca <HAL_DMA_Init+0x2aa>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ba0:	d903      	bls.n	8003baa <HAL_DMA_Init+0x28a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b42      	cmp	r3, #66	@ 0x42
 8003ba8:	d90f      	bls.n	8003bca <HAL_DMA_Init+0x2aa>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b46      	cmp	r3, #70	@ 0x46
 8003bb0:	d903      	bls.n	8003bba <HAL_DMA_Init+0x29a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b48      	cmp	r3, #72	@ 0x48
 8003bb8:	d907      	bls.n	8003bca <HAL_DMA_Init+0x2aa>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b4e      	cmp	r3, #78	@ 0x4e
 8003bc0:	d905      	bls.n	8003bce <HAL_DMA_Init+0x2ae>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b52      	cmp	r3, #82	@ 0x52
 8003bc8:	d801      	bhi.n	8003bce <HAL_DMA_Init+0x2ae>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_DMA_Init+0x2b0>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bda:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f023 0307 	bic.w	r3, r3, #7
 8003bf2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d117      	bne.n	8003c36 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00e      	beq.n	8003c36 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f002 fb33 	bl	8006284 <DMA_CheckFifoParam>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2240      	movs	r2, #64	@ 0x40
 8003c28:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e197      	b.n	8003f66 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f002 fa6e 	bl	8006120 <DMA_CalcBaseAndBitshift>
 8003c44:	4603      	mov	r3, r0
 8003c46:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	223f      	movs	r2, #63	@ 0x3f
 8003c52:	409a      	lsls	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	e0cd      	b.n	8003df6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d4c <HAL_DMA_Init+0x42c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d022      	beq.n	8003caa <HAL_DMA_Init+0x38a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a39      	ldr	r2, [pc, #228]	@ (8003d50 <HAL_DMA_Init+0x430>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01d      	beq.n	8003caa <HAL_DMA_Init+0x38a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a38      	ldr	r2, [pc, #224]	@ (8003d54 <HAL_DMA_Init+0x434>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d018      	beq.n	8003caa <HAL_DMA_Init+0x38a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a36      	ldr	r2, [pc, #216]	@ (8003d58 <HAL_DMA_Init+0x438>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_DMA_Init+0x38a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a35      	ldr	r2, [pc, #212]	@ (8003d5c <HAL_DMA_Init+0x43c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00e      	beq.n	8003caa <HAL_DMA_Init+0x38a>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a33      	ldr	r2, [pc, #204]	@ (8003d60 <HAL_DMA_Init+0x440>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d009      	beq.n	8003caa <HAL_DMA_Init+0x38a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a32      	ldr	r2, [pc, #200]	@ (8003d64 <HAL_DMA_Init+0x444>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_DMA_Init+0x38a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a30      	ldr	r2, [pc, #192]	@ (8003d68 <HAL_DMA_Init+0x448>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_DMA_Init+0x38e>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <HAL_DMA_Init+0x390>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8097 	beq.w	8003de4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a24      	ldr	r2, [pc, #144]	@ (8003d4c <HAL_DMA_Init+0x42c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d021      	beq.n	8003d04 <HAL_DMA_Init+0x3e4>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a22      	ldr	r2, [pc, #136]	@ (8003d50 <HAL_DMA_Init+0x430>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01c      	beq.n	8003d04 <HAL_DMA_Init+0x3e4>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a21      	ldr	r2, [pc, #132]	@ (8003d54 <HAL_DMA_Init+0x434>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d017      	beq.n	8003d04 <HAL_DMA_Init+0x3e4>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d58 <HAL_DMA_Init+0x438>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d012      	beq.n	8003d04 <HAL_DMA_Init+0x3e4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d5c <HAL_DMA_Init+0x43c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00d      	beq.n	8003d04 <HAL_DMA_Init+0x3e4>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1c      	ldr	r2, [pc, #112]	@ (8003d60 <HAL_DMA_Init+0x440>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d008      	beq.n	8003d04 <HAL_DMA_Init+0x3e4>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d64 <HAL_DMA_Init+0x444>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <HAL_DMA_Init+0x3e4>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a19      	ldr	r2, [pc, #100]	@ (8003d68 <HAL_DMA_Init+0x448>)
 8003d02:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4b13      	ldr	r3, [pc, #76]	@ (8003d6c <HAL_DMA_Init+0x44c>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b40      	cmp	r3, #64	@ 0x40
 8003d2a:	d021      	beq.n	8003d70 <HAL_DMA_Init+0x450>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b80      	cmp	r3, #128	@ 0x80
 8003d32:	d102      	bne.n	8003d3a <HAL_DMA_Init+0x41a>
 8003d34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d38:	e01b      	b.n	8003d72 <HAL_DMA_Init+0x452>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e019      	b.n	8003d72 <HAL_DMA_Init+0x452>
 8003d3e:	bf00      	nop
 8003d40:	fe10803f 	.word	0xfe10803f
 8003d44:	5c001000 	.word	0x5c001000
 8003d48:	ffff0000 	.word	0xffff0000
 8003d4c:	58025408 	.word	0x58025408
 8003d50:	5802541c 	.word	0x5802541c
 8003d54:	58025430 	.word	0x58025430
 8003d58:	58025444 	.word	0x58025444
 8003d5c:	58025458 	.word	0x58025458
 8003d60:	5802546c 	.word	0x5802546c
 8003d64:	58025480 	.word	0x58025480
 8003d68:	58025494 	.word	0x58025494
 8003d6c:	fffe000f 	.word	0xfffe000f
 8003d70:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68d2      	ldr	r2, [r2, #12]
 8003d76:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003da0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b6e      	ldr	r3, [pc, #440]	@ (8003f70 <HAL_DMA_Init+0x650>)
 8003db8:	4413      	add	r3, r2
 8003dba:	4a6e      	ldr	r2, [pc, #440]	@ (8003f74 <HAL_DMA_Init+0x654>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	009a      	lsls	r2, r3, #2
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f002 f9a9 	bl	8006120 <DMA_CalcBaseAndBitshift>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2201      	movs	r2, #1
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	e008      	b.n	8003df6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2240      	movs	r2, #64	@ 0x40
 8003de8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2203      	movs	r2, #3
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e0b7      	b.n	8003f66 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a5f      	ldr	r2, [pc, #380]	@ (8003f78 <HAL_DMA_Init+0x658>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d072      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a5d      	ldr	r2, [pc, #372]	@ (8003f7c <HAL_DMA_Init+0x65c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d06d      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a5c      	ldr	r2, [pc, #368]	@ (8003f80 <HAL_DMA_Init+0x660>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d068      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a5a      	ldr	r2, [pc, #360]	@ (8003f84 <HAL_DMA_Init+0x664>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d063      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a59      	ldr	r2, [pc, #356]	@ (8003f88 <HAL_DMA_Init+0x668>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d05e      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a57      	ldr	r2, [pc, #348]	@ (8003f8c <HAL_DMA_Init+0x66c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d059      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a56      	ldr	r2, [pc, #344]	@ (8003f90 <HAL_DMA_Init+0x670>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d054      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a54      	ldr	r2, [pc, #336]	@ (8003f94 <HAL_DMA_Init+0x674>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d04f      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a53      	ldr	r2, [pc, #332]	@ (8003f98 <HAL_DMA_Init+0x678>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d04a      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a51      	ldr	r2, [pc, #324]	@ (8003f9c <HAL_DMA_Init+0x67c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d045      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a50      	ldr	r2, [pc, #320]	@ (8003fa0 <HAL_DMA_Init+0x680>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d040      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a4e      	ldr	r2, [pc, #312]	@ (8003fa4 <HAL_DMA_Init+0x684>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d03b      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a4d      	ldr	r2, [pc, #308]	@ (8003fa8 <HAL_DMA_Init+0x688>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d036      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8003fac <HAL_DMA_Init+0x68c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d031      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a4a      	ldr	r2, [pc, #296]	@ (8003fb0 <HAL_DMA_Init+0x690>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d02c      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a48      	ldr	r2, [pc, #288]	@ (8003fb4 <HAL_DMA_Init+0x694>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d027      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a47      	ldr	r2, [pc, #284]	@ (8003fb8 <HAL_DMA_Init+0x698>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d022      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a45      	ldr	r2, [pc, #276]	@ (8003fbc <HAL_DMA_Init+0x69c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01d      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a44      	ldr	r2, [pc, #272]	@ (8003fc0 <HAL_DMA_Init+0x6a0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d018      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a42      	ldr	r2, [pc, #264]	@ (8003fc4 <HAL_DMA_Init+0x6a4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a41      	ldr	r2, [pc, #260]	@ (8003fc8 <HAL_DMA_Init+0x6a8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8003fcc <HAL_DMA_Init+0x6ac>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a3e      	ldr	r2, [pc, #248]	@ (8003fd0 <HAL_DMA_Init+0x6b0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_DMA_Init+0x5c6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd4 <HAL_DMA_Init+0x6b4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d101      	bne.n	8003eea <HAL_DMA_Init+0x5ca>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_DMA_Init+0x5cc>
 8003eea:	2300      	movs	r3, #0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d032      	beq.n	8003f56 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f002 fa43 	bl	800637c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b80      	cmp	r3, #128	@ 0x80
 8003efc:	d102      	bne.n	8003f04 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003f18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d010      	beq.n	8003f44 <HAL_DMA_Init+0x624>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d80c      	bhi.n	8003f44 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f002 fac0 	bl	80064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	e008      	b.n	8003f56 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	a7fdabf8 	.word	0xa7fdabf8
 8003f74:	cccccccd 	.word	0xcccccccd
 8003f78:	40020010 	.word	0x40020010
 8003f7c:	40020028 	.word	0x40020028
 8003f80:	40020040 	.word	0x40020040
 8003f84:	40020058 	.word	0x40020058
 8003f88:	40020070 	.word	0x40020070
 8003f8c:	40020088 	.word	0x40020088
 8003f90:	400200a0 	.word	0x400200a0
 8003f94:	400200b8 	.word	0x400200b8
 8003f98:	40020410 	.word	0x40020410
 8003f9c:	40020428 	.word	0x40020428
 8003fa0:	40020440 	.word	0x40020440
 8003fa4:	40020458 	.word	0x40020458
 8003fa8:	40020470 	.word	0x40020470
 8003fac:	40020488 	.word	0x40020488
 8003fb0:	400204a0 	.word	0x400204a0
 8003fb4:	400204b8 	.word	0x400204b8
 8003fb8:	58025408 	.word	0x58025408
 8003fbc:	5802541c 	.word	0x5802541c
 8003fc0:	58025430 	.word	0x58025430
 8003fc4:	58025444 	.word	0x58025444
 8003fc8:	58025458 	.word	0x58025458
 8003fcc:	5802546c 	.word	0x5802546c
 8003fd0:	58025480 	.word	0x58025480
 8003fd4:	58025494 	.word	0x58025494

08003fd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e226      	b.n	8004442 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_DMA_Start_IT+0x2a>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e21f      	b.n	8004442 <HAL_DMA_Start_IT+0x46a>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b01      	cmp	r3, #1
 8004014:	f040 820a 	bne.w	800442c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a68      	ldr	r2, [pc, #416]	@ (80041cc <HAL_DMA_Start_IT+0x1f4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d04a      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a66      	ldr	r2, [pc, #408]	@ (80041d0 <HAL_DMA_Start_IT+0x1f8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d045      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a65      	ldr	r2, [pc, #404]	@ (80041d4 <HAL_DMA_Start_IT+0x1fc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d040      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a63      	ldr	r2, [pc, #396]	@ (80041d8 <HAL_DMA_Start_IT+0x200>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d03b      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a62      	ldr	r2, [pc, #392]	@ (80041dc <HAL_DMA_Start_IT+0x204>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d036      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a60      	ldr	r2, [pc, #384]	@ (80041e0 <HAL_DMA_Start_IT+0x208>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d031      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a5f      	ldr	r2, [pc, #380]	@ (80041e4 <HAL_DMA_Start_IT+0x20c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d02c      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a5d      	ldr	r2, [pc, #372]	@ (80041e8 <HAL_DMA_Start_IT+0x210>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d027      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a5c      	ldr	r2, [pc, #368]	@ (80041ec <HAL_DMA_Start_IT+0x214>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d022      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a5a      	ldr	r2, [pc, #360]	@ (80041f0 <HAL_DMA_Start_IT+0x218>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01d      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a59      	ldr	r2, [pc, #356]	@ (80041f4 <HAL_DMA_Start_IT+0x21c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d018      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a57      	ldr	r2, [pc, #348]	@ (80041f8 <HAL_DMA_Start_IT+0x220>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d013      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a56      	ldr	r2, [pc, #344]	@ (80041fc <HAL_DMA_Start_IT+0x224>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00e      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a54      	ldr	r2, [pc, #336]	@ (8004200 <HAL_DMA_Start_IT+0x228>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d009      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a53      	ldr	r2, [pc, #332]	@ (8004204 <HAL_DMA_Start_IT+0x22c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_DMA_Start_IT+0xee>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a51      	ldr	r2, [pc, #324]	@ (8004208 <HAL_DMA_Start_IT+0x230>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d108      	bne.n	80040d8 <HAL_DMA_Start_IT+0x100>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e007      	b.n	80040e8 <HAL_DMA_Start_IT+0x110>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f001 fe6a 	bl	8005dc8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a34      	ldr	r2, [pc, #208]	@ (80041cc <HAL_DMA_Start_IT+0x1f4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d04a      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a33      	ldr	r2, [pc, #204]	@ (80041d0 <HAL_DMA_Start_IT+0x1f8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d045      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a31      	ldr	r2, [pc, #196]	@ (80041d4 <HAL_DMA_Start_IT+0x1fc>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d040      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a30      	ldr	r2, [pc, #192]	@ (80041d8 <HAL_DMA_Start_IT+0x200>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d03b      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2e      	ldr	r2, [pc, #184]	@ (80041dc <HAL_DMA_Start_IT+0x204>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d036      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2d      	ldr	r2, [pc, #180]	@ (80041e0 <HAL_DMA_Start_IT+0x208>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d031      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2b      	ldr	r2, [pc, #172]	@ (80041e4 <HAL_DMA_Start_IT+0x20c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d02c      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2a      	ldr	r2, [pc, #168]	@ (80041e8 <HAL_DMA_Start_IT+0x210>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d027      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a28      	ldr	r2, [pc, #160]	@ (80041ec <HAL_DMA_Start_IT+0x214>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d022      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a27      	ldr	r2, [pc, #156]	@ (80041f0 <HAL_DMA_Start_IT+0x218>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d01d      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a25      	ldr	r2, [pc, #148]	@ (80041f4 <HAL_DMA_Start_IT+0x21c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d018      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a24      	ldr	r2, [pc, #144]	@ (80041f8 <HAL_DMA_Start_IT+0x220>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d013      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a22      	ldr	r2, [pc, #136]	@ (80041fc <HAL_DMA_Start_IT+0x224>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00e      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a21      	ldr	r2, [pc, #132]	@ (8004200 <HAL_DMA_Start_IT+0x228>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d009      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1f      	ldr	r2, [pc, #124]	@ (8004204 <HAL_DMA_Start_IT+0x22c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_DMA_Start_IT+0x1bc>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1e      	ldr	r2, [pc, #120]	@ (8004208 <HAL_DMA_Start_IT+0x230>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d101      	bne.n	8004198 <HAL_DMA_Start_IT+0x1c0>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_DMA_Start_IT+0x1c2>
 8004198:	2300      	movs	r3, #0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d036      	beq.n	800420c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f023 021e 	bic.w	r2, r3, #30
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0216 	orr.w	r2, r2, #22
 80041b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d03e      	beq.n	8004238 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0208 	orr.w	r2, r2, #8
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e035      	b.n	8004238 <HAL_DMA_Start_IT+0x260>
 80041cc:	40020010 	.word	0x40020010
 80041d0:	40020028 	.word	0x40020028
 80041d4:	40020040 	.word	0x40020040
 80041d8:	40020058 	.word	0x40020058
 80041dc:	40020070 	.word	0x40020070
 80041e0:	40020088 	.word	0x40020088
 80041e4:	400200a0 	.word	0x400200a0
 80041e8:	400200b8 	.word	0x400200b8
 80041ec:	40020410 	.word	0x40020410
 80041f0:	40020428 	.word	0x40020428
 80041f4:	40020440 	.word	0x40020440
 80041f8:	40020458 	.word	0x40020458
 80041fc:	40020470 	.word	0x40020470
 8004200:	40020488 	.word	0x40020488
 8004204:	400204a0 	.word	0x400204a0
 8004208:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 020e 	bic.w	r2, r3, #14
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 020a 	orr.w	r2, r2, #10
 800421e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0204 	orr.w	r2, r2, #4
 8004236:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a83      	ldr	r2, [pc, #524]	@ (800444c <HAL_DMA_Start_IT+0x474>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d072      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a82      	ldr	r2, [pc, #520]	@ (8004450 <HAL_DMA_Start_IT+0x478>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d06d      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a80      	ldr	r2, [pc, #512]	@ (8004454 <HAL_DMA_Start_IT+0x47c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d068      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a7f      	ldr	r2, [pc, #508]	@ (8004458 <HAL_DMA_Start_IT+0x480>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d063      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a7d      	ldr	r2, [pc, #500]	@ (800445c <HAL_DMA_Start_IT+0x484>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d05e      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a7c      	ldr	r2, [pc, #496]	@ (8004460 <HAL_DMA_Start_IT+0x488>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d059      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a7a      	ldr	r2, [pc, #488]	@ (8004464 <HAL_DMA_Start_IT+0x48c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d054      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a79      	ldr	r2, [pc, #484]	@ (8004468 <HAL_DMA_Start_IT+0x490>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d04f      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a77      	ldr	r2, [pc, #476]	@ (800446c <HAL_DMA_Start_IT+0x494>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d04a      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a76      	ldr	r2, [pc, #472]	@ (8004470 <HAL_DMA_Start_IT+0x498>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d045      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a74      	ldr	r2, [pc, #464]	@ (8004474 <HAL_DMA_Start_IT+0x49c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d040      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a73      	ldr	r2, [pc, #460]	@ (8004478 <HAL_DMA_Start_IT+0x4a0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d03b      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a71      	ldr	r2, [pc, #452]	@ (800447c <HAL_DMA_Start_IT+0x4a4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d036      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a70      	ldr	r2, [pc, #448]	@ (8004480 <HAL_DMA_Start_IT+0x4a8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d031      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004484 <HAL_DMA_Start_IT+0x4ac>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d02c      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004488 <HAL_DMA_Start_IT+0x4b0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d027      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a6b      	ldr	r2, [pc, #428]	@ (800448c <HAL_DMA_Start_IT+0x4b4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d022      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004490 <HAL_DMA_Start_IT+0x4b8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d01d      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a68      	ldr	r2, [pc, #416]	@ (8004494 <HAL_DMA_Start_IT+0x4bc>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d018      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a67      	ldr	r2, [pc, #412]	@ (8004498 <HAL_DMA_Start_IT+0x4c0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d013      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a65      	ldr	r2, [pc, #404]	@ (800449c <HAL_DMA_Start_IT+0x4c4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00e      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a64      	ldr	r2, [pc, #400]	@ (80044a0 <HAL_DMA_Start_IT+0x4c8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a62      	ldr	r2, [pc, #392]	@ (80044a4 <HAL_DMA_Start_IT+0x4cc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_DMA_Start_IT+0x350>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a61      	ldr	r2, [pc, #388]	@ (80044a8 <HAL_DMA_Start_IT+0x4d0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d101      	bne.n	800432c <HAL_DMA_Start_IT+0x354>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_DMA_Start_IT+0x356>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01a      	beq.n	8004368 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800434e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d007      	beq.n	8004368 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004362:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004366:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a37      	ldr	r2, [pc, #220]	@ (800444c <HAL_DMA_Start_IT+0x474>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d04a      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a36      	ldr	r2, [pc, #216]	@ (8004450 <HAL_DMA_Start_IT+0x478>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d045      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a34      	ldr	r2, [pc, #208]	@ (8004454 <HAL_DMA_Start_IT+0x47c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d040      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a33      	ldr	r2, [pc, #204]	@ (8004458 <HAL_DMA_Start_IT+0x480>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d03b      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a31      	ldr	r2, [pc, #196]	@ (800445c <HAL_DMA_Start_IT+0x484>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d036      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a30      	ldr	r2, [pc, #192]	@ (8004460 <HAL_DMA_Start_IT+0x488>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d031      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004464 <HAL_DMA_Start_IT+0x48c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d02c      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004468 <HAL_DMA_Start_IT+0x490>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d027      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a2b      	ldr	r2, [pc, #172]	@ (800446c <HAL_DMA_Start_IT+0x494>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d022      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004470 <HAL_DMA_Start_IT+0x498>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d01d      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a28      	ldr	r2, [pc, #160]	@ (8004474 <HAL_DMA_Start_IT+0x49c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d018      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a27      	ldr	r2, [pc, #156]	@ (8004478 <HAL_DMA_Start_IT+0x4a0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d013      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a25      	ldr	r2, [pc, #148]	@ (800447c <HAL_DMA_Start_IT+0x4a4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00e      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a24      	ldr	r2, [pc, #144]	@ (8004480 <HAL_DMA_Start_IT+0x4a8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d009      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a22      	ldr	r2, [pc, #136]	@ (8004484 <HAL_DMA_Start_IT+0x4ac>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_DMA_Start_IT+0x430>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a21      	ldr	r2, [pc, #132]	@ (8004488 <HAL_DMA_Start_IT+0x4b0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d108      	bne.n	800441a <HAL_DMA_Start_IT+0x442>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e012      	b.n	8004440 <HAL_DMA_Start_IT+0x468>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e009      	b.n	8004440 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004432:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004440:	7dfb      	ldrb	r3, [r7, #23]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40020010 	.word	0x40020010
 8004450:	40020028 	.word	0x40020028
 8004454:	40020040 	.word	0x40020040
 8004458:	40020058 	.word	0x40020058
 800445c:	40020070 	.word	0x40020070
 8004460:	40020088 	.word	0x40020088
 8004464:	400200a0 	.word	0x400200a0
 8004468:	400200b8 	.word	0x400200b8
 800446c:	40020410 	.word	0x40020410
 8004470:	40020428 	.word	0x40020428
 8004474:	40020440 	.word	0x40020440
 8004478:	40020458 	.word	0x40020458
 800447c:	40020470 	.word	0x40020470
 8004480:	40020488 	.word	0x40020488
 8004484:	400204a0 	.word	0x400204a0
 8004488:	400204b8 	.word	0x400204b8
 800448c:	58025408 	.word	0x58025408
 8004490:	5802541c 	.word	0x5802541c
 8004494:	58025430 	.word	0x58025430
 8004498:	58025444 	.word	0x58025444
 800449c:	58025458 	.word	0x58025458
 80044a0:	5802546c 	.word	0x5802546c
 80044a4:	58025480 	.word	0x58025480
 80044a8:	58025494 	.word	0x58025494

080044ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80044b4:	f7fd fe22 	bl	80020fc <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e2dc      	b.n	8004a7e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d008      	beq.n	80044e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2280      	movs	r2, #128	@ 0x80
 80044d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e2cd      	b.n	8004a7e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a76      	ldr	r2, [pc, #472]	@ (80046c0 <HAL_DMA_Abort+0x214>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d04a      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a74      	ldr	r2, [pc, #464]	@ (80046c4 <HAL_DMA_Abort+0x218>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d045      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a73      	ldr	r2, [pc, #460]	@ (80046c8 <HAL_DMA_Abort+0x21c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d040      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a71      	ldr	r2, [pc, #452]	@ (80046cc <HAL_DMA_Abort+0x220>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d03b      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a70      	ldr	r2, [pc, #448]	@ (80046d0 <HAL_DMA_Abort+0x224>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d036      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a6e      	ldr	r2, [pc, #440]	@ (80046d4 <HAL_DMA_Abort+0x228>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d031      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a6d      	ldr	r2, [pc, #436]	@ (80046d8 <HAL_DMA_Abort+0x22c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d02c      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a6b      	ldr	r2, [pc, #428]	@ (80046dc <HAL_DMA_Abort+0x230>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d027      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6a      	ldr	r2, [pc, #424]	@ (80046e0 <HAL_DMA_Abort+0x234>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d022      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a68      	ldr	r2, [pc, #416]	@ (80046e4 <HAL_DMA_Abort+0x238>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01d      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a67      	ldr	r2, [pc, #412]	@ (80046e8 <HAL_DMA_Abort+0x23c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d018      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a65      	ldr	r2, [pc, #404]	@ (80046ec <HAL_DMA_Abort+0x240>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a64      	ldr	r2, [pc, #400]	@ (80046f0 <HAL_DMA_Abort+0x244>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00e      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a62      	ldr	r2, [pc, #392]	@ (80046f4 <HAL_DMA_Abort+0x248>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d009      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a61      	ldr	r2, [pc, #388]	@ (80046f8 <HAL_DMA_Abort+0x24c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d004      	beq.n	8004582 <HAL_DMA_Abort+0xd6>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a5f      	ldr	r2, [pc, #380]	@ (80046fc <HAL_DMA_Abort+0x250>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d101      	bne.n	8004586 <HAL_DMA_Abort+0xda>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_DMA_Abort+0xdc>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 021e 	bic.w	r2, r2, #30
 800459a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e00a      	b.n	80045ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 020e 	bic.w	r2, r2, #14
 80045c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3c      	ldr	r2, [pc, #240]	@ (80046c0 <HAL_DMA_Abort+0x214>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d072      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a3a      	ldr	r2, [pc, #232]	@ (80046c4 <HAL_DMA_Abort+0x218>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d06d      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a39      	ldr	r2, [pc, #228]	@ (80046c8 <HAL_DMA_Abort+0x21c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d068      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a37      	ldr	r2, [pc, #220]	@ (80046cc <HAL_DMA_Abort+0x220>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d063      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a36      	ldr	r2, [pc, #216]	@ (80046d0 <HAL_DMA_Abort+0x224>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d05e      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a34      	ldr	r2, [pc, #208]	@ (80046d4 <HAL_DMA_Abort+0x228>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d059      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a33      	ldr	r2, [pc, #204]	@ (80046d8 <HAL_DMA_Abort+0x22c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d054      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a31      	ldr	r2, [pc, #196]	@ (80046dc <HAL_DMA_Abort+0x230>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d04f      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a30      	ldr	r2, [pc, #192]	@ (80046e0 <HAL_DMA_Abort+0x234>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d04a      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a2e      	ldr	r2, [pc, #184]	@ (80046e4 <HAL_DMA_Abort+0x238>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d045      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2d      	ldr	r2, [pc, #180]	@ (80046e8 <HAL_DMA_Abort+0x23c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d040      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2b      	ldr	r2, [pc, #172]	@ (80046ec <HAL_DMA_Abort+0x240>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d03b      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2a      	ldr	r2, [pc, #168]	@ (80046f0 <HAL_DMA_Abort+0x244>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d036      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a28      	ldr	r2, [pc, #160]	@ (80046f4 <HAL_DMA_Abort+0x248>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d031      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a27      	ldr	r2, [pc, #156]	@ (80046f8 <HAL_DMA_Abort+0x24c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d02c      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a25      	ldr	r2, [pc, #148]	@ (80046fc <HAL_DMA_Abort+0x250>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d027      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a24      	ldr	r2, [pc, #144]	@ (8004700 <HAL_DMA_Abort+0x254>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d022      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a22      	ldr	r2, [pc, #136]	@ (8004704 <HAL_DMA_Abort+0x258>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01d      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a21      	ldr	r2, [pc, #132]	@ (8004708 <HAL_DMA_Abort+0x25c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d018      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1f      	ldr	r2, [pc, #124]	@ (800470c <HAL_DMA_Abort+0x260>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1e      	ldr	r2, [pc, #120]	@ (8004710 <HAL_DMA_Abort+0x264>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00e      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004714 <HAL_DMA_Abort+0x268>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d009      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004718 <HAL_DMA_Abort+0x26c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d004      	beq.n	80046ba <HAL_DMA_Abort+0x20e>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a19      	ldr	r2, [pc, #100]	@ (800471c <HAL_DMA_Abort+0x270>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d132      	bne.n	8004720 <HAL_DMA_Abort+0x274>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e031      	b.n	8004722 <HAL_DMA_Abort+0x276>
 80046be:	bf00      	nop
 80046c0:	40020010 	.word	0x40020010
 80046c4:	40020028 	.word	0x40020028
 80046c8:	40020040 	.word	0x40020040
 80046cc:	40020058 	.word	0x40020058
 80046d0:	40020070 	.word	0x40020070
 80046d4:	40020088 	.word	0x40020088
 80046d8:	400200a0 	.word	0x400200a0
 80046dc:	400200b8 	.word	0x400200b8
 80046e0:	40020410 	.word	0x40020410
 80046e4:	40020428 	.word	0x40020428
 80046e8:	40020440 	.word	0x40020440
 80046ec:	40020458 	.word	0x40020458
 80046f0:	40020470 	.word	0x40020470
 80046f4:	40020488 	.word	0x40020488
 80046f8:	400204a0 	.word	0x400204a0
 80046fc:	400204b8 	.word	0x400204b8
 8004700:	58025408 	.word	0x58025408
 8004704:	5802541c 	.word	0x5802541c
 8004708:	58025430 	.word	0x58025430
 800470c:	58025444 	.word	0x58025444
 8004710:	58025458 	.word	0x58025458
 8004714:	5802546c 	.word	0x5802546c
 8004718:	58025480 	.word	0x58025480
 800471c:	58025494 	.word	0x58025494
 8004720:	2300      	movs	r3, #0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004734:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6d      	ldr	r2, [pc, #436]	@ (80048f0 <HAL_DMA_Abort+0x444>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d04a      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a6b      	ldr	r2, [pc, #428]	@ (80048f4 <HAL_DMA_Abort+0x448>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d045      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6a      	ldr	r2, [pc, #424]	@ (80048f8 <HAL_DMA_Abort+0x44c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d040      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a68      	ldr	r2, [pc, #416]	@ (80048fc <HAL_DMA_Abort+0x450>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d03b      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a67      	ldr	r2, [pc, #412]	@ (8004900 <HAL_DMA_Abort+0x454>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d036      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a65      	ldr	r2, [pc, #404]	@ (8004904 <HAL_DMA_Abort+0x458>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d031      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a64      	ldr	r2, [pc, #400]	@ (8004908 <HAL_DMA_Abort+0x45c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d02c      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a62      	ldr	r2, [pc, #392]	@ (800490c <HAL_DMA_Abort+0x460>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d027      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a61      	ldr	r2, [pc, #388]	@ (8004910 <HAL_DMA_Abort+0x464>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d022      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a5f      	ldr	r2, [pc, #380]	@ (8004914 <HAL_DMA_Abort+0x468>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d01d      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a5e      	ldr	r2, [pc, #376]	@ (8004918 <HAL_DMA_Abort+0x46c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d018      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a5c      	ldr	r2, [pc, #368]	@ (800491c <HAL_DMA_Abort+0x470>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004920 <HAL_DMA_Abort+0x474>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a59      	ldr	r2, [pc, #356]	@ (8004924 <HAL_DMA_Abort+0x478>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a58      	ldr	r2, [pc, #352]	@ (8004928 <HAL_DMA_Abort+0x47c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_DMA_Abort+0x32a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a56      	ldr	r2, [pc, #344]	@ (800492c <HAL_DMA_Abort+0x480>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <HAL_DMA_Abort+0x33c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0201 	bic.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e007      	b.n	80047f8 <HAL_DMA_Abort+0x34c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80047f8:	e013      	b.n	8004822 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047fa:	f7fd fc7f 	bl	80020fc <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b05      	cmp	r3, #5
 8004806:	d90c      	bls.n	8004822 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2203      	movs	r2, #3
 8004812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e12d      	b.n	8004a7e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e5      	bne.n	80047fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a2f      	ldr	r2, [pc, #188]	@ (80048f0 <HAL_DMA_Abort+0x444>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d04a      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2d      	ldr	r2, [pc, #180]	@ (80048f4 <HAL_DMA_Abort+0x448>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d045      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2c      	ldr	r2, [pc, #176]	@ (80048f8 <HAL_DMA_Abort+0x44c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d040      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2a      	ldr	r2, [pc, #168]	@ (80048fc <HAL_DMA_Abort+0x450>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d03b      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a29      	ldr	r2, [pc, #164]	@ (8004900 <HAL_DMA_Abort+0x454>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d036      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a27      	ldr	r2, [pc, #156]	@ (8004904 <HAL_DMA_Abort+0x458>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d031      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a26      	ldr	r2, [pc, #152]	@ (8004908 <HAL_DMA_Abort+0x45c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d02c      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a24      	ldr	r2, [pc, #144]	@ (800490c <HAL_DMA_Abort+0x460>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d027      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a23      	ldr	r2, [pc, #140]	@ (8004910 <HAL_DMA_Abort+0x464>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a21      	ldr	r2, [pc, #132]	@ (8004914 <HAL_DMA_Abort+0x468>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a20      	ldr	r2, [pc, #128]	@ (8004918 <HAL_DMA_Abort+0x46c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1e      	ldr	r2, [pc, #120]	@ (800491c <HAL_DMA_Abort+0x470>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004920 <HAL_DMA_Abort+0x474>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004924 <HAL_DMA_Abort+0x478>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1a      	ldr	r2, [pc, #104]	@ (8004928 <HAL_DMA_Abort+0x47c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_DMA_Abort+0x422>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	@ (800492c <HAL_DMA_Abort+0x480>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_DMA_Abort+0x426>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_DMA_Abort+0x428>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d02b      	beq.n	8004930 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	223f      	movs	r2, #63	@ 0x3f
 80048e8:	409a      	lsls	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	609a      	str	r2, [r3, #8]
 80048ee:	e02a      	b.n	8004946 <HAL_DMA_Abort+0x49a>
 80048f0:	40020010 	.word	0x40020010
 80048f4:	40020028 	.word	0x40020028
 80048f8:	40020040 	.word	0x40020040
 80048fc:	40020058 	.word	0x40020058
 8004900:	40020070 	.word	0x40020070
 8004904:	40020088 	.word	0x40020088
 8004908:	400200a0 	.word	0x400200a0
 800490c:	400200b8 	.word	0x400200b8
 8004910:	40020410 	.word	0x40020410
 8004914:	40020428 	.word	0x40020428
 8004918:	40020440 	.word	0x40020440
 800491c:	40020458 	.word	0x40020458
 8004920:	40020470 	.word	0x40020470
 8004924:	40020488 	.word	0x40020488
 8004928:	400204a0 	.word	0x400204a0
 800492c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004934:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2201      	movs	r2, #1
 8004940:	409a      	lsls	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a4f      	ldr	r2, [pc, #316]	@ (8004a88 <HAL_DMA_Abort+0x5dc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d072      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a4d      	ldr	r2, [pc, #308]	@ (8004a8c <HAL_DMA_Abort+0x5e0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d06d      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a4c      	ldr	r2, [pc, #304]	@ (8004a90 <HAL_DMA_Abort+0x5e4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d068      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a4a      	ldr	r2, [pc, #296]	@ (8004a94 <HAL_DMA_Abort+0x5e8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d063      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a49      	ldr	r2, [pc, #292]	@ (8004a98 <HAL_DMA_Abort+0x5ec>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d05e      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a47      	ldr	r2, [pc, #284]	@ (8004a9c <HAL_DMA_Abort+0x5f0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d059      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a46      	ldr	r2, [pc, #280]	@ (8004aa0 <HAL_DMA_Abort+0x5f4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d054      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a44      	ldr	r2, [pc, #272]	@ (8004aa4 <HAL_DMA_Abort+0x5f8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d04f      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a43      	ldr	r2, [pc, #268]	@ (8004aa8 <HAL_DMA_Abort+0x5fc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d04a      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a41      	ldr	r2, [pc, #260]	@ (8004aac <HAL_DMA_Abort+0x600>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d045      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a40      	ldr	r2, [pc, #256]	@ (8004ab0 <HAL_DMA_Abort+0x604>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d040      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ab4 <HAL_DMA_Abort+0x608>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d03b      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a3d      	ldr	r2, [pc, #244]	@ (8004ab8 <HAL_DMA_Abort+0x60c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d036      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a3b      	ldr	r2, [pc, #236]	@ (8004abc <HAL_DMA_Abort+0x610>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d031      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a3a      	ldr	r2, [pc, #232]	@ (8004ac0 <HAL_DMA_Abort+0x614>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d02c      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a38      	ldr	r2, [pc, #224]	@ (8004ac4 <HAL_DMA_Abort+0x618>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d027      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a37      	ldr	r2, [pc, #220]	@ (8004ac8 <HAL_DMA_Abort+0x61c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a35      	ldr	r2, [pc, #212]	@ (8004acc <HAL_DMA_Abort+0x620>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01d      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a34      	ldr	r2, [pc, #208]	@ (8004ad0 <HAL_DMA_Abort+0x624>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a32      	ldr	r2, [pc, #200]	@ (8004ad4 <HAL_DMA_Abort+0x628>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a31      	ldr	r2, [pc, #196]	@ (8004ad8 <HAL_DMA_Abort+0x62c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a2f      	ldr	r2, [pc, #188]	@ (8004adc <HAL_DMA_Abort+0x630>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae0 <HAL_DMA_Abort+0x634>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_DMA_Abort+0x58a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2c      	ldr	r2, [pc, #176]	@ (8004ae4 <HAL_DMA_Abort+0x638>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_DMA_Abort+0x58e>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_DMA_Abort+0x590>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d015      	beq.n	8004a6c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a48:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00c      	beq.n	8004a6c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a60:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a6a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40020010 	.word	0x40020010
 8004a8c:	40020028 	.word	0x40020028
 8004a90:	40020040 	.word	0x40020040
 8004a94:	40020058 	.word	0x40020058
 8004a98:	40020070 	.word	0x40020070
 8004a9c:	40020088 	.word	0x40020088
 8004aa0:	400200a0 	.word	0x400200a0
 8004aa4:	400200b8 	.word	0x400200b8
 8004aa8:	40020410 	.word	0x40020410
 8004aac:	40020428 	.word	0x40020428
 8004ab0:	40020440 	.word	0x40020440
 8004ab4:	40020458 	.word	0x40020458
 8004ab8:	40020470 	.word	0x40020470
 8004abc:	40020488 	.word	0x40020488
 8004ac0:	400204a0 	.word	0x400204a0
 8004ac4:	400204b8 	.word	0x400204b8
 8004ac8:	58025408 	.word	0x58025408
 8004acc:	5802541c 	.word	0x5802541c
 8004ad0:	58025430 	.word	0x58025430
 8004ad4:	58025444 	.word	0x58025444
 8004ad8:	58025458 	.word	0x58025458
 8004adc:	5802546c 	.word	0x5802546c
 8004ae0:	58025480 	.word	0x58025480
 8004ae4:	58025494 	.word	0x58025494

08004ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e237      	b.n	8004f6a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d004      	beq.n	8004b10 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2280      	movs	r2, #128	@ 0x80
 8004b0a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e22c      	b.n	8004f6a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a5c      	ldr	r2, [pc, #368]	@ (8004c88 <HAL_DMA_Abort_IT+0x1a0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d04a      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a5b      	ldr	r2, [pc, #364]	@ (8004c8c <HAL_DMA_Abort_IT+0x1a4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d045      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a59      	ldr	r2, [pc, #356]	@ (8004c90 <HAL_DMA_Abort_IT+0x1a8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d040      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a58      	ldr	r2, [pc, #352]	@ (8004c94 <HAL_DMA_Abort_IT+0x1ac>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d03b      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a56      	ldr	r2, [pc, #344]	@ (8004c98 <HAL_DMA_Abort_IT+0x1b0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d036      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a55      	ldr	r2, [pc, #340]	@ (8004c9c <HAL_DMA_Abort_IT+0x1b4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d031      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a53      	ldr	r2, [pc, #332]	@ (8004ca0 <HAL_DMA_Abort_IT+0x1b8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d02c      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a52      	ldr	r2, [pc, #328]	@ (8004ca4 <HAL_DMA_Abort_IT+0x1bc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d027      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a50      	ldr	r2, [pc, #320]	@ (8004ca8 <HAL_DMA_Abort_IT+0x1c0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d022      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a4f      	ldr	r2, [pc, #316]	@ (8004cac <HAL_DMA_Abort_IT+0x1c4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d01d      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a4d      	ldr	r2, [pc, #308]	@ (8004cb0 <HAL_DMA_Abort_IT+0x1c8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d018      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a4c      	ldr	r2, [pc, #304]	@ (8004cb4 <HAL_DMA_Abort_IT+0x1cc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a4a      	ldr	r2, [pc, #296]	@ (8004cb8 <HAL_DMA_Abort_IT+0x1d0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00e      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a49      	ldr	r2, [pc, #292]	@ (8004cbc <HAL_DMA_Abort_IT+0x1d4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a47      	ldr	r2, [pc, #284]	@ (8004cc0 <HAL_DMA_Abort_IT+0x1d8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a46      	ldr	r2, [pc, #280]	@ (8004cc4 <HAL_DMA_Abort_IT+0x1dc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d101      	bne.n	8004bb4 <HAL_DMA_Abort_IT+0xcc>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e000      	b.n	8004bb6 <HAL_DMA_Abort_IT+0xce>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8086 	beq.w	8004cc8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a2f      	ldr	r2, [pc, #188]	@ (8004c88 <HAL_DMA_Abort_IT+0x1a0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d04a      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8004c8c <HAL_DMA_Abort_IT+0x1a4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d045      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8004c90 <HAL_DMA_Abort_IT+0x1a8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d040      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c94 <HAL_DMA_Abort_IT+0x1ac>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d03b      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a29      	ldr	r2, [pc, #164]	@ (8004c98 <HAL_DMA_Abort_IT+0x1b0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d036      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a28      	ldr	r2, [pc, #160]	@ (8004c9c <HAL_DMA_Abort_IT+0x1b4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d031      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a26      	ldr	r2, [pc, #152]	@ (8004ca0 <HAL_DMA_Abort_IT+0x1b8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d02c      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a25      	ldr	r2, [pc, #148]	@ (8004ca4 <HAL_DMA_Abort_IT+0x1bc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d027      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a23      	ldr	r2, [pc, #140]	@ (8004ca8 <HAL_DMA_Abort_IT+0x1c0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d022      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a22      	ldr	r2, [pc, #136]	@ (8004cac <HAL_DMA_Abort_IT+0x1c4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d01d      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a20      	ldr	r2, [pc, #128]	@ (8004cb0 <HAL_DMA_Abort_IT+0x1c8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d018      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb4 <HAL_DMA_Abort_IT+0x1cc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d013      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb8 <HAL_DMA_Abort_IT+0x1d0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00e      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cbc <HAL_DMA_Abort_IT+0x1d4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc0 <HAL_DMA_Abort_IT+0x1d8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x17c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a19      	ldr	r2, [pc, #100]	@ (8004cc4 <HAL_DMA_Abort_IT+0x1dc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d108      	bne.n	8004c76 <HAL_DMA_Abort_IT+0x18e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e178      	b.n	8004f68 <HAL_DMA_Abort_IT+0x480>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e16f      	b.n	8004f68 <HAL_DMA_Abort_IT+0x480>
 8004c88:	40020010 	.word	0x40020010
 8004c8c:	40020028 	.word	0x40020028
 8004c90:	40020040 	.word	0x40020040
 8004c94:	40020058 	.word	0x40020058
 8004c98:	40020070 	.word	0x40020070
 8004c9c:	40020088 	.word	0x40020088
 8004ca0:	400200a0 	.word	0x400200a0
 8004ca4:	400200b8 	.word	0x400200b8
 8004ca8:	40020410 	.word	0x40020410
 8004cac:	40020428 	.word	0x40020428
 8004cb0:	40020440 	.word	0x40020440
 8004cb4:	40020458 	.word	0x40020458
 8004cb8:	40020470 	.word	0x40020470
 8004cbc:	40020488 	.word	0x40020488
 8004cc0:	400204a0 	.word	0x400204a0
 8004cc4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 020e 	bic.w	r2, r2, #14
 8004cd6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a6c      	ldr	r2, [pc, #432]	@ (8004e90 <HAL_DMA_Abort_IT+0x3a8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d04a      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a6b      	ldr	r2, [pc, #428]	@ (8004e94 <HAL_DMA_Abort_IT+0x3ac>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d045      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a69      	ldr	r2, [pc, #420]	@ (8004e98 <HAL_DMA_Abort_IT+0x3b0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d040      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a68      	ldr	r2, [pc, #416]	@ (8004e9c <HAL_DMA_Abort_IT+0x3b4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d03b      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a66      	ldr	r2, [pc, #408]	@ (8004ea0 <HAL_DMA_Abort_IT+0x3b8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d036      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a65      	ldr	r2, [pc, #404]	@ (8004ea4 <HAL_DMA_Abort_IT+0x3bc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d031      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a63      	ldr	r2, [pc, #396]	@ (8004ea8 <HAL_DMA_Abort_IT+0x3c0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d02c      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a62      	ldr	r2, [pc, #392]	@ (8004eac <HAL_DMA_Abort_IT+0x3c4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d027      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a60      	ldr	r2, [pc, #384]	@ (8004eb0 <HAL_DMA_Abort_IT+0x3c8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d022      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a5f      	ldr	r2, [pc, #380]	@ (8004eb4 <HAL_DMA_Abort_IT+0x3cc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d01d      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a5d      	ldr	r2, [pc, #372]	@ (8004eb8 <HAL_DMA_Abort_IT+0x3d0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8004ebc <HAL_DMA_Abort_IT+0x3d4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a5a      	ldr	r2, [pc, #360]	@ (8004ec0 <HAL_DMA_Abort_IT+0x3d8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a59      	ldr	r2, [pc, #356]	@ (8004ec4 <HAL_DMA_Abort_IT+0x3dc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a57      	ldr	r2, [pc, #348]	@ (8004ec8 <HAL_DMA_Abort_IT+0x3e0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x290>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a56      	ldr	r2, [pc, #344]	@ (8004ecc <HAL_DMA_Abort_IT+0x3e4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d108      	bne.n	8004d8a <HAL_DMA_Abort_IT+0x2a2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e007      	b.n	8004d9a <HAL_DMA_Abort_IT+0x2b2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8004e90 <HAL_DMA_Abort_IT+0x3a8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d072      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a3a      	ldr	r2, [pc, #232]	@ (8004e94 <HAL_DMA_Abort_IT+0x3ac>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d06d      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a39      	ldr	r2, [pc, #228]	@ (8004e98 <HAL_DMA_Abort_IT+0x3b0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d068      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a37      	ldr	r2, [pc, #220]	@ (8004e9c <HAL_DMA_Abort_IT+0x3b4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d063      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a36      	ldr	r2, [pc, #216]	@ (8004ea0 <HAL_DMA_Abort_IT+0x3b8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d05e      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a34      	ldr	r2, [pc, #208]	@ (8004ea4 <HAL_DMA_Abort_IT+0x3bc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d059      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a33      	ldr	r2, [pc, #204]	@ (8004ea8 <HAL_DMA_Abort_IT+0x3c0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d054      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a31      	ldr	r2, [pc, #196]	@ (8004eac <HAL_DMA_Abort_IT+0x3c4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d04f      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a30      	ldr	r2, [pc, #192]	@ (8004eb0 <HAL_DMA_Abort_IT+0x3c8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d04a      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a2e      	ldr	r2, [pc, #184]	@ (8004eb4 <HAL_DMA_Abort_IT+0x3cc>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d045      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb8 <HAL_DMA_Abort_IT+0x3d0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d040      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ebc <HAL_DMA_Abort_IT+0x3d4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d03b      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec0 <HAL_DMA_Abort_IT+0x3d8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d036      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a28      	ldr	r2, [pc, #160]	@ (8004ec4 <HAL_DMA_Abort_IT+0x3dc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d031      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a27      	ldr	r2, [pc, #156]	@ (8004ec8 <HAL_DMA_Abort_IT+0x3e0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d02c      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a25      	ldr	r2, [pc, #148]	@ (8004ecc <HAL_DMA_Abort_IT+0x3e4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d027      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a24      	ldr	r2, [pc, #144]	@ (8004ed0 <HAL_DMA_Abort_IT+0x3e8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d022      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a22      	ldr	r2, [pc, #136]	@ (8004ed4 <HAL_DMA_Abort_IT+0x3ec>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01d      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a21      	ldr	r2, [pc, #132]	@ (8004ed8 <HAL_DMA_Abort_IT+0x3f0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d018      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004edc <HAL_DMA_Abort_IT+0x3f4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee0 <HAL_DMA_Abort_IT+0x3f8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00e      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee4 <HAL_DMA_Abort_IT+0x3fc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d009      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee8 <HAL_DMA_Abort_IT+0x400>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x3a2>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a19      	ldr	r2, [pc, #100]	@ (8004eec <HAL_DMA_Abort_IT+0x404>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d132      	bne.n	8004ef0 <HAL_DMA_Abort_IT+0x408>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e031      	b.n	8004ef2 <HAL_DMA_Abort_IT+0x40a>
 8004e8e:	bf00      	nop
 8004e90:	40020010 	.word	0x40020010
 8004e94:	40020028 	.word	0x40020028
 8004e98:	40020040 	.word	0x40020040
 8004e9c:	40020058 	.word	0x40020058
 8004ea0:	40020070 	.word	0x40020070
 8004ea4:	40020088 	.word	0x40020088
 8004ea8:	400200a0 	.word	0x400200a0
 8004eac:	400200b8 	.word	0x400200b8
 8004eb0:	40020410 	.word	0x40020410
 8004eb4:	40020428 	.word	0x40020428
 8004eb8:	40020440 	.word	0x40020440
 8004ebc:	40020458 	.word	0x40020458
 8004ec0:	40020470 	.word	0x40020470
 8004ec4:	40020488 	.word	0x40020488
 8004ec8:	400204a0 	.word	0x400204a0
 8004ecc:	400204b8 	.word	0x400204b8
 8004ed0:	58025408 	.word	0x58025408
 8004ed4:	5802541c 	.word	0x5802541c
 8004ed8:	58025430 	.word	0x58025430
 8004edc:	58025444 	.word	0x58025444
 8004ee0:	58025458 	.word	0x58025458
 8004ee4:	5802546c 	.word	0x5802546c
 8004ee8:	58025480 	.word	0x58025480
 8004eec:	58025494 	.word	0x58025494
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d028      	beq.n	8004f48 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f04:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f0a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	2201      	movs	r2, #1
 8004f16:	409a      	lsls	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004f24:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00c      	beq.n	8004f48 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f3c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f46:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop

08004f74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	@ 0x28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f80:	4b67      	ldr	r3, [pc, #412]	@ (8005120 <HAL_DMA_IRQHandler+0x1ac>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a67      	ldr	r2, [pc, #412]	@ (8005124 <HAL_DMA_IRQHandler+0x1b0>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	0a9b      	lsrs	r3, r3, #10
 8004f8c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f92:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f98:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a5f      	ldr	r2, [pc, #380]	@ (8005128 <HAL_DMA_IRQHandler+0x1b4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d04a      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800512c <HAL_DMA_IRQHandler+0x1b8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d045      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a5c      	ldr	r2, [pc, #368]	@ (8005130 <HAL_DMA_IRQHandler+0x1bc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d040      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8005134 <HAL_DMA_IRQHandler+0x1c0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d03b      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a59      	ldr	r2, [pc, #356]	@ (8005138 <HAL_DMA_IRQHandler+0x1c4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d036      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a57      	ldr	r2, [pc, #348]	@ (800513c <HAL_DMA_IRQHandler+0x1c8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d031      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a56      	ldr	r2, [pc, #344]	@ (8005140 <HAL_DMA_IRQHandler+0x1cc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d02c      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a54      	ldr	r2, [pc, #336]	@ (8005144 <HAL_DMA_IRQHandler+0x1d0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d027      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a53      	ldr	r2, [pc, #332]	@ (8005148 <HAL_DMA_IRQHandler+0x1d4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d022      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a51      	ldr	r2, [pc, #324]	@ (800514c <HAL_DMA_IRQHandler+0x1d8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d01d      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a50      	ldr	r2, [pc, #320]	@ (8005150 <HAL_DMA_IRQHandler+0x1dc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d018      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a4e      	ldr	r2, [pc, #312]	@ (8005154 <HAL_DMA_IRQHandler+0x1e0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a4d      	ldr	r2, [pc, #308]	@ (8005158 <HAL_DMA_IRQHandler+0x1e4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00e      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a4b      	ldr	r2, [pc, #300]	@ (800515c <HAL_DMA_IRQHandler+0x1e8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a4a      	ldr	r2, [pc, #296]	@ (8005160 <HAL_DMA_IRQHandler+0x1ec>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_DMA_IRQHandler+0xd2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a48      	ldr	r2, [pc, #288]	@ (8005164 <HAL_DMA_IRQHandler+0x1f0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d101      	bne.n	800504a <HAL_DMA_IRQHandler+0xd6>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <HAL_DMA_IRQHandler+0xd8>
 800504a:	2300      	movs	r3, #0
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 842b 	beq.w	80058a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	2208      	movs	r2, #8
 800505c:	409a      	lsls	r2, r3
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80a2 	beq.w	80051ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a2e      	ldr	r2, [pc, #184]	@ (8005128 <HAL_DMA_IRQHandler+0x1b4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d04a      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a2d      	ldr	r2, [pc, #180]	@ (800512c <HAL_DMA_IRQHandler+0x1b8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d045      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a2b      	ldr	r2, [pc, #172]	@ (8005130 <HAL_DMA_IRQHandler+0x1bc>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d040      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2a      	ldr	r2, [pc, #168]	@ (8005134 <HAL_DMA_IRQHandler+0x1c0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d03b      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a28      	ldr	r2, [pc, #160]	@ (8005138 <HAL_DMA_IRQHandler+0x1c4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d036      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a27      	ldr	r2, [pc, #156]	@ (800513c <HAL_DMA_IRQHandler+0x1c8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d031      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a25      	ldr	r2, [pc, #148]	@ (8005140 <HAL_DMA_IRQHandler+0x1cc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d02c      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a24      	ldr	r2, [pc, #144]	@ (8005144 <HAL_DMA_IRQHandler+0x1d0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d027      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a22      	ldr	r2, [pc, #136]	@ (8005148 <HAL_DMA_IRQHandler+0x1d4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d022      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a21      	ldr	r2, [pc, #132]	@ (800514c <HAL_DMA_IRQHandler+0x1d8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d01d      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005150 <HAL_DMA_IRQHandler+0x1dc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d018      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1e      	ldr	r2, [pc, #120]	@ (8005154 <HAL_DMA_IRQHandler+0x1e0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d013      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005158 <HAL_DMA_IRQHandler+0x1e4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00e      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1b      	ldr	r2, [pc, #108]	@ (800515c <HAL_DMA_IRQHandler+0x1e8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d009      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a19      	ldr	r2, [pc, #100]	@ (8005160 <HAL_DMA_IRQHandler+0x1ec>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <HAL_DMA_IRQHandler+0x194>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a18      	ldr	r2, [pc, #96]	@ (8005164 <HAL_DMA_IRQHandler+0x1f0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d12f      	bne.n	8005168 <HAL_DMA_IRQHandler+0x1f4>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	e02e      	b.n	800517c <HAL_DMA_IRQHandler+0x208>
 800511e:	bf00      	nop
 8005120:	24000000 	.word	0x24000000
 8005124:	1b4e81b5 	.word	0x1b4e81b5
 8005128:	40020010 	.word	0x40020010
 800512c:	40020028 	.word	0x40020028
 8005130:	40020040 	.word	0x40020040
 8005134:	40020058 	.word	0x40020058
 8005138:	40020070 	.word	0x40020070
 800513c:	40020088 	.word	0x40020088
 8005140:	400200a0 	.word	0x400200a0
 8005144:	400200b8 	.word	0x400200b8
 8005148:	40020410 	.word	0x40020410
 800514c:	40020428 	.word	0x40020428
 8005150:	40020440 	.word	0x40020440
 8005154:	40020458 	.word	0x40020458
 8005158:	40020470 	.word	0x40020470
 800515c:	40020488 	.word	0x40020488
 8005160:	400204a0 	.word	0x400204a0
 8005164:	400204b8 	.word	0x400204b8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf14      	ite	ne
 8005176:	2301      	movne	r3, #1
 8005178:	2300      	moveq	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d015      	beq.n	80051ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0204 	bic.w	r2, r2, #4
 800518e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	2208      	movs	r2, #8
 800519a:	409a      	lsls	r2, r3
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a4:	f043 0201 	orr.w	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d06e      	beq.n	80052a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a69      	ldr	r2, [pc, #420]	@ (800536c <HAL_DMA_IRQHandler+0x3f8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d04a      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a67      	ldr	r2, [pc, #412]	@ (8005370 <HAL_DMA_IRQHandler+0x3fc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d045      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a66      	ldr	r2, [pc, #408]	@ (8005374 <HAL_DMA_IRQHandler+0x400>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d040      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a64      	ldr	r2, [pc, #400]	@ (8005378 <HAL_DMA_IRQHandler+0x404>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d03b      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a63      	ldr	r2, [pc, #396]	@ (800537c <HAL_DMA_IRQHandler+0x408>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d036      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a61      	ldr	r2, [pc, #388]	@ (8005380 <HAL_DMA_IRQHandler+0x40c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d031      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a60      	ldr	r2, [pc, #384]	@ (8005384 <HAL_DMA_IRQHandler+0x410>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d02c      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a5e      	ldr	r2, [pc, #376]	@ (8005388 <HAL_DMA_IRQHandler+0x414>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d027      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a5d      	ldr	r2, [pc, #372]	@ (800538c <HAL_DMA_IRQHandler+0x418>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d022      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a5b      	ldr	r2, [pc, #364]	@ (8005390 <HAL_DMA_IRQHandler+0x41c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01d      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a5a      	ldr	r2, [pc, #360]	@ (8005394 <HAL_DMA_IRQHandler+0x420>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d018      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a58      	ldr	r2, [pc, #352]	@ (8005398 <HAL_DMA_IRQHandler+0x424>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d013      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a57      	ldr	r2, [pc, #348]	@ (800539c <HAL_DMA_IRQHandler+0x428>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00e      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a55      	ldr	r2, [pc, #340]	@ (80053a0 <HAL_DMA_IRQHandler+0x42c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d009      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a54      	ldr	r2, [pc, #336]	@ (80053a4 <HAL_DMA_IRQHandler+0x430>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d004      	beq.n	8005262 <HAL_DMA_IRQHandler+0x2ee>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a52      	ldr	r2, [pc, #328]	@ (80053a8 <HAL_DMA_IRQHandler+0x434>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d10a      	bne.n	8005278 <HAL_DMA_IRQHandler+0x304>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf14      	ite	ne
 8005270:	2301      	movne	r3, #1
 8005272:	2300      	moveq	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	e003      	b.n	8005280 <HAL_DMA_IRQHandler+0x30c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2300      	movs	r3, #0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00d      	beq.n	80052a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	2201      	movs	r2, #1
 800528e:	409a      	lsls	r2, r3
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005298:	f043 0202 	orr.w	r2, r3, #2
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a4:	f003 031f 	and.w	r3, r3, #31
 80052a8:	2204      	movs	r2, #4
 80052aa:	409a      	lsls	r2, r3
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 808f 	beq.w	80053d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2c      	ldr	r2, [pc, #176]	@ (800536c <HAL_DMA_IRQHandler+0x3f8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d04a      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005370 <HAL_DMA_IRQHandler+0x3fc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d045      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a29      	ldr	r2, [pc, #164]	@ (8005374 <HAL_DMA_IRQHandler+0x400>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d040      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a27      	ldr	r2, [pc, #156]	@ (8005378 <HAL_DMA_IRQHandler+0x404>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d03b      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a26      	ldr	r2, [pc, #152]	@ (800537c <HAL_DMA_IRQHandler+0x408>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d036      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a24      	ldr	r2, [pc, #144]	@ (8005380 <HAL_DMA_IRQHandler+0x40c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d031      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a23      	ldr	r2, [pc, #140]	@ (8005384 <HAL_DMA_IRQHandler+0x410>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d02c      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a21      	ldr	r2, [pc, #132]	@ (8005388 <HAL_DMA_IRQHandler+0x414>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d027      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a20      	ldr	r2, [pc, #128]	@ (800538c <HAL_DMA_IRQHandler+0x418>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d022      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1e      	ldr	r2, [pc, #120]	@ (8005390 <HAL_DMA_IRQHandler+0x41c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01d      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1d      	ldr	r2, [pc, #116]	@ (8005394 <HAL_DMA_IRQHandler+0x420>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d018      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1b      	ldr	r2, [pc, #108]	@ (8005398 <HAL_DMA_IRQHandler+0x424>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a1a      	ldr	r2, [pc, #104]	@ (800539c <HAL_DMA_IRQHandler+0x428>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00e      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a18      	ldr	r2, [pc, #96]	@ (80053a0 <HAL_DMA_IRQHandler+0x42c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d009      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a17      	ldr	r2, [pc, #92]	@ (80053a4 <HAL_DMA_IRQHandler+0x430>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d004      	beq.n	8005356 <HAL_DMA_IRQHandler+0x3e2>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a15      	ldr	r2, [pc, #84]	@ (80053a8 <HAL_DMA_IRQHandler+0x434>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d12a      	bne.n	80053ac <HAL_DMA_IRQHandler+0x438>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	bf14      	ite	ne
 8005364:	2301      	movne	r3, #1
 8005366:	2300      	moveq	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	e023      	b.n	80053b4 <HAL_DMA_IRQHandler+0x440>
 800536c:	40020010 	.word	0x40020010
 8005370:	40020028 	.word	0x40020028
 8005374:	40020040 	.word	0x40020040
 8005378:	40020058 	.word	0x40020058
 800537c:	40020070 	.word	0x40020070
 8005380:	40020088 	.word	0x40020088
 8005384:	400200a0 	.word	0x400200a0
 8005388:	400200b8 	.word	0x400200b8
 800538c:	40020410 	.word	0x40020410
 8005390:	40020428 	.word	0x40020428
 8005394:	40020440 	.word	0x40020440
 8005398:	40020458 	.word	0x40020458
 800539c:	40020470 	.word	0x40020470
 80053a0:	40020488 	.word	0x40020488
 80053a4:	400204a0 	.word	0x400204a0
 80053a8:	400204b8 	.word	0x400204b8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2300      	movs	r3, #0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	2204      	movs	r2, #4
 80053c2:	409a      	lsls	r2, r3
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053cc:	f043 0204 	orr.w	r2, r3, #4
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	2210      	movs	r2, #16
 80053de:	409a      	lsls	r2, r3
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80a6 	beq.w	8005536 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a85      	ldr	r2, [pc, #532]	@ (8005604 <HAL_DMA_IRQHandler+0x690>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d04a      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a83      	ldr	r2, [pc, #524]	@ (8005608 <HAL_DMA_IRQHandler+0x694>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d045      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a82      	ldr	r2, [pc, #520]	@ (800560c <HAL_DMA_IRQHandler+0x698>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d040      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a80      	ldr	r2, [pc, #512]	@ (8005610 <HAL_DMA_IRQHandler+0x69c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d03b      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a7f      	ldr	r2, [pc, #508]	@ (8005614 <HAL_DMA_IRQHandler+0x6a0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d036      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a7d      	ldr	r2, [pc, #500]	@ (8005618 <HAL_DMA_IRQHandler+0x6a4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d031      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a7c      	ldr	r2, [pc, #496]	@ (800561c <HAL_DMA_IRQHandler+0x6a8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d02c      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a7a      	ldr	r2, [pc, #488]	@ (8005620 <HAL_DMA_IRQHandler+0x6ac>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d027      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a79      	ldr	r2, [pc, #484]	@ (8005624 <HAL_DMA_IRQHandler+0x6b0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d022      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a77      	ldr	r2, [pc, #476]	@ (8005628 <HAL_DMA_IRQHandler+0x6b4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01d      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a76      	ldr	r2, [pc, #472]	@ (800562c <HAL_DMA_IRQHandler+0x6b8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d018      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a74      	ldr	r2, [pc, #464]	@ (8005630 <HAL_DMA_IRQHandler+0x6bc>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a73      	ldr	r2, [pc, #460]	@ (8005634 <HAL_DMA_IRQHandler+0x6c0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00e      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a71      	ldr	r2, [pc, #452]	@ (8005638 <HAL_DMA_IRQHandler+0x6c4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a70      	ldr	r2, [pc, #448]	@ (800563c <HAL_DMA_IRQHandler+0x6c8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_DMA_IRQHandler+0x516>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a6e      	ldr	r2, [pc, #440]	@ (8005640 <HAL_DMA_IRQHandler+0x6cc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d10a      	bne.n	80054a0 <HAL_DMA_IRQHandler+0x52c>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	bf14      	ite	ne
 8005498:	2301      	movne	r3, #1
 800549a:	2300      	moveq	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	e009      	b.n	80054b4 <HAL_DMA_IRQHandler+0x540>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d03e      	beq.n	8005536 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	2210      	movs	r2, #16
 80054c2:	409a      	lsls	r2, r3
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d108      	bne.n	80054f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d024      	beq.n	8005536 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
 80054f4:	e01f      	b.n	8005536 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01b      	beq.n	8005536 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	4798      	blx	r3
 8005506:	e016      	b.n	8005536 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005512:	2b00      	cmp	r3, #0
 8005514:	d107      	bne.n	8005526 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0208 	bic.w	r2, r2, #8
 8005524:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	2220      	movs	r2, #32
 8005540:	409a      	lsls	r2, r3
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	4013      	ands	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 8110 	beq.w	800576c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a2c      	ldr	r2, [pc, #176]	@ (8005604 <HAL_DMA_IRQHandler+0x690>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d04a      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2b      	ldr	r2, [pc, #172]	@ (8005608 <HAL_DMA_IRQHandler+0x694>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d045      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a29      	ldr	r2, [pc, #164]	@ (800560c <HAL_DMA_IRQHandler+0x698>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d040      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a28      	ldr	r2, [pc, #160]	@ (8005610 <HAL_DMA_IRQHandler+0x69c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d03b      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a26      	ldr	r2, [pc, #152]	@ (8005614 <HAL_DMA_IRQHandler+0x6a0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d036      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a25      	ldr	r2, [pc, #148]	@ (8005618 <HAL_DMA_IRQHandler+0x6a4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d031      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a23      	ldr	r2, [pc, #140]	@ (800561c <HAL_DMA_IRQHandler+0x6a8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d02c      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a22      	ldr	r2, [pc, #136]	@ (8005620 <HAL_DMA_IRQHandler+0x6ac>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d027      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a20      	ldr	r2, [pc, #128]	@ (8005624 <HAL_DMA_IRQHandler+0x6b0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d022      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005628 <HAL_DMA_IRQHandler+0x6b4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d01d      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1d      	ldr	r2, [pc, #116]	@ (800562c <HAL_DMA_IRQHandler+0x6b8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1c      	ldr	r2, [pc, #112]	@ (8005630 <HAL_DMA_IRQHandler+0x6bc>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005634 <HAL_DMA_IRQHandler+0x6c0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a19      	ldr	r2, [pc, #100]	@ (8005638 <HAL_DMA_IRQHandler+0x6c4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a17      	ldr	r2, [pc, #92]	@ (800563c <HAL_DMA_IRQHandler+0x6c8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_DMA_IRQHandler+0x678>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a16      	ldr	r2, [pc, #88]	@ (8005640 <HAL_DMA_IRQHandler+0x6cc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d12b      	bne.n	8005644 <HAL_DMA_IRQHandler+0x6d0>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0310 	and.w	r3, r3, #16
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bf14      	ite	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	2300      	moveq	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	e02a      	b.n	8005658 <HAL_DMA_IRQHandler+0x6e4>
 8005602:	bf00      	nop
 8005604:	40020010 	.word	0x40020010
 8005608:	40020028 	.word	0x40020028
 800560c:	40020040 	.word	0x40020040
 8005610:	40020058 	.word	0x40020058
 8005614:	40020070 	.word	0x40020070
 8005618:	40020088 	.word	0x40020088
 800561c:	400200a0 	.word	0x400200a0
 8005620:	400200b8 	.word	0x400200b8
 8005624:	40020410 	.word	0x40020410
 8005628:	40020428 	.word	0x40020428
 800562c:	40020440 	.word	0x40020440
 8005630:	40020458 	.word	0x40020458
 8005634:	40020470 	.word	0x40020470
 8005638:	40020488 	.word	0x40020488
 800563c:	400204a0 	.word	0x400204a0
 8005640:	400204b8 	.word	0x400204b8
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	bf14      	ite	ne
 8005652:	2301      	movne	r3, #1
 8005654:	2300      	moveq	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 8087 	beq.w	800576c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2220      	movs	r2, #32
 8005668:	409a      	lsls	r2, r3
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b04      	cmp	r3, #4
 8005678:	d139      	bne.n	80056ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0216 	bic.w	r2, r2, #22
 8005688:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695a      	ldr	r2, [r3, #20]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005698:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <HAL_DMA_IRQHandler+0x736>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0208 	bic.w	r2, r2, #8
 80056b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	223f      	movs	r2, #63	@ 0x3f
 80056c4:	409a      	lsls	r2, r3
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 834a 	beq.w	8005d78 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
          }
          return;
 80056ec:	e344      	b.n	8005d78 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d018      	beq.n	800572e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d108      	bne.n	800571c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	2b00      	cmp	r3, #0
 8005710:	d02c      	beq.n	800576c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4798      	blx	r3
 800571a:	e027      	b.n	800576c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d023      	beq.n	800576c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	4798      	blx	r3
 800572c:	e01e      	b.n	800576c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10f      	bne.n	800575c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0210 	bic.w	r2, r2, #16
 800574a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8306 	beq.w	8005d82 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8088 	beq.w	8005894 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2204      	movs	r2, #4
 8005788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a7a      	ldr	r2, [pc, #488]	@ (800597c <HAL_DMA_IRQHandler+0xa08>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d04a      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a79      	ldr	r2, [pc, #484]	@ (8005980 <HAL_DMA_IRQHandler+0xa0c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d045      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a77      	ldr	r2, [pc, #476]	@ (8005984 <HAL_DMA_IRQHandler+0xa10>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d040      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a76      	ldr	r2, [pc, #472]	@ (8005988 <HAL_DMA_IRQHandler+0xa14>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d03b      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a74      	ldr	r2, [pc, #464]	@ (800598c <HAL_DMA_IRQHandler+0xa18>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d036      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a73      	ldr	r2, [pc, #460]	@ (8005990 <HAL_DMA_IRQHandler+0xa1c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d031      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a71      	ldr	r2, [pc, #452]	@ (8005994 <HAL_DMA_IRQHandler+0xa20>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d02c      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a70      	ldr	r2, [pc, #448]	@ (8005998 <HAL_DMA_IRQHandler+0xa24>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d027      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a6e      	ldr	r2, [pc, #440]	@ (800599c <HAL_DMA_IRQHandler+0xa28>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d022      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a6d      	ldr	r2, [pc, #436]	@ (80059a0 <HAL_DMA_IRQHandler+0xa2c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d01d      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a6b      	ldr	r2, [pc, #428]	@ (80059a4 <HAL_DMA_IRQHandler+0xa30>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d018      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a6a      	ldr	r2, [pc, #424]	@ (80059a8 <HAL_DMA_IRQHandler+0xa34>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d013      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a68      	ldr	r2, [pc, #416]	@ (80059ac <HAL_DMA_IRQHandler+0xa38>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00e      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a67      	ldr	r2, [pc, #412]	@ (80059b0 <HAL_DMA_IRQHandler+0xa3c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d009      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a65      	ldr	r2, [pc, #404]	@ (80059b4 <HAL_DMA_IRQHandler+0xa40>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d004      	beq.n	800582c <HAL_DMA_IRQHandler+0x8b8>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a64      	ldr	r2, [pc, #400]	@ (80059b8 <HAL_DMA_IRQHandler+0xa44>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d108      	bne.n	800583e <HAL_DMA_IRQHandler+0x8ca>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	e007      	b.n	800584e <HAL_DMA_IRQHandler+0x8da>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0201 	bic.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3301      	adds	r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005856:	429a      	cmp	r2, r3
 8005858:	d307      	bcc.n	800586a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1f2      	bne.n	800584e <HAL_DMA_IRQHandler+0x8da>
 8005868:	e000      	b.n	800586c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800586a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2203      	movs	r2, #3
 800587e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005882:	e003      	b.n	800588c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 8272 	beq.w	8005d82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	4798      	blx	r3
 80058a6:	e26c      	b.n	8005d82 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a43      	ldr	r2, [pc, #268]	@ (80059bc <HAL_DMA_IRQHandler+0xa48>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d022      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x984>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a42      	ldr	r2, [pc, #264]	@ (80059c0 <HAL_DMA_IRQHandler+0xa4c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d01d      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x984>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a40      	ldr	r2, [pc, #256]	@ (80059c4 <HAL_DMA_IRQHandler+0xa50>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d018      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x984>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a3f      	ldr	r2, [pc, #252]	@ (80059c8 <HAL_DMA_IRQHandler+0xa54>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d013      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x984>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a3d      	ldr	r2, [pc, #244]	@ (80059cc <HAL_DMA_IRQHandler+0xa58>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00e      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x984>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a3c      	ldr	r2, [pc, #240]	@ (80059d0 <HAL_DMA_IRQHandler+0xa5c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d009      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x984>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a3a      	ldr	r2, [pc, #232]	@ (80059d4 <HAL_DMA_IRQHandler+0xa60>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x984>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a39      	ldr	r2, [pc, #228]	@ (80059d8 <HAL_DMA_IRQHandler+0xa64>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_DMA_IRQHandler+0x988>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <HAL_DMA_IRQHandler+0x98a>
 80058fc:	2300      	movs	r3, #0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 823f 	beq.w	8005d82 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	2204      	movs	r2, #4
 8005916:	409a      	lsls	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	4013      	ands	r3, r2
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80cd 	beq.w	8005abc <HAL_DMA_IRQHandler+0xb48>
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80c7 	beq.w	8005abc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	2204      	movs	r2, #4
 8005938:	409a      	lsls	r2, r3
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d049      	beq.n	80059dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8210 	beq.w	8005d7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005964:	e20a      	b.n	8005d7c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8206 	beq.w	8005d7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005978:	e200      	b.n	8005d7c <HAL_DMA_IRQHandler+0xe08>
 800597a:	bf00      	nop
 800597c:	40020010 	.word	0x40020010
 8005980:	40020028 	.word	0x40020028
 8005984:	40020040 	.word	0x40020040
 8005988:	40020058 	.word	0x40020058
 800598c:	40020070 	.word	0x40020070
 8005990:	40020088 	.word	0x40020088
 8005994:	400200a0 	.word	0x400200a0
 8005998:	400200b8 	.word	0x400200b8
 800599c:	40020410 	.word	0x40020410
 80059a0:	40020428 	.word	0x40020428
 80059a4:	40020440 	.word	0x40020440
 80059a8:	40020458 	.word	0x40020458
 80059ac:	40020470 	.word	0x40020470
 80059b0:	40020488 	.word	0x40020488
 80059b4:	400204a0 	.word	0x400204a0
 80059b8:	400204b8 	.word	0x400204b8
 80059bc:	58025408 	.word	0x58025408
 80059c0:	5802541c 	.word	0x5802541c
 80059c4:	58025430 	.word	0x58025430
 80059c8:	58025444 	.word	0x58025444
 80059cc:	58025458 	.word	0x58025458
 80059d0:	5802546c 	.word	0x5802546c
 80059d4:	58025480 	.word	0x58025480
 80059d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d160      	bne.n	8005aa8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a7f      	ldr	r2, [pc, #508]	@ (8005be8 <HAL_DMA_IRQHandler+0xc74>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d04a      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a7d      	ldr	r2, [pc, #500]	@ (8005bec <HAL_DMA_IRQHandler+0xc78>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d045      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a7c      	ldr	r2, [pc, #496]	@ (8005bf0 <HAL_DMA_IRQHandler+0xc7c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d040      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a7a      	ldr	r2, [pc, #488]	@ (8005bf4 <HAL_DMA_IRQHandler+0xc80>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d03b      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a79      	ldr	r2, [pc, #484]	@ (8005bf8 <HAL_DMA_IRQHandler+0xc84>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d036      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a77      	ldr	r2, [pc, #476]	@ (8005bfc <HAL_DMA_IRQHandler+0xc88>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d031      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a76      	ldr	r2, [pc, #472]	@ (8005c00 <HAL_DMA_IRQHandler+0xc8c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d02c      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a74      	ldr	r2, [pc, #464]	@ (8005c04 <HAL_DMA_IRQHandler+0xc90>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d027      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a73      	ldr	r2, [pc, #460]	@ (8005c08 <HAL_DMA_IRQHandler+0xc94>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d022      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a71      	ldr	r2, [pc, #452]	@ (8005c0c <HAL_DMA_IRQHandler+0xc98>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01d      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a70      	ldr	r2, [pc, #448]	@ (8005c10 <HAL_DMA_IRQHandler+0xc9c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d018      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a6e      	ldr	r2, [pc, #440]	@ (8005c14 <HAL_DMA_IRQHandler+0xca0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a6d      	ldr	r2, [pc, #436]	@ (8005c18 <HAL_DMA_IRQHandler+0xca4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00e      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a6b      	ldr	r2, [pc, #428]	@ (8005c1c <HAL_DMA_IRQHandler+0xca8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d009      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a6a      	ldr	r2, [pc, #424]	@ (8005c20 <HAL_DMA_IRQHandler+0xcac>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d004      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xb12>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a68      	ldr	r2, [pc, #416]	@ (8005c24 <HAL_DMA_IRQHandler+0xcb0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d108      	bne.n	8005a98 <HAL_DMA_IRQHandler+0xb24>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0208 	bic.w	r2, r2, #8
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	e007      	b.n	8005aa8 <HAL_DMA_IRQHandler+0xb34>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0204 	bic.w	r2, r2, #4
 8005aa6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8165 	beq.w	8005d7c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005aba:	e15f      	b.n	8005d7c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac0:	f003 031f 	and.w	r3, r3, #31
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	409a      	lsls	r2, r3
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 80c5 	beq.w	8005c5c <HAL_DMA_IRQHandler+0xce8>
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80bf 	beq.w	8005c5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae2:	f003 031f 	and.w	r3, r3, #31
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	409a      	lsls	r2, r3
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d018      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 813a 	beq.w	8005d80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b14:	e134      	b.n	8005d80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 8130 	beq.w	8005d80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b28:	e12a      	b.n	8005d80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f040 8089 	bne.w	8005c48 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8005be8 <HAL_DMA_IRQHandler+0xc74>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d04a      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a29      	ldr	r2, [pc, #164]	@ (8005bec <HAL_DMA_IRQHandler+0xc78>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d045      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a28      	ldr	r2, [pc, #160]	@ (8005bf0 <HAL_DMA_IRQHandler+0xc7c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d040      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a26      	ldr	r2, [pc, #152]	@ (8005bf4 <HAL_DMA_IRQHandler+0xc80>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d03b      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a25      	ldr	r2, [pc, #148]	@ (8005bf8 <HAL_DMA_IRQHandler+0xc84>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d036      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a23      	ldr	r2, [pc, #140]	@ (8005bfc <HAL_DMA_IRQHandler+0xc88>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d031      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a22      	ldr	r2, [pc, #136]	@ (8005c00 <HAL_DMA_IRQHandler+0xc8c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d02c      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a20      	ldr	r2, [pc, #128]	@ (8005c04 <HAL_DMA_IRQHandler+0xc90>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d027      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005c08 <HAL_DMA_IRQHandler+0xc94>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d022      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1d      	ldr	r2, [pc, #116]	@ (8005c0c <HAL_DMA_IRQHandler+0xc98>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d01d      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c10 <HAL_DMA_IRQHandler+0xc9c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d018      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c14 <HAL_DMA_IRQHandler+0xca0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d013      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a19      	ldr	r2, [pc, #100]	@ (8005c18 <HAL_DMA_IRQHandler+0xca4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00e      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a17      	ldr	r2, [pc, #92]	@ (8005c1c <HAL_DMA_IRQHandler+0xca8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d009      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a16      	ldr	r2, [pc, #88]	@ (8005c20 <HAL_DMA_IRQHandler+0xcac>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xc62>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a14      	ldr	r2, [pc, #80]	@ (8005c24 <HAL_DMA_IRQHandler+0xcb0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d128      	bne.n	8005c28 <HAL_DMA_IRQHandler+0xcb4>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0214 	bic.w	r2, r2, #20
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e027      	b.n	8005c38 <HAL_DMA_IRQHandler+0xcc4>
 8005be8:	40020010 	.word	0x40020010
 8005bec:	40020028 	.word	0x40020028
 8005bf0:	40020040 	.word	0x40020040
 8005bf4:	40020058 	.word	0x40020058
 8005bf8:	40020070 	.word	0x40020070
 8005bfc:	40020088 	.word	0x40020088
 8005c00:	400200a0 	.word	0x400200a0
 8005c04:	400200b8 	.word	0x400200b8
 8005c08:	40020410 	.word	0x40020410
 8005c0c:	40020428 	.word	0x40020428
 8005c10:	40020440 	.word	0x40020440
 8005c14:	40020458 	.word	0x40020458
 8005c18:	40020470 	.word	0x40020470
 8005c1c:	40020488 	.word	0x40020488
 8005c20:	400204a0 	.word	0x400204a0
 8005c24:	400204b8 	.word	0x400204b8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 020a 	bic.w	r2, r2, #10
 8005c36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8097 	beq.w	8005d80 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c5a:	e091      	b.n	8005d80 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c60:	f003 031f 	and.w	r3, r3, #31
 8005c64:	2208      	movs	r2, #8
 8005c66:	409a      	lsls	r2, r3
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8088 	beq.w	8005d82 <HAL_DMA_IRQHandler+0xe0e>
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 8082 	beq.w	8005d82 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a41      	ldr	r2, [pc, #260]	@ (8005d88 <HAL_DMA_IRQHandler+0xe14>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d04a      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a3f      	ldr	r2, [pc, #252]	@ (8005d8c <HAL_DMA_IRQHandler+0xe18>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d045      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a3e      	ldr	r2, [pc, #248]	@ (8005d90 <HAL_DMA_IRQHandler+0xe1c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d040      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a3c      	ldr	r2, [pc, #240]	@ (8005d94 <HAL_DMA_IRQHandler+0xe20>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d03b      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a3b      	ldr	r2, [pc, #236]	@ (8005d98 <HAL_DMA_IRQHandler+0xe24>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d036      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a39      	ldr	r2, [pc, #228]	@ (8005d9c <HAL_DMA_IRQHandler+0xe28>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d031      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a38      	ldr	r2, [pc, #224]	@ (8005da0 <HAL_DMA_IRQHandler+0xe2c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d02c      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a36      	ldr	r2, [pc, #216]	@ (8005da4 <HAL_DMA_IRQHandler+0xe30>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d027      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a35      	ldr	r2, [pc, #212]	@ (8005da8 <HAL_DMA_IRQHandler+0xe34>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d022      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a33      	ldr	r2, [pc, #204]	@ (8005dac <HAL_DMA_IRQHandler+0xe38>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d01d      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a32      	ldr	r2, [pc, #200]	@ (8005db0 <HAL_DMA_IRQHandler+0xe3c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d018      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a30      	ldr	r2, [pc, #192]	@ (8005db4 <HAL_DMA_IRQHandler+0xe40>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d013      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8005db8 <HAL_DMA_IRQHandler+0xe44>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00e      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a2d      	ldr	r2, [pc, #180]	@ (8005dbc <HAL_DMA_IRQHandler+0xe48>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d009      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005dc0 <HAL_DMA_IRQHandler+0xe4c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d004      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xdaa>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2a      	ldr	r2, [pc, #168]	@ (8005dc4 <HAL_DMA_IRQHandler+0xe50>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d108      	bne.n	8005d30 <HAL_DMA_IRQHandler+0xdbc>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 021c 	bic.w	r2, r2, #28
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	e007      	b.n	8005d40 <HAL_DMA_IRQHandler+0xdcc>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 020e 	bic.w	r2, r2, #14
 8005d3e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	2201      	movs	r2, #1
 8005d4a:	409a      	lsls	r2, r3
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d009      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4798      	blx	r3
 8005d76:	e004      	b.n	8005d82 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005d78:	bf00      	nop
 8005d7a:	e002      	b.n	8005d82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d7c:	bf00      	nop
 8005d7e:	e000      	b.n	8005d82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d80:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d82:	3728      	adds	r7, #40	@ 0x28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40020010 	.word	0x40020010
 8005d8c:	40020028 	.word	0x40020028
 8005d90:	40020040 	.word	0x40020040
 8005d94:	40020058 	.word	0x40020058
 8005d98:	40020070 	.word	0x40020070
 8005d9c:	40020088 	.word	0x40020088
 8005da0:	400200a0 	.word	0x400200a0
 8005da4:	400200b8 	.word	0x400200b8
 8005da8:	40020410 	.word	0x40020410
 8005dac:	40020428 	.word	0x40020428
 8005db0:	40020440 	.word	0x40020440
 8005db4:	40020458 	.word	0x40020458
 8005db8:	40020470 	.word	0x40020470
 8005dbc:	40020488 	.word	0x40020488
 8005dc0:	400204a0 	.word	0x400204a0
 8005dc4:	400204b8 	.word	0x400204b8

08005dc8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dda:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a7f      	ldr	r2, [pc, #508]	@ (8005fe4 <DMA_SetConfig+0x21c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d072      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a7d      	ldr	r2, [pc, #500]	@ (8005fe8 <DMA_SetConfig+0x220>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d06d      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a7c      	ldr	r2, [pc, #496]	@ (8005fec <DMA_SetConfig+0x224>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d068      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a7a      	ldr	r2, [pc, #488]	@ (8005ff0 <DMA_SetConfig+0x228>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d063      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a79      	ldr	r2, [pc, #484]	@ (8005ff4 <DMA_SetConfig+0x22c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d05e      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a77      	ldr	r2, [pc, #476]	@ (8005ff8 <DMA_SetConfig+0x230>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d059      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a76      	ldr	r2, [pc, #472]	@ (8005ffc <DMA_SetConfig+0x234>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d054      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a74      	ldr	r2, [pc, #464]	@ (8006000 <DMA_SetConfig+0x238>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d04f      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a73      	ldr	r2, [pc, #460]	@ (8006004 <DMA_SetConfig+0x23c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d04a      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a71      	ldr	r2, [pc, #452]	@ (8006008 <DMA_SetConfig+0x240>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d045      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a70      	ldr	r2, [pc, #448]	@ (800600c <DMA_SetConfig+0x244>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d040      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a6e      	ldr	r2, [pc, #440]	@ (8006010 <DMA_SetConfig+0x248>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d03b      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a6d      	ldr	r2, [pc, #436]	@ (8006014 <DMA_SetConfig+0x24c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d036      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a6b      	ldr	r2, [pc, #428]	@ (8006018 <DMA_SetConfig+0x250>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d031      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a6a      	ldr	r2, [pc, #424]	@ (800601c <DMA_SetConfig+0x254>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d02c      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a68      	ldr	r2, [pc, #416]	@ (8006020 <DMA_SetConfig+0x258>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d027      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a67      	ldr	r2, [pc, #412]	@ (8006024 <DMA_SetConfig+0x25c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d022      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a65      	ldr	r2, [pc, #404]	@ (8006028 <DMA_SetConfig+0x260>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d01d      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a64      	ldr	r2, [pc, #400]	@ (800602c <DMA_SetConfig+0x264>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d018      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a62      	ldr	r2, [pc, #392]	@ (8006030 <DMA_SetConfig+0x268>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a61      	ldr	r2, [pc, #388]	@ (8006034 <DMA_SetConfig+0x26c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00e      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a5f      	ldr	r2, [pc, #380]	@ (8006038 <DMA_SetConfig+0x270>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800603c <DMA_SetConfig+0x274>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d004      	beq.n	8005ed2 <DMA_SetConfig+0x10a>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a5c      	ldr	r2, [pc, #368]	@ (8006040 <DMA_SetConfig+0x278>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d101      	bne.n	8005ed6 <DMA_SetConfig+0x10e>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <DMA_SetConfig+0x110>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00d      	beq.n	8005ef8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005ee4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005ef6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a39      	ldr	r2, [pc, #228]	@ (8005fe4 <DMA_SetConfig+0x21c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d04a      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a38      	ldr	r2, [pc, #224]	@ (8005fe8 <DMA_SetConfig+0x220>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d045      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a36      	ldr	r2, [pc, #216]	@ (8005fec <DMA_SetConfig+0x224>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d040      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a35      	ldr	r2, [pc, #212]	@ (8005ff0 <DMA_SetConfig+0x228>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d03b      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a33      	ldr	r2, [pc, #204]	@ (8005ff4 <DMA_SetConfig+0x22c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d036      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a32      	ldr	r2, [pc, #200]	@ (8005ff8 <DMA_SetConfig+0x230>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d031      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a30      	ldr	r2, [pc, #192]	@ (8005ffc <DMA_SetConfig+0x234>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d02c      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a2f      	ldr	r2, [pc, #188]	@ (8006000 <DMA_SetConfig+0x238>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d027      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8006004 <DMA_SetConfig+0x23c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d022      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a2c      	ldr	r2, [pc, #176]	@ (8006008 <DMA_SetConfig+0x240>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d01d      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a2a      	ldr	r2, [pc, #168]	@ (800600c <DMA_SetConfig+0x244>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d018      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a29      	ldr	r2, [pc, #164]	@ (8006010 <DMA_SetConfig+0x248>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a27      	ldr	r2, [pc, #156]	@ (8006014 <DMA_SetConfig+0x24c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00e      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a26      	ldr	r2, [pc, #152]	@ (8006018 <DMA_SetConfig+0x250>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d009      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a24      	ldr	r2, [pc, #144]	@ (800601c <DMA_SetConfig+0x254>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d004      	beq.n	8005f98 <DMA_SetConfig+0x1d0>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a23      	ldr	r2, [pc, #140]	@ (8006020 <DMA_SetConfig+0x258>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d101      	bne.n	8005f9c <DMA_SetConfig+0x1d4>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <DMA_SetConfig+0x1d6>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d059      	beq.n	8006056 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa6:	f003 031f 	and.w	r3, r3, #31
 8005faa:	223f      	movs	r2, #63	@ 0x3f
 8005fac:	409a      	lsls	r2, r3
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005fc0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	2b40      	cmp	r3, #64	@ 0x40
 8005fd0:	d138      	bne.n	8006044 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005fe2:	e086      	b.n	80060f2 <DMA_SetConfig+0x32a>
 8005fe4:	40020010 	.word	0x40020010
 8005fe8:	40020028 	.word	0x40020028
 8005fec:	40020040 	.word	0x40020040
 8005ff0:	40020058 	.word	0x40020058
 8005ff4:	40020070 	.word	0x40020070
 8005ff8:	40020088 	.word	0x40020088
 8005ffc:	400200a0 	.word	0x400200a0
 8006000:	400200b8 	.word	0x400200b8
 8006004:	40020410 	.word	0x40020410
 8006008:	40020428 	.word	0x40020428
 800600c:	40020440 	.word	0x40020440
 8006010:	40020458 	.word	0x40020458
 8006014:	40020470 	.word	0x40020470
 8006018:	40020488 	.word	0x40020488
 800601c:	400204a0 	.word	0x400204a0
 8006020:	400204b8 	.word	0x400204b8
 8006024:	58025408 	.word	0x58025408
 8006028:	5802541c 	.word	0x5802541c
 800602c:	58025430 	.word	0x58025430
 8006030:	58025444 	.word	0x58025444
 8006034:	58025458 	.word	0x58025458
 8006038:	5802546c 	.word	0x5802546c
 800603c:	58025480 	.word	0x58025480
 8006040:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	60da      	str	r2, [r3, #12]
}
 8006054:	e04d      	b.n	80060f2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a29      	ldr	r2, [pc, #164]	@ (8006100 <DMA_SetConfig+0x338>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d022      	beq.n	80060a6 <DMA_SetConfig+0x2de>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a27      	ldr	r2, [pc, #156]	@ (8006104 <DMA_SetConfig+0x33c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01d      	beq.n	80060a6 <DMA_SetConfig+0x2de>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a26      	ldr	r2, [pc, #152]	@ (8006108 <DMA_SetConfig+0x340>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d018      	beq.n	80060a6 <DMA_SetConfig+0x2de>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a24      	ldr	r2, [pc, #144]	@ (800610c <DMA_SetConfig+0x344>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <DMA_SetConfig+0x2de>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a23      	ldr	r2, [pc, #140]	@ (8006110 <DMA_SetConfig+0x348>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <DMA_SetConfig+0x2de>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a21      	ldr	r2, [pc, #132]	@ (8006114 <DMA_SetConfig+0x34c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <DMA_SetConfig+0x2de>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a20      	ldr	r2, [pc, #128]	@ (8006118 <DMA_SetConfig+0x350>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <DMA_SetConfig+0x2de>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1e      	ldr	r2, [pc, #120]	@ (800611c <DMA_SetConfig+0x354>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d101      	bne.n	80060aa <DMA_SetConfig+0x2e2>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <DMA_SetConfig+0x2e4>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d020      	beq.n	80060f2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	2201      	movs	r2, #1
 80060ba:	409a      	lsls	r2, r3
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b40      	cmp	r3, #64	@ 0x40
 80060ce:	d108      	bne.n	80060e2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	60da      	str	r2, [r3, #12]
}
 80060e0:	e007      	b.n	80060f2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	60da      	str	r2, [r3, #12]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	58025408 	.word	0x58025408
 8006104:	5802541c 	.word	0x5802541c
 8006108:	58025430 	.word	0x58025430
 800610c:	58025444 	.word	0x58025444
 8006110:	58025458 	.word	0x58025458
 8006114:	5802546c 	.word	0x5802546c
 8006118:	58025480 	.word	0x58025480
 800611c:	58025494 	.word	0x58025494

08006120 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a42      	ldr	r2, [pc, #264]	@ (8006238 <DMA_CalcBaseAndBitshift+0x118>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d04a      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a41      	ldr	r2, [pc, #260]	@ (800623c <DMA_CalcBaseAndBitshift+0x11c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d045      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a3f      	ldr	r2, [pc, #252]	@ (8006240 <DMA_CalcBaseAndBitshift+0x120>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d040      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a3e      	ldr	r2, [pc, #248]	@ (8006244 <DMA_CalcBaseAndBitshift+0x124>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d03b      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a3c      	ldr	r2, [pc, #240]	@ (8006248 <DMA_CalcBaseAndBitshift+0x128>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d036      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a3b      	ldr	r2, [pc, #236]	@ (800624c <DMA_CalcBaseAndBitshift+0x12c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d031      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a39      	ldr	r2, [pc, #228]	@ (8006250 <DMA_CalcBaseAndBitshift+0x130>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d02c      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a38      	ldr	r2, [pc, #224]	@ (8006254 <DMA_CalcBaseAndBitshift+0x134>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d027      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a36      	ldr	r2, [pc, #216]	@ (8006258 <DMA_CalcBaseAndBitshift+0x138>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d022      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a35      	ldr	r2, [pc, #212]	@ (800625c <DMA_CalcBaseAndBitshift+0x13c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d01d      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a33      	ldr	r2, [pc, #204]	@ (8006260 <DMA_CalcBaseAndBitshift+0x140>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d018      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a32      	ldr	r2, [pc, #200]	@ (8006264 <DMA_CalcBaseAndBitshift+0x144>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a30      	ldr	r2, [pc, #192]	@ (8006268 <DMA_CalcBaseAndBitshift+0x148>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00e      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a2f      	ldr	r2, [pc, #188]	@ (800626c <DMA_CalcBaseAndBitshift+0x14c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d009      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2d      	ldr	r2, [pc, #180]	@ (8006270 <DMA_CalcBaseAndBitshift+0x150>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0xa8>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006274 <DMA_CalcBaseAndBitshift+0x154>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d101      	bne.n	80061cc <DMA_CalcBaseAndBitshift+0xac>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <DMA_CalcBaseAndBitshift+0xae>
 80061cc:	2300      	movs	r3, #0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d024      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	3b10      	subs	r3, #16
 80061da:	4a27      	ldr	r2, [pc, #156]	@ (8006278 <DMA_CalcBaseAndBitshift+0x158>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	091b      	lsrs	r3, r3, #4
 80061e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	4a24      	ldr	r2, [pc, #144]	@ (800627c <DMA_CalcBaseAndBitshift+0x15c>)
 80061ec:	5cd3      	ldrb	r3, [r2, r3]
 80061ee:	461a      	mov	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d908      	bls.n	800620c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	4b1f      	ldr	r3, [pc, #124]	@ (8006280 <DMA_CalcBaseAndBitshift+0x160>)
 8006202:	4013      	ands	r3, r2
 8006204:	1d1a      	adds	r2, r3, #4
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	659a      	str	r2, [r3, #88]	@ 0x58
 800620a:	e00d      	b.n	8006228 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	4b1b      	ldr	r3, [pc, #108]	@ (8006280 <DMA_CalcBaseAndBitshift+0x160>)
 8006214:	4013      	ands	r3, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6593      	str	r3, [r2, #88]	@ 0x58
 800621a:	e005      	b.n	8006228 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	40020010 	.word	0x40020010
 800623c:	40020028 	.word	0x40020028
 8006240:	40020040 	.word	0x40020040
 8006244:	40020058 	.word	0x40020058
 8006248:	40020070 	.word	0x40020070
 800624c:	40020088 	.word	0x40020088
 8006250:	400200a0 	.word	0x400200a0
 8006254:	400200b8 	.word	0x400200b8
 8006258:	40020410 	.word	0x40020410
 800625c:	40020428 	.word	0x40020428
 8006260:	40020440 	.word	0x40020440
 8006264:	40020458 	.word	0x40020458
 8006268:	40020470 	.word	0x40020470
 800626c:	40020488 	.word	0x40020488
 8006270:	400204a0 	.word	0x400204a0
 8006274:	400204b8 	.word	0x400204b8
 8006278:	aaaaaaab 	.word	0xaaaaaaab
 800627c:	0801405c 	.word	0x0801405c
 8006280:	fffffc00 	.word	0xfffffc00

08006284 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d120      	bne.n	80062da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629c:	2b03      	cmp	r3, #3
 800629e:	d858      	bhi.n	8006352 <DMA_CheckFifoParam+0xce>
 80062a0:	a201      	add	r2, pc, #4	@ (adr r2, 80062a8 <DMA_CheckFifoParam+0x24>)
 80062a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a6:	bf00      	nop
 80062a8:	080062b9 	.word	0x080062b9
 80062ac:	080062cb 	.word	0x080062cb
 80062b0:	080062b9 	.word	0x080062b9
 80062b4:	08006353 	.word	0x08006353
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d048      	beq.n	8006356 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062c8:	e045      	b.n	8006356 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062d2:	d142      	bne.n	800635a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062d8:	e03f      	b.n	800635a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e2:	d123      	bne.n	800632c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d838      	bhi.n	800635e <DMA_CheckFifoParam+0xda>
 80062ec:	a201      	add	r2, pc, #4	@ (adr r2, 80062f4 <DMA_CheckFifoParam+0x70>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	08006305 	.word	0x08006305
 80062f8:	0800630b 	.word	0x0800630b
 80062fc:	08006305 	.word	0x08006305
 8006300:	0800631d 	.word	0x0800631d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
        break;
 8006308:	e030      	b.n	800636c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d025      	beq.n	8006362 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800631a:	e022      	b.n	8006362 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006320:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006324:	d11f      	bne.n	8006366 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800632a:	e01c      	b.n	8006366 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006330:	2b02      	cmp	r3, #2
 8006332:	d902      	bls.n	800633a <DMA_CheckFifoParam+0xb6>
 8006334:	2b03      	cmp	r3, #3
 8006336:	d003      	beq.n	8006340 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006338:	e018      	b.n	800636c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	73fb      	strb	r3, [r7, #15]
        break;
 800633e:	e015      	b.n	800636c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00e      	beq.n	800636a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]
    break;
 8006350:	e00b      	b.n	800636a <DMA_CheckFifoParam+0xe6>
        break;
 8006352:	bf00      	nop
 8006354:	e00a      	b.n	800636c <DMA_CheckFifoParam+0xe8>
        break;
 8006356:	bf00      	nop
 8006358:	e008      	b.n	800636c <DMA_CheckFifoParam+0xe8>
        break;
 800635a:	bf00      	nop
 800635c:	e006      	b.n	800636c <DMA_CheckFifoParam+0xe8>
        break;
 800635e:	bf00      	nop
 8006360:	e004      	b.n	800636c <DMA_CheckFifoParam+0xe8>
        break;
 8006362:	bf00      	nop
 8006364:	e002      	b.n	800636c <DMA_CheckFifoParam+0xe8>
        break;
 8006366:	bf00      	nop
 8006368:	e000      	b.n	800636c <DMA_CheckFifoParam+0xe8>
    break;
 800636a:	bf00      	nop
    }
  }

  return status;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop

0800637c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a38      	ldr	r2, [pc, #224]	@ (8006470 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d022      	beq.n	80063da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a36      	ldr	r2, [pc, #216]	@ (8006474 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d01d      	beq.n	80063da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a35      	ldr	r2, [pc, #212]	@ (8006478 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d018      	beq.n	80063da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a33      	ldr	r2, [pc, #204]	@ (800647c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a32      	ldr	r2, [pc, #200]	@ (8006480 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00e      	beq.n	80063da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a30      	ldr	r2, [pc, #192]	@ (8006484 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d009      	beq.n	80063da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006488 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d004      	beq.n	80063da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a2d      	ldr	r2, [pc, #180]	@ (800648c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d101      	bne.n	80063de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80063de:	2300      	movs	r3, #0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01a      	beq.n	800641a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	3b08      	subs	r3, #8
 80063ec:	4a28      	ldr	r2, [pc, #160]	@ (8006490 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	091b      	lsrs	r3, r3, #4
 80063f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4b26      	ldr	r3, [pc, #152]	@ (8006494 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	461a      	mov	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a24      	ldr	r2, [pc, #144]	@ (8006498 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006408:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2201      	movs	r2, #1
 8006412:	409a      	lsls	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006418:	e024      	b.n	8006464 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	3b10      	subs	r3, #16
 8006422:	4a1e      	ldr	r2, [pc, #120]	@ (800649c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	091b      	lsrs	r3, r3, #4
 800642a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4a1c      	ldr	r2, [pc, #112]	@ (80064a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d806      	bhi.n	8006442 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4a1b      	ldr	r2, [pc, #108]	@ (80064a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d902      	bls.n	8006442 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3308      	adds	r3, #8
 8006440:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4b18      	ldr	r3, [pc, #96]	@ (80064a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	461a      	mov	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a16      	ldr	r2, [pc, #88]	@ (80064ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006454:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f003 031f 	and.w	r3, r3, #31
 800645c:	2201      	movs	r2, #1
 800645e:	409a      	lsls	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	58025408 	.word	0x58025408
 8006474:	5802541c 	.word	0x5802541c
 8006478:	58025430 	.word	0x58025430
 800647c:	58025444 	.word	0x58025444
 8006480:	58025458 	.word	0x58025458
 8006484:	5802546c 	.word	0x5802546c
 8006488:	58025480 	.word	0x58025480
 800648c:	58025494 	.word	0x58025494
 8006490:	cccccccd 	.word	0xcccccccd
 8006494:	16009600 	.word	0x16009600
 8006498:	58025880 	.word	0x58025880
 800649c:	aaaaaaab 	.word	0xaaaaaaab
 80064a0:	400204b8 	.word	0x400204b8
 80064a4:	4002040f 	.word	0x4002040f
 80064a8:	10008200 	.word	0x10008200
 80064ac:	40020880 	.word	0x40020880

080064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d04a      	beq.n	800655c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d847      	bhi.n	800655c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a25      	ldr	r2, [pc, #148]	@ (8006568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d022      	beq.n	800651c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a24      	ldr	r2, [pc, #144]	@ (800656c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d01d      	beq.n	800651c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a22      	ldr	r2, [pc, #136]	@ (8006570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d018      	beq.n	800651c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a21      	ldr	r2, [pc, #132]	@ (8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00e      	beq.n	800651c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1e      	ldr	r2, [pc, #120]	@ (800657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d009      	beq.n	800651c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1c      	ldr	r2, [pc, #112]	@ (8006580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1b      	ldr	r2, [pc, #108]	@ (8006584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d101      	bne.n	8006520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006520:	2300      	movs	r3, #0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4b17      	ldr	r3, [pc, #92]	@ (8006588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a15      	ldr	r2, [pc, #84]	@ (800658c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006538:	671a      	str	r2, [r3, #112]	@ 0x70
 800653a:	e009      	b.n	8006550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4b14      	ldr	r3, [pc, #80]	@ (8006590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	461a      	mov	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a11      	ldr	r2, [pc, #68]	@ (8006594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800654e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3b01      	subs	r3, #1
 8006554:	2201      	movs	r2, #1
 8006556:	409a      	lsls	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800655c:	bf00      	nop
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	58025408 	.word	0x58025408
 800656c:	5802541c 	.word	0x5802541c
 8006570:	58025430 	.word	0x58025430
 8006574:	58025444 	.word	0x58025444
 8006578:	58025458 	.word	0x58025458
 800657c:	5802546c 	.word	0x5802546c
 8006580:	58025480 	.word	0x58025480
 8006584:	58025494 	.word	0x58025494
 8006588:	1600963f 	.word	0x1600963f
 800658c:	58025940 	.word	0x58025940
 8006590:	1000823f 	.word	0x1000823f
 8006594:	40020940 	.word	0x40020940

08006598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006598:	b480      	push	{r7}
 800659a:	b089      	sub	sp, #36	@ 0x24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80065a6:	4b89      	ldr	r3, [pc, #548]	@ (80067cc <HAL_GPIO_Init+0x234>)
 80065a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065aa:	e194      	b.n	80068d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	2101      	movs	r1, #1
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	fa01 f303 	lsl.w	r3, r1, r3
 80065b8:	4013      	ands	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 8186 	beq.w	80068d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d005      	beq.n	80065dc <HAL_GPIO_Init+0x44>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d130      	bne.n	800663e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	2203      	movs	r2, #3
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	43db      	mvns	r3, r3
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	4013      	ands	r3, r2
 80065f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	4313      	orrs	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006612:	2201      	movs	r2, #1
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	43db      	mvns	r3, r3
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	4013      	ands	r3, r2
 8006620:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	091b      	lsrs	r3, r3, #4
 8006628:	f003 0201 	and.w	r2, r3, #1
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	4313      	orrs	r3, r2
 8006636:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	2b03      	cmp	r3, #3
 8006648:	d017      	beq.n	800667a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	2203      	movs	r2, #3
 8006656:	fa02 f303 	lsl.w	r3, r2, r3
 800665a:	43db      	mvns	r3, r3
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	4013      	ands	r3, r2
 8006660:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	4313      	orrs	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d123      	bne.n	80066ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	08da      	lsrs	r2, r3, #3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3208      	adds	r2, #8
 800668e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	220f      	movs	r2, #15
 800669e:	fa02 f303 	lsl.w	r3, r2, r3
 80066a2:	43db      	mvns	r3, r3
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	4013      	ands	r3, r2
 80066a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	4313      	orrs	r3, r2
 80066be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	08da      	lsrs	r2, r3, #3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3208      	adds	r2, #8
 80066c8:	69b9      	ldr	r1, [r7, #24]
 80066ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	2203      	movs	r2, #3
 80066da:	fa02 f303 	lsl.w	r3, r2, r3
 80066de:	43db      	mvns	r3, r3
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	4013      	ands	r3, r2
 80066e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f003 0203 	and.w	r2, r3, #3
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 80e0 	beq.w	80068d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006710:	4b2f      	ldr	r3, [pc, #188]	@ (80067d0 <HAL_GPIO_Init+0x238>)
 8006712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006716:	4a2e      	ldr	r2, [pc, #184]	@ (80067d0 <HAL_GPIO_Init+0x238>)
 8006718:	f043 0302 	orr.w	r3, r3, #2
 800671c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006720:	4b2b      	ldr	r3, [pc, #172]	@ (80067d0 <HAL_GPIO_Init+0x238>)
 8006722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800672e:	4a29      	ldr	r2, [pc, #164]	@ (80067d4 <HAL_GPIO_Init+0x23c>)
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	089b      	lsrs	r3, r3, #2
 8006734:	3302      	adds	r3, #2
 8006736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800673a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	220f      	movs	r2, #15
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	43db      	mvns	r3, r3
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	4013      	ands	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a20      	ldr	r2, [pc, #128]	@ (80067d8 <HAL_GPIO_Init+0x240>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d052      	beq.n	8006800 <HAL_GPIO_Init+0x268>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a1f      	ldr	r2, [pc, #124]	@ (80067dc <HAL_GPIO_Init+0x244>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d031      	beq.n	80067c6 <HAL_GPIO_Init+0x22e>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1e      	ldr	r2, [pc, #120]	@ (80067e0 <HAL_GPIO_Init+0x248>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d02b      	beq.n	80067c2 <HAL_GPIO_Init+0x22a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a1d      	ldr	r2, [pc, #116]	@ (80067e4 <HAL_GPIO_Init+0x24c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d025      	beq.n	80067be <HAL_GPIO_Init+0x226>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a1c      	ldr	r2, [pc, #112]	@ (80067e8 <HAL_GPIO_Init+0x250>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d01f      	beq.n	80067ba <HAL_GPIO_Init+0x222>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a1b      	ldr	r2, [pc, #108]	@ (80067ec <HAL_GPIO_Init+0x254>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d019      	beq.n	80067b6 <HAL_GPIO_Init+0x21e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a1a      	ldr	r2, [pc, #104]	@ (80067f0 <HAL_GPIO_Init+0x258>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d013      	beq.n	80067b2 <HAL_GPIO_Init+0x21a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a19      	ldr	r2, [pc, #100]	@ (80067f4 <HAL_GPIO_Init+0x25c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00d      	beq.n	80067ae <HAL_GPIO_Init+0x216>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a18      	ldr	r2, [pc, #96]	@ (80067f8 <HAL_GPIO_Init+0x260>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d007      	beq.n	80067aa <HAL_GPIO_Init+0x212>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a17      	ldr	r2, [pc, #92]	@ (80067fc <HAL_GPIO_Init+0x264>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d101      	bne.n	80067a6 <HAL_GPIO_Init+0x20e>
 80067a2:	2309      	movs	r3, #9
 80067a4:	e02d      	b.n	8006802 <HAL_GPIO_Init+0x26a>
 80067a6:	230a      	movs	r3, #10
 80067a8:	e02b      	b.n	8006802 <HAL_GPIO_Init+0x26a>
 80067aa:	2308      	movs	r3, #8
 80067ac:	e029      	b.n	8006802 <HAL_GPIO_Init+0x26a>
 80067ae:	2307      	movs	r3, #7
 80067b0:	e027      	b.n	8006802 <HAL_GPIO_Init+0x26a>
 80067b2:	2306      	movs	r3, #6
 80067b4:	e025      	b.n	8006802 <HAL_GPIO_Init+0x26a>
 80067b6:	2305      	movs	r3, #5
 80067b8:	e023      	b.n	8006802 <HAL_GPIO_Init+0x26a>
 80067ba:	2304      	movs	r3, #4
 80067bc:	e021      	b.n	8006802 <HAL_GPIO_Init+0x26a>
 80067be:	2303      	movs	r3, #3
 80067c0:	e01f      	b.n	8006802 <HAL_GPIO_Init+0x26a>
 80067c2:	2302      	movs	r3, #2
 80067c4:	e01d      	b.n	8006802 <HAL_GPIO_Init+0x26a>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e01b      	b.n	8006802 <HAL_GPIO_Init+0x26a>
 80067ca:	bf00      	nop
 80067cc:	58000080 	.word	0x58000080
 80067d0:	58024400 	.word	0x58024400
 80067d4:	58000400 	.word	0x58000400
 80067d8:	58020000 	.word	0x58020000
 80067dc:	58020400 	.word	0x58020400
 80067e0:	58020800 	.word	0x58020800
 80067e4:	58020c00 	.word	0x58020c00
 80067e8:	58021000 	.word	0x58021000
 80067ec:	58021400 	.word	0x58021400
 80067f0:	58021800 	.word	0x58021800
 80067f4:	58021c00 	.word	0x58021c00
 80067f8:	58022000 	.word	0x58022000
 80067fc:	58022400 	.word	0x58022400
 8006800:	2300      	movs	r3, #0
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	f002 0203 	and.w	r2, r2, #3
 8006808:	0092      	lsls	r2, r2, #2
 800680a:	4093      	lsls	r3, r2
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	4313      	orrs	r3, r2
 8006810:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006812:	4938      	ldr	r1, [pc, #224]	@ (80068f4 <HAL_GPIO_Init+0x35c>)
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	089b      	lsrs	r3, r3, #2
 8006818:	3302      	adds	r3, #2
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	43db      	mvns	r3, r3
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	4013      	ands	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006846:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800684e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	43db      	mvns	r3, r3
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	4013      	ands	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	4313      	orrs	r3, r2
 8006872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006874:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	43db      	mvns	r3, r3
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	4013      	ands	r3, r2
 800688a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4313      	orrs	r3, r2
 800689e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	43db      	mvns	r3, r3
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	4013      	ands	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	3301      	adds	r3, #1
 80068d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f47f ae63 	bne.w	80065ac <HAL_GPIO_Init+0x14>
  }
}
 80068e6:	bf00      	nop
 80068e8:	bf00      	nop
 80068ea:	3724      	adds	r7, #36	@ 0x24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	58000400 	.word	0x58000400

080068f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	807b      	strh	r3, [r7, #2]
 8006904:	4613      	mov	r3, r2
 8006906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006908:	787b      	ldrb	r3, [r7, #1]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800690e:	887a      	ldrh	r2, [r7, #2]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006914:	e003      	b.n	800691e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006916:	887b      	ldrh	r3, [r7, #2]
 8006918:	041a      	lsls	r2, r3, #16
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	619a      	str	r2, [r3, #24]
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	4603      	mov	r3, r0
 8006932:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006938:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800693c:	88fb      	ldrh	r3, [r7, #6]
 800693e:	4013      	ands	r3, r2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006944:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800694e:	88fb      	ldrh	r3, [r7, #6]
 8006950:	4618      	mov	r0, r3
 8006952:	f7fa fa1b 	bl	8000d8c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006968:	4b19      	ldr	r3, [pc, #100]	@ (80069d0 <HAL_PWREx_ConfigSupply+0x70>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b04      	cmp	r3, #4
 8006972:	d00a      	beq.n	800698a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006974:	4b16      	ldr	r3, [pc, #88]	@ (80069d0 <HAL_PWREx_ConfigSupply+0x70>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	429a      	cmp	r2, r3
 8006980:	d001      	beq.n	8006986 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e01f      	b.n	80069c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	e01d      	b.n	80069c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800698a:	4b11      	ldr	r3, [pc, #68]	@ (80069d0 <HAL_PWREx_ConfigSupply+0x70>)
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f023 0207 	bic.w	r2, r3, #7
 8006992:	490f      	ldr	r1, [pc, #60]	@ (80069d0 <HAL_PWREx_ConfigSupply+0x70>)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4313      	orrs	r3, r2
 8006998:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800699a:	f7fb fbaf 	bl	80020fc <HAL_GetTick>
 800699e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069a0:	e009      	b.n	80069b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069a2:	f7fb fbab 	bl	80020fc <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069b0:	d901      	bls.n	80069b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e007      	b.n	80069c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069b6:	4b06      	ldr	r3, [pc, #24]	@ (80069d0 <HAL_PWREx_ConfigSupply+0x70>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069c2:	d1ee      	bne.n	80069a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	58024800 	.word	0x58024800

080069d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08c      	sub	sp, #48	@ 0x30
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d102      	bne.n	80069e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f000 bc48 	b.w	8007278 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8088 	beq.w	8006b06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069f6:	4b99      	ldr	r3, [pc, #612]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a00:	4b96      	ldr	r3, [pc, #600]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	2b10      	cmp	r3, #16
 8006a0a:	d007      	beq.n	8006a1c <HAL_RCC_OscConfig+0x48>
 8006a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0e:	2b18      	cmp	r3, #24
 8006a10:	d111      	bne.n	8006a36 <HAL_RCC_OscConfig+0x62>
 8006a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d10c      	bne.n	8006a36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d06d      	beq.n	8006b04 <HAL_RCC_OscConfig+0x130>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d169      	bne.n	8006b04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	f000 bc21 	b.w	8007278 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a3e:	d106      	bne.n	8006a4e <HAL_RCC_OscConfig+0x7a>
 8006a40:	4b86      	ldr	r3, [pc, #536]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a85      	ldr	r2, [pc, #532]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	e02e      	b.n	8006aac <HAL_RCC_OscConfig+0xd8>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10c      	bne.n	8006a70 <HAL_RCC_OscConfig+0x9c>
 8006a56:	4b81      	ldr	r3, [pc, #516]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a80      	ldr	r2, [pc, #512]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	4b7e      	ldr	r3, [pc, #504]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a7d      	ldr	r2, [pc, #500]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	e01d      	b.n	8006aac <HAL_RCC_OscConfig+0xd8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a78:	d10c      	bne.n	8006a94 <HAL_RCC_OscConfig+0xc0>
 8006a7a:	4b78      	ldr	r3, [pc, #480]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a77      	ldr	r2, [pc, #476]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	4b75      	ldr	r3, [pc, #468]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a74      	ldr	r2, [pc, #464]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	e00b      	b.n	8006aac <HAL_RCC_OscConfig+0xd8>
 8006a94:	4b71      	ldr	r3, [pc, #452]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a70      	ldr	r2, [pc, #448]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	4b6e      	ldr	r3, [pc, #440]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a6d      	ldr	r2, [pc, #436]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d013      	beq.n	8006adc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fb fb22 	bl	80020fc <HAL_GetTick>
 8006ab8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006abc:	f7fb fb1e 	bl	80020fc <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b64      	cmp	r3, #100	@ 0x64
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e3d4      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ace:	4b63      	ldr	r3, [pc, #396]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0f0      	beq.n	8006abc <HAL_RCC_OscConfig+0xe8>
 8006ada:	e014      	b.n	8006b06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006adc:	f7fb fb0e 	bl	80020fc <HAL_GetTick>
 8006ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae4:	f7fb fb0a 	bl	80020fc <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b64      	cmp	r3, #100	@ 0x64
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e3c0      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006af6:	4b59      	ldr	r3, [pc, #356]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1f0      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x110>
 8006b02:	e000      	b.n	8006b06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 80ca 	beq.w	8006ca8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b14:	4b51      	ldr	r3, [pc, #324]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <HAL_RCC_OscConfig+0x166>
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	2b18      	cmp	r3, #24
 8006b2e:	d156      	bne.n	8006bde <HAL_RCC_OscConfig+0x20a>
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d151      	bne.n	8006bde <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b3a:	4b48      	ldr	r3, [pc, #288]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d005      	beq.n	8006b52 <HAL_RCC_OscConfig+0x17e>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e392      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b52:	4b42      	ldr	r3, [pc, #264]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f023 0219 	bic.w	r2, r3, #25
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	493f      	ldr	r1, [pc, #252]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b64:	f7fb faca 	bl	80020fc <HAL_GetTick>
 8006b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b6c:	f7fb fac6 	bl	80020fc <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e37c      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b7e:	4b37      	ldr	r3, [pc, #220]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f0      	beq.n	8006b6c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8a:	f7fb fae7 	bl	800215c <HAL_GetREVID>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d817      	bhi.n	8006bc8 <HAL_RCC_OscConfig+0x1f4>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b40      	cmp	r3, #64	@ 0x40
 8006b9e:	d108      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x1de>
 8006ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bb0:	e07a      	b.n	8006ca8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	031b      	lsls	r3, r3, #12
 8006bc0:	4926      	ldr	r1, [pc, #152]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bc6:	e06f      	b.n	8006ca8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc8:	4b24      	ldr	r3, [pc, #144]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	061b      	lsls	r3, r3, #24
 8006bd6:	4921      	ldr	r1, [pc, #132]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bdc:	e064      	b.n	8006ca8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d047      	beq.n	8006c76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006be6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f023 0219 	bic.w	r2, r3, #25
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	491a      	ldr	r1, [pc, #104]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf8:	f7fb fa80 	bl	80020fc <HAL_GetTick>
 8006bfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bfe:	e008      	b.n	8006c12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c00:	f7fb fa7c 	bl	80020fc <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e332      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c12:	4b12      	ldr	r3, [pc, #72]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0f0      	beq.n	8006c00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c1e:	f7fb fa9d 	bl	800215c <HAL_GetREVID>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d819      	bhi.n	8006c60 <HAL_RCC_OscConfig+0x28c>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	2b40      	cmp	r3, #64	@ 0x40
 8006c32:	d108      	bne.n	8006c46 <HAL_RCC_OscConfig+0x272>
 8006c34:	4b09      	ldr	r3, [pc, #36]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006c3c:	4a07      	ldr	r2, [pc, #28]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c42:	6053      	str	r3, [r2, #4]
 8006c44:	e030      	b.n	8006ca8 <HAL_RCC_OscConfig+0x2d4>
 8006c46:	4b05      	ldr	r3, [pc, #20]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	031b      	lsls	r3, r3, #12
 8006c54:	4901      	ldr	r1, [pc, #4]	@ (8006c5c <HAL_RCC_OscConfig+0x288>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	604b      	str	r3, [r1, #4]
 8006c5a:	e025      	b.n	8006ca8 <HAL_RCC_OscConfig+0x2d4>
 8006c5c:	58024400 	.word	0x58024400
 8006c60:	4b9a      	ldr	r3, [pc, #616]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	061b      	lsls	r3, r3, #24
 8006c6e:	4997      	ldr	r1, [pc, #604]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	604b      	str	r3, [r1, #4]
 8006c74:	e018      	b.n	8006ca8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c76:	4b95      	ldr	r3, [pc, #596]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a94      	ldr	r2, [pc, #592]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006c7c:	f023 0301 	bic.w	r3, r3, #1
 8006c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c82:	f7fb fa3b 	bl	80020fc <HAL_GetTick>
 8006c86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c88:	e008      	b.n	8006c9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c8a:	f7fb fa37 	bl	80020fc <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d901      	bls.n	8006c9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e2ed      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c9c:	4b8b      	ldr	r3, [pc, #556]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1f0      	bne.n	8006c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80a9 	beq.w	8006e08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cb6:	4b85      	ldr	r3, [pc, #532]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cc0:	4b82      	ldr	r3, [pc, #520]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d007      	beq.n	8006cdc <HAL_RCC_OscConfig+0x308>
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	2b18      	cmp	r3, #24
 8006cd0:	d13a      	bne.n	8006d48 <HAL_RCC_OscConfig+0x374>
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f003 0303 	and.w	r3, r3, #3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d135      	bne.n	8006d48 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x320>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	2b80      	cmp	r3, #128	@ 0x80
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e2c1      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cf4:	f7fb fa32 	bl	800215c <HAL_GetREVID>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d817      	bhi.n	8006d32 <HAL_RCC_OscConfig+0x35e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	d108      	bne.n	8006d1c <HAL_RCC_OscConfig+0x348>
 8006d0a:	4b70      	ldr	r3, [pc, #448]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006d12:	4a6e      	ldr	r2, [pc, #440]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006d14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d18:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d1a:	e075      	b.n	8006e08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d1c:	4b6b      	ldr	r3, [pc, #428]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	069b      	lsls	r3, r3, #26
 8006d2a:	4968      	ldr	r1, [pc, #416]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d30:	e06a      	b.n	8006e08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d32:	4b66      	ldr	r3, [pc, #408]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	061b      	lsls	r3, r3, #24
 8006d40:	4962      	ldr	r1, [pc, #392]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d46:	e05f      	b.n	8006e08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d042      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006d50:	4b5e      	ldr	r3, [pc, #376]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a5d      	ldr	r2, [pc, #372]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5c:	f7fb f9ce 	bl	80020fc <HAL_GetTick>
 8006d60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006d64:	f7fb f9ca 	bl	80020fc <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e280      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d76:	4b55      	ldr	r3, [pc, #340]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0f0      	beq.n	8006d64 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d82:	f7fb f9eb 	bl	800215c <HAL_GetREVID>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d817      	bhi.n	8006dc0 <HAL_RCC_OscConfig+0x3ec>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d108      	bne.n	8006daa <HAL_RCC_OscConfig+0x3d6>
 8006d98:	4b4c      	ldr	r3, [pc, #304]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006da0:	4a4a      	ldr	r2, [pc, #296]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006da2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006da6:	6053      	str	r3, [r2, #4]
 8006da8:	e02e      	b.n	8006e08 <HAL_RCC_OscConfig+0x434>
 8006daa:	4b48      	ldr	r3, [pc, #288]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	069b      	lsls	r3, r3, #26
 8006db8:	4944      	ldr	r1, [pc, #272]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	604b      	str	r3, [r1, #4]
 8006dbe:	e023      	b.n	8006e08 <HAL_RCC_OscConfig+0x434>
 8006dc0:	4b42      	ldr	r3, [pc, #264]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	061b      	lsls	r3, r3, #24
 8006dce:	493f      	ldr	r1, [pc, #252]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60cb      	str	r3, [r1, #12]
 8006dd4:	e018      	b.n	8006e08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a3c      	ldr	r2, [pc, #240]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006ddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de2:	f7fb f98b 	bl	80020fc <HAL_GetTick>
 8006de6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006de8:	e008      	b.n	8006dfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006dea:	f7fb f987 	bl	80020fc <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e23d      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006dfc:	4b33      	ldr	r3, [pc, #204]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1f0      	bne.n	8006dea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d036      	beq.n	8006e82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d019      	beq.n	8006e50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e20:	4a2a      	ldr	r2, [pc, #168]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006e22:	f043 0301 	orr.w	r3, r3, #1
 8006e26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e28:	f7fb f968 	bl	80020fc <HAL_GetTick>
 8006e2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e30:	f7fb f964 	bl	80020fc <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e21a      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e42:	4b22      	ldr	r3, [pc, #136]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0f0      	beq.n	8006e30 <HAL_RCC_OscConfig+0x45c>
 8006e4e:	e018      	b.n	8006e82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e50:	4b1e      	ldr	r3, [pc, #120]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e54:	4a1d      	ldr	r2, [pc, #116]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006e56:	f023 0301 	bic.w	r3, r3, #1
 8006e5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e5c:	f7fb f94e 	bl	80020fc <HAL_GetTick>
 8006e60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e64:	f7fb f94a 	bl	80020fc <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e200      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e76:	4b15      	ldr	r3, [pc, #84]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f0      	bne.n	8006e64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0320 	and.w	r3, r3, #32
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d039      	beq.n	8006f02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d01c      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006e9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006ea0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ea2:	f7fb f92b 	bl	80020fc <HAL_GetTick>
 8006ea6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eaa:	f7fb f927 	bl	80020fc <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e1dd      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ebc:	4b03      	ldr	r3, [pc, #12]	@ (8006ecc <HAL_RCC_OscConfig+0x4f8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0f0      	beq.n	8006eaa <HAL_RCC_OscConfig+0x4d6>
 8006ec8:	e01b      	b.n	8006f02 <HAL_RCC_OscConfig+0x52e>
 8006eca:	bf00      	nop
 8006ecc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ed0:	4b9b      	ldr	r3, [pc, #620]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a9a      	ldr	r2, [pc, #616]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006ed6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006eda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006edc:	f7fb f90e 	bl	80020fc <HAL_GetTick>
 8006ee0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ee4:	f7fb f90a 	bl	80020fc <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e1c0      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ef6:	4b92      	ldr	r3, [pc, #584]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f0      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8081 	beq.w	8007012 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f10:	4b8c      	ldr	r3, [pc, #560]	@ (8007144 <HAL_RCC_OscConfig+0x770>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a8b      	ldr	r2, [pc, #556]	@ (8007144 <HAL_RCC_OscConfig+0x770>)
 8006f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f1c:	f7fb f8ee 	bl	80020fc <HAL_GetTick>
 8006f20:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f24:	f7fb f8ea 	bl	80020fc <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b64      	cmp	r3, #100	@ 0x64
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e1a0      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f36:	4b83      	ldr	r3, [pc, #524]	@ (8007144 <HAL_RCC_OscConfig+0x770>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0f0      	beq.n	8006f24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d106      	bne.n	8006f58 <HAL_RCC_OscConfig+0x584>
 8006f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f4e:	4a7c      	ldr	r2, [pc, #496]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006f50:	f043 0301 	orr.w	r3, r3, #1
 8006f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f56:	e02d      	b.n	8006fb4 <HAL_RCC_OscConfig+0x5e0>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10c      	bne.n	8006f7a <HAL_RCC_OscConfig+0x5a6>
 8006f60:	4b77      	ldr	r3, [pc, #476]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f64:	4a76      	ldr	r2, [pc, #472]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006f66:	f023 0301 	bic.w	r3, r3, #1
 8006f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f6c:	4b74      	ldr	r3, [pc, #464]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f70:	4a73      	ldr	r2, [pc, #460]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006f72:	f023 0304 	bic.w	r3, r3, #4
 8006f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f78:	e01c      	b.n	8006fb4 <HAL_RCC_OscConfig+0x5e0>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	2b05      	cmp	r3, #5
 8006f80:	d10c      	bne.n	8006f9c <HAL_RCC_OscConfig+0x5c8>
 8006f82:	4b6f      	ldr	r3, [pc, #444]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f86:	4a6e      	ldr	r2, [pc, #440]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006f88:	f043 0304 	orr.w	r3, r3, #4
 8006f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f8e:	4b6c      	ldr	r3, [pc, #432]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f92:	4a6b      	ldr	r2, [pc, #428]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006f94:	f043 0301 	orr.w	r3, r3, #1
 8006f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f9a:	e00b      	b.n	8006fb4 <HAL_RCC_OscConfig+0x5e0>
 8006f9c:	4b68      	ldr	r3, [pc, #416]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fa0:	4a67      	ldr	r2, [pc, #412]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006fa2:	f023 0301 	bic.w	r3, r3, #1
 8006fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fa8:	4b65      	ldr	r3, [pc, #404]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fac:	4a64      	ldr	r2, [pc, #400]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006fae:	f023 0304 	bic.w	r3, r3, #4
 8006fb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d015      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fbc:	f7fb f89e 	bl	80020fc <HAL_GetTick>
 8006fc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fc2:	e00a      	b.n	8006fda <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fc4:	f7fb f89a 	bl	80020fc <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e14e      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fda:	4b59      	ldr	r3, [pc, #356]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0ee      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x5f0>
 8006fe6:	e014      	b.n	8007012 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fe8:	f7fb f888 	bl	80020fc <HAL_GetTick>
 8006fec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006fee:	e00a      	b.n	8007006 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff0:	f7fb f884 	bl	80020fc <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e138      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007006:	4b4e      	ldr	r3, [pc, #312]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8007008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1ee      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 812d 	beq.w	8007276 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800701c:	4b48      	ldr	r3, [pc, #288]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007024:	2b18      	cmp	r3, #24
 8007026:	f000 80bd 	beq.w	80071a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702e:	2b02      	cmp	r3, #2
 8007030:	f040 809e 	bne.w	8007170 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007034:	4b42      	ldr	r3, [pc, #264]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a41      	ldr	r2, [pc, #260]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 800703a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800703e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007040:	f7fb f85c 	bl	80020fc <HAL_GetTick>
 8007044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007048:	f7fb f858 	bl	80020fc <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e10e      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800705a:	4b39      	ldr	r3, [pc, #228]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1f0      	bne.n	8007048 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007066:	4b36      	ldr	r3, [pc, #216]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8007068:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800706a:	4b37      	ldr	r3, [pc, #220]	@ (8007148 <HAL_RCC_OscConfig+0x774>)
 800706c:	4013      	ands	r3, r2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007076:	0112      	lsls	r2, r2, #4
 8007078:	430a      	orrs	r2, r1
 800707a:	4931      	ldr	r1, [pc, #196]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 800707c:	4313      	orrs	r3, r2
 800707e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007084:	3b01      	subs	r3, #1
 8007086:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800708e:	3b01      	subs	r3, #1
 8007090:	025b      	lsls	r3, r3, #9
 8007092:	b29b      	uxth	r3, r3
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709a:	3b01      	subs	r3, #1
 800709c:	041b      	lsls	r3, r3, #16
 800709e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a8:	3b01      	subs	r3, #1
 80070aa:	061b      	lsls	r3, r3, #24
 80070ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80070b0:	4923      	ldr	r1, [pc, #140]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80070b6:	4b22      	ldr	r3, [pc, #136]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 80070b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ba:	4a21      	ldr	r2, [pc, #132]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 80070bc:	f023 0301 	bic.w	r3, r3, #1
 80070c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070c2:	4b1f      	ldr	r3, [pc, #124]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 80070c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070c6:	4b21      	ldr	r3, [pc, #132]	@ (800714c <HAL_RCC_OscConfig+0x778>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80070ce:	00d2      	lsls	r2, r2, #3
 80070d0:	491b      	ldr	r1, [pc, #108]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80070d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 80070d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070da:	f023 020c 	bic.w	r2, r3, #12
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e2:	4917      	ldr	r1, [pc, #92]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80070e8:	4b15      	ldr	r3, [pc, #84]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 80070ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ec:	f023 0202 	bic.w	r2, r3, #2
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f4:	4912      	ldr	r1, [pc, #72]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80070fa:	4b11      	ldr	r3, [pc, #68]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fe:	4a10      	ldr	r2, [pc, #64]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8007100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007104:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007106:	4b0e      	ldr	r3, [pc, #56]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8007108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710a:	4a0d      	ldr	r2, [pc, #52]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 800710c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007110:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007112:	4b0b      	ldr	r3, [pc, #44]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8007114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007116:	4a0a      	ldr	r2, [pc, #40]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8007118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800711c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800711e:	4b08      	ldr	r3, [pc, #32]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	4a07      	ldr	r2, [pc, #28]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8007124:	f043 0301 	orr.w	r3, r3, #1
 8007128:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800712a:	4b05      	ldr	r3, [pc, #20]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a04      	ldr	r2, [pc, #16]	@ (8007140 <HAL_RCC_OscConfig+0x76c>)
 8007130:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007136:	f7fa ffe1 	bl	80020fc <HAL_GetTick>
 800713a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800713c:	e011      	b.n	8007162 <HAL_RCC_OscConfig+0x78e>
 800713e:	bf00      	nop
 8007140:	58024400 	.word	0x58024400
 8007144:	58024800 	.word	0x58024800
 8007148:	fffffc0c 	.word	0xfffffc0c
 800714c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007150:	f7fa ffd4 	bl	80020fc <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e08a      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007162:	4b47      	ldr	r3, [pc, #284]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0f0      	beq.n	8007150 <HAL_RCC_OscConfig+0x77c>
 800716e:	e082      	b.n	8007276 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007170:	4b43      	ldr	r3, [pc, #268]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a42      	ldr	r2, [pc, #264]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 8007176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800717a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800717c:	f7fa ffbe 	bl	80020fc <HAL_GetTick>
 8007180:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007182:	e008      	b.n	8007196 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007184:	f7fa ffba 	bl	80020fc <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e070      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007196:	4b3a      	ldr	r3, [pc, #232]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1f0      	bne.n	8007184 <HAL_RCC_OscConfig+0x7b0>
 80071a2:	e068      	b.n	8007276 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80071a4:	4b36      	ldr	r3, [pc, #216]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 80071a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80071aa:	4b35      	ldr	r3, [pc, #212]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d031      	beq.n	800721c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f003 0203 	and.w	r2, r3, #3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d12a      	bne.n	800721c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	091b      	lsrs	r3, r3, #4
 80071ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d122      	bne.n	800721c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d11a      	bne.n	800721c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	0a5b      	lsrs	r3, r3, #9
 80071ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d111      	bne.n	800721c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	0c1b      	lsrs	r3, r3, #16
 80071fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007204:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007206:	429a      	cmp	r2, r3
 8007208:	d108      	bne.n	800721c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	0e1b      	lsrs	r3, r3, #24
 800720e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007216:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007218:	429a      	cmp	r2, r3
 800721a:	d001      	beq.n	8007220 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e02b      	b.n	8007278 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007220:	4b17      	ldr	r3, [pc, #92]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 8007222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007224:	08db      	lsrs	r3, r3, #3
 8007226:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800722a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	429a      	cmp	r2, r3
 8007234:	d01f      	beq.n	8007276 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007236:	4b12      	ldr	r3, [pc, #72]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 8007238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723a:	4a11      	ldr	r2, [pc, #68]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 800723c:	f023 0301 	bic.w	r3, r3, #1
 8007240:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007242:	f7fa ff5b 	bl	80020fc <HAL_GetTick>
 8007246:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007248:	bf00      	nop
 800724a:	f7fa ff57 	bl	80020fc <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	4293      	cmp	r3, r2
 8007254:	d0f9      	beq.n	800724a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007256:	4b0a      	ldr	r3, [pc, #40]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 8007258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800725a:	4b0a      	ldr	r3, [pc, #40]	@ (8007284 <HAL_RCC_OscConfig+0x8b0>)
 800725c:	4013      	ands	r3, r2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007262:	00d2      	lsls	r2, r2, #3
 8007264:	4906      	ldr	r1, [pc, #24]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 8007266:	4313      	orrs	r3, r2
 8007268:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800726a:	4b05      	ldr	r3, [pc, #20]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 800726c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726e:	4a04      	ldr	r2, [pc, #16]	@ (8007280 <HAL_RCC_OscConfig+0x8ac>)
 8007270:	f043 0301 	orr.w	r3, r3, #1
 8007274:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3730      	adds	r7, #48	@ 0x30
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	58024400 	.word	0x58024400
 8007284:	ffff0007 	.word	0xffff0007

08007288 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e19c      	b.n	80075d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800729c:	4b8a      	ldr	r3, [pc, #552]	@ (80074c8 <HAL_RCC_ClockConfig+0x240>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 030f 	and.w	r3, r3, #15
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d910      	bls.n	80072cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072aa:	4b87      	ldr	r3, [pc, #540]	@ (80074c8 <HAL_RCC_ClockConfig+0x240>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f023 020f 	bic.w	r2, r3, #15
 80072b2:	4985      	ldr	r1, [pc, #532]	@ (80074c8 <HAL_RCC_ClockConfig+0x240>)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ba:	4b83      	ldr	r3, [pc, #524]	@ (80074c8 <HAL_RCC_ClockConfig+0x240>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d001      	beq.n	80072cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e184      	b.n	80075d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d010      	beq.n	80072fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	4b7b      	ldr	r3, [pc, #492]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d908      	bls.n	80072fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072e8:	4b78      	ldr	r3, [pc, #480]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	4975      	ldr	r1, [pc, #468]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d010      	beq.n	8007328 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	695a      	ldr	r2, [r3, #20]
 800730a:	4b70      	ldr	r3, [pc, #448]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007312:	429a      	cmp	r2, r3
 8007314:	d908      	bls.n	8007328 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007316:	4b6d      	ldr	r3, [pc, #436]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	496a      	ldr	r1, [pc, #424]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 8007324:	4313      	orrs	r3, r2
 8007326:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0310 	and.w	r3, r3, #16
 8007330:	2b00      	cmp	r3, #0
 8007332:	d010      	beq.n	8007356 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699a      	ldr	r2, [r3, #24]
 8007338:	4b64      	ldr	r3, [pc, #400]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007340:	429a      	cmp	r2, r3
 8007342:	d908      	bls.n	8007356 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007344:	4b61      	ldr	r3, [pc, #388]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	495e      	ldr	r1, [pc, #376]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 8007352:	4313      	orrs	r3, r2
 8007354:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	d010      	beq.n	8007384 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	69da      	ldr	r2, [r3, #28]
 8007366:	4b59      	ldr	r3, [pc, #356]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800736e:	429a      	cmp	r2, r3
 8007370:	d908      	bls.n	8007384 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007372:	4b56      	ldr	r3, [pc, #344]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	4953      	ldr	r1, [pc, #332]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 8007380:	4313      	orrs	r3, r2
 8007382:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d010      	beq.n	80073b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	4b4d      	ldr	r3, [pc, #308]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	f003 030f 	and.w	r3, r3, #15
 800739c:	429a      	cmp	r2, r3
 800739e:	d908      	bls.n	80073b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073a0:	4b4a      	ldr	r3, [pc, #296]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	f023 020f 	bic.w	r2, r3, #15
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	4947      	ldr	r1, [pc, #284]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d055      	beq.n	800746a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80073be:	4b43      	ldr	r3, [pc, #268]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	4940      	ldr	r1, [pc, #256]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d107      	bne.n	80073e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073d8:	4b3c      	ldr	r3, [pc, #240]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d121      	bne.n	8007428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e0f6      	b.n	80075d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d107      	bne.n	8007400 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073f0:	4b36      	ldr	r3, [pc, #216]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d115      	bne.n	8007428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e0ea      	b.n	80075d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d107      	bne.n	8007418 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007408:	4b30      	ldr	r3, [pc, #192]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007410:	2b00      	cmp	r3, #0
 8007412:	d109      	bne.n	8007428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e0de      	b.n	80075d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007418:	4b2c      	ldr	r3, [pc, #176]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e0d6      	b.n	80075d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007428:	4b28      	ldr	r3, [pc, #160]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f023 0207 	bic.w	r2, r3, #7
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	4925      	ldr	r1, [pc, #148]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 8007436:	4313      	orrs	r3, r2
 8007438:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800743a:	f7fa fe5f 	bl	80020fc <HAL_GetTick>
 800743e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007440:	e00a      	b.n	8007458 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007442:	f7fa fe5b 	bl	80020fc <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007450:	4293      	cmp	r3, r2
 8007452:	d901      	bls.n	8007458 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e0be      	b.n	80075d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007458:	4b1c      	ldr	r3, [pc, #112]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	429a      	cmp	r2, r3
 8007468:	d1eb      	bne.n	8007442 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d010      	beq.n	8007498 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	4b14      	ldr	r3, [pc, #80]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	429a      	cmp	r2, r3
 8007484:	d208      	bcs.n	8007498 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007486:	4b11      	ldr	r3, [pc, #68]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	f023 020f 	bic.w	r2, r3, #15
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	490e      	ldr	r1, [pc, #56]	@ (80074cc <HAL_RCC_ClockConfig+0x244>)
 8007494:	4313      	orrs	r3, r2
 8007496:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007498:	4b0b      	ldr	r3, [pc, #44]	@ (80074c8 <HAL_RCC_ClockConfig+0x240>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 030f 	and.w	r3, r3, #15
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d214      	bcs.n	80074d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074a6:	4b08      	ldr	r3, [pc, #32]	@ (80074c8 <HAL_RCC_ClockConfig+0x240>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f023 020f 	bic.w	r2, r3, #15
 80074ae:	4906      	ldr	r1, [pc, #24]	@ (80074c8 <HAL_RCC_ClockConfig+0x240>)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074b6:	4b04      	ldr	r3, [pc, #16]	@ (80074c8 <HAL_RCC_ClockConfig+0x240>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d005      	beq.n	80074d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e086      	b.n	80075d6 <HAL_RCC_ClockConfig+0x34e>
 80074c8:	52002000 	.word	0x52002000
 80074cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d010      	beq.n	80074fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691a      	ldr	r2, [r3, #16]
 80074e0:	4b3f      	ldr	r3, [pc, #252]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d208      	bcs.n	80074fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074ec:	4b3c      	ldr	r3, [pc, #240]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	4939      	ldr	r1, [pc, #228]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0308 	and.w	r3, r3, #8
 8007506:	2b00      	cmp	r3, #0
 8007508:	d010      	beq.n	800752c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	695a      	ldr	r2, [r3, #20]
 800750e:	4b34      	ldr	r3, [pc, #208]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007516:	429a      	cmp	r2, r3
 8007518:	d208      	bcs.n	800752c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800751a:	4b31      	ldr	r3, [pc, #196]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	492e      	ldr	r1, [pc, #184]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 8007528:	4313      	orrs	r3, r2
 800752a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0310 	and.w	r3, r3, #16
 8007534:	2b00      	cmp	r3, #0
 8007536:	d010      	beq.n	800755a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699a      	ldr	r2, [r3, #24]
 800753c:	4b28      	ldr	r3, [pc, #160]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007544:	429a      	cmp	r2, r3
 8007546:	d208      	bcs.n	800755a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007548:	4b25      	ldr	r3, [pc, #148]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	4922      	ldr	r1, [pc, #136]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 8007556:	4313      	orrs	r3, r2
 8007558:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b00      	cmp	r3, #0
 8007564:	d010      	beq.n	8007588 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69da      	ldr	r2, [r3, #28]
 800756a:	4b1d      	ldr	r3, [pc, #116]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007572:	429a      	cmp	r2, r3
 8007574:	d208      	bcs.n	8007588 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007576:	4b1a      	ldr	r3, [pc, #104]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	4917      	ldr	r1, [pc, #92]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 8007584:	4313      	orrs	r3, r2
 8007586:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007588:	f000 f834 	bl	80075f4 <HAL_RCC_GetSysClockFreq>
 800758c:	4602      	mov	r2, r0
 800758e:	4b14      	ldr	r3, [pc, #80]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	0a1b      	lsrs	r3, r3, #8
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	4912      	ldr	r1, [pc, #72]	@ (80075e4 <HAL_RCC_ClockConfig+0x35c>)
 800759a:	5ccb      	ldrb	r3, [r1, r3]
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
 80075a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075a6:	4b0e      	ldr	r3, [pc, #56]	@ (80075e0 <HAL_RCC_ClockConfig+0x358>)
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	4a0d      	ldr	r2, [pc, #52]	@ (80075e4 <HAL_RCC_ClockConfig+0x35c>)
 80075b0:	5cd3      	ldrb	r3, [r2, r3]
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
 80075bc:	4a0a      	ldr	r2, [pc, #40]	@ (80075e8 <HAL_RCC_ClockConfig+0x360>)
 80075be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075c0:	4a0a      	ldr	r2, [pc, #40]	@ (80075ec <HAL_RCC_ClockConfig+0x364>)
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80075c6:	4b0a      	ldr	r3, [pc, #40]	@ (80075f0 <HAL_RCC_ClockConfig+0x368>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7f9 fdba 	bl	8001144 <HAL_InitTick>
 80075d0:	4603      	mov	r3, r0
 80075d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	58024400 	.word	0x58024400
 80075e4:	0801404c 	.word	0x0801404c
 80075e8:	24000004 	.word	0x24000004
 80075ec:	24000000 	.word	0x24000000
 80075f0:	24000008 	.word	0x24000008

080075f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b089      	sub	sp, #36	@ 0x24
 80075f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075fa:	4bb3      	ldr	r3, [pc, #716]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007602:	2b18      	cmp	r3, #24
 8007604:	f200 8155 	bhi.w	80078b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007608:	a201      	add	r2, pc, #4	@ (adr r2, 8007610 <HAL_RCC_GetSysClockFreq+0x1c>)
 800760a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760e:	bf00      	nop
 8007610:	08007675 	.word	0x08007675
 8007614:	080078b3 	.word	0x080078b3
 8007618:	080078b3 	.word	0x080078b3
 800761c:	080078b3 	.word	0x080078b3
 8007620:	080078b3 	.word	0x080078b3
 8007624:	080078b3 	.word	0x080078b3
 8007628:	080078b3 	.word	0x080078b3
 800762c:	080078b3 	.word	0x080078b3
 8007630:	0800769b 	.word	0x0800769b
 8007634:	080078b3 	.word	0x080078b3
 8007638:	080078b3 	.word	0x080078b3
 800763c:	080078b3 	.word	0x080078b3
 8007640:	080078b3 	.word	0x080078b3
 8007644:	080078b3 	.word	0x080078b3
 8007648:	080078b3 	.word	0x080078b3
 800764c:	080078b3 	.word	0x080078b3
 8007650:	080076a1 	.word	0x080076a1
 8007654:	080078b3 	.word	0x080078b3
 8007658:	080078b3 	.word	0x080078b3
 800765c:	080078b3 	.word	0x080078b3
 8007660:	080078b3 	.word	0x080078b3
 8007664:	080078b3 	.word	0x080078b3
 8007668:	080078b3 	.word	0x080078b3
 800766c:	080078b3 	.word	0x080078b3
 8007670:	080076a7 	.word	0x080076a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007674:	4b94      	ldr	r3, [pc, #592]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0320 	and.w	r3, r3, #32
 800767c:	2b00      	cmp	r3, #0
 800767e:	d009      	beq.n	8007694 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007680:	4b91      	ldr	r3, [pc, #580]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	08db      	lsrs	r3, r3, #3
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	4a90      	ldr	r2, [pc, #576]	@ (80078cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800768c:	fa22 f303 	lsr.w	r3, r2, r3
 8007690:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007692:	e111      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007694:	4b8d      	ldr	r3, [pc, #564]	@ (80078cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007696:	61bb      	str	r3, [r7, #24]
      break;
 8007698:	e10e      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800769a:	4b8d      	ldr	r3, [pc, #564]	@ (80078d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800769c:	61bb      	str	r3, [r7, #24]
      break;
 800769e:	e10b      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80076a0:	4b8c      	ldr	r3, [pc, #560]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80076a2:	61bb      	str	r3, [r7, #24]
      break;
 80076a4:	e108      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076a6:	4b88      	ldr	r3, [pc, #544]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80076b0:	4b85      	ldr	r3, [pc, #532]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b4:	091b      	lsrs	r3, r3, #4
 80076b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076bc:	4b82      	ldr	r3, [pc, #520]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80076c6:	4b80      	ldr	r3, [pc, #512]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ca:	08db      	lsrs	r3, r3, #3
 80076cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	fb02 f303 	mul.w	r3, r2, r3
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 80e1 	beq.w	80078ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	f000 8083 	beq.w	80077f8 <HAL_RCC_GetSysClockFreq+0x204>
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	f200 80a1 	bhi.w	800783c <HAL_RCC_GetSysClockFreq+0x248>
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <HAL_RCC_GetSysClockFreq+0x114>
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d056      	beq.n	80077b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007706:	e099      	b.n	800783c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007708:	4b6f      	ldr	r3, [pc, #444]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d02d      	beq.n	8007770 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007714:	4b6c      	ldr	r3, [pc, #432]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	08db      	lsrs	r3, r3, #3
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	4a6b      	ldr	r2, [pc, #428]	@ (80078cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007720:	fa22 f303 	lsr.w	r3, r2, r3
 8007724:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773e:	4b62      	ldr	r3, [pc, #392]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007752:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80078d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800776e:	e087      	b.n	8007880 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80078dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007782:	4b51      	ldr	r3, [pc, #324]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	ed97 6a02 	vldr	s12, [r7, #8]
 8007796:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80078d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077b2:	e065      	b.n	8007880 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80078e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80077c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c6:	4b40      	ldr	r3, [pc, #256]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80078d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077f6:	e043      	b.n	8007880 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80078e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780a:	4b2f      	ldr	r3, [pc, #188]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800780c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781a:	ed97 6a02 	vldr	s12, [r7, #8]
 800781e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80078d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800783a:	e021      	b.n	8007880 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80078e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800784a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784e:	4b1e      	ldr	r3, [pc, #120]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007862:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80078d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800787e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007880:	4b11      	ldr	r3, [pc, #68]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007884:	0a5b      	lsrs	r3, r3, #9
 8007886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800788a:	3301      	adds	r3, #1
 800788c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	ee07 3a90 	vmov	s15, r3
 8007894:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007898:	edd7 6a07 	vldr	s13, [r7, #28]
 800789c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078a4:	ee17 3a90 	vmov	r3, s15
 80078a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80078aa:	e005      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61bb      	str	r3, [r7, #24]
      break;
 80078b0:	e002      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80078b2:	4b07      	ldr	r3, [pc, #28]	@ (80078d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078b4:	61bb      	str	r3, [r7, #24]
      break;
 80078b6:	bf00      	nop
  }

  return sysclockfreq;
 80078b8:	69bb      	ldr	r3, [r7, #24]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3724      	adds	r7, #36	@ 0x24
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	58024400 	.word	0x58024400
 80078cc:	03d09000 	.word	0x03d09000
 80078d0:	003d0900 	.word	0x003d0900
 80078d4:	007a1200 	.word	0x007a1200
 80078d8:	46000000 	.word	0x46000000
 80078dc:	4c742400 	.word	0x4c742400
 80078e0:	4a742400 	.word	0x4a742400
 80078e4:	4af42400 	.word	0x4af42400

080078e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078ee:	f7ff fe81 	bl	80075f4 <HAL_RCC_GetSysClockFreq>
 80078f2:	4602      	mov	r2, r0
 80078f4:	4b10      	ldr	r3, [pc, #64]	@ (8007938 <HAL_RCC_GetHCLKFreq+0x50>)
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	0a1b      	lsrs	r3, r3, #8
 80078fa:	f003 030f 	and.w	r3, r3, #15
 80078fe:	490f      	ldr	r1, [pc, #60]	@ (800793c <HAL_RCC_GetHCLKFreq+0x54>)
 8007900:	5ccb      	ldrb	r3, [r1, r3]
 8007902:	f003 031f 	and.w	r3, r3, #31
 8007906:	fa22 f303 	lsr.w	r3, r2, r3
 800790a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800790c:	4b0a      	ldr	r3, [pc, #40]	@ (8007938 <HAL_RCC_GetHCLKFreq+0x50>)
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	f003 030f 	and.w	r3, r3, #15
 8007914:	4a09      	ldr	r2, [pc, #36]	@ (800793c <HAL_RCC_GetHCLKFreq+0x54>)
 8007916:	5cd3      	ldrb	r3, [r2, r3]
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	fa22 f303 	lsr.w	r3, r2, r3
 8007922:	4a07      	ldr	r2, [pc, #28]	@ (8007940 <HAL_RCC_GetHCLKFreq+0x58>)
 8007924:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007926:	4a07      	ldr	r2, [pc, #28]	@ (8007944 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800792c:	4b04      	ldr	r3, [pc, #16]	@ (8007940 <HAL_RCC_GetHCLKFreq+0x58>)
 800792e:	681b      	ldr	r3, [r3, #0]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	58024400 	.word	0x58024400
 800793c:	0801404c 	.word	0x0801404c
 8007940:	24000004 	.word	0x24000004
 8007944:	24000000 	.word	0x24000000

08007948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800794c:	f7ff ffcc 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 8007950:	4602      	mov	r2, r0
 8007952:	4b06      	ldr	r3, [pc, #24]	@ (800796c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	091b      	lsrs	r3, r3, #4
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	4904      	ldr	r1, [pc, #16]	@ (8007970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800795e:	5ccb      	ldrb	r3, [r1, r3]
 8007960:	f003 031f 	and.w	r3, r3, #31
 8007964:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007968:	4618      	mov	r0, r3
 800796a:	bd80      	pop	{r7, pc}
 800796c:	58024400 	.word	0x58024400
 8007970:	0801404c 	.word	0x0801404c

08007974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007978:	f7ff ffb6 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 800797c:	4602      	mov	r2, r0
 800797e:	4b06      	ldr	r3, [pc, #24]	@ (8007998 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	0a1b      	lsrs	r3, r3, #8
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	4904      	ldr	r1, [pc, #16]	@ (800799c <HAL_RCC_GetPCLK2Freq+0x28>)
 800798a:	5ccb      	ldrb	r3, [r1, r3]
 800798c:	f003 031f 	and.w	r3, r3, #31
 8007990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007994:	4618      	mov	r0, r3
 8007996:	bd80      	pop	{r7, pc}
 8007998:	58024400 	.word	0x58024400
 800799c:	0801404c 	.word	0x0801404c

080079a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	223f      	movs	r2, #63	@ 0x3f
 80079ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079b0:	4b1a      	ldr	r3, [pc, #104]	@ (8007a1c <HAL_RCC_GetClockConfig+0x7c>)
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f003 0207 	and.w	r2, r3, #7
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80079bc:	4b17      	ldr	r3, [pc, #92]	@ (8007a1c <HAL_RCC_GetClockConfig+0x7c>)
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80079c8:	4b14      	ldr	r3, [pc, #80]	@ (8007a1c <HAL_RCC_GetClockConfig+0x7c>)
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	f003 020f 	and.w	r2, r3, #15
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80079d4:	4b11      	ldr	r3, [pc, #68]	@ (8007a1c <HAL_RCC_GetClockConfig+0x7c>)
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80079e0:	4b0e      	ldr	r3, [pc, #56]	@ (8007a1c <HAL_RCC_GetClockConfig+0x7c>)
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80079ec:	4b0b      	ldr	r3, [pc, #44]	@ (8007a1c <HAL_RCC_GetClockConfig+0x7c>)
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80079f8:	4b08      	ldr	r3, [pc, #32]	@ (8007a1c <HAL_RCC_GetClockConfig+0x7c>)
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a04:	4b06      	ldr	r3, [pc, #24]	@ (8007a20 <HAL_RCC_GetClockConfig+0x80>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 020f 	and.w	r2, r3, #15
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	601a      	str	r2, [r3, #0]
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	58024400 	.word	0x58024400
 8007a20:	52002000 	.word	0x52002000

08007a24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a28:	b0ca      	sub	sp, #296	@ 0x128
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a30:	2300      	movs	r3, #0
 8007a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a36:	2300      	movs	r3, #0
 8007a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007a48:	2500      	movs	r5, #0
 8007a4a:	ea54 0305 	orrs.w	r3, r4, r5
 8007a4e:	d049      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a5a:	d02f      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007a5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a60:	d828      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a66:	d01a      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007a68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a6c:	d822      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a76:	d007      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a78:	e01c      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a7a:	4bb8      	ldr	r3, [pc, #736]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7e:	4ab7      	ldr	r2, [pc, #732]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a86:	e01a      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	2102      	movs	r1, #2
 8007a90:	4618      	mov	r0, r3
 8007a92:	f002 fb61 	bl	800a158 <RCCEx_PLL2_Config>
 8007a96:	4603      	mov	r3, r0
 8007a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a9c:	e00f      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa2:	3328      	adds	r3, #40	@ 0x28
 8007aa4:	2102      	movs	r1, #2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f002 fc08 	bl	800a2bc <RCCEx_PLL3_Config>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ab2:	e004      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aba:	e000      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007ac6:	4ba5      	ldr	r3, [pc, #660]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ad4:	4aa1      	ldr	r2, [pc, #644]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ad6:	430b      	orrs	r3, r1
 8007ad8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ada:	e003      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007af0:	f04f 0900 	mov.w	r9, #0
 8007af4:	ea58 0309 	orrs.w	r3, r8, r9
 8007af8:	d047      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d82a      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007b04:	a201      	add	r2, pc, #4	@ (adr r2, 8007b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0a:	bf00      	nop
 8007b0c:	08007b21 	.word	0x08007b21
 8007b10:	08007b2f 	.word	0x08007b2f
 8007b14:	08007b45 	.word	0x08007b45
 8007b18:	08007b63 	.word	0x08007b63
 8007b1c:	08007b63 	.word	0x08007b63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b20:	4b8e      	ldr	r3, [pc, #568]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b24:	4a8d      	ldr	r2, [pc, #564]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b2c:	e01a      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b32:	3308      	adds	r3, #8
 8007b34:	2100      	movs	r1, #0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f002 fb0e 	bl	800a158 <RCCEx_PLL2_Config>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b42:	e00f      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b48:	3328      	adds	r3, #40	@ 0x28
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f002 fbb5 	bl	800a2bc <RCCEx_PLL3_Config>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b58:	e004      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b60:	e000      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b6c:	4b7b      	ldr	r3, [pc, #492]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b70:	f023 0107 	bic.w	r1, r3, #7
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b7a:	4a78      	ldr	r2, [pc, #480]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b7c:	430b      	orrs	r3, r1
 8007b7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b80:	e003      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007b96:	f04f 0b00 	mov.w	fp, #0
 8007b9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007b9e:	d04c      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007baa:	d030      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bb0:	d829      	bhi.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bb4:	d02d      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007bb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bb8:	d825      	bhi.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007bba:	2b80      	cmp	r3, #128	@ 0x80
 8007bbc:	d018      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007bbe:	2b80      	cmp	r3, #128	@ 0x80
 8007bc0:	d821      	bhi.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007bc6:	2b40      	cmp	r3, #64	@ 0x40
 8007bc8:	d007      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007bca:	e01c      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bcc:	4b63      	ldr	r3, [pc, #396]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd0:	4a62      	ldr	r2, [pc, #392]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007bd8:	e01c      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bde:	3308      	adds	r3, #8
 8007be0:	2100      	movs	r1, #0
 8007be2:	4618      	mov	r0, r3
 8007be4:	f002 fab8 	bl	800a158 <RCCEx_PLL2_Config>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007bee:	e011      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf4:	3328      	adds	r3, #40	@ 0x28
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f002 fb5f 	bl	800a2bc <RCCEx_PLL3_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c04:	e006      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c0c:	e002      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007c0e:	bf00      	nop
 8007c10:	e000      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10a      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c30:	e003      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007c46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007c50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007c54:	460b      	mov	r3, r1
 8007c56:	4313      	orrs	r3, r2
 8007c58:	d053      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c66:	d035      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007c68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c6c:	d82e      	bhi.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c72:	d031      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007c74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c78:	d828      	bhi.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c7e:	d01a      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c84:	d822      	bhi.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007c8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c8e:	d007      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007c90:	e01c      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c92:	4b32      	ldr	r3, [pc, #200]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c96:	4a31      	ldr	r2, [pc, #196]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c9e:	e01c      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f002 fa55 	bl	800a158 <RCCEx_PLL2_Config>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007cb4:	e011      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cba:	3328      	adds	r3, #40	@ 0x28
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f002 fafc 	bl	800a2bc <RCCEx_PLL3_Config>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cca:	e006      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cd2:	e002      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007cd4:	bf00      	nop
 8007cd6:	e000      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10b      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ce6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cf8:	e003      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007d0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007d12:	2300      	movs	r3, #0
 8007d14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007d18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	d056      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d2e:	d038      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007d30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d34:	d831      	bhi.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007d3a:	d034      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007d3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007d40:	d82b      	bhi.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d46:	d01d      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007d48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d4c:	d825      	bhi.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d006      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d56:	d00a      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007d58:	e01f      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d5a:	bf00      	nop
 8007d5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d60:	4ba2      	ldr	r3, [pc, #648]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d64:	4aa1      	ldr	r2, [pc, #644]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d6c:	e01c      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d72:	3308      	adds	r3, #8
 8007d74:	2100      	movs	r1, #0
 8007d76:	4618      	mov	r0, r3
 8007d78:	f002 f9ee 	bl	800a158 <RCCEx_PLL2_Config>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d82:	e011      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d88:	3328      	adds	r3, #40	@ 0x28
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f002 fa95 	bl	800a2bc <RCCEx_PLL3_Config>
 8007d92:	4603      	mov	r3, r0
 8007d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d98:	e006      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007da0:	e002      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007da2:	bf00      	nop
 8007da4:	e000      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10b      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007db0:	4b8e      	ldr	r3, [pc, #568]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007db4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007dc0:	4a8a      	ldr	r2, [pc, #552]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dc2:	430b      	orrs	r3, r1
 8007dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dc6:	e003      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007de6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007dea:	460b      	mov	r3, r1
 8007dec:	4313      	orrs	r3, r2
 8007dee:	d03a      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007df6:	2b30      	cmp	r3, #48	@ 0x30
 8007df8:	d01f      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007dfa:	2b30      	cmp	r3, #48	@ 0x30
 8007dfc:	d819      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d00c      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d815      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d019      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007e0a:	2b10      	cmp	r3, #16
 8007e0c:	d111      	bne.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e0e:	4b77      	ldr	r3, [pc, #476]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e12:	4a76      	ldr	r2, [pc, #472]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e1a:	e011      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e20:	3308      	adds	r3, #8
 8007e22:	2102      	movs	r1, #2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f002 f997 	bl	800a158 <RCCEx_PLL2_Config>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e30:	e006      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e38:	e002      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e3a:	bf00      	nop
 8007e3c:	e000      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e48:	4b68      	ldr	r3, [pc, #416]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e56:	4a65      	ldr	r2, [pc, #404]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e5c:	e003      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007e72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e76:	2300      	movs	r3, #0
 8007e78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4313      	orrs	r3, r2
 8007e84:	d051      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e90:	d035      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007e92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e96:	d82e      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e9c:	d031      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007e9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ea2:	d828      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ea8:	d01a      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eae:	d822      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eb8:	d007      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007eba:	e01c      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ec8:	e01c      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ece:	3308      	adds	r3, #8
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f002 f940 	bl	800a158 <RCCEx_PLL2_Config>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ede:	e011      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee4:	3328      	adds	r3, #40	@ 0x28
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f002 f9e7 	bl	800a2bc <RCCEx_PLL3_Config>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ef4:	e006      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007efc:	e002      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007efe:	bf00      	nop
 8007f00:	e000      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007f0c:	4b37      	ldr	r3, [pc, #220]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f1a:	4a34      	ldr	r2, [pc, #208]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f20:	e003      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007f36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007f40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007f44:	460b      	mov	r3, r1
 8007f46:	4313      	orrs	r3, r2
 8007f48:	d056      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f54:	d033      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007f56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f5a:	d82c      	bhi.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f60:	d02f      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007f62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f66:	d826      	bhi.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f6c:	d02b      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007f6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f72:	d820      	bhi.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f78:	d012      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f7e:	d81a      	bhi.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d022      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f88:	d115      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8e:	3308      	adds	r3, #8
 8007f90:	2101      	movs	r1, #1
 8007f92:	4618      	mov	r0, r3
 8007f94:	f002 f8e0 	bl	800a158 <RCCEx_PLL2_Config>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f9e:	e015      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa4:	3328      	adds	r3, #40	@ 0x28
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f002 f987 	bl	800a2bc <RCCEx_PLL3_Config>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007fb4:	e00a      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fbc:	e006      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007fbe:	bf00      	nop
 8007fc0:	e004      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007fc2:	bf00      	nop
 8007fc4:	e002      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007fc6:	bf00      	nop
 8007fc8:	e000      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10d      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007fd4:	4b05      	ldr	r3, [pc, #20]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fe2:	4a02      	ldr	r2, [pc, #8]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fe8:	e006      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007fea:	bf00      	nop
 8007fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008008:	2300      	movs	r3, #0
 800800a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800800e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008012:	460b      	mov	r3, r1
 8008014:	4313      	orrs	r3, r2
 8008016:	d055      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008024:	d033      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800802a:	d82c      	bhi.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800802c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008030:	d02f      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008036:	d826      	bhi.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008038:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800803c:	d02b      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800803e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008042:	d820      	bhi.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008048:	d012      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800804a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800804e:	d81a      	bhi.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008050:	2b00      	cmp	r3, #0
 8008052:	d022      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008058:	d115      	bne.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805e:	3308      	adds	r3, #8
 8008060:	2101      	movs	r1, #1
 8008062:	4618      	mov	r0, r3
 8008064:	f002 f878 	bl	800a158 <RCCEx_PLL2_Config>
 8008068:	4603      	mov	r3, r0
 800806a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800806e:	e015      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008074:	3328      	adds	r3, #40	@ 0x28
 8008076:	2101      	movs	r1, #1
 8008078:	4618      	mov	r0, r3
 800807a:	f002 f91f 	bl	800a2bc <RCCEx_PLL3_Config>
 800807e:	4603      	mov	r3, r0
 8008080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008084:	e00a      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800808c:	e006      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800808e:	bf00      	nop
 8008090:	e004      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008092:	bf00      	nop
 8008094:	e002      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008096:	bf00      	nop
 8008098:	e000      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800809a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800809c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10b      	bne.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80080a4:	4ba3      	ldr	r3, [pc, #652]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80080ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80080b4:	4a9f      	ldr	r2, [pc, #636]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b6:	430b      	orrs	r3, r1
 80080b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80080ba:	e003      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80080c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80080d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80080d4:	2300      	movs	r3, #0
 80080d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80080da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80080de:	460b      	mov	r3, r1
 80080e0:	4313      	orrs	r3, r2
 80080e2:	d037      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80080e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080ee:	d00e      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80080f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080f4:	d816      	bhi.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d018      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80080fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080fe:	d111      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008100:	4b8c      	ldr	r3, [pc, #560]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008104:	4a8b      	ldr	r2, [pc, #556]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800810a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800810c:	e00f      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008112:	3308      	adds	r3, #8
 8008114:	2101      	movs	r1, #1
 8008116:	4618      	mov	r0, r3
 8008118:	f002 f81e 	bl	800a158 <RCCEx_PLL2_Config>
 800811c:	4603      	mov	r3, r0
 800811e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008122:	e004      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800812a:	e000      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800812c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800812e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008136:	4b7f      	ldr	r3, [pc, #508]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800813a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800813e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008144:	4a7b      	ldr	r2, [pc, #492]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008146:	430b      	orrs	r3, r1
 8008148:	6513      	str	r3, [r2, #80]	@ 0x50
 800814a:	e003      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800814c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008164:	2300      	movs	r3, #0
 8008166:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800816a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800816e:	460b      	mov	r3, r1
 8008170:	4313      	orrs	r3, r2
 8008172:	d039      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800817a:	2b03      	cmp	r3, #3
 800817c:	d81c      	bhi.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800817e:	a201      	add	r2, pc, #4	@ (adr r2, 8008184 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	080081c1 	.word	0x080081c1
 8008188:	08008195 	.word	0x08008195
 800818c:	080081a3 	.word	0x080081a3
 8008190:	080081c1 	.word	0x080081c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008194:	4b67      	ldr	r3, [pc, #412]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008198:	4a66      	ldr	r2, [pc, #408]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800819a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800819e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80081a0:	e00f      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a6:	3308      	adds	r3, #8
 80081a8:	2102      	movs	r1, #2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f001 ffd4 	bl	800a158 <RCCEx_PLL2_Config>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80081b6:	e004      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081be:	e000      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80081c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10a      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80081ca:	4b5a      	ldr	r3, [pc, #360]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081ce:	f023 0103 	bic.w	r1, r3, #3
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081d8:	4a56      	ldr	r2, [pc, #344]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081da:	430b      	orrs	r3, r1
 80081dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081de:	e003      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80081f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081f8:	2300      	movs	r3, #0
 80081fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008202:	460b      	mov	r3, r1
 8008204:	4313      	orrs	r3, r2
 8008206:	f000 809f 	beq.w	8008348 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800820a:	4b4b      	ldr	r3, [pc, #300]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a4a      	ldr	r2, [pc, #296]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008214:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008216:	f7f9 ff71 	bl	80020fc <HAL_GetTick>
 800821a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800821e:	e00b      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008220:	f7f9 ff6c 	bl	80020fc <HAL_GetTick>
 8008224:	4602      	mov	r2, r0
 8008226:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b64      	cmp	r3, #100	@ 0x64
 800822e:	d903      	bls.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008236:	e005      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008238:	4b3f      	ldr	r3, [pc, #252]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0ed      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008248:	2b00      	cmp	r3, #0
 800824a:	d179      	bne.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800824c:	4b39      	ldr	r3, [pc, #228]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800824e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008258:	4053      	eors	r3, r2
 800825a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800825e:	2b00      	cmp	r3, #0
 8008260:	d015      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008262:	4b34      	ldr	r3, [pc, #208]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800826a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800826e:	4b31      	ldr	r3, [pc, #196]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008272:	4a30      	ldr	r2, [pc, #192]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008278:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800827a:	4b2e      	ldr	r3, [pc, #184]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800827c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800827e:	4a2d      	ldr	r2, [pc, #180]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008284:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008286:	4a2b      	ldr	r2, [pc, #172]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800828c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800828e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008292:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800829a:	d118      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800829c:	f7f9 ff2e 	bl	80020fc <HAL_GetTick>
 80082a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082a4:	e00d      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082a6:	f7f9 ff29 	bl	80020fc <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80082b0:	1ad2      	subs	r2, r2, r3
 80082b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d903      	bls.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80082c0:	e005      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0eb      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80082ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d129      	bne.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082e6:	d10e      	bne.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80082e8:	4b12      	ldr	r3, [pc, #72]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80082f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082f8:	091a      	lsrs	r2, r3, #4
 80082fa:	4b10      	ldr	r3, [pc, #64]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80082fc:	4013      	ands	r3, r2
 80082fe:	4a0d      	ldr	r2, [pc, #52]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008300:	430b      	orrs	r3, r1
 8008302:	6113      	str	r3, [r2, #16]
 8008304:	e005      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008306:	4b0b      	ldr	r3, [pc, #44]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	4a0a      	ldr	r2, [pc, #40]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800830c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008310:	6113      	str	r3, [r2, #16]
 8008312:	4b08      	ldr	r3, [pc, #32]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008314:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800831e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008322:	4a04      	ldr	r2, [pc, #16]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008324:	430b      	orrs	r3, r1
 8008326:	6713      	str	r3, [r2, #112]	@ 0x70
 8008328:	e00e      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800832a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800832e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008332:	e009      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008334:	58024400 	.word	0x58024400
 8008338:	58024800 	.word	0x58024800
 800833c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f002 0301 	and.w	r3, r2, #1
 8008354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008358:	2300      	movs	r3, #0
 800835a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800835e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008362:	460b      	mov	r3, r1
 8008364:	4313      	orrs	r3, r2
 8008366:	f000 8089 	beq.w	800847c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800836e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008370:	2b28      	cmp	r3, #40	@ 0x28
 8008372:	d86b      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008374:	a201      	add	r2, pc, #4	@ (adr r2, 800837c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	08008455 	.word	0x08008455
 8008380:	0800844d 	.word	0x0800844d
 8008384:	0800844d 	.word	0x0800844d
 8008388:	0800844d 	.word	0x0800844d
 800838c:	0800844d 	.word	0x0800844d
 8008390:	0800844d 	.word	0x0800844d
 8008394:	0800844d 	.word	0x0800844d
 8008398:	0800844d 	.word	0x0800844d
 800839c:	08008421 	.word	0x08008421
 80083a0:	0800844d 	.word	0x0800844d
 80083a4:	0800844d 	.word	0x0800844d
 80083a8:	0800844d 	.word	0x0800844d
 80083ac:	0800844d 	.word	0x0800844d
 80083b0:	0800844d 	.word	0x0800844d
 80083b4:	0800844d 	.word	0x0800844d
 80083b8:	0800844d 	.word	0x0800844d
 80083bc:	08008437 	.word	0x08008437
 80083c0:	0800844d 	.word	0x0800844d
 80083c4:	0800844d 	.word	0x0800844d
 80083c8:	0800844d 	.word	0x0800844d
 80083cc:	0800844d 	.word	0x0800844d
 80083d0:	0800844d 	.word	0x0800844d
 80083d4:	0800844d 	.word	0x0800844d
 80083d8:	0800844d 	.word	0x0800844d
 80083dc:	08008455 	.word	0x08008455
 80083e0:	0800844d 	.word	0x0800844d
 80083e4:	0800844d 	.word	0x0800844d
 80083e8:	0800844d 	.word	0x0800844d
 80083ec:	0800844d 	.word	0x0800844d
 80083f0:	0800844d 	.word	0x0800844d
 80083f4:	0800844d 	.word	0x0800844d
 80083f8:	0800844d 	.word	0x0800844d
 80083fc:	08008455 	.word	0x08008455
 8008400:	0800844d 	.word	0x0800844d
 8008404:	0800844d 	.word	0x0800844d
 8008408:	0800844d 	.word	0x0800844d
 800840c:	0800844d 	.word	0x0800844d
 8008410:	0800844d 	.word	0x0800844d
 8008414:	0800844d 	.word	0x0800844d
 8008418:	0800844d 	.word	0x0800844d
 800841c:	08008455 	.word	0x08008455
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008424:	3308      	adds	r3, #8
 8008426:	2101      	movs	r1, #1
 8008428:	4618      	mov	r0, r3
 800842a:	f001 fe95 	bl	800a158 <RCCEx_PLL2_Config>
 800842e:	4603      	mov	r3, r0
 8008430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008434:	e00f      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800843a:	3328      	adds	r3, #40	@ 0x28
 800843c:	2101      	movs	r1, #1
 800843e:	4618      	mov	r0, r3
 8008440:	f001 ff3c 	bl	800a2bc <RCCEx_PLL3_Config>
 8008444:	4603      	mov	r3, r0
 8008446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800844a:	e004      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008452:	e000      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10a      	bne.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800845e:	4bbf      	ldr	r3, [pc, #764]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008462:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800846c:	4abb      	ldr	r2, [pc, #748]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800846e:	430b      	orrs	r3, r1
 8008470:	6553      	str	r3, [r2, #84]	@ 0x54
 8008472:	e003      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800847c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	f002 0302 	and.w	r3, r2, #2
 8008488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800848c:	2300      	movs	r3, #0
 800848e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008492:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008496:	460b      	mov	r3, r1
 8008498:	4313      	orrs	r3, r2
 800849a:	d041      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800849c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084a2:	2b05      	cmp	r3, #5
 80084a4:	d824      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80084a6:	a201      	add	r2, pc, #4	@ (adr r2, 80084ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80084a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ac:	080084f9 	.word	0x080084f9
 80084b0:	080084c5 	.word	0x080084c5
 80084b4:	080084db 	.word	0x080084db
 80084b8:	080084f9 	.word	0x080084f9
 80084bc:	080084f9 	.word	0x080084f9
 80084c0:	080084f9 	.word	0x080084f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c8:	3308      	adds	r3, #8
 80084ca:	2101      	movs	r1, #1
 80084cc:	4618      	mov	r0, r3
 80084ce:	f001 fe43 	bl	800a158 <RCCEx_PLL2_Config>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80084d8:	e00f      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084de:	3328      	adds	r3, #40	@ 0x28
 80084e0:	2101      	movs	r1, #1
 80084e2:	4618      	mov	r0, r3
 80084e4:	f001 feea 	bl	800a2bc <RCCEx_PLL3_Config>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80084ee:	e004      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084f6:	e000      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80084f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10a      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008502:	4b96      	ldr	r3, [pc, #600]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008506:	f023 0107 	bic.w	r1, r3, #7
 800850a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800850e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008510:	4a92      	ldr	r2, [pc, #584]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008512:	430b      	orrs	r3, r1
 8008514:	6553      	str	r3, [r2, #84]	@ 0x54
 8008516:	e003      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800851c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	f002 0304 	and.w	r3, r2, #4
 800852c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008530:	2300      	movs	r3, #0
 8008532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008536:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800853a:	460b      	mov	r3, r1
 800853c:	4313      	orrs	r3, r2
 800853e:	d044      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008548:	2b05      	cmp	r3, #5
 800854a:	d825      	bhi.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800854c:	a201      	add	r2, pc, #4	@ (adr r2, 8008554 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	080085a1 	.word	0x080085a1
 8008558:	0800856d 	.word	0x0800856d
 800855c:	08008583 	.word	0x08008583
 8008560:	080085a1 	.word	0x080085a1
 8008564:	080085a1 	.word	0x080085a1
 8008568:	080085a1 	.word	0x080085a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800856c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008570:	3308      	adds	r3, #8
 8008572:	2101      	movs	r1, #1
 8008574:	4618      	mov	r0, r3
 8008576:	f001 fdef 	bl	800a158 <RCCEx_PLL2_Config>
 800857a:	4603      	mov	r3, r0
 800857c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008580:	e00f      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008586:	3328      	adds	r3, #40	@ 0x28
 8008588:	2101      	movs	r1, #1
 800858a:	4618      	mov	r0, r3
 800858c:	f001 fe96 	bl	800a2bc <RCCEx_PLL3_Config>
 8008590:	4603      	mov	r3, r0
 8008592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008596:	e004      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800859e:	e000      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80085a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10b      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085aa:	4b6c      	ldr	r3, [pc, #432]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ae:	f023 0107 	bic.w	r1, r3, #7
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085ba:	4a68      	ldr	r2, [pc, #416]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085bc:	430b      	orrs	r3, r1
 80085be:	6593      	str	r3, [r2, #88]	@ 0x58
 80085c0:	e003      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f002 0320 	and.w	r3, r2, #32
 80085d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80085da:	2300      	movs	r3, #0
 80085dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80085e4:	460b      	mov	r3, r1
 80085e6:	4313      	orrs	r3, r2
 80085e8:	d055      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085f6:	d033      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80085f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085fc:	d82c      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008602:	d02f      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008608:	d826      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800860a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800860e:	d02b      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008614:	d820      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800861a:	d012      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800861c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008620:	d81a      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008622:	2b00      	cmp	r3, #0
 8008624:	d022      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800862a:	d115      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800862c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008630:	3308      	adds	r3, #8
 8008632:	2100      	movs	r1, #0
 8008634:	4618      	mov	r0, r3
 8008636:	f001 fd8f 	bl	800a158 <RCCEx_PLL2_Config>
 800863a:	4603      	mov	r3, r0
 800863c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008640:	e015      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008646:	3328      	adds	r3, #40	@ 0x28
 8008648:	2102      	movs	r1, #2
 800864a:	4618      	mov	r0, r3
 800864c:	f001 fe36 	bl	800a2bc <RCCEx_PLL3_Config>
 8008650:	4603      	mov	r3, r0
 8008652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008656:	e00a      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800865e:	e006      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008660:	bf00      	nop
 8008662:	e004      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008664:	bf00      	nop
 8008666:	e002      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008668:	bf00      	nop
 800866a:	e000      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800866c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800866e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10b      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008676:	4b39      	ldr	r3, [pc, #228]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800867a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800867e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008686:	4a35      	ldr	r2, [pc, #212]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008688:	430b      	orrs	r3, r1
 800868a:	6553      	str	r3, [r2, #84]	@ 0x54
 800868c:	e003      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80086a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80086a6:	2300      	movs	r3, #0
 80086a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80086ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4313      	orrs	r3, r2
 80086b4:	d058      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80086b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80086c2:	d033      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80086c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80086c8:	d82c      	bhi.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ce:	d02f      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80086d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086d4:	d826      	bhi.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086da:	d02b      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80086dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086e0:	d820      	bhi.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086e6:	d012      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80086e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086ec:	d81a      	bhi.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d022      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80086f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086f6:	d115      	bne.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fc:	3308      	adds	r3, #8
 80086fe:	2100      	movs	r1, #0
 8008700:	4618      	mov	r0, r3
 8008702:	f001 fd29 	bl	800a158 <RCCEx_PLL2_Config>
 8008706:	4603      	mov	r3, r0
 8008708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800870c:	e015      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800870e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008712:	3328      	adds	r3, #40	@ 0x28
 8008714:	2102      	movs	r1, #2
 8008716:	4618      	mov	r0, r3
 8008718:	f001 fdd0 	bl	800a2bc <RCCEx_PLL3_Config>
 800871c:	4603      	mov	r3, r0
 800871e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008722:	e00a      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800872a:	e006      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800872c:	bf00      	nop
 800872e:	e004      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008730:	bf00      	nop
 8008732:	e002      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008734:	bf00      	nop
 8008736:	e000      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800873a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10e      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008742:	4b06      	ldr	r3, [pc, #24]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008746:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800874a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800874e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008752:	4a02      	ldr	r2, [pc, #8]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008754:	430b      	orrs	r3, r1
 8008756:	6593      	str	r3, [r2, #88]	@ 0x58
 8008758:	e006      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800875a:	bf00      	nop
 800875c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008778:	2300      	movs	r3, #0
 800877a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800877e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008782:	460b      	mov	r3, r1
 8008784:	4313      	orrs	r3, r2
 8008786:	d055      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008790:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008794:	d033      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008796:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800879a:	d82c      	bhi.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800879c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087a0:	d02f      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80087a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087a6:	d826      	bhi.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80087ac:	d02b      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80087ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80087b2:	d820      	bhi.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087b8:	d012      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80087ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087be:	d81a      	bhi.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d022      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80087c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087c8:	d115      	bne.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ce:	3308      	adds	r3, #8
 80087d0:	2100      	movs	r1, #0
 80087d2:	4618      	mov	r0, r3
 80087d4:	f001 fcc0 	bl	800a158 <RCCEx_PLL2_Config>
 80087d8:	4603      	mov	r3, r0
 80087da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80087de:	e015      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e4:	3328      	adds	r3, #40	@ 0x28
 80087e6:	2102      	movs	r1, #2
 80087e8:	4618      	mov	r0, r3
 80087ea:	f001 fd67 	bl	800a2bc <RCCEx_PLL3_Config>
 80087ee:	4603      	mov	r3, r0
 80087f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80087f4:	e00a      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087fc:	e006      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087fe:	bf00      	nop
 8008800:	e004      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008802:	bf00      	nop
 8008804:	e002      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008806:	bf00      	nop
 8008808:	e000      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800880a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800880c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10b      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008814:	4ba1      	ldr	r3, [pc, #644]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008818:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800881c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008824:	4a9d      	ldr	r2, [pc, #628]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008826:	430b      	orrs	r3, r1
 8008828:	6593      	str	r3, [r2, #88]	@ 0x58
 800882a:	e003      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	f002 0308 	and.w	r3, r2, #8
 8008840:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008844:	2300      	movs	r3, #0
 8008846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800884a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800884e:	460b      	mov	r3, r1
 8008850:	4313      	orrs	r3, r2
 8008852:	d01e      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800885c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008860:	d10c      	bne.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008866:	3328      	adds	r3, #40	@ 0x28
 8008868:	2102      	movs	r1, #2
 800886a:	4618      	mov	r0, r3
 800886c:	f001 fd26 	bl	800a2bc <RCCEx_PLL3_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800887c:	4b87      	ldr	r3, [pc, #540]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800887e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008880:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800888c:	4a83      	ldr	r2, [pc, #524]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800888e:	430b      	orrs	r3, r1
 8008890:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f002 0310 	and.w	r3, r2, #16
 800889e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80088a2:	2300      	movs	r3, #0
 80088a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80088a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80088ac:	460b      	mov	r3, r1
 80088ae:	4313      	orrs	r3, r2
 80088b0:	d01e      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088be:	d10c      	bne.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c4:	3328      	adds	r3, #40	@ 0x28
 80088c6:	2102      	movs	r1, #2
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 fcf7 	bl	800a2bc <RCCEx_PLL3_Config>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088da:	4b70      	ldr	r3, [pc, #448]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088ea:	4a6c      	ldr	r2, [pc, #432]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ec:	430b      	orrs	r3, r1
 80088ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80088fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008906:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800890a:	460b      	mov	r3, r1
 800890c:	4313      	orrs	r3, r2
 800890e:	d03e      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800891c:	d022      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800891e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008922:	d81b      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800892c:	d00b      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800892e:	e015      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008934:	3308      	adds	r3, #8
 8008936:	2100      	movs	r1, #0
 8008938:	4618      	mov	r0, r3
 800893a:	f001 fc0d 	bl	800a158 <RCCEx_PLL2_Config>
 800893e:	4603      	mov	r3, r0
 8008940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008944:	e00f      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800894a:	3328      	adds	r3, #40	@ 0x28
 800894c:	2102      	movs	r1, #2
 800894e:	4618      	mov	r0, r3
 8008950:	f001 fcb4 	bl	800a2bc <RCCEx_PLL3_Config>
 8008954:	4603      	mov	r3, r0
 8008956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800895a:	e004      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008962:	e000      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10b      	bne.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800896e:	4b4b      	ldr	r3, [pc, #300]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008972:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800897a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800897e:	4a47      	ldr	r2, [pc, #284]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008980:	430b      	orrs	r3, r1
 8008982:	6593      	str	r3, [r2, #88]	@ 0x58
 8008984:	e003      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800898a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800898e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800899a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800899c:	2300      	movs	r3, #0
 800899e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80089a4:	460b      	mov	r3, r1
 80089a6:	4313      	orrs	r3, r2
 80089a8:	d03b      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089b6:	d01f      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80089b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089bc:	d818      	bhi.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80089be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089c2:	d003      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80089c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089c8:	d007      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80089ca:	e011      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089cc:	4b33      	ldr	r3, [pc, #204]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d0:	4a32      	ldr	r2, [pc, #200]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80089d8:	e00f      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089de:	3328      	adds	r3, #40	@ 0x28
 80089e0:	2101      	movs	r1, #1
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 fc6a 	bl	800a2bc <RCCEx_PLL3_Config>
 80089e8:	4603      	mov	r3, r0
 80089ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80089ee:	e004      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089f6:	e000      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80089f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10b      	bne.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a02:	4b26      	ldr	r3, [pc, #152]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a12:	4a22      	ldr	r2, [pc, #136]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a14:	430b      	orrs	r3, r1
 8008a16:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a18:	e003      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008a2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a30:	2300      	movs	r3, #0
 8008a32:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	d034      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a4c:	d007      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008a4e:	e011      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a50:	4b12      	ldr	r3, [pc, #72]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	4a11      	ldr	r2, [pc, #68]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a5c:	e00e      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a62:	3308      	adds	r3, #8
 8008a64:	2102      	movs	r1, #2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 fb76 	bl	800a158 <RCCEx_PLL2_Config>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a72:	e003      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10d      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a84:	4b05      	ldr	r3, [pc, #20]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a92:	4a02      	ldr	r2, [pc, #8]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a94:	430b      	orrs	r3, r1
 8008a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a98:	e006      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008a9a:	bf00      	nop
 8008a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008aba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	d00c      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac8:	3328      	adds	r3, #40	@ 0x28
 8008aca:	2102      	movs	r1, #2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f001 fbf5 	bl	800a2bc <RCCEx_PLL3_Config>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8008aec:	2300      	movs	r3, #0
 8008aee:	667b      	str	r3, [r7, #100]	@ 0x64
 8008af0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008af4:	460b      	mov	r3, r1
 8008af6:	4313      	orrs	r3, r2
 8008af8:	d038      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b06:	d018      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008b08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b0c:	d811      	bhi.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b12:	d014      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b18:	d80b      	bhi.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d011      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b22:	d106      	bne.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b24:	4bc3      	ldr	r3, [pc, #780]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b28:	4ac2      	ldr	r2, [pc, #776]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008b30:	e008      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b38:	e004      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b3a:	bf00      	nop
 8008b3c:	e002      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b3e:	bf00      	nop
 8008b40:	e000      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10b      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b4c:	4bb9      	ldr	r3, [pc, #740]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b5c:	4ab5      	ldr	r2, [pc, #724]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b62:	e003      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008b82:	460b      	mov	r3, r1
 8008b84:	4313      	orrs	r3, r2
 8008b86:	d009      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b88:	4baa      	ldr	r3, [pc, #680]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b96:	4aa7      	ldr	r2, [pc, #668]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b98:	430b      	orrs	r3, r1
 8008b9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008ba8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008baa:	2300      	movs	r3, #0
 8008bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	d00a      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008bb8:	4b9e      	ldr	r3, [pc, #632]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008bc8:	4a9a      	ldr	r2, [pc, #616]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bca:	430b      	orrs	r3, r1
 8008bcc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bdc:	2300      	movs	r3, #0
 8008bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008be0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008be4:	460b      	mov	r3, r1
 8008be6:	4313      	orrs	r3, r2
 8008be8:	d009      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008bea:	4b92      	ldr	r3, [pc, #584]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bf8:	4a8e      	ldr	r2, [pc, #568]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bfa:	430b      	orrs	r3, r1
 8008bfc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008c14:	460b      	mov	r3, r1
 8008c16:	4313      	orrs	r3, r2
 8008c18:	d00e      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c1a:	4b86      	ldr	r3, [pc, #536]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	4a85      	ldr	r2, [pc, #532]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c24:	6113      	str	r3, [r2, #16]
 8008c26:	4b83      	ldr	r3, [pc, #524]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c28:	6919      	ldr	r1, [r3, #16]
 8008c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c32:	4a80      	ldr	r2, [pc, #512]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c34:	430b      	orrs	r3, r1
 8008c36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008c44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c46:	2300      	movs	r3, #0
 8008c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4313      	orrs	r3, r2
 8008c52:	d009      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c54:	4b77      	ldr	r3, [pc, #476]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c58:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c62:	4a74      	ldr	r2, [pc, #464]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c64:	430b      	orrs	r3, r1
 8008c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c76:	2300      	movs	r3, #0
 8008c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4313      	orrs	r3, r2
 8008c82:	d00a      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c84:	4b6b      	ldr	r3, [pc, #428]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c88:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c94:	4a67      	ldr	r2, [pc, #412]	@ (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c96:	430b      	orrs	r3, r1
 8008c98:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	d011      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cba:	3308      	adds	r3, #8
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f001 fa4a 	bl	800a158 <RCCEx_PLL2_Config>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	6239      	str	r1, [r7, #32]
 8008ce6:	f003 0302 	and.w	r3, r3, #2
 8008cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	d011      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f001 fa2a 	bl	800a158 <RCCEx_PLL2_Config>
 8008d04:	4603      	mov	r3, r0
 8008d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	2100      	movs	r1, #0
 8008d24:	61b9      	str	r1, [r7, #24]
 8008d26:	f003 0304 	and.w	r3, r3, #4
 8008d2a:	61fb      	str	r3, [r7, #28]
 8008d2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008d30:	460b      	mov	r3, r1
 8008d32:	4313      	orrs	r3, r2
 8008d34:	d011      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d3a:	3308      	adds	r3, #8
 8008d3c:	2102      	movs	r1, #2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f001 fa0a 	bl	800a158 <RCCEx_PLL2_Config>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d003      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d62:	2100      	movs	r1, #0
 8008d64:	6139      	str	r1, [r7, #16]
 8008d66:	f003 0308 	and.w	r3, r3, #8
 8008d6a:	617b      	str	r3, [r7, #20]
 8008d6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d70:	460b      	mov	r3, r1
 8008d72:	4313      	orrs	r3, r2
 8008d74:	d011      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d7a:	3328      	adds	r3, #40	@ 0x28
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f001 fa9c 	bl	800a2bc <RCCEx_PLL3_Config>
 8008d84:	4603      	mov	r3, r0
 8008d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	2100      	movs	r1, #0
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	f003 0310 	and.w	r3, r3, #16
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008db0:	460b      	mov	r3, r1
 8008db2:	4313      	orrs	r3, r2
 8008db4:	d011      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dba:	3328      	adds	r3, #40	@ 0x28
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f001 fa7c 	bl	800a2bc <RCCEx_PLL3_Config>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	2100      	movs	r1, #0
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	f003 0320 	and.w	r3, r3, #32
 8008dea:	607b      	str	r3, [r7, #4]
 8008dec:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008df0:	460b      	mov	r3, r1
 8008df2:	4313      	orrs	r3, r2
 8008df4:	d011      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfa:	3328      	adds	r3, #40	@ 0x28
 8008dfc:	2102      	movs	r1, #2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f001 fa5c 	bl	800a2bc <RCCEx_PLL3_Config>
 8008e04:	4603      	mov	r3, r0
 8008e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008e1a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d101      	bne.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	e000      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e34:	58024400 	.word	0x58024400

08008e38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b090      	sub	sp, #64	@ 0x40
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e46:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008e4a:	430b      	orrs	r3, r1
 8008e4c:	f040 8094 	bne.w	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008e50:	4b9e      	ldr	r3, [pc, #632]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e54:	f003 0307 	and.w	r3, r3, #7
 8008e58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	f200 8087 	bhi.w	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008e62:	a201      	add	r2, pc, #4	@ (adr r2, 8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008e7d 	.word	0x08008e7d
 8008e6c:	08008ea5 	.word	0x08008ea5
 8008e70:	08008ecd 	.word	0x08008ecd
 8008e74:	08008f69 	.word	0x08008f69
 8008e78:	08008ef5 	.word	0x08008ef5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e7c:	4b93      	ldr	r3, [pc, #588]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e88:	d108      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f001 f810 	bl	8009eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e98:	f000 bd45 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ea0:	f000 bd41 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ea4:	4b89      	ldr	r3, [pc, #548]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eb0:	d108      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb2:	f107 0318 	add.w	r3, r7, #24
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fd54 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec0:	f000 bd31 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec8:	f000 bd2d 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ecc:	4b7f      	ldr	r3, [pc, #508]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed8:	d108      	bne.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eda:	f107 030c 	add.w	r3, r7, #12
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fe94 	bl	8009c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ee8:	f000 bd1d 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eec:	2300      	movs	r3, #0
 8008eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef0:	f000 bd19 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ef4:	4b75      	ldr	r3, [pc, #468]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ef8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008efc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008efe:	4b73      	ldr	r3, [pc, #460]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0304 	and.w	r3, r3, #4
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	d10c      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d109      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f10:	4b6e      	ldr	r3, [pc, #440]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	08db      	lsrs	r3, r3, #3
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	4a6d      	ldr	r2, [pc, #436]	@ (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f22:	e01f      	b.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f24:	4b69      	ldr	r3, [pc, #420]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f30:	d106      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f38:	d102      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f3a:	4b66      	ldr	r3, [pc, #408]	@ (80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f3e:	e011      	b.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f40:	4b62      	ldr	r3, [pc, #392]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f4c:	d106      	bne.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f54:	d102      	bne.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f56:	4b60      	ldr	r3, [pc, #384]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f5a:	e003      	b.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f60:	f000 bce1 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f64:	f000 bcdf 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f68:	4b5c      	ldr	r3, [pc, #368]	@ (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f6c:	f000 bcdb 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f74:	f000 bcd7 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f7c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008f80:	430b      	orrs	r3, r1
 8008f82:	f040 80ad 	bne.w	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008f86:	4b51      	ldr	r3, [pc, #324]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f8a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008f8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f96:	d056      	beq.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f9e:	f200 8090 	bhi.w	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa4:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fa6:	f000 8088 	beq.w	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fac:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fae:	f200 8088 	bhi.w	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb4:	2b80      	cmp	r3, #128	@ 0x80
 8008fb6:	d032      	beq.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	2b80      	cmp	r3, #128	@ 0x80
 8008fbc:	f200 8081 	bhi.w	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc8:	2b40      	cmp	r3, #64	@ 0x40
 8008fca:	d014      	beq.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008fcc:	e079      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fce:	4b3f      	ldr	r3, [pc, #252]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fda:	d108      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 ff67 	bl	8009eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fea:	f000 bc9c 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff2:	f000 bc98 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ff6:	4b35      	ldr	r3, [pc, #212]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009002:	d108      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009004:	f107 0318 	add.w	r3, r7, #24
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fcab 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009012:	f000 bc88 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800901a:	f000 bc84 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800901e:	4b2b      	ldr	r3, [pc, #172]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800902a:	d108      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800902c:	f107 030c 	add.w	r3, r7, #12
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fdeb 	bl	8009c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800903a:	f000 bc74 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009042:	f000 bc70 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009046:	4b21      	ldr	r3, [pc, #132]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800904a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800904e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009050:	4b1e      	ldr	r3, [pc, #120]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b04      	cmp	r3, #4
 800905a:	d10c      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800905c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800905e:	2b00      	cmp	r3, #0
 8009060:	d109      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009062:	4b1a      	ldr	r3, [pc, #104]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	08db      	lsrs	r3, r3, #3
 8009068:	f003 0303 	and.w	r3, r3, #3
 800906c:	4a18      	ldr	r2, [pc, #96]	@ (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800906e:	fa22 f303 	lsr.w	r3, r2, r3
 8009072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009074:	e01f      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009076:	4b15      	ldr	r3, [pc, #84]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800907e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009082:	d106      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009086:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800908a:	d102      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800908c:	4b11      	ldr	r3, [pc, #68]	@ (80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800908e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009090:	e011      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009092:	4b0e      	ldr	r3, [pc, #56]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800909a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800909e:	d106      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80090a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090a6:	d102      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090a8:	4b0b      	ldr	r3, [pc, #44]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80090aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090ac:	e003      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090ae:	2300      	movs	r3, #0
 80090b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80090b2:	f000 bc38 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090b6:	f000 bc36 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090ba:	4b08      	ldr	r3, [pc, #32]	@ (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80090bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090be:	f000 bc32 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090c6:	f000 bc2e 	b.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090ca:	bf00      	nop
 80090cc:	58024400 	.word	0x58024400
 80090d0:	03d09000 	.word	0x03d09000
 80090d4:	003d0900 	.word	0x003d0900
 80090d8:	007a1200 	.word	0x007a1200
 80090dc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80090e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090e4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80090e8:	430b      	orrs	r3, r1
 80090ea:	f040 809c 	bne.w	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80090ee:	4b9e      	ldr	r3, [pc, #632]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090f2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80090f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80090f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80090fe:	d054      	beq.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009102:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009106:	f200 808b 	bhi.w	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800910a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009110:	f000 8083 	beq.w	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009116:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800911a:	f200 8081 	bhi.w	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009124:	d02f      	beq.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800912c:	d878      	bhi.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800912e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009130:	2b00      	cmp	r3, #0
 8009132:	d004      	beq.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009136:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800913a:	d012      	beq.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800913c:	e070      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800913e:	4b8a      	ldr	r3, [pc, #552]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009146:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800914a:	d107      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800914c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009150:	4618      	mov	r0, r3
 8009152:	f000 feaf 	bl	8009eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800915a:	e3e4      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009160:	e3e1      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009162:	4b81      	ldr	r3, [pc, #516]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800916a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800916e:	d107      	bne.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009170:	f107 0318 	add.w	r3, r7, #24
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fbf5 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800917e:	e3d2      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009184:	e3cf      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009186:	4b78      	ldr	r3, [pc, #480]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800918e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009192:	d107      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009194:	f107 030c 	add.w	r3, r7, #12
 8009198:	4618      	mov	r0, r3
 800919a:	f000 fd37 	bl	8009c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091a2:	e3c0      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091a4:	2300      	movs	r3, #0
 80091a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a8:	e3bd      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091aa:	4b6f      	ldr	r3, [pc, #444]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091b4:	4b6c      	ldr	r3, [pc, #432]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0304 	and.w	r3, r3, #4
 80091bc:	2b04      	cmp	r3, #4
 80091be:	d10c      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80091c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d109      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091c6:	4b68      	ldr	r3, [pc, #416]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	08db      	lsrs	r3, r3, #3
 80091cc:	f003 0303 	and.w	r3, r3, #3
 80091d0:	4a66      	ldr	r2, [pc, #408]	@ (800936c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80091d2:	fa22 f303 	lsr.w	r3, r2, r3
 80091d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091d8:	e01e      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091da:	4b63      	ldr	r3, [pc, #396]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091e6:	d106      	bne.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80091e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091ee:	d102      	bne.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091f0:	4b5f      	ldr	r3, [pc, #380]	@ (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80091f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091f4:	e010      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091f6:	4b5c      	ldr	r3, [pc, #368]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009202:	d106      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009206:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800920a:	d102      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800920c:	4b59      	ldr	r3, [pc, #356]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800920e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009210:	e002      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009216:	e386      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009218:	e385      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800921a:	4b57      	ldr	r3, [pc, #348]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800921c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800921e:	e382      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009224:	e37f      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800922a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800922e:	430b      	orrs	r3, r1
 8009230:	f040 80a7 	bne.w	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009234:	4b4c      	ldr	r3, [pc, #304]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009238:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800923c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800923e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009240:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009244:	d055      	beq.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800924c:	f200 8096 	bhi.w	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009252:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009256:	f000 8084 	beq.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009260:	f200 808c 	bhi.w	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800926a:	d030      	beq.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800926c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009272:	f200 8083 	bhi.w	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009278:	2b00      	cmp	r3, #0
 800927a:	d004      	beq.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800927c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009282:	d012      	beq.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009284:	e07a      	b.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009286:	4b38      	ldr	r3, [pc, #224]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800928e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009292:	d107      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009298:	4618      	mov	r0, r3
 800929a:	f000 fe0b 	bl	8009eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800929e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a2:	e340      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092a8:	e33d      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092b6:	d107      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092b8:	f107 0318 	add.w	r3, r7, #24
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fb51 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092c6:	e32e      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092cc:	e32b      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092ce:	4b26      	ldr	r3, [pc, #152]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092da:	d107      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092dc:	f107 030c 	add.w	r3, r7, #12
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 fc93 	bl	8009c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092ea:	e31c      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f0:	e319      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b04      	cmp	r3, #4
 8009306:	d10c      	bne.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930a:	2b00      	cmp	r3, #0
 800930c:	d109      	bne.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800930e:	4b16      	ldr	r3, [pc, #88]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	08db      	lsrs	r3, r3, #3
 8009314:	f003 0303 	and.w	r3, r3, #3
 8009318:	4a14      	ldr	r2, [pc, #80]	@ (800936c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800931a:	fa22 f303 	lsr.w	r3, r2, r3
 800931e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009320:	e01e      	b.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009322:	4b11      	ldr	r3, [pc, #68]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800932a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800932e:	d106      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009336:	d102      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009338:	4b0d      	ldr	r3, [pc, #52]	@ (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800933c:	e010      	b.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800933e:	4b0a      	ldr	r3, [pc, #40]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800934a:	d106      	bne.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800934c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800934e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009352:	d102      	bne.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009354:	4b07      	ldr	r3, [pc, #28]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009358:	e002      	b.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800935e:	e2e2      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009360:	e2e1      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009362:	4b05      	ldr	r3, [pc, #20]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009366:	e2de      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009368:	58024400 	.word	0x58024400
 800936c:	03d09000 	.word	0x03d09000
 8009370:	003d0900 	.word	0x003d0900
 8009374:	007a1200 	.word	0x007a1200
 8009378:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009380:	e2d1      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009386:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800938a:	430b      	orrs	r3, r1
 800938c:	f040 809c 	bne.w	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009390:	4b93      	ldr	r3, [pc, #588]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009394:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009398:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093a0:	d054      	beq.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80093a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093a8:	f200 808b 	bhi.w	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80093ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093b2:	f000 8083 	beq.w	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80093b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093bc:	f200 8081 	bhi.w	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80093c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093c6:	d02f      	beq.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80093c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093ce:	d878      	bhi.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80093d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d004      	beq.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80093d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093dc:	d012      	beq.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80093de:	e070      	b.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093e0:	4b7f      	ldr	r3, [pc, #508]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093ec:	d107      	bne.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fd5e 	bl	8009eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093fc:	e293      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009402:	e290      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009404:	4b76      	ldr	r3, [pc, #472]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800940c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009410:	d107      	bne.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009412:	f107 0318 	add.w	r3, r7, #24
 8009416:	4618      	mov	r0, r3
 8009418:	f000 faa4 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009420:	e281      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009422:	2300      	movs	r3, #0
 8009424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009426:	e27e      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009428:	4b6d      	ldr	r3, [pc, #436]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009434:	d107      	bne.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009436:	f107 030c 	add.w	r3, r7, #12
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fbe6 	bl	8009c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009444:	e26f      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800944a:	e26c      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800944c:	4b64      	ldr	r3, [pc, #400]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800944e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009450:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009454:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009456:	4b62      	ldr	r3, [pc, #392]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0304 	and.w	r3, r3, #4
 800945e:	2b04      	cmp	r3, #4
 8009460:	d10c      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009464:	2b00      	cmp	r3, #0
 8009466:	d109      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009468:	4b5d      	ldr	r3, [pc, #372]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	08db      	lsrs	r3, r3, #3
 800946e:	f003 0303 	and.w	r3, r3, #3
 8009472:	4a5c      	ldr	r2, [pc, #368]	@ (80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009474:	fa22 f303 	lsr.w	r3, r2, r3
 8009478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800947a:	e01e      	b.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800947c:	4b58      	ldr	r3, [pc, #352]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009488:	d106      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800948a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800948c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009490:	d102      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009492:	4b55      	ldr	r3, [pc, #340]	@ (80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009496:	e010      	b.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009498:	4b51      	ldr	r3, [pc, #324]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094a4:	d106      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80094a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ac:	d102      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094ae:	4b4f      	ldr	r3, [pc, #316]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80094b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094b2:	e002      	b.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80094b8:	e235      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094ba:	e234      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094bc:	4b4c      	ldr	r3, [pc, #304]	@ (80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80094be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c0:	e231      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80094c2:	2300      	movs	r3, #0
 80094c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c6:	e22e      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80094c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094cc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80094d0:	430b      	orrs	r3, r1
 80094d2:	f040 808f 	bne.w	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80094d6:	4b42      	ldr	r3, [pc, #264]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094da:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80094de:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80094e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094e6:	d06b      	beq.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80094e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094ee:	d874      	bhi.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80094f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80094f6:	d056      	beq.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80094f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80094fe:	d86c      	bhi.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009502:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009506:	d03b      	beq.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800950e:	d864      	bhi.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009512:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009516:	d021      	beq.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800951e:	d85c      	bhi.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009522:	2b00      	cmp	r3, #0
 8009524:	d004      	beq.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800952c:	d004      	beq.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800952e:	e054      	b.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009530:	f7fe fa0a 	bl	8007948 <HAL_RCC_GetPCLK1Freq>
 8009534:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009536:	e1f6      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009538:	4b29      	ldr	r3, [pc, #164]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009544:	d107      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009546:	f107 0318 	add.w	r3, r7, #24
 800954a:	4618      	mov	r0, r3
 800954c:	f000 fa0a 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009554:	e1e7      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800955a:	e1e4      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800955c:	4b20      	ldr	r3, [pc, #128]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009568:	d107      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800956a:	f107 030c 	add.w	r3, r7, #12
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fb4c 	bl	8009c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009578:	e1d5      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800957e:	e1d2      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009580:	4b17      	ldr	r3, [pc, #92]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 0304 	and.w	r3, r3, #4
 8009588:	2b04      	cmp	r3, #4
 800958a:	d109      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800958c:	4b14      	ldr	r3, [pc, #80]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	08db      	lsrs	r3, r3, #3
 8009592:	f003 0303 	and.w	r3, r3, #3
 8009596:	4a13      	ldr	r2, [pc, #76]	@ (80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009598:	fa22 f303 	lsr.w	r3, r2, r3
 800959c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800959e:	e1c2      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095a0:	2300      	movs	r3, #0
 80095a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a4:	e1bf      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80095a6:	4b0e      	ldr	r3, [pc, #56]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095b2:	d102      	bne.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80095b4:	4b0c      	ldr	r3, [pc, #48]	@ (80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095b8:	e1b5      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095be:	e1b2      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80095c0:	4b07      	ldr	r3, [pc, #28]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095cc:	d102      	bne.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80095ce:	4b07      	ldr	r3, [pc, #28]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80095d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095d2:	e1a8      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d8:	e1a5      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80095da:	2300      	movs	r3, #0
 80095dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095de:	e1a2      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095e0:	58024400 	.word	0x58024400
 80095e4:	03d09000 	.word	0x03d09000
 80095e8:	003d0900 	.word	0x003d0900
 80095ec:	007a1200 	.word	0x007a1200
 80095f0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80095f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095f8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80095fc:	430b      	orrs	r3, r1
 80095fe:	d173      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009600:	4b9c      	ldr	r3, [pc, #624]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009604:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009608:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800960a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009610:	d02f      	beq.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009618:	d863      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	2b00      	cmp	r3, #0
 800961e:	d004      	beq.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009626:	d012      	beq.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009628:	e05b      	b.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800962a:	4b92      	ldr	r3, [pc, #584]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009636:	d107      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009638:	f107 0318 	add.w	r3, r7, #24
 800963c:	4618      	mov	r0, r3
 800963e:	f000 f991 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009646:	e16e      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800964c:	e16b      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800964e:	4b89      	ldr	r3, [pc, #548]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800965a:	d107      	bne.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800965c:	f107 030c 	add.w	r3, r7, #12
 8009660:	4618      	mov	r0, r3
 8009662:	f000 fad3 	bl	8009c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800966a:	e15c      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009670:	e159      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009672:	4b80      	ldr	r3, [pc, #512]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009676:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800967a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800967c:	4b7d      	ldr	r3, [pc, #500]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b04      	cmp	r3, #4
 8009686:	d10c      	bne.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800968a:	2b00      	cmp	r3, #0
 800968c:	d109      	bne.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800968e:	4b79      	ldr	r3, [pc, #484]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	08db      	lsrs	r3, r3, #3
 8009694:	f003 0303 	and.w	r3, r3, #3
 8009698:	4a77      	ldr	r2, [pc, #476]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800969a:	fa22 f303 	lsr.w	r3, r2, r3
 800969e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096a0:	e01e      	b.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096a2:	4b74      	ldr	r3, [pc, #464]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ae:	d106      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80096b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096b6:	d102      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096b8:	4b70      	ldr	r3, [pc, #448]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80096ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096bc:	e010      	b.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096be:	4b6d      	ldr	r3, [pc, #436]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096ca:	d106      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80096cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096d2:	d102      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096d4:	4b6a      	ldr	r3, [pc, #424]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80096d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096d8:	e002      	b.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80096de:	e122      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096e0:	e121      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e6:	e11e      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80096e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ec:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80096f0:	430b      	orrs	r3, r1
 80096f2:	d133      	bne.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80096f4:	4b5f      	ldr	r3, [pc, #380]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80096fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009700:	2b00      	cmp	r3, #0
 8009702:	d004      	beq.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800970a:	d012      	beq.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800970c:	e023      	b.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800970e:	4b59      	ldr	r3, [pc, #356]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009716:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800971a:	d107      	bne.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800971c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fbc7 	bl	8009eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800972a:	e0fc      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800972c:	2300      	movs	r3, #0
 800972e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009730:	e0f9      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009732:	4b50      	ldr	r3, [pc, #320]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800973a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800973e:	d107      	bne.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009740:	f107 0318 	add.w	r3, r7, #24
 8009744:	4618      	mov	r0, r3
 8009746:	f000 f90d 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974e:	e0ea      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009754:	e0e7      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800975a:	e0e4      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800975c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009760:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009764:	430b      	orrs	r3, r1
 8009766:	f040 808d 	bne.w	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800976a:	4b42      	ldr	r3, [pc, #264]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800976c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800976e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009772:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009776:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800977a:	d06b      	beq.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800977c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009782:	d874      	bhi.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800978a:	d056      	beq.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800978c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009792:	d86c      	bhi.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009796:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800979a:	d03b      	beq.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800979c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097a2:	d864      	bhi.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097aa:	d021      	beq.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80097ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097b2:	d85c      	bhi.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d004      	beq.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80097ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097c0:	d004      	beq.n	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80097c2:	e054      	b.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80097c4:	f000 f8b8 	bl	8009938 <HAL_RCCEx_GetD3PCLK1Freq>
 80097c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097ca:	e0ac      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097cc:	4b29      	ldr	r3, [pc, #164]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097d8:	d107      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097da:	f107 0318 	add.w	r3, r7, #24
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 f8c0 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097e8:	e09d      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ee:	e09a      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097f0:	4b20      	ldr	r3, [pc, #128]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097fc:	d107      	bne.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097fe:	f107 030c 	add.w	r3, r7, #12
 8009802:	4618      	mov	r0, r3
 8009804:	f000 fa02 	bl	8009c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800980c:	e08b      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009812:	e088      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009814:	4b17      	ldr	r3, [pc, #92]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 0304 	and.w	r3, r3, #4
 800981c:	2b04      	cmp	r3, #4
 800981e:	d109      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009820:	4b14      	ldr	r3, [pc, #80]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	08db      	lsrs	r3, r3, #3
 8009826:	f003 0303 	and.w	r3, r3, #3
 800982a:	4a13      	ldr	r2, [pc, #76]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800982c:	fa22 f303 	lsr.w	r3, r2, r3
 8009830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009832:	e078      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009838:	e075      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800983a:	4b0e      	ldr	r3, [pc, #56]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009846:	d102      	bne.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009848:	4b0c      	ldr	r3, [pc, #48]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800984a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800984c:	e06b      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009852:	e068      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009854:	4b07      	ldr	r3, [pc, #28]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800985c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009860:	d102      	bne.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009862:	4b07      	ldr	r3, [pc, #28]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009866:	e05e      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009868:	2300      	movs	r3, #0
 800986a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800986c:	e05b      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009872:	e058      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009874:	58024400 	.word	0x58024400
 8009878:	03d09000 	.word	0x03d09000
 800987c:	003d0900 	.word	0x003d0900
 8009880:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009888:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800988c:	430b      	orrs	r3, r1
 800988e:	d148      	bne.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009890:	4b27      	ldr	r3, [pc, #156]	@ (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009894:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009898:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800989a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098a0:	d02a      	beq.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80098a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098a8:	d838      	bhi.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80098aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d004      	beq.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80098b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098b6:	d00d      	beq.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80098b8:	e030      	b.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098c6:	d102      	bne.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80098c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009934 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80098ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098cc:	e02b      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098d2:	e028      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098d4:	4b16      	ldr	r3, [pc, #88]	@ (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098e0:	d107      	bne.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 fae4 	bl	8009eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098f0:	e019      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f6:	e016      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009900:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009904:	d107      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009906:	f107 0318 	add.w	r3, r7, #24
 800990a:	4618      	mov	r0, r3
 800990c:	f000 f82a 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009914:	e007      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800991a:	e004      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800991c:	2300      	movs	r3, #0
 800991e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009920:	e001      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009928:	4618      	mov	r0, r3
 800992a:	3740      	adds	r7, #64	@ 0x40
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	58024400 	.word	0x58024400
 8009934:	007a1200 	.word	0x007a1200

08009938 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800993c:	f7fd ffd4 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 8009940:	4602      	mov	r2, r0
 8009942:	4b06      	ldr	r3, [pc, #24]	@ (800995c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	091b      	lsrs	r3, r3, #4
 8009948:	f003 0307 	and.w	r3, r3, #7
 800994c:	4904      	ldr	r1, [pc, #16]	@ (8009960 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800994e:	5ccb      	ldrb	r3, [r1, r3]
 8009950:	f003 031f 	and.w	r3, r3, #31
 8009954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009958:	4618      	mov	r0, r3
 800995a:	bd80      	pop	{r7, pc}
 800995c:	58024400 	.word	0x58024400
 8009960:	0801404c 	.word	0x0801404c

08009964 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009964:	b480      	push	{r7}
 8009966:	b089      	sub	sp, #36	@ 0x24
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800996c:	4ba1      	ldr	r3, [pc, #644]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800996e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009970:	f003 0303 	and.w	r3, r3, #3
 8009974:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009976:	4b9f      	ldr	r3, [pc, #636]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800997a:	0b1b      	lsrs	r3, r3, #12
 800997c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009980:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009982:	4b9c      	ldr	r3, [pc, #624]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009986:	091b      	lsrs	r3, r3, #4
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800998e:	4b99      	ldr	r3, [pc, #612]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009992:	08db      	lsrs	r3, r3, #3
 8009994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	fb02 f303 	mul.w	r3, r2, r3
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 8111 	beq.w	8009bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	f000 8083 	beq.w	8009ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	2b02      	cmp	r3, #2
 80099be:	f200 80a1 	bhi.w	8009b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d003      	beq.n	80099d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d056      	beq.n	8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80099ce:	e099      	b.n	8009b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099d0:	4b88      	ldr	r3, [pc, #544]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0320 	and.w	r3, r3, #32
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d02d      	beq.n	8009a38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099dc:	4b85      	ldr	r3, [pc, #532]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	08db      	lsrs	r3, r3, #3
 80099e2:	f003 0303 	and.w	r3, r3, #3
 80099e6:	4a84      	ldr	r2, [pc, #528]	@ (8009bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80099e8:	fa22 f303 	lsr.w	r3, r2, r3
 80099ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	ee07 3a90 	vmov	s15, r3
 80099f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a06:	4b7b      	ldr	r3, [pc, #492]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a36:	e087      	b.n	8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	ee07 3a90 	vmov	s15, r3
 8009a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a7a:	e065      	b.n	8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a8e:	4b59      	ldr	r3, [pc, #356]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a96:	ee07 3a90 	vmov	s15, r3
 8009a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aa2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009abe:	e043      	b.n	8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ad2:	4b48      	ldr	r3, [pc, #288]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ada:	ee07 3a90 	vmov	s15, r3
 8009ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ae6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b02:	e021      	b.n	8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b16:	4b37      	ldr	r3, [pc, #220]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009b48:	4b2a      	ldr	r3, [pc, #168]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b4c:	0a5b      	lsrs	r3, r3, #9
 8009b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b52:	ee07 3a90 	vmov	s15, r3
 8009b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b6e:	ee17 2a90 	vmov	r2, s15
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009b76:	4b1f      	ldr	r3, [pc, #124]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7a:	0c1b      	lsrs	r3, r3, #16
 8009b7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b80:	ee07 3a90 	vmov	s15, r3
 8009b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b90:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b9c:	ee17 2a90 	vmov	r2, s15
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009ba4:	4b13      	ldr	r3, [pc, #76]	@ (8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba8:	0e1b      	lsrs	r3, r3, #24
 8009baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bae:	ee07 3a90 	vmov	s15, r3
 8009bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bca:	ee17 2a90 	vmov	r2, s15
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009bd2:	e008      	b.n	8009be6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	609a      	str	r2, [r3, #8]
}
 8009be6:	bf00      	nop
 8009be8:	3724      	adds	r7, #36	@ 0x24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	58024400 	.word	0x58024400
 8009bf8:	03d09000 	.word	0x03d09000
 8009bfc:	46000000 	.word	0x46000000
 8009c00:	4c742400 	.word	0x4c742400
 8009c04:	4a742400 	.word	0x4a742400
 8009c08:	4af42400 	.word	0x4af42400

08009c0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b089      	sub	sp, #36	@ 0x24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c14:	4ba1      	ldr	r3, [pc, #644]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c18:	f003 0303 	and.w	r3, r3, #3
 8009c1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009c1e:	4b9f      	ldr	r3, [pc, #636]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c22:	0d1b      	lsrs	r3, r3, #20
 8009c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c2a:	4b9c      	ldr	r3, [pc, #624]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2e:	0a1b      	lsrs	r3, r3, #8
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009c36:	4b99      	ldr	r3, [pc, #612]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c3a:	08db      	lsrs	r3, r3, #3
 8009c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	fb02 f303 	mul.w	r3, r2, r3
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 8111 	beq.w	8009e7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	f000 8083 	beq.w	8009d68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	f200 80a1 	bhi.w	8009dac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d003      	beq.n	8009c78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d056      	beq.n	8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009c76:	e099      	b.n	8009dac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c78:	4b88      	ldr	r3, [pc, #544]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0320 	and.w	r3, r3, #32
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d02d      	beq.n	8009ce0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c84:	4b85      	ldr	r3, [pc, #532]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	08db      	lsrs	r3, r3, #3
 8009c8a:	f003 0303 	and.w	r3, r3, #3
 8009c8e:	4a84      	ldr	r2, [pc, #528]	@ (8009ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009c90:	fa22 f303 	lsr.w	r3, r2, r3
 8009c94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	ee07 3a90 	vmov	s15, r3
 8009c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cae:	4b7b      	ldr	r3, [pc, #492]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009cde:	e087      	b.n	8009df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	ee07 3a90 	vmov	s15, r3
 8009ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfa:	ee07 3a90 	vmov	s15, r3
 8009cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d22:	e065      	b.n	8009df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009eac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d36:	4b59      	ldr	r3, [pc, #356]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3e:	ee07 3a90 	vmov	s15, r3
 8009d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d66:	e043      	b.n	8009df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	ee07 3a90 	vmov	s15, r3
 8009d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d7a:	4b48      	ldr	r3, [pc, #288]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009daa:	e021      	b.n	8009df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	ee07 3a90 	vmov	s15, r3
 8009db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009eac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dbe:	4b37      	ldr	r3, [pc, #220]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc6:	ee07 3a90 	vmov	s15, r3
 8009dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009df0:	4b2a      	ldr	r3, [pc, #168]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df4:	0a5b      	lsrs	r3, r3, #9
 8009df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dfa:	ee07 3a90 	vmov	s15, r3
 8009dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e16:	ee17 2a90 	vmov	r2, s15
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e22:	0c1b      	lsrs	r3, r3, #16
 8009e24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e28:	ee07 3a90 	vmov	s15, r3
 8009e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e38:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e44:	ee17 2a90 	vmov	r2, s15
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009e4c:	4b13      	ldr	r3, [pc, #76]	@ (8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e50:	0e1b      	lsrs	r3, r3, #24
 8009e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e72:	ee17 2a90 	vmov	r2, s15
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009e7a:	e008      	b.n	8009e8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	609a      	str	r2, [r3, #8]
}
 8009e8e:	bf00      	nop
 8009e90:	3724      	adds	r7, #36	@ 0x24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	58024400 	.word	0x58024400
 8009ea0:	03d09000 	.word	0x03d09000
 8009ea4:	46000000 	.word	0x46000000
 8009ea8:	4c742400 	.word	0x4c742400
 8009eac:	4a742400 	.word	0x4a742400
 8009eb0:	4af42400 	.word	0x4af42400

08009eb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b089      	sub	sp, #36	@ 0x24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ebc:	4ba0      	ldr	r3, [pc, #640]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec0:	f003 0303 	and.w	r3, r3, #3
 8009ec4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009ec6:	4b9e      	ldr	r3, [pc, #632]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eca:	091b      	lsrs	r3, r3, #4
 8009ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ed0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009ed2:	4b9b      	ldr	r3, [pc, #620]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009edc:	4b98      	ldr	r3, [pc, #608]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ee0:	08db      	lsrs	r3, r3, #3
 8009ee2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	fb02 f303 	mul.w	r3, r2, r3
 8009eec:	ee07 3a90 	vmov	s15, r3
 8009ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 8111 	beq.w	800a122 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	f000 8083 	beq.w	800a00e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	f200 80a1 	bhi.w	800a052 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d056      	beq.n	8009fca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f1c:	e099      	b.n	800a052 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f1e:	4b88      	ldr	r3, [pc, #544]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0320 	and.w	r3, r3, #32
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d02d      	beq.n	8009f86 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f2a:	4b85      	ldr	r3, [pc, #532]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	08db      	lsrs	r3, r3, #3
 8009f30:	f003 0303 	and.w	r3, r3, #3
 8009f34:	4a83      	ldr	r2, [pc, #524]	@ (800a144 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009f36:	fa22 f303 	lsr.w	r3, r2, r3
 8009f3a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	ee07 3a90 	vmov	s15, r3
 8009f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	ee07 3a90 	vmov	s15, r3
 8009f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f54:	4b7a      	ldr	r3, [pc, #488]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f5c:	ee07 3a90 	vmov	s15, r3
 8009f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f64:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f68:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f80:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f84:	e087      	b.n	800a096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	ee07 3a90 	vmov	s15, r3
 8009f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f90:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f98:	4b69      	ldr	r3, [pc, #420]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa0:	ee07 3a90 	vmov	s15, r3
 8009fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fac:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fc8:	e065      	b.n	800a096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	ee07 3a90 	vmov	s15, r3
 8009fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a150 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fdc:	4b58      	ldr	r3, [pc, #352]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe4:	ee07 3a90 	vmov	s15, r3
 8009fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fec:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ff0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a004:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a008:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a00c:	e043      	b.n	800a096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	ee07 3a90 	vmov	s15, r3
 800a014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a018:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a154 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a01c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a020:	4b47      	ldr	r3, [pc, #284]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a028:	ee07 3a90 	vmov	s15, r3
 800a02c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a030:	ed97 6a03 	vldr	s12, [r7, #12]
 800a034:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a03c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a04c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a050:	e021      	b.n	800a096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	ee07 3a90 	vmov	s15, r3
 800a058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a05c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a064:	4b36      	ldr	r3, [pc, #216]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a06c:	ee07 3a90 	vmov	s15, r3
 800a070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a074:	ed97 6a03 	vldr	s12, [r7, #12]
 800a078:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a07c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a084:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a08c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a090:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a094:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a096:	4b2a      	ldr	r3, [pc, #168]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a09a:	0a5b      	lsrs	r3, r3, #9
 800a09c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0a0:	ee07 3a90 	vmov	s15, r3
 800a0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0bc:	ee17 2a90 	vmov	r2, s15
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a0c4:	4b1e      	ldr	r3, [pc, #120]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0c8:	0c1b      	lsrs	r3, r3, #16
 800a0ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ce:	ee07 3a90 	vmov	s15, r3
 800a0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ea:	ee17 2a90 	vmov	r2, s15
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a0f2:	4b13      	ldr	r3, [pc, #76]	@ (800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f6:	0e1b      	lsrs	r3, r3, #24
 800a0f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0fc:	ee07 3a90 	vmov	s15, r3
 800a100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a104:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a10c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a118:	ee17 2a90 	vmov	r2, s15
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a120:	e008      	b.n	800a134 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	609a      	str	r2, [r3, #8]
}
 800a134:	bf00      	nop
 800a136:	3724      	adds	r7, #36	@ 0x24
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	58024400 	.word	0x58024400
 800a144:	03d09000 	.word	0x03d09000
 800a148:	46000000 	.word	0x46000000
 800a14c:	4c742400 	.word	0x4c742400
 800a150:	4a742400 	.word	0x4a742400
 800a154:	4af42400 	.word	0x4af42400

0800a158 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a166:	4b53      	ldr	r3, [pc, #332]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a16a:	f003 0303 	and.w	r3, r3, #3
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d101      	bne.n	800a176 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e099      	b.n	800a2aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a176:	4b4f      	ldr	r3, [pc, #316]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a4e      	ldr	r2, [pc, #312]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a17c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a182:	f7f7 ffbb 	bl	80020fc <HAL_GetTick>
 800a186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a188:	e008      	b.n	800a19c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a18a:	f7f7 ffb7 	bl	80020fc <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	2b02      	cmp	r3, #2
 800a196:	d901      	bls.n	800a19c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e086      	b.n	800a2aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a19c:	4b45      	ldr	r3, [pc, #276]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1f0      	bne.n	800a18a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a1a8:	4b42      	ldr	r3, [pc, #264]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	031b      	lsls	r3, r3, #12
 800a1b6:	493f      	ldr	r1, [pc, #252]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	628b      	str	r3, [r1, #40]	@ 0x28
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	025b      	lsls	r3, r3, #9
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	431a      	orrs	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	041b      	lsls	r3, r3, #16
 800a1da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a1de:	431a      	orrs	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	061b      	lsls	r3, r3, #24
 800a1e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a1ec:	4931      	ldr	r1, [pc, #196]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a1f2:	4b30      	ldr	r3, [pc, #192]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	492d      	ldr	r1, [pc, #180]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a200:	4313      	orrs	r3, r2
 800a202:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a204:	4b2b      	ldr	r3, [pc, #172]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a208:	f023 0220 	bic.w	r2, r3, #32
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	4928      	ldr	r1, [pc, #160]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a212:	4313      	orrs	r3, r2
 800a214:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a216:	4b27      	ldr	r3, [pc, #156]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21a:	4a26      	ldr	r2, [pc, #152]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a21c:	f023 0310 	bic.w	r3, r3, #16
 800a220:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a222:	4b24      	ldr	r3, [pc, #144]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a226:	4b24      	ldr	r3, [pc, #144]	@ (800a2b8 <RCCEx_PLL2_Config+0x160>)
 800a228:	4013      	ands	r3, r2
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	69d2      	ldr	r2, [r2, #28]
 800a22e:	00d2      	lsls	r2, r2, #3
 800a230:	4920      	ldr	r1, [pc, #128]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a232:	4313      	orrs	r3, r2
 800a234:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a236:	4b1f      	ldr	r3, [pc, #124]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a23a:	4a1e      	ldr	r2, [pc, #120]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a23c:	f043 0310 	orr.w	r3, r3, #16
 800a240:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d106      	bne.n	800a256 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a248:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a24c:	4a19      	ldr	r2, [pc, #100]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a24e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a254:	e00f      	b.n	800a276 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d106      	bne.n	800a26a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a25c:	4b15      	ldr	r3, [pc, #84]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a260:	4a14      	ldr	r2, [pc, #80]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a266:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a268:	e005      	b.n	800a276 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a26a:	4b12      	ldr	r3, [pc, #72]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a26e:	4a11      	ldr	r2, [pc, #68]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a270:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a274:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a276:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a0e      	ldr	r2, [pc, #56]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a27c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a282:	f7f7 ff3b 	bl	80020fc <HAL_GetTick>
 800a286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a288:	e008      	b.n	800a29c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a28a:	f7f7 ff37 	bl	80020fc <HAL_GetTick>
 800a28e:	4602      	mov	r2, r0
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	2b02      	cmp	r3, #2
 800a296:	d901      	bls.n	800a29c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e006      	b.n	800a2aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a29c:	4b05      	ldr	r3, [pc, #20]	@ (800a2b4 <RCCEx_PLL2_Config+0x15c>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d0f0      	beq.n	800a28a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	58024400 	.word	0x58024400
 800a2b8:	ffff0007 	.word	0xffff0007

0800a2bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2ca:	4b53      	ldr	r3, [pc, #332]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ce:	f003 0303 	and.w	r3, r3, #3
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d101      	bne.n	800a2da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e099      	b.n	800a40e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a2da:	4b4f      	ldr	r3, [pc, #316]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a4e      	ldr	r2, [pc, #312]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a2e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2e6:	f7f7 ff09 	bl	80020fc <HAL_GetTick>
 800a2ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2ec:	e008      	b.n	800a300 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2ee:	f7f7 ff05 	bl	80020fc <HAL_GetTick>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d901      	bls.n	800a300 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e086      	b.n	800a40e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a300:	4b45      	ldr	r3, [pc, #276]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1f0      	bne.n	800a2ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a30c:	4b42      	ldr	r3, [pc, #264]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a310:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	051b      	lsls	r3, r3, #20
 800a31a:	493f      	ldr	r1, [pc, #252]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a31c:	4313      	orrs	r3, r2
 800a31e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	3b01      	subs	r3, #1
 800a326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	3b01      	subs	r3, #1
 800a330:	025b      	lsls	r3, r3, #9
 800a332:	b29b      	uxth	r3, r3
 800a334:	431a      	orrs	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	041b      	lsls	r3, r3, #16
 800a33e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	3b01      	subs	r3, #1
 800a34a:	061b      	lsls	r3, r3, #24
 800a34c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a350:	4931      	ldr	r1, [pc, #196]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a352:	4313      	orrs	r3, r2
 800a354:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a356:	4b30      	ldr	r3, [pc, #192]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a35a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	492d      	ldr	r1, [pc, #180]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a364:	4313      	orrs	r3, r2
 800a366:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a368:	4b2b      	ldr	r3, [pc, #172]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	4928      	ldr	r1, [pc, #160]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a376:	4313      	orrs	r3, r2
 800a378:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a37a:	4b27      	ldr	r3, [pc, #156]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37e:	4a26      	ldr	r2, [pc, #152]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a384:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a386:	4b24      	ldr	r3, [pc, #144]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a38a:	4b24      	ldr	r3, [pc, #144]	@ (800a41c <RCCEx_PLL3_Config+0x160>)
 800a38c:	4013      	ands	r3, r2
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	69d2      	ldr	r2, [r2, #28]
 800a392:	00d2      	lsls	r2, r2, #3
 800a394:	4920      	ldr	r1, [pc, #128]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a396:	4313      	orrs	r3, r2
 800a398:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a39a:	4b1f      	ldr	r3, [pc, #124]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a39e:	4a1e      	ldr	r2, [pc, #120]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a3a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d106      	bne.n	800a3ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a3ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b0:	4a19      	ldr	r2, [pc, #100]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a3b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a3b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a3b8:	e00f      	b.n	800a3da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d106      	bne.n	800a3ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a3c0:	4b15      	ldr	r3, [pc, #84]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c4:	4a14      	ldr	r2, [pc, #80]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a3c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a3ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a3cc:	e005      	b.n	800a3da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a3ce:	4b12      	ldr	r3, [pc, #72]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d2:	4a11      	ldr	r2, [pc, #68]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a3d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a3d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a3da:	4b0f      	ldr	r3, [pc, #60]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a0e      	ldr	r2, [pc, #56]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a3e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3e6:	f7f7 fe89 	bl	80020fc <HAL_GetTick>
 800a3ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3ec:	e008      	b.n	800a400 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a3ee:	f7f7 fe85 	bl	80020fc <HAL_GetTick>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d901      	bls.n	800a400 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e006      	b.n	800a40e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a400:	4b05      	ldr	r3, [pc, #20]	@ (800a418 <RCCEx_PLL3_Config+0x15c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d0f0      	beq.n	800a3ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	58024400 	.word	0x58024400
 800a41c:	ffff0007 	.word	0xffff0007

0800a420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e049      	b.n	800a4c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d106      	bne.n	800a44c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f841 	bl	800a4ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2202      	movs	r2, #2
 800a450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3304      	adds	r3, #4
 800a45c:	4619      	mov	r1, r3
 800a45e:	4610      	mov	r0, r2
 800a460:	f000 f9e8 	bl	800a834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a4d6:	bf00      	nop
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
	...

0800a4e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d001      	beq.n	800a4fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e054      	b.n	800a5a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2202      	movs	r2, #2
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68da      	ldr	r2, [r3, #12]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f042 0201 	orr.w	r2, r2, #1
 800a512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a26      	ldr	r2, [pc, #152]	@ (800a5b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d022      	beq.n	800a564 <HAL_TIM_Base_Start_IT+0x80>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a526:	d01d      	beq.n	800a564 <HAL_TIM_Base_Start_IT+0x80>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a22      	ldr	r2, [pc, #136]	@ (800a5b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d018      	beq.n	800a564 <HAL_TIM_Base_Start_IT+0x80>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a21      	ldr	r2, [pc, #132]	@ (800a5bc <HAL_TIM_Base_Start_IT+0xd8>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d013      	beq.n	800a564 <HAL_TIM_Base_Start_IT+0x80>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a1f      	ldr	r2, [pc, #124]	@ (800a5c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d00e      	beq.n	800a564 <HAL_TIM_Base_Start_IT+0x80>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a1e      	ldr	r2, [pc, #120]	@ (800a5c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d009      	beq.n	800a564 <HAL_TIM_Base_Start_IT+0x80>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a1c      	ldr	r2, [pc, #112]	@ (800a5c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d004      	beq.n	800a564 <HAL_TIM_Base_Start_IT+0x80>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a1b      	ldr	r2, [pc, #108]	@ (800a5cc <HAL_TIM_Base_Start_IT+0xe8>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d115      	bne.n	800a590 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689a      	ldr	r2, [r3, #8]
 800a56a:	4b19      	ldr	r3, [pc, #100]	@ (800a5d0 <HAL_TIM_Base_Start_IT+0xec>)
 800a56c:	4013      	ands	r3, r2
 800a56e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2b06      	cmp	r3, #6
 800a574:	d015      	beq.n	800a5a2 <HAL_TIM_Base_Start_IT+0xbe>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a57c:	d011      	beq.n	800a5a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f042 0201 	orr.w	r2, r2, #1
 800a58c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a58e:	e008      	b.n	800a5a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f042 0201 	orr.w	r2, r2, #1
 800a59e:	601a      	str	r2, [r3, #0]
 800a5a0:	e000      	b.n	800a5a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	40010000 	.word	0x40010000
 800a5b8:	40000400 	.word	0x40000400
 800a5bc:	40000800 	.word	0x40000800
 800a5c0:	40000c00 	.word	0x40000c00
 800a5c4:	40010400 	.word	0x40010400
 800a5c8:	40001800 	.word	0x40001800
 800a5cc:	40014000 	.word	0x40014000
 800a5d0:	00010007 	.word	0x00010007

0800a5d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	f003 0302 	and.w	r3, r3, #2
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d020      	beq.n	800a638 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f003 0302 	and.w	r3, r3, #2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d01b      	beq.n	800a638 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f06f 0202 	mvn.w	r2, #2
 800a608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	f003 0303 	and.w	r3, r3, #3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d003      	beq.n	800a626 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f8e9 	bl	800a7f6 <HAL_TIM_IC_CaptureCallback>
 800a624:	e005      	b.n	800a632 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f8db 	bl	800a7e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f8ec 	bl	800a80a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f003 0304 	and.w	r3, r3, #4
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d020      	beq.n	800a684 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f003 0304 	and.w	r3, r3, #4
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d01b      	beq.n	800a684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f06f 0204 	mvn.w	r2, #4
 800a654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2202      	movs	r2, #2
 800a65a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a666:	2b00      	cmp	r3, #0
 800a668:	d003      	beq.n	800a672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f8c3 	bl	800a7f6 <HAL_TIM_IC_CaptureCallback>
 800a670:	e005      	b.n	800a67e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f8b5 	bl	800a7e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f8c6 	bl	800a80a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f003 0308 	and.w	r3, r3, #8
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d020      	beq.n	800a6d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f003 0308 	and.w	r3, r3, #8
 800a694:	2b00      	cmp	r3, #0
 800a696:	d01b      	beq.n	800a6d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f06f 0208 	mvn.w	r2, #8
 800a6a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2204      	movs	r2, #4
 800a6a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	f003 0303 	and.w	r3, r3, #3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d003      	beq.n	800a6be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f89d 	bl	800a7f6 <HAL_TIM_IC_CaptureCallback>
 800a6bc:	e005      	b.n	800a6ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f88f 	bl	800a7e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f8a0 	bl	800a80a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f003 0310 	and.w	r3, r3, #16
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d020      	beq.n	800a71c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f003 0310 	and.w	r3, r3, #16
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d01b      	beq.n	800a71c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f06f 0210 	mvn.w	r2, #16
 800a6ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2208      	movs	r2, #8
 800a6f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d003      	beq.n	800a70a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f877 	bl	800a7f6 <HAL_TIM_IC_CaptureCallback>
 800a708:	e005      	b.n	800a716 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f869 	bl	800a7e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 f87a 	bl	800a80a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f003 0301 	and.w	r3, r3, #1
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00c      	beq.n	800a740 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f003 0301 	and.w	r3, r3, #1
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d007      	beq.n	800a740 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f06f 0201 	mvn.w	r2, #1
 800a738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f7f6 fccc 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a746:	2b00      	cmp	r3, #0
 800a748:	d104      	bne.n	800a754 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00c      	beq.n	800a76e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d007      	beq.n	800a76e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f913 	bl	800a994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00c      	beq.n	800a792 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d007      	beq.n	800a792 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a78a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f90b 	bl	800a9a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00c      	beq.n	800a7b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d007      	beq.n	800a7b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 f834 	bl	800a81e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	f003 0320 	and.w	r3, r3, #32
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00c      	beq.n	800a7da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f003 0320 	and.w	r3, r3, #32
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d007      	beq.n	800a7da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f06f 0220 	mvn.w	r2, #32
 800a7d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 f8d3 	bl	800a980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7da:	bf00      	nop
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7e2:	b480      	push	{r7}
 800a7e4:	b083      	sub	sp, #12
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7ea:	bf00      	nop
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7fe:	bf00      	nop
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b083      	sub	sp, #12
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a812:	bf00      	nop
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a81e:	b480      	push	{r7}
 800a820:	b083      	sub	sp, #12
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a826:	bf00      	nop
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
	...

0800a834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a46      	ldr	r2, [pc, #280]	@ (800a960 <TIM_Base_SetConfig+0x12c>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d013      	beq.n	800a874 <TIM_Base_SetConfig+0x40>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a852:	d00f      	beq.n	800a874 <TIM_Base_SetConfig+0x40>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a43      	ldr	r2, [pc, #268]	@ (800a964 <TIM_Base_SetConfig+0x130>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d00b      	beq.n	800a874 <TIM_Base_SetConfig+0x40>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a42      	ldr	r2, [pc, #264]	@ (800a968 <TIM_Base_SetConfig+0x134>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d007      	beq.n	800a874 <TIM_Base_SetConfig+0x40>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a41      	ldr	r2, [pc, #260]	@ (800a96c <TIM_Base_SetConfig+0x138>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d003      	beq.n	800a874 <TIM_Base_SetConfig+0x40>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a40      	ldr	r2, [pc, #256]	@ (800a970 <TIM_Base_SetConfig+0x13c>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d108      	bne.n	800a886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a87a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	4313      	orrs	r3, r2
 800a884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a35      	ldr	r2, [pc, #212]	@ (800a960 <TIM_Base_SetConfig+0x12c>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d01f      	beq.n	800a8ce <TIM_Base_SetConfig+0x9a>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a894:	d01b      	beq.n	800a8ce <TIM_Base_SetConfig+0x9a>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a32      	ldr	r2, [pc, #200]	@ (800a964 <TIM_Base_SetConfig+0x130>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d017      	beq.n	800a8ce <TIM_Base_SetConfig+0x9a>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a31      	ldr	r2, [pc, #196]	@ (800a968 <TIM_Base_SetConfig+0x134>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d013      	beq.n	800a8ce <TIM_Base_SetConfig+0x9a>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a30      	ldr	r2, [pc, #192]	@ (800a96c <TIM_Base_SetConfig+0x138>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d00f      	beq.n	800a8ce <TIM_Base_SetConfig+0x9a>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a2f      	ldr	r2, [pc, #188]	@ (800a970 <TIM_Base_SetConfig+0x13c>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d00b      	beq.n	800a8ce <TIM_Base_SetConfig+0x9a>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a2e      	ldr	r2, [pc, #184]	@ (800a974 <TIM_Base_SetConfig+0x140>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d007      	beq.n	800a8ce <TIM_Base_SetConfig+0x9a>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a2d      	ldr	r2, [pc, #180]	@ (800a978 <TIM_Base_SetConfig+0x144>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d003      	beq.n	800a8ce <TIM_Base_SetConfig+0x9a>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a2c      	ldr	r2, [pc, #176]	@ (800a97c <TIM_Base_SetConfig+0x148>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d108      	bne.n	800a8e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a16      	ldr	r2, [pc, #88]	@ (800a960 <TIM_Base_SetConfig+0x12c>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d00f      	beq.n	800a92c <TIM_Base_SetConfig+0xf8>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a18      	ldr	r2, [pc, #96]	@ (800a970 <TIM_Base_SetConfig+0x13c>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d00b      	beq.n	800a92c <TIM_Base_SetConfig+0xf8>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a17      	ldr	r2, [pc, #92]	@ (800a974 <TIM_Base_SetConfig+0x140>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d007      	beq.n	800a92c <TIM_Base_SetConfig+0xf8>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a16      	ldr	r2, [pc, #88]	@ (800a978 <TIM_Base_SetConfig+0x144>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d003      	beq.n	800a92c <TIM_Base_SetConfig+0xf8>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a15      	ldr	r2, [pc, #84]	@ (800a97c <TIM_Base_SetConfig+0x148>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d103      	bne.n	800a934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	691a      	ldr	r2, [r3, #16]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	2b01      	cmp	r3, #1
 800a944:	d105      	bne.n	800a952 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	f023 0201 	bic.w	r2, r3, #1
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	611a      	str	r2, [r3, #16]
  }
}
 800a952:	bf00      	nop
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	40010000 	.word	0x40010000
 800a964:	40000400 	.word	0x40000400
 800a968:	40000800 	.word	0x40000800
 800a96c:	40000c00 	.word	0x40000c00
 800a970:	40010400 	.word	0x40010400
 800a974:	40014000 	.word	0x40014000
 800a978:	40014400 	.word	0x40014400
 800a97c:	40014800 	.word	0x40014800

0800a980 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e042      	b.n	800aa54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d106      	bne.n	800a9e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7f7 f84f 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2224      	movs	r2, #36	@ 0x24
 800a9ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0201 	bic.w	r2, r2, #1
 800a9fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d002      	beq.n	800aa0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 fa4a 	bl	800bea0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fcdf 	bl	800b3d0 <UART_SetConfig>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d101      	bne.n	800aa1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e01b      	b.n	800aa54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	689a      	ldr	r2, [r3, #8]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aa3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f042 0201 	orr.w	r2, r2, #1
 800aa4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f001 fac9 	bl	800bfe4 <UART_CheckIdleState>
 800aa52:	4603      	mov	r3, r0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b08a      	sub	sp, #40	@ 0x28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	4613      	mov	r3, r2
 800aa68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa70:	2b20      	cmp	r3, #32
 800aa72:	d167      	bne.n	800ab44 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d002      	beq.n	800aa80 <HAL_UART_Transmit_DMA+0x24>
 800aa7a:	88fb      	ldrh	r3, [r7, #6]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e060      	b.n	800ab46 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	88fa      	ldrh	r2, [r7, #6]
 800aa8e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	88fa      	ldrh	r2, [r7, #6]
 800aa96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2221      	movs	r2, #33	@ 0x21
 800aaa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d028      	beq.n	800ab04 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aab6:	4a26      	ldr	r2, [pc, #152]	@ (800ab50 <HAL_UART_Transmit_DMA+0xf4>)
 800aab8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aabe:	4a25      	ldr	r2, [pc, #148]	@ (800ab54 <HAL_UART_Transmit_DMA+0xf8>)
 800aac0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aac6:	4a24      	ldr	r2, [pc, #144]	@ (800ab58 <HAL_UART_Transmit_DMA+0xfc>)
 800aac8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aace:	2200      	movs	r2, #0
 800aad0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aada:	4619      	mov	r1, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3328      	adds	r3, #40	@ 0x28
 800aae2:	461a      	mov	r2, r3
 800aae4:	88fb      	ldrh	r3, [r7, #6]
 800aae6:	f7f9 fa77 	bl	8003fd8 <HAL_DMA_Start_IT>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d009      	beq.n	800ab04 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2210      	movs	r2, #16
 800aaf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2220      	movs	r2, #32
 800aafc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	e020      	b.n	800ab46 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2240      	movs	r2, #64	@ 0x40
 800ab0a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3308      	adds	r3, #8
 800ab12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	e853 3f00 	ldrex	r3, [r3]
 800ab1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab22:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3308      	adds	r3, #8
 800ab2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab2c:	623a      	str	r2, [r7, #32]
 800ab2e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab30:	69f9      	ldr	r1, [r7, #28]
 800ab32:	6a3a      	ldr	r2, [r7, #32]
 800ab34:	e841 2300 	strex	r3, r2, [r1]
 800ab38:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1e5      	bne.n	800ab0c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	e000      	b.n	800ab46 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ab44:	2302      	movs	r3, #2
  }
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3728      	adds	r7, #40	@ 0x28
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	0800c4b1 	.word	0x0800c4b1
 800ab54:	0800c547 	.word	0x0800c547
 800ab58:	0800c6c9 	.word	0x0800c6c9

0800ab5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b08a      	sub	sp, #40	@ 0x28
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	4613      	mov	r3, r2
 800ab68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab70:	2b20      	cmp	r3, #32
 800ab72:	d137      	bne.n	800abe4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d002      	beq.n	800ab80 <HAL_UART_Receive_DMA+0x24>
 800ab7a:	88fb      	ldrh	r3, [r7, #6]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e030      	b.n	800abe6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a18      	ldr	r2, [pc, #96]	@ (800abf0 <HAL_UART_Receive_DMA+0x94>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d01f      	beq.n	800abd4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d018      	beq.n	800abd4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	e853 3f00 	ldrex	r3, [r3]
 800abae:	613b      	str	r3, [r7, #16]
   return(result);
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800abb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	461a      	mov	r2, r3
 800abbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc0:	623b      	str	r3, [r7, #32]
 800abc2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc4:	69f9      	ldr	r1, [r7, #28]
 800abc6:	6a3a      	ldr	r2, [r7, #32]
 800abc8:	e841 2300 	strex	r3, r2, [r1]
 800abcc:	61bb      	str	r3, [r7, #24]
   return(result);
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1e6      	bne.n	800aba2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800abd4:	88fb      	ldrh	r3, [r7, #6]
 800abd6:	461a      	mov	r2, r3
 800abd8:	68b9      	ldr	r1, [r7, #8]
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f001 fb1a 	bl	800c214 <UART_Start_Receive_DMA>
 800abe0:	4603      	mov	r3, r0
 800abe2:	e000      	b.n	800abe6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800abe4:	2302      	movs	r3, #2
  }
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3728      	adds	r7, #40	@ 0x28
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	58000c00 	.word	0x58000c00

0800abf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b0ba      	sub	sp, #232	@ 0xe8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	69db      	ldr	r3, [r3, #28]
 800ac02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ac1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ac1e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ac22:	4013      	ands	r3, r2
 800ac24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ac28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d11b      	bne.n	800ac68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac34:	f003 0320 	and.w	r3, r3, #32
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d015      	beq.n	800ac68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac40:	f003 0320 	and.w	r3, r3, #32
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d105      	bne.n	800ac54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d009      	beq.n	800ac68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f000 8377 	beq.w	800b34c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	4798      	blx	r3
      }
      return;
 800ac66:	e371      	b.n	800b34c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ac68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 8123 	beq.w	800aeb8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ac72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ac76:	4b8d      	ldr	r3, [pc, #564]	@ (800aeac <HAL_UART_IRQHandler+0x2b8>)
 800ac78:	4013      	ands	r3, r2
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ac7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ac82:	4b8b      	ldr	r3, [pc, #556]	@ (800aeb0 <HAL_UART_IRQHandler+0x2bc>)
 800ac84:	4013      	ands	r3, r2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f000 8116 	beq.w	800aeb8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d011      	beq.n	800acbc <HAL_UART_IRQHandler+0xc8>
 800ac98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00b      	beq.n	800acbc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2201      	movs	r2, #1
 800acaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acb2:	f043 0201 	orr.w	r2, r3, #1
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800acbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acc0:	f003 0302 	and.w	r3, r3, #2
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d011      	beq.n	800acec <HAL_UART_IRQHandler+0xf8>
 800acc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800accc:	f003 0301 	and.w	r3, r3, #1
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00b      	beq.n	800acec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2202      	movs	r2, #2
 800acda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ace2:	f043 0204 	orr.w	r2, r3, #4
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800acec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acf0:	f003 0304 	and.w	r3, r3, #4
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d011      	beq.n	800ad1c <HAL_UART_IRQHandler+0x128>
 800acf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acfc:	f003 0301 	and.w	r3, r3, #1
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00b      	beq.n	800ad1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2204      	movs	r2, #4
 800ad0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad12:	f043 0202 	orr.w	r2, r3, #2
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ad1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad20:	f003 0308 	and.w	r3, r3, #8
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d017      	beq.n	800ad58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad2c:	f003 0320 	and.w	r3, r3, #32
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d105      	bne.n	800ad40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ad34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ad38:	4b5c      	ldr	r3, [pc, #368]	@ (800aeac <HAL_UART_IRQHandler+0x2b8>)
 800ad3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00b      	beq.n	800ad58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2208      	movs	r2, #8
 800ad46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad4e:	f043 0208 	orr.w	r2, r3, #8
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ad58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d012      	beq.n	800ad8a <HAL_UART_IRQHandler+0x196>
 800ad64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00c      	beq.n	800ad8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad80:	f043 0220 	orr.w	r2, r3, #32
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 82dd 	beq.w	800b350 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad9a:	f003 0320 	and.w	r3, r3, #32
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d013      	beq.n	800adca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ada2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ada6:	f003 0320 	and.w	r3, r3, #32
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d105      	bne.n	800adba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800adae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800adb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d007      	beq.n	800adca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800add0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adde:	2b40      	cmp	r3, #64	@ 0x40
 800ade0:	d005      	beq.n	800adee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ade2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ade6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800adea:	2b00      	cmp	r3, #0
 800adec:	d054      	beq.n	800ae98 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f001 faf8 	bl	800c3e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adfe:	2b40      	cmp	r3, #64	@ 0x40
 800ae00:	d146      	bne.n	800ae90 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	3308      	adds	r3, #8
 800ae08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ae18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3308      	adds	r3, #8
 800ae2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ae2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ae32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ae3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ae46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1d9      	bne.n	800ae02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d017      	beq.n	800ae88 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae5e:	4a15      	ldr	r2, [pc, #84]	@ (800aeb4 <HAL_UART_IRQHandler+0x2c0>)
 800ae60:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7f9 fe3d 	bl	8004ae8 <HAL_DMA_Abort_IT>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d019      	beq.n	800aea8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ae82:	4610      	mov	r0, r2
 800ae84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae86:	e00f      	b.n	800aea8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fa8b 	bl	800b3a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae8e:	e00b      	b.n	800aea8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fa87 	bl	800b3a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae96:	e007      	b.n	800aea8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fa83 	bl	800b3a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aea6:	e253      	b.n	800b350 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aea8:	bf00      	nop
    return;
 800aeaa:	e251      	b.n	800b350 <HAL_UART_IRQHandler+0x75c>
 800aeac:	10000001 	.word	0x10000001
 800aeb0:	04000120 	.word	0x04000120
 800aeb4:	0800c749 	.word	0x0800c749

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	f040 81e7 	bne.w	800b290 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aec6:	f003 0310 	and.w	r3, r3, #16
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 81e0 	beq.w	800b290 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aed4:	f003 0310 	and.w	r3, r3, #16
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 81d9 	beq.w	800b290 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2210      	movs	r2, #16
 800aee4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef0:	2b40      	cmp	r3, #64	@ 0x40
 800aef2:	f040 8151 	bne.w	800b198 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a96      	ldr	r2, [pc, #600]	@ (800b158 <HAL_UART_IRQHandler+0x564>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d068      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a93      	ldr	r2, [pc, #588]	@ (800b15c <HAL_UART_IRQHandler+0x568>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d061      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a91      	ldr	r2, [pc, #580]	@ (800b160 <HAL_UART_IRQHandler+0x56c>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d05a      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a8e      	ldr	r2, [pc, #568]	@ (800b164 <HAL_UART_IRQHandler+0x570>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d053      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a8c      	ldr	r2, [pc, #560]	@ (800b168 <HAL_UART_IRQHandler+0x574>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d04c      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a89      	ldr	r2, [pc, #548]	@ (800b16c <HAL_UART_IRQHandler+0x578>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d045      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a87      	ldr	r2, [pc, #540]	@ (800b170 <HAL_UART_IRQHandler+0x57c>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d03e      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a84      	ldr	r2, [pc, #528]	@ (800b174 <HAL_UART_IRQHandler+0x580>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d037      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a82      	ldr	r2, [pc, #520]	@ (800b178 <HAL_UART_IRQHandler+0x584>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d030      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a7f      	ldr	r2, [pc, #508]	@ (800b17c <HAL_UART_IRQHandler+0x588>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d029      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a7d      	ldr	r2, [pc, #500]	@ (800b180 <HAL_UART_IRQHandler+0x58c>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d022      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a7a      	ldr	r2, [pc, #488]	@ (800b184 <HAL_UART_IRQHandler+0x590>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d01b      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a78      	ldr	r2, [pc, #480]	@ (800b188 <HAL_UART_IRQHandler+0x594>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d014      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a75      	ldr	r2, [pc, #468]	@ (800b18c <HAL_UART_IRQHandler+0x598>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d00d      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a73      	ldr	r2, [pc, #460]	@ (800b190 <HAL_UART_IRQHandler+0x59c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d006      	beq.n	800afd6 <HAL_UART_IRQHandler+0x3e2>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a70      	ldr	r2, [pc, #448]	@ (800b194 <HAL_UART_IRQHandler+0x5a0>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d106      	bne.n	800afe4 <HAL_UART_IRQHandler+0x3f0>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	e005      	b.n	800aff0 <HAL_UART_IRQHandler+0x3fc>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	b29b      	uxth	r3, r3
 800aff0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 81ab 	beq.w	800b354 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b004:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b008:	429a      	cmp	r2, r3
 800b00a:	f080 81a3 	bcs.w	800b354 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b014:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b024:	f000 8087 	beq.w	800b136 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b030:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b034:	e853 3f00 	ldrex	r3, [r3]
 800b038:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b03c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b044:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	461a      	mov	r2, r3
 800b04e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b052:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b056:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b05e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b062:	e841 2300 	strex	r3, r2, [r1]
 800b066:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b06a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1da      	bne.n	800b028 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	3308      	adds	r3, #8
 800b078:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b07c:	e853 3f00 	ldrex	r3, [r3]
 800b080:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b084:	f023 0301 	bic.w	r3, r3, #1
 800b088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	3308      	adds	r3, #8
 800b092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b096:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b09a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b09e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b0a2:	e841 2300 	strex	r3, r2, [r1]
 800b0a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b0a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1e1      	bne.n	800b072 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3308      	adds	r3, #8
 800b0b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0b8:	e853 3f00 	ldrex	r3, [r3]
 800b0bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b0be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b0d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b0d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b0d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b0e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1e3      	bne.n	800b0ae <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2220      	movs	r2, #32
 800b0ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0fc:	e853 3f00 	ldrex	r3, [r3]
 800b100:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b104:	f023 0310 	bic.w	r3, r3, #16
 800b108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	461a      	mov	r2, r3
 800b112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b116:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b118:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b11c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b11e:	e841 2300 	strex	r3, r2, [r1]
 800b122:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1e4      	bne.n	800b0f4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b130:	4618      	mov	r0, r3
 800b132:	f7f9 f9bb 	bl	80044ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2202      	movs	r2, #2
 800b13a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b148:	b29b      	uxth	r3, r3
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f931 	bl	800b3b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b156:	e0fd      	b.n	800b354 <HAL_UART_IRQHandler+0x760>
 800b158:	40020010 	.word	0x40020010
 800b15c:	40020028 	.word	0x40020028
 800b160:	40020040 	.word	0x40020040
 800b164:	40020058 	.word	0x40020058
 800b168:	40020070 	.word	0x40020070
 800b16c:	40020088 	.word	0x40020088
 800b170:	400200a0 	.word	0x400200a0
 800b174:	400200b8 	.word	0x400200b8
 800b178:	40020410 	.word	0x40020410
 800b17c:	40020428 	.word	0x40020428
 800b180:	40020440 	.word	0x40020440
 800b184:	40020458 	.word	0x40020458
 800b188:	40020470 	.word	0x40020470
 800b18c:	40020488 	.word	0x40020488
 800b190:	400204a0 	.word	0x400204a0
 800b194:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 80cf 	beq.w	800b358 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b1ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 80ca 	beq.w	800b358 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1cc:	e853 3f00 	ldrex	r3, [r3]
 800b1d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b1e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1e8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1ee:	e841 2300 	strex	r3, r2, [r1]
 800b1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b1f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1e4      	bne.n	800b1c4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3308      	adds	r3, #8
 800b200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b204:	e853 3f00 	ldrex	r3, [r3]
 800b208:	623b      	str	r3, [r7, #32]
   return(result);
 800b20a:	6a3a      	ldr	r2, [r7, #32]
 800b20c:	4b55      	ldr	r3, [pc, #340]	@ (800b364 <HAL_UART_IRQHandler+0x770>)
 800b20e:	4013      	ands	r3, r2
 800b210:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3308      	adds	r3, #8
 800b21a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b21e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b226:	e841 2300 	strex	r3, r2, [r1]
 800b22a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1e3      	bne.n	800b1fa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2220      	movs	r2, #32
 800b236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	e853 3f00 	ldrex	r3, [r3]
 800b252:	60fb      	str	r3, [r7, #12]
   return(result);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f023 0310 	bic.w	r3, r3, #16
 800b25a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b268:	61fb      	str	r3, [r7, #28]
 800b26a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26c:	69b9      	ldr	r1, [r7, #24]
 800b26e:	69fa      	ldr	r2, [r7, #28]
 800b270:	e841 2300 	strex	r3, r2, [r1]
 800b274:	617b      	str	r3, [r7, #20]
   return(result);
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1e4      	bne.n	800b246 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2202      	movs	r2, #2
 800b280:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b282:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b286:	4619      	mov	r1, r3
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f895 	bl	800b3b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b28e:	e063      	b.n	800b358 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00e      	beq.n	800b2ba <HAL_UART_IRQHandler+0x6c6>
 800b29c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d008      	beq.n	800b2ba <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b2b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f001 fa89 	bl	800c7ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2b8:	e051      	b.n	800b35e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d014      	beq.n	800b2f0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b2c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d105      	bne.n	800b2de <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b2d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d008      	beq.n	800b2f0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d03a      	beq.n	800b35c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	4798      	blx	r3
    }
    return;
 800b2ee:	e035      	b.n	800b35c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d009      	beq.n	800b310 <HAL_UART_IRQHandler+0x71c>
 800b2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f001 fa33 	bl	800c774 <UART_EndTransmit_IT>
    return;
 800b30e:	e026      	b.n	800b35e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b314:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d009      	beq.n	800b330 <HAL_UART_IRQHandler+0x73c>
 800b31c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b320:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d003      	beq.n	800b330 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f001 fa62 	bl	800c7f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b32e:	e016      	b.n	800b35e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b334:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d010      	beq.n	800b35e <HAL_UART_IRQHandler+0x76a>
 800b33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b340:	2b00      	cmp	r3, #0
 800b342:	da0c      	bge.n	800b35e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f001 fa4a 	bl	800c7de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b34a:	e008      	b.n	800b35e <HAL_UART_IRQHandler+0x76a>
      return;
 800b34c:	bf00      	nop
 800b34e:	e006      	b.n	800b35e <HAL_UART_IRQHandler+0x76a>
    return;
 800b350:	bf00      	nop
 800b352:	e004      	b.n	800b35e <HAL_UART_IRQHandler+0x76a>
      return;
 800b354:	bf00      	nop
 800b356:	e002      	b.n	800b35e <HAL_UART_IRQHandler+0x76a>
      return;
 800b358:	bf00      	nop
 800b35a:	e000      	b.n	800b35e <HAL_UART_IRQHandler+0x76a>
    return;
 800b35c:	bf00      	nop
  }
}
 800b35e:	37e8      	adds	r7, #232	@ 0xe8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	effffffe 	.word	0xeffffffe

0800b368 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3ac:	bf00      	nop
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3d4:	b092      	sub	sp, #72	@ 0x48
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	689a      	ldr	r2, [r3, #8]
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	431a      	orrs	r2, r3
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	69db      	ldr	r3, [r3, #28]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	4bbe      	ldr	r3, [pc, #760]	@ (800b6f8 <UART_SetConfig+0x328>)
 800b400:	4013      	ands	r3, r2
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	6812      	ldr	r2, [r2, #0]
 800b406:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b408:	430b      	orrs	r3, r1
 800b40a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	68da      	ldr	r2, [r3, #12]
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	430a      	orrs	r2, r1
 800b420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4ab3      	ldr	r2, [pc, #716]	@ (800b6fc <UART_SetConfig+0x32c>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d004      	beq.n	800b43c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b438:	4313      	orrs	r3, r2
 800b43a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	689a      	ldr	r2, [r3, #8]
 800b442:	4baf      	ldr	r3, [pc, #700]	@ (800b700 <UART_SetConfig+0x330>)
 800b444:	4013      	ands	r3, r2
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	6812      	ldr	r2, [r2, #0]
 800b44a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b44c:	430b      	orrs	r3, r1
 800b44e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b456:	f023 010f 	bic.w	r1, r3, #15
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	430a      	orrs	r2, r1
 800b464:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4aa6      	ldr	r2, [pc, #664]	@ (800b704 <UART_SetConfig+0x334>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d177      	bne.n	800b560 <UART_SetConfig+0x190>
 800b470:	4ba5      	ldr	r3, [pc, #660]	@ (800b708 <UART_SetConfig+0x338>)
 800b472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b474:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b478:	2b28      	cmp	r3, #40	@ 0x28
 800b47a:	d86d      	bhi.n	800b558 <UART_SetConfig+0x188>
 800b47c:	a201      	add	r2, pc, #4	@ (adr r2, 800b484 <UART_SetConfig+0xb4>)
 800b47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b482:	bf00      	nop
 800b484:	0800b529 	.word	0x0800b529
 800b488:	0800b559 	.word	0x0800b559
 800b48c:	0800b559 	.word	0x0800b559
 800b490:	0800b559 	.word	0x0800b559
 800b494:	0800b559 	.word	0x0800b559
 800b498:	0800b559 	.word	0x0800b559
 800b49c:	0800b559 	.word	0x0800b559
 800b4a0:	0800b559 	.word	0x0800b559
 800b4a4:	0800b531 	.word	0x0800b531
 800b4a8:	0800b559 	.word	0x0800b559
 800b4ac:	0800b559 	.word	0x0800b559
 800b4b0:	0800b559 	.word	0x0800b559
 800b4b4:	0800b559 	.word	0x0800b559
 800b4b8:	0800b559 	.word	0x0800b559
 800b4bc:	0800b559 	.word	0x0800b559
 800b4c0:	0800b559 	.word	0x0800b559
 800b4c4:	0800b539 	.word	0x0800b539
 800b4c8:	0800b559 	.word	0x0800b559
 800b4cc:	0800b559 	.word	0x0800b559
 800b4d0:	0800b559 	.word	0x0800b559
 800b4d4:	0800b559 	.word	0x0800b559
 800b4d8:	0800b559 	.word	0x0800b559
 800b4dc:	0800b559 	.word	0x0800b559
 800b4e0:	0800b559 	.word	0x0800b559
 800b4e4:	0800b541 	.word	0x0800b541
 800b4e8:	0800b559 	.word	0x0800b559
 800b4ec:	0800b559 	.word	0x0800b559
 800b4f0:	0800b559 	.word	0x0800b559
 800b4f4:	0800b559 	.word	0x0800b559
 800b4f8:	0800b559 	.word	0x0800b559
 800b4fc:	0800b559 	.word	0x0800b559
 800b500:	0800b559 	.word	0x0800b559
 800b504:	0800b549 	.word	0x0800b549
 800b508:	0800b559 	.word	0x0800b559
 800b50c:	0800b559 	.word	0x0800b559
 800b510:	0800b559 	.word	0x0800b559
 800b514:	0800b559 	.word	0x0800b559
 800b518:	0800b559 	.word	0x0800b559
 800b51c:	0800b559 	.word	0x0800b559
 800b520:	0800b559 	.word	0x0800b559
 800b524:	0800b551 	.word	0x0800b551
 800b528:	2301      	movs	r3, #1
 800b52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b52e:	e222      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b530:	2304      	movs	r3, #4
 800b532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b536:	e21e      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b538:	2308      	movs	r3, #8
 800b53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b53e:	e21a      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b540:	2310      	movs	r3, #16
 800b542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b546:	e216      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b548:	2320      	movs	r3, #32
 800b54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b54e:	e212      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b550:	2340      	movs	r3, #64	@ 0x40
 800b552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b556:	e20e      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b558:	2380      	movs	r3, #128	@ 0x80
 800b55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b55e:	e20a      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a69      	ldr	r2, [pc, #420]	@ (800b70c <UART_SetConfig+0x33c>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d130      	bne.n	800b5cc <UART_SetConfig+0x1fc>
 800b56a:	4b67      	ldr	r3, [pc, #412]	@ (800b708 <UART_SetConfig+0x338>)
 800b56c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b56e:	f003 0307 	and.w	r3, r3, #7
 800b572:	2b05      	cmp	r3, #5
 800b574:	d826      	bhi.n	800b5c4 <UART_SetConfig+0x1f4>
 800b576:	a201      	add	r2, pc, #4	@ (adr r2, 800b57c <UART_SetConfig+0x1ac>)
 800b578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57c:	0800b595 	.word	0x0800b595
 800b580:	0800b59d 	.word	0x0800b59d
 800b584:	0800b5a5 	.word	0x0800b5a5
 800b588:	0800b5ad 	.word	0x0800b5ad
 800b58c:	0800b5b5 	.word	0x0800b5b5
 800b590:	0800b5bd 	.word	0x0800b5bd
 800b594:	2300      	movs	r3, #0
 800b596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b59a:	e1ec      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b59c:	2304      	movs	r3, #4
 800b59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5a2:	e1e8      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b5a4:	2308      	movs	r3, #8
 800b5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5aa:	e1e4      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b5ac:	2310      	movs	r3, #16
 800b5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5b2:	e1e0      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b5b4:	2320      	movs	r3, #32
 800b5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ba:	e1dc      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b5bc:	2340      	movs	r3, #64	@ 0x40
 800b5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5c2:	e1d8      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b5c4:	2380      	movs	r3, #128	@ 0x80
 800b5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ca:	e1d4      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a4f      	ldr	r2, [pc, #316]	@ (800b710 <UART_SetConfig+0x340>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d130      	bne.n	800b638 <UART_SetConfig+0x268>
 800b5d6:	4b4c      	ldr	r3, [pc, #304]	@ (800b708 <UART_SetConfig+0x338>)
 800b5d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5da:	f003 0307 	and.w	r3, r3, #7
 800b5de:	2b05      	cmp	r3, #5
 800b5e0:	d826      	bhi.n	800b630 <UART_SetConfig+0x260>
 800b5e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b5e8 <UART_SetConfig+0x218>)
 800b5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e8:	0800b601 	.word	0x0800b601
 800b5ec:	0800b609 	.word	0x0800b609
 800b5f0:	0800b611 	.word	0x0800b611
 800b5f4:	0800b619 	.word	0x0800b619
 800b5f8:	0800b621 	.word	0x0800b621
 800b5fc:	0800b629 	.word	0x0800b629
 800b600:	2300      	movs	r3, #0
 800b602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b606:	e1b6      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b608:	2304      	movs	r3, #4
 800b60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60e:	e1b2      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b610:	2308      	movs	r3, #8
 800b612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b616:	e1ae      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b618:	2310      	movs	r3, #16
 800b61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61e:	e1aa      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b620:	2320      	movs	r3, #32
 800b622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b626:	e1a6      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b628:	2340      	movs	r3, #64	@ 0x40
 800b62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b62e:	e1a2      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b630:	2380      	movs	r3, #128	@ 0x80
 800b632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b636:	e19e      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a35      	ldr	r2, [pc, #212]	@ (800b714 <UART_SetConfig+0x344>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d130      	bne.n	800b6a4 <UART_SetConfig+0x2d4>
 800b642:	4b31      	ldr	r3, [pc, #196]	@ (800b708 <UART_SetConfig+0x338>)
 800b644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b646:	f003 0307 	and.w	r3, r3, #7
 800b64a:	2b05      	cmp	r3, #5
 800b64c:	d826      	bhi.n	800b69c <UART_SetConfig+0x2cc>
 800b64e:	a201      	add	r2, pc, #4	@ (adr r2, 800b654 <UART_SetConfig+0x284>)
 800b650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b654:	0800b66d 	.word	0x0800b66d
 800b658:	0800b675 	.word	0x0800b675
 800b65c:	0800b67d 	.word	0x0800b67d
 800b660:	0800b685 	.word	0x0800b685
 800b664:	0800b68d 	.word	0x0800b68d
 800b668:	0800b695 	.word	0x0800b695
 800b66c:	2300      	movs	r3, #0
 800b66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b672:	e180      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b674:	2304      	movs	r3, #4
 800b676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67a:	e17c      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b67c:	2308      	movs	r3, #8
 800b67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b682:	e178      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b684:	2310      	movs	r3, #16
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68a:	e174      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b68c:	2320      	movs	r3, #32
 800b68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b692:	e170      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b694:	2340      	movs	r3, #64	@ 0x40
 800b696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b69a:	e16c      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b69c:	2380      	movs	r3, #128	@ 0x80
 800b69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6a2:	e168      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a1b      	ldr	r2, [pc, #108]	@ (800b718 <UART_SetConfig+0x348>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d142      	bne.n	800b734 <UART_SetConfig+0x364>
 800b6ae:	4b16      	ldr	r3, [pc, #88]	@ (800b708 <UART_SetConfig+0x338>)
 800b6b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6b2:	f003 0307 	and.w	r3, r3, #7
 800b6b6:	2b05      	cmp	r3, #5
 800b6b8:	d838      	bhi.n	800b72c <UART_SetConfig+0x35c>
 800b6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c0 <UART_SetConfig+0x2f0>)
 800b6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c0:	0800b6d9 	.word	0x0800b6d9
 800b6c4:	0800b6e1 	.word	0x0800b6e1
 800b6c8:	0800b6e9 	.word	0x0800b6e9
 800b6cc:	0800b6f1 	.word	0x0800b6f1
 800b6d0:	0800b71d 	.word	0x0800b71d
 800b6d4:	0800b725 	.word	0x0800b725
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6de:	e14a      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b6e0:	2304      	movs	r3, #4
 800b6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6e6:	e146      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b6e8:	2308      	movs	r3, #8
 800b6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ee:	e142      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b6f0:	2310      	movs	r3, #16
 800b6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f6:	e13e      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b6f8:	cfff69f3 	.word	0xcfff69f3
 800b6fc:	58000c00 	.word	0x58000c00
 800b700:	11fff4ff 	.word	0x11fff4ff
 800b704:	40011000 	.word	0x40011000
 800b708:	58024400 	.word	0x58024400
 800b70c:	40004400 	.word	0x40004400
 800b710:	40004800 	.word	0x40004800
 800b714:	40004c00 	.word	0x40004c00
 800b718:	40005000 	.word	0x40005000
 800b71c:	2320      	movs	r3, #32
 800b71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b722:	e128      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b724:	2340      	movs	r3, #64	@ 0x40
 800b726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b72a:	e124      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b72c:	2380      	movs	r3, #128	@ 0x80
 800b72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b732:	e120      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4acb      	ldr	r2, [pc, #812]	@ (800ba68 <UART_SetConfig+0x698>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d176      	bne.n	800b82c <UART_SetConfig+0x45c>
 800b73e:	4bcb      	ldr	r3, [pc, #812]	@ (800ba6c <UART_SetConfig+0x69c>)
 800b740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b746:	2b28      	cmp	r3, #40	@ 0x28
 800b748:	d86c      	bhi.n	800b824 <UART_SetConfig+0x454>
 800b74a:	a201      	add	r2, pc, #4	@ (adr r2, 800b750 <UART_SetConfig+0x380>)
 800b74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b750:	0800b7f5 	.word	0x0800b7f5
 800b754:	0800b825 	.word	0x0800b825
 800b758:	0800b825 	.word	0x0800b825
 800b75c:	0800b825 	.word	0x0800b825
 800b760:	0800b825 	.word	0x0800b825
 800b764:	0800b825 	.word	0x0800b825
 800b768:	0800b825 	.word	0x0800b825
 800b76c:	0800b825 	.word	0x0800b825
 800b770:	0800b7fd 	.word	0x0800b7fd
 800b774:	0800b825 	.word	0x0800b825
 800b778:	0800b825 	.word	0x0800b825
 800b77c:	0800b825 	.word	0x0800b825
 800b780:	0800b825 	.word	0x0800b825
 800b784:	0800b825 	.word	0x0800b825
 800b788:	0800b825 	.word	0x0800b825
 800b78c:	0800b825 	.word	0x0800b825
 800b790:	0800b805 	.word	0x0800b805
 800b794:	0800b825 	.word	0x0800b825
 800b798:	0800b825 	.word	0x0800b825
 800b79c:	0800b825 	.word	0x0800b825
 800b7a0:	0800b825 	.word	0x0800b825
 800b7a4:	0800b825 	.word	0x0800b825
 800b7a8:	0800b825 	.word	0x0800b825
 800b7ac:	0800b825 	.word	0x0800b825
 800b7b0:	0800b80d 	.word	0x0800b80d
 800b7b4:	0800b825 	.word	0x0800b825
 800b7b8:	0800b825 	.word	0x0800b825
 800b7bc:	0800b825 	.word	0x0800b825
 800b7c0:	0800b825 	.word	0x0800b825
 800b7c4:	0800b825 	.word	0x0800b825
 800b7c8:	0800b825 	.word	0x0800b825
 800b7cc:	0800b825 	.word	0x0800b825
 800b7d0:	0800b815 	.word	0x0800b815
 800b7d4:	0800b825 	.word	0x0800b825
 800b7d8:	0800b825 	.word	0x0800b825
 800b7dc:	0800b825 	.word	0x0800b825
 800b7e0:	0800b825 	.word	0x0800b825
 800b7e4:	0800b825 	.word	0x0800b825
 800b7e8:	0800b825 	.word	0x0800b825
 800b7ec:	0800b825 	.word	0x0800b825
 800b7f0:	0800b81d 	.word	0x0800b81d
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fa:	e0bc      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b7fc:	2304      	movs	r3, #4
 800b7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b802:	e0b8      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b804:	2308      	movs	r3, #8
 800b806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80a:	e0b4      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b80c:	2310      	movs	r3, #16
 800b80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b812:	e0b0      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b814:	2320      	movs	r3, #32
 800b816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81a:	e0ac      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b81c:	2340      	movs	r3, #64	@ 0x40
 800b81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b822:	e0a8      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b824:	2380      	movs	r3, #128	@ 0x80
 800b826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b82a:	e0a4      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a8f      	ldr	r2, [pc, #572]	@ (800ba70 <UART_SetConfig+0x6a0>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d130      	bne.n	800b898 <UART_SetConfig+0x4c8>
 800b836:	4b8d      	ldr	r3, [pc, #564]	@ (800ba6c <UART_SetConfig+0x69c>)
 800b838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b83a:	f003 0307 	and.w	r3, r3, #7
 800b83e:	2b05      	cmp	r3, #5
 800b840:	d826      	bhi.n	800b890 <UART_SetConfig+0x4c0>
 800b842:	a201      	add	r2, pc, #4	@ (adr r2, 800b848 <UART_SetConfig+0x478>)
 800b844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b848:	0800b861 	.word	0x0800b861
 800b84c:	0800b869 	.word	0x0800b869
 800b850:	0800b871 	.word	0x0800b871
 800b854:	0800b879 	.word	0x0800b879
 800b858:	0800b881 	.word	0x0800b881
 800b85c:	0800b889 	.word	0x0800b889
 800b860:	2300      	movs	r3, #0
 800b862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b866:	e086      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b868:	2304      	movs	r3, #4
 800b86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b86e:	e082      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b870:	2308      	movs	r3, #8
 800b872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b876:	e07e      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b878:	2310      	movs	r3, #16
 800b87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b87e:	e07a      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b880:	2320      	movs	r3, #32
 800b882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b886:	e076      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b888:	2340      	movs	r3, #64	@ 0x40
 800b88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b88e:	e072      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b890:	2380      	movs	r3, #128	@ 0x80
 800b892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b896:	e06e      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a75      	ldr	r2, [pc, #468]	@ (800ba74 <UART_SetConfig+0x6a4>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d130      	bne.n	800b904 <UART_SetConfig+0x534>
 800b8a2:	4b72      	ldr	r3, [pc, #456]	@ (800ba6c <UART_SetConfig+0x69c>)
 800b8a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8a6:	f003 0307 	and.w	r3, r3, #7
 800b8aa:	2b05      	cmp	r3, #5
 800b8ac:	d826      	bhi.n	800b8fc <UART_SetConfig+0x52c>
 800b8ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b4 <UART_SetConfig+0x4e4>)
 800b8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b4:	0800b8cd 	.word	0x0800b8cd
 800b8b8:	0800b8d5 	.word	0x0800b8d5
 800b8bc:	0800b8dd 	.word	0x0800b8dd
 800b8c0:	0800b8e5 	.word	0x0800b8e5
 800b8c4:	0800b8ed 	.word	0x0800b8ed
 800b8c8:	0800b8f5 	.word	0x0800b8f5
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8d2:	e050      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b8d4:	2304      	movs	r3, #4
 800b8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8da:	e04c      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b8dc:	2308      	movs	r3, #8
 800b8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8e2:	e048      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b8e4:	2310      	movs	r3, #16
 800b8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ea:	e044      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b8ec:	2320      	movs	r3, #32
 800b8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8f2:	e040      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b8f4:	2340      	movs	r3, #64	@ 0x40
 800b8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8fa:	e03c      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b8fc:	2380      	movs	r3, #128	@ 0x80
 800b8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b902:	e038      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a5b      	ldr	r2, [pc, #364]	@ (800ba78 <UART_SetConfig+0x6a8>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d130      	bne.n	800b970 <UART_SetConfig+0x5a0>
 800b90e:	4b57      	ldr	r3, [pc, #348]	@ (800ba6c <UART_SetConfig+0x69c>)
 800b910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b912:	f003 0307 	and.w	r3, r3, #7
 800b916:	2b05      	cmp	r3, #5
 800b918:	d826      	bhi.n	800b968 <UART_SetConfig+0x598>
 800b91a:	a201      	add	r2, pc, #4	@ (adr r2, 800b920 <UART_SetConfig+0x550>)
 800b91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b920:	0800b939 	.word	0x0800b939
 800b924:	0800b941 	.word	0x0800b941
 800b928:	0800b949 	.word	0x0800b949
 800b92c:	0800b951 	.word	0x0800b951
 800b930:	0800b959 	.word	0x0800b959
 800b934:	0800b961 	.word	0x0800b961
 800b938:	2302      	movs	r3, #2
 800b93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b93e:	e01a      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b940:	2304      	movs	r3, #4
 800b942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b946:	e016      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b948:	2308      	movs	r3, #8
 800b94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b94e:	e012      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b950:	2310      	movs	r3, #16
 800b952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b956:	e00e      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b958:	2320      	movs	r3, #32
 800b95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b95e:	e00a      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b960:	2340      	movs	r3, #64	@ 0x40
 800b962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b966:	e006      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b968:	2380      	movs	r3, #128	@ 0x80
 800b96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96e:	e002      	b.n	800b976 <UART_SetConfig+0x5a6>
 800b970:	2380      	movs	r3, #128	@ 0x80
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a3f      	ldr	r2, [pc, #252]	@ (800ba78 <UART_SetConfig+0x6a8>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	f040 80f8 	bne.w	800bb72 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b982:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b986:	2b20      	cmp	r3, #32
 800b988:	dc46      	bgt.n	800ba18 <UART_SetConfig+0x648>
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	f2c0 8082 	blt.w	800ba94 <UART_SetConfig+0x6c4>
 800b990:	3b02      	subs	r3, #2
 800b992:	2b1e      	cmp	r3, #30
 800b994:	d87e      	bhi.n	800ba94 <UART_SetConfig+0x6c4>
 800b996:	a201      	add	r2, pc, #4	@ (adr r2, 800b99c <UART_SetConfig+0x5cc>)
 800b998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99c:	0800ba1f 	.word	0x0800ba1f
 800b9a0:	0800ba95 	.word	0x0800ba95
 800b9a4:	0800ba27 	.word	0x0800ba27
 800b9a8:	0800ba95 	.word	0x0800ba95
 800b9ac:	0800ba95 	.word	0x0800ba95
 800b9b0:	0800ba95 	.word	0x0800ba95
 800b9b4:	0800ba37 	.word	0x0800ba37
 800b9b8:	0800ba95 	.word	0x0800ba95
 800b9bc:	0800ba95 	.word	0x0800ba95
 800b9c0:	0800ba95 	.word	0x0800ba95
 800b9c4:	0800ba95 	.word	0x0800ba95
 800b9c8:	0800ba95 	.word	0x0800ba95
 800b9cc:	0800ba95 	.word	0x0800ba95
 800b9d0:	0800ba95 	.word	0x0800ba95
 800b9d4:	0800ba47 	.word	0x0800ba47
 800b9d8:	0800ba95 	.word	0x0800ba95
 800b9dc:	0800ba95 	.word	0x0800ba95
 800b9e0:	0800ba95 	.word	0x0800ba95
 800b9e4:	0800ba95 	.word	0x0800ba95
 800b9e8:	0800ba95 	.word	0x0800ba95
 800b9ec:	0800ba95 	.word	0x0800ba95
 800b9f0:	0800ba95 	.word	0x0800ba95
 800b9f4:	0800ba95 	.word	0x0800ba95
 800b9f8:	0800ba95 	.word	0x0800ba95
 800b9fc:	0800ba95 	.word	0x0800ba95
 800ba00:	0800ba95 	.word	0x0800ba95
 800ba04:	0800ba95 	.word	0x0800ba95
 800ba08:	0800ba95 	.word	0x0800ba95
 800ba0c:	0800ba95 	.word	0x0800ba95
 800ba10:	0800ba95 	.word	0x0800ba95
 800ba14:	0800ba87 	.word	0x0800ba87
 800ba18:	2b40      	cmp	r3, #64	@ 0x40
 800ba1a:	d037      	beq.n	800ba8c <UART_SetConfig+0x6bc>
 800ba1c:	e03a      	b.n	800ba94 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ba1e:	f7fd ff8b 	bl	8009938 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba24:	e03c      	b.n	800baa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fd ff9a 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba34:	e034      	b.n	800baa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba36:	f107 0318 	add.w	r3, r7, #24
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fe f8e6 	bl	8009c0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba44:	e02c      	b.n	800baa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba46:	4b09      	ldr	r3, [pc, #36]	@ (800ba6c <UART_SetConfig+0x69c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f003 0320 	and.w	r3, r3, #32
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d016      	beq.n	800ba80 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba52:	4b06      	ldr	r3, [pc, #24]	@ (800ba6c <UART_SetConfig+0x69c>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	08db      	lsrs	r3, r3, #3
 800ba58:	f003 0303 	and.w	r3, r3, #3
 800ba5c:	4a07      	ldr	r2, [pc, #28]	@ (800ba7c <UART_SetConfig+0x6ac>)
 800ba5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba64:	e01c      	b.n	800baa0 <UART_SetConfig+0x6d0>
 800ba66:	bf00      	nop
 800ba68:	40011400 	.word	0x40011400
 800ba6c:	58024400 	.word	0x58024400
 800ba70:	40007800 	.word	0x40007800
 800ba74:	40007c00 	.word	0x40007c00
 800ba78:	58000c00 	.word	0x58000c00
 800ba7c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ba80:	4b9d      	ldr	r3, [pc, #628]	@ (800bcf8 <UART_SetConfig+0x928>)
 800ba82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba84:	e00c      	b.n	800baa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba86:	4b9d      	ldr	r3, [pc, #628]	@ (800bcfc <UART_SetConfig+0x92c>)
 800ba88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba8a:	e009      	b.n	800baa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba92:	e005      	b.n	800baa0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ba94:	2300      	movs	r3, #0
 800ba96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ba9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800baa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 81de 	beq.w	800be64 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baac:	4a94      	ldr	r2, [pc, #592]	@ (800bd00 <UART_SetConfig+0x930>)
 800baae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bab2:	461a      	mov	r2, r3
 800bab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bab6:	fbb3 f3f2 	udiv	r3, r3, r2
 800baba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	685a      	ldr	r2, [r3, #4]
 800bac0:	4613      	mov	r3, r2
 800bac2:	005b      	lsls	r3, r3, #1
 800bac4:	4413      	add	r3, r2
 800bac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bac8:	429a      	cmp	r2, r3
 800baca:	d305      	bcc.n	800bad8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d903      	bls.n	800bae0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bade:	e1c1      	b.n	800be64 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bae2:	2200      	movs	r2, #0
 800bae4:	60bb      	str	r3, [r7, #8]
 800bae6:	60fa      	str	r2, [r7, #12]
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baec:	4a84      	ldr	r2, [pc, #528]	@ (800bd00 <UART_SetConfig+0x930>)
 800baee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	2200      	movs	r2, #0
 800baf6:	603b      	str	r3, [r7, #0]
 800baf8:	607a      	str	r2, [r7, #4]
 800bafa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bafe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb02:	f7f4 fbff 	bl	8000304 <__aeabi_uldivmod>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4610      	mov	r0, r2
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	f04f 0200 	mov.w	r2, #0
 800bb12:	f04f 0300 	mov.w	r3, #0
 800bb16:	020b      	lsls	r3, r1, #8
 800bb18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb1c:	0202      	lsls	r2, r0, #8
 800bb1e:	6979      	ldr	r1, [r7, #20]
 800bb20:	6849      	ldr	r1, [r1, #4]
 800bb22:	0849      	lsrs	r1, r1, #1
 800bb24:	2000      	movs	r0, #0
 800bb26:	460c      	mov	r4, r1
 800bb28:	4605      	mov	r5, r0
 800bb2a:	eb12 0804 	adds.w	r8, r2, r4
 800bb2e:	eb43 0905 	adc.w	r9, r3, r5
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	469a      	mov	sl, r3
 800bb3a:	4693      	mov	fp, r2
 800bb3c:	4652      	mov	r2, sl
 800bb3e:	465b      	mov	r3, fp
 800bb40:	4640      	mov	r0, r8
 800bb42:	4649      	mov	r1, r9
 800bb44:	f7f4 fbde 	bl	8000304 <__aeabi_uldivmod>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb56:	d308      	bcc.n	800bb6a <UART_SetConfig+0x79a>
 800bb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb5e:	d204      	bcs.n	800bb6a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb66:	60da      	str	r2, [r3, #12]
 800bb68:	e17c      	b.n	800be64 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb70:	e178      	b.n	800be64 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	69db      	ldr	r3, [r3, #28]
 800bb76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb7a:	f040 80c5 	bne.w	800bd08 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bb7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb82:	2b20      	cmp	r3, #32
 800bb84:	dc48      	bgt.n	800bc18 <UART_SetConfig+0x848>
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	db7b      	blt.n	800bc82 <UART_SetConfig+0x8b2>
 800bb8a:	2b20      	cmp	r3, #32
 800bb8c:	d879      	bhi.n	800bc82 <UART_SetConfig+0x8b2>
 800bb8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb94 <UART_SetConfig+0x7c4>)
 800bb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb94:	0800bc1f 	.word	0x0800bc1f
 800bb98:	0800bc27 	.word	0x0800bc27
 800bb9c:	0800bc83 	.word	0x0800bc83
 800bba0:	0800bc83 	.word	0x0800bc83
 800bba4:	0800bc2f 	.word	0x0800bc2f
 800bba8:	0800bc83 	.word	0x0800bc83
 800bbac:	0800bc83 	.word	0x0800bc83
 800bbb0:	0800bc83 	.word	0x0800bc83
 800bbb4:	0800bc3f 	.word	0x0800bc3f
 800bbb8:	0800bc83 	.word	0x0800bc83
 800bbbc:	0800bc83 	.word	0x0800bc83
 800bbc0:	0800bc83 	.word	0x0800bc83
 800bbc4:	0800bc83 	.word	0x0800bc83
 800bbc8:	0800bc83 	.word	0x0800bc83
 800bbcc:	0800bc83 	.word	0x0800bc83
 800bbd0:	0800bc83 	.word	0x0800bc83
 800bbd4:	0800bc4f 	.word	0x0800bc4f
 800bbd8:	0800bc83 	.word	0x0800bc83
 800bbdc:	0800bc83 	.word	0x0800bc83
 800bbe0:	0800bc83 	.word	0x0800bc83
 800bbe4:	0800bc83 	.word	0x0800bc83
 800bbe8:	0800bc83 	.word	0x0800bc83
 800bbec:	0800bc83 	.word	0x0800bc83
 800bbf0:	0800bc83 	.word	0x0800bc83
 800bbf4:	0800bc83 	.word	0x0800bc83
 800bbf8:	0800bc83 	.word	0x0800bc83
 800bbfc:	0800bc83 	.word	0x0800bc83
 800bc00:	0800bc83 	.word	0x0800bc83
 800bc04:	0800bc83 	.word	0x0800bc83
 800bc08:	0800bc83 	.word	0x0800bc83
 800bc0c:	0800bc83 	.word	0x0800bc83
 800bc10:	0800bc83 	.word	0x0800bc83
 800bc14:	0800bc75 	.word	0x0800bc75
 800bc18:	2b40      	cmp	r3, #64	@ 0x40
 800bc1a:	d02e      	beq.n	800bc7a <UART_SetConfig+0x8aa>
 800bc1c:	e031      	b.n	800bc82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc1e:	f7fb fe93 	bl	8007948 <HAL_RCC_GetPCLK1Freq>
 800bc22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc24:	e033      	b.n	800bc8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc26:	f7fb fea5 	bl	8007974 <HAL_RCC_GetPCLK2Freq>
 800bc2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc2c:	e02f      	b.n	800bc8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fd fe96 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc3c:	e027      	b.n	800bc8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc3e:	f107 0318 	add.w	r3, r7, #24
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fd ffe2 	bl	8009c0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc4c:	e01f      	b.n	800bc8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc4e:	4b2d      	ldr	r3, [pc, #180]	@ (800bd04 <UART_SetConfig+0x934>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 0320 	and.w	r3, r3, #32
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d009      	beq.n	800bc6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc5a:	4b2a      	ldr	r3, [pc, #168]	@ (800bd04 <UART_SetConfig+0x934>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	08db      	lsrs	r3, r3, #3
 800bc60:	f003 0303 	and.w	r3, r3, #3
 800bc64:	4a24      	ldr	r2, [pc, #144]	@ (800bcf8 <UART_SetConfig+0x928>)
 800bc66:	fa22 f303 	lsr.w	r3, r2, r3
 800bc6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc6c:	e00f      	b.n	800bc8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bc6e:	4b22      	ldr	r3, [pc, #136]	@ (800bcf8 <UART_SetConfig+0x928>)
 800bc70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc72:	e00c      	b.n	800bc8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc74:	4b21      	ldr	r3, [pc, #132]	@ (800bcfc <UART_SetConfig+0x92c>)
 800bc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc78:	e009      	b.n	800bc8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc80:	e005      	b.n	800bc8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bc82:	2300      	movs	r3, #0
 800bc84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f000 80e7 	beq.w	800be64 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc9a:	4a19      	ldr	r2, [pc, #100]	@ (800bd00 <UART_SetConfig+0x930>)
 800bc9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bca0:	461a      	mov	r2, r3
 800bca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bca4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bca8:	005a      	lsls	r2, r3, #1
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	085b      	lsrs	r3, r3, #1
 800bcb0:	441a      	add	r2, r3
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcbe:	2b0f      	cmp	r3, #15
 800bcc0:	d916      	bls.n	800bcf0 <UART_SetConfig+0x920>
 800bcc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcc8:	d212      	bcs.n	800bcf0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	f023 030f 	bic.w	r3, r3, #15
 800bcd2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd6:	085b      	lsrs	r3, r3, #1
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	f003 0307 	and.w	r3, r3, #7
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bce2:	4313      	orrs	r3, r2
 800bce4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bcec:	60da      	str	r2, [r3, #12]
 800bcee:	e0b9      	b.n	800be64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bcf6:	e0b5      	b.n	800be64 <UART_SetConfig+0xa94>
 800bcf8:	03d09000 	.word	0x03d09000
 800bcfc:	003d0900 	.word	0x003d0900
 800bd00:	08014064 	.word	0x08014064
 800bd04:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd08:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bd0c:	2b20      	cmp	r3, #32
 800bd0e:	dc49      	bgt.n	800bda4 <UART_SetConfig+0x9d4>
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	db7c      	blt.n	800be0e <UART_SetConfig+0xa3e>
 800bd14:	2b20      	cmp	r3, #32
 800bd16:	d87a      	bhi.n	800be0e <UART_SetConfig+0xa3e>
 800bd18:	a201      	add	r2, pc, #4	@ (adr r2, 800bd20 <UART_SetConfig+0x950>)
 800bd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1e:	bf00      	nop
 800bd20:	0800bdab 	.word	0x0800bdab
 800bd24:	0800bdb3 	.word	0x0800bdb3
 800bd28:	0800be0f 	.word	0x0800be0f
 800bd2c:	0800be0f 	.word	0x0800be0f
 800bd30:	0800bdbb 	.word	0x0800bdbb
 800bd34:	0800be0f 	.word	0x0800be0f
 800bd38:	0800be0f 	.word	0x0800be0f
 800bd3c:	0800be0f 	.word	0x0800be0f
 800bd40:	0800bdcb 	.word	0x0800bdcb
 800bd44:	0800be0f 	.word	0x0800be0f
 800bd48:	0800be0f 	.word	0x0800be0f
 800bd4c:	0800be0f 	.word	0x0800be0f
 800bd50:	0800be0f 	.word	0x0800be0f
 800bd54:	0800be0f 	.word	0x0800be0f
 800bd58:	0800be0f 	.word	0x0800be0f
 800bd5c:	0800be0f 	.word	0x0800be0f
 800bd60:	0800bddb 	.word	0x0800bddb
 800bd64:	0800be0f 	.word	0x0800be0f
 800bd68:	0800be0f 	.word	0x0800be0f
 800bd6c:	0800be0f 	.word	0x0800be0f
 800bd70:	0800be0f 	.word	0x0800be0f
 800bd74:	0800be0f 	.word	0x0800be0f
 800bd78:	0800be0f 	.word	0x0800be0f
 800bd7c:	0800be0f 	.word	0x0800be0f
 800bd80:	0800be0f 	.word	0x0800be0f
 800bd84:	0800be0f 	.word	0x0800be0f
 800bd88:	0800be0f 	.word	0x0800be0f
 800bd8c:	0800be0f 	.word	0x0800be0f
 800bd90:	0800be0f 	.word	0x0800be0f
 800bd94:	0800be0f 	.word	0x0800be0f
 800bd98:	0800be0f 	.word	0x0800be0f
 800bd9c:	0800be0f 	.word	0x0800be0f
 800bda0:	0800be01 	.word	0x0800be01
 800bda4:	2b40      	cmp	r3, #64	@ 0x40
 800bda6:	d02e      	beq.n	800be06 <UART_SetConfig+0xa36>
 800bda8:	e031      	b.n	800be0e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdaa:	f7fb fdcd 	bl	8007948 <HAL_RCC_GetPCLK1Freq>
 800bdae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bdb0:	e033      	b.n	800be1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdb2:	f7fb fddf 	bl	8007974 <HAL_RCC_GetPCLK2Freq>
 800bdb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bdb8:	e02f      	b.n	800be1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fd fdd0 	bl	8009964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bdc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdc8:	e027      	b.n	800be1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdca:	f107 0318 	add.w	r3, r7, #24
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fd ff1c 	bl	8009c0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdd8:	e01f      	b.n	800be1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdda:	4b2d      	ldr	r3, [pc, #180]	@ (800be90 <UART_SetConfig+0xac0>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 0320 	and.w	r3, r3, #32
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d009      	beq.n	800bdfa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bde6:	4b2a      	ldr	r3, [pc, #168]	@ (800be90 <UART_SetConfig+0xac0>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	08db      	lsrs	r3, r3, #3
 800bdec:	f003 0303 	and.w	r3, r3, #3
 800bdf0:	4a28      	ldr	r2, [pc, #160]	@ (800be94 <UART_SetConfig+0xac4>)
 800bdf2:	fa22 f303 	lsr.w	r3, r2, r3
 800bdf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bdf8:	e00f      	b.n	800be1a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bdfa:	4b26      	ldr	r3, [pc, #152]	@ (800be94 <UART_SetConfig+0xac4>)
 800bdfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdfe:	e00c      	b.n	800be1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be00:	4b25      	ldr	r3, [pc, #148]	@ (800be98 <UART_SetConfig+0xac8>)
 800be02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be04:	e009      	b.n	800be1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be0c:	e005      	b.n	800be1a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800be0e:	2300      	movs	r3, #0
 800be10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800be18:	bf00      	nop
    }

    if (pclk != 0U)
 800be1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d021      	beq.n	800be64 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be24:	4a1d      	ldr	r2, [pc, #116]	@ (800be9c <UART_SetConfig+0xacc>)
 800be26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be2a:	461a      	mov	r2, r3
 800be2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be2e:	fbb3 f2f2 	udiv	r2, r3, r2
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	085b      	lsrs	r3, r3, #1
 800be38:	441a      	add	r2, r3
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be42:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be46:	2b0f      	cmp	r3, #15
 800be48:	d909      	bls.n	800be5e <UART_SetConfig+0xa8e>
 800be4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be50:	d205      	bcs.n	800be5e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be54:	b29a      	uxth	r2, r3
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	60da      	str	r2, [r3, #12]
 800be5c:	e002      	b.n	800be64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2201      	movs	r2, #1
 800be68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	2201      	movs	r2, #1
 800be70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	2200      	movs	r2, #0
 800be78:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2200      	movs	r2, #0
 800be7e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be80:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800be84:	4618      	mov	r0, r3
 800be86:	3748      	adds	r7, #72	@ 0x48
 800be88:	46bd      	mov	sp, r7
 800be8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be8e:	bf00      	nop
 800be90:	58024400 	.word	0x58024400
 800be94:	03d09000 	.word	0x03d09000
 800be98:	003d0900 	.word	0x003d0900
 800be9c:	08014064 	.word	0x08014064

0800bea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beac:	f003 0308 	and.w	r3, r3, #8
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00a      	beq.n	800beca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	430a      	orrs	r2, r1
 800bec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00a      	beq.n	800beec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	430a      	orrs	r2, r1
 800beea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bef0:	f003 0302 	and.w	r3, r3, #2
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00a      	beq.n	800bf0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	430a      	orrs	r2, r1
 800bf0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf12:	f003 0304 	and.w	r3, r3, #4
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00a      	beq.n	800bf30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	430a      	orrs	r2, r1
 800bf2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf34:	f003 0310 	and.w	r3, r3, #16
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00a      	beq.n	800bf52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	430a      	orrs	r2, r1
 800bf50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf56:	f003 0320 	and.w	r3, r3, #32
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00a      	beq.n	800bf74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	430a      	orrs	r2, r1
 800bf72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d01a      	beq.n	800bfb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	430a      	orrs	r2, r1
 800bf94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf9e:	d10a      	bne.n	800bfb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	430a      	orrs	r2, r1
 800bfb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00a      	beq.n	800bfd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	430a      	orrs	r2, r1
 800bfd6:	605a      	str	r2, [r3, #4]
  }
}
 800bfd8:	bf00      	nop
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b098      	sub	sp, #96	@ 0x60
 800bfe8:	af02      	add	r7, sp, #8
 800bfea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bff4:	f7f6 f882 	bl	80020fc <HAL_GetTick>
 800bff8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f003 0308 	and.w	r3, r3, #8
 800c004:	2b08      	cmp	r3, #8
 800c006:	d12f      	bne.n	800c068 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c008:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c010:	2200      	movs	r2, #0
 800c012:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 f88e 	bl	800c138 <UART_WaitOnFlagUntilTimeout>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d022      	beq.n	800c068 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c02a:	e853 3f00 	ldrex	r3, [r3]
 800c02e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c036:	653b      	str	r3, [r7, #80]	@ 0x50
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	461a      	mov	r2, r3
 800c03e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c040:	647b      	str	r3, [r7, #68]	@ 0x44
 800c042:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c044:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c048:	e841 2300 	strex	r3, r2, [r1]
 800c04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c04e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1e6      	bne.n	800c022 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2220      	movs	r2, #32
 800c058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c064:	2303      	movs	r3, #3
 800c066:	e063      	b.n	800c130 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f003 0304 	and.w	r3, r3, #4
 800c072:	2b04      	cmp	r3, #4
 800c074:	d149      	bne.n	800c10a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c076:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c07e:	2200      	movs	r2, #0
 800c080:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 f857 	bl	800c138 <UART_WaitOnFlagUntilTimeout>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d03c      	beq.n	800c10a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c098:	e853 3f00 	ldrex	r3, [r3]
 800c09c:	623b      	str	r3, [r7, #32]
   return(result);
 800c09e:	6a3b      	ldr	r3, [r7, #32]
 800c0a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0b6:	e841 2300 	strex	r3, r2, [r1]
 800c0ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1e6      	bne.n	800c090 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	3308      	adds	r3, #8
 800c0c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	e853 3f00 	ldrex	r3, [r3]
 800c0d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f023 0301 	bic.w	r3, r3, #1
 800c0d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	3308      	adds	r3, #8
 800c0e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0e2:	61fa      	str	r2, [r7, #28]
 800c0e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e6:	69b9      	ldr	r1, [r7, #24]
 800c0e8:	69fa      	ldr	r2, [r7, #28]
 800c0ea:	e841 2300 	strex	r3, r2, [r1]
 800c0ee:	617b      	str	r3, [r7, #20]
   return(result);
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1e5      	bne.n	800c0c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2220      	movs	r2, #32
 800c0fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c106:	2303      	movs	r3, #3
 800c108:	e012      	b.n	800c130 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2220      	movs	r2, #32
 800c10e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2220      	movs	r2, #32
 800c116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3758      	adds	r7, #88	@ 0x58
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	603b      	str	r3, [r7, #0]
 800c144:	4613      	mov	r3, r2
 800c146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c148:	e04f      	b.n	800c1ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c150:	d04b      	beq.n	800c1ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c152:	f7f5 ffd3 	bl	80020fc <HAL_GetTick>
 800c156:	4602      	mov	r2, r0
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	1ad3      	subs	r3, r2, r3
 800c15c:	69ba      	ldr	r2, [r7, #24]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d302      	bcc.n	800c168 <UART_WaitOnFlagUntilTimeout+0x30>
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c168:	2303      	movs	r3, #3
 800c16a:	e04e      	b.n	800c20a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f003 0304 	and.w	r3, r3, #4
 800c176:	2b00      	cmp	r3, #0
 800c178:	d037      	beq.n	800c1ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b80      	cmp	r3, #128	@ 0x80
 800c17e:	d034      	beq.n	800c1ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	2b40      	cmp	r3, #64	@ 0x40
 800c184:	d031      	beq.n	800c1ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	69db      	ldr	r3, [r3, #28]
 800c18c:	f003 0308 	and.w	r3, r3, #8
 800c190:	2b08      	cmp	r3, #8
 800c192:	d110      	bne.n	800c1b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2208      	movs	r2, #8
 800c19a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f000 f921 	bl	800c3e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2208      	movs	r2, #8
 800c1a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e029      	b.n	800c20a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	69db      	ldr	r3, [r3, #28]
 800c1bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1c4:	d111      	bne.n	800c1ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f000 f907 	bl	800c3e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2220      	movs	r2, #32
 800c1da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	e00f      	b.n	800c20a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	69da      	ldr	r2, [r3, #28]
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	bf0c      	ite	eq
 800c1fa:	2301      	moveq	r3, #1
 800c1fc:	2300      	movne	r3, #0
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	461a      	mov	r2, r3
 800c202:	79fb      	ldrb	r3, [r7, #7]
 800c204:	429a      	cmp	r2, r3
 800c206:	d0a0      	beq.n	800c14a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
	...

0800c214 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b096      	sub	sp, #88	@ 0x58
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	4613      	mov	r3, r2
 800c220:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	88fa      	ldrh	r2, [r7, #6]
 800c22c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2200      	movs	r2, #0
 800c234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2222      	movs	r2, #34	@ 0x22
 800c23c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c246:	2b00      	cmp	r3, #0
 800c248:	d02d      	beq.n	800c2a6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c250:	4a40      	ldr	r2, [pc, #256]	@ (800c354 <UART_Start_Receive_DMA+0x140>)
 800c252:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c25a:	4a3f      	ldr	r2, [pc, #252]	@ (800c358 <UART_Start_Receive_DMA+0x144>)
 800c25c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c264:	4a3d      	ldr	r2, [pc, #244]	@ (800c35c <UART_Start_Receive_DMA+0x148>)
 800c266:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c26e:	2200      	movs	r2, #0
 800c270:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	3324      	adds	r3, #36	@ 0x24
 800c27e:	4619      	mov	r1, r3
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c284:	461a      	mov	r2, r3
 800c286:	88fb      	ldrh	r3, [r7, #6]
 800c288:	f7f7 fea6 	bl	8003fd8 <HAL_DMA_Start_IT>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d009      	beq.n	800c2a6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2210      	movs	r2, #16
 800c296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2220      	movs	r2, #32
 800c29e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e051      	b.n	800c34a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d018      	beq.n	800c2e0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2b6:	e853 3f00 	ldrex	r3, [r3]
 800c2ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c2d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2d4:	e841 2300 	strex	r3, r2, [r1]
 800c2d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c2da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1e6      	bne.n	800c2ae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ea:	e853 3f00 	ldrex	r3, [r3]
 800c2ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f2:	f043 0301 	orr.w	r3, r3, #1
 800c2f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	3308      	adds	r3, #8
 800c2fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c300:	637a      	str	r2, [r7, #52]	@ 0x34
 800c302:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c304:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c306:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c308:	e841 2300 	strex	r3, r2, [r1]
 800c30c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c310:	2b00      	cmp	r3, #0
 800c312:	d1e5      	bne.n	800c2e0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	3308      	adds	r3, #8
 800c31a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	e853 3f00 	ldrex	r3, [r3]
 800c322:	613b      	str	r3, [r7, #16]
   return(result);
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c32a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	3308      	adds	r3, #8
 800c332:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c334:	623a      	str	r2, [r7, #32]
 800c336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c338:	69f9      	ldr	r1, [r7, #28]
 800c33a:	6a3a      	ldr	r2, [r7, #32]
 800c33c:	e841 2300 	strex	r3, r2, [r1]
 800c340:	61bb      	str	r3, [r7, #24]
   return(result);
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1e5      	bne.n	800c314 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3758      	adds	r7, #88	@ 0x58
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	0800c563 	.word	0x0800c563
 800c358:	0800c68b 	.word	0x0800c68b
 800c35c:	0800c6c9 	.word	0x0800c6c9

0800c360 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c360:	b480      	push	{r7}
 800c362:	b08f      	sub	sp, #60	@ 0x3c
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36e:	6a3b      	ldr	r3, [r7, #32]
 800c370:	e853 3f00 	ldrex	r3, [r3]
 800c374:	61fb      	str	r3, [r7, #28]
   return(result);
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c37c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c388:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c38c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c38e:	e841 2300 	strex	r3, r2, [r1]
 800c392:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1e6      	bne.n	800c368 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	3308      	adds	r3, #8
 800c3a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	e853 3f00 	ldrex	r3, [r3]
 800c3a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c3b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3ba:	61ba      	str	r2, [r7, #24]
 800c3bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3be:	6979      	ldr	r1, [r7, #20]
 800c3c0:	69ba      	ldr	r2, [r7, #24]
 800c3c2:	e841 2300 	strex	r3, r2, [r1]
 800c3c6:	613b      	str	r3, [r7, #16]
   return(result);
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1e5      	bne.n	800c39a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2220      	movs	r2, #32
 800c3d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c3d6:	bf00      	nop
 800c3d8:	373c      	adds	r7, #60	@ 0x3c
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
	...

0800c3e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b095      	sub	sp, #84	@ 0x54
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3f4:	e853 3f00 	ldrex	r3, [r3]
 800c3f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c400:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	461a      	mov	r2, r3
 800c408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c40a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c40c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c40e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c410:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c412:	e841 2300 	strex	r3, r2, [r1]
 800c416:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1e6      	bne.n	800c3ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3308      	adds	r3, #8
 800c424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c426:	6a3b      	ldr	r3, [r7, #32]
 800c428:	e853 3f00 	ldrex	r3, [r3]
 800c42c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c42e:	69fa      	ldr	r2, [r7, #28]
 800c430:	4b1e      	ldr	r3, [pc, #120]	@ (800c4ac <UART_EndRxTransfer+0xc8>)
 800c432:	4013      	ands	r3, r2
 800c434:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	3308      	adds	r3, #8
 800c43c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c43e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c440:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c446:	e841 2300 	strex	r3, r2, [r1]
 800c44a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1e5      	bne.n	800c41e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c456:	2b01      	cmp	r3, #1
 800c458:	d118      	bne.n	800c48c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	e853 3f00 	ldrex	r3, [r3]
 800c466:	60bb      	str	r3, [r7, #8]
   return(result);
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	f023 0310 	bic.w	r3, r3, #16
 800c46e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	461a      	mov	r2, r3
 800c476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c478:	61bb      	str	r3, [r7, #24]
 800c47a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47c:	6979      	ldr	r1, [r7, #20]
 800c47e:	69ba      	ldr	r2, [r7, #24]
 800c480:	e841 2300 	strex	r3, r2, [r1]
 800c484:	613b      	str	r3, [r7, #16]
   return(result);
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1e6      	bne.n	800c45a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2220      	movs	r2, #32
 800c490:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c4a0:	bf00      	nop
 800c4a2:	3754      	adds	r7, #84	@ 0x54
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	effffffe 	.word	0xeffffffe

0800c4b0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b090      	sub	sp, #64	@ 0x40
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	69db      	ldr	r3, [r3, #28]
 800c4c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4c6:	d037      	beq.n	800c538 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800c4c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	3308      	adds	r3, #8
 800c4d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4da:	e853 3f00 	ldrex	r3, [r3]
 800c4de:	623b      	str	r3, [r7, #32]
   return(result);
 800c4e0:	6a3b      	ldr	r3, [r7, #32]
 800c4e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4f0:	633a      	str	r2, [r7, #48]	@ 0x30
 800c4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4f8:	e841 2300 	strex	r3, r2, [r1]
 800c4fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1e5      	bne.n	800c4d0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	e853 3f00 	ldrex	r3, [r3]
 800c510:	60fb      	str	r3, [r7, #12]
   return(result);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c518:	637b      	str	r3, [r7, #52]	@ 0x34
 800c51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	461a      	mov	r2, r3
 800c520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c522:	61fb      	str	r3, [r7, #28]
 800c524:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c526:	69b9      	ldr	r1, [r7, #24]
 800c528:	69fa      	ldr	r2, [r7, #28]
 800c52a:	e841 2300 	strex	r3, r2, [r1]
 800c52e:	617b      	str	r3, [r7, #20]
   return(result);
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1e6      	bne.n	800c504 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c536:	e002      	b.n	800c53e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c538:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c53a:	f7fe ff15 	bl	800b368 <HAL_UART_TxCpltCallback>
}
 800c53e:	bf00      	nop
 800c540:	3740      	adds	r7, #64	@ 0x40
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b084      	sub	sp, #16
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c552:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f7fe ff11 	bl	800b37c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c55a:	bf00      	nop
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b09c      	sub	sp, #112	@ 0x70
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c56e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	69db      	ldr	r3, [r3, #28]
 800c574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c578:	d071      	beq.n	800c65e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c57a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c57c:	2200      	movs	r2, #0
 800c57e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c58a:	e853 3f00 	ldrex	r3, [r3]
 800c58e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c592:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c596:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	461a      	mov	r2, r3
 800c59e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c5a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c5a2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c5a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c5a8:	e841 2300 	strex	r3, r2, [r1]
 800c5ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c5ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1e6      	bne.n	800c582 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5be:	e853 3f00 	ldrex	r3, [r3]
 800c5c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5c6:	f023 0301 	bic.w	r3, r3, #1
 800c5ca:	667b      	str	r3, [r7, #100]	@ 0x64
 800c5cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c5d4:	647a      	str	r2, [r7, #68]	@ 0x44
 800c5d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c5da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c5dc:	e841 2300 	strex	r3, r2, [r1]
 800c5e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1e5      	bne.n	800c5b4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3308      	adds	r3, #8
 800c5ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f2:	e853 3f00 	ldrex	r3, [r3]
 800c5f6:	623b      	str	r3, [r7, #32]
   return(result);
 800c5f8:	6a3b      	ldr	r3, [r7, #32]
 800c5fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5fe:	663b      	str	r3, [r7, #96]	@ 0x60
 800c600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3308      	adds	r3, #8
 800c606:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c608:	633a      	str	r2, [r7, #48]	@ 0x30
 800c60a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c60e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c610:	e841 2300 	strex	r3, r2, [r1]
 800c614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1e5      	bne.n	800c5e8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c61c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c61e:	2220      	movs	r2, #32
 800c620:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d118      	bne.n	800c65e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c62c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	e853 3f00 	ldrex	r3, [r3]
 800c638:	60fb      	str	r3, [r7, #12]
   return(result);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f023 0310 	bic.w	r3, r3, #16
 800c640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	461a      	mov	r2, r3
 800c648:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c64a:	61fb      	str	r3, [r7, #28]
 800c64c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64e:	69b9      	ldr	r1, [r7, #24]
 800c650:	69fa      	ldr	r2, [r7, #28]
 800c652:	e841 2300 	strex	r3, r2, [r1]
 800c656:	617b      	str	r3, [r7, #20]
   return(result);
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1e6      	bne.n	800c62c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c65e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c660:	2200      	movs	r2, #0
 800c662:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d107      	bne.n	800c67c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c66c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c66e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c672:	4619      	mov	r1, r3
 800c674:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c676:	f7fe fe9f 	bl	800b3b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c67a:	e002      	b.n	800c682 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c67c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c67e:	f7f4 fbb3 	bl	8000de8 <HAL_UART_RxCpltCallback>
}
 800c682:	bf00      	nop
 800c684:	3770      	adds	r7, #112	@ 0x70
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b084      	sub	sp, #16
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c696:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2201      	movs	r2, #1
 800c69c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d109      	bne.n	800c6ba <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c6ac:	085b      	lsrs	r3, r3, #1
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f7fe fe80 	bl	800b3b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c6b8:	e002      	b.n	800c6c0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c6ba:	68f8      	ldr	r0, [r7, #12]
 800c6bc:	f7fe fe68 	bl	800b390 <HAL_UART_RxHalfCpltCallback>
}
 800c6c0:	bf00      	nop
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6d4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6f0:	2b80      	cmp	r3, #128	@ 0x80
 800c6f2:	d109      	bne.n	800c708 <UART_DMAError+0x40>
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	2b21      	cmp	r3, #33	@ 0x21
 800c6f8:	d106      	bne.n	800c708 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c702:	6978      	ldr	r0, [r7, #20]
 800c704:	f7ff fe2c 	bl	800c360 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c712:	2b40      	cmp	r3, #64	@ 0x40
 800c714:	d109      	bne.n	800c72a <UART_DMAError+0x62>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b22      	cmp	r3, #34	@ 0x22
 800c71a:	d106      	bne.n	800c72a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	2200      	movs	r2, #0
 800c720:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c724:	6978      	ldr	r0, [r7, #20]
 800c726:	f7ff fe5d 	bl	800c3e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c730:	f043 0210 	orr.w	r2, r3, #16
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c73a:	6978      	ldr	r0, [r7, #20]
 800c73c:	f7fe fe32 	bl	800b3a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c740:	bf00      	nop
 800c742:	3718      	adds	r7, #24
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c754:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2200      	movs	r2, #0
 800c75a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2200      	movs	r2, #0
 800c762:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f7fe fe1c 	bl	800b3a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c76c:	bf00      	nop
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b088      	sub	sp, #32
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	e853 3f00 	ldrex	r3, [r3]
 800c788:	60bb      	str	r3, [r7, #8]
   return(result);
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c790:	61fb      	str	r3, [r7, #28]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	461a      	mov	r2, r3
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	61bb      	str	r3, [r7, #24]
 800c79c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79e:	6979      	ldr	r1, [r7, #20]
 800c7a0:	69ba      	ldr	r2, [r7, #24]
 800c7a2:	e841 2300 	strex	r3, r2, [r1]
 800c7a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1e6      	bne.n	800c77c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2220      	movs	r2, #32
 800c7b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7fe fdd3 	bl	800b368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7c2:	bf00      	nop
 800c7c4:	3720      	adds	r7, #32
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b083      	sub	sp, #12
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c7d2:	bf00      	nop
 800c7d4:	370c      	adds	r7, #12
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c7de:	b480      	push	{r7}
 800c7e0:	b083      	sub	sp, #12
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c7e6:	bf00      	nop
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b083      	sub	sp, #12
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c7fa:	bf00      	nop
 800c7fc:	370c      	adds	r7, #12
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr

0800c806 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c806:	b480      	push	{r7}
 800c808:	b085      	sub	sp, #20
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c814:	2b01      	cmp	r3, #1
 800c816:	d101      	bne.n	800c81c <HAL_UARTEx_DisableFifoMode+0x16>
 800c818:	2302      	movs	r3, #2
 800c81a:	e027      	b.n	800c86c <HAL_UARTEx_DisableFifoMode+0x66>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2201      	movs	r2, #1
 800c820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2224      	movs	r2, #36	@ 0x24
 800c828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f022 0201 	bic.w	r2, r2, #1
 800c842:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c84a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2220      	movs	r2, #32
 800c85e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c86a:	2300      	movs	r3, #0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d101      	bne.n	800c890 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c88c:	2302      	movs	r3, #2
 800c88e:	e02d      	b.n	800c8ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2224      	movs	r2, #36	@ 0x24
 800c89c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f022 0201 	bic.w	r2, r2, #1
 800c8b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	430a      	orrs	r2, r1
 800c8ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 f84f 	bl	800c970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2220      	movs	r2, #32
 800c8de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3710      	adds	r7, #16
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c904:	2b01      	cmp	r3, #1
 800c906:	d101      	bne.n	800c90c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c908:	2302      	movs	r3, #2
 800c90a:	e02d      	b.n	800c968 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2224      	movs	r2, #36	@ 0x24
 800c918:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f022 0201 	bic.w	r2, r2, #1
 800c932:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	683a      	ldr	r2, [r7, #0]
 800c944:	430a      	orrs	r2, r1
 800c946:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f811 	bl	800c970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2220      	movs	r2, #32
 800c95a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d108      	bne.n	800c992 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c990:	e031      	b.n	800c9f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c992:	2310      	movs	r3, #16
 800c994:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c996:	2310      	movs	r3, #16
 800c998:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	0e5b      	lsrs	r3, r3, #25
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	f003 0307 	and.w	r3, r3, #7
 800c9a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	0f5b      	lsrs	r3, r3, #29
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	f003 0307 	and.w	r3, r3, #7
 800c9b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9ba:	7bbb      	ldrb	r3, [r7, #14]
 800c9bc:	7b3a      	ldrb	r2, [r7, #12]
 800c9be:	4911      	ldr	r1, [pc, #68]	@ (800ca04 <UARTEx_SetNbDataToProcess+0x94>)
 800c9c0:	5c8a      	ldrb	r2, [r1, r2]
 800c9c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c9c6:	7b3a      	ldrb	r2, [r7, #12]
 800c9c8:	490f      	ldr	r1, [pc, #60]	@ (800ca08 <UARTEx_SetNbDataToProcess+0x98>)
 800c9ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9d0:	b29a      	uxth	r2, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
 800c9da:	7b7a      	ldrb	r2, [r7, #13]
 800c9dc:	4909      	ldr	r1, [pc, #36]	@ (800ca04 <UARTEx_SetNbDataToProcess+0x94>)
 800c9de:	5c8a      	ldrb	r2, [r1, r2]
 800c9e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c9e4:	7b7a      	ldrb	r2, [r7, #13]
 800c9e6:	4908      	ldr	r1, [pc, #32]	@ (800ca08 <UARTEx_SetNbDataToProcess+0x98>)
 800c9e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c9f6:	bf00      	nop
 800c9f8:	3714      	adds	r7, #20
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	0801407c 	.word	0x0801407c
 800ca08:	08014084 	.word	0x08014084

0800ca0c <__NVIC_SetPriority>:
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	4603      	mov	r3, r0
 800ca14:	6039      	str	r1, [r7, #0]
 800ca16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ca18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	db0a      	blt.n	800ca36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	490c      	ldr	r1, [pc, #48]	@ (800ca58 <__NVIC_SetPriority+0x4c>)
 800ca26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca2a:	0112      	lsls	r2, r2, #4
 800ca2c:	b2d2      	uxtb	r2, r2
 800ca2e:	440b      	add	r3, r1
 800ca30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ca34:	e00a      	b.n	800ca4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	4908      	ldr	r1, [pc, #32]	@ (800ca5c <__NVIC_SetPriority+0x50>)
 800ca3c:	88fb      	ldrh	r3, [r7, #6]
 800ca3e:	f003 030f 	and.w	r3, r3, #15
 800ca42:	3b04      	subs	r3, #4
 800ca44:	0112      	lsls	r2, r2, #4
 800ca46:	b2d2      	uxtb	r2, r2
 800ca48:	440b      	add	r3, r1
 800ca4a:	761a      	strb	r2, [r3, #24]
}
 800ca4c:	bf00      	nop
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr
 800ca58:	e000e100 	.word	0xe000e100
 800ca5c:	e000ed00 	.word	0xe000ed00

0800ca60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ca60:	b580      	push	{r7, lr}
 800ca62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ca64:	4b05      	ldr	r3, [pc, #20]	@ (800ca7c <SysTick_Handler+0x1c>)
 800ca66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ca68:	f002 f998 	bl	800ed9c <xTaskGetSchedulerState>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d001      	beq.n	800ca76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ca72:	f003 fa99 	bl	800ffa8 <xPortSysTickHandler>
  }
}
 800ca76:	bf00      	nop
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	e000e010 	.word	0xe000e010

0800ca80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ca80:	b580      	push	{r7, lr}
 800ca82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ca84:	2100      	movs	r1, #0
 800ca86:	f06f 0004 	mvn.w	r0, #4
 800ca8a:	f7ff ffbf 	bl	800ca0c <__NVIC_SetPriority>
#endif
}
 800ca8e:	bf00      	nop
 800ca90:	bd80      	pop	{r7, pc}
	...

0800ca94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca9a:	f3ef 8305 	mrs	r3, IPSR
 800ca9e:	603b      	str	r3, [r7, #0]
  return(result);
 800caa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d003      	beq.n	800caae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800caa6:	f06f 0305 	mvn.w	r3, #5
 800caaa:	607b      	str	r3, [r7, #4]
 800caac:	e00c      	b.n	800cac8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800caae:	4b0a      	ldr	r3, [pc, #40]	@ (800cad8 <osKernelInitialize+0x44>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d105      	bne.n	800cac2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cab6:	4b08      	ldr	r3, [pc, #32]	@ (800cad8 <osKernelInitialize+0x44>)
 800cab8:	2201      	movs	r2, #1
 800caba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	607b      	str	r3, [r7, #4]
 800cac0:	e002      	b.n	800cac8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cac6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cac8:	687b      	ldr	r3, [r7, #4]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	370c      	adds	r7, #12
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	240017e0 	.word	0x240017e0

0800cadc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cae2:	f3ef 8305 	mrs	r3, IPSR
 800cae6:	603b      	str	r3, [r7, #0]
  return(result);
 800cae8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caea:	2b00      	cmp	r3, #0
 800caec:	d003      	beq.n	800caf6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800caee:	f06f 0305 	mvn.w	r3, #5
 800caf2:	607b      	str	r3, [r7, #4]
 800caf4:	e010      	b.n	800cb18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800caf6:	4b0b      	ldr	r3, [pc, #44]	@ (800cb24 <osKernelStart+0x48>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d109      	bne.n	800cb12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cafe:	f7ff ffbf 	bl	800ca80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cb02:	4b08      	ldr	r3, [pc, #32]	@ (800cb24 <osKernelStart+0x48>)
 800cb04:	2202      	movs	r2, #2
 800cb06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cb08:	f001 fcc2 	bl	800e490 <vTaskStartScheduler>
      stat = osOK;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	607b      	str	r3, [r7, #4]
 800cb10:	e002      	b.n	800cb18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cb12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb18:	687b      	ldr	r3, [r7, #4]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	240017e0 	.word	0x240017e0

0800cb28 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb2e:	f3ef 8305 	mrs	r3, IPSR
 800cb32:	603b      	str	r3, [r7, #0]
  return(result);
 800cb34:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d003      	beq.n	800cb42 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800cb3a:	f001 fdd5 	bl	800e6e8 <xTaskGetTickCountFromISR>
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	e002      	b.n	800cb48 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800cb42:	f001 fdc1 	bl	800e6c8 <xTaskGetTickCount>
 800cb46:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800cb48:	687b      	ldr	r3, [r7, #4]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b08e      	sub	sp, #56	@ 0x38
 800cb56:	af04      	add	r7, sp, #16
 800cb58:	60f8      	str	r0, [r7, #12]
 800cb5a:	60b9      	str	r1, [r7, #8]
 800cb5c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb62:	f3ef 8305 	mrs	r3, IPSR
 800cb66:	617b      	str	r3, [r7, #20]
  return(result);
 800cb68:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d17e      	bne.n	800cc6c <osThreadNew+0x11a>
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d07b      	beq.n	800cc6c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cb74:	2380      	movs	r3, #128	@ 0x80
 800cb76:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cb78:	2318      	movs	r3, #24
 800cb7a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cb80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb84:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d045      	beq.n	800cc18 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <osThreadNew+0x48>
        name = attr->name;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	699b      	ldr	r3, [r3, #24]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d002      	beq.n	800cba8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	699b      	ldr	r3, [r3, #24]
 800cba6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d008      	beq.n	800cbc0 <osThreadNew+0x6e>
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	2b38      	cmp	r3, #56	@ 0x38
 800cbb2:	d805      	bhi.n	800cbc0 <osThreadNew+0x6e>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	f003 0301 	and.w	r3, r3, #1
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <osThreadNew+0x72>
        return (NULL);
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	e054      	b.n	800cc6e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	695b      	ldr	r3, [r3, #20]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d003      	beq.n	800cbd4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	695b      	ldr	r3, [r3, #20]
 800cbd0:	089b      	lsrs	r3, r3, #2
 800cbd2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00e      	beq.n	800cbfa <osThreadNew+0xa8>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	2ba7      	cmp	r3, #167	@ 0xa7
 800cbe2:	d90a      	bls.n	800cbfa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d006      	beq.n	800cbfa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	695b      	ldr	r3, [r3, #20]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <osThreadNew+0xa8>
        mem = 1;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	61bb      	str	r3, [r7, #24]
 800cbf8:	e010      	b.n	800cc1c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10c      	bne.n	800cc1c <osThreadNew+0xca>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d108      	bne.n	800cc1c <osThreadNew+0xca>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d104      	bne.n	800cc1c <osThreadNew+0xca>
          mem = 0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	61bb      	str	r3, [r7, #24]
 800cc16:	e001      	b.n	800cc1c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d110      	bne.n	800cc44 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc2a:	9202      	str	r2, [sp, #8]
 800cc2c:	9301      	str	r3, [sp, #4]
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	9300      	str	r3, [sp, #0]
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	6a3a      	ldr	r2, [r7, #32]
 800cc36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f001 fa35 	bl	800e0a8 <xTaskCreateStatic>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	613b      	str	r3, [r7, #16]
 800cc42:	e013      	b.n	800cc6c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d110      	bne.n	800cc6c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	f107 0310 	add.w	r3, r7, #16
 800cc52:	9301      	str	r3, [sp, #4]
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc5c:	68f8      	ldr	r0, [r7, #12]
 800cc5e:	f001 fa83 	bl	800e168 <xTaskCreate>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d001      	beq.n	800cc6c <osThreadNew+0x11a>
            hTask = NULL;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cc6c:	693b      	ldr	r3, [r7, #16]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3728      	adds	r7, #40	@ 0x28
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
	...

0800cc78 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b088      	sub	sp, #32
 800cc7c:	af02      	add	r7, sp, #8
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d002      	beq.n	800cc92 <osThreadFlagsSet+0x1a>
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	da03      	bge.n	800cc9a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800cc92:	f06f 0303 	mvn.w	r3, #3
 800cc96:	60fb      	str	r3, [r7, #12]
 800cc98:	e035      	b.n	800cd06 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800cc9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cca0:	f3ef 8305 	mrs	r3, IPSR
 800cca4:	613b      	str	r3, [r7, #16]
  return(result);
 800cca6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d01f      	beq.n	800ccec <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800ccac:	2300      	movs	r3, #0
 800ccae:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ccb0:	f107 0308 	add.w	r3, r7, #8
 800ccb4:	9300      	str	r3, [sp, #0]
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	2201      	movs	r2, #1
 800ccba:	6839      	ldr	r1, [r7, #0]
 800ccbc:	6978      	ldr	r0, [r7, #20]
 800ccbe:	f002 fb1d 	bl	800f2fc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ccc2:	f107 030c 	add.w	r3, r7, #12
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	9200      	str	r2, [sp, #0]
 800ccca:	2200      	movs	r2, #0
 800cccc:	2100      	movs	r1, #0
 800ccce:	6978      	ldr	r0, [r7, #20]
 800ccd0:	f002 fb14 	bl	800f2fc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d015      	beq.n	800cd06 <osThreadFlagsSet+0x8e>
 800ccda:	4b0d      	ldr	r3, [pc, #52]	@ (800cd10 <osThreadFlagsSet+0x98>)
 800ccdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	e00c      	b.n	800cd06 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ccec:	2300      	movs	r3, #0
 800ccee:	2201      	movs	r2, #1
 800ccf0:	6839      	ldr	r1, [r7, #0]
 800ccf2:	6978      	ldr	r0, [r7, #20]
 800ccf4:	f002 fa40 	bl	800f178 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ccf8:	f107 030c 	add.w	r3, r7, #12
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	2100      	movs	r1, #0
 800cd00:	6978      	ldr	r0, [r7, #20]
 800cd02:	f002 fa39 	bl	800f178 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800cd06:	68fb      	ldr	r3, [r7, #12]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3718      	adds	r7, #24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	e000ed04 	.word	0xe000ed04

0800cd14 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd1a:	f3ef 8305 	mrs	r3, IPSR
 800cd1e:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd20:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d003      	beq.n	800cd2e <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800cd26:	f06f 0305 	mvn.w	r3, #5
 800cd2a:	607b      	str	r3, [r7, #4]
 800cd2c:	e00e      	b.n	800cd4c <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800cd2e:	f002 f825 	bl	800ed7c <xTaskGetCurrentTaskHandle>
 800cd32:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800cd34:	1d3b      	adds	r3, r7, #4
 800cd36:	2200      	movs	r2, #0
 800cd38:	2100      	movs	r1, #0
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f002 fa1c 	bl	800f178 <xTaskGenericNotify>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d002      	beq.n	800cd4c <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800cd46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800cd4c:	687b      	ldr	r3, [r7, #4]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b08c      	sub	sp, #48	@ 0x30
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	60f8      	str	r0, [r7, #12]
 800cd5e:	60b9      	str	r1, [r7, #8]
 800cd60:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd62:	f3ef 8305 	mrs	r3, IPSR
 800cd66:	617b      	str	r3, [r7, #20]
  return(result);
 800cd68:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d003      	beq.n	800cd76 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800cd6e:	f06f 0305 	mvn.w	r3, #5
 800cd72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd74:	e06b      	b.n	800ce4e <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	da03      	bge.n	800cd84 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800cd7c:	f06f 0303 	mvn.w	r3, #3
 800cd80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd82:	e064      	b.n	800ce4e <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	f003 0302 	and.w	r3, r3, #2
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d002      	beq.n	800cd94 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd92:	e001      	b.n	800cd98 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800cda0:	f001 fc92 	bl	800e6c8 <xTaskGetTickCount>
 800cda4:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800cda6:	f107 0210 	add.w	r2, r7, #16
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cdae:	2000      	movs	r0, #0
 800cdb0:	f002 f982 	bl	800f0b8 <xTaskNotifyWait>
 800cdb4:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d137      	bne.n	800ce2c <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800cdbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	f003 0301 	and.w	r3, r3, #1
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00c      	beq.n	800cdf0 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdda:	4013      	ands	r3, r2
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d032      	beq.n	800ce48 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10f      	bne.n	800ce08 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800cde8:	f06f 0302 	mvn.w	r3, #2
 800cdec:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800cdee:	e02e      	b.n	800ce4e <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d128      	bne.n	800ce4c <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d103      	bne.n	800ce08 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800ce00:	f06f 0302 	mvn.w	r3, #2
 800ce04:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800ce06:	e022      	b.n	800ce4e <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800ce08:	f001 fc5e 	bl	800e6c8 <xTaskGetTickCount>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	6a3b      	ldr	r3, [r7, #32]
 800ce10:	1ad3      	subs	r3, r2, r3
 800ce12:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800ce14:	69ba      	ldr	r2, [r7, #24]
 800ce16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d902      	bls.n	800ce22 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce20:	e00e      	b.n	800ce40 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800ce22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce2a:	e009      	b.n	800ce40 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d103      	bne.n	800ce3a <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800ce32:	f06f 0302 	mvn.w	r3, #2
 800ce36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce38:	e002      	b.n	800ce40 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800ce3a:	f06f 0301 	mvn.w	r3, #1
 800ce3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d1af      	bne.n	800cda6 <osThreadFlagsWait+0x50>
 800ce46:	e002      	b.n	800ce4e <osThreadFlagsWait+0xf8>
            break;
 800ce48:	bf00      	nop
 800ce4a:	e000      	b.n	800ce4e <osThreadFlagsWait+0xf8>
            break;
 800ce4c:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800ce4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3730      	adds	r7, #48	@ 0x30
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce60:	f3ef 8305 	mrs	r3, IPSR
 800ce64:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d003      	beq.n	800ce74 <osDelay+0x1c>
    stat = osErrorISR;
 800ce6c:	f06f 0305 	mvn.w	r3, #5
 800ce70:	60fb      	str	r3, [r7, #12]
 800ce72:	e007      	b.n	800ce84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ce74:	2300      	movs	r3, #0
 800ce76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d002      	beq.n	800ce84 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f001 fad0 	bl	800e424 <vTaskDelay>
    }
  }

  return (stat);
 800ce84:	68fb      	ldr	r3, [r7, #12]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3710      	adds	r7, #16
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b088      	sub	sp, #32
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ce96:	2300      	movs	r3, #0
 800ce98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce9a:	f3ef 8305 	mrs	r3, IPSR
 800ce9e:	60bb      	str	r3, [r7, #8]
  return(result);
 800cea0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d174      	bne.n	800cf90 <osMutexNew+0x102>
    if (attr != NULL) {
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	61bb      	str	r3, [r7, #24]
 800ceb2:	e001      	b.n	800ceb8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	f003 0301 	and.w	r3, r3, #1
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <osMutexNew+0x3a>
      rmtx = 1U;
 800cec2:	2301      	movs	r3, #1
 800cec4:	617b      	str	r3, [r7, #20]
 800cec6:	e001      	b.n	800cecc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800cec8:	2300      	movs	r3, #0
 800ceca:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	f003 0308 	and.w	r3, r3, #8
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d15c      	bne.n	800cf90 <osMutexNew+0x102>
      mem = -1;
 800ced6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ceda:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d015      	beq.n	800cf0e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d006      	beq.n	800cef8 <osMutexNew+0x6a>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	2b4f      	cmp	r3, #79	@ 0x4f
 800cef0:	d902      	bls.n	800cef8 <osMutexNew+0x6a>
          mem = 1;
 800cef2:	2301      	movs	r3, #1
 800cef4:	613b      	str	r3, [r7, #16]
 800cef6:	e00c      	b.n	800cf12 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d108      	bne.n	800cf12 <osMutexNew+0x84>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d104      	bne.n	800cf12 <osMutexNew+0x84>
            mem = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	613b      	str	r3, [r7, #16]
 800cf0c:	e001      	b.n	800cf12 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d112      	bne.n	800cf3e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d007      	beq.n	800cf2e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	4619      	mov	r1, r3
 800cf24:	2004      	movs	r0, #4
 800cf26:	f000 fb20 	bl	800d56a <xQueueCreateMutexStatic>
 800cf2a:	61f8      	str	r0, [r7, #28]
 800cf2c:	e016      	b.n	800cf5c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	4619      	mov	r1, r3
 800cf34:	2001      	movs	r0, #1
 800cf36:	f000 fb18 	bl	800d56a <xQueueCreateMutexStatic>
 800cf3a:	61f8      	str	r0, [r7, #28]
 800cf3c:	e00e      	b.n	800cf5c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d10b      	bne.n	800cf5c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d004      	beq.n	800cf54 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cf4a:	2004      	movs	r0, #4
 800cf4c:	f000 faf5 	bl	800d53a <xQueueCreateMutex>
 800cf50:	61f8      	str	r0, [r7, #28]
 800cf52:	e003      	b.n	800cf5c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800cf54:	2001      	movs	r0, #1
 800cf56:	f000 faf0 	bl	800d53a <xQueueCreateMutex>
 800cf5a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d00c      	beq.n	800cf7c <osMutexNew+0xee>
        if (attr != NULL) {
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d003      	beq.n	800cf70 <osMutexNew+0xe2>
          name = attr->name;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	60fb      	str	r3, [r7, #12]
 800cf6e:	e001      	b.n	800cf74 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800cf70:	2300      	movs	r3, #0
 800cf72:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800cf74:	68f9      	ldr	r1, [r7, #12]
 800cf76:	69f8      	ldr	r0, [r7, #28]
 800cf78:	f001 f838 	bl	800dfec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d006      	beq.n	800cf90 <osMutexNew+0x102>
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d003      	beq.n	800cf90 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	f043 0301 	orr.w	r3, r3, #1
 800cf8e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cf90:	69fb      	ldr	r3, [r7, #28]
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3720      	adds	r7, #32
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b086      	sub	sp, #24
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f023 0301 	bic.w	r3, r3, #1
 800cfaa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f003 0301 	and.w	r3, r3, #1
 800cfb2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfb8:	f3ef 8305 	mrs	r3, IPSR
 800cfbc:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfbe:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d003      	beq.n	800cfcc <osMutexAcquire+0x32>
    stat = osErrorISR;
 800cfc4:	f06f 0305 	mvn.w	r3, #5
 800cfc8:	617b      	str	r3, [r7, #20]
 800cfca:	e02c      	b.n	800d026 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d103      	bne.n	800cfda <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cfd2:	f06f 0303 	mvn.w	r3, #3
 800cfd6:	617b      	str	r3, [r7, #20]
 800cfd8:	e025      	b.n	800d026 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d011      	beq.n	800d004 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cfe0:	6839      	ldr	r1, [r7, #0]
 800cfe2:	6938      	ldr	r0, [r7, #16]
 800cfe4:	f000 fb11 	bl	800d60a <xQueueTakeMutexRecursive>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d01b      	beq.n	800d026 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d003      	beq.n	800cffc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800cff4:	f06f 0301 	mvn.w	r3, #1
 800cff8:	617b      	str	r3, [r7, #20]
 800cffa:	e014      	b.n	800d026 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cffc:	f06f 0302 	mvn.w	r3, #2
 800d000:	617b      	str	r3, [r7, #20]
 800d002:	e010      	b.n	800d026 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d004:	6839      	ldr	r1, [r7, #0]
 800d006:	6938      	ldr	r0, [r7, #16]
 800d008:	f000 fdb8 	bl	800db7c <xQueueSemaphoreTake>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b01      	cmp	r3, #1
 800d010:	d009      	beq.n	800d026 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d003      	beq.n	800d020 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d018:	f06f 0301 	mvn.w	r3, #1
 800d01c:	617b      	str	r3, [r7, #20]
 800d01e:	e002      	b.n	800d026 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d020:	f06f 0302 	mvn.w	r3, #2
 800d024:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d026:	697b      	ldr	r3, [r7, #20]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3718      	adds	r7, #24
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d030:	b580      	push	{r7, lr}
 800d032:	b086      	sub	sp, #24
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f023 0301 	bic.w	r3, r3, #1
 800d03e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f003 0301 	and.w	r3, r3, #1
 800d046:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d048:	2300      	movs	r3, #0
 800d04a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d04c:	f3ef 8305 	mrs	r3, IPSR
 800d050:	60bb      	str	r3, [r7, #8]
  return(result);
 800d052:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d054:	2b00      	cmp	r3, #0
 800d056:	d003      	beq.n	800d060 <osMutexRelease+0x30>
    stat = osErrorISR;
 800d058:	f06f 0305 	mvn.w	r3, #5
 800d05c:	617b      	str	r3, [r7, #20]
 800d05e:	e01f      	b.n	800d0a0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d103      	bne.n	800d06e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d066:	f06f 0303 	mvn.w	r3, #3
 800d06a:	617b      	str	r3, [r7, #20]
 800d06c:	e018      	b.n	800d0a0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d009      	beq.n	800d088 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d074:	6938      	ldr	r0, [r7, #16]
 800d076:	f000 fa93 	bl	800d5a0 <xQueueGiveMutexRecursive>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d00f      	beq.n	800d0a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d080:	f06f 0302 	mvn.w	r3, #2
 800d084:	617b      	str	r3, [r7, #20]
 800d086:	e00b      	b.n	800d0a0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d088:	2300      	movs	r3, #0
 800d08a:	2200      	movs	r2, #0
 800d08c:	2100      	movs	r1, #0
 800d08e:	6938      	ldr	r0, [r7, #16]
 800d090:	f000 faf2 	bl	800d678 <xQueueGenericSend>
 800d094:	4603      	mov	r3, r0
 800d096:	2b01      	cmp	r3, #1
 800d098:	d002      	beq.n	800d0a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d09a:	f06f 0302 	mvn.w	r3, #2
 800d09e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d0a0:	697b      	ldr	r3, [r7, #20]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3718      	adds	r7, #24
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
	...

0800d0ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	4a07      	ldr	r2, [pc, #28]	@ (800d0d8 <vApplicationGetIdleTaskMemory+0x2c>)
 800d0bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	4a06      	ldr	r2, [pc, #24]	@ (800d0dc <vApplicationGetIdleTaskMemory+0x30>)
 800d0c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2280      	movs	r2, #128	@ 0x80
 800d0c8:	601a      	str	r2, [r3, #0]
}
 800d0ca:	bf00      	nop
 800d0cc:	3714      	adds	r7, #20
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	240017e4 	.word	0x240017e4
 800d0dc:	2400188c 	.word	0x2400188c

0800d0e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d0e0:	b480      	push	{r7}
 800d0e2:	b085      	sub	sp, #20
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	4a07      	ldr	r2, [pc, #28]	@ (800d10c <vApplicationGetTimerTaskMemory+0x2c>)
 800d0f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	4a06      	ldr	r2, [pc, #24]	@ (800d110 <vApplicationGetTimerTaskMemory+0x30>)
 800d0f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d0fe:	601a      	str	r2, [r3, #0]
}
 800d100:	bf00      	nop
 800d102:	3714      	adds	r7, #20
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr
 800d10c:	24001a8c 	.word	0x24001a8c
 800d110:	24001b34 	.word	0x24001b34

0800d114 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f103 0208 	add.w	r2, r3, #8
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d12c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f103 0208 	add.w	r2, r3, #8
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f103 0208 	add.w	r2, r3, #8
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d148:	bf00      	nop
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d162:	bf00      	nop
 800d164:	370c      	adds	r7, #12
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr

0800d16e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d16e:	b480      	push	{r7}
 800d170:	b085      	sub	sp, #20
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	689a      	ldr	r2, [r3, #8]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	683a      	ldr	r2, [r7, #0]
 800d192:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	683a      	ldr	r2, [r7, #0]
 800d198:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	1c5a      	adds	r2, r3, #1
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	601a      	str	r2, [r3, #0]
}
 800d1aa:	bf00      	nop
 800d1ac:	3714      	adds	r7, #20
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr

0800d1b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1b6:	b480      	push	{r7}
 800d1b8:	b085      	sub	sp, #20
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1cc:	d103      	bne.n	800d1d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	e00c      	b.n	800d1f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	3308      	adds	r3, #8
 800d1da:	60fb      	str	r3, [r7, #12]
 800d1dc:	e002      	b.n	800d1e4 <vListInsert+0x2e>
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	60fb      	str	r3, [r7, #12]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d2f6      	bcs.n	800d1de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	685a      	ldr	r2, [r3, #4]
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	1c5a      	adds	r2, r3, #1
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	601a      	str	r2, [r3, #0]
}
 800d21c:	bf00      	nop
 800d21e:	3714      	adds	r7, #20
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	6892      	ldr	r2, [r2, #8]
 800d23e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	6852      	ldr	r2, [r2, #4]
 800d248:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	429a      	cmp	r2, r3
 800d252:	d103      	bne.n	800d25c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	689a      	ldr	r2, [r3, #8]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	1e5a      	subs	r2, r3, #1
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
}
 800d270:	4618      	mov	r0, r3
 800d272:	3714      	adds	r7, #20
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d10b      	bne.n	800d2a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d294:	f383 8811 	msr	BASEPRI, r3
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d2a2:	bf00      	nop
 800d2a4:	bf00      	nop
 800d2a6:	e7fd      	b.n	800d2a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d2a8:	f002 fdee 	bl	800fe88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2b4:	68f9      	ldr	r1, [r7, #12]
 800d2b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d2b8:	fb01 f303 	mul.w	r3, r1, r3
 800d2bc:	441a      	add	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	68f9      	ldr	r1, [r7, #12]
 800d2dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d2de:	fb01 f303 	mul.w	r3, r1, r3
 800d2e2:	441a      	add	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	22ff      	movs	r2, #255	@ 0xff
 800d2ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	22ff      	movs	r2, #255	@ 0xff
 800d2f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d114      	bne.n	800d328 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d01a      	beq.n	800d33c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3310      	adds	r3, #16
 800d30a:	4618      	mov	r0, r3
 800d30c:	f001 fb70 	bl	800e9f0 <xTaskRemoveFromEventList>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d012      	beq.n	800d33c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d316:	4b0d      	ldr	r3, [pc, #52]	@ (800d34c <xQueueGenericReset+0xd0>)
 800d318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d31c:	601a      	str	r2, [r3, #0]
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	e009      	b.n	800d33c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	3310      	adds	r3, #16
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff fef1 	bl	800d114 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	3324      	adds	r3, #36	@ 0x24
 800d336:	4618      	mov	r0, r3
 800d338:	f7ff feec 	bl	800d114 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d33c:	f002 fdd6 	bl	800feec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d340:	2301      	movs	r3, #1
}
 800d342:	4618      	mov	r0, r3
 800d344:	3710      	adds	r7, #16
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	e000ed04 	.word	0xe000ed04

0800d350 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d350:	b580      	push	{r7, lr}
 800d352:	b08e      	sub	sp, #56	@ 0x38
 800d354:	af02      	add	r7, sp, #8
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
 800d35c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10b      	bne.n	800d37c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d376:	bf00      	nop
 800d378:	bf00      	nop
 800d37a:	e7fd      	b.n	800d378 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d10b      	bne.n	800d39a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d386:	f383 8811 	msr	BASEPRI, r3
 800d38a:	f3bf 8f6f 	isb	sy
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d394:	bf00      	nop
 800d396:	bf00      	nop
 800d398:	e7fd      	b.n	800d396 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d002      	beq.n	800d3a6 <xQueueGenericCreateStatic+0x56>
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d001      	beq.n	800d3aa <xQueueGenericCreateStatic+0x5a>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	e000      	b.n	800d3ac <xQueueGenericCreateStatic+0x5c>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d10b      	bne.n	800d3c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	623b      	str	r3, [r7, #32]
}
 800d3c2:	bf00      	nop
 800d3c4:	bf00      	nop
 800d3c6:	e7fd      	b.n	800d3c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d102      	bne.n	800d3d4 <xQueueGenericCreateStatic+0x84>
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d101      	bne.n	800d3d8 <xQueueGenericCreateStatic+0x88>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e000      	b.n	800d3da <xQueueGenericCreateStatic+0x8a>
 800d3d8:	2300      	movs	r3, #0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10b      	bne.n	800d3f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	61fb      	str	r3, [r7, #28]
}
 800d3f0:	bf00      	nop
 800d3f2:	bf00      	nop
 800d3f4:	e7fd      	b.n	800d3f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d3f6:	2350      	movs	r3, #80	@ 0x50
 800d3f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	2b50      	cmp	r3, #80	@ 0x50
 800d3fe:	d00b      	beq.n	800d418 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d404:	f383 8811 	msr	BASEPRI, r3
 800d408:	f3bf 8f6f 	isb	sy
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	61bb      	str	r3, [r7, #24]
}
 800d412:	bf00      	nop
 800d414:	bf00      	nop
 800d416:	e7fd      	b.n	800d414 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d418:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00d      	beq.n	800d440 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d426:	2201      	movs	r2, #1
 800d428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d42c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d432:	9300      	str	r3, [sp, #0]
 800d434:	4613      	mov	r3, r2
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	68b9      	ldr	r1, [r7, #8]
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	f000 f840 	bl	800d4c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d442:	4618      	mov	r0, r3
 800d444:	3730      	adds	r7, #48	@ 0x30
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b08a      	sub	sp, #40	@ 0x28
 800d44e:	af02      	add	r7, sp, #8
 800d450:	60f8      	str	r0, [r7, #12]
 800d452:	60b9      	str	r1, [r7, #8]
 800d454:	4613      	mov	r3, r2
 800d456:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10b      	bne.n	800d476 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	613b      	str	r3, [r7, #16]
}
 800d470:	bf00      	nop
 800d472:	bf00      	nop
 800d474:	e7fd      	b.n	800d472 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	68ba      	ldr	r2, [r7, #8]
 800d47a:	fb02 f303 	mul.w	r3, r2, r3
 800d47e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	3350      	adds	r3, #80	@ 0x50
 800d484:	4618      	mov	r0, r3
 800d486:	f002 fe21 	bl	80100cc <pvPortMalloc>
 800d48a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d011      	beq.n	800d4b6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	3350      	adds	r3, #80	@ 0x50
 800d49a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d49c:	69bb      	ldr	r3, [r7, #24]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d4a4:	79fa      	ldrb	r2, [r7, #7]
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	697a      	ldr	r2, [r7, #20]
 800d4ae:	68b9      	ldr	r1, [r7, #8]
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f000 f805 	bl	800d4c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d4b6:	69bb      	ldr	r3, [r7, #24]
	}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3720      	adds	r7, #32
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d103      	bne.n	800d4dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	69ba      	ldr	r2, [r7, #24]
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	e002      	b.n	800d4e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d4e8:	69bb      	ldr	r3, [r7, #24]
 800d4ea:	68ba      	ldr	r2, [r7, #8]
 800d4ec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d4ee:	2101      	movs	r1, #1
 800d4f0:	69b8      	ldr	r0, [r7, #24]
 800d4f2:	f7ff fec3 	bl	800d27c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	78fa      	ldrb	r2, [r7, #3]
 800d4fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d4fe:	bf00      	nop
 800d500:	3710      	adds	r7, #16
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d506:	b580      	push	{r7, lr}
 800d508:	b082      	sub	sp, #8
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00e      	beq.n	800d532 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2200      	movs	r2, #0
 800d518:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d526:	2300      	movs	r3, #0
 800d528:	2200      	movs	r2, #0
 800d52a:	2100      	movs	r1, #0
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 f8a3 	bl	800d678 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d532:	bf00      	nop
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b086      	sub	sp, #24
 800d53e:	af00      	add	r7, sp, #0
 800d540:	4603      	mov	r3, r0
 800d542:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d544:	2301      	movs	r3, #1
 800d546:	617b      	str	r3, [r7, #20]
 800d548:	2300      	movs	r3, #0
 800d54a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d54c:	79fb      	ldrb	r3, [r7, #7]
 800d54e:	461a      	mov	r2, r3
 800d550:	6939      	ldr	r1, [r7, #16]
 800d552:	6978      	ldr	r0, [r7, #20]
 800d554:	f7ff ff79 	bl	800d44a <xQueueGenericCreate>
 800d558:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f7ff ffd3 	bl	800d506 <prvInitialiseMutex>

		return xNewQueue;
 800d560:	68fb      	ldr	r3, [r7, #12]
	}
 800d562:	4618      	mov	r0, r3
 800d564:	3718      	adds	r7, #24
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b088      	sub	sp, #32
 800d56e:	af02      	add	r7, sp, #8
 800d570:	4603      	mov	r3, r0
 800d572:	6039      	str	r1, [r7, #0]
 800d574:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d576:	2301      	movs	r3, #1
 800d578:	617b      	str	r3, [r7, #20]
 800d57a:	2300      	movs	r3, #0
 800d57c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d57e:	79fb      	ldrb	r3, [r7, #7]
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2200      	movs	r2, #0
 800d586:	6939      	ldr	r1, [r7, #16]
 800d588:	6978      	ldr	r0, [r7, #20]
 800d58a:	f7ff fee1 	bl	800d350 <xQueueGenericCreateStatic>
 800d58e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d590:	68f8      	ldr	r0, [r7, #12]
 800d592:	f7ff ffb8 	bl	800d506 <prvInitialiseMutex>

		return xNewQueue;
 800d596:	68fb      	ldr	r3, [r7, #12]
	}
 800d598:	4618      	mov	r0, r3
 800d59a:	3718      	adds	r7, #24
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d5a0:	b590      	push	{r4, r7, lr}
 800d5a2:	b087      	sub	sp, #28
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10b      	bne.n	800d5ca <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	60fb      	str	r3, [r7, #12]
}
 800d5c4:	bf00      	nop
 800d5c6:	bf00      	nop
 800d5c8:	e7fd      	b.n	800d5c6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	689c      	ldr	r4, [r3, #8]
 800d5ce:	f001 fbd5 	bl	800ed7c <xTaskGetCurrentTaskHandle>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	429c      	cmp	r4, r3
 800d5d6:	d111      	bne.n	800d5fc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	1e5a      	subs	r2, r3, #1
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d105      	bne.n	800d5f6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	6938      	ldr	r0, [r7, #16]
 800d5f2:	f000 f841 	bl	800d678 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	617b      	str	r3, [r7, #20]
 800d5fa:	e001      	b.n	800d600 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d600:	697b      	ldr	r3, [r7, #20]
	}
 800d602:	4618      	mov	r0, r3
 800d604:	371c      	adds	r7, #28
 800d606:	46bd      	mov	sp, r7
 800d608:	bd90      	pop	{r4, r7, pc}

0800d60a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d60a:	b590      	push	{r4, r7, lr}
 800d60c:	b087      	sub	sp, #28
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
 800d612:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d10b      	bne.n	800d636 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d622:	f383 8811 	msr	BASEPRI, r3
 800d626:	f3bf 8f6f 	isb	sy
 800d62a:	f3bf 8f4f 	dsb	sy
 800d62e:	60fb      	str	r3, [r7, #12]
}
 800d630:	bf00      	nop
 800d632:	bf00      	nop
 800d634:	e7fd      	b.n	800d632 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	689c      	ldr	r4, [r3, #8]
 800d63a:	f001 fb9f 	bl	800ed7c <xTaskGetCurrentTaskHandle>
 800d63e:	4603      	mov	r3, r0
 800d640:	429c      	cmp	r4, r3
 800d642:	d107      	bne.n	800d654 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	1c5a      	adds	r2, r3, #1
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d64e:	2301      	movs	r3, #1
 800d650:	617b      	str	r3, [r7, #20]
 800d652:	e00c      	b.n	800d66e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d654:	6839      	ldr	r1, [r7, #0]
 800d656:	6938      	ldr	r0, [r7, #16]
 800d658:	f000 fa90 	bl	800db7c <xQueueSemaphoreTake>
 800d65c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d004      	beq.n	800d66e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	1c5a      	adds	r2, r3, #1
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d66e:	697b      	ldr	r3, [r7, #20]
	}
 800d670:	4618      	mov	r0, r3
 800d672:	371c      	adds	r7, #28
 800d674:	46bd      	mov	sp, r7
 800d676:	bd90      	pop	{r4, r7, pc}

0800d678 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b08e      	sub	sp, #56	@ 0x38
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
 800d684:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d686:	2300      	movs	r3, #0
 800d688:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10b      	bne.n	800d6ac <xQueueGenericSend+0x34>
	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6a6:	bf00      	nop
 800d6a8:	bf00      	nop
 800d6aa:	e7fd      	b.n	800d6a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d103      	bne.n	800d6ba <xQueueGenericSend+0x42>
 800d6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d101      	bne.n	800d6be <xQueueGenericSend+0x46>
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e000      	b.n	800d6c0 <xQueueGenericSend+0x48>
 800d6be:	2300      	movs	r3, #0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d10b      	bne.n	800d6dc <xQueueGenericSend+0x64>
	__asm volatile
 800d6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c8:	f383 8811 	msr	BASEPRI, r3
 800d6cc:	f3bf 8f6f 	isb	sy
 800d6d0:	f3bf 8f4f 	dsb	sy
 800d6d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d6d6:	bf00      	nop
 800d6d8:	bf00      	nop
 800d6da:	e7fd      	b.n	800d6d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d103      	bne.n	800d6ea <xQueueGenericSend+0x72>
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d101      	bne.n	800d6ee <xQueueGenericSend+0x76>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e000      	b.n	800d6f0 <xQueueGenericSend+0x78>
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10b      	bne.n	800d70c <xQueueGenericSend+0x94>
	__asm volatile
 800d6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f8:	f383 8811 	msr	BASEPRI, r3
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	623b      	str	r3, [r7, #32]
}
 800d706:	bf00      	nop
 800d708:	bf00      	nop
 800d70a:	e7fd      	b.n	800d708 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d70c:	f001 fb46 	bl	800ed9c <xTaskGetSchedulerState>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d102      	bne.n	800d71c <xQueueGenericSend+0xa4>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d101      	bne.n	800d720 <xQueueGenericSend+0xa8>
 800d71c:	2301      	movs	r3, #1
 800d71e:	e000      	b.n	800d722 <xQueueGenericSend+0xaa>
 800d720:	2300      	movs	r3, #0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d10b      	bne.n	800d73e <xQueueGenericSend+0xc6>
	__asm volatile
 800d726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	61fb      	str	r3, [r7, #28]
}
 800d738:	bf00      	nop
 800d73a:	bf00      	nop
 800d73c:	e7fd      	b.n	800d73a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d73e:	f002 fba3 	bl	800fe88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d302      	bcc.n	800d754 <xQueueGenericSend+0xdc>
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	2b02      	cmp	r3, #2
 800d752:	d129      	bne.n	800d7a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d754:	683a      	ldr	r2, [r7, #0]
 800d756:	68b9      	ldr	r1, [r7, #8]
 800d758:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d75a:	f000 fb37 	bl	800ddcc <prvCopyDataToQueue>
 800d75e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d764:	2b00      	cmp	r3, #0
 800d766:	d010      	beq.n	800d78a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76a:	3324      	adds	r3, #36	@ 0x24
 800d76c:	4618      	mov	r0, r3
 800d76e:	f001 f93f 	bl	800e9f0 <xTaskRemoveFromEventList>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d013      	beq.n	800d7a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d778:	4b3f      	ldr	r3, [pc, #252]	@ (800d878 <xQueueGenericSend+0x200>)
 800d77a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d77e:	601a      	str	r2, [r3, #0]
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	f3bf 8f6f 	isb	sy
 800d788:	e00a      	b.n	800d7a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d007      	beq.n	800d7a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d790:	4b39      	ldr	r3, [pc, #228]	@ (800d878 <xQueueGenericSend+0x200>)
 800d792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d796:	601a      	str	r2, [r3, #0]
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d7a0:	f002 fba4 	bl	800feec <vPortExitCritical>
				return pdPASS;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	e063      	b.n	800d870 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d103      	bne.n	800d7b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7ae:	f002 fb9d 	bl	800feec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	e05c      	b.n	800d870 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d106      	bne.n	800d7ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7bc:	f107 0314 	add.w	r3, r7, #20
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f001 f979 	bl	800eab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7ca:	f002 fb8f 	bl	800feec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7ce:	f000 fecf 	bl	800e570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7d2:	f002 fb59 	bl	800fe88 <vPortEnterCritical>
 800d7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7dc:	b25b      	sxtb	r3, r3
 800d7de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7e2:	d103      	bne.n	800d7ec <xQueueGenericSend+0x174>
 800d7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7f2:	b25b      	sxtb	r3, r3
 800d7f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7f8:	d103      	bne.n	800d802 <xQueueGenericSend+0x18a>
 800d7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d802:	f002 fb73 	bl	800feec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d806:	1d3a      	adds	r2, r7, #4
 800d808:	f107 0314 	add.w	r3, r7, #20
 800d80c:	4611      	mov	r1, r2
 800d80e:	4618      	mov	r0, r3
 800d810:	f001 f968 	bl	800eae4 <xTaskCheckForTimeOut>
 800d814:	4603      	mov	r3, r0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d124      	bne.n	800d864 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d81a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d81c:	f000 fbce 	bl	800dfbc <prvIsQueueFull>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d018      	beq.n	800d858 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d828:	3310      	adds	r3, #16
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	4611      	mov	r1, r2
 800d82e:	4618      	mov	r0, r3
 800d830:	f001 f88c 	bl	800e94c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d836:	f000 fb59 	bl	800deec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d83a:	f000 fea7 	bl	800e58c <xTaskResumeAll>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	f47f af7c 	bne.w	800d73e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d846:	4b0c      	ldr	r3, [pc, #48]	@ (800d878 <xQueueGenericSend+0x200>)
 800d848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d84c:	601a      	str	r2, [r3, #0]
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	e772      	b.n	800d73e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d858:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d85a:	f000 fb47 	bl	800deec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d85e:	f000 fe95 	bl	800e58c <xTaskResumeAll>
 800d862:	e76c      	b.n	800d73e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d866:	f000 fb41 	bl	800deec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d86a:	f000 fe8f 	bl	800e58c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d86e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d870:	4618      	mov	r0, r3
 800d872:	3738      	adds	r7, #56	@ 0x38
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	e000ed04 	.word	0xe000ed04

0800d87c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b090      	sub	sp, #64	@ 0x40
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
 800d888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10b      	bne.n	800d8ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8a6:	bf00      	nop
 800d8a8:	bf00      	nop
 800d8aa:	e7fd      	b.n	800d8a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d103      	bne.n	800d8ba <xQueueGenericSendFromISR+0x3e>
 800d8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d101      	bne.n	800d8be <xQueueGenericSendFromISR+0x42>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e000      	b.n	800d8c0 <xQueueGenericSendFromISR+0x44>
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d10b      	bne.n	800d8dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c8:	f383 8811 	msr	BASEPRI, r3
 800d8cc:	f3bf 8f6f 	isb	sy
 800d8d0:	f3bf 8f4f 	dsb	sy
 800d8d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d8d6:	bf00      	nop
 800d8d8:	bf00      	nop
 800d8da:	e7fd      	b.n	800d8d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	d103      	bne.n	800d8ea <xQueueGenericSendFromISR+0x6e>
 800d8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d101      	bne.n	800d8ee <xQueueGenericSendFromISR+0x72>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e000      	b.n	800d8f0 <xQueueGenericSendFromISR+0x74>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d10b      	bne.n	800d90c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f8:	f383 8811 	msr	BASEPRI, r3
 800d8fc:	f3bf 8f6f 	isb	sy
 800d900:	f3bf 8f4f 	dsb	sy
 800d904:	623b      	str	r3, [r7, #32]
}
 800d906:	bf00      	nop
 800d908:	bf00      	nop
 800d90a:	e7fd      	b.n	800d908 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d90c:	f002 fb9c 	bl	8010048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d910:	f3ef 8211 	mrs	r2, BASEPRI
 800d914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d918:	f383 8811 	msr	BASEPRI, r3
 800d91c:	f3bf 8f6f 	isb	sy
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	61fa      	str	r2, [r7, #28]
 800d926:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d928:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d92a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d92e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d934:	429a      	cmp	r2, r3
 800d936:	d302      	bcc.n	800d93e <xQueueGenericSendFromISR+0xc2>
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	2b02      	cmp	r3, #2
 800d93c:	d12f      	bne.n	800d99e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d940:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d944:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d94c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d94e:	683a      	ldr	r2, [r7, #0]
 800d950:	68b9      	ldr	r1, [r7, #8]
 800d952:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d954:	f000 fa3a 	bl	800ddcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d958:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d95c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d960:	d112      	bne.n	800d988 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d966:	2b00      	cmp	r3, #0
 800d968:	d016      	beq.n	800d998 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d96c:	3324      	adds	r3, #36	@ 0x24
 800d96e:	4618      	mov	r0, r3
 800d970:	f001 f83e 	bl	800e9f0 <xTaskRemoveFromEventList>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d00e      	beq.n	800d998 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00b      	beq.n	800d998 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	e007      	b.n	800d998 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d988:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d98c:	3301      	adds	r3, #1
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	b25a      	sxtb	r2, r3
 800d992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d998:	2301      	movs	r3, #1
 800d99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d99c:	e001      	b.n	800d9a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d9ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3740      	adds	r7, #64	@ 0x40
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08c      	sub	sp, #48	@ 0x30
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d10b      	bne.n	800d9ea <xQueueReceive+0x32>
	__asm volatile
 800d9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d6:	f383 8811 	msr	BASEPRI, r3
 800d9da:	f3bf 8f6f 	isb	sy
 800d9de:	f3bf 8f4f 	dsb	sy
 800d9e2:	623b      	str	r3, [r7, #32]
}
 800d9e4:	bf00      	nop
 800d9e6:	bf00      	nop
 800d9e8:	e7fd      	b.n	800d9e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d103      	bne.n	800d9f8 <xQueueReceive+0x40>
 800d9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d101      	bne.n	800d9fc <xQueueReceive+0x44>
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e000      	b.n	800d9fe <xQueueReceive+0x46>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d10b      	bne.n	800da1a <xQueueReceive+0x62>
	__asm volatile
 800da02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da06:	f383 8811 	msr	BASEPRI, r3
 800da0a:	f3bf 8f6f 	isb	sy
 800da0e:	f3bf 8f4f 	dsb	sy
 800da12:	61fb      	str	r3, [r7, #28]
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop
 800da18:	e7fd      	b.n	800da16 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da1a:	f001 f9bf 	bl	800ed9c <xTaskGetSchedulerState>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d102      	bne.n	800da2a <xQueueReceive+0x72>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d101      	bne.n	800da2e <xQueueReceive+0x76>
 800da2a:	2301      	movs	r3, #1
 800da2c:	e000      	b.n	800da30 <xQueueReceive+0x78>
 800da2e:	2300      	movs	r3, #0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d10b      	bne.n	800da4c <xQueueReceive+0x94>
	__asm volatile
 800da34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da38:	f383 8811 	msr	BASEPRI, r3
 800da3c:	f3bf 8f6f 	isb	sy
 800da40:	f3bf 8f4f 	dsb	sy
 800da44:	61bb      	str	r3, [r7, #24]
}
 800da46:	bf00      	nop
 800da48:	bf00      	nop
 800da4a:	e7fd      	b.n	800da48 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da4c:	f002 fa1c 	bl	800fe88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da54:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d01f      	beq.n	800da9c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da5c:	68b9      	ldr	r1, [r7, #8]
 800da5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da60:	f000 fa1e 	bl	800dea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da66:	1e5a      	subs	r2, r3, #1
 800da68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da6a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00f      	beq.n	800da94 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da76:	3310      	adds	r3, #16
 800da78:	4618      	mov	r0, r3
 800da7a:	f000 ffb9 	bl	800e9f0 <xTaskRemoveFromEventList>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d007      	beq.n	800da94 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da84:	4b3c      	ldr	r3, [pc, #240]	@ (800db78 <xQueueReceive+0x1c0>)
 800da86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da8a:	601a      	str	r2, [r3, #0]
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da94:	f002 fa2a 	bl	800feec <vPortExitCritical>
				return pdPASS;
 800da98:	2301      	movs	r3, #1
 800da9a:	e069      	b.n	800db70 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d103      	bne.n	800daaa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800daa2:	f002 fa23 	bl	800feec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800daa6:	2300      	movs	r3, #0
 800daa8:	e062      	b.n	800db70 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800daaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daac:	2b00      	cmp	r3, #0
 800daae:	d106      	bne.n	800dabe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dab0:	f107 0310 	add.w	r3, r7, #16
 800dab4:	4618      	mov	r0, r3
 800dab6:	f000 ffff 	bl	800eab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800daba:	2301      	movs	r3, #1
 800dabc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dabe:	f002 fa15 	bl	800feec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dac2:	f000 fd55 	bl	800e570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dac6:	f002 f9df 	bl	800fe88 <vPortEnterCritical>
 800daca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dacc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dad0:	b25b      	sxtb	r3, r3
 800dad2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dad6:	d103      	bne.n	800dae0 <xQueueReceive+0x128>
 800dad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dada:	2200      	movs	r2, #0
 800dadc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dae6:	b25b      	sxtb	r3, r3
 800dae8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800daec:	d103      	bne.n	800daf6 <xQueueReceive+0x13e>
 800daee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800daf6:	f002 f9f9 	bl	800feec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dafa:	1d3a      	adds	r2, r7, #4
 800dafc:	f107 0310 	add.w	r3, r7, #16
 800db00:	4611      	mov	r1, r2
 800db02:	4618      	mov	r0, r3
 800db04:	f000 ffee 	bl	800eae4 <xTaskCheckForTimeOut>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d123      	bne.n	800db56 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db10:	f000 fa3e 	bl	800df90 <prvIsQueueEmpty>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d017      	beq.n	800db4a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1c:	3324      	adds	r3, #36	@ 0x24
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	4611      	mov	r1, r2
 800db22:	4618      	mov	r0, r3
 800db24:	f000 ff12 	bl	800e94c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db2a:	f000 f9df 	bl	800deec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db2e:	f000 fd2d 	bl	800e58c <xTaskResumeAll>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d189      	bne.n	800da4c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800db38:	4b0f      	ldr	r3, [pc, #60]	@ (800db78 <xQueueReceive+0x1c0>)
 800db3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db3e:	601a      	str	r2, [r3, #0]
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	e780      	b.n	800da4c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800db4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db4c:	f000 f9ce 	bl	800deec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db50:	f000 fd1c 	bl	800e58c <xTaskResumeAll>
 800db54:	e77a      	b.n	800da4c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800db56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db58:	f000 f9c8 	bl	800deec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db5c:	f000 fd16 	bl	800e58c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db62:	f000 fa15 	bl	800df90 <prvIsQueueEmpty>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f43f af6f 	beq.w	800da4c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800db70:	4618      	mov	r0, r3
 800db72:	3730      	adds	r7, #48	@ 0x30
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	e000ed04 	.word	0xe000ed04

0800db7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b08e      	sub	sp, #56	@ 0x38
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800db86:	2300      	movs	r3, #0
 800db88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800db8e:	2300      	movs	r3, #0
 800db90:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db94:	2b00      	cmp	r3, #0
 800db96:	d10b      	bne.n	800dbb0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800db98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db9c:	f383 8811 	msr	BASEPRI, r3
 800dba0:	f3bf 8f6f 	isb	sy
 800dba4:	f3bf 8f4f 	dsb	sy
 800dba8:	623b      	str	r3, [r7, #32]
}
 800dbaa:	bf00      	nop
 800dbac:	bf00      	nop
 800dbae:	e7fd      	b.n	800dbac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00b      	beq.n	800dbd0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800dbb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbbc:	f383 8811 	msr	BASEPRI, r3
 800dbc0:	f3bf 8f6f 	isb	sy
 800dbc4:	f3bf 8f4f 	dsb	sy
 800dbc8:	61fb      	str	r3, [r7, #28]
}
 800dbca:	bf00      	nop
 800dbcc:	bf00      	nop
 800dbce:	e7fd      	b.n	800dbcc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbd0:	f001 f8e4 	bl	800ed9c <xTaskGetSchedulerState>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d102      	bne.n	800dbe0 <xQueueSemaphoreTake+0x64>
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d101      	bne.n	800dbe4 <xQueueSemaphoreTake+0x68>
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	e000      	b.n	800dbe6 <xQueueSemaphoreTake+0x6a>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d10b      	bne.n	800dc02 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800dbea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbee:	f383 8811 	msr	BASEPRI, r3
 800dbf2:	f3bf 8f6f 	isb	sy
 800dbf6:	f3bf 8f4f 	dsb	sy
 800dbfa:	61bb      	str	r3, [r7, #24]
}
 800dbfc:	bf00      	nop
 800dbfe:	bf00      	nop
 800dc00:	e7fd      	b.n	800dbfe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc02:	f002 f941 	bl	800fe88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc0a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dc0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d024      	beq.n	800dc5c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc14:	1e5a      	subs	r2, r3, #1
 800dc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc18:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d104      	bne.n	800dc2c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dc22:	f001 fa35 	bl	800f090 <pvTaskIncrementMutexHeldCount>
 800dc26:	4602      	mov	r2, r0
 800dc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2e:	691b      	ldr	r3, [r3, #16]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00f      	beq.n	800dc54 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc36:	3310      	adds	r3, #16
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f000 fed9 	bl	800e9f0 <xTaskRemoveFromEventList>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d007      	beq.n	800dc54 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc44:	4b54      	ldr	r3, [pc, #336]	@ (800dd98 <xQueueSemaphoreTake+0x21c>)
 800dc46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc4a:	601a      	str	r2, [r3, #0]
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc54:	f002 f94a 	bl	800feec <vPortExitCritical>
				return pdPASS;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e098      	b.n	800dd8e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d112      	bne.n	800dc88 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d00b      	beq.n	800dc80 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc6c:	f383 8811 	msr	BASEPRI, r3
 800dc70:	f3bf 8f6f 	isb	sy
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	617b      	str	r3, [r7, #20]
}
 800dc7a:	bf00      	nop
 800dc7c:	bf00      	nop
 800dc7e:	e7fd      	b.n	800dc7c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dc80:	f002 f934 	bl	800feec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc84:	2300      	movs	r3, #0
 800dc86:	e082      	b.n	800dd8e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d106      	bne.n	800dc9c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc8e:	f107 030c 	add.w	r3, r7, #12
 800dc92:	4618      	mov	r0, r3
 800dc94:	f000 ff10 	bl	800eab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc9c:	f002 f926 	bl	800feec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dca0:	f000 fc66 	bl	800e570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dca4:	f002 f8f0 	bl	800fe88 <vPortEnterCritical>
 800dca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dcae:	b25b      	sxtb	r3, r3
 800dcb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcb4:	d103      	bne.n	800dcbe <xQueueSemaphoreTake+0x142>
 800dcb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dcbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcc4:	b25b      	sxtb	r3, r3
 800dcc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcca:	d103      	bne.n	800dcd4 <xQueueSemaphoreTake+0x158>
 800dccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dcd4:	f002 f90a 	bl	800feec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dcd8:	463a      	mov	r2, r7
 800dcda:	f107 030c 	add.w	r3, r7, #12
 800dcde:	4611      	mov	r1, r2
 800dce0:	4618      	mov	r0, r3
 800dce2:	f000 feff 	bl	800eae4 <xTaskCheckForTimeOut>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d132      	bne.n	800dd52 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcee:	f000 f94f 	bl	800df90 <prvIsQueueEmpty>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d026      	beq.n	800dd46 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dcf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d109      	bne.n	800dd14 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800dd00:	f002 f8c2 	bl	800fe88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd06:	689b      	ldr	r3, [r3, #8]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f001 f865 	bl	800edd8 <xTaskPriorityInherit>
 800dd0e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800dd10:	f002 f8ec 	bl	800feec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd16:	3324      	adds	r3, #36	@ 0x24
 800dd18:	683a      	ldr	r2, [r7, #0]
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 fe15 	bl	800e94c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd24:	f000 f8e2 	bl	800deec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd28:	f000 fc30 	bl	800e58c <xTaskResumeAll>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f47f af67 	bne.w	800dc02 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800dd34:	4b18      	ldr	r3, [pc, #96]	@ (800dd98 <xQueueSemaphoreTake+0x21c>)
 800dd36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd3a:	601a      	str	r2, [r3, #0]
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	f3bf 8f6f 	isb	sy
 800dd44:	e75d      	b.n	800dc02 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dd46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd48:	f000 f8d0 	bl	800deec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd4c:	f000 fc1e 	bl	800e58c <xTaskResumeAll>
 800dd50:	e757      	b.n	800dc02 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dd52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd54:	f000 f8ca 	bl	800deec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd58:	f000 fc18 	bl	800e58c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd5e:	f000 f917 	bl	800df90 <prvIsQueueEmpty>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f43f af4c 	beq.w	800dc02 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00d      	beq.n	800dd8c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800dd70:	f002 f88a 	bl	800fe88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dd74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd76:	f000 f811 	bl	800dd9c <prvGetDisinheritPriorityAfterTimeout>
 800dd7a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd82:	4618      	mov	r0, r3
 800dd84:	f001 f900 	bl	800ef88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dd88:	f002 f8b0 	bl	800feec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3738      	adds	r7, #56	@ 0x38
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	e000ed04 	.word	0xe000ed04

0800dd9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b085      	sub	sp, #20
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d006      	beq.n	800ddba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ddb6:	60fb      	str	r3, [r7, #12]
 800ddb8:	e001      	b.n	800ddbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
	}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3714      	adds	r7, #20
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b086      	sub	sp, #24
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dde0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d10d      	bne.n	800de06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d14d      	bne.n	800de8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f001 f856 	bl	800eea8 <xTaskPriorityDisinherit>
 800ddfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2200      	movs	r2, #0
 800de02:	609a      	str	r2, [r3, #8]
 800de04:	e043      	b.n	800de8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d119      	bne.n	800de40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	6858      	ldr	r0, [r3, #4]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de14:	461a      	mov	r2, r3
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	f005 ff29 	bl	8013c6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	685a      	ldr	r2, [r3, #4]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de24:	441a      	add	r2, r3
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	685a      	ldr	r2, [r3, #4]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	429a      	cmp	r2, r3
 800de34:	d32b      	bcc.n	800de8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	605a      	str	r2, [r3, #4]
 800de3e:	e026      	b.n	800de8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	68d8      	ldr	r0, [r3, #12]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de48:	461a      	mov	r2, r3
 800de4a:	68b9      	ldr	r1, [r7, #8]
 800de4c:	f005 ff0f 	bl	8013c6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	68da      	ldr	r2, [r3, #12]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de58:	425b      	negs	r3, r3
 800de5a:	441a      	add	r2, r3
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	68da      	ldr	r2, [r3, #12]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d207      	bcs.n	800de7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	689a      	ldr	r2, [r3, #8]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de74:	425b      	negs	r3, r3
 800de76:	441a      	add	r2, r3
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d105      	bne.n	800de8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d002      	beq.n	800de8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	3b01      	subs	r3, #1
 800de8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	1c5a      	adds	r2, r3, #1
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800de96:	697b      	ldr	r3, [r7, #20]
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3718      	adds	r7, #24
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d018      	beq.n	800dee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	68da      	ldr	r2, [r3, #12]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800deba:	441a      	add	r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	68da      	ldr	r2, [r3, #12]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d303      	bcc.n	800ded4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	68d9      	ldr	r1, [r3, #12]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dedc:	461a      	mov	r2, r3
 800dede:	6838      	ldr	r0, [r7, #0]
 800dee0:	f005 fec5 	bl	8013c6e <memcpy>
	}
}
 800dee4:	bf00      	nop
 800dee6:	3708      	adds	r7, #8
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800def4:	f001 ffc8 	bl	800fe88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800defe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df00:	e011      	b.n	800df26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df06:	2b00      	cmp	r3, #0
 800df08:	d012      	beq.n	800df30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	3324      	adds	r3, #36	@ 0x24
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 fd6e 	bl	800e9f0 <xTaskRemoveFromEventList>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800df1a:	f000 fe47 	bl	800ebac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
 800df20:	3b01      	subs	r3, #1
 800df22:	b2db      	uxtb	r3, r3
 800df24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	dce9      	bgt.n	800df02 <prvUnlockQueue+0x16>
 800df2e:	e000      	b.n	800df32 <prvUnlockQueue+0x46>
					break;
 800df30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	22ff      	movs	r2, #255	@ 0xff
 800df36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800df3a:	f001 ffd7 	bl	800feec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800df3e:	f001 ffa3 	bl	800fe88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800df48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df4a:	e011      	b.n	800df70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d012      	beq.n	800df7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	3310      	adds	r3, #16
 800df58:	4618      	mov	r0, r3
 800df5a:	f000 fd49 	bl	800e9f0 <xTaskRemoveFromEventList>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d001      	beq.n	800df68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df64:	f000 fe22 	bl	800ebac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df68:	7bbb      	ldrb	r3, [r7, #14]
 800df6a:	3b01      	subs	r3, #1
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df74:	2b00      	cmp	r3, #0
 800df76:	dce9      	bgt.n	800df4c <prvUnlockQueue+0x60>
 800df78:	e000      	b.n	800df7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	22ff      	movs	r2, #255	@ 0xff
 800df80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800df84:	f001 ffb2 	bl	800feec <vPortExitCritical>
}
 800df88:	bf00      	nop
 800df8a:	3710      	adds	r7, #16
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df98:	f001 ff76 	bl	800fe88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d102      	bne.n	800dfaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	60fb      	str	r3, [r7, #12]
 800dfa8:	e001      	b.n	800dfae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dfae:	f001 ff9d 	bl	800feec <vPortExitCritical>

	return xReturn;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3710      	adds	r7, #16
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dfc4:	f001 ff60 	bl	800fe88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d102      	bne.n	800dfda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	60fb      	str	r3, [r7, #12]
 800dfd8:	e001      	b.n	800dfde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dfde:	f001 ff85 	bl	800feec <vPortExitCritical>

	return xReturn;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3710      	adds	r7, #16
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dff6:	2300      	movs	r3, #0
 800dff8:	60fb      	str	r3, [r7, #12]
 800dffa:	e014      	b.n	800e026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dffc:	4a0f      	ldr	r2, [pc, #60]	@ (800e03c <vQueueAddToRegistry+0x50>)
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10b      	bne.n	800e020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e008:	490c      	ldr	r1, [pc, #48]	@ (800e03c <vQueueAddToRegistry+0x50>)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	683a      	ldr	r2, [r7, #0]
 800e00e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e012:	4a0a      	ldr	r2, [pc, #40]	@ (800e03c <vQueueAddToRegistry+0x50>)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	00db      	lsls	r3, r3, #3
 800e018:	4413      	add	r3, r2
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e01e:	e006      	b.n	800e02e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	3301      	adds	r3, #1
 800e024:	60fb      	str	r3, [r7, #12]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2b07      	cmp	r3, #7
 800e02a:	d9e7      	bls.n	800dffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e02c:	bf00      	nop
 800e02e:	bf00      	nop
 800e030:	3714      	adds	r7, #20
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	24001f34 	.word	0x24001f34

0800e040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e040:	b580      	push	{r7, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e050:	f001 ff1a 	bl	800fe88 <vPortEnterCritical>
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e05a:	b25b      	sxtb	r3, r3
 800e05c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e060:	d103      	bne.n	800e06a <vQueueWaitForMessageRestricted+0x2a>
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e070:	b25b      	sxtb	r3, r3
 800e072:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e076:	d103      	bne.n	800e080 <vQueueWaitForMessageRestricted+0x40>
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e080:	f001 ff34 	bl	800feec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d106      	bne.n	800e09a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	3324      	adds	r3, #36	@ 0x24
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	68b9      	ldr	r1, [r7, #8]
 800e094:	4618      	mov	r0, r3
 800e096:	f000 fc7f 	bl	800e998 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e09a:	6978      	ldr	r0, [r7, #20]
 800e09c:	f7ff ff26 	bl	800deec <prvUnlockQueue>
	}
 800e0a0:	bf00      	nop
 800e0a2:	3718      	adds	r7, #24
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b08e      	sub	sp, #56	@ 0x38
 800e0ac:	af04      	add	r7, sp, #16
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	60b9      	str	r1, [r7, #8]
 800e0b2:	607a      	str	r2, [r7, #4]
 800e0b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e0b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d10b      	bne.n	800e0d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c0:	f383 8811 	msr	BASEPRI, r3
 800e0c4:	f3bf 8f6f 	isb	sy
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	623b      	str	r3, [r7, #32]
}
 800e0ce:	bf00      	nop
 800e0d0:	bf00      	nop
 800e0d2:	e7fd      	b.n	800e0d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d10b      	bne.n	800e0f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0de:	f383 8811 	msr	BASEPRI, r3
 800e0e2:	f3bf 8f6f 	isb	sy
 800e0e6:	f3bf 8f4f 	dsb	sy
 800e0ea:	61fb      	str	r3, [r7, #28]
}
 800e0ec:	bf00      	nop
 800e0ee:	bf00      	nop
 800e0f0:	e7fd      	b.n	800e0ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e0f2:	23a8      	movs	r3, #168	@ 0xa8
 800e0f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	2ba8      	cmp	r3, #168	@ 0xa8
 800e0fa:	d00b      	beq.n	800e114 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e100:	f383 8811 	msr	BASEPRI, r3
 800e104:	f3bf 8f6f 	isb	sy
 800e108:	f3bf 8f4f 	dsb	sy
 800e10c:	61bb      	str	r3, [r7, #24]
}
 800e10e:	bf00      	nop
 800e110:	bf00      	nop
 800e112:	e7fd      	b.n	800e110 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e114:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d01e      	beq.n	800e15a <xTaskCreateStatic+0xb2>
 800e11c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d01b      	beq.n	800e15a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e124:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e12a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12e:	2202      	movs	r2, #2
 800e130:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e134:	2300      	movs	r3, #0
 800e136:	9303      	str	r3, [sp, #12]
 800e138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13a:	9302      	str	r3, [sp, #8]
 800e13c:	f107 0314 	add.w	r3, r7, #20
 800e140:	9301      	str	r3, [sp, #4]
 800e142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	68b9      	ldr	r1, [r7, #8]
 800e14c:	68f8      	ldr	r0, [r7, #12]
 800e14e:	f000 f851 	bl	800e1f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e154:	f000 f8f6 	bl	800e344 <prvAddNewTaskToReadyList>
 800e158:	e001      	b.n	800e15e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e15a:	2300      	movs	r3, #0
 800e15c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e15e:	697b      	ldr	r3, [r7, #20]
	}
 800e160:	4618      	mov	r0, r3
 800e162:	3728      	adds	r7, #40	@ 0x28
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b08c      	sub	sp, #48	@ 0x30
 800e16c:	af04      	add	r7, sp, #16
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	603b      	str	r3, [r7, #0]
 800e174:	4613      	mov	r3, r2
 800e176:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e178:	88fb      	ldrh	r3, [r7, #6]
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	4618      	mov	r0, r3
 800e17e:	f001 ffa5 	bl	80100cc <pvPortMalloc>
 800e182:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00e      	beq.n	800e1a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e18a:	20a8      	movs	r0, #168	@ 0xa8
 800e18c:	f001 ff9e 	bl	80100cc <pvPortMalloc>
 800e190:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d003      	beq.n	800e1a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	697a      	ldr	r2, [r7, #20]
 800e19c:	631a      	str	r2, [r3, #48]	@ 0x30
 800e19e:	e005      	b.n	800e1ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e1a0:	6978      	ldr	r0, [r7, #20]
 800e1a2:	f002 f861 	bl	8010268 <vPortFree>
 800e1a6:	e001      	b.n	800e1ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d017      	beq.n	800e1e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e1ba:	88fa      	ldrh	r2, [r7, #6]
 800e1bc:	2300      	movs	r3, #0
 800e1be:	9303      	str	r3, [sp, #12]
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	9302      	str	r3, [sp, #8]
 800e1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c6:	9301      	str	r3, [sp, #4]
 800e1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ca:	9300      	str	r3, [sp, #0]
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	68b9      	ldr	r1, [r7, #8]
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f000 f80f 	bl	800e1f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1d6:	69f8      	ldr	r0, [r7, #28]
 800e1d8:	f000 f8b4 	bl	800e344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	61bb      	str	r3, [r7, #24]
 800e1e0:	e002      	b.n	800e1e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e1e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e1e8:	69bb      	ldr	r3, [r7, #24]
	}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3720      	adds	r7, #32
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
	...

0800e1f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b088      	sub	sp, #32
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	607a      	str	r2, [r7, #4]
 800e200:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e204:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	461a      	mov	r2, r3
 800e20c:	21a5      	movs	r1, #165	@ 0xa5
 800e20e:	f005 fc4d 	bl	8013aac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e214:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e216:	6879      	ldr	r1, [r7, #4]
 800e218:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e21c:	440b      	add	r3, r1
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	f023 0307 	bic.w	r3, r3, #7
 800e22a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	f003 0307 	and.w	r3, r3, #7
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00b      	beq.n	800e24e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e23a:	f383 8811 	msr	BASEPRI, r3
 800e23e:	f3bf 8f6f 	isb	sy
 800e242:	f3bf 8f4f 	dsb	sy
 800e246:	617b      	str	r3, [r7, #20]
}
 800e248:	bf00      	nop
 800e24a:	bf00      	nop
 800e24c:	e7fd      	b.n	800e24a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d01f      	beq.n	800e294 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e254:	2300      	movs	r3, #0
 800e256:	61fb      	str	r3, [r7, #28]
 800e258:	e012      	b.n	800e280 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	4413      	add	r3, r2
 800e260:	7819      	ldrb	r1, [r3, #0]
 800e262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	4413      	add	r3, r2
 800e268:	3334      	adds	r3, #52	@ 0x34
 800e26a:	460a      	mov	r2, r1
 800e26c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	4413      	add	r3, r2
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d006      	beq.n	800e288 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	3301      	adds	r3, #1
 800e27e:	61fb      	str	r3, [r7, #28]
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	2b0f      	cmp	r3, #15
 800e284:	d9e9      	bls.n	800e25a <prvInitialiseNewTask+0x66>
 800e286:	e000      	b.n	800e28a <prvInitialiseNewTask+0x96>
			{
				break;
 800e288:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e28c:	2200      	movs	r2, #0
 800e28e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e292:	e003      	b.n	800e29c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e296:	2200      	movs	r2, #0
 800e298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e29e:	2b37      	cmp	r3, #55	@ 0x37
 800e2a0:	d901      	bls.n	800e2a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e2a2:	2337      	movs	r3, #55	@ 0x37
 800e2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ba:	3304      	adds	r3, #4
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7fe ff49 	bl	800d154 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c4:	3318      	adds	r3, #24
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fe ff44 	bl	800d154 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f4:	3354      	adds	r3, #84	@ 0x54
 800e2f6:	224c      	movs	r2, #76	@ 0x4c
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f005 fbd6 	bl	8013aac <memset>
 800e300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e302:	4a0d      	ldr	r2, [pc, #52]	@ (800e338 <prvInitialiseNewTask+0x144>)
 800e304:	659a      	str	r2, [r3, #88]	@ 0x58
 800e306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e308:	4a0c      	ldr	r2, [pc, #48]	@ (800e33c <prvInitialiseNewTask+0x148>)
 800e30a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e30e:	4a0c      	ldr	r2, [pc, #48]	@ (800e340 <prvInitialiseNewTask+0x14c>)
 800e310:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e312:	683a      	ldr	r2, [r7, #0]
 800e314:	68f9      	ldr	r1, [r7, #12]
 800e316:	69b8      	ldr	r0, [r7, #24]
 800e318:	f001 fc84 	bl	800fc24 <pxPortInitialiseStack>
 800e31c:	4602      	mov	r2, r0
 800e31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e320:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e324:	2b00      	cmp	r3, #0
 800e326:	d002      	beq.n	800e32e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e32a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e32c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e32e:	bf00      	nop
 800e330:	3720      	adds	r7, #32
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	24033310 	.word	0x24033310
 800e33c:	24033378 	.word	0x24033378
 800e340:	240333e0 	.word	0x240333e0

0800e344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e34c:	f001 fd9c 	bl	800fe88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e350:	4b2d      	ldr	r3, [pc, #180]	@ (800e408 <prvAddNewTaskToReadyList+0xc4>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3301      	adds	r3, #1
 800e356:	4a2c      	ldr	r2, [pc, #176]	@ (800e408 <prvAddNewTaskToReadyList+0xc4>)
 800e358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e35a:	4b2c      	ldr	r3, [pc, #176]	@ (800e40c <prvAddNewTaskToReadyList+0xc8>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d109      	bne.n	800e376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e362:	4a2a      	ldr	r2, [pc, #168]	@ (800e40c <prvAddNewTaskToReadyList+0xc8>)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e368:	4b27      	ldr	r3, [pc, #156]	@ (800e408 <prvAddNewTaskToReadyList+0xc4>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d110      	bne.n	800e392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e370:	f000 fc40 	bl	800ebf4 <prvInitialiseTaskLists>
 800e374:	e00d      	b.n	800e392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e376:	4b26      	ldr	r3, [pc, #152]	@ (800e410 <prvAddNewTaskToReadyList+0xcc>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d109      	bne.n	800e392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e37e:	4b23      	ldr	r3, [pc, #140]	@ (800e40c <prvAddNewTaskToReadyList+0xc8>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e388:	429a      	cmp	r2, r3
 800e38a:	d802      	bhi.n	800e392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e38c:	4a1f      	ldr	r2, [pc, #124]	@ (800e40c <prvAddNewTaskToReadyList+0xc8>)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e392:	4b20      	ldr	r3, [pc, #128]	@ (800e414 <prvAddNewTaskToReadyList+0xd0>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	3301      	adds	r3, #1
 800e398:	4a1e      	ldr	r2, [pc, #120]	@ (800e414 <prvAddNewTaskToReadyList+0xd0>)
 800e39a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e39c:	4b1d      	ldr	r3, [pc, #116]	@ (800e414 <prvAddNewTaskToReadyList+0xd0>)
 800e39e:	681a      	ldr	r2, [r3, #0]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3a8:	4b1b      	ldr	r3, [pc, #108]	@ (800e418 <prvAddNewTaskToReadyList+0xd4>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d903      	bls.n	800e3b8 <prvAddNewTaskToReadyList+0x74>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3b4:	4a18      	ldr	r2, [pc, #96]	@ (800e418 <prvAddNewTaskToReadyList+0xd4>)
 800e3b6:	6013      	str	r3, [r2, #0]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3bc:	4613      	mov	r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	4413      	add	r3, r2
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	4a15      	ldr	r2, [pc, #84]	@ (800e41c <prvAddNewTaskToReadyList+0xd8>)
 800e3c6:	441a      	add	r2, r3
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3304      	adds	r3, #4
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	4610      	mov	r0, r2
 800e3d0:	f7fe fecd 	bl	800d16e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e3d4:	f001 fd8a 	bl	800feec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e3d8:	4b0d      	ldr	r3, [pc, #52]	@ (800e410 <prvAddNewTaskToReadyList+0xcc>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d00e      	beq.n	800e3fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e3e0:	4b0a      	ldr	r3, [pc, #40]	@ (800e40c <prvAddNewTaskToReadyList+0xc8>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d207      	bcs.n	800e3fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e3ee:	4b0c      	ldr	r3, [pc, #48]	@ (800e420 <prvAddNewTaskToReadyList+0xdc>)
 800e3f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3f4:	601a      	str	r2, [r3, #0]
 800e3f6:	f3bf 8f4f 	dsb	sy
 800e3fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3fe:	bf00      	nop
 800e400:	3708      	adds	r7, #8
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	24002448 	.word	0x24002448
 800e40c:	24001f74 	.word	0x24001f74
 800e410:	24002454 	.word	0x24002454
 800e414:	24002464 	.word	0x24002464
 800e418:	24002450 	.word	0x24002450
 800e41c:	24001f78 	.word	0x24001f78
 800e420:	e000ed04 	.word	0xe000ed04

0800e424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e42c:	2300      	movs	r3, #0
 800e42e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d018      	beq.n	800e468 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e436:	4b14      	ldr	r3, [pc, #80]	@ (800e488 <vTaskDelay+0x64>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00b      	beq.n	800e456 <vTaskDelay+0x32>
	__asm volatile
 800e43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e442:	f383 8811 	msr	BASEPRI, r3
 800e446:	f3bf 8f6f 	isb	sy
 800e44a:	f3bf 8f4f 	dsb	sy
 800e44e:	60bb      	str	r3, [r7, #8]
}
 800e450:	bf00      	nop
 800e452:	bf00      	nop
 800e454:	e7fd      	b.n	800e452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e456:	f000 f88b 	bl	800e570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e45a:	2100      	movs	r1, #0
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f001 f833 	bl	800f4c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e462:	f000 f893 	bl	800e58c <xTaskResumeAll>
 800e466:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d107      	bne.n	800e47e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e46e:	4b07      	ldr	r3, [pc, #28]	@ (800e48c <vTaskDelay+0x68>)
 800e470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e474:	601a      	str	r2, [r3, #0]
 800e476:	f3bf 8f4f 	dsb	sy
 800e47a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e47e:	bf00      	nop
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	24002470 	.word	0x24002470
 800e48c:	e000ed04 	.word	0xe000ed04

0800e490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b08a      	sub	sp, #40	@ 0x28
 800e494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e496:	2300      	movs	r3, #0
 800e498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e49a:	2300      	movs	r3, #0
 800e49c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e49e:	463a      	mov	r2, r7
 800e4a0:	1d39      	adds	r1, r7, #4
 800e4a2:	f107 0308 	add.w	r3, r7, #8
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fe fe00 	bl	800d0ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e4ac:	6839      	ldr	r1, [r7, #0]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	68ba      	ldr	r2, [r7, #8]
 800e4b2:	9202      	str	r2, [sp, #8]
 800e4b4:	9301      	str	r3, [sp, #4]
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	460a      	mov	r2, r1
 800e4be:	4924      	ldr	r1, [pc, #144]	@ (800e550 <vTaskStartScheduler+0xc0>)
 800e4c0:	4824      	ldr	r0, [pc, #144]	@ (800e554 <vTaskStartScheduler+0xc4>)
 800e4c2:	f7ff fdf1 	bl	800e0a8 <xTaskCreateStatic>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	4a23      	ldr	r2, [pc, #140]	@ (800e558 <vTaskStartScheduler+0xc8>)
 800e4ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e4cc:	4b22      	ldr	r3, [pc, #136]	@ (800e558 <vTaskStartScheduler+0xc8>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d002      	beq.n	800e4da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	617b      	str	r3, [r7, #20]
 800e4d8:	e001      	b.n	800e4de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d102      	bne.n	800e4ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e4e4:	f001 f844 	bl	800f570 <xTimerCreateTimerTask>
 800e4e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d11b      	bne.n	800e528 <vTaskStartScheduler+0x98>
	__asm volatile
 800e4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f4:	f383 8811 	msr	BASEPRI, r3
 800e4f8:	f3bf 8f6f 	isb	sy
 800e4fc:	f3bf 8f4f 	dsb	sy
 800e500:	613b      	str	r3, [r7, #16]
}
 800e502:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e504:	4b15      	ldr	r3, [pc, #84]	@ (800e55c <vTaskStartScheduler+0xcc>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	3354      	adds	r3, #84	@ 0x54
 800e50a:	4a15      	ldr	r2, [pc, #84]	@ (800e560 <vTaskStartScheduler+0xd0>)
 800e50c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e50e:	4b15      	ldr	r3, [pc, #84]	@ (800e564 <vTaskStartScheduler+0xd4>)
 800e510:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e514:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e516:	4b14      	ldr	r3, [pc, #80]	@ (800e568 <vTaskStartScheduler+0xd8>)
 800e518:	2201      	movs	r2, #1
 800e51a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e51c:	4b13      	ldr	r3, [pc, #76]	@ (800e56c <vTaskStartScheduler+0xdc>)
 800e51e:	2200      	movs	r2, #0
 800e520:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e522:	f001 fc0d 	bl	800fd40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e526:	e00f      	b.n	800e548 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e52e:	d10b      	bne.n	800e548 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e534:	f383 8811 	msr	BASEPRI, r3
 800e538:	f3bf 8f6f 	isb	sy
 800e53c:	f3bf 8f4f 	dsb	sy
 800e540:	60fb      	str	r3, [r7, #12]
}
 800e542:	bf00      	nop
 800e544:	bf00      	nop
 800e546:	e7fd      	b.n	800e544 <vTaskStartScheduler+0xb4>
}
 800e548:	bf00      	nop
 800e54a:	3718      	adds	r7, #24
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	08013ff0 	.word	0x08013ff0
 800e554:	0800ebc5 	.word	0x0800ebc5
 800e558:	2400246c 	.word	0x2400246c
 800e55c:	24001f74 	.word	0x24001f74
 800e560:	240012b8 	.word	0x240012b8
 800e564:	24002468 	.word	0x24002468
 800e568:	24002454 	.word	0x24002454
 800e56c:	2400244c 	.word	0x2400244c

0800e570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e570:	b480      	push	{r7}
 800e572:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e574:	4b04      	ldr	r3, [pc, #16]	@ (800e588 <vTaskSuspendAll+0x18>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	3301      	adds	r3, #1
 800e57a:	4a03      	ldr	r2, [pc, #12]	@ (800e588 <vTaskSuspendAll+0x18>)
 800e57c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e57e:	bf00      	nop
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr
 800e588:	24002470 	.word	0x24002470

0800e58c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e592:	2300      	movs	r3, #0
 800e594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e596:	2300      	movs	r3, #0
 800e598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e59a:	4b42      	ldr	r3, [pc, #264]	@ (800e6a4 <xTaskResumeAll+0x118>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d10b      	bne.n	800e5ba <xTaskResumeAll+0x2e>
	__asm volatile
 800e5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a6:	f383 8811 	msr	BASEPRI, r3
 800e5aa:	f3bf 8f6f 	isb	sy
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	603b      	str	r3, [r7, #0]
}
 800e5b4:	bf00      	nop
 800e5b6:	bf00      	nop
 800e5b8:	e7fd      	b.n	800e5b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e5ba:	f001 fc65 	bl	800fe88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e5be:	4b39      	ldr	r3, [pc, #228]	@ (800e6a4 <xTaskResumeAll+0x118>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	3b01      	subs	r3, #1
 800e5c4:	4a37      	ldr	r2, [pc, #220]	@ (800e6a4 <xTaskResumeAll+0x118>)
 800e5c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5c8:	4b36      	ldr	r3, [pc, #216]	@ (800e6a4 <xTaskResumeAll+0x118>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d162      	bne.n	800e696 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e5d0:	4b35      	ldr	r3, [pc, #212]	@ (800e6a8 <xTaskResumeAll+0x11c>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d05e      	beq.n	800e696 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5d8:	e02f      	b.n	800e63a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5da:	4b34      	ldr	r3, [pc, #208]	@ (800e6ac <xTaskResumeAll+0x120>)
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	3318      	adds	r3, #24
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fe fe1e 	bl	800d228 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	3304      	adds	r3, #4
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7fe fe19 	bl	800d228 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5fa:	4b2d      	ldr	r3, [pc, #180]	@ (800e6b0 <xTaskResumeAll+0x124>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d903      	bls.n	800e60a <xTaskResumeAll+0x7e>
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e606:	4a2a      	ldr	r2, [pc, #168]	@ (800e6b0 <xTaskResumeAll+0x124>)
 800e608:	6013      	str	r3, [r2, #0]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e60e:	4613      	mov	r3, r2
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	4413      	add	r3, r2
 800e614:	009b      	lsls	r3, r3, #2
 800e616:	4a27      	ldr	r2, [pc, #156]	@ (800e6b4 <xTaskResumeAll+0x128>)
 800e618:	441a      	add	r2, r3
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	3304      	adds	r3, #4
 800e61e:	4619      	mov	r1, r3
 800e620:	4610      	mov	r0, r2
 800e622:	f7fe fda4 	bl	800d16e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e62a:	4b23      	ldr	r3, [pc, #140]	@ (800e6b8 <xTaskResumeAll+0x12c>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e630:	429a      	cmp	r2, r3
 800e632:	d302      	bcc.n	800e63a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e634:	4b21      	ldr	r3, [pc, #132]	@ (800e6bc <xTaskResumeAll+0x130>)
 800e636:	2201      	movs	r2, #1
 800e638:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e63a:	4b1c      	ldr	r3, [pc, #112]	@ (800e6ac <xTaskResumeAll+0x120>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d1cb      	bne.n	800e5da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d001      	beq.n	800e64c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e648:	f000 fb78 	bl	800ed3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e64c:	4b1c      	ldr	r3, [pc, #112]	@ (800e6c0 <xTaskResumeAll+0x134>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d010      	beq.n	800e67a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e658:	f000 f858 	bl	800e70c <xTaskIncrementTick>
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d002      	beq.n	800e668 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e662:	4b16      	ldr	r3, [pc, #88]	@ (800e6bc <xTaskResumeAll+0x130>)
 800e664:	2201      	movs	r2, #1
 800e666:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	3b01      	subs	r3, #1
 800e66c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d1f1      	bne.n	800e658 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e674:	4b12      	ldr	r3, [pc, #72]	@ (800e6c0 <xTaskResumeAll+0x134>)
 800e676:	2200      	movs	r2, #0
 800e678:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e67a:	4b10      	ldr	r3, [pc, #64]	@ (800e6bc <xTaskResumeAll+0x130>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d009      	beq.n	800e696 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e682:	2301      	movs	r3, #1
 800e684:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e686:	4b0f      	ldr	r3, [pc, #60]	@ (800e6c4 <xTaskResumeAll+0x138>)
 800e688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e68c:	601a      	str	r2, [r3, #0]
 800e68e:	f3bf 8f4f 	dsb	sy
 800e692:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e696:	f001 fc29 	bl	800feec <vPortExitCritical>

	return xAlreadyYielded;
 800e69a:	68bb      	ldr	r3, [r7, #8]
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3710      	adds	r7, #16
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	24002470 	.word	0x24002470
 800e6a8:	24002448 	.word	0x24002448
 800e6ac:	24002408 	.word	0x24002408
 800e6b0:	24002450 	.word	0x24002450
 800e6b4:	24001f78 	.word	0x24001f78
 800e6b8:	24001f74 	.word	0x24001f74
 800e6bc:	2400245c 	.word	0x2400245c
 800e6c0:	24002458 	.word	0x24002458
 800e6c4:	e000ed04 	.word	0xe000ed04

0800e6c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e6ce:	4b05      	ldr	r3, [pc, #20]	@ (800e6e4 <xTaskGetTickCount+0x1c>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e6d4:	687b      	ldr	r3, [r7, #4]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	370c      	adds	r7, #12
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr
 800e6e2:	bf00      	nop
 800e6e4:	2400244c 	.word	0x2400244c

0800e6e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6ee:	f001 fcab 	bl	8010048 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e6f6:	4b04      	ldr	r3, [pc, #16]	@ (800e708 <xTaskGetTickCountFromISR+0x20>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6fc:	683b      	ldr	r3, [r7, #0]
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	2400244c 	.word	0x2400244c

0800e70c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b086      	sub	sp, #24
 800e710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e712:	2300      	movs	r3, #0
 800e714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e716:	4b4f      	ldr	r3, [pc, #316]	@ (800e854 <xTaskIncrementTick+0x148>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f040 8090 	bne.w	800e840 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e720:	4b4d      	ldr	r3, [pc, #308]	@ (800e858 <xTaskIncrementTick+0x14c>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	3301      	adds	r3, #1
 800e726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e728:	4a4b      	ldr	r2, [pc, #300]	@ (800e858 <xTaskIncrementTick+0x14c>)
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d121      	bne.n	800e778 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e734:	4b49      	ldr	r3, [pc, #292]	@ (800e85c <xTaskIncrementTick+0x150>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00b      	beq.n	800e756 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e742:	f383 8811 	msr	BASEPRI, r3
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	603b      	str	r3, [r7, #0]
}
 800e750:	bf00      	nop
 800e752:	bf00      	nop
 800e754:	e7fd      	b.n	800e752 <xTaskIncrementTick+0x46>
 800e756:	4b41      	ldr	r3, [pc, #260]	@ (800e85c <xTaskIncrementTick+0x150>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	60fb      	str	r3, [r7, #12]
 800e75c:	4b40      	ldr	r3, [pc, #256]	@ (800e860 <xTaskIncrementTick+0x154>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a3e      	ldr	r2, [pc, #248]	@ (800e85c <xTaskIncrementTick+0x150>)
 800e762:	6013      	str	r3, [r2, #0]
 800e764:	4a3e      	ldr	r2, [pc, #248]	@ (800e860 <xTaskIncrementTick+0x154>)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	6013      	str	r3, [r2, #0]
 800e76a:	4b3e      	ldr	r3, [pc, #248]	@ (800e864 <xTaskIncrementTick+0x158>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	3301      	adds	r3, #1
 800e770:	4a3c      	ldr	r2, [pc, #240]	@ (800e864 <xTaskIncrementTick+0x158>)
 800e772:	6013      	str	r3, [r2, #0]
 800e774:	f000 fae2 	bl	800ed3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e778:	4b3b      	ldr	r3, [pc, #236]	@ (800e868 <xTaskIncrementTick+0x15c>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	693a      	ldr	r2, [r7, #16]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d349      	bcc.n	800e816 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e782:	4b36      	ldr	r3, [pc, #216]	@ (800e85c <xTaskIncrementTick+0x150>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d104      	bne.n	800e796 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e78c:	4b36      	ldr	r3, [pc, #216]	@ (800e868 <xTaskIncrementTick+0x15c>)
 800e78e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e792:	601a      	str	r2, [r3, #0]
					break;
 800e794:	e03f      	b.n	800e816 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e796:	4b31      	ldr	r3, [pc, #196]	@ (800e85c <xTaskIncrementTick+0x150>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	68db      	ldr	r3, [r3, #12]
 800e79c:	68db      	ldr	r3, [r3, #12]
 800e79e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e7a6:	693a      	ldr	r2, [r7, #16]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d203      	bcs.n	800e7b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e7ae:	4a2e      	ldr	r2, [pc, #184]	@ (800e868 <xTaskIncrementTick+0x15c>)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e7b4:	e02f      	b.n	800e816 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fe fd34 	bl	800d228 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d004      	beq.n	800e7d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	3318      	adds	r3, #24
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fe fd2b 	bl	800d228 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7d6:	4b25      	ldr	r3, [pc, #148]	@ (800e86c <xTaskIncrementTick+0x160>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d903      	bls.n	800e7e6 <xTaskIncrementTick+0xda>
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7e2:	4a22      	ldr	r2, [pc, #136]	@ (800e86c <xTaskIncrementTick+0x160>)
 800e7e4:	6013      	str	r3, [r2, #0]
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	4413      	add	r3, r2
 800e7f0:	009b      	lsls	r3, r3, #2
 800e7f2:	4a1f      	ldr	r2, [pc, #124]	@ (800e870 <xTaskIncrementTick+0x164>)
 800e7f4:	441a      	add	r2, r3
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	3304      	adds	r3, #4
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	4610      	mov	r0, r2
 800e7fe:	f7fe fcb6 	bl	800d16e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e806:	4b1b      	ldr	r3, [pc, #108]	@ (800e874 <xTaskIncrementTick+0x168>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d3b8      	bcc.n	800e782 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e810:	2301      	movs	r3, #1
 800e812:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e814:	e7b5      	b.n	800e782 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e816:	4b17      	ldr	r3, [pc, #92]	@ (800e874 <xTaskIncrementTick+0x168>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e81c:	4914      	ldr	r1, [pc, #80]	@ (800e870 <xTaskIncrementTick+0x164>)
 800e81e:	4613      	mov	r3, r2
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	4413      	add	r3, r2
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	440b      	add	r3, r1
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d901      	bls.n	800e832 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e82e:	2301      	movs	r3, #1
 800e830:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e832:	4b11      	ldr	r3, [pc, #68]	@ (800e878 <xTaskIncrementTick+0x16c>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d007      	beq.n	800e84a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e83a:	2301      	movs	r3, #1
 800e83c:	617b      	str	r3, [r7, #20]
 800e83e:	e004      	b.n	800e84a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e840:	4b0e      	ldr	r3, [pc, #56]	@ (800e87c <xTaskIncrementTick+0x170>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	3301      	adds	r3, #1
 800e846:	4a0d      	ldr	r2, [pc, #52]	@ (800e87c <xTaskIncrementTick+0x170>)
 800e848:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e84a:	697b      	ldr	r3, [r7, #20]
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3718      	adds	r7, #24
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	24002470 	.word	0x24002470
 800e858:	2400244c 	.word	0x2400244c
 800e85c:	24002400 	.word	0x24002400
 800e860:	24002404 	.word	0x24002404
 800e864:	24002460 	.word	0x24002460
 800e868:	24002468 	.word	0x24002468
 800e86c:	24002450 	.word	0x24002450
 800e870:	24001f78 	.word	0x24001f78
 800e874:	24001f74 	.word	0x24001f74
 800e878:	2400245c 	.word	0x2400245c
 800e87c:	24002458 	.word	0x24002458

0800e880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e880:	b480      	push	{r7}
 800e882:	b085      	sub	sp, #20
 800e884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e886:	4b2b      	ldr	r3, [pc, #172]	@ (800e934 <vTaskSwitchContext+0xb4>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d003      	beq.n	800e896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e88e:	4b2a      	ldr	r3, [pc, #168]	@ (800e938 <vTaskSwitchContext+0xb8>)
 800e890:	2201      	movs	r2, #1
 800e892:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e894:	e047      	b.n	800e926 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e896:	4b28      	ldr	r3, [pc, #160]	@ (800e938 <vTaskSwitchContext+0xb8>)
 800e898:	2200      	movs	r2, #0
 800e89a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e89c:	4b27      	ldr	r3, [pc, #156]	@ (800e93c <vTaskSwitchContext+0xbc>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	60fb      	str	r3, [r7, #12]
 800e8a2:	e011      	b.n	800e8c8 <vTaskSwitchContext+0x48>
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d10b      	bne.n	800e8c2 <vTaskSwitchContext+0x42>
	__asm volatile
 800e8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ae:	f383 8811 	msr	BASEPRI, r3
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	607b      	str	r3, [r7, #4]
}
 800e8bc:	bf00      	nop
 800e8be:	bf00      	nop
 800e8c0:	e7fd      	b.n	800e8be <vTaskSwitchContext+0x3e>
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	60fb      	str	r3, [r7, #12]
 800e8c8:	491d      	ldr	r1, [pc, #116]	@ (800e940 <vTaskSwitchContext+0xc0>)
 800e8ca:	68fa      	ldr	r2, [r7, #12]
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	4413      	add	r3, r2
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	440b      	add	r3, r1
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d0e3      	beq.n	800e8a4 <vTaskSwitchContext+0x24>
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	009b      	lsls	r3, r3, #2
 800e8e2:	4413      	add	r3, r2
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	4a16      	ldr	r2, [pc, #88]	@ (800e940 <vTaskSwitchContext+0xc0>)
 800e8e8:	4413      	add	r3, r2
 800e8ea:	60bb      	str	r3, [r7, #8]
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	685a      	ldr	r2, [r3, #4]
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	605a      	str	r2, [r3, #4]
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	685a      	ldr	r2, [r3, #4]
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	3308      	adds	r3, #8
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d104      	bne.n	800e90c <vTaskSwitchContext+0x8c>
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	685a      	ldr	r2, [r3, #4]
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	605a      	str	r2, [r3, #4]
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	4a0c      	ldr	r2, [pc, #48]	@ (800e944 <vTaskSwitchContext+0xc4>)
 800e914:	6013      	str	r3, [r2, #0]
 800e916:	4a09      	ldr	r2, [pc, #36]	@ (800e93c <vTaskSwitchContext+0xbc>)
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e91c:	4b09      	ldr	r3, [pc, #36]	@ (800e944 <vTaskSwitchContext+0xc4>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	3354      	adds	r3, #84	@ 0x54
 800e922:	4a09      	ldr	r2, [pc, #36]	@ (800e948 <vTaskSwitchContext+0xc8>)
 800e924:	6013      	str	r3, [r2, #0]
}
 800e926:	bf00      	nop
 800e928:	3714      	adds	r7, #20
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop
 800e934:	24002470 	.word	0x24002470
 800e938:	2400245c 	.word	0x2400245c
 800e93c:	24002450 	.word	0x24002450
 800e940:	24001f78 	.word	0x24001f78
 800e944:	24001f74 	.word	0x24001f74
 800e948:	240012b8 	.word	0x240012b8

0800e94c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d10b      	bne.n	800e974 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e960:	f383 8811 	msr	BASEPRI, r3
 800e964:	f3bf 8f6f 	isb	sy
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	60fb      	str	r3, [r7, #12]
}
 800e96e:	bf00      	nop
 800e970:	bf00      	nop
 800e972:	e7fd      	b.n	800e970 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e974:	4b07      	ldr	r3, [pc, #28]	@ (800e994 <vTaskPlaceOnEventList+0x48>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	3318      	adds	r3, #24
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7fe fc1a 	bl	800d1b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e982:	2101      	movs	r1, #1
 800e984:	6838      	ldr	r0, [r7, #0]
 800e986:	f000 fd9f 	bl	800f4c8 <prvAddCurrentTaskToDelayedList>
}
 800e98a:	bf00      	nop
 800e98c:	3710      	adds	r7, #16
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	24001f74 	.word	0x24001f74

0800e998 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d10b      	bne.n	800e9c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ae:	f383 8811 	msr	BASEPRI, r3
 800e9b2:	f3bf 8f6f 	isb	sy
 800e9b6:	f3bf 8f4f 	dsb	sy
 800e9ba:	617b      	str	r3, [r7, #20]
}
 800e9bc:	bf00      	nop
 800e9be:	bf00      	nop
 800e9c0:	e7fd      	b.n	800e9be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9c2:	4b0a      	ldr	r3, [pc, #40]	@ (800e9ec <vTaskPlaceOnEventListRestricted+0x54>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	3318      	adds	r3, #24
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f7fe fbcf 	bl	800d16e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d002      	beq.n	800e9dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e9d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e9da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e9dc:	6879      	ldr	r1, [r7, #4]
 800e9de:	68b8      	ldr	r0, [r7, #8]
 800e9e0:	f000 fd72 	bl	800f4c8 <prvAddCurrentTaskToDelayedList>
	}
 800e9e4:	bf00      	nop
 800e9e6:	3718      	adds	r7, #24
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	24001f74 	.word	0x24001f74

0800e9f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b086      	sub	sp, #24
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	68db      	ldr	r3, [r3, #12]
 800e9fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d10b      	bne.n	800ea1e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ea06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea0a:	f383 8811 	msr	BASEPRI, r3
 800ea0e:	f3bf 8f6f 	isb	sy
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	60fb      	str	r3, [r7, #12]
}
 800ea18:	bf00      	nop
 800ea1a:	bf00      	nop
 800ea1c:	e7fd      	b.n	800ea1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	3318      	adds	r3, #24
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7fe fc00 	bl	800d228 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea28:	4b1d      	ldr	r3, [pc, #116]	@ (800eaa0 <xTaskRemoveFromEventList+0xb0>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d11d      	bne.n	800ea6c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	3304      	adds	r3, #4
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fe fbf7 	bl	800d228 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea3e:	4b19      	ldr	r3, [pc, #100]	@ (800eaa4 <xTaskRemoveFromEventList+0xb4>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d903      	bls.n	800ea4e <xTaskRemoveFromEventList+0x5e>
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea4a:	4a16      	ldr	r2, [pc, #88]	@ (800eaa4 <xTaskRemoveFromEventList+0xb4>)
 800ea4c:	6013      	str	r3, [r2, #0]
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea52:	4613      	mov	r3, r2
 800ea54:	009b      	lsls	r3, r3, #2
 800ea56:	4413      	add	r3, r2
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	4a13      	ldr	r2, [pc, #76]	@ (800eaa8 <xTaskRemoveFromEventList+0xb8>)
 800ea5c:	441a      	add	r2, r3
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	3304      	adds	r3, #4
 800ea62:	4619      	mov	r1, r3
 800ea64:	4610      	mov	r0, r2
 800ea66:	f7fe fb82 	bl	800d16e <vListInsertEnd>
 800ea6a:	e005      	b.n	800ea78 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	3318      	adds	r3, #24
 800ea70:	4619      	mov	r1, r3
 800ea72:	480e      	ldr	r0, [pc, #56]	@ (800eaac <xTaskRemoveFromEventList+0xbc>)
 800ea74:	f7fe fb7b 	bl	800d16e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea7c:	4b0c      	ldr	r3, [pc, #48]	@ (800eab0 <xTaskRemoveFromEventList+0xc0>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d905      	bls.n	800ea92 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ea86:	2301      	movs	r3, #1
 800ea88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ea8a:	4b0a      	ldr	r3, [pc, #40]	@ (800eab4 <xTaskRemoveFromEventList+0xc4>)
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	601a      	str	r2, [r3, #0]
 800ea90:	e001      	b.n	800ea96 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ea92:	2300      	movs	r3, #0
 800ea94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ea96:	697b      	ldr	r3, [r7, #20]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3718      	adds	r7, #24
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	24002470 	.word	0x24002470
 800eaa4:	24002450 	.word	0x24002450
 800eaa8:	24001f78 	.word	0x24001f78
 800eaac:	24002408 	.word	0x24002408
 800eab0:	24001f74 	.word	0x24001f74
 800eab4:	2400245c 	.word	0x2400245c

0800eab8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eac0:	4b06      	ldr	r3, [pc, #24]	@ (800eadc <vTaskInternalSetTimeOutState+0x24>)
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eac8:	4b05      	ldr	r3, [pc, #20]	@ (800eae0 <vTaskInternalSetTimeOutState+0x28>)
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	605a      	str	r2, [r3, #4]
}
 800ead0:	bf00      	nop
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr
 800eadc:	24002460 	.word	0x24002460
 800eae0:	2400244c 	.word	0x2400244c

0800eae4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b088      	sub	sp, #32
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d10b      	bne.n	800eb0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800eaf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaf8:	f383 8811 	msr	BASEPRI, r3
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	613b      	str	r3, [r7, #16]
}
 800eb06:	bf00      	nop
 800eb08:	bf00      	nop
 800eb0a:	e7fd      	b.n	800eb08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d10b      	bne.n	800eb2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800eb12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb16:	f383 8811 	msr	BASEPRI, r3
 800eb1a:	f3bf 8f6f 	isb	sy
 800eb1e:	f3bf 8f4f 	dsb	sy
 800eb22:	60fb      	str	r3, [r7, #12]
}
 800eb24:	bf00      	nop
 800eb26:	bf00      	nop
 800eb28:	e7fd      	b.n	800eb26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800eb2a:	f001 f9ad 	bl	800fe88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb2e:	4b1d      	ldr	r3, [pc, #116]	@ (800eba4 <xTaskCheckForTimeOut+0xc0>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	69ba      	ldr	r2, [r7, #24]
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb46:	d102      	bne.n	800eb4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	61fb      	str	r3, [r7, #28]
 800eb4c:	e023      	b.n	800eb96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	4b15      	ldr	r3, [pc, #84]	@ (800eba8 <xTaskCheckForTimeOut+0xc4>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d007      	beq.n	800eb6a <xTaskCheckForTimeOut+0x86>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	69ba      	ldr	r2, [r7, #24]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d302      	bcc.n	800eb6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eb64:	2301      	movs	r3, #1
 800eb66:	61fb      	str	r3, [r7, #28]
 800eb68:	e015      	b.n	800eb96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d20b      	bcs.n	800eb8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	1ad2      	subs	r2, r2, r3
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7ff ff99 	bl	800eab8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb86:	2300      	movs	r3, #0
 800eb88:	61fb      	str	r3, [r7, #28]
 800eb8a:	e004      	b.n	800eb96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb92:	2301      	movs	r3, #1
 800eb94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb96:	f001 f9a9 	bl	800feec <vPortExitCritical>

	return xReturn;
 800eb9a:	69fb      	ldr	r3, [r7, #28]
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3720      	adds	r7, #32
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	2400244c 	.word	0x2400244c
 800eba8:	24002460 	.word	0x24002460

0800ebac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ebac:	b480      	push	{r7}
 800ebae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ebb0:	4b03      	ldr	r3, [pc, #12]	@ (800ebc0 <vTaskMissedYield+0x14>)
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	601a      	str	r2, [r3, #0]
}
 800ebb6:	bf00      	nop
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr
 800ebc0:	2400245c 	.word	0x2400245c

0800ebc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ebcc:	f000 f852 	bl	800ec74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ebd0:	4b06      	ldr	r3, [pc, #24]	@ (800ebec <prvIdleTask+0x28>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d9f9      	bls.n	800ebcc <prvIdleTask+0x8>
			{
				taskYIELD();
 800ebd8:	4b05      	ldr	r3, [pc, #20]	@ (800ebf0 <prvIdleTask+0x2c>)
 800ebda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebde:	601a      	str	r2, [r3, #0]
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ebe8:	e7f0      	b.n	800ebcc <prvIdleTask+0x8>
 800ebea:	bf00      	nop
 800ebec:	24001f78 	.word	0x24001f78
 800ebf0:	e000ed04 	.word	0xe000ed04

0800ebf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	607b      	str	r3, [r7, #4]
 800ebfe:	e00c      	b.n	800ec1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	4613      	mov	r3, r2
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	4413      	add	r3, r2
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	4a12      	ldr	r2, [pc, #72]	@ (800ec54 <prvInitialiseTaskLists+0x60>)
 800ec0c:	4413      	add	r3, r2
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe fa80 	bl	800d114 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	3301      	adds	r3, #1
 800ec18:	607b      	str	r3, [r7, #4]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2b37      	cmp	r3, #55	@ 0x37
 800ec1e:	d9ef      	bls.n	800ec00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ec20:	480d      	ldr	r0, [pc, #52]	@ (800ec58 <prvInitialiseTaskLists+0x64>)
 800ec22:	f7fe fa77 	bl	800d114 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ec26:	480d      	ldr	r0, [pc, #52]	@ (800ec5c <prvInitialiseTaskLists+0x68>)
 800ec28:	f7fe fa74 	bl	800d114 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec2c:	480c      	ldr	r0, [pc, #48]	@ (800ec60 <prvInitialiseTaskLists+0x6c>)
 800ec2e:	f7fe fa71 	bl	800d114 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec32:	480c      	ldr	r0, [pc, #48]	@ (800ec64 <prvInitialiseTaskLists+0x70>)
 800ec34:	f7fe fa6e 	bl	800d114 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec38:	480b      	ldr	r0, [pc, #44]	@ (800ec68 <prvInitialiseTaskLists+0x74>)
 800ec3a:	f7fe fa6b 	bl	800d114 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec6c <prvInitialiseTaskLists+0x78>)
 800ec40:	4a05      	ldr	r2, [pc, #20]	@ (800ec58 <prvInitialiseTaskLists+0x64>)
 800ec42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec44:	4b0a      	ldr	r3, [pc, #40]	@ (800ec70 <prvInitialiseTaskLists+0x7c>)
 800ec46:	4a05      	ldr	r2, [pc, #20]	@ (800ec5c <prvInitialiseTaskLists+0x68>)
 800ec48:	601a      	str	r2, [r3, #0]
}
 800ec4a:	bf00      	nop
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	24001f78 	.word	0x24001f78
 800ec58:	240023d8 	.word	0x240023d8
 800ec5c:	240023ec 	.word	0x240023ec
 800ec60:	24002408 	.word	0x24002408
 800ec64:	2400241c 	.word	0x2400241c
 800ec68:	24002434 	.word	0x24002434
 800ec6c:	24002400 	.word	0x24002400
 800ec70:	24002404 	.word	0x24002404

0800ec74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec7a:	e019      	b.n	800ecb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec7c:	f001 f904 	bl	800fe88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec80:	4b10      	ldr	r3, [pc, #64]	@ (800ecc4 <prvCheckTasksWaitingTermination+0x50>)
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	68db      	ldr	r3, [r3, #12]
 800ec86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fe facb 	bl	800d228 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ec92:	4b0d      	ldr	r3, [pc, #52]	@ (800ecc8 <prvCheckTasksWaitingTermination+0x54>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	4a0b      	ldr	r2, [pc, #44]	@ (800ecc8 <prvCheckTasksWaitingTermination+0x54>)
 800ec9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ec9c:	4b0b      	ldr	r3, [pc, #44]	@ (800eccc <prvCheckTasksWaitingTermination+0x58>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	3b01      	subs	r3, #1
 800eca2:	4a0a      	ldr	r2, [pc, #40]	@ (800eccc <prvCheckTasksWaitingTermination+0x58>)
 800eca4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eca6:	f001 f921 	bl	800feec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 f810 	bl	800ecd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecb0:	4b06      	ldr	r3, [pc, #24]	@ (800eccc <prvCheckTasksWaitingTermination+0x58>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d1e1      	bne.n	800ec7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ecb8:	bf00      	nop
 800ecba:	bf00      	nop
 800ecbc:	3708      	adds	r7, #8
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	2400241c 	.word	0x2400241c
 800ecc8:	24002448 	.word	0x24002448
 800eccc:	24002430 	.word	0x24002430

0800ecd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	3354      	adds	r3, #84	@ 0x54
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f004 fefd 	bl	8013adc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d108      	bne.n	800ecfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f001 fab9 	bl	8010268 <vPortFree>
				vPortFree( pxTCB );
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f001 fab6 	bl	8010268 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ecfc:	e019      	b.n	800ed32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d103      	bne.n	800ed10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f001 faad 	bl	8010268 <vPortFree>
	}
 800ed0e:	e010      	b.n	800ed32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ed16:	2b02      	cmp	r3, #2
 800ed18:	d00b      	beq.n	800ed32 <prvDeleteTCB+0x62>
	__asm volatile
 800ed1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed1e:	f383 8811 	msr	BASEPRI, r3
 800ed22:	f3bf 8f6f 	isb	sy
 800ed26:	f3bf 8f4f 	dsb	sy
 800ed2a:	60fb      	str	r3, [r7, #12]
}
 800ed2c:	bf00      	nop
 800ed2e:	bf00      	nop
 800ed30:	e7fd      	b.n	800ed2e <prvDeleteTCB+0x5e>
	}
 800ed32:	bf00      	nop
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
	...

0800ed3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed42:	4b0c      	ldr	r3, [pc, #48]	@ (800ed74 <prvResetNextTaskUnblockTime+0x38>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d104      	bne.n	800ed56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ed78 <prvResetNextTaskUnblockTime+0x3c>)
 800ed4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ed52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ed54:	e008      	b.n	800ed68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed56:	4b07      	ldr	r3, [pc, #28]	@ (800ed74 <prvResetNextTaskUnblockTime+0x38>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	4a04      	ldr	r2, [pc, #16]	@ (800ed78 <prvResetNextTaskUnblockTime+0x3c>)
 800ed66:	6013      	str	r3, [r2, #0]
}
 800ed68:	bf00      	nop
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr
 800ed74:	24002400 	.word	0x24002400
 800ed78:	24002468 	.word	0x24002468

0800ed7c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ed82:	4b05      	ldr	r3, [pc, #20]	@ (800ed98 <xTaskGetCurrentTaskHandle+0x1c>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ed88:	687b      	ldr	r3, [r7, #4]
	}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	370c      	adds	r7, #12
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop
 800ed98:	24001f74 	.word	0x24001f74

0800ed9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eda2:	4b0b      	ldr	r3, [pc, #44]	@ (800edd0 <xTaskGetSchedulerState+0x34>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d102      	bne.n	800edb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800edaa:	2301      	movs	r3, #1
 800edac:	607b      	str	r3, [r7, #4]
 800edae:	e008      	b.n	800edc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edb0:	4b08      	ldr	r3, [pc, #32]	@ (800edd4 <xTaskGetSchedulerState+0x38>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d102      	bne.n	800edbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800edb8:	2302      	movs	r3, #2
 800edba:	607b      	str	r3, [r7, #4]
 800edbc:	e001      	b.n	800edc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800edbe:	2300      	movs	r3, #0
 800edc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800edc2:	687b      	ldr	r3, [r7, #4]
	}
 800edc4:	4618      	mov	r0, r3
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr
 800edd0:	24002454 	.word	0x24002454
 800edd4:	24002470 	.word	0x24002470

0800edd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ede4:	2300      	movs	r3, #0
 800ede6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d051      	beq.n	800ee92 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edf2:	4b2a      	ldr	r3, [pc, #168]	@ (800ee9c <xTaskPriorityInherit+0xc4>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d241      	bcs.n	800ee80 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	699b      	ldr	r3, [r3, #24]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	db06      	blt.n	800ee12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee04:	4b25      	ldr	r3, [pc, #148]	@ (800ee9c <xTaskPriorityInherit+0xc4>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	6959      	ldr	r1, [r3, #20]
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	4413      	add	r3, r2
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	4a1f      	ldr	r2, [pc, #124]	@ (800eea0 <xTaskPriorityInherit+0xc8>)
 800ee24:	4413      	add	r3, r2
 800ee26:	4299      	cmp	r1, r3
 800ee28:	d122      	bne.n	800ee70 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fe f9fa 	bl	800d228 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee34:	4b19      	ldr	r3, [pc, #100]	@ (800ee9c <xTaskPriorityInherit+0xc4>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee42:	4b18      	ldr	r3, [pc, #96]	@ (800eea4 <xTaskPriorityInherit+0xcc>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d903      	bls.n	800ee52 <xTaskPriorityInherit+0x7a>
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee4e:	4a15      	ldr	r2, [pc, #84]	@ (800eea4 <xTaskPriorityInherit+0xcc>)
 800ee50:	6013      	str	r3, [r2, #0]
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee56:	4613      	mov	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	4413      	add	r3, r2
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	4a10      	ldr	r2, [pc, #64]	@ (800eea0 <xTaskPriorityInherit+0xc8>)
 800ee60:	441a      	add	r2, r3
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	3304      	adds	r3, #4
 800ee66:	4619      	mov	r1, r3
 800ee68:	4610      	mov	r0, r2
 800ee6a:	f7fe f980 	bl	800d16e <vListInsertEnd>
 800ee6e:	e004      	b.n	800ee7a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee70:	4b0a      	ldr	r3, [pc, #40]	@ (800ee9c <xTaskPriorityInherit+0xc4>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	60fb      	str	r3, [r7, #12]
 800ee7e:	e008      	b.n	800ee92 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee84:	4b05      	ldr	r3, [pc, #20]	@ (800ee9c <xTaskPriorityInherit+0xc4>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d201      	bcs.n	800ee92 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee92:	68fb      	ldr	r3, [r7, #12]
	}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	24001f74 	.word	0x24001f74
 800eea0:	24001f78 	.word	0x24001f78
 800eea4:	24002450 	.word	0x24002450

0800eea8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b086      	sub	sp, #24
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d058      	beq.n	800ef70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eebe:	4b2f      	ldr	r3, [pc, #188]	@ (800ef7c <xTaskPriorityDisinherit+0xd4>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	693a      	ldr	r2, [r7, #16]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d00b      	beq.n	800eee0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eecc:	f383 8811 	msr	BASEPRI, r3
 800eed0:	f3bf 8f6f 	isb	sy
 800eed4:	f3bf 8f4f 	dsb	sy
 800eed8:	60fb      	str	r3, [r7, #12]
}
 800eeda:	bf00      	nop
 800eedc:	bf00      	nop
 800eede:	e7fd      	b.n	800eedc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d10b      	bne.n	800ef00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800eee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeec:	f383 8811 	msr	BASEPRI, r3
 800eef0:	f3bf 8f6f 	isb	sy
 800eef4:	f3bf 8f4f 	dsb	sy
 800eef8:	60bb      	str	r3, [r7, #8]
}
 800eefa:	bf00      	nop
 800eefc:	bf00      	nop
 800eefe:	e7fd      	b.n	800eefc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef04:	1e5a      	subs	r2, r3, #1
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d02c      	beq.n	800ef70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d128      	bne.n	800ef70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	3304      	adds	r3, #4
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fe f980 	bl	800d228 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef40:	4b0f      	ldr	r3, [pc, #60]	@ (800ef80 <xTaskPriorityDisinherit+0xd8>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d903      	bls.n	800ef50 <xTaskPriorityDisinherit+0xa8>
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef4c:	4a0c      	ldr	r2, [pc, #48]	@ (800ef80 <xTaskPriorityDisinherit+0xd8>)
 800ef4e:	6013      	str	r3, [r2, #0]
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef54:	4613      	mov	r3, r2
 800ef56:	009b      	lsls	r3, r3, #2
 800ef58:	4413      	add	r3, r2
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	4a09      	ldr	r2, [pc, #36]	@ (800ef84 <xTaskPriorityDisinherit+0xdc>)
 800ef5e:	441a      	add	r2, r3
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	3304      	adds	r3, #4
 800ef64:	4619      	mov	r1, r3
 800ef66:	4610      	mov	r0, r2
 800ef68:	f7fe f901 	bl	800d16e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef70:	697b      	ldr	r3, [r7, #20]
	}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3718      	adds	r7, #24
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	24001f74 	.word	0x24001f74
 800ef80:	24002450 	.word	0x24002450
 800ef84:	24001f78 	.word	0x24001f78

0800ef88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b088      	sub	sp, #32
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ef96:	2301      	movs	r3, #1
 800ef98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d06c      	beq.n	800f07a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d10b      	bne.n	800efc0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800efa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efac:	f383 8811 	msr	BASEPRI, r3
 800efb0:	f3bf 8f6f 	isb	sy
 800efb4:	f3bf 8f4f 	dsb	sy
 800efb8:	60fb      	str	r3, [r7, #12]
}
 800efba:	bf00      	nop
 800efbc:	bf00      	nop
 800efbe:	e7fd      	b.n	800efbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efc4:	683a      	ldr	r2, [r7, #0]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d902      	bls.n	800efd0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	61fb      	str	r3, [r7, #28]
 800efce:	e002      	b.n	800efd6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800efd0:	69bb      	ldr	r3, [r7, #24]
 800efd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800efd6:	69bb      	ldr	r3, [r7, #24]
 800efd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efda:	69fa      	ldr	r2, [r7, #28]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d04c      	beq.n	800f07a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efe4:	697a      	ldr	r2, [r7, #20]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d147      	bne.n	800f07a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800efea:	4b26      	ldr	r3, [pc, #152]	@ (800f084 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	69ba      	ldr	r2, [r7, #24]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d10b      	bne.n	800f00c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800eff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	60bb      	str	r3, [r7, #8]
}
 800f006:	bf00      	nop
 800f008:	bf00      	nop
 800f00a:	e7fd      	b.n	800f008 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f010:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	69fa      	ldr	r2, [r7, #28]
 800f016:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	699b      	ldr	r3, [r3, #24]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	db04      	blt.n	800f02a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f026:	69bb      	ldr	r3, [r7, #24]
 800f028:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	6959      	ldr	r1, [r3, #20]
 800f02e:	693a      	ldr	r2, [r7, #16]
 800f030:	4613      	mov	r3, r2
 800f032:	009b      	lsls	r3, r3, #2
 800f034:	4413      	add	r3, r2
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	4a13      	ldr	r2, [pc, #76]	@ (800f088 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f03a:	4413      	add	r3, r2
 800f03c:	4299      	cmp	r1, r3
 800f03e:	d11c      	bne.n	800f07a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f040:	69bb      	ldr	r3, [r7, #24]
 800f042:	3304      	adds	r3, #4
 800f044:	4618      	mov	r0, r3
 800f046:	f7fe f8ef 	bl	800d228 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f04e:	4b0f      	ldr	r3, [pc, #60]	@ (800f08c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	429a      	cmp	r2, r3
 800f054:	d903      	bls.n	800f05e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f05a:	4a0c      	ldr	r2, [pc, #48]	@ (800f08c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f05c:	6013      	str	r3, [r2, #0]
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f062:	4613      	mov	r3, r2
 800f064:	009b      	lsls	r3, r3, #2
 800f066:	4413      	add	r3, r2
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	4a07      	ldr	r2, [pc, #28]	@ (800f088 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f06c:	441a      	add	r2, r3
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	3304      	adds	r3, #4
 800f072:	4619      	mov	r1, r3
 800f074:	4610      	mov	r0, r2
 800f076:	f7fe f87a 	bl	800d16e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f07a:	bf00      	nop
 800f07c:	3720      	adds	r7, #32
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	24001f74 	.word	0x24001f74
 800f088:	24001f78 	.word	0x24001f78
 800f08c:	24002450 	.word	0x24002450

0800f090 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f090:	b480      	push	{r7}
 800f092:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f094:	4b07      	ldr	r3, [pc, #28]	@ (800f0b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d004      	beq.n	800f0a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f09c:	4b05      	ldr	r3, [pc, #20]	@ (800f0b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f0a2:	3201      	adds	r2, #1
 800f0a4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f0a6:	4b03      	ldr	r3, [pc, #12]	@ (800f0b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
	}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr
 800f0b4:	24001f74 	.word	0x24001f74

0800f0b8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b086      	sub	sp, #24
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	607a      	str	r2, [r7, #4]
 800f0c4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f0c6:	f000 fedf 	bl	800fe88 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f0ca:	4b29      	ldr	r3, [pc, #164]	@ (800f170 <xTaskNotifyWait+0xb8>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	2b02      	cmp	r3, #2
 800f0d6:	d01c      	beq.n	800f112 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f0d8:	4b25      	ldr	r3, [pc, #148]	@ (800f170 <xTaskNotifyWait+0xb8>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f0e0:	68fa      	ldr	r2, [r7, #12]
 800f0e2:	43d2      	mvns	r2, r2
 800f0e4:	400a      	ands	r2, r1
 800f0e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f0ea:	4b21      	ldr	r3, [pc, #132]	@ (800f170 <xTaskNotifyWait+0xb8>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d00b      	beq.n	800f112 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f0fa:	2101      	movs	r1, #1
 800f0fc:	6838      	ldr	r0, [r7, #0]
 800f0fe:	f000 f9e3 	bl	800f4c8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f102:	4b1c      	ldr	r3, [pc, #112]	@ (800f174 <xTaskNotifyWait+0xbc>)
 800f104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f108:	601a      	str	r2, [r3, #0]
 800f10a:	f3bf 8f4f 	dsb	sy
 800f10e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f112:	f000 feeb 	bl	800feec <vPortExitCritical>

		taskENTER_CRITICAL();
 800f116:	f000 feb7 	bl	800fe88 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d005      	beq.n	800f12c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f120:	4b13      	ldr	r3, [pc, #76]	@ (800f170 <xTaskNotifyWait+0xb8>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f12c:	4b10      	ldr	r3, [pc, #64]	@ (800f170 <xTaskNotifyWait+0xb8>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f134:	b2db      	uxtb	r3, r3
 800f136:	2b02      	cmp	r3, #2
 800f138:	d002      	beq.n	800f140 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f13a:	2300      	movs	r3, #0
 800f13c:	617b      	str	r3, [r7, #20]
 800f13e:	e00a      	b.n	800f156 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f140:	4b0b      	ldr	r3, [pc, #44]	@ (800f170 <xTaskNotifyWait+0xb8>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f148:	68ba      	ldr	r2, [r7, #8]
 800f14a:	43d2      	mvns	r2, r2
 800f14c:	400a      	ands	r2, r1
 800f14e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800f152:	2301      	movs	r3, #1
 800f154:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f156:	4b06      	ldr	r3, [pc, #24]	@ (800f170 <xTaskNotifyWait+0xb8>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2200      	movs	r2, #0
 800f15c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f160:	f000 fec4 	bl	800feec <vPortExitCritical>

		return xReturn;
 800f164:	697b      	ldr	r3, [r7, #20]
	}
 800f166:	4618      	mov	r0, r3
 800f168:	3718      	adds	r7, #24
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	24001f74 	.word	0x24001f74
 800f174:	e000ed04 	.word	0xe000ed04

0800f178 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b08a      	sub	sp, #40	@ 0x28
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	603b      	str	r3, [r7, #0]
 800f184:	4613      	mov	r3, r2
 800f186:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f188:	2301      	movs	r3, #1
 800f18a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d10b      	bne.n	800f1aa <xTaskGenericNotify+0x32>
	__asm volatile
 800f192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f196:	f383 8811 	msr	BASEPRI, r3
 800f19a:	f3bf 8f6f 	isb	sy
 800f19e:	f3bf 8f4f 	dsb	sy
 800f1a2:	61bb      	str	r3, [r7, #24]
}
 800f1a4:	bf00      	nop
 800f1a6:	bf00      	nop
 800f1a8:	e7fd      	b.n	800f1a6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f1ae:	f000 fe6b 	bl	800fe88 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d004      	beq.n	800f1c2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f1b8:	6a3b      	ldr	r3, [r7, #32]
 800f1ba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f1c2:	6a3b      	ldr	r3, [r7, #32]
 800f1c4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f1c8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f1ca:	6a3b      	ldr	r3, [r7, #32]
 800f1cc:	2202      	movs	r2, #2
 800f1ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	2b04      	cmp	r3, #4
 800f1d6:	d82e      	bhi.n	800f236 <xTaskGenericNotify+0xbe>
 800f1d8:	a201      	add	r2, pc, #4	@ (adr r2, 800f1e0 <xTaskGenericNotify+0x68>)
 800f1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1de:	bf00      	nop
 800f1e0:	0800f25b 	.word	0x0800f25b
 800f1e4:	0800f1f5 	.word	0x0800f1f5
 800f1e8:	0800f207 	.word	0x0800f207
 800f1ec:	0800f217 	.word	0x0800f217
 800f1f0:	0800f221 	.word	0x0800f221
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f1f4:	6a3b      	ldr	r3, [r7, #32]
 800f1f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	431a      	orrs	r2, r3
 800f1fe:	6a3b      	ldr	r3, [r7, #32]
 800f200:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f204:	e02c      	b.n	800f260 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f206:	6a3b      	ldr	r3, [r7, #32]
 800f208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f20c:	1c5a      	adds	r2, r3, #1
 800f20e:	6a3b      	ldr	r3, [r7, #32]
 800f210:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f214:	e024      	b.n	800f260 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f216:	6a3b      	ldr	r3, [r7, #32]
 800f218:	68ba      	ldr	r2, [r7, #8]
 800f21a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f21e:	e01f      	b.n	800f260 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f220:	7ffb      	ldrb	r3, [r7, #31]
 800f222:	2b02      	cmp	r3, #2
 800f224:	d004      	beq.n	800f230 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f226:	6a3b      	ldr	r3, [r7, #32]
 800f228:	68ba      	ldr	r2, [r7, #8]
 800f22a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f22e:	e017      	b.n	800f260 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f230:	2300      	movs	r3, #0
 800f232:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f234:	e014      	b.n	800f260 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f236:	6a3b      	ldr	r3, [r7, #32]
 800f238:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f23c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f240:	d00d      	beq.n	800f25e <xTaskGenericNotify+0xe6>
	__asm volatile
 800f242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f246:	f383 8811 	msr	BASEPRI, r3
 800f24a:	f3bf 8f6f 	isb	sy
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	617b      	str	r3, [r7, #20]
}
 800f254:	bf00      	nop
 800f256:	bf00      	nop
 800f258:	e7fd      	b.n	800f256 <xTaskGenericNotify+0xde>
					break;
 800f25a:	bf00      	nop
 800f25c:	e000      	b.n	800f260 <xTaskGenericNotify+0xe8>

					break;
 800f25e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f260:	7ffb      	ldrb	r3, [r7, #31]
 800f262:	2b01      	cmp	r3, #1
 800f264:	d13b      	bne.n	800f2de <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f266:	6a3b      	ldr	r3, [r7, #32]
 800f268:	3304      	adds	r3, #4
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fd ffdc 	bl	800d228 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f270:	6a3b      	ldr	r3, [r7, #32]
 800f272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f274:	4b1d      	ldr	r3, [pc, #116]	@ (800f2ec <xTaskGenericNotify+0x174>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d903      	bls.n	800f284 <xTaskGenericNotify+0x10c>
 800f27c:	6a3b      	ldr	r3, [r7, #32]
 800f27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f280:	4a1a      	ldr	r2, [pc, #104]	@ (800f2ec <xTaskGenericNotify+0x174>)
 800f282:	6013      	str	r3, [r2, #0]
 800f284:	6a3b      	ldr	r3, [r7, #32]
 800f286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f288:	4613      	mov	r3, r2
 800f28a:	009b      	lsls	r3, r3, #2
 800f28c:	4413      	add	r3, r2
 800f28e:	009b      	lsls	r3, r3, #2
 800f290:	4a17      	ldr	r2, [pc, #92]	@ (800f2f0 <xTaskGenericNotify+0x178>)
 800f292:	441a      	add	r2, r3
 800f294:	6a3b      	ldr	r3, [r7, #32]
 800f296:	3304      	adds	r3, #4
 800f298:	4619      	mov	r1, r3
 800f29a:	4610      	mov	r0, r2
 800f29c:	f7fd ff67 	bl	800d16e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f2a0:	6a3b      	ldr	r3, [r7, #32]
 800f2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00b      	beq.n	800f2c0 <xTaskGenericNotify+0x148>
	__asm volatile
 800f2a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	613b      	str	r3, [r7, #16]
}
 800f2ba:	bf00      	nop
 800f2bc:	bf00      	nop
 800f2be:	e7fd      	b.n	800f2bc <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f2c0:	6a3b      	ldr	r3, [r7, #32]
 800f2c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2c4:	4b0b      	ldr	r3, [pc, #44]	@ (800f2f4 <xTaskGenericNotify+0x17c>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d907      	bls.n	800f2de <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f2ce:	4b0a      	ldr	r3, [pc, #40]	@ (800f2f8 <xTaskGenericNotify+0x180>)
 800f2d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2d4:	601a      	str	r2, [r3, #0]
 800f2d6:	f3bf 8f4f 	dsb	sy
 800f2da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f2de:	f000 fe05 	bl	800feec <vPortExitCritical>

		return xReturn;
 800f2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3728      	adds	r7, #40	@ 0x28
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	24002450 	.word	0x24002450
 800f2f0:	24001f78 	.word	0x24001f78
 800f2f4:	24001f74 	.word	0x24001f74
 800f2f8:	e000ed04 	.word	0xe000ed04

0800f2fc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b08e      	sub	sp, #56	@ 0x38
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	603b      	str	r3, [r7, #0]
 800f308:	4613      	mov	r3, r2
 800f30a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f30c:	2301      	movs	r3, #1
 800f30e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d10b      	bne.n	800f32e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800f316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f31a:	f383 8811 	msr	BASEPRI, r3
 800f31e:	f3bf 8f6f 	isb	sy
 800f322:	f3bf 8f4f 	dsb	sy
 800f326:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f328:	bf00      	nop
 800f32a:	bf00      	nop
 800f32c:	e7fd      	b.n	800f32a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f32e:	f000 fe8b 	bl	8010048 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800f336:	f3ef 8211 	mrs	r2, BASEPRI
 800f33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f33e:	f383 8811 	msr	BASEPRI, r3
 800f342:	f3bf 8f6f 	isb	sy
 800f346:	f3bf 8f4f 	dsb	sy
 800f34a:	623a      	str	r2, [r7, #32]
 800f34c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f34e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f350:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d004      	beq.n	800f362 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f35a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f364:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f36e:	2202      	movs	r2, #2
 800f370:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f374:	79fb      	ldrb	r3, [r7, #7]
 800f376:	2b04      	cmp	r3, #4
 800f378:	d82e      	bhi.n	800f3d8 <xTaskGenericNotifyFromISR+0xdc>
 800f37a:	a201      	add	r2, pc, #4	@ (adr r2, 800f380 <xTaskGenericNotifyFromISR+0x84>)
 800f37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f380:	0800f3fd 	.word	0x0800f3fd
 800f384:	0800f395 	.word	0x0800f395
 800f388:	0800f3a7 	.word	0x0800f3a7
 800f38c:	0800f3b7 	.word	0x0800f3b7
 800f390:	0800f3c1 	.word	0x0800f3c1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f396:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	431a      	orrs	r2, r3
 800f39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f3a4:	e02d      	b.n	800f402 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f3ac:	1c5a      	adds	r2, r3, #1
 800f3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f3b4:	e025      	b.n	800f402 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b8:	68ba      	ldr	r2, [r7, #8]
 800f3ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f3be:	e020      	b.n	800f402 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f3c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f3c4:	2b02      	cmp	r3, #2
 800f3c6:	d004      	beq.n	800f3d2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f3d0:	e017      	b.n	800f402 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800f3d6:	e014      	b.n	800f402 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f3de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f3e2:	d00d      	beq.n	800f400 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800f3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3e8:	f383 8811 	msr	BASEPRI, r3
 800f3ec:	f3bf 8f6f 	isb	sy
 800f3f0:	f3bf 8f4f 	dsb	sy
 800f3f4:	61bb      	str	r3, [r7, #24]
}
 800f3f6:	bf00      	nop
 800f3f8:	bf00      	nop
 800f3fa:	e7fd      	b.n	800f3f8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f3fc:	bf00      	nop
 800f3fe:	e000      	b.n	800f402 <xTaskGenericNotifyFromISR+0x106>
					break;
 800f400:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f402:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f406:	2b01      	cmp	r3, #1
 800f408:	d147      	bne.n	800f49a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d00b      	beq.n	800f42a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800f412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f416:	f383 8811 	msr	BASEPRI, r3
 800f41a:	f3bf 8f6f 	isb	sy
 800f41e:	f3bf 8f4f 	dsb	sy
 800f422:	617b      	str	r3, [r7, #20]
}
 800f424:	bf00      	nop
 800f426:	bf00      	nop
 800f428:	e7fd      	b.n	800f426 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f42a:	4b21      	ldr	r3, [pc, #132]	@ (800f4b0 <xTaskGenericNotifyFromISR+0x1b4>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d11d      	bne.n	800f46e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f434:	3304      	adds	r3, #4
 800f436:	4618      	mov	r0, r3
 800f438:	f7fd fef6 	bl	800d228 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f43e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f440:	4b1c      	ldr	r3, [pc, #112]	@ (800f4b4 <xTaskGenericNotifyFromISR+0x1b8>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	429a      	cmp	r2, r3
 800f446:	d903      	bls.n	800f450 <xTaskGenericNotifyFromISR+0x154>
 800f448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f44c:	4a19      	ldr	r2, [pc, #100]	@ (800f4b4 <xTaskGenericNotifyFromISR+0x1b8>)
 800f44e:	6013      	str	r3, [r2, #0]
 800f450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f454:	4613      	mov	r3, r2
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	4413      	add	r3, r2
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	4a16      	ldr	r2, [pc, #88]	@ (800f4b8 <xTaskGenericNotifyFromISR+0x1bc>)
 800f45e:	441a      	add	r2, r3
 800f460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f462:	3304      	adds	r3, #4
 800f464:	4619      	mov	r1, r3
 800f466:	4610      	mov	r0, r2
 800f468:	f7fd fe81 	bl	800d16e <vListInsertEnd>
 800f46c:	e005      	b.n	800f47a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f470:	3318      	adds	r3, #24
 800f472:	4619      	mov	r1, r3
 800f474:	4811      	ldr	r0, [pc, #68]	@ (800f4bc <xTaskGenericNotifyFromISR+0x1c0>)
 800f476:	f7fd fe7a 	bl	800d16e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f47e:	4b10      	ldr	r3, [pc, #64]	@ (800f4c0 <xTaskGenericNotifyFromISR+0x1c4>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f484:	429a      	cmp	r2, r3
 800f486:	d908      	bls.n	800f49a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d002      	beq.n	800f494 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f48e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f490:	2201      	movs	r2, #1
 800f492:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f494:	4b0b      	ldr	r3, [pc, #44]	@ (800f4c4 <xTaskGenericNotifyFromISR+0x1c8>)
 800f496:	2201      	movs	r2, #1
 800f498:	601a      	str	r2, [r3, #0]
 800f49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f49c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	f383 8811 	msr	BASEPRI, r3
}
 800f4a4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f4a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3738      	adds	r7, #56	@ 0x38
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	24002470 	.word	0x24002470
 800f4b4:	24002450 	.word	0x24002450
 800f4b8:	24001f78 	.word	0x24001f78
 800f4bc:	24002408 	.word	0x24002408
 800f4c0:	24001f74 	.word	0x24001f74
 800f4c4:	2400245c 	.word	0x2400245c

0800f4c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f4d2:	4b21      	ldr	r3, [pc, #132]	@ (800f558 <prvAddCurrentTaskToDelayedList+0x90>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4d8:	4b20      	ldr	r3, [pc, #128]	@ (800f55c <prvAddCurrentTaskToDelayedList+0x94>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	3304      	adds	r3, #4
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fd fea2 	bl	800d228 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f4ea:	d10a      	bne.n	800f502 <prvAddCurrentTaskToDelayedList+0x3a>
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d007      	beq.n	800f502 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4f2:	4b1a      	ldr	r3, [pc, #104]	@ (800f55c <prvAddCurrentTaskToDelayedList+0x94>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	3304      	adds	r3, #4
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	4819      	ldr	r0, [pc, #100]	@ (800f560 <prvAddCurrentTaskToDelayedList+0x98>)
 800f4fc:	f7fd fe37 	bl	800d16e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f500:	e026      	b.n	800f550 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f502:	68fa      	ldr	r2, [r7, #12]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4413      	add	r3, r2
 800f508:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f50a:	4b14      	ldr	r3, [pc, #80]	@ (800f55c <prvAddCurrentTaskToDelayedList+0x94>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	68ba      	ldr	r2, [r7, #8]
 800f510:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f512:	68ba      	ldr	r2, [r7, #8]
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	429a      	cmp	r2, r3
 800f518:	d209      	bcs.n	800f52e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f51a:	4b12      	ldr	r3, [pc, #72]	@ (800f564 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	4b0f      	ldr	r3, [pc, #60]	@ (800f55c <prvAddCurrentTaskToDelayedList+0x94>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3304      	adds	r3, #4
 800f524:	4619      	mov	r1, r3
 800f526:	4610      	mov	r0, r2
 800f528:	f7fd fe45 	bl	800d1b6 <vListInsert>
}
 800f52c:	e010      	b.n	800f550 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f52e:	4b0e      	ldr	r3, [pc, #56]	@ (800f568 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	4b0a      	ldr	r3, [pc, #40]	@ (800f55c <prvAddCurrentTaskToDelayedList+0x94>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	3304      	adds	r3, #4
 800f538:	4619      	mov	r1, r3
 800f53a:	4610      	mov	r0, r2
 800f53c:	f7fd fe3b 	bl	800d1b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f540:	4b0a      	ldr	r3, [pc, #40]	@ (800f56c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	68ba      	ldr	r2, [r7, #8]
 800f546:	429a      	cmp	r2, r3
 800f548:	d202      	bcs.n	800f550 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f54a:	4a08      	ldr	r2, [pc, #32]	@ (800f56c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	6013      	str	r3, [r2, #0]
}
 800f550:	bf00      	nop
 800f552:	3710      	adds	r7, #16
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	2400244c 	.word	0x2400244c
 800f55c:	24001f74 	.word	0x24001f74
 800f560:	24002434 	.word	0x24002434
 800f564:	24002404 	.word	0x24002404
 800f568:	24002400 	.word	0x24002400
 800f56c:	24002468 	.word	0x24002468

0800f570 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b08a      	sub	sp, #40	@ 0x28
 800f574:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f576:	2300      	movs	r3, #0
 800f578:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f57a:	f000 fb13 	bl	800fba4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f57e:	4b1d      	ldr	r3, [pc, #116]	@ (800f5f4 <xTimerCreateTimerTask+0x84>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d021      	beq.n	800f5ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f586:	2300      	movs	r3, #0
 800f588:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f58a:	2300      	movs	r3, #0
 800f58c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f58e:	1d3a      	adds	r2, r7, #4
 800f590:	f107 0108 	add.w	r1, r7, #8
 800f594:	f107 030c 	add.w	r3, r7, #12
 800f598:	4618      	mov	r0, r3
 800f59a:	f7fd fda1 	bl	800d0e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f59e:	6879      	ldr	r1, [r7, #4]
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	68fa      	ldr	r2, [r7, #12]
 800f5a4:	9202      	str	r2, [sp, #8]
 800f5a6:	9301      	str	r3, [sp, #4]
 800f5a8:	2302      	movs	r3, #2
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	460a      	mov	r2, r1
 800f5b0:	4911      	ldr	r1, [pc, #68]	@ (800f5f8 <xTimerCreateTimerTask+0x88>)
 800f5b2:	4812      	ldr	r0, [pc, #72]	@ (800f5fc <xTimerCreateTimerTask+0x8c>)
 800f5b4:	f7fe fd78 	bl	800e0a8 <xTaskCreateStatic>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	4a11      	ldr	r2, [pc, #68]	@ (800f600 <xTimerCreateTimerTask+0x90>)
 800f5bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f5be:	4b10      	ldr	r3, [pc, #64]	@ (800f600 <xTimerCreateTimerTask+0x90>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d001      	beq.n	800f5ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d10b      	bne.n	800f5e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	613b      	str	r3, [r7, #16]
}
 800f5e2:	bf00      	nop
 800f5e4:	bf00      	nop
 800f5e6:	e7fd      	b.n	800f5e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f5e8:	697b      	ldr	r3, [r7, #20]
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3718      	adds	r7, #24
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	240024a4 	.word	0x240024a4
 800f5f8:	08013ff8 	.word	0x08013ff8
 800f5fc:	0800f73d 	.word	0x0800f73d
 800f600:	240024a8 	.word	0x240024a8

0800f604 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b08a      	sub	sp, #40	@ 0x28
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
 800f610:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f612:	2300      	movs	r3, #0
 800f614:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d10b      	bne.n	800f634 <xTimerGenericCommand+0x30>
	__asm volatile
 800f61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f620:	f383 8811 	msr	BASEPRI, r3
 800f624:	f3bf 8f6f 	isb	sy
 800f628:	f3bf 8f4f 	dsb	sy
 800f62c:	623b      	str	r3, [r7, #32]
}
 800f62e:	bf00      	nop
 800f630:	bf00      	nop
 800f632:	e7fd      	b.n	800f630 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f634:	4b19      	ldr	r3, [pc, #100]	@ (800f69c <xTimerGenericCommand+0x98>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d02a      	beq.n	800f692 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	2b05      	cmp	r3, #5
 800f64c:	dc18      	bgt.n	800f680 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f64e:	f7ff fba5 	bl	800ed9c <xTaskGetSchedulerState>
 800f652:	4603      	mov	r3, r0
 800f654:	2b02      	cmp	r3, #2
 800f656:	d109      	bne.n	800f66c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f658:	4b10      	ldr	r3, [pc, #64]	@ (800f69c <xTimerGenericCommand+0x98>)
 800f65a:	6818      	ldr	r0, [r3, #0]
 800f65c:	f107 0110 	add.w	r1, r7, #16
 800f660:	2300      	movs	r3, #0
 800f662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f664:	f7fe f808 	bl	800d678 <xQueueGenericSend>
 800f668:	6278      	str	r0, [r7, #36]	@ 0x24
 800f66a:	e012      	b.n	800f692 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f66c:	4b0b      	ldr	r3, [pc, #44]	@ (800f69c <xTimerGenericCommand+0x98>)
 800f66e:	6818      	ldr	r0, [r3, #0]
 800f670:	f107 0110 	add.w	r1, r7, #16
 800f674:	2300      	movs	r3, #0
 800f676:	2200      	movs	r2, #0
 800f678:	f7fd fffe 	bl	800d678 <xQueueGenericSend>
 800f67c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f67e:	e008      	b.n	800f692 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f680:	4b06      	ldr	r3, [pc, #24]	@ (800f69c <xTimerGenericCommand+0x98>)
 800f682:	6818      	ldr	r0, [r3, #0]
 800f684:	f107 0110 	add.w	r1, r7, #16
 800f688:	2300      	movs	r3, #0
 800f68a:	683a      	ldr	r2, [r7, #0]
 800f68c:	f7fe f8f6 	bl	800d87c <xQueueGenericSendFromISR>
 800f690:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f694:	4618      	mov	r0, r3
 800f696:	3728      	adds	r7, #40	@ 0x28
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	240024a4 	.word	0x240024a4

0800f6a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b088      	sub	sp, #32
 800f6a4:	af02      	add	r7, sp, #8
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6aa:	4b23      	ldr	r3, [pc, #140]	@ (800f738 <prvProcessExpiredTimer+0x98>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	68db      	ldr	r3, [r3, #12]
 800f6b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	3304      	adds	r3, #4
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7fd fdb5 	bl	800d228 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f6c4:	f003 0304 	and.w	r3, r3, #4
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d023      	beq.n	800f714 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	699a      	ldr	r2, [r3, #24]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	18d1      	adds	r1, r2, r3
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	683a      	ldr	r2, [r7, #0]
 800f6d8:	6978      	ldr	r0, [r7, #20]
 800f6da:	f000 f8d5 	bl	800f888 <prvInsertTimerInActiveList>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d020      	beq.n	800f726 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	9300      	str	r3, [sp, #0]
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	6978      	ldr	r0, [r7, #20]
 800f6f0:	f7ff ff88 	bl	800f604 <xTimerGenericCommand>
 800f6f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d114      	bne.n	800f726 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f700:	f383 8811 	msr	BASEPRI, r3
 800f704:	f3bf 8f6f 	isb	sy
 800f708:	f3bf 8f4f 	dsb	sy
 800f70c:	60fb      	str	r3, [r7, #12]
}
 800f70e:	bf00      	nop
 800f710:	bf00      	nop
 800f712:	e7fd      	b.n	800f710 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f71a:	f023 0301 	bic.w	r3, r3, #1
 800f71e:	b2da      	uxtb	r2, r3
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	6a1b      	ldr	r3, [r3, #32]
 800f72a:	6978      	ldr	r0, [r7, #20]
 800f72c:	4798      	blx	r3
}
 800f72e:	bf00      	nop
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	2400249c 	.word	0x2400249c

0800f73c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f744:	f107 0308 	add.w	r3, r7, #8
 800f748:	4618      	mov	r0, r3
 800f74a:	f000 f859 	bl	800f800 <prvGetNextExpireTime>
 800f74e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	4619      	mov	r1, r3
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f000 f805 	bl	800f764 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f75a:	f000 f8d7 	bl	800f90c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f75e:	bf00      	nop
 800f760:	e7f0      	b.n	800f744 <prvTimerTask+0x8>
	...

0800f764 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f76e:	f7fe feff 	bl	800e570 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f772:	f107 0308 	add.w	r3, r7, #8
 800f776:	4618      	mov	r0, r3
 800f778:	f000 f866 	bl	800f848 <prvSampleTimeNow>
 800f77c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d130      	bne.n	800f7e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d10a      	bne.n	800f7a0 <prvProcessTimerOrBlockTask+0x3c>
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d806      	bhi.n	800f7a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f792:	f7fe fefb 	bl	800e58c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f796:	68f9      	ldr	r1, [r7, #12]
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f7ff ff81 	bl	800f6a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f79e:	e024      	b.n	800f7ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d008      	beq.n	800f7b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f7a6:	4b13      	ldr	r3, [pc, #76]	@ (800f7f4 <prvProcessTimerOrBlockTask+0x90>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d101      	bne.n	800f7b4 <prvProcessTimerOrBlockTask+0x50>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	e000      	b.n	800f7b6 <prvProcessTimerOrBlockTask+0x52>
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f7b8:	4b0f      	ldr	r3, [pc, #60]	@ (800f7f8 <prvProcessTimerOrBlockTask+0x94>)
 800f7ba:	6818      	ldr	r0, [r3, #0]
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	1ad3      	subs	r3, r2, r3
 800f7c2:	683a      	ldr	r2, [r7, #0]
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	f7fe fc3b 	bl	800e040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f7ca:	f7fe fedf 	bl	800e58c <xTaskResumeAll>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d10a      	bne.n	800f7ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f7d4:	4b09      	ldr	r3, [pc, #36]	@ (800f7fc <prvProcessTimerOrBlockTask+0x98>)
 800f7d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7da:	601a      	str	r2, [r3, #0]
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	f3bf 8f6f 	isb	sy
}
 800f7e4:	e001      	b.n	800f7ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f7e6:	f7fe fed1 	bl	800e58c <xTaskResumeAll>
}
 800f7ea:	bf00      	nop
 800f7ec:	3710      	adds	r7, #16
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	240024a0 	.word	0x240024a0
 800f7f8:	240024a4 	.word	0x240024a4
 800f7fc:	e000ed04 	.word	0xe000ed04

0800f800 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f800:	b480      	push	{r7}
 800f802:	b085      	sub	sp, #20
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f808:	4b0e      	ldr	r3, [pc, #56]	@ (800f844 <prvGetNextExpireTime+0x44>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d101      	bne.n	800f816 <prvGetNextExpireTime+0x16>
 800f812:	2201      	movs	r2, #1
 800f814:	e000      	b.n	800f818 <prvGetNextExpireTime+0x18>
 800f816:	2200      	movs	r2, #0
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d105      	bne.n	800f830 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f824:	4b07      	ldr	r3, [pc, #28]	@ (800f844 <prvGetNextExpireTime+0x44>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	60fb      	str	r3, [r7, #12]
 800f82e:	e001      	b.n	800f834 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f830:	2300      	movs	r3, #0
 800f832:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f834:	68fb      	ldr	r3, [r7, #12]
}
 800f836:	4618      	mov	r0, r3
 800f838:	3714      	adds	r7, #20
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	2400249c 	.word	0x2400249c

0800f848 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b084      	sub	sp, #16
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f850:	f7fe ff3a 	bl	800e6c8 <xTaskGetTickCount>
 800f854:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f856:	4b0b      	ldr	r3, [pc, #44]	@ (800f884 <prvSampleTimeNow+0x3c>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d205      	bcs.n	800f86c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f860:	f000 f93a 	bl	800fad8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	601a      	str	r2, [r3, #0]
 800f86a:	e002      	b.n	800f872 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2200      	movs	r2, #0
 800f870:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f872:	4a04      	ldr	r2, [pc, #16]	@ (800f884 <prvSampleTimeNow+0x3c>)
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f878:	68fb      	ldr	r3, [r7, #12]
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	240024ac 	.word	0x240024ac

0800f888 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b086      	sub	sp, #24
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	607a      	str	r2, [r7, #4]
 800f894:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f896:	2300      	movs	r3, #0
 800f898:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	68fa      	ldr	r2, [r7, #12]
 800f8a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f8a6:	68ba      	ldr	r2, [r7, #8]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d812      	bhi.n	800f8d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	1ad2      	subs	r2, r2, r3
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	699b      	ldr	r3, [r3, #24]
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d302      	bcc.n	800f8c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f8bc:	2301      	movs	r3, #1
 800f8be:	617b      	str	r3, [r7, #20]
 800f8c0:	e01b      	b.n	800f8fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f8c2:	4b10      	ldr	r3, [pc, #64]	@ (800f904 <prvInsertTimerInActiveList+0x7c>)
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	3304      	adds	r3, #4
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	4610      	mov	r0, r2
 800f8ce:	f7fd fc72 	bl	800d1b6 <vListInsert>
 800f8d2:	e012      	b.n	800f8fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f8d4:	687a      	ldr	r2, [r7, #4]
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d206      	bcs.n	800f8ea <prvInsertTimerInActiveList+0x62>
 800f8dc:	68ba      	ldr	r2, [r7, #8]
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d302      	bcc.n	800f8ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	617b      	str	r3, [r7, #20]
 800f8e8:	e007      	b.n	800f8fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f8ea:	4b07      	ldr	r3, [pc, #28]	@ (800f908 <prvInsertTimerInActiveList+0x80>)
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	3304      	adds	r3, #4
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	4610      	mov	r0, r2
 800f8f6:	f7fd fc5e 	bl	800d1b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f8fa:	697b      	ldr	r3, [r7, #20]
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3718      	adds	r7, #24
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	240024a0 	.word	0x240024a0
 800f908:	2400249c 	.word	0x2400249c

0800f90c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b08e      	sub	sp, #56	@ 0x38
 800f910:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f912:	e0ce      	b.n	800fab2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	da19      	bge.n	800f94e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f91a:	1d3b      	adds	r3, r7, #4
 800f91c:	3304      	adds	r3, #4
 800f91e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f922:	2b00      	cmp	r3, #0
 800f924:	d10b      	bne.n	800f93e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f92a:	f383 8811 	msr	BASEPRI, r3
 800f92e:	f3bf 8f6f 	isb	sy
 800f932:	f3bf 8f4f 	dsb	sy
 800f936:	61fb      	str	r3, [r7, #28]
}
 800f938:	bf00      	nop
 800f93a:	bf00      	nop
 800f93c:	e7fd      	b.n	800f93a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f944:	6850      	ldr	r0, [r2, #4]
 800f946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f948:	6892      	ldr	r2, [r2, #8]
 800f94a:	4611      	mov	r1, r2
 800f94c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2b00      	cmp	r3, #0
 800f952:	f2c0 80ae 	blt.w	800fab2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f95c:	695b      	ldr	r3, [r3, #20]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d004      	beq.n	800f96c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f964:	3304      	adds	r3, #4
 800f966:	4618      	mov	r0, r3
 800f968:	f7fd fc5e 	bl	800d228 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f96c:	463b      	mov	r3, r7
 800f96e:	4618      	mov	r0, r3
 800f970:	f7ff ff6a 	bl	800f848 <prvSampleTimeNow>
 800f974:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2b09      	cmp	r3, #9
 800f97a:	f200 8097 	bhi.w	800faac <prvProcessReceivedCommands+0x1a0>
 800f97e:	a201      	add	r2, pc, #4	@ (adr r2, 800f984 <prvProcessReceivedCommands+0x78>)
 800f980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f984:	0800f9ad 	.word	0x0800f9ad
 800f988:	0800f9ad 	.word	0x0800f9ad
 800f98c:	0800f9ad 	.word	0x0800f9ad
 800f990:	0800fa23 	.word	0x0800fa23
 800f994:	0800fa37 	.word	0x0800fa37
 800f998:	0800fa83 	.word	0x0800fa83
 800f99c:	0800f9ad 	.word	0x0800f9ad
 800f9a0:	0800f9ad 	.word	0x0800f9ad
 800f9a4:	0800fa23 	.word	0x0800fa23
 800f9a8:	0800fa37 	.word	0x0800fa37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9b2:	f043 0301 	orr.w	r3, r3, #1
 800f9b6:	b2da      	uxtb	r2, r3
 800f9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f9be:	68ba      	ldr	r2, [r7, #8]
 800f9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9c2:	699b      	ldr	r3, [r3, #24]
 800f9c4:	18d1      	adds	r1, r2, r3
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9cc:	f7ff ff5c 	bl	800f888 <prvInsertTimerInActiveList>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d06c      	beq.n	800fab0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9d8:	6a1b      	ldr	r3, [r3, #32]
 800f9da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9e4:	f003 0304 	and.w	r3, r3, #4
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d061      	beq.n	800fab0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9f0:	699b      	ldr	r3, [r3, #24]
 800f9f2:	441a      	add	r2, r3
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9fe:	f7ff fe01 	bl	800f604 <xTimerGenericCommand>
 800fa02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa04:	6a3b      	ldr	r3, [r7, #32]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d152      	bne.n	800fab0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800fa0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa0e:	f383 8811 	msr	BASEPRI, r3
 800fa12:	f3bf 8f6f 	isb	sy
 800fa16:	f3bf 8f4f 	dsb	sy
 800fa1a:	61bb      	str	r3, [r7, #24]
}
 800fa1c:	bf00      	nop
 800fa1e:	bf00      	nop
 800fa20:	e7fd      	b.n	800fa1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa28:	f023 0301 	bic.w	r3, r3, #1
 800fa2c:	b2da      	uxtb	r2, r3
 800fa2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fa34:	e03d      	b.n	800fab2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa3c:	f043 0301 	orr.w	r3, r3, #1
 800fa40:	b2da      	uxtb	r2, r3
 800fa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fa48:	68ba      	ldr	r2, [r7, #8]
 800fa4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fa4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa50:	699b      	ldr	r3, [r3, #24]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d10b      	bne.n	800fa6e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800fa56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa5a:	f383 8811 	msr	BASEPRI, r3
 800fa5e:	f3bf 8f6f 	isb	sy
 800fa62:	f3bf 8f4f 	dsb	sy
 800fa66:	617b      	str	r3, [r7, #20]
}
 800fa68:	bf00      	nop
 800fa6a:	bf00      	nop
 800fa6c:	e7fd      	b.n	800fa6a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fa6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa70:	699a      	ldr	r2, [r3, #24]
 800fa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa74:	18d1      	adds	r1, r2, r3
 800fa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa7c:	f7ff ff04 	bl	800f888 <prvInsertTimerInActiveList>
					break;
 800fa80:	e017      	b.n	800fab2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fa82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa88:	f003 0302 	and.w	r3, r3, #2
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d103      	bne.n	800fa98 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fa90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa92:	f000 fbe9 	bl	8010268 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fa96:	e00c      	b.n	800fab2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa9e:	f023 0301 	bic.w	r3, r3, #1
 800faa2:	b2da      	uxtb	r2, r3
 800faa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800faaa:	e002      	b.n	800fab2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800faac:	bf00      	nop
 800faae:	e000      	b.n	800fab2 <prvProcessReceivedCommands+0x1a6>
					break;
 800fab0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fab2:	4b08      	ldr	r3, [pc, #32]	@ (800fad4 <prvProcessReceivedCommands+0x1c8>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	1d39      	adds	r1, r7, #4
 800fab8:	2200      	movs	r2, #0
 800faba:	4618      	mov	r0, r3
 800fabc:	f7fd ff7c 	bl	800d9b8 <xQueueReceive>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	f47f af26 	bne.w	800f914 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fac8:	bf00      	nop
 800faca:	bf00      	nop
 800facc:	3730      	adds	r7, #48	@ 0x30
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	240024a4 	.word	0x240024a4

0800fad8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b088      	sub	sp, #32
 800fadc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fade:	e049      	b.n	800fb74 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fae0:	4b2e      	ldr	r3, [pc, #184]	@ (800fb9c <prvSwitchTimerLists+0xc4>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	68db      	ldr	r3, [r3, #12]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faea:	4b2c      	ldr	r3, [pc, #176]	@ (800fb9c <prvSwitchTimerLists+0xc4>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	3304      	adds	r3, #4
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7fd fb95 	bl	800d228 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6a1b      	ldr	r3, [r3, #32]
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fb0c:	f003 0304 	and.w	r3, r3, #4
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d02f      	beq.n	800fb74 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	699b      	ldr	r3, [r3, #24]
 800fb18:	693a      	ldr	r2, [r7, #16]
 800fb1a:	4413      	add	r3, r2
 800fb1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb1e:	68ba      	ldr	r2, [r7, #8]
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d90e      	bls.n	800fb44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	68ba      	ldr	r2, [r7, #8]
 800fb2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	68fa      	ldr	r2, [r7, #12]
 800fb30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb32:	4b1a      	ldr	r3, [pc, #104]	@ (800fb9c <prvSwitchTimerLists+0xc4>)
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	3304      	adds	r3, #4
 800fb3a:	4619      	mov	r1, r3
 800fb3c:	4610      	mov	r0, r2
 800fb3e:	f7fd fb3a 	bl	800d1b6 <vListInsert>
 800fb42:	e017      	b.n	800fb74 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb44:	2300      	movs	r3, #0
 800fb46:	9300      	str	r3, [sp, #0]
 800fb48:	2300      	movs	r3, #0
 800fb4a:	693a      	ldr	r2, [r7, #16]
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	f7ff fd58 	bl	800f604 <xTimerGenericCommand>
 800fb54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d10b      	bne.n	800fb74 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	603b      	str	r3, [r7, #0]
}
 800fb6e:	bf00      	nop
 800fb70:	bf00      	nop
 800fb72:	e7fd      	b.n	800fb70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb74:	4b09      	ldr	r3, [pc, #36]	@ (800fb9c <prvSwitchTimerLists+0xc4>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d1b0      	bne.n	800fae0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fb7e:	4b07      	ldr	r3, [pc, #28]	@ (800fb9c <prvSwitchTimerLists+0xc4>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fb84:	4b06      	ldr	r3, [pc, #24]	@ (800fba0 <prvSwitchTimerLists+0xc8>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a04      	ldr	r2, [pc, #16]	@ (800fb9c <prvSwitchTimerLists+0xc4>)
 800fb8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fb8c:	4a04      	ldr	r2, [pc, #16]	@ (800fba0 <prvSwitchTimerLists+0xc8>)
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	6013      	str	r3, [r2, #0]
}
 800fb92:	bf00      	nop
 800fb94:	3718      	adds	r7, #24
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	2400249c 	.word	0x2400249c
 800fba0:	240024a0 	.word	0x240024a0

0800fba4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fbaa:	f000 f96d 	bl	800fe88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fbae:	4b15      	ldr	r3, [pc, #84]	@ (800fc04 <prvCheckForValidListAndQueue+0x60>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d120      	bne.n	800fbf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fbb6:	4814      	ldr	r0, [pc, #80]	@ (800fc08 <prvCheckForValidListAndQueue+0x64>)
 800fbb8:	f7fd faac 	bl	800d114 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fbbc:	4813      	ldr	r0, [pc, #76]	@ (800fc0c <prvCheckForValidListAndQueue+0x68>)
 800fbbe:	f7fd faa9 	bl	800d114 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fbc2:	4b13      	ldr	r3, [pc, #76]	@ (800fc10 <prvCheckForValidListAndQueue+0x6c>)
 800fbc4:	4a10      	ldr	r2, [pc, #64]	@ (800fc08 <prvCheckForValidListAndQueue+0x64>)
 800fbc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fbc8:	4b12      	ldr	r3, [pc, #72]	@ (800fc14 <prvCheckForValidListAndQueue+0x70>)
 800fbca:	4a10      	ldr	r2, [pc, #64]	@ (800fc0c <prvCheckForValidListAndQueue+0x68>)
 800fbcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fbce:	2300      	movs	r3, #0
 800fbd0:	9300      	str	r3, [sp, #0]
 800fbd2:	4b11      	ldr	r3, [pc, #68]	@ (800fc18 <prvCheckForValidListAndQueue+0x74>)
 800fbd4:	4a11      	ldr	r2, [pc, #68]	@ (800fc1c <prvCheckForValidListAndQueue+0x78>)
 800fbd6:	2110      	movs	r1, #16
 800fbd8:	200a      	movs	r0, #10
 800fbda:	f7fd fbb9 	bl	800d350 <xQueueGenericCreateStatic>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	4a08      	ldr	r2, [pc, #32]	@ (800fc04 <prvCheckForValidListAndQueue+0x60>)
 800fbe2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fbe4:	4b07      	ldr	r3, [pc, #28]	@ (800fc04 <prvCheckForValidListAndQueue+0x60>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d005      	beq.n	800fbf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fbec:	4b05      	ldr	r3, [pc, #20]	@ (800fc04 <prvCheckForValidListAndQueue+0x60>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	490b      	ldr	r1, [pc, #44]	@ (800fc20 <prvCheckForValidListAndQueue+0x7c>)
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fe f9fa 	bl	800dfec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbf8:	f000 f978 	bl	800feec <vPortExitCritical>
}
 800fbfc:	bf00      	nop
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	240024a4 	.word	0x240024a4
 800fc08:	24002474 	.word	0x24002474
 800fc0c:	24002488 	.word	0x24002488
 800fc10:	2400249c 	.word	0x2400249c
 800fc14:	240024a0 	.word	0x240024a0
 800fc18:	24002550 	.word	0x24002550
 800fc1c:	240024b0 	.word	0x240024b0
 800fc20:	08014000 	.word	0x08014000

0800fc24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	3b04      	subs	r3, #4
 800fc34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fc3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	3b04      	subs	r3, #4
 800fc42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	f023 0201 	bic.w	r2, r3, #1
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	3b04      	subs	r3, #4
 800fc52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fc54:	4a0c      	ldr	r2, [pc, #48]	@ (800fc88 <pxPortInitialiseStack+0x64>)
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	3b14      	subs	r3, #20
 800fc5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	3b04      	subs	r3, #4
 800fc6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f06f 0202 	mvn.w	r2, #2
 800fc72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	3b20      	subs	r3, #32
 800fc78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3714      	adds	r7, #20
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr
 800fc88:	0800fc8d 	.word	0x0800fc8d

0800fc8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b085      	sub	sp, #20
 800fc90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fc92:	2300      	movs	r3, #0
 800fc94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fc96:	4b13      	ldr	r3, [pc, #76]	@ (800fce4 <prvTaskExitError+0x58>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fc9e:	d00b      	beq.n	800fcb8 <prvTaskExitError+0x2c>
	__asm volatile
 800fca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fca4:	f383 8811 	msr	BASEPRI, r3
 800fca8:	f3bf 8f6f 	isb	sy
 800fcac:	f3bf 8f4f 	dsb	sy
 800fcb0:	60fb      	str	r3, [r7, #12]
}
 800fcb2:	bf00      	nop
 800fcb4:	bf00      	nop
 800fcb6:	e7fd      	b.n	800fcb4 <prvTaskExitError+0x28>
	__asm volatile
 800fcb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcbc:	f383 8811 	msr	BASEPRI, r3
 800fcc0:	f3bf 8f6f 	isb	sy
 800fcc4:	f3bf 8f4f 	dsb	sy
 800fcc8:	60bb      	str	r3, [r7, #8]
}
 800fcca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fccc:	bf00      	nop
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d0fc      	beq.n	800fcce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fcd4:	bf00      	nop
 800fcd6:	bf00      	nop
 800fcd8:	3714      	adds	r7, #20
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop
 800fce4:	24000010 	.word	0x24000010
	...

0800fcf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fcf0:	4b07      	ldr	r3, [pc, #28]	@ (800fd10 <pxCurrentTCBConst2>)
 800fcf2:	6819      	ldr	r1, [r3, #0]
 800fcf4:	6808      	ldr	r0, [r1, #0]
 800fcf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfa:	f380 8809 	msr	PSP, r0
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f04f 0000 	mov.w	r0, #0
 800fd06:	f380 8811 	msr	BASEPRI, r0
 800fd0a:	4770      	bx	lr
 800fd0c:	f3af 8000 	nop.w

0800fd10 <pxCurrentTCBConst2>:
 800fd10:	24001f74 	.word	0x24001f74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd14:	bf00      	nop
 800fd16:	bf00      	nop

0800fd18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd18:	4808      	ldr	r0, [pc, #32]	@ (800fd3c <prvPortStartFirstTask+0x24>)
 800fd1a:	6800      	ldr	r0, [r0, #0]
 800fd1c:	6800      	ldr	r0, [r0, #0]
 800fd1e:	f380 8808 	msr	MSP, r0
 800fd22:	f04f 0000 	mov.w	r0, #0
 800fd26:	f380 8814 	msr	CONTROL, r0
 800fd2a:	b662      	cpsie	i
 800fd2c:	b661      	cpsie	f
 800fd2e:	f3bf 8f4f 	dsb	sy
 800fd32:	f3bf 8f6f 	isb	sy
 800fd36:	df00      	svc	0
 800fd38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd3a:	bf00      	nop
 800fd3c:	e000ed08 	.word	0xe000ed08

0800fd40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fd46:	4b47      	ldr	r3, [pc, #284]	@ (800fe64 <xPortStartScheduler+0x124>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4a47      	ldr	r2, [pc, #284]	@ (800fe68 <xPortStartScheduler+0x128>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d10b      	bne.n	800fd68 <xPortStartScheduler+0x28>
	__asm volatile
 800fd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd54:	f383 8811 	msr	BASEPRI, r3
 800fd58:	f3bf 8f6f 	isb	sy
 800fd5c:	f3bf 8f4f 	dsb	sy
 800fd60:	613b      	str	r3, [r7, #16]
}
 800fd62:	bf00      	nop
 800fd64:	bf00      	nop
 800fd66:	e7fd      	b.n	800fd64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fd68:	4b3e      	ldr	r3, [pc, #248]	@ (800fe64 <xPortStartScheduler+0x124>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	4a3f      	ldr	r2, [pc, #252]	@ (800fe6c <xPortStartScheduler+0x12c>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d10b      	bne.n	800fd8a <xPortStartScheduler+0x4a>
	__asm volatile
 800fd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd76:	f383 8811 	msr	BASEPRI, r3
 800fd7a:	f3bf 8f6f 	isb	sy
 800fd7e:	f3bf 8f4f 	dsb	sy
 800fd82:	60fb      	str	r3, [r7, #12]
}
 800fd84:	bf00      	nop
 800fd86:	bf00      	nop
 800fd88:	e7fd      	b.n	800fd86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fd8a:	4b39      	ldr	r3, [pc, #228]	@ (800fe70 <xPortStartScheduler+0x130>)
 800fd8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	22ff      	movs	r2, #255	@ 0xff
 800fd9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fda4:	78fb      	ldrb	r3, [r7, #3]
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fdac:	b2da      	uxtb	r2, r3
 800fdae:	4b31      	ldr	r3, [pc, #196]	@ (800fe74 <xPortStartScheduler+0x134>)
 800fdb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fdb2:	4b31      	ldr	r3, [pc, #196]	@ (800fe78 <xPortStartScheduler+0x138>)
 800fdb4:	2207      	movs	r2, #7
 800fdb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdb8:	e009      	b.n	800fdce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fdba:	4b2f      	ldr	r3, [pc, #188]	@ (800fe78 <xPortStartScheduler+0x138>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	3b01      	subs	r3, #1
 800fdc0:	4a2d      	ldr	r2, [pc, #180]	@ (800fe78 <xPortStartScheduler+0x138>)
 800fdc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fdc4:	78fb      	ldrb	r3, [r7, #3]
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	005b      	lsls	r3, r3, #1
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdce:	78fb      	ldrb	r3, [r7, #3]
 800fdd0:	b2db      	uxtb	r3, r3
 800fdd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdd6:	2b80      	cmp	r3, #128	@ 0x80
 800fdd8:	d0ef      	beq.n	800fdba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fdda:	4b27      	ldr	r3, [pc, #156]	@ (800fe78 <xPortStartScheduler+0x138>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f1c3 0307 	rsb	r3, r3, #7
 800fde2:	2b04      	cmp	r3, #4
 800fde4:	d00b      	beq.n	800fdfe <xPortStartScheduler+0xbe>
	__asm volatile
 800fde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdea:	f383 8811 	msr	BASEPRI, r3
 800fdee:	f3bf 8f6f 	isb	sy
 800fdf2:	f3bf 8f4f 	dsb	sy
 800fdf6:	60bb      	str	r3, [r7, #8]
}
 800fdf8:	bf00      	nop
 800fdfa:	bf00      	nop
 800fdfc:	e7fd      	b.n	800fdfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fdfe:	4b1e      	ldr	r3, [pc, #120]	@ (800fe78 <xPortStartScheduler+0x138>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	021b      	lsls	r3, r3, #8
 800fe04:	4a1c      	ldr	r2, [pc, #112]	@ (800fe78 <xPortStartScheduler+0x138>)
 800fe06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe08:	4b1b      	ldr	r3, [pc, #108]	@ (800fe78 <xPortStartScheduler+0x138>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fe10:	4a19      	ldr	r2, [pc, #100]	@ (800fe78 <xPortStartScheduler+0x138>)
 800fe12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	b2da      	uxtb	r2, r3
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe1c:	4b17      	ldr	r3, [pc, #92]	@ (800fe7c <xPortStartScheduler+0x13c>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	4a16      	ldr	r2, [pc, #88]	@ (800fe7c <xPortStartScheduler+0x13c>)
 800fe22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fe26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe28:	4b14      	ldr	r3, [pc, #80]	@ (800fe7c <xPortStartScheduler+0x13c>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	4a13      	ldr	r2, [pc, #76]	@ (800fe7c <xPortStartScheduler+0x13c>)
 800fe2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fe32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe34:	f000 f8da 	bl	800ffec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fe38:	4b11      	ldr	r3, [pc, #68]	@ (800fe80 <xPortStartScheduler+0x140>)
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fe3e:	f000 f8f9 	bl	8010034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe42:	4b10      	ldr	r3, [pc, #64]	@ (800fe84 <xPortStartScheduler+0x144>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a0f      	ldr	r2, [pc, #60]	@ (800fe84 <xPortStartScheduler+0x144>)
 800fe48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fe4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fe4e:	f7ff ff63 	bl	800fd18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fe52:	f7fe fd15 	bl	800e880 <vTaskSwitchContext>
	prvTaskExitError();
 800fe56:	f7ff ff19 	bl	800fc8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fe5a:	2300      	movs	r3, #0
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3718      	adds	r7, #24
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	e000ed00 	.word	0xe000ed00
 800fe68:	410fc271 	.word	0x410fc271
 800fe6c:	410fc270 	.word	0x410fc270
 800fe70:	e000e400 	.word	0xe000e400
 800fe74:	240025a0 	.word	0x240025a0
 800fe78:	240025a4 	.word	0x240025a4
 800fe7c:	e000ed20 	.word	0xe000ed20
 800fe80:	24000010 	.word	0x24000010
 800fe84:	e000ef34 	.word	0xe000ef34

0800fe88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b083      	sub	sp, #12
 800fe8c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe92:	f383 8811 	msr	BASEPRI, r3
 800fe96:	f3bf 8f6f 	isb	sy
 800fe9a:	f3bf 8f4f 	dsb	sy
 800fe9e:	607b      	str	r3, [r7, #4]
}
 800fea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fea2:	4b10      	ldr	r3, [pc, #64]	@ (800fee4 <vPortEnterCritical+0x5c>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	3301      	adds	r3, #1
 800fea8:	4a0e      	ldr	r2, [pc, #56]	@ (800fee4 <vPortEnterCritical+0x5c>)
 800feaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800feac:	4b0d      	ldr	r3, [pc, #52]	@ (800fee4 <vPortEnterCritical+0x5c>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d110      	bne.n	800fed6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800feb4:	4b0c      	ldr	r3, [pc, #48]	@ (800fee8 <vPortEnterCritical+0x60>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	2b00      	cmp	r3, #0
 800febc:	d00b      	beq.n	800fed6 <vPortEnterCritical+0x4e>
	__asm volatile
 800febe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fec2:	f383 8811 	msr	BASEPRI, r3
 800fec6:	f3bf 8f6f 	isb	sy
 800feca:	f3bf 8f4f 	dsb	sy
 800fece:	603b      	str	r3, [r7, #0]
}
 800fed0:	bf00      	nop
 800fed2:	bf00      	nop
 800fed4:	e7fd      	b.n	800fed2 <vPortEnterCritical+0x4a>
	}
}
 800fed6:	bf00      	nop
 800fed8:	370c      	adds	r7, #12
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr
 800fee2:	bf00      	nop
 800fee4:	24000010 	.word	0x24000010
 800fee8:	e000ed04 	.word	0xe000ed04

0800feec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800feec:	b480      	push	{r7}
 800feee:	b083      	sub	sp, #12
 800fef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fef2:	4b12      	ldr	r3, [pc, #72]	@ (800ff3c <vPortExitCritical+0x50>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d10b      	bne.n	800ff12 <vPortExitCritical+0x26>
	__asm volatile
 800fefa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fefe:	f383 8811 	msr	BASEPRI, r3
 800ff02:	f3bf 8f6f 	isb	sy
 800ff06:	f3bf 8f4f 	dsb	sy
 800ff0a:	607b      	str	r3, [r7, #4]
}
 800ff0c:	bf00      	nop
 800ff0e:	bf00      	nop
 800ff10:	e7fd      	b.n	800ff0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ff12:	4b0a      	ldr	r3, [pc, #40]	@ (800ff3c <vPortExitCritical+0x50>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	3b01      	subs	r3, #1
 800ff18:	4a08      	ldr	r2, [pc, #32]	@ (800ff3c <vPortExitCritical+0x50>)
 800ff1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff1c:	4b07      	ldr	r3, [pc, #28]	@ (800ff3c <vPortExitCritical+0x50>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d105      	bne.n	800ff30 <vPortExitCritical+0x44>
 800ff24:	2300      	movs	r3, #0
 800ff26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	f383 8811 	msr	BASEPRI, r3
}
 800ff2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff30:	bf00      	nop
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr
 800ff3c:	24000010 	.word	0x24000010

0800ff40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ff40:	f3ef 8009 	mrs	r0, PSP
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	4b15      	ldr	r3, [pc, #84]	@ (800ffa0 <pxCurrentTCBConst>)
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	f01e 0f10 	tst.w	lr, #16
 800ff50:	bf08      	it	eq
 800ff52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ff56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5a:	6010      	str	r0, [r2, #0]
 800ff5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ff60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ff64:	f380 8811 	msr	BASEPRI, r0
 800ff68:	f3bf 8f4f 	dsb	sy
 800ff6c:	f3bf 8f6f 	isb	sy
 800ff70:	f7fe fc86 	bl	800e880 <vTaskSwitchContext>
 800ff74:	f04f 0000 	mov.w	r0, #0
 800ff78:	f380 8811 	msr	BASEPRI, r0
 800ff7c:	bc09      	pop	{r0, r3}
 800ff7e:	6819      	ldr	r1, [r3, #0]
 800ff80:	6808      	ldr	r0, [r1, #0]
 800ff82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff86:	f01e 0f10 	tst.w	lr, #16
 800ff8a:	bf08      	it	eq
 800ff8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ff90:	f380 8809 	msr	PSP, r0
 800ff94:	f3bf 8f6f 	isb	sy
 800ff98:	4770      	bx	lr
 800ff9a:	bf00      	nop
 800ff9c:	f3af 8000 	nop.w

0800ffa0 <pxCurrentTCBConst>:
 800ffa0:	24001f74 	.word	0x24001f74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ffa4:	bf00      	nop
 800ffa6:	bf00      	nop

0800ffa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
	__asm volatile
 800ffae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffb2:	f383 8811 	msr	BASEPRI, r3
 800ffb6:	f3bf 8f6f 	isb	sy
 800ffba:	f3bf 8f4f 	dsb	sy
 800ffbe:	607b      	str	r3, [r7, #4]
}
 800ffc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ffc2:	f7fe fba3 	bl	800e70c <xTaskIncrementTick>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d003      	beq.n	800ffd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ffcc:	4b06      	ldr	r3, [pc, #24]	@ (800ffe8 <xPortSysTickHandler+0x40>)
 800ffce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffd2:	601a      	str	r2, [r3, #0]
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	f383 8811 	msr	BASEPRI, r3
}
 800ffde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ffe0:	bf00      	nop
 800ffe2:	3708      	adds	r7, #8
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	e000ed04 	.word	0xe000ed04

0800ffec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ffec:	b480      	push	{r7}
 800ffee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fff0:	4b0b      	ldr	r3, [pc, #44]	@ (8010020 <vPortSetupTimerInterrupt+0x34>)
 800fff2:	2200      	movs	r2, #0
 800fff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fff6:	4b0b      	ldr	r3, [pc, #44]	@ (8010024 <vPortSetupTimerInterrupt+0x38>)
 800fff8:	2200      	movs	r2, #0
 800fffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fffc:	4b0a      	ldr	r3, [pc, #40]	@ (8010028 <vPortSetupTimerInterrupt+0x3c>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4a0a      	ldr	r2, [pc, #40]	@ (801002c <vPortSetupTimerInterrupt+0x40>)
 8010002:	fba2 2303 	umull	r2, r3, r2, r3
 8010006:	099b      	lsrs	r3, r3, #6
 8010008:	4a09      	ldr	r2, [pc, #36]	@ (8010030 <vPortSetupTimerInterrupt+0x44>)
 801000a:	3b01      	subs	r3, #1
 801000c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801000e:	4b04      	ldr	r3, [pc, #16]	@ (8010020 <vPortSetupTimerInterrupt+0x34>)
 8010010:	2207      	movs	r2, #7
 8010012:	601a      	str	r2, [r3, #0]
}
 8010014:	bf00      	nop
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr
 801001e:	bf00      	nop
 8010020:	e000e010 	.word	0xe000e010
 8010024:	e000e018 	.word	0xe000e018
 8010028:	24000000 	.word	0x24000000
 801002c:	10624dd3 	.word	0x10624dd3
 8010030:	e000e014 	.word	0xe000e014

08010034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010034:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010044 <vPortEnableVFP+0x10>
 8010038:	6801      	ldr	r1, [r0, #0]
 801003a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801003e:	6001      	str	r1, [r0, #0]
 8010040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010042:	bf00      	nop
 8010044:	e000ed88 	.word	0xe000ed88

08010048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010048:	b480      	push	{r7}
 801004a:	b085      	sub	sp, #20
 801004c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801004e:	f3ef 8305 	mrs	r3, IPSR
 8010052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	2b0f      	cmp	r3, #15
 8010058:	d915      	bls.n	8010086 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801005a:	4a18      	ldr	r2, [pc, #96]	@ (80100bc <vPortValidateInterruptPriority+0x74>)
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	4413      	add	r3, r2
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010064:	4b16      	ldr	r3, [pc, #88]	@ (80100c0 <vPortValidateInterruptPriority+0x78>)
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	7afa      	ldrb	r2, [r7, #11]
 801006a:	429a      	cmp	r2, r3
 801006c:	d20b      	bcs.n	8010086 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801006e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010072:	f383 8811 	msr	BASEPRI, r3
 8010076:	f3bf 8f6f 	isb	sy
 801007a:	f3bf 8f4f 	dsb	sy
 801007e:	607b      	str	r3, [r7, #4]
}
 8010080:	bf00      	nop
 8010082:	bf00      	nop
 8010084:	e7fd      	b.n	8010082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010086:	4b0f      	ldr	r3, [pc, #60]	@ (80100c4 <vPortValidateInterruptPriority+0x7c>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801008e:	4b0e      	ldr	r3, [pc, #56]	@ (80100c8 <vPortValidateInterruptPriority+0x80>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	429a      	cmp	r2, r3
 8010094:	d90b      	bls.n	80100ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801009a:	f383 8811 	msr	BASEPRI, r3
 801009e:	f3bf 8f6f 	isb	sy
 80100a2:	f3bf 8f4f 	dsb	sy
 80100a6:	603b      	str	r3, [r7, #0]
}
 80100a8:	bf00      	nop
 80100aa:	bf00      	nop
 80100ac:	e7fd      	b.n	80100aa <vPortValidateInterruptPriority+0x62>
	}
 80100ae:	bf00      	nop
 80100b0:	3714      	adds	r7, #20
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr
 80100ba:	bf00      	nop
 80100bc:	e000e3f0 	.word	0xe000e3f0
 80100c0:	240025a0 	.word	0x240025a0
 80100c4:	e000ed0c 	.word	0xe000ed0c
 80100c8:	240025a4 	.word	0x240025a4

080100cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b08a      	sub	sp, #40	@ 0x28
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80100d4:	2300      	movs	r3, #0
 80100d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80100d8:	f7fe fa4a 	bl	800e570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80100dc:	4b5c      	ldr	r3, [pc, #368]	@ (8010250 <pvPortMalloc+0x184>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d101      	bne.n	80100e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80100e4:	f000 f924 	bl	8010330 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80100e8:	4b5a      	ldr	r3, [pc, #360]	@ (8010254 <pvPortMalloc+0x188>)
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	4013      	ands	r3, r2
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	f040 8095 	bne.w	8010220 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d01e      	beq.n	801013a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80100fc:	2208      	movs	r2, #8
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	4413      	add	r3, r2
 8010102:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f003 0307 	and.w	r3, r3, #7
 801010a:	2b00      	cmp	r3, #0
 801010c:	d015      	beq.n	801013a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f023 0307 	bic.w	r3, r3, #7
 8010114:	3308      	adds	r3, #8
 8010116:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f003 0307 	and.w	r3, r3, #7
 801011e:	2b00      	cmp	r3, #0
 8010120:	d00b      	beq.n	801013a <pvPortMalloc+0x6e>
	__asm volatile
 8010122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010126:	f383 8811 	msr	BASEPRI, r3
 801012a:	f3bf 8f6f 	isb	sy
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	617b      	str	r3, [r7, #20]
}
 8010134:	bf00      	nop
 8010136:	bf00      	nop
 8010138:	e7fd      	b.n	8010136 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d06f      	beq.n	8010220 <pvPortMalloc+0x154>
 8010140:	4b45      	ldr	r3, [pc, #276]	@ (8010258 <pvPortMalloc+0x18c>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	429a      	cmp	r2, r3
 8010148:	d86a      	bhi.n	8010220 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801014a:	4b44      	ldr	r3, [pc, #272]	@ (801025c <pvPortMalloc+0x190>)
 801014c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801014e:	4b43      	ldr	r3, [pc, #268]	@ (801025c <pvPortMalloc+0x190>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010154:	e004      	b.n	8010160 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801015a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	429a      	cmp	r2, r3
 8010168:	d903      	bls.n	8010172 <pvPortMalloc+0xa6>
 801016a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d1f1      	bne.n	8010156 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010172:	4b37      	ldr	r3, [pc, #220]	@ (8010250 <pvPortMalloc+0x184>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010178:	429a      	cmp	r2, r3
 801017a:	d051      	beq.n	8010220 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801017c:	6a3b      	ldr	r3, [r7, #32]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2208      	movs	r2, #8
 8010182:	4413      	add	r3, r2
 8010184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010188:	681a      	ldr	r2, [r3, #0]
 801018a:	6a3b      	ldr	r3, [r7, #32]
 801018c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801018e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010190:	685a      	ldr	r2, [r3, #4]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	1ad2      	subs	r2, r2, r3
 8010196:	2308      	movs	r3, #8
 8010198:	005b      	lsls	r3, r3, #1
 801019a:	429a      	cmp	r2, r3
 801019c:	d920      	bls.n	80101e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801019e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	4413      	add	r3, r2
 80101a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80101a6:	69bb      	ldr	r3, [r7, #24]
 80101a8:	f003 0307 	and.w	r3, r3, #7
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00b      	beq.n	80101c8 <pvPortMalloc+0xfc>
	__asm volatile
 80101b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101b4:	f383 8811 	msr	BASEPRI, r3
 80101b8:	f3bf 8f6f 	isb	sy
 80101bc:	f3bf 8f4f 	dsb	sy
 80101c0:	613b      	str	r3, [r7, #16]
}
 80101c2:	bf00      	nop
 80101c4:	bf00      	nop
 80101c6:	e7fd      	b.n	80101c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80101c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ca:	685a      	ldr	r2, [r3, #4]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	1ad2      	subs	r2, r2, r3
 80101d0:	69bb      	ldr	r3, [r7, #24]
 80101d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80101d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80101da:	69b8      	ldr	r0, [r7, #24]
 80101dc:	f000 f90c 	bl	80103f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80101e0:	4b1d      	ldr	r3, [pc, #116]	@ (8010258 <pvPortMalloc+0x18c>)
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	1ad3      	subs	r3, r2, r3
 80101ea:	4a1b      	ldr	r2, [pc, #108]	@ (8010258 <pvPortMalloc+0x18c>)
 80101ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80101ee:	4b1a      	ldr	r3, [pc, #104]	@ (8010258 <pvPortMalloc+0x18c>)
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010260 <pvPortMalloc+0x194>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d203      	bcs.n	8010202 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80101fa:	4b17      	ldr	r3, [pc, #92]	@ (8010258 <pvPortMalloc+0x18c>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	4a18      	ldr	r2, [pc, #96]	@ (8010260 <pvPortMalloc+0x194>)
 8010200:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010204:	685a      	ldr	r2, [r3, #4]
 8010206:	4b13      	ldr	r3, [pc, #76]	@ (8010254 <pvPortMalloc+0x188>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	431a      	orrs	r2, r3
 801020c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801020e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010212:	2200      	movs	r2, #0
 8010214:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010216:	4b13      	ldr	r3, [pc, #76]	@ (8010264 <pvPortMalloc+0x198>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	3301      	adds	r3, #1
 801021c:	4a11      	ldr	r2, [pc, #68]	@ (8010264 <pvPortMalloc+0x198>)
 801021e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010220:	f7fe f9b4 	bl	800e58c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	f003 0307 	and.w	r3, r3, #7
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00b      	beq.n	8010246 <pvPortMalloc+0x17a>
	__asm volatile
 801022e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010232:	f383 8811 	msr	BASEPRI, r3
 8010236:	f3bf 8f6f 	isb	sy
 801023a:	f3bf 8f4f 	dsb	sy
 801023e:	60fb      	str	r3, [r7, #12]
}
 8010240:	bf00      	nop
 8010242:	bf00      	nop
 8010244:	e7fd      	b.n	8010242 <pvPortMalloc+0x176>
	return pvReturn;
 8010246:	69fb      	ldr	r3, [r7, #28]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3728      	adds	r7, #40	@ 0x28
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	240332f0 	.word	0x240332f0
 8010254:	24033304 	.word	0x24033304
 8010258:	240332f4 	.word	0x240332f4
 801025c:	240332e8 	.word	0x240332e8
 8010260:	240332f8 	.word	0x240332f8
 8010264:	240332fc 	.word	0x240332fc

08010268 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b086      	sub	sp, #24
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d04f      	beq.n	801031a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801027a:	2308      	movs	r3, #8
 801027c:	425b      	negs	r3, r3
 801027e:	697a      	ldr	r2, [r7, #20]
 8010280:	4413      	add	r3, r2
 8010282:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	685a      	ldr	r2, [r3, #4]
 801028c:	4b25      	ldr	r3, [pc, #148]	@ (8010324 <vPortFree+0xbc>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4013      	ands	r3, r2
 8010292:	2b00      	cmp	r3, #0
 8010294:	d10b      	bne.n	80102ae <vPortFree+0x46>
	__asm volatile
 8010296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801029a:	f383 8811 	msr	BASEPRI, r3
 801029e:	f3bf 8f6f 	isb	sy
 80102a2:	f3bf 8f4f 	dsb	sy
 80102a6:	60fb      	str	r3, [r7, #12]
}
 80102a8:	bf00      	nop
 80102aa:	bf00      	nop
 80102ac:	e7fd      	b.n	80102aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d00b      	beq.n	80102ce <vPortFree+0x66>
	__asm volatile
 80102b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ba:	f383 8811 	msr	BASEPRI, r3
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	60bb      	str	r3, [r7, #8]
}
 80102c8:	bf00      	nop
 80102ca:	bf00      	nop
 80102cc:	e7fd      	b.n	80102ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	685a      	ldr	r2, [r3, #4]
 80102d2:	4b14      	ldr	r3, [pc, #80]	@ (8010324 <vPortFree+0xbc>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	4013      	ands	r3, r2
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d01e      	beq.n	801031a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d11a      	bne.n	801031a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	685a      	ldr	r2, [r3, #4]
 80102e8:	4b0e      	ldr	r3, [pc, #56]	@ (8010324 <vPortFree+0xbc>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	43db      	mvns	r3, r3
 80102ee:	401a      	ands	r2, r3
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80102f4:	f7fe f93c 	bl	800e570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	685a      	ldr	r2, [r3, #4]
 80102fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010328 <vPortFree+0xc0>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	4413      	add	r3, r2
 8010302:	4a09      	ldr	r2, [pc, #36]	@ (8010328 <vPortFree+0xc0>)
 8010304:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010306:	6938      	ldr	r0, [r7, #16]
 8010308:	f000 f876 	bl	80103f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801030c:	4b07      	ldr	r3, [pc, #28]	@ (801032c <vPortFree+0xc4>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	3301      	adds	r3, #1
 8010312:	4a06      	ldr	r2, [pc, #24]	@ (801032c <vPortFree+0xc4>)
 8010314:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010316:	f7fe f939 	bl	800e58c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801031a:	bf00      	nop
 801031c:	3718      	adds	r7, #24
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	24033304 	.word	0x24033304
 8010328:	240332f4 	.word	0x240332f4
 801032c:	24033300 	.word	0x24033300

08010330 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010330:	b480      	push	{r7}
 8010332:	b085      	sub	sp, #20
 8010334:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010336:	4b29      	ldr	r3, [pc, #164]	@ (80103dc <prvHeapInit+0xac>)
 8010338:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801033a:	4b29      	ldr	r3, [pc, #164]	@ (80103e0 <prvHeapInit+0xb0>)
 801033c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	f003 0307 	and.w	r3, r3, #7
 8010344:	2b00      	cmp	r3, #0
 8010346:	d00c      	beq.n	8010362 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	3307      	adds	r3, #7
 801034c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f023 0307 	bic.w	r3, r3, #7
 8010354:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010356:	68ba      	ldr	r2, [r7, #8]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	4a20      	ldr	r2, [pc, #128]	@ (80103e0 <prvHeapInit+0xb0>)
 801035e:	4413      	add	r3, r2
 8010360:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010366:	4a1f      	ldr	r2, [pc, #124]	@ (80103e4 <prvHeapInit+0xb4>)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801036c:	4b1d      	ldr	r3, [pc, #116]	@ (80103e4 <prvHeapInit+0xb4>)
 801036e:	2200      	movs	r2, #0
 8010370:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	68ba      	ldr	r2, [r7, #8]
 8010376:	4413      	add	r3, r2
 8010378:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801037a:	2208      	movs	r2, #8
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	1a9b      	subs	r3, r3, r2
 8010380:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f023 0307 	bic.w	r3, r3, #7
 8010388:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	4a16      	ldr	r2, [pc, #88]	@ (80103e8 <prvHeapInit+0xb8>)
 801038e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010390:	4b15      	ldr	r3, [pc, #84]	@ (80103e8 <prvHeapInit+0xb8>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2200      	movs	r2, #0
 8010396:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010398:	4b13      	ldr	r3, [pc, #76]	@ (80103e8 <prvHeapInit+0xb8>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	2200      	movs	r2, #0
 801039e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	68fa      	ldr	r2, [r7, #12]
 80103a8:	1ad2      	subs	r2, r2, r3
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80103ae:	4b0e      	ldr	r3, [pc, #56]	@ (80103e8 <prvHeapInit+0xb8>)
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	4a0c      	ldr	r2, [pc, #48]	@ (80103ec <prvHeapInit+0xbc>)
 80103bc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	4a0b      	ldr	r2, [pc, #44]	@ (80103f0 <prvHeapInit+0xc0>)
 80103c4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80103c6:	4b0b      	ldr	r3, [pc, #44]	@ (80103f4 <prvHeapInit+0xc4>)
 80103c8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80103cc:	601a      	str	r2, [r3, #0]
}
 80103ce:	bf00      	nop
 80103d0:	3714      	adds	r7, #20
 80103d2:	46bd      	mov	sp, r7
 80103d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	00030d40 	.word	0x00030d40
 80103e0:	240025a8 	.word	0x240025a8
 80103e4:	240332e8 	.word	0x240332e8
 80103e8:	240332f0 	.word	0x240332f0
 80103ec:	240332f8 	.word	0x240332f8
 80103f0:	240332f4 	.word	0x240332f4
 80103f4:	24033304 	.word	0x24033304

080103f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80103f8:	b480      	push	{r7}
 80103fa:	b085      	sub	sp, #20
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010400:	4b28      	ldr	r3, [pc, #160]	@ (80104a4 <prvInsertBlockIntoFreeList+0xac>)
 8010402:	60fb      	str	r3, [r7, #12]
 8010404:	e002      	b.n	801040c <prvInsertBlockIntoFreeList+0x14>
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	60fb      	str	r3, [r7, #12]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	429a      	cmp	r2, r3
 8010414:	d8f7      	bhi.n	8010406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	685b      	ldr	r3, [r3, #4]
 801041e:	68ba      	ldr	r2, [r7, #8]
 8010420:	4413      	add	r3, r2
 8010422:	687a      	ldr	r2, [r7, #4]
 8010424:	429a      	cmp	r2, r3
 8010426:	d108      	bne.n	801043a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	685a      	ldr	r2, [r3, #4]
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	441a      	add	r2, r3
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	68ba      	ldr	r2, [r7, #8]
 8010444:	441a      	add	r2, r3
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	429a      	cmp	r2, r3
 801044c:	d118      	bne.n	8010480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	4b15      	ldr	r3, [pc, #84]	@ (80104a8 <prvInsertBlockIntoFreeList+0xb0>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	429a      	cmp	r2, r3
 8010458:	d00d      	beq.n	8010476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	685a      	ldr	r2, [r3, #4]
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	441a      	add	r2, r3
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	681a      	ldr	r2, [r3, #0]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	601a      	str	r2, [r3, #0]
 8010474:	e008      	b.n	8010488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010476:	4b0c      	ldr	r3, [pc, #48]	@ (80104a8 <prvInsertBlockIntoFreeList+0xb0>)
 8010478:	681a      	ldr	r2, [r3, #0]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	601a      	str	r2, [r3, #0]
 801047e:	e003      	b.n	8010488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681a      	ldr	r2, [r3, #0]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010488:	68fa      	ldr	r2, [r7, #12]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	429a      	cmp	r2, r3
 801048e:	d002      	beq.n	8010496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010496:	bf00      	nop
 8010498:	3714      	adds	r7, #20
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	240332e8 	.word	0x240332e8
 80104a8:	240332f0 	.word	0x240332f0

080104ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 80104ac:	4a02      	ldr	r2, [pc, #8]	@ (80104b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0xc>)
 80104ae:	4b03      	ldr	r3, [pc, #12]	@ (80104bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x10>)
 80104b0:	6812      	ldr	r2, [r2, #0]
 80104b2:	601a      	str	r2, [r3, #0]
 80104b4:	4770      	bx	lr
 80104b6:	bf00      	nop
 80104b8:	24000d28 	.word	0x24000d28
 80104bc:	2400001c 	.word	0x2400001c

080104c0 <autoware_auto_control_msgs__msg__AckermannControlCommand__rosidl_typesupport_introspection_c__AckermannControlCommand_init_function>:
 80104c0:	f002 bb58 	b.w	8012b74 <autoware_auto_control_msgs__msg__AckermannControlCommand__init>

080104c4 <autoware_auto_control_msgs__msg__AckermannControlCommand__rosidl_typesupport_introspection_c__AckermannControlCommand_fini_function>:
 80104c4:	f002 bb94 	b.w	8012bf0 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini>

080104c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 80104c8:	b510      	push	{r4, lr}
 80104ca:	4c0a      	ldr	r4, [pc, #40]	@ (80104f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x2c>)
 80104cc:	f000 fff4 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80104d0:	60e0      	str	r0, [r4, #12]
 80104d2:	f000 f819 	bl	8010508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 80104d6:	64a0      	str	r0, [r4, #72]	@ 0x48
 80104d8:	f000 f830 	bl	801053c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 80104dc:	4b06      	ldr	r3, [pc, #24]	@ (80104f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 80104de:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	b10a      	cbz	r2, 80104ea <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x22>
 80104e6:	4804      	ldr	r0, [pc, #16]	@ (80104f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 80104e8:	bd10      	pop	{r4, pc}
 80104ea:	4a04      	ldr	r2, [pc, #16]	@ (80104fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x34>)
 80104ec:	4802      	ldr	r0, [pc, #8]	@ (80104f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 80104ee:	6812      	ldr	r2, [r2, #0]
 80104f0:	601a      	str	r2, [r3, #0]
 80104f2:	bd10      	pop	{r4, pc}
 80104f4:	24000028 	.word	0x24000028
 80104f8:	240000dc 	.word	0x240000dc
 80104fc:	24000d2c 	.word	0x24000d2c

08010500 <autoware_auto_control_msgs__msg__AckermannLateralCommand__rosidl_typesupport_introspection_c__AckermannLateralCommand_init_function>:
 8010500:	f002 bb86 	b.w	8012c10 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>

08010504 <autoware_auto_control_msgs__msg__AckermannLateralCommand__rosidl_typesupport_introspection_c__AckermannLateralCommand_fini_function>:
 8010504:	f002 bb98 	b.w	8012c38 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>

08010508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8010508:	b508      	push	{r3, lr}
 801050a:	f000 ffd5 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801050e:	4b06      	ldr	r3, [pc, #24]	@ (8010528 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8010510:	4906      	ldr	r1, [pc, #24]	@ (801052c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x24>)
 8010512:	681a      	ldr	r2, [r3, #0]
 8010514:	60c8      	str	r0, [r1, #12]
 8010516:	b10a      	cbz	r2, 801051c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x14>
 8010518:	4803      	ldr	r0, [pc, #12]	@ (8010528 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 801051a:	bd08      	pop	{r3, pc}
 801051c:	4a04      	ldr	r2, [pc, #16]	@ (8010530 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x28>)
 801051e:	4802      	ldr	r0, [pc, #8]	@ (8010528 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8010520:	6812      	ldr	r2, [r2, #0]
 8010522:	601a      	str	r2, [r3, #0]
 8010524:	bd08      	pop	{r3, pc}
 8010526:	bf00      	nop
 8010528:	2400019c 	.word	0x2400019c
 801052c:	240000e8 	.word	0x240000e8
 8010530:	24000d2c 	.word	0x24000d2c

08010534 <autoware_auto_control_msgs__msg__LongitudinalCommand__rosidl_typesupport_introspection_c__LongitudinalCommand_init_function>:
 8010534:	f002 bb84 	b.w	8012c40 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>

08010538 <autoware_auto_control_msgs__msg__LongitudinalCommand__rosidl_typesupport_introspection_c__LongitudinalCommand_fini_function>:
 8010538:	f002 bb98 	b.w	8012c6c <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>

0801053c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>:
 801053c:	b508      	push	{r3, lr}
 801053e:	f000 ffbb 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010542:	4b06      	ldr	r3, [pc, #24]	@ (801055c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8010544:	4906      	ldr	r1, [pc, #24]	@ (8010560 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x24>)
 8010546:	681a      	ldr	r2, [r3, #0]
 8010548:	60c8      	str	r0, [r1, #12]
 801054a:	b10a      	cbz	r2, 8010550 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x14>
 801054c:	4803      	ldr	r0, [pc, #12]	@ (801055c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 801054e:	bd08      	pop	{r3, pc}
 8010550:	4a04      	ldr	r2, [pc, #16]	@ (8010564 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x28>)
 8010552:	4802      	ldr	r0, [pc, #8]	@ (801055c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8010554:	6812      	ldr	r2, [r2, #0]
 8010556:	601a      	str	r2, [r3, #0]
 8010558:	bd08      	pop	{r3, pc}
 801055a:	bf00      	nop
 801055c:	24000298 	.word	0x24000298
 8010560:	240001a8 	.word	0x240001a8
 8010564:	24000d2c 	.word	0x24000d2c

08010568 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8010568:	b570      	push	{r4, r5, r6, lr}
 801056a:	4604      	mov	r4, r0
 801056c:	b190      	cbz	r0, 8010594 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannControlCommand+0x2c>
 801056e:	460e      	mov	r6, r1
 8010570:	f000 ffb0 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010574:	4605      	mov	r5, r0
 8010576:	f104 0008 	add.w	r0, r4, #8
 801057a:	4435      	add	r5, r6
 801057c:	4629      	mov	r1, r5
 801057e:	f000 f885 	bl	801068c <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8010582:	4601      	mov	r1, r0
 8010584:	f104 0018 	add.w	r0, r4, #24
 8010588:	440d      	add	r5, r1
 801058a:	4629      	mov	r1, r5
 801058c:	f000 f90e 	bl	80107ac <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8010590:	1b80      	subs	r0, r0, r6
 8010592:	4428      	add	r0, r5
 8010594:	bd70      	pop	{r4, r5, r6, pc}
 8010596:	bf00      	nop

08010598 <_AckermannControlCommand__cdr_deserialize>:
 8010598:	b570      	push	{r4, r5, r6, lr}
 801059a:	460c      	mov	r4, r1
 801059c:	b1e1      	cbz	r1, 80105d8 <_AckermannControlCommand__cdr_deserialize+0x40>
 801059e:	4605      	mov	r5, r0
 80105a0:	f000 fffc 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80105a4:	4603      	mov	r3, r0
 80105a6:	4621      	mov	r1, r4
 80105a8:	4628      	mov	r0, r5
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	4798      	blx	r3
 80105b0:	f000 f8f8 	bl	80107a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 80105b4:	4603      	mov	r3, r0
 80105b6:	f104 0108 	add.w	r1, r4, #8
 80105ba:	4628      	mov	r0, r5
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	4798      	blx	r3
 80105c2:	f000 f9a1 	bl	8010908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 80105c6:	4603      	mov	r3, r0
 80105c8:	f104 0118 	add.w	r1, r4, #24
 80105cc:	4628      	mov	r0, r5
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	4718      	bx	r3
 80105d8:	4608      	mov	r0, r1
 80105da:	bd70      	pop	{r4, r5, r6, pc}

080105dc <_AckermannControlCommand__cdr_serialize>:
 80105dc:	b510      	push	{r4, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	9101      	str	r1, [sp, #4]
 80105e2:	b1e8      	cbz	r0, 8010620 <_AckermannControlCommand__cdr_serialize+0x44>
 80105e4:	4604      	mov	r4, r0
 80105e6:	f000 ffd9 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80105ea:	4603      	mov	r3, r0
 80105ec:	9901      	ldr	r1, [sp, #4]
 80105ee:	4620      	mov	r0, r4
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	689b      	ldr	r3, [r3, #8]
 80105f4:	4798      	blx	r3
 80105f6:	f000 f8d5 	bl	80107a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 80105fa:	4603      	mov	r3, r0
 80105fc:	9901      	ldr	r1, [sp, #4]
 80105fe:	f104 0008 	add.w	r0, r4, #8
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	689b      	ldr	r3, [r3, #8]
 8010606:	4798      	blx	r3
 8010608:	f000 f97e 	bl	8010908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 801060c:	4603      	mov	r3, r0
 801060e:	9901      	ldr	r1, [sp, #4]
 8010610:	f104 0018 	add.w	r0, r4, #24
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	689b      	ldr	r3, [r3, #8]
 8010618:	b002      	add	sp, #8
 801061a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801061e:	4718      	bx	r3
 8010620:	b002      	add	sp, #8
 8010622:	bd10      	pop	{r4, pc}

08010624 <_AckermannControlCommand__get_serialized_size>:
 8010624:	b538      	push	{r3, r4, r5, lr}
 8010626:	4604      	mov	r4, r0
 8010628:	b180      	cbz	r0, 801064c <_AckermannControlCommand__get_serialized_size+0x28>
 801062a:	2100      	movs	r1, #0
 801062c:	f000 ff52 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010630:	4605      	mov	r5, r0
 8010632:	f104 0008 	add.w	r0, r4, #8
 8010636:	4629      	mov	r1, r5
 8010638:	f000 f828 	bl	801068c <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 801063c:	4601      	mov	r1, r0
 801063e:	f104 0018 	add.w	r0, r4, #24
 8010642:	440d      	add	r5, r1
 8010644:	4629      	mov	r1, r5
 8010646:	f000 f8b1 	bl	80107ac <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 801064a:	4428      	add	r0, r5
 801064c:	bd38      	pop	{r3, r4, r5, pc}
 801064e:	bf00      	nop

08010650 <_AckermannControlCommand__max_serialized_size>:
 8010650:	b510      	push	{r4, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	2301      	movs	r3, #1
 8010656:	2100      	movs	r1, #0
 8010658:	f10d 0007 	add.w	r0, sp, #7
 801065c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010660:	f000 ff88 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 8010664:	4604      	mov	r4, r0
 8010666:	f10d 0007 	add.w	r0, sp, #7
 801066a:	4621      	mov	r1, r4
 801066c:	f000 f884 	bl	8010778 <max_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8010670:	4601      	mov	r1, r0
 8010672:	f10d 0007 	add.w	r0, sp, #7
 8010676:	440c      	add	r4, r1
 8010678:	4621      	mov	r1, r4
 801067a:	f000 f929 	bl	80108d0 <max_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 801067e:	4420      	add	r0, r4
 8010680:	b002      	add	sp, #8
 8010682:	bd10      	pop	{r4, pc}

08010684 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8010684:	4800      	ldr	r0, [pc, #0]	@ (8010688 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x4>)
 8010686:	4770      	bx	lr
 8010688:	240002a4 	.word	0x240002a4

0801068c <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 801068c:	b538      	push	{r3, r4, r5, lr}
 801068e:	b188      	cbz	r0, 80106b4 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand+0x28>
 8010690:	460d      	mov	r5, r1
 8010692:	f000 ff1f 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010696:	2104      	movs	r1, #4
 8010698:	182c      	adds	r4, r5, r0
 801069a:	f1c5 0504 	rsb	r5, r5, #4
 801069e:	4620      	mov	r0, r4
 80106a0:	f001 fe3e 	bl	8012320 <ucdr_alignment>
 80106a4:	2104      	movs	r1, #4
 80106a6:	4408      	add	r0, r1
 80106a8:	4404      	add	r4, r0
 80106aa:	4620      	mov	r0, r4
 80106ac:	f001 fe38 	bl	8012320 <ucdr_alignment>
 80106b0:	4428      	add	r0, r5
 80106b2:	4420      	add	r0, r4
 80106b4:	bd38      	pop	{r3, r4, r5, pc}
 80106b6:	bf00      	nop

080106b8 <_AckermannLateralCommand__cdr_deserialize>:
 80106b8:	b538      	push	{r3, r4, r5, lr}
 80106ba:	460c      	mov	r4, r1
 80106bc:	b1a1      	cbz	r1, 80106e8 <_AckermannLateralCommand__cdr_deserialize+0x30>
 80106be:	4605      	mov	r5, r0
 80106c0:	f000 ff6c 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80106c4:	4603      	mov	r3, r0
 80106c6:	4621      	mov	r1, r4
 80106c8:	4628      	mov	r0, r5
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	68db      	ldr	r3, [r3, #12]
 80106ce:	4798      	blx	r3
 80106d0:	f104 0108 	add.w	r1, r4, #8
 80106d4:	4628      	mov	r0, r5
 80106d6:	f001 fbd5 	bl	8011e84 <ucdr_deserialize_float>
 80106da:	f104 010c 	add.w	r1, r4, #12
 80106de:	4628      	mov	r0, r5
 80106e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106e4:	f001 bbce 	b.w	8011e84 <ucdr_deserialize_float>
 80106e8:	4608      	mov	r0, r1
 80106ea:	bd38      	pop	{r3, r4, r5, pc}

080106ec <_AckermannLateralCommand__cdr_serialize>:
 80106ec:	b1b0      	cbz	r0, 801071c <_AckermannLateralCommand__cdr_serialize+0x30>
 80106ee:	b538      	push	{r3, r4, r5, lr}
 80106f0:	4604      	mov	r4, r0
 80106f2:	460d      	mov	r5, r1
 80106f4:	f000 ff52 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80106f8:	4603      	mov	r3, r0
 80106fa:	4629      	mov	r1, r5
 80106fc:	4620      	mov	r0, r4
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	689b      	ldr	r3, [r3, #8]
 8010702:	4798      	blx	r3
 8010704:	ed94 0a02 	vldr	s0, [r4, #8]
 8010708:	4628      	mov	r0, r5
 801070a:	f001 fb23 	bl	8011d54 <ucdr_serialize_float>
 801070e:	ed94 0a03 	vldr	s0, [r4, #12]
 8010712:	4628      	mov	r0, r5
 8010714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010718:	f001 bb1c 	b.w	8011d54 <ucdr_serialize_float>
 801071c:	4770      	bx	lr
 801071e:	bf00      	nop

08010720 <_AckermannLateralCommand__get_serialized_size>:
 8010720:	b180      	cbz	r0, 8010744 <_AckermannLateralCommand__get_serialized_size+0x24>
 8010722:	2100      	movs	r1, #0
 8010724:	b510      	push	{r4, lr}
 8010726:	f000 fed5 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 801072a:	4604      	mov	r4, r0
 801072c:	2104      	movs	r1, #4
 801072e:	f001 fdf7 	bl	8012320 <ucdr_alignment>
 8010732:	2104      	movs	r1, #4
 8010734:	4420      	add	r0, r4
 8010736:	1844      	adds	r4, r0, r1
 8010738:	4620      	mov	r0, r4
 801073a:	f001 fdf1 	bl	8012320 <ucdr_alignment>
 801073e:	3004      	adds	r0, #4
 8010740:	4420      	add	r0, r4
 8010742:	bd10      	pop	{r4, pc}
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop

08010748 <_AckermannLateralCommand__max_serialized_size>:
 8010748:	b510      	push	{r4, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	2301      	movs	r3, #1
 801074e:	2100      	movs	r1, #0
 8010750:	f10d 0007 	add.w	r0, sp, #7
 8010754:	f88d 3007 	strb.w	r3, [sp, #7]
 8010758:	f000 ff0c 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 801075c:	4604      	mov	r4, r0
 801075e:	2104      	movs	r1, #4
 8010760:	f001 fdde 	bl	8012320 <ucdr_alignment>
 8010764:	2104      	movs	r1, #4
 8010766:	4420      	add	r0, r4
 8010768:	1844      	adds	r4, r0, r1
 801076a:	4620      	mov	r0, r4
 801076c:	f001 fdd8 	bl	8012320 <ucdr_alignment>
 8010770:	3004      	adds	r0, #4
 8010772:	4420      	add	r0, r4
 8010774:	b002      	add	sp, #8
 8010776:	bd10      	pop	{r4, pc}

08010778 <max_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8010778:	2301      	movs	r3, #1
 801077a:	b570      	push	{r4, r5, r6, lr}
 801077c:	460c      	mov	r4, r1
 801077e:	7003      	strb	r3, [r0, #0]
 8010780:	f000 fef8 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 8010784:	2104      	movs	r1, #4
 8010786:	1826      	adds	r6, r4, r0
 8010788:	f1c4 0404 	rsb	r4, r4, #4
 801078c:	4630      	mov	r0, r6
 801078e:	f001 fdc7 	bl	8012320 <ucdr_alignment>
 8010792:	2104      	movs	r1, #4
 8010794:	1845      	adds	r5, r0, r1
 8010796:	4435      	add	r5, r6
 8010798:	4628      	mov	r0, r5
 801079a:	f001 fdc1 	bl	8012320 <ucdr_alignment>
 801079e:	4420      	add	r0, r4
 80107a0:	4428      	add	r0, r5
 80107a2:	bd70      	pop	{r4, r5, r6, pc}

080107a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 80107a4:	4800      	ldr	r0, [pc, #0]	@ (80107a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x4>)
 80107a6:	4770      	bx	lr
 80107a8:	240002cc 	.word	0x240002cc

080107ac <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>:
 80107ac:	b1c8      	cbz	r0, 80107e2 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand+0x36>
 80107ae:	b570      	push	{r4, r5, r6, lr}
 80107b0:	460d      	mov	r5, r1
 80107b2:	f000 fe8f 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 80107b6:	2104      	movs	r1, #4
 80107b8:	182e      	adds	r6, r5, r0
 80107ba:	f1c5 0504 	rsb	r5, r5, #4
 80107be:	4630      	mov	r0, r6
 80107c0:	f001 fdae 	bl	8012320 <ucdr_alignment>
 80107c4:	2104      	movs	r1, #4
 80107c6:	1844      	adds	r4, r0, r1
 80107c8:	4434      	add	r4, r6
 80107ca:	4620      	mov	r0, r4
 80107cc:	f001 fda8 	bl	8012320 <ucdr_alignment>
 80107d0:	2104      	movs	r1, #4
 80107d2:	4408      	add	r0, r1
 80107d4:	4404      	add	r4, r0
 80107d6:	4620      	mov	r0, r4
 80107d8:	f001 fda2 	bl	8012320 <ucdr_alignment>
 80107dc:	4428      	add	r0, r5
 80107de:	4420      	add	r0, r4
 80107e0:	bd70      	pop	{r4, r5, r6, pc}
 80107e2:	4770      	bx	lr

080107e4 <_LongitudinalCommand__cdr_deserialize>:
 80107e4:	b538      	push	{r3, r4, r5, lr}
 80107e6:	460c      	mov	r4, r1
 80107e8:	b1c9      	cbz	r1, 801081e <_LongitudinalCommand__cdr_deserialize+0x3a>
 80107ea:	4605      	mov	r5, r0
 80107ec:	f000 fed6 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80107f0:	4603      	mov	r3, r0
 80107f2:	4621      	mov	r1, r4
 80107f4:	4628      	mov	r0, r5
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	68db      	ldr	r3, [r3, #12]
 80107fa:	4798      	blx	r3
 80107fc:	f104 0108 	add.w	r1, r4, #8
 8010800:	4628      	mov	r0, r5
 8010802:	f001 fb3f 	bl	8011e84 <ucdr_deserialize_float>
 8010806:	f104 010c 	add.w	r1, r4, #12
 801080a:	4628      	mov	r0, r5
 801080c:	f001 fb3a 	bl	8011e84 <ucdr_deserialize_float>
 8010810:	f104 0110 	add.w	r1, r4, #16
 8010814:	4628      	mov	r0, r5
 8010816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801081a:	f001 bb33 	b.w	8011e84 <ucdr_deserialize_float>
 801081e:	4608      	mov	r0, r1
 8010820:	bd38      	pop	{r3, r4, r5, pc}
 8010822:	bf00      	nop

08010824 <_LongitudinalCommand__cdr_serialize>:
 8010824:	b1d8      	cbz	r0, 801085e <_LongitudinalCommand__cdr_serialize+0x3a>
 8010826:	b538      	push	{r3, r4, r5, lr}
 8010828:	4604      	mov	r4, r0
 801082a:	460d      	mov	r5, r1
 801082c:	f000 feb6 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010830:	4603      	mov	r3, r0
 8010832:	4629      	mov	r1, r5
 8010834:	4620      	mov	r0, r4
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	689b      	ldr	r3, [r3, #8]
 801083a:	4798      	blx	r3
 801083c:	ed94 0a02 	vldr	s0, [r4, #8]
 8010840:	4628      	mov	r0, r5
 8010842:	f001 fa87 	bl	8011d54 <ucdr_serialize_float>
 8010846:	ed94 0a03 	vldr	s0, [r4, #12]
 801084a:	4628      	mov	r0, r5
 801084c:	f001 fa82 	bl	8011d54 <ucdr_serialize_float>
 8010850:	ed94 0a04 	vldr	s0, [r4, #16]
 8010854:	4628      	mov	r0, r5
 8010856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801085a:	f001 ba7b 	b.w	8011d54 <ucdr_serialize_float>
 801085e:	4770      	bx	lr

08010860 <_LongitudinalCommand__get_serialized_size>:
 8010860:	b1b0      	cbz	r0, 8010890 <_LongitudinalCommand__get_serialized_size+0x30>
 8010862:	2100      	movs	r1, #0
 8010864:	b510      	push	{r4, lr}
 8010866:	f000 fe35 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 801086a:	4604      	mov	r4, r0
 801086c:	2104      	movs	r1, #4
 801086e:	f001 fd57 	bl	8012320 <ucdr_alignment>
 8010872:	2104      	movs	r1, #4
 8010874:	4420      	add	r0, r4
 8010876:	1844      	adds	r4, r0, r1
 8010878:	4620      	mov	r0, r4
 801087a:	f001 fd51 	bl	8012320 <ucdr_alignment>
 801087e:	2104      	movs	r1, #4
 8010880:	4408      	add	r0, r1
 8010882:	4404      	add	r4, r0
 8010884:	4620      	mov	r0, r4
 8010886:	f001 fd4b 	bl	8012320 <ucdr_alignment>
 801088a:	3004      	adds	r0, #4
 801088c:	4420      	add	r0, r4
 801088e:	bd10      	pop	{r4, pc}
 8010890:	4770      	bx	lr
 8010892:	bf00      	nop

08010894 <_LongitudinalCommand__max_serialized_size>:
 8010894:	b510      	push	{r4, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	2301      	movs	r3, #1
 801089a:	2100      	movs	r1, #0
 801089c:	f10d 0007 	add.w	r0, sp, #7
 80108a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80108a4:	f000 fe66 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 80108a8:	4604      	mov	r4, r0
 80108aa:	2104      	movs	r1, #4
 80108ac:	f001 fd38 	bl	8012320 <ucdr_alignment>
 80108b0:	2104      	movs	r1, #4
 80108b2:	4420      	add	r0, r4
 80108b4:	1844      	adds	r4, r0, r1
 80108b6:	4620      	mov	r0, r4
 80108b8:	f001 fd32 	bl	8012320 <ucdr_alignment>
 80108bc:	2104      	movs	r1, #4
 80108be:	4408      	add	r0, r1
 80108c0:	4404      	add	r4, r0
 80108c2:	4620      	mov	r0, r4
 80108c4:	f001 fd2c 	bl	8012320 <ucdr_alignment>
 80108c8:	3004      	adds	r0, #4
 80108ca:	4420      	add	r0, r4
 80108cc:	b002      	add	sp, #8
 80108ce:	bd10      	pop	{r4, pc}

080108d0 <max_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>:
 80108d0:	2301      	movs	r3, #1
 80108d2:	b570      	push	{r4, r5, r6, lr}
 80108d4:	460c      	mov	r4, r1
 80108d6:	7003      	strb	r3, [r0, #0]
 80108d8:	f000 fe4c 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 80108dc:	2104      	movs	r1, #4
 80108de:	1826      	adds	r6, r4, r0
 80108e0:	f1c4 0404 	rsb	r4, r4, #4
 80108e4:	4630      	mov	r0, r6
 80108e6:	f001 fd1b 	bl	8012320 <ucdr_alignment>
 80108ea:	2104      	movs	r1, #4
 80108ec:	1845      	adds	r5, r0, r1
 80108ee:	4435      	add	r5, r6
 80108f0:	4628      	mov	r0, r5
 80108f2:	f001 fd15 	bl	8012320 <ucdr_alignment>
 80108f6:	2104      	movs	r1, #4
 80108f8:	4408      	add	r0, r1
 80108fa:	4405      	add	r5, r0
 80108fc:	4628      	mov	r0, r5
 80108fe:	f001 fd0f 	bl	8012320 <ucdr_alignment>
 8010902:	4420      	add	r0, r4
 8010904:	4428      	add	r0, r5
 8010906:	bd70      	pop	{r4, r5, r6, pc}

08010908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8010908:	4800      	ldr	r0, [pc, #0]	@ (801090c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x4>)
 801090a:	4770      	bx	lr
 801090c:	240002f4 	.word	0x240002f4

08010910 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010910:	4b04      	ldr	r3, [pc, #16]	@ (8010924 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 8010912:	4805      	ldr	r0, [pc, #20]	@ (8010928 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4905      	ldr	r1, [pc, #20]	@ (801092c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 8010918:	4a05      	ldr	r2, [pc, #20]	@ (8010930 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801091a:	6003      	str	r3, [r0, #0]
 801091c:	600b      	str	r3, [r1, #0]
 801091e:	6013      	str	r3, [r2, #0]
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop
 8010924:	24000d28 	.word	0x24000d28
 8010928:	24000340 	.word	0x24000340
 801092c:	2400034c 	.word	0x2400034c
 8010930:	24000324 	.word	0x24000324

08010934 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8010934:	4a02      	ldr	r2, [pc, #8]	@ (8010940 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0xc>)
 8010936:	4b03      	ldr	r3, [pc, #12]	@ (8010944 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x10>)
 8010938:	6812      	ldr	r2, [r2, #0]
 801093a:	601a      	str	r2, [r3, #0]
 801093c:	4770      	bx	lr
 801093e:	bf00      	nop
 8010940:	24000d28 	.word	0x24000d28
 8010944:	24000360 	.word	0x24000360

08010948 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8010948:	4a02      	ldr	r2, [pc, #8]	@ (8010954 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0xc>)
 801094a:	4b03      	ldr	r3, [pc, #12]	@ (8010958 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x10>)
 801094c:	6812      	ldr	r2, [r2, #0]
 801094e:	601a      	str	r2, [r3, #0]
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	24000d28 	.word	0x24000d28
 8010958:	24000374 	.word	0x24000374

0801095c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 801095c:	4a02      	ldr	r2, [pc, #8]	@ (8010968 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0xc>)
 801095e:	4b03      	ldr	r3, [pc, #12]	@ (801096c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x10>)
 8010960:	6812      	ldr	r2, [r2, #0]
 8010962:	601a      	str	r2, [r3, #0]
 8010964:	4770      	bx	lr
 8010966:	bf00      	nop
 8010968:	24000d28 	.word	0x24000d28
 801096c:	24000388 	.word	0x24000388

08010970 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8010970:	4a02      	ldr	r2, [pc, #8]	@ (801097c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 8010972:	4b03      	ldr	r3, [pc, #12]	@ (8010980 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 8010974:	6812      	ldr	r2, [r2, #0]
 8010976:	601a      	str	r2, [r3, #0]
 8010978:	4770      	bx	lr
 801097a:	bf00      	nop
 801097c:	24000d28 	.word	0x24000d28
 8010980:	2400039c 	.word	0x2400039c

08010984 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8010984:	4a02      	ldr	r2, [pc, #8]	@ (8010990 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8010986:	4b03      	ldr	r3, [pc, #12]	@ (8010994 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8010988:	6812      	ldr	r2, [r2, #0]
 801098a:	601a      	str	r2, [r3, #0]
 801098c:	4770      	bx	lr
 801098e:	bf00      	nop
 8010990:	24000d28 	.word	0x24000d28
 8010994:	240003b0 	.word	0x240003b0

08010998 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8010998:	4a02      	ldr	r2, [pc, #8]	@ (80109a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0xc>)
 801099a:	4b03      	ldr	r3, [pc, #12]	@ (80109a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x10>)
 801099c:	6812      	ldr	r2, [r2, #0]
 801099e:	601a      	str	r2, [r3, #0]
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	24000d28 	.word	0x24000d28
 80109a8:	240003c4 	.word	0x240003c4

080109ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80109ac:	4a02      	ldr	r2, [pc, #8]	@ (80109b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 80109ae:	4b03      	ldr	r3, [pc, #12]	@ (80109bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 80109b0:	6812      	ldr	r2, [r2, #0]
 80109b2:	601a      	str	r2, [r3, #0]
 80109b4:	4770      	bx	lr
 80109b6:	bf00      	nop
 80109b8:	24000d28 	.word	0x24000d28
 80109bc:	240003d8 	.word	0x240003d8

080109c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 80109c0:	4a02      	ldr	r2, [pc, #8]	@ (80109cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 80109c2:	4b03      	ldr	r3, [pc, #12]	@ (80109d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 80109c4:	6812      	ldr	r2, [r2, #0]
 80109c6:	601a      	str	r2, [r3, #0]
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	24000d28 	.word	0x24000d28
 80109d0:	240003ec 	.word	0x240003ec

080109d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 80109d4:	4a02      	ldr	r2, [pc, #8]	@ (80109e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0xc>)
 80109d6:	4b03      	ldr	r3, [pc, #12]	@ (80109e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x10>)
 80109d8:	6812      	ldr	r2, [r2, #0]
 80109da:	601a      	str	r2, [r3, #0]
 80109dc:	4770      	bx	lr
 80109de:	bf00      	nop
 80109e0:	24000d28 	.word	0x24000d28
 80109e4:	24000400 	.word	0x24000400

080109e8 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 80109e8:	f002 b944 	b.w	8012c74 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init>

080109ec <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 80109ec:	f002 b954 	b.w	8012c98 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini>

080109f0 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 80109f0:	f002 b956 	b.w	8012ca0 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__init>

080109f4 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 80109f4:	f002 b958 	b.w	8012ca8 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__fini>

080109f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 80109f8:	b508      	push	{r3, lr}
 80109fa:	f000 fd5d 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80109fe:	4b06      	ldr	r3, [pc, #24]	@ (8010a18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010a00:	4906      	ldr	r1, [pc, #24]	@ (8010a1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	60c8      	str	r0, [r1, #12]
 8010a06:	b10a      	cbz	r2, 8010a0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 8010a08:	4803      	ldr	r0, [pc, #12]	@ (8010a18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010a0a:	bd08      	pop	{r3, pc}
 8010a0c:	4a04      	ldr	r2, [pc, #16]	@ (8010a20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 8010a0e:	4802      	ldr	r0, [pc, #8]	@ (8010a18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010a10:	6812      	ldr	r2, [r2, #0]
 8010a12:	601a      	str	r2, [r3, #0]
 8010a14:	bd08      	pop	{r3, pc}
 8010a16:	bf00      	nop
 8010a18:	24000484 	.word	0x24000484
 8010a1c:	2400040c 	.word	0x2400040c
 8010a20:	24000d2c 	.word	0x24000d2c

08010a24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010a24:	4b04      	ldr	r3, [pc, #16]	@ (8010a38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	b10a      	cbz	r2, 8010a2e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 8010a2a:	4803      	ldr	r0, [pc, #12]	@ (8010a38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010a2c:	4770      	bx	lr
 8010a2e:	4a03      	ldr	r2, [pc, #12]	@ (8010a3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 8010a30:	4801      	ldr	r0, [pc, #4]	@ (8010a38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010a32:	6812      	ldr	r2, [r2, #0]
 8010a34:	601a      	str	r2, [r3, #0]
 8010a36:	4770      	bx	lr
 8010a38:	240004cc 	.word	0x240004cc
 8010a3c:	24000d2c 	.word	0x24000d2c

08010a40 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8010a40:	4b16      	ldr	r3, [pc, #88]	@ (8010a9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	b510      	push	{r4, lr}
 8010a46:	b132      	cbz	r2, 8010a56 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x16>
 8010a48:	685c      	ldr	r4, [r3, #4]
 8010a4a:	68a3      	ldr	r3, [r4, #8]
 8010a4c:	b153      	cbz	r3, 8010a64 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x24>
 8010a4e:	68e3      	ldr	r3, [r4, #12]
 8010a50:	b1a3      	cbz	r3, 8010a7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x3c>
 8010a52:	4812      	ldr	r0, [pc, #72]	@ (8010a9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010a54:	bd10      	pop	{r4, pc}
 8010a56:	4a12      	ldr	r2, [pc, #72]	@ (8010aa0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010a58:	685c      	ldr	r4, [r3, #4]
 8010a5a:	6812      	ldr	r2, [r2, #0]
 8010a5c:	601a      	str	r2, [r3, #0]
 8010a5e:	68a3      	ldr	r3, [r4, #8]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d1f4      	bne.n	8010a4e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0xe>
 8010a64:	f000 fd28 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a68:	4b0e      	ldr	r3, [pc, #56]	@ (8010aa4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x64>)
 8010a6a:	490f      	ldr	r1, [pc, #60]	@ (8010aa8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x68>)
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	60c8      	str	r0, [r1, #12]
 8010a70:	b17a      	cbz	r2, 8010a92 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x52>
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	60a3      	str	r3, [r4, #8]
 8010a76:	68e3      	ldr	r3, [r4, #12]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d1ea      	bne.n	8010a52 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x12>
 8010a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8010aac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	b11a      	cbz	r2, 8010a8a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x4a>
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	4805      	ldr	r0, [pc, #20]	@ (8010a9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010a86:	60e3      	str	r3, [r4, #12]
 8010a88:	bd10      	pop	{r4, pc}
 8010a8a:	4a05      	ldr	r2, [pc, #20]	@ (8010aa0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010a8c:	6812      	ldr	r2, [r2, #0]
 8010a8e:	601a      	str	r2, [r3, #0]
 8010a90:	e7f7      	b.n	8010a82 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x42>
 8010a92:	4a03      	ldr	r2, [pc, #12]	@ (8010aa0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010a94:	6812      	ldr	r2, [r2, #0]
 8010a96:	601a      	str	r2, [r3, #0]
 8010a98:	e7eb      	b.n	8010a72 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x32>
 8010a9a:	bf00      	nop
 8010a9c:	240004e8 	.word	0x240004e8
 8010aa0:	24000d2c 	.word	0x24000d2c
 8010aa4:	24000484 	.word	0x24000484
 8010aa8:	2400040c 	.word	0x2400040c
 8010aac:	240004cc 	.word	0x240004cc

08010ab0 <autoware_auto_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 8010ab0:	f002 b8fc 	b.w	8012cac <autoware_auto_vehicle_msgs__msg__ControlModeReport__init>

08010ab4 <autoware_auto_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 8010ab4:	f002 b90e 	b.w	8012cd4 <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini>

08010ab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8010ab8:	b508      	push	{r3, lr}
 8010aba:	f000 fcfd 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010abe:	4b06      	ldr	r3, [pc, #24]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 8010ac0:	4906      	ldr	r1, [pc, #24]	@ (8010adc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x24>)
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	60c8      	str	r0, [r1, #12]
 8010ac6:	b10a      	cbz	r2, 8010acc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>
 8010ac8:	4803      	ldr	r0, [pc, #12]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 8010aca:	bd08      	pop	{r3, pc}
 8010acc:	4a04      	ldr	r2, [pc, #16]	@ (8010ae0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x28>)
 8010ace:	4802      	ldr	r0, [pc, #8]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 8010ad0:	6812      	ldr	r2, [r2, #0]
 8010ad2:	601a      	str	r2, [r3, #0]
 8010ad4:	bd08      	pop	{r3, pc}
 8010ad6:	bf00      	nop
 8010ad8:	2400056c 	.word	0x2400056c
 8010adc:	240004f4 	.word	0x240004f4
 8010ae0:	24000d2c 	.word	0x24000d2c

08010ae4 <autoware_auto_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 8010ae4:	f002 b8fa 	b.w	8012cdc <autoware_auto_vehicle_msgs__msg__GearCommand__init>

08010ae8 <autoware_auto_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 8010ae8:	f002 b90c 	b.w	8012d04 <autoware_auto_vehicle_msgs__msg__GearCommand__fini>

08010aec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8010aec:	b508      	push	{r3, lr}
 8010aee:	f000 fce3 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010af2:	4b06      	ldr	r3, [pc, #24]	@ (8010b0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 8010af4:	4906      	ldr	r1, [pc, #24]	@ (8010b10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x24>)
 8010af6:	681a      	ldr	r2, [r3, #0]
 8010af8:	60c8      	str	r0, [r1, #12]
 8010afa:	b10a      	cbz	r2, 8010b00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>
 8010afc:	4803      	ldr	r0, [pc, #12]	@ (8010b0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 8010afe:	bd08      	pop	{r3, pc}
 8010b00:	4a04      	ldr	r2, [pc, #16]	@ (8010b14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x28>)
 8010b02:	4802      	ldr	r0, [pc, #8]	@ (8010b0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 8010b04:	6812      	ldr	r2, [r2, #0]
 8010b06:	601a      	str	r2, [r3, #0]
 8010b08:	bd08      	pop	{r3, pc}
 8010b0a:	bf00      	nop
 8010b0c:	240005f0 	.word	0x240005f0
 8010b10:	24000578 	.word	0x24000578
 8010b14:	24000d2c 	.word	0x24000d2c

08010b18 <autoware_auto_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 8010b18:	f002 b8f8 	b.w	8012d0c <autoware_auto_vehicle_msgs__msg__GearReport__init>

08010b1c <autoware_auto_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 8010b1c:	f002 b90a 	b.w	8012d34 <autoware_auto_vehicle_msgs__msg__GearReport__fini>

08010b20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8010b20:	b508      	push	{r3, lr}
 8010b22:	f000 fcc9 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b26:	4b06      	ldr	r3, [pc, #24]	@ (8010b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 8010b28:	4906      	ldr	r1, [pc, #24]	@ (8010b44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x24>)
 8010b2a:	681a      	ldr	r2, [r3, #0]
 8010b2c:	60c8      	str	r0, [r1, #12]
 8010b2e:	b10a      	cbz	r2, 8010b34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>
 8010b30:	4803      	ldr	r0, [pc, #12]	@ (8010b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 8010b32:	bd08      	pop	{r3, pc}
 8010b34:	4a04      	ldr	r2, [pc, #16]	@ (8010b48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x28>)
 8010b36:	4802      	ldr	r0, [pc, #8]	@ (8010b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 8010b38:	6812      	ldr	r2, [r2, #0]
 8010b3a:	601a      	str	r2, [r3, #0]
 8010b3c:	bd08      	pop	{r3, pc}
 8010b3e:	bf00      	nop
 8010b40:	24000674 	.word	0x24000674
 8010b44:	240005fc 	.word	0x240005fc
 8010b48:	24000d2c 	.word	0x24000d2c

08010b4c <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 8010b4c:	f002 b8f6 	b.w	8012d3c <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init>

08010b50 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 8010b50:	f002 b908 	b.w	8012d64 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini>

08010b54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8010b54:	b508      	push	{r3, lr}
 8010b56:	f000 fcaf 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b5a:	4b06      	ldr	r3, [pc, #24]	@ (8010b74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010b5c:	4906      	ldr	r1, [pc, #24]	@ (8010b78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	60c8      	str	r0, [r1, #12]
 8010b62:	b10a      	cbz	r2, 8010b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8010b64:	4803      	ldr	r0, [pc, #12]	@ (8010b74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010b66:	bd08      	pop	{r3, pc}
 8010b68:	4a04      	ldr	r2, [pc, #16]	@ (8010b7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 8010b6a:	4802      	ldr	r0, [pc, #8]	@ (8010b74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010b6c:	6812      	ldr	r2, [r2, #0]
 8010b6e:	601a      	str	r2, [r3, #0]
 8010b70:	bd08      	pop	{r3, pc}
 8010b72:	bf00      	nop
 8010b74:	240006f8 	.word	0x240006f8
 8010b78:	24000680 	.word	0x24000680
 8010b7c:	24000d2c 	.word	0x24000d2c

08010b80 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8010b80:	f002 b8f4 	b.w	8012d6c <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init>

08010b84 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8010b84:	f002 b906 	b.w	8012d94 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini>

08010b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8010b88:	b508      	push	{r3, lr}
 8010b8a:	f000 fc95 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b8e:	4b06      	ldr	r3, [pc, #24]	@ (8010ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010b90:	4906      	ldr	r1, [pc, #24]	@ (8010bac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	60c8      	str	r0, [r1, #12]
 8010b96:	b10a      	cbz	r2, 8010b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>
 8010b98:	4803      	ldr	r0, [pc, #12]	@ (8010ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010b9a:	bd08      	pop	{r3, pc}
 8010b9c:	4a04      	ldr	r2, [pc, #16]	@ (8010bb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x28>)
 8010b9e:	4802      	ldr	r0, [pc, #8]	@ (8010ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010ba0:	6812      	ldr	r2, [r2, #0]
 8010ba2:	601a      	str	r2, [r3, #0]
 8010ba4:	bd08      	pop	{r3, pc}
 8010ba6:	bf00      	nop
 8010ba8:	2400077c 	.word	0x2400077c
 8010bac:	24000704 	.word	0x24000704
 8010bb0:	24000d2c 	.word	0x24000d2c

08010bb4 <autoware_auto_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8010bb4:	f002 b8f2 	b.w	8012d9c <autoware_auto_vehicle_msgs__msg__SteeringReport__init>

08010bb8 <autoware_auto_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 8010bb8:	f002 b904 	b.w	8012dc4 <autoware_auto_vehicle_msgs__msg__SteeringReport__fini>

08010bbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8010bbc:	b508      	push	{r3, lr}
 8010bbe:	f000 fc7b 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010bc2:	4b06      	ldr	r3, [pc, #24]	@ (8010bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8010bc4:	4906      	ldr	r1, [pc, #24]	@ (8010be0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x24>)
 8010bc6:	681a      	ldr	r2, [r3, #0]
 8010bc8:	60c8      	str	r0, [r1, #12]
 8010bca:	b10a      	cbz	r2, 8010bd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>
 8010bcc:	4803      	ldr	r0, [pc, #12]	@ (8010bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8010bce:	bd08      	pop	{r3, pc}
 8010bd0:	4a04      	ldr	r2, [pc, #16]	@ (8010be4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x28>)
 8010bd2:	4802      	ldr	r0, [pc, #8]	@ (8010bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8010bd4:	6812      	ldr	r2, [r2, #0]
 8010bd6:	601a      	str	r2, [r3, #0]
 8010bd8:	bd08      	pop	{r3, pc}
 8010bda:	bf00      	nop
 8010bdc:	24000800 	.word	0x24000800
 8010be0:	24000788 	.word	0x24000788
 8010be4:	24000d2c 	.word	0x24000d2c

08010be8 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 8010be8:	f002 b8f0 	b.w	8012dcc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init>

08010bec <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 8010bec:	f002 b902 	b.w	8012df4 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

08010bf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8010bf0:	b508      	push	{r3, lr}
 8010bf2:	f000 fc61 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010bf6:	4b06      	ldr	r3, [pc, #24]	@ (8010c10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010bf8:	4906      	ldr	r1, [pc, #24]	@ (8010c14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	60c8      	str	r0, [r1, #12]
 8010bfe:	b10a      	cbz	r2, 8010c04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 8010c00:	4803      	ldr	r0, [pc, #12]	@ (8010c10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010c02:	bd08      	pop	{r3, pc}
 8010c04:	4a04      	ldr	r2, [pc, #16]	@ (8010c18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 8010c06:	4802      	ldr	r0, [pc, #8]	@ (8010c10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010c08:	6812      	ldr	r2, [r2, #0]
 8010c0a:	601a      	str	r2, [r3, #0]
 8010c0c:	bd08      	pop	{r3, pc}
 8010c0e:	bf00      	nop
 8010c10:	24000884 	.word	0x24000884
 8010c14:	2400080c 	.word	0x2400080c
 8010c18:	24000d2c 	.word	0x24000d2c

08010c1c <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 8010c1c:	f002 b8ee 	b.w	8012dfc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init>

08010c20 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 8010c20:	f002 b900 	b.w	8012e24 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini>

08010c24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 8010c24:	b508      	push	{r3, lr}
 8010c26:	f000 fc47 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010c2a:	4b06      	ldr	r3, [pc, #24]	@ (8010c44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010c2c:	4906      	ldr	r1, [pc, #24]	@ (8010c48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	60c8      	str	r0, [r1, #12]
 8010c32:	b10a      	cbz	r2, 8010c38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 8010c34:	4803      	ldr	r0, [pc, #12]	@ (8010c44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010c36:	bd08      	pop	{r3, pc}
 8010c38:	4a04      	ldr	r2, [pc, #16]	@ (8010c4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 8010c3a:	4802      	ldr	r0, [pc, #8]	@ (8010c44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010c3c:	6812      	ldr	r2, [r2, #0]
 8010c3e:	601a      	str	r2, [r3, #0]
 8010c40:	bd08      	pop	{r3, pc}
 8010c42:	bf00      	nop
 8010c44:	24000908 	.word	0x24000908
 8010c48:	24000890 	.word	0x24000890
 8010c4c:	24000d2c 	.word	0x24000d2c

08010c50 <autoware_auto_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 8010c50:	f002 b8ec 	b.w	8012e2c <autoware_auto_vehicle_msgs__msg__VelocityReport__init>

08010c54 <autoware_auto_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8010c54:	f002 b900 	b.w	8012e58 <autoware_auto_vehicle_msgs__msg__VelocityReport__fini>

08010c58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8010c58:	b508      	push	{r3, lr}
 8010c5a:	f001 fcb7 	bl	80125cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010c5e:	4b06      	ldr	r3, [pc, #24]	@ (8010c78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8010c60:	4906      	ldr	r1, [pc, #24]	@ (8010c7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x24>)
 8010c62:	681a      	ldr	r2, [r3, #0]
 8010c64:	60c8      	str	r0, [r1, #12]
 8010c66:	b10a      	cbz	r2, 8010c6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>
 8010c68:	4803      	ldr	r0, [pc, #12]	@ (8010c78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8010c6a:	bd08      	pop	{r3, pc}
 8010c6c:	4a04      	ldr	r2, [pc, #16]	@ (8010c80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x28>)
 8010c6e:	4802      	ldr	r0, [pc, #8]	@ (8010c78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8010c70:	6812      	ldr	r2, [r2, #0]
 8010c72:	601a      	str	r2, [r3, #0]
 8010c74:	bd08      	pop	{r3, pc}
 8010c76:	bf00      	nop
 8010c78:	24000a04 	.word	0x24000a04
 8010c7c:	24000914 	.word	0x24000914
 8010c80:	24000d2c 	.word	0x24000d2c

08010c84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010c84:	4800      	ldr	r0, [pc, #0]	@ (8010c88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 8010c86:	4770      	bx	lr
 8010c88:	24000a2c 	.word	0x24000a2c

08010c8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010c8c:	4800      	ldr	r0, [pc, #0]	@ (8010c90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 8010c8e:	4770      	bx	lr
 8010c90:	24000a38 	.word	0x24000a38

08010c94 <_ControlModeCommand_Response__max_serialized_size>:
 8010c94:	2101      	movs	r1, #1
 8010c96:	2000      	movs	r0, #0
 8010c98:	b508      	push	{r3, lr}
 8010c9a:	f001 fb41 	bl	8012320 <ucdr_alignment>
 8010c9e:	3001      	adds	r0, #1
 8010ca0:	bd08      	pop	{r3, pc}
 8010ca2:	bf00      	nop

08010ca4 <_ControlModeCommand_Response__cdr_deserialize>:
 8010ca4:	b109      	cbz	r1, 8010caa <_ControlModeCommand_Response__cdr_deserialize+0x6>
 8010ca6:	f000 bc93 	b.w	80115d0 <ucdr_deserialize_bool>
 8010caa:	4608      	mov	r0, r1
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop

08010cb0 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010cb0:	b538      	push	{r3, r4, r5, lr}
 8010cb2:	b158      	cbz	r0, 8010ccc <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8010cb4:	460d      	mov	r5, r1
 8010cb6:	f000 fc0d 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010cba:	2101      	movs	r1, #1
 8010cbc:	182c      	adds	r4, r5, r0
 8010cbe:	f1c5 0501 	rsb	r5, r5, #1
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f001 fb2c 	bl	8012320 <ucdr_alignment>
 8010cc8:	4428      	add	r0, r5
 8010cca:	4420      	add	r0, r4
 8010ccc:	bd38      	pop	{r3, r4, r5, pc}
 8010cce:	bf00      	nop

08010cd0 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010cd0:	b138      	cbz	r0, 8010ce2 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 8010cd2:	b508      	push	{r3, lr}
 8010cd4:	460b      	mov	r3, r1
 8010cd6:	2101      	movs	r1, #1
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f001 fb21 	bl	8012320 <ucdr_alignment>
 8010cde:	3001      	adds	r0, #1
 8010ce0:	bd08      	pop	{r3, pc}
 8010ce2:	4770      	bx	lr

08010ce4 <_ControlModeCommand_Request__cdr_deserialize>:
 8010ce4:	b538      	push	{r3, r4, r5, lr}
 8010ce6:	460c      	mov	r4, r1
 8010ce8:	b179      	cbz	r1, 8010d0a <_ControlModeCommand_Request__cdr_deserialize+0x26>
 8010cea:	4605      	mov	r5, r0
 8010cec:	f000 fc56 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	4621      	mov	r1, r4
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	4798      	blx	r3
 8010cfc:	f104 0108 	add.w	r1, r4, #8
 8010d00:	4628      	mov	r0, r5
 8010d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d06:	f000 bc91 	b.w	801162c <ucdr_deserialize_uint8_t>
 8010d0a:	4608      	mov	r0, r1
 8010d0c:	bd38      	pop	{r3, r4, r5, pc}
 8010d0e:	bf00      	nop

08010d10 <_ControlModeCommand_Request__cdr_serialize>:
 8010d10:	b180      	cbz	r0, 8010d34 <_ControlModeCommand_Request__cdr_serialize+0x24>
 8010d12:	b538      	push	{r3, r4, r5, lr}
 8010d14:	4604      	mov	r4, r0
 8010d16:	460d      	mov	r5, r1
 8010d18:	f000 fc40 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	4629      	mov	r1, r5
 8010d20:	4620      	mov	r0, r4
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	689b      	ldr	r3, [r3, #8]
 8010d26:	4798      	blx	r3
 8010d28:	7a21      	ldrb	r1, [r4, #8]
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d30:	f000 bc66 	b.w	8011600 <ucdr_serialize_uint8_t>
 8010d34:	4770      	bx	lr
 8010d36:	bf00      	nop

08010d38 <_ControlModeCommand_Response__cdr_serialize>:
 8010d38:	460a      	mov	r2, r1
 8010d3a:	b118      	cbz	r0, 8010d44 <_ControlModeCommand_Response__cdr_serialize+0xc>
 8010d3c:	7801      	ldrb	r1, [r0, #0]
 8010d3e:	4610      	mov	r0, r2
 8010d40:	f000 bc30 	b.w	80115a4 <ucdr_serialize_bool>
 8010d44:	4770      	bx	lr
 8010d46:	bf00      	nop

08010d48 <_ControlModeCommand_Response__get_serialized_size>:
 8010d48:	b130      	cbz	r0, 8010d58 <_ControlModeCommand_Response__get_serialized_size+0x10>
 8010d4a:	2101      	movs	r1, #1
 8010d4c:	2000      	movs	r0, #0
 8010d4e:	b508      	push	{r3, lr}
 8010d50:	f001 fae6 	bl	8012320 <ucdr_alignment>
 8010d54:	3001      	adds	r0, #1
 8010d56:	bd08      	pop	{r3, pc}
 8010d58:	4770      	bx	lr
 8010d5a:	bf00      	nop

08010d5c <_ControlModeCommand_Request__get_serialized_size>:
 8010d5c:	b150      	cbz	r0, 8010d74 <_ControlModeCommand_Request__get_serialized_size+0x18>
 8010d5e:	2100      	movs	r1, #0
 8010d60:	b510      	push	{r4, lr}
 8010d62:	f000 fbb7 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010d66:	4604      	mov	r4, r0
 8010d68:	2101      	movs	r1, #1
 8010d6a:	f001 fad9 	bl	8012320 <ucdr_alignment>
 8010d6e:	4420      	add	r0, r4
 8010d70:	3001      	adds	r0, #1
 8010d72:	bd10      	pop	{r4, pc}
 8010d74:	4770      	bx	lr
 8010d76:	bf00      	nop

08010d78 <_ControlModeCommand_Request__max_serialized_size>:
 8010d78:	b510      	push	{r4, lr}
 8010d7a:	b082      	sub	sp, #8
 8010d7c:	2401      	movs	r4, #1
 8010d7e:	2100      	movs	r1, #0
 8010d80:	f10d 0007 	add.w	r0, sp, #7
 8010d84:	f88d 4007 	strb.w	r4, [sp, #7]
 8010d88:	f000 fbf4 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 8010d8c:	4621      	mov	r1, r4
 8010d8e:	4604      	mov	r4, r0
 8010d90:	f001 fac6 	bl	8012320 <ucdr_alignment>
 8010d94:	4420      	add	r0, r4
 8010d96:	3001      	adds	r0, #1
 8010d98:	b002      	add	sp, #8
 8010d9a:	bd10      	pop	{r4, pc}

08010d9c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8010d9c:	4800      	ldr	r0, [pc, #0]	@ (8010da0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x4>)
 8010d9e:	4770      	bx	lr
 8010da0:	24000a20 	.word	0x24000a20

08010da4 <get_serialized_size_autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8010da4:	b538      	push	{r3, r4, r5, lr}
 8010da6:	b158      	cbz	r0, 8010dc0 <get_serialized_size_autoware_auto_vehicle_msgs__msg__ControlModeReport+0x1c>
 8010da8:	460d      	mov	r5, r1
 8010daa:	f000 fb93 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010dae:	2101      	movs	r1, #1
 8010db0:	182c      	adds	r4, r5, r0
 8010db2:	f1c5 0501 	rsb	r5, r5, #1
 8010db6:	4620      	mov	r0, r4
 8010db8:	f001 fab2 	bl	8012320 <ucdr_alignment>
 8010dbc:	4428      	add	r0, r5
 8010dbe:	4420      	add	r0, r4
 8010dc0:	bd38      	pop	{r3, r4, r5, pc}
 8010dc2:	bf00      	nop

08010dc4 <_ControlModeReport__cdr_deserialize>:
 8010dc4:	b538      	push	{r3, r4, r5, lr}
 8010dc6:	460c      	mov	r4, r1
 8010dc8:	b179      	cbz	r1, 8010dea <_ControlModeReport__cdr_deserialize+0x26>
 8010dca:	4605      	mov	r5, r0
 8010dcc:	f000 fbe6 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	4621      	mov	r1, r4
 8010dd4:	4628      	mov	r0, r5
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	68db      	ldr	r3, [r3, #12]
 8010dda:	4798      	blx	r3
 8010ddc:	f104 0108 	add.w	r1, r4, #8
 8010de0:	4628      	mov	r0, r5
 8010de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010de6:	f000 bc21 	b.w	801162c <ucdr_deserialize_uint8_t>
 8010dea:	4608      	mov	r0, r1
 8010dec:	bd38      	pop	{r3, r4, r5, pc}
 8010dee:	bf00      	nop

08010df0 <_ControlModeReport__cdr_serialize>:
 8010df0:	b180      	cbz	r0, 8010e14 <_ControlModeReport__cdr_serialize+0x24>
 8010df2:	b538      	push	{r3, r4, r5, lr}
 8010df4:	4604      	mov	r4, r0
 8010df6:	460d      	mov	r5, r1
 8010df8:	f000 fbd0 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	4629      	mov	r1, r5
 8010e00:	4620      	mov	r0, r4
 8010e02:	685b      	ldr	r3, [r3, #4]
 8010e04:	689b      	ldr	r3, [r3, #8]
 8010e06:	4798      	blx	r3
 8010e08:	7a21      	ldrb	r1, [r4, #8]
 8010e0a:	4628      	mov	r0, r5
 8010e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e10:	f000 bbf6 	b.w	8011600 <ucdr_serialize_uint8_t>
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop

08010e18 <_ControlModeReport__get_serialized_size>:
 8010e18:	b150      	cbz	r0, 8010e30 <_ControlModeReport__get_serialized_size+0x18>
 8010e1a:	2100      	movs	r1, #0
 8010e1c:	b510      	push	{r4, lr}
 8010e1e:	f000 fb59 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010e22:	4604      	mov	r4, r0
 8010e24:	2101      	movs	r1, #1
 8010e26:	f001 fa7b 	bl	8012320 <ucdr_alignment>
 8010e2a:	4420      	add	r0, r4
 8010e2c:	3001      	adds	r0, #1
 8010e2e:	bd10      	pop	{r4, pc}
 8010e30:	4770      	bx	lr
 8010e32:	bf00      	nop

08010e34 <_ControlModeReport__max_serialized_size>:
 8010e34:	b510      	push	{r4, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	2401      	movs	r4, #1
 8010e3a:	2100      	movs	r1, #0
 8010e3c:	f10d 0007 	add.w	r0, sp, #7
 8010e40:	f88d 4007 	strb.w	r4, [sp, #7]
 8010e44:	f000 fb96 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 8010e48:	4621      	mov	r1, r4
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	f001 fa68 	bl	8012320 <ucdr_alignment>
 8010e50:	4420      	add	r0, r4
 8010e52:	3001      	adds	r0, #1
 8010e54:	b002      	add	sp, #8
 8010e56:	bd10      	pop	{r4, pc}

08010e58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8010e58:	4800      	ldr	r0, [pc, #0]	@ (8010e5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x4>)
 8010e5a:	4770      	bx	lr
 8010e5c:	24000a7c 	.word	0x24000a7c

08010e60 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearCommand>:
 8010e60:	b538      	push	{r3, r4, r5, lr}
 8010e62:	b158      	cbz	r0, 8010e7c <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearCommand+0x1c>
 8010e64:	460d      	mov	r5, r1
 8010e66:	f000 fb35 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010e6a:	2101      	movs	r1, #1
 8010e6c:	182c      	adds	r4, r5, r0
 8010e6e:	f1c5 0501 	rsb	r5, r5, #1
 8010e72:	4620      	mov	r0, r4
 8010e74:	f001 fa54 	bl	8012320 <ucdr_alignment>
 8010e78:	4428      	add	r0, r5
 8010e7a:	4420      	add	r0, r4
 8010e7c:	bd38      	pop	{r3, r4, r5, pc}
 8010e7e:	bf00      	nop

08010e80 <_GearCommand__cdr_deserialize>:
 8010e80:	b538      	push	{r3, r4, r5, lr}
 8010e82:	460c      	mov	r4, r1
 8010e84:	b179      	cbz	r1, 8010ea6 <_GearCommand__cdr_deserialize+0x26>
 8010e86:	4605      	mov	r5, r0
 8010e88:	f000 fb88 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	4621      	mov	r1, r4
 8010e90:	4628      	mov	r0, r5
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	68db      	ldr	r3, [r3, #12]
 8010e96:	4798      	blx	r3
 8010e98:	f104 0108 	add.w	r1, r4, #8
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ea2:	f000 bbc3 	b.w	801162c <ucdr_deserialize_uint8_t>
 8010ea6:	4608      	mov	r0, r1
 8010ea8:	bd38      	pop	{r3, r4, r5, pc}
 8010eaa:	bf00      	nop

08010eac <_GearCommand__cdr_serialize>:
 8010eac:	b180      	cbz	r0, 8010ed0 <_GearCommand__cdr_serialize+0x24>
 8010eae:	b538      	push	{r3, r4, r5, lr}
 8010eb0:	4604      	mov	r4, r0
 8010eb2:	460d      	mov	r5, r1
 8010eb4:	f000 fb72 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	4629      	mov	r1, r5
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	689b      	ldr	r3, [r3, #8]
 8010ec2:	4798      	blx	r3
 8010ec4:	7a21      	ldrb	r1, [r4, #8]
 8010ec6:	4628      	mov	r0, r5
 8010ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ecc:	f000 bb98 	b.w	8011600 <ucdr_serialize_uint8_t>
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop

08010ed4 <_GearCommand__get_serialized_size>:
 8010ed4:	b150      	cbz	r0, 8010eec <_GearCommand__get_serialized_size+0x18>
 8010ed6:	2100      	movs	r1, #0
 8010ed8:	b510      	push	{r4, lr}
 8010eda:	f000 fafb 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010ede:	4604      	mov	r4, r0
 8010ee0:	2101      	movs	r1, #1
 8010ee2:	f001 fa1d 	bl	8012320 <ucdr_alignment>
 8010ee6:	4420      	add	r0, r4
 8010ee8:	3001      	adds	r0, #1
 8010eea:	bd10      	pop	{r4, pc}
 8010eec:	4770      	bx	lr
 8010eee:	bf00      	nop

08010ef0 <_GearCommand__max_serialized_size>:
 8010ef0:	b510      	push	{r4, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	2401      	movs	r4, #1
 8010ef6:	2100      	movs	r1, #0
 8010ef8:	f10d 0007 	add.w	r0, sp, #7
 8010efc:	f88d 4007 	strb.w	r4, [sp, #7]
 8010f00:	f000 fb38 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 8010f04:	4621      	mov	r1, r4
 8010f06:	4604      	mov	r4, r0
 8010f08:	f001 fa0a 	bl	8012320 <ucdr_alignment>
 8010f0c:	4420      	add	r0, r4
 8010f0e:	3001      	adds	r0, #1
 8010f10:	b002      	add	sp, #8
 8010f12:	bd10      	pop	{r4, pc}

08010f14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8010f14:	4800      	ldr	r0, [pc, #0]	@ (8010f18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x4>)
 8010f16:	4770      	bx	lr
 8010f18:	24000aa4 	.word	0x24000aa4

08010f1c <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearReport>:
 8010f1c:	b538      	push	{r3, r4, r5, lr}
 8010f1e:	b158      	cbz	r0, 8010f38 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearReport+0x1c>
 8010f20:	460d      	mov	r5, r1
 8010f22:	f000 fad7 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010f26:	2101      	movs	r1, #1
 8010f28:	182c      	adds	r4, r5, r0
 8010f2a:	f1c5 0501 	rsb	r5, r5, #1
 8010f2e:	4620      	mov	r0, r4
 8010f30:	f001 f9f6 	bl	8012320 <ucdr_alignment>
 8010f34:	4428      	add	r0, r5
 8010f36:	4420      	add	r0, r4
 8010f38:	bd38      	pop	{r3, r4, r5, pc}
 8010f3a:	bf00      	nop

08010f3c <_GearReport__cdr_deserialize>:
 8010f3c:	b538      	push	{r3, r4, r5, lr}
 8010f3e:	460c      	mov	r4, r1
 8010f40:	b179      	cbz	r1, 8010f62 <_GearReport__cdr_deserialize+0x26>
 8010f42:	4605      	mov	r5, r0
 8010f44:	f000 fb2a 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	4621      	mov	r1, r4
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	68db      	ldr	r3, [r3, #12]
 8010f52:	4798      	blx	r3
 8010f54:	f104 0108 	add.w	r1, r4, #8
 8010f58:	4628      	mov	r0, r5
 8010f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f5e:	f000 bb65 	b.w	801162c <ucdr_deserialize_uint8_t>
 8010f62:	4608      	mov	r0, r1
 8010f64:	bd38      	pop	{r3, r4, r5, pc}
 8010f66:	bf00      	nop

08010f68 <_GearReport__cdr_serialize>:
 8010f68:	b180      	cbz	r0, 8010f8c <_GearReport__cdr_serialize+0x24>
 8010f6a:	b538      	push	{r3, r4, r5, lr}
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	460d      	mov	r5, r1
 8010f70:	f000 fb14 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f74:	4603      	mov	r3, r0
 8010f76:	4629      	mov	r1, r5
 8010f78:	4620      	mov	r0, r4
 8010f7a:	685b      	ldr	r3, [r3, #4]
 8010f7c:	689b      	ldr	r3, [r3, #8]
 8010f7e:	4798      	blx	r3
 8010f80:	7a21      	ldrb	r1, [r4, #8]
 8010f82:	4628      	mov	r0, r5
 8010f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f88:	f000 bb3a 	b.w	8011600 <ucdr_serialize_uint8_t>
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop

08010f90 <_GearReport__get_serialized_size>:
 8010f90:	b150      	cbz	r0, 8010fa8 <_GearReport__get_serialized_size+0x18>
 8010f92:	2100      	movs	r1, #0
 8010f94:	b510      	push	{r4, lr}
 8010f96:	f000 fa9d 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	2101      	movs	r1, #1
 8010f9e:	f001 f9bf 	bl	8012320 <ucdr_alignment>
 8010fa2:	4420      	add	r0, r4
 8010fa4:	3001      	adds	r0, #1
 8010fa6:	bd10      	pop	{r4, pc}
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop

08010fac <_GearReport__max_serialized_size>:
 8010fac:	b510      	push	{r4, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	2401      	movs	r4, #1
 8010fb2:	2100      	movs	r1, #0
 8010fb4:	f10d 0007 	add.w	r0, sp, #7
 8010fb8:	f88d 4007 	strb.w	r4, [sp, #7]
 8010fbc:	f000 fada 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 8010fc0:	4621      	mov	r1, r4
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	f001 f9ac 	bl	8012320 <ucdr_alignment>
 8010fc8:	4420      	add	r0, r4
 8010fca:	3001      	adds	r0, #1
 8010fcc:	b002      	add	sp, #8
 8010fce:	bd10      	pop	{r4, pc}

08010fd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8010fd0:	4800      	ldr	r0, [pc, #0]	@ (8010fd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x4>)
 8010fd2:	4770      	bx	lr
 8010fd4:	24000acc 	.word	0x24000acc

08010fd8 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	b158      	cbz	r0, 8010ff4 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 8010fdc:	460d      	mov	r5, r1
 8010fde:	f000 fa79 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010fe2:	2101      	movs	r1, #1
 8010fe4:	182c      	adds	r4, r5, r0
 8010fe6:	f1c5 0501 	rsb	r5, r5, #1
 8010fea:	4620      	mov	r0, r4
 8010fec:	f001 f998 	bl	8012320 <ucdr_alignment>
 8010ff0:	4428      	add	r0, r5
 8010ff2:	4420      	add	r0, r4
 8010ff4:	bd38      	pop	{r3, r4, r5, pc}
 8010ff6:	bf00      	nop

08010ff8 <_HazardLightsCommand__cdr_deserialize>:
 8010ff8:	b538      	push	{r3, r4, r5, lr}
 8010ffa:	460c      	mov	r4, r1
 8010ffc:	b179      	cbz	r1, 801101e <_HazardLightsCommand__cdr_deserialize+0x26>
 8010ffe:	4605      	mov	r5, r0
 8011000:	f000 facc 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011004:	4603      	mov	r3, r0
 8011006:	4621      	mov	r1, r4
 8011008:	4628      	mov	r0, r5
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	68db      	ldr	r3, [r3, #12]
 801100e:	4798      	blx	r3
 8011010:	f104 0108 	add.w	r1, r4, #8
 8011014:	4628      	mov	r0, r5
 8011016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801101a:	f000 bb07 	b.w	801162c <ucdr_deserialize_uint8_t>
 801101e:	4608      	mov	r0, r1
 8011020:	bd38      	pop	{r3, r4, r5, pc}
 8011022:	bf00      	nop

08011024 <_HazardLightsCommand__cdr_serialize>:
 8011024:	b180      	cbz	r0, 8011048 <_HazardLightsCommand__cdr_serialize+0x24>
 8011026:	b538      	push	{r3, r4, r5, lr}
 8011028:	4604      	mov	r4, r0
 801102a:	460d      	mov	r5, r1
 801102c:	f000 fab6 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011030:	4603      	mov	r3, r0
 8011032:	4629      	mov	r1, r5
 8011034:	4620      	mov	r0, r4
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	689b      	ldr	r3, [r3, #8]
 801103a:	4798      	blx	r3
 801103c:	7a21      	ldrb	r1, [r4, #8]
 801103e:	4628      	mov	r0, r5
 8011040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011044:	f000 badc 	b.w	8011600 <ucdr_serialize_uint8_t>
 8011048:	4770      	bx	lr
 801104a:	bf00      	nop

0801104c <_HazardLightsCommand__get_serialized_size>:
 801104c:	b150      	cbz	r0, 8011064 <_HazardLightsCommand__get_serialized_size+0x18>
 801104e:	2100      	movs	r1, #0
 8011050:	b510      	push	{r4, lr}
 8011052:	f000 fa3f 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8011056:	4604      	mov	r4, r0
 8011058:	2101      	movs	r1, #1
 801105a:	f001 f961 	bl	8012320 <ucdr_alignment>
 801105e:	4420      	add	r0, r4
 8011060:	3001      	adds	r0, #1
 8011062:	bd10      	pop	{r4, pc}
 8011064:	4770      	bx	lr
 8011066:	bf00      	nop

08011068 <_HazardLightsCommand__max_serialized_size>:
 8011068:	b510      	push	{r4, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	2401      	movs	r4, #1
 801106e:	2100      	movs	r1, #0
 8011070:	f10d 0007 	add.w	r0, sp, #7
 8011074:	f88d 4007 	strb.w	r4, [sp, #7]
 8011078:	f000 fa7c 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 801107c:	4621      	mov	r1, r4
 801107e:	4604      	mov	r4, r0
 8011080:	f001 f94e 	bl	8012320 <ucdr_alignment>
 8011084:	4420      	add	r0, r4
 8011086:	3001      	adds	r0, #1
 8011088:	b002      	add	sp, #8
 801108a:	bd10      	pop	{r4, pc}

0801108c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 801108c:	4800      	ldr	r0, [pc, #0]	@ (8011090 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 801108e:	4770      	bx	lr
 8011090:	24000af4 	.word	0x24000af4

08011094 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8011094:	b538      	push	{r3, r4, r5, lr}
 8011096:	b158      	cbz	r0, 80110b0 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x1c>
 8011098:	460d      	mov	r5, r1
 801109a:	f000 fa1b 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 801109e:	2101      	movs	r1, #1
 80110a0:	182c      	adds	r4, r5, r0
 80110a2:	f1c5 0501 	rsb	r5, r5, #1
 80110a6:	4620      	mov	r0, r4
 80110a8:	f001 f93a 	bl	8012320 <ucdr_alignment>
 80110ac:	4428      	add	r0, r5
 80110ae:	4420      	add	r0, r4
 80110b0:	bd38      	pop	{r3, r4, r5, pc}
 80110b2:	bf00      	nop

080110b4 <_HazardLightsReport__cdr_deserialize>:
 80110b4:	b538      	push	{r3, r4, r5, lr}
 80110b6:	460c      	mov	r4, r1
 80110b8:	b179      	cbz	r1, 80110da <_HazardLightsReport__cdr_deserialize+0x26>
 80110ba:	4605      	mov	r5, r0
 80110bc:	f000 fa6e 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80110c0:	4603      	mov	r3, r0
 80110c2:	4621      	mov	r1, r4
 80110c4:	4628      	mov	r0, r5
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	4798      	blx	r3
 80110cc:	f104 0108 	add.w	r1, r4, #8
 80110d0:	4628      	mov	r0, r5
 80110d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110d6:	f000 baa9 	b.w	801162c <ucdr_deserialize_uint8_t>
 80110da:	4608      	mov	r0, r1
 80110dc:	bd38      	pop	{r3, r4, r5, pc}
 80110de:	bf00      	nop

080110e0 <_HazardLightsReport__cdr_serialize>:
 80110e0:	b180      	cbz	r0, 8011104 <_HazardLightsReport__cdr_serialize+0x24>
 80110e2:	b538      	push	{r3, r4, r5, lr}
 80110e4:	4604      	mov	r4, r0
 80110e6:	460d      	mov	r5, r1
 80110e8:	f000 fa58 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80110ec:	4603      	mov	r3, r0
 80110ee:	4629      	mov	r1, r5
 80110f0:	4620      	mov	r0, r4
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	689b      	ldr	r3, [r3, #8]
 80110f6:	4798      	blx	r3
 80110f8:	7a21      	ldrb	r1, [r4, #8]
 80110fa:	4628      	mov	r0, r5
 80110fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011100:	f000 ba7e 	b.w	8011600 <ucdr_serialize_uint8_t>
 8011104:	4770      	bx	lr
 8011106:	bf00      	nop

08011108 <_HazardLightsReport__get_serialized_size>:
 8011108:	b150      	cbz	r0, 8011120 <_HazardLightsReport__get_serialized_size+0x18>
 801110a:	2100      	movs	r1, #0
 801110c:	b510      	push	{r4, lr}
 801110e:	f000 f9e1 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8011112:	4604      	mov	r4, r0
 8011114:	2101      	movs	r1, #1
 8011116:	f001 f903 	bl	8012320 <ucdr_alignment>
 801111a:	4420      	add	r0, r4
 801111c:	3001      	adds	r0, #1
 801111e:	bd10      	pop	{r4, pc}
 8011120:	4770      	bx	lr
 8011122:	bf00      	nop

08011124 <_HazardLightsReport__max_serialized_size>:
 8011124:	b510      	push	{r4, lr}
 8011126:	b082      	sub	sp, #8
 8011128:	2401      	movs	r4, #1
 801112a:	2100      	movs	r1, #0
 801112c:	f10d 0007 	add.w	r0, sp, #7
 8011130:	f88d 4007 	strb.w	r4, [sp, #7]
 8011134:	f000 fa1e 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 8011138:	4621      	mov	r1, r4
 801113a:	4604      	mov	r4, r0
 801113c:	f001 f8f0 	bl	8012320 <ucdr_alignment>
 8011140:	4420      	add	r0, r4
 8011142:	3001      	adds	r0, #1
 8011144:	b002      	add	sp, #8
 8011146:	bd10      	pop	{r4, pc}

08011148 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8011148:	4800      	ldr	r0, [pc, #0]	@ (801114c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x4>)
 801114a:	4770      	bx	lr
 801114c:	24000b1c 	.word	0x24000b1c

08011150 <get_serialized_size_autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8011150:	b538      	push	{r3, r4, r5, lr}
 8011152:	b158      	cbz	r0, 801116c <get_serialized_size_autoware_auto_vehicle_msgs__msg__SteeringReport+0x1c>
 8011154:	460d      	mov	r5, r1
 8011156:	f000 f9bd 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 801115a:	2104      	movs	r1, #4
 801115c:	182c      	adds	r4, r5, r0
 801115e:	f1c5 0504 	rsb	r5, r5, #4
 8011162:	4620      	mov	r0, r4
 8011164:	f001 f8dc 	bl	8012320 <ucdr_alignment>
 8011168:	4428      	add	r0, r5
 801116a:	4420      	add	r0, r4
 801116c:	bd38      	pop	{r3, r4, r5, pc}
 801116e:	bf00      	nop

08011170 <_SteeringReport__cdr_deserialize>:
 8011170:	b538      	push	{r3, r4, r5, lr}
 8011172:	460c      	mov	r4, r1
 8011174:	b179      	cbz	r1, 8011196 <_SteeringReport__cdr_deserialize+0x26>
 8011176:	4605      	mov	r5, r0
 8011178:	f000 fa10 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801117c:	4603      	mov	r3, r0
 801117e:	4621      	mov	r1, r4
 8011180:	4628      	mov	r0, r5
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	68db      	ldr	r3, [r3, #12]
 8011186:	4798      	blx	r3
 8011188:	f104 0108 	add.w	r1, r4, #8
 801118c:	4628      	mov	r0, r5
 801118e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011192:	f000 be77 	b.w	8011e84 <ucdr_deserialize_float>
 8011196:	4608      	mov	r0, r1
 8011198:	bd38      	pop	{r3, r4, r5, pc}
 801119a:	bf00      	nop

0801119c <_SteeringReport__cdr_serialize>:
 801119c:	b188      	cbz	r0, 80111c2 <_SteeringReport__cdr_serialize+0x26>
 801119e:	b538      	push	{r3, r4, r5, lr}
 80111a0:	4604      	mov	r4, r0
 80111a2:	460d      	mov	r5, r1
 80111a4:	f000 f9fa 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80111a8:	4603      	mov	r3, r0
 80111aa:	4629      	mov	r1, r5
 80111ac:	4620      	mov	r0, r4
 80111ae:	685b      	ldr	r3, [r3, #4]
 80111b0:	689b      	ldr	r3, [r3, #8]
 80111b2:	4798      	blx	r3
 80111b4:	ed94 0a02 	vldr	s0, [r4, #8]
 80111b8:	4628      	mov	r0, r5
 80111ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111be:	f000 bdc9 	b.w	8011d54 <ucdr_serialize_float>
 80111c2:	4770      	bx	lr

080111c4 <_SteeringReport__get_serialized_size>:
 80111c4:	b150      	cbz	r0, 80111dc <_SteeringReport__get_serialized_size+0x18>
 80111c6:	2100      	movs	r1, #0
 80111c8:	b510      	push	{r4, lr}
 80111ca:	f000 f983 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 80111ce:	4604      	mov	r4, r0
 80111d0:	2104      	movs	r1, #4
 80111d2:	f001 f8a5 	bl	8012320 <ucdr_alignment>
 80111d6:	4420      	add	r0, r4
 80111d8:	3004      	adds	r0, #4
 80111da:	bd10      	pop	{r4, pc}
 80111dc:	4770      	bx	lr
 80111de:	bf00      	nop

080111e0 <_SteeringReport__max_serialized_size>:
 80111e0:	b510      	push	{r4, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	2301      	movs	r3, #1
 80111e6:	2100      	movs	r1, #0
 80111e8:	f10d 0007 	add.w	r0, sp, #7
 80111ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80111f0:	f000 f9c0 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 80111f4:	4604      	mov	r4, r0
 80111f6:	2104      	movs	r1, #4
 80111f8:	f001 f892 	bl	8012320 <ucdr_alignment>
 80111fc:	4420      	add	r0, r4
 80111fe:	3004      	adds	r0, #4
 8011200:	b002      	add	sp, #8
 8011202:	bd10      	pop	{r4, pc}

08011204 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8011204:	4800      	ldr	r0, [pc, #0]	@ (8011208 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x4>)
 8011206:	4770      	bx	lr
 8011208:	24000b44 	.word	0x24000b44

0801120c <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 801120c:	b538      	push	{r3, r4, r5, lr}
 801120e:	b158      	cbz	r0, 8011228 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 8011210:	460d      	mov	r5, r1
 8011212:	f000 f95f 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8011216:	2101      	movs	r1, #1
 8011218:	182c      	adds	r4, r5, r0
 801121a:	f1c5 0501 	rsb	r5, r5, #1
 801121e:	4620      	mov	r0, r4
 8011220:	f001 f87e 	bl	8012320 <ucdr_alignment>
 8011224:	4428      	add	r0, r5
 8011226:	4420      	add	r0, r4
 8011228:	bd38      	pop	{r3, r4, r5, pc}
 801122a:	bf00      	nop

0801122c <_TurnIndicatorsCommand__cdr_deserialize>:
 801122c:	b538      	push	{r3, r4, r5, lr}
 801122e:	460c      	mov	r4, r1
 8011230:	b179      	cbz	r1, 8011252 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 8011232:	4605      	mov	r5, r0
 8011234:	f000 f9b2 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011238:	4603      	mov	r3, r0
 801123a:	4621      	mov	r1, r4
 801123c:	4628      	mov	r0, r5
 801123e:	685b      	ldr	r3, [r3, #4]
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	4798      	blx	r3
 8011244:	f104 0108 	add.w	r1, r4, #8
 8011248:	4628      	mov	r0, r5
 801124a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801124e:	f000 b9ed 	b.w	801162c <ucdr_deserialize_uint8_t>
 8011252:	4608      	mov	r0, r1
 8011254:	bd38      	pop	{r3, r4, r5, pc}
 8011256:	bf00      	nop

08011258 <_TurnIndicatorsCommand__cdr_serialize>:
 8011258:	b180      	cbz	r0, 801127c <_TurnIndicatorsCommand__cdr_serialize+0x24>
 801125a:	b538      	push	{r3, r4, r5, lr}
 801125c:	4604      	mov	r4, r0
 801125e:	460d      	mov	r5, r1
 8011260:	f000 f99c 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011264:	4603      	mov	r3, r0
 8011266:	4629      	mov	r1, r5
 8011268:	4620      	mov	r0, r4
 801126a:	685b      	ldr	r3, [r3, #4]
 801126c:	689b      	ldr	r3, [r3, #8]
 801126e:	4798      	blx	r3
 8011270:	7a21      	ldrb	r1, [r4, #8]
 8011272:	4628      	mov	r0, r5
 8011274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011278:	f000 b9c2 	b.w	8011600 <ucdr_serialize_uint8_t>
 801127c:	4770      	bx	lr
 801127e:	bf00      	nop

08011280 <_TurnIndicatorsCommand__get_serialized_size>:
 8011280:	b150      	cbz	r0, 8011298 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 8011282:	2100      	movs	r1, #0
 8011284:	b510      	push	{r4, lr}
 8011286:	f000 f925 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 801128a:	4604      	mov	r4, r0
 801128c:	2101      	movs	r1, #1
 801128e:	f001 f847 	bl	8012320 <ucdr_alignment>
 8011292:	4420      	add	r0, r4
 8011294:	3001      	adds	r0, #1
 8011296:	bd10      	pop	{r4, pc}
 8011298:	4770      	bx	lr
 801129a:	bf00      	nop

0801129c <_TurnIndicatorsCommand__max_serialized_size>:
 801129c:	b510      	push	{r4, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	2401      	movs	r4, #1
 80112a2:	2100      	movs	r1, #0
 80112a4:	f10d 0007 	add.w	r0, sp, #7
 80112a8:	f88d 4007 	strb.w	r4, [sp, #7]
 80112ac:	f000 f962 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 80112b0:	4621      	mov	r1, r4
 80112b2:	4604      	mov	r4, r0
 80112b4:	f001 f834 	bl	8012320 <ucdr_alignment>
 80112b8:	4420      	add	r0, r4
 80112ba:	3001      	adds	r0, #1
 80112bc:	b002      	add	sp, #8
 80112be:	bd10      	pop	{r4, pc}

080112c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80112c0:	4800      	ldr	r0, [pc, #0]	@ (80112c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 80112c2:	4770      	bx	lr
 80112c4:	24000b6c 	.word	0x24000b6c

080112c8 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 80112c8:	b538      	push	{r3, r4, r5, lr}
 80112ca:	b158      	cbz	r0, 80112e4 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 80112cc:	460d      	mov	r5, r1
 80112ce:	f000 f901 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 80112d2:	2101      	movs	r1, #1
 80112d4:	182c      	adds	r4, r5, r0
 80112d6:	f1c5 0501 	rsb	r5, r5, #1
 80112da:	4620      	mov	r0, r4
 80112dc:	f001 f820 	bl	8012320 <ucdr_alignment>
 80112e0:	4428      	add	r0, r5
 80112e2:	4420      	add	r0, r4
 80112e4:	bd38      	pop	{r3, r4, r5, pc}
 80112e6:	bf00      	nop

080112e8 <_TurnIndicatorsReport__cdr_deserialize>:
 80112e8:	b538      	push	{r3, r4, r5, lr}
 80112ea:	460c      	mov	r4, r1
 80112ec:	b179      	cbz	r1, 801130e <_TurnIndicatorsReport__cdr_deserialize+0x26>
 80112ee:	4605      	mov	r5, r0
 80112f0:	f000 f954 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80112f4:	4603      	mov	r3, r0
 80112f6:	4621      	mov	r1, r4
 80112f8:	4628      	mov	r0, r5
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	68db      	ldr	r3, [r3, #12]
 80112fe:	4798      	blx	r3
 8011300:	f104 0108 	add.w	r1, r4, #8
 8011304:	4628      	mov	r0, r5
 8011306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801130a:	f000 b98f 	b.w	801162c <ucdr_deserialize_uint8_t>
 801130e:	4608      	mov	r0, r1
 8011310:	bd38      	pop	{r3, r4, r5, pc}
 8011312:	bf00      	nop

08011314 <_TurnIndicatorsReport__cdr_serialize>:
 8011314:	b180      	cbz	r0, 8011338 <_TurnIndicatorsReport__cdr_serialize+0x24>
 8011316:	b538      	push	{r3, r4, r5, lr}
 8011318:	4604      	mov	r4, r0
 801131a:	460d      	mov	r5, r1
 801131c:	f000 f93e 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011320:	4603      	mov	r3, r0
 8011322:	4629      	mov	r1, r5
 8011324:	4620      	mov	r0, r4
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	689b      	ldr	r3, [r3, #8]
 801132a:	4798      	blx	r3
 801132c:	7a21      	ldrb	r1, [r4, #8]
 801132e:	4628      	mov	r0, r5
 8011330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011334:	f000 b964 	b.w	8011600 <ucdr_serialize_uint8_t>
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop

0801133c <_TurnIndicatorsReport__get_serialized_size>:
 801133c:	b150      	cbz	r0, 8011354 <_TurnIndicatorsReport__get_serialized_size+0x18>
 801133e:	2100      	movs	r1, #0
 8011340:	b510      	push	{r4, lr}
 8011342:	f000 f8c7 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8011346:	4604      	mov	r4, r0
 8011348:	2101      	movs	r1, #1
 801134a:	f000 ffe9 	bl	8012320 <ucdr_alignment>
 801134e:	4420      	add	r0, r4
 8011350:	3001      	adds	r0, #1
 8011352:	bd10      	pop	{r4, pc}
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop

08011358 <_TurnIndicatorsReport__max_serialized_size>:
 8011358:	b510      	push	{r4, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	2401      	movs	r4, #1
 801135e:	2100      	movs	r1, #0
 8011360:	f10d 0007 	add.w	r0, sp, #7
 8011364:	f88d 4007 	strb.w	r4, [sp, #7]
 8011368:	f000 f904 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 801136c:	4621      	mov	r1, r4
 801136e:	4604      	mov	r4, r0
 8011370:	f000 ffd6 	bl	8012320 <ucdr_alignment>
 8011374:	4420      	add	r0, r4
 8011376:	3001      	adds	r0, #1
 8011378:	b002      	add	sp, #8
 801137a:	bd10      	pop	{r4, pc}

0801137c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 801137c:	4800      	ldr	r0, [pc, #0]	@ (8011380 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 801137e:	4770      	bx	lr
 8011380:	24000b94 	.word	0x24000b94

08011384 <get_serialized_size_autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8011384:	b1c8      	cbz	r0, 80113ba <get_serialized_size_autoware_auto_vehicle_msgs__msg__VelocityReport+0x36>
 8011386:	b570      	push	{r4, r5, r6, lr}
 8011388:	460d      	mov	r5, r1
 801138a:	f001 f943 	bl	8012614 <get_serialized_size_std_msgs__msg__Header>
 801138e:	2104      	movs	r1, #4
 8011390:	182e      	adds	r6, r5, r0
 8011392:	f1c5 0504 	rsb	r5, r5, #4
 8011396:	4630      	mov	r0, r6
 8011398:	f000 ffc2 	bl	8012320 <ucdr_alignment>
 801139c:	2104      	movs	r1, #4
 801139e:	1844      	adds	r4, r0, r1
 80113a0:	4434      	add	r4, r6
 80113a2:	4620      	mov	r0, r4
 80113a4:	f000 ffbc 	bl	8012320 <ucdr_alignment>
 80113a8:	2104      	movs	r1, #4
 80113aa:	4408      	add	r0, r1
 80113ac:	4404      	add	r4, r0
 80113ae:	4620      	mov	r0, r4
 80113b0:	f000 ffb6 	bl	8012320 <ucdr_alignment>
 80113b4:	4428      	add	r0, r5
 80113b6:	4420      	add	r0, r4
 80113b8:	bd70      	pop	{r4, r5, r6, pc}
 80113ba:	4770      	bx	lr

080113bc <_VelocityReport__cdr_deserialize>:
 80113bc:	b538      	push	{r3, r4, r5, lr}
 80113be:	460c      	mov	r4, r1
 80113c0:	b1c9      	cbz	r1, 80113f6 <_VelocityReport__cdr_deserialize+0x3a>
 80113c2:	4605      	mov	r5, r0
 80113c4:	f001 f9aa 	bl	801271c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80113c8:	4603      	mov	r3, r0
 80113ca:	4621      	mov	r1, r4
 80113cc:	4628      	mov	r0, r5
 80113ce:	685b      	ldr	r3, [r3, #4]
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	4798      	blx	r3
 80113d4:	f104 0114 	add.w	r1, r4, #20
 80113d8:	4628      	mov	r0, r5
 80113da:	f000 fd53 	bl	8011e84 <ucdr_deserialize_float>
 80113de:	f104 0118 	add.w	r1, r4, #24
 80113e2:	4628      	mov	r0, r5
 80113e4:	f000 fd4e 	bl	8011e84 <ucdr_deserialize_float>
 80113e8:	f104 011c 	add.w	r1, r4, #28
 80113ec:	4628      	mov	r0, r5
 80113ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113f2:	f000 bd47 	b.w	8011e84 <ucdr_deserialize_float>
 80113f6:	4608      	mov	r0, r1
 80113f8:	bd38      	pop	{r3, r4, r5, pc}
 80113fa:	bf00      	nop

080113fc <_VelocityReport__cdr_serialize>:
 80113fc:	b1d8      	cbz	r0, 8011436 <_VelocityReport__cdr_serialize+0x3a>
 80113fe:	b538      	push	{r3, r4, r5, lr}
 8011400:	4604      	mov	r4, r0
 8011402:	460d      	mov	r5, r1
 8011404:	f001 f98a 	bl	801271c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011408:	4603      	mov	r3, r0
 801140a:	4629      	mov	r1, r5
 801140c:	4620      	mov	r0, r4
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	689b      	ldr	r3, [r3, #8]
 8011412:	4798      	blx	r3
 8011414:	ed94 0a05 	vldr	s0, [r4, #20]
 8011418:	4628      	mov	r0, r5
 801141a:	f000 fc9b 	bl	8011d54 <ucdr_serialize_float>
 801141e:	ed94 0a06 	vldr	s0, [r4, #24]
 8011422:	4628      	mov	r0, r5
 8011424:	f000 fc96 	bl	8011d54 <ucdr_serialize_float>
 8011428:	ed94 0a07 	vldr	s0, [r4, #28]
 801142c:	4628      	mov	r0, r5
 801142e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011432:	f000 bc8f 	b.w	8011d54 <ucdr_serialize_float>
 8011436:	4770      	bx	lr

08011438 <_VelocityReport__get_serialized_size>:
 8011438:	b1b0      	cbz	r0, 8011468 <_VelocityReport__get_serialized_size+0x30>
 801143a:	2100      	movs	r1, #0
 801143c:	b510      	push	{r4, lr}
 801143e:	f001 f8e9 	bl	8012614 <get_serialized_size_std_msgs__msg__Header>
 8011442:	4604      	mov	r4, r0
 8011444:	2104      	movs	r1, #4
 8011446:	f000 ff6b 	bl	8012320 <ucdr_alignment>
 801144a:	2104      	movs	r1, #4
 801144c:	4420      	add	r0, r4
 801144e:	1844      	adds	r4, r0, r1
 8011450:	4620      	mov	r0, r4
 8011452:	f000 ff65 	bl	8012320 <ucdr_alignment>
 8011456:	2104      	movs	r1, #4
 8011458:	4408      	add	r0, r1
 801145a:	4404      	add	r4, r0
 801145c:	4620      	mov	r0, r4
 801145e:	f000 ff5f 	bl	8012320 <ucdr_alignment>
 8011462:	3004      	adds	r0, #4
 8011464:	4420      	add	r0, r4
 8011466:	bd10      	pop	{r4, pc}
 8011468:	4770      	bx	lr
 801146a:	bf00      	nop

0801146c <_VelocityReport__max_serialized_size>:
 801146c:	b510      	push	{r4, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	2301      	movs	r3, #1
 8011472:	2100      	movs	r1, #0
 8011474:	f10d 0007 	add.w	r0, sp, #7
 8011478:	f88d 3007 	strb.w	r3, [sp, #7]
 801147c:	f001 f944 	bl	8012708 <max_serialized_size_std_msgs__msg__Header>
 8011480:	4604      	mov	r4, r0
 8011482:	2104      	movs	r1, #4
 8011484:	f000 ff4c 	bl	8012320 <ucdr_alignment>
 8011488:	2104      	movs	r1, #4
 801148a:	4420      	add	r0, r4
 801148c:	1844      	adds	r4, r0, r1
 801148e:	4620      	mov	r0, r4
 8011490:	f000 ff46 	bl	8012320 <ucdr_alignment>
 8011494:	2104      	movs	r1, #4
 8011496:	4408      	add	r0, r1
 8011498:	4404      	add	r4, r0
 801149a:	4620      	mov	r0, r4
 801149c:	f000 ff40 	bl	8012320 <ucdr_alignment>
 80114a0:	3004      	adds	r0, #4
 80114a2:	4420      	add	r0, r4
 80114a4:	b002      	add	sp, #8
 80114a6:	bd10      	pop	{r4, pc}

080114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 80114a8:	4800      	ldr	r0, [pc, #0]	@ (80114ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x4>)
 80114aa:	4770      	bx	lr
 80114ac:	24000bbc 	.word	0x24000bbc

080114b0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 80114b0:	f001 bcd6 	b.w	8012e60 <builtin_interfaces__msg__Time__init>

080114b4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 80114b4:	f001 bcd8 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>

080114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80114b8:	4b04      	ldr	r3, [pc, #16]	@ (80114cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	b10a      	cbz	r2, 80114c2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 80114be:	4803      	ldr	r0, [pc, #12]	@ (80114cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80114c0:	4770      	bx	lr
 80114c2:	4a03      	ldr	r2, [pc, #12]	@ (80114d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 80114c4:	4801      	ldr	r0, [pc, #4]	@ (80114cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80114c6:	6812      	ldr	r2, [r2, #0]
 80114c8:	601a      	str	r2, [r3, #0]
 80114ca:	4770      	bx	lr
 80114cc:	24000c5c 	.word	0x24000c5c
 80114d0:	24000d2c 	.word	0x24000d2c

080114d4 <get_serialized_size_builtin_interfaces__msg__Time>:
 80114d4:	b180      	cbz	r0, 80114f8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80114d6:	b538      	push	{r3, r4, r5, lr}
 80114d8:	460d      	mov	r5, r1
 80114da:	2104      	movs	r1, #4
 80114dc:	4628      	mov	r0, r5
 80114de:	f000 ff1f 	bl	8012320 <ucdr_alignment>
 80114e2:	1d2b      	adds	r3, r5, #4
 80114e4:	f1c5 0504 	rsb	r5, r5, #4
 80114e8:	2104      	movs	r1, #4
 80114ea:	181c      	adds	r4, r3, r0
 80114ec:	4620      	mov	r0, r4
 80114ee:	f000 ff17 	bl	8012320 <ucdr_alignment>
 80114f2:	4428      	add	r0, r5
 80114f4:	4420      	add	r0, r4
 80114f6:	bd38      	pop	{r3, r4, r5, pc}
 80114f8:	4770      	bx	lr
 80114fa:	bf00      	nop

080114fc <_Time__cdr_deserialize>:
 80114fc:	b538      	push	{r3, r4, r5, lr}
 80114fe:	460c      	mov	r4, r1
 8011500:	b141      	cbz	r1, 8011514 <_Time__cdr_deserialize+0x18>
 8011502:	4605      	mov	r5, r0
 8011504:	f000 fb96 	bl	8011c34 <ucdr_deserialize_int32_t>
 8011508:	1d21      	adds	r1, r4, #4
 801150a:	4628      	mov	r0, r5
 801150c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011510:	f000 b9d2 	b.w	80118b8 <ucdr_deserialize_uint32_t>
 8011514:	4608      	mov	r0, r1
 8011516:	bd38      	pop	{r3, r4, r5, pc}

08011518 <_Time__cdr_serialize>:
 8011518:	b160      	cbz	r0, 8011534 <_Time__cdr_serialize+0x1c>
 801151a:	b538      	push	{r3, r4, r5, lr}
 801151c:	460d      	mov	r5, r1
 801151e:	4604      	mov	r4, r0
 8011520:	6801      	ldr	r1, [r0, #0]
 8011522:	4628      	mov	r0, r5
 8011524:	f000 faee 	bl	8011b04 <ucdr_serialize_int32_t>
 8011528:	6861      	ldr	r1, [r4, #4]
 801152a:	4628      	mov	r0, r5
 801152c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011530:	f000 b892 	b.w	8011658 <ucdr_serialize_uint32_t>
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop

08011538 <_Time__get_serialized_size>:
 8011538:	b160      	cbz	r0, 8011554 <_Time__get_serialized_size+0x1c>
 801153a:	2104      	movs	r1, #4
 801153c:	2000      	movs	r0, #0
 801153e:	b510      	push	{r4, lr}
 8011540:	f000 feee 	bl	8012320 <ucdr_alignment>
 8011544:	2104      	movs	r1, #4
 8011546:	1844      	adds	r4, r0, r1
 8011548:	4620      	mov	r0, r4
 801154a:	f000 fee9 	bl	8012320 <ucdr_alignment>
 801154e:	3004      	adds	r0, #4
 8011550:	4420      	add	r0, r4
 8011552:	bd10      	pop	{r4, pc}
 8011554:	4770      	bx	lr
 8011556:	bf00      	nop

08011558 <_Time__max_serialized_size>:
 8011558:	b510      	push	{r4, lr}
 801155a:	2104      	movs	r1, #4
 801155c:	2000      	movs	r0, #0
 801155e:	f000 fedf 	bl	8012320 <ucdr_alignment>
 8011562:	2104      	movs	r1, #4
 8011564:	1844      	adds	r4, r0, r1
 8011566:	4620      	mov	r0, r4
 8011568:	f000 feda 	bl	8012320 <ucdr_alignment>
 801156c:	3004      	adds	r0, #4
 801156e:	4420      	add	r0, r4
 8011570:	bd10      	pop	{r4, pc}
 8011572:	bf00      	nop

08011574 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011574:	b538      	push	{r3, r4, r5, lr}
 8011576:	460c      	mov	r4, r1
 8011578:	2301      	movs	r3, #1
 801157a:	2104      	movs	r1, #4
 801157c:	1d25      	adds	r5, r4, #4
 801157e:	7003      	strb	r3, [r0, #0]
 8011580:	4620      	mov	r0, r4
 8011582:	f1c4 0404 	rsb	r4, r4, #4
 8011586:	f000 fecb 	bl	8012320 <ucdr_alignment>
 801158a:	4405      	add	r5, r0
 801158c:	2104      	movs	r1, #4
 801158e:	4628      	mov	r0, r5
 8011590:	f000 fec6 	bl	8012320 <ucdr_alignment>
 8011594:	4420      	add	r0, r4
 8011596:	4428      	add	r0, r5
 8011598:	bd38      	pop	{r3, r4, r5, pc}
 801159a:	bf00      	nop

0801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801159c:	4800      	ldr	r0, [pc, #0]	@ (80115a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801159e:	4770      	bx	lr
 80115a0:	24000c68 	.word	0x24000c68

080115a4 <ucdr_serialize_bool>:
 80115a4:	b538      	push	{r3, r4, r5, lr}
 80115a6:	460d      	mov	r5, r1
 80115a8:	2101      	movs	r1, #1
 80115aa:	4604      	mov	r4, r0
 80115ac:	f000 fe9c 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 80115b0:	b148      	cbz	r0, 80115c6 <ucdr_serialize_bool+0x22>
 80115b2:	68a3      	ldr	r3, [r4, #8]
 80115b4:	2101      	movs	r1, #1
 80115b6:	701d      	strb	r5, [r3, #0]
 80115b8:	68a2      	ldr	r2, [r4, #8]
 80115ba:	6923      	ldr	r3, [r4, #16]
 80115bc:	440a      	add	r2, r1
 80115be:	7561      	strb	r1, [r4, #21]
 80115c0:	440b      	add	r3, r1
 80115c2:	60a2      	str	r2, [r4, #8]
 80115c4:	6123      	str	r3, [r4, #16]
 80115c6:	7da0      	ldrb	r0, [r4, #22]
 80115c8:	f080 0001 	eor.w	r0, r0, #1
 80115cc:	bd38      	pop	{r3, r4, r5, pc}
 80115ce:	bf00      	nop

080115d0 <ucdr_deserialize_bool>:
 80115d0:	b538      	push	{r3, r4, r5, lr}
 80115d2:	460d      	mov	r5, r1
 80115d4:	2101      	movs	r1, #1
 80115d6:	4604      	mov	r4, r0
 80115d8:	f000 fe86 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 80115dc:	b160      	cbz	r0, 80115f8 <ucdr_deserialize_bool+0x28>
 80115de:	68a2      	ldr	r2, [r4, #8]
 80115e0:	2101      	movs	r1, #1
 80115e2:	6923      	ldr	r3, [r4, #16]
 80115e4:	f812 0b01 	ldrb.w	r0, [r2], #1
 80115e8:	440b      	add	r3, r1
 80115ea:	3800      	subs	r0, #0
 80115ec:	bf18      	it	ne
 80115ee:	2001      	movne	r0, #1
 80115f0:	7028      	strb	r0, [r5, #0]
 80115f2:	60a2      	str	r2, [r4, #8]
 80115f4:	6123      	str	r3, [r4, #16]
 80115f6:	7561      	strb	r1, [r4, #21]
 80115f8:	7da0      	ldrb	r0, [r4, #22]
 80115fa:	f080 0001 	eor.w	r0, r0, #1
 80115fe:	bd38      	pop	{r3, r4, r5, pc}

08011600 <ucdr_serialize_uint8_t>:
 8011600:	b538      	push	{r3, r4, r5, lr}
 8011602:	460d      	mov	r5, r1
 8011604:	2101      	movs	r1, #1
 8011606:	4604      	mov	r4, r0
 8011608:	f000 fe6e 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 801160c:	b148      	cbz	r0, 8011622 <ucdr_serialize_uint8_t+0x22>
 801160e:	68a3      	ldr	r3, [r4, #8]
 8011610:	2101      	movs	r1, #1
 8011612:	701d      	strb	r5, [r3, #0]
 8011614:	68a2      	ldr	r2, [r4, #8]
 8011616:	6923      	ldr	r3, [r4, #16]
 8011618:	440a      	add	r2, r1
 801161a:	7561      	strb	r1, [r4, #21]
 801161c:	440b      	add	r3, r1
 801161e:	60a2      	str	r2, [r4, #8]
 8011620:	6123      	str	r3, [r4, #16]
 8011622:	7da0      	ldrb	r0, [r4, #22]
 8011624:	f080 0001 	eor.w	r0, r0, #1
 8011628:	bd38      	pop	{r3, r4, r5, pc}
 801162a:	bf00      	nop

0801162c <ucdr_deserialize_uint8_t>:
 801162c:	b538      	push	{r3, r4, r5, lr}
 801162e:	460d      	mov	r5, r1
 8011630:	2101      	movs	r1, #1
 8011632:	4604      	mov	r4, r0
 8011634:	f000 fe58 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011638:	b150      	cbz	r0, 8011650 <ucdr_deserialize_uint8_t+0x24>
 801163a:	68a3      	ldr	r3, [r4, #8]
 801163c:	2101      	movs	r1, #1
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	702b      	strb	r3, [r5, #0]
 8011642:	68a2      	ldr	r2, [r4, #8]
 8011644:	6923      	ldr	r3, [r4, #16]
 8011646:	440a      	add	r2, r1
 8011648:	7561      	strb	r1, [r4, #21]
 801164a:	440b      	add	r3, r1
 801164c:	60a2      	str	r2, [r4, #8]
 801164e:	6123      	str	r3, [r4, #16]
 8011650:	7da0      	ldrb	r0, [r4, #22]
 8011652:	f080 0001 	eor.w	r0, r0, #1
 8011656:	bd38      	pop	{r3, r4, r5, pc}

08011658 <ucdr_serialize_uint32_t>:
 8011658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801165c:	b082      	sub	sp, #8
 801165e:	4604      	mov	r4, r0
 8011660:	9101      	str	r1, [sp, #4]
 8011662:	2104      	movs	r1, #4
 8011664:	f000 fe64 	bl	8012330 <ucdr_buffer_alignment>
 8011668:	4601      	mov	r1, r0
 801166a:	4620      	mov	r0, r4
 801166c:	7d67      	ldrb	r7, [r4, #21]
 801166e:	f000 fea3 	bl	80123b8 <ucdr_advance_buffer>
 8011672:	2104      	movs	r1, #4
 8011674:	4620      	mov	r0, r4
 8011676:	f000 fe2b 	bl	80122d0 <ucdr_check_buffer_available_for>
 801167a:	2800      	cmp	r0, #0
 801167c:	d139      	bne.n	80116f2 <ucdr_serialize_uint32_t+0x9a>
 801167e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011682:	42ab      	cmp	r3, r5
 8011684:	d930      	bls.n	80116e8 <ucdr_serialize_uint32_t+0x90>
 8011686:	1b5e      	subs	r6, r3, r5
 8011688:	60a3      	str	r3, [r4, #8]
 801168a:	6923      	ldr	r3, [r4, #16]
 801168c:	4620      	mov	r0, r4
 801168e:	f1c6 0804 	rsb	r8, r6, #4
 8011692:	4433      	add	r3, r6
 8011694:	4641      	mov	r1, r8
 8011696:	6123      	str	r3, [r4, #16]
 8011698:	f000 fe26 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 801169c:	2800      	cmp	r0, #0
 801169e:	d04c      	beq.n	801173a <ucdr_serialize_uint32_t+0xe2>
 80116a0:	7d23      	ldrb	r3, [r4, #20]
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d063      	beq.n	801176e <ucdr_serialize_uint32_t+0x116>
 80116a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80116aa:	702b      	strb	r3, [r5, #0]
 80116ac:	2e00      	cmp	r6, #0
 80116ae:	d051      	beq.n	8011754 <ucdr_serialize_uint32_t+0xfc>
 80116b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80116b4:	2e01      	cmp	r6, #1
 80116b6:	706b      	strb	r3, [r5, #1]
 80116b8:	d050      	beq.n	801175c <ucdr_serialize_uint32_t+0x104>
 80116ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80116be:	2e02      	cmp	r6, #2
 80116c0:	70ab      	strb	r3, [r5, #2]
 80116c2:	d04f      	beq.n	8011764 <ucdr_serialize_uint32_t+0x10c>
 80116c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80116c8:	70eb      	strb	r3, [r5, #3]
 80116ca:	6923      	ldr	r3, [r4, #16]
 80116cc:	2104      	movs	r1, #4
 80116ce:	68a2      	ldr	r2, [r4, #8]
 80116d0:	3304      	adds	r3, #4
 80116d2:	7da0      	ldrb	r0, [r4, #22]
 80116d4:	4442      	add	r2, r8
 80116d6:	7561      	strb	r1, [r4, #21]
 80116d8:	1b9e      	subs	r6, r3, r6
 80116da:	f080 0001 	eor.w	r0, r0, #1
 80116de:	60a2      	str	r2, [r4, #8]
 80116e0:	6126      	str	r6, [r4, #16]
 80116e2:	b002      	add	sp, #8
 80116e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116e8:	2104      	movs	r1, #4
 80116ea:	4620      	mov	r0, r4
 80116ec:	f000 fdfc 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 80116f0:	b1d0      	cbz	r0, 8011728 <ucdr_serialize_uint32_t+0xd0>
 80116f2:	7d23      	ldrb	r3, [r4, #20]
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	68a3      	ldr	r3, [r4, #8]
 80116f8:	d01c      	beq.n	8011734 <ucdr_serialize_uint32_t+0xdc>
 80116fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80116fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011702:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011706:	7018      	strb	r0, [r3, #0]
 8011708:	68a3      	ldr	r3, [r4, #8]
 801170a:	705a      	strb	r2, [r3, #1]
 801170c:	68a3      	ldr	r3, [r4, #8]
 801170e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011712:	7099      	strb	r1, [r3, #2]
 8011714:	68a3      	ldr	r3, [r4, #8]
 8011716:	70da      	strb	r2, [r3, #3]
 8011718:	2104      	movs	r1, #4
 801171a:	68a2      	ldr	r2, [r4, #8]
 801171c:	6923      	ldr	r3, [r4, #16]
 801171e:	440a      	add	r2, r1
 8011720:	7561      	strb	r1, [r4, #21]
 8011722:	440b      	add	r3, r1
 8011724:	60a2      	str	r2, [r4, #8]
 8011726:	6123      	str	r3, [r4, #16]
 8011728:	7da0      	ldrb	r0, [r4, #22]
 801172a:	f080 0001 	eor.w	r0, r0, #1
 801172e:	b002      	add	sp, #8
 8011730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011734:	9a01      	ldr	r2, [sp, #4]
 8011736:	601a      	str	r2, [r3, #0]
 8011738:	e7ee      	b.n	8011718 <ucdr_serialize_uint32_t+0xc0>
 801173a:	68a2      	ldr	r2, [r4, #8]
 801173c:	6923      	ldr	r3, [r4, #16]
 801173e:	7da0      	ldrb	r0, [r4, #22]
 8011740:	1b92      	subs	r2, r2, r6
 8011742:	1b9b      	subs	r3, r3, r6
 8011744:	7567      	strb	r7, [r4, #21]
 8011746:	f080 0001 	eor.w	r0, r0, #1
 801174a:	60a2      	str	r2, [r4, #8]
 801174c:	6123      	str	r3, [r4, #16]
 801174e:	b002      	add	sp, #8
 8011750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011754:	68a3      	ldr	r3, [r4, #8]
 8011756:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801175a:	701a      	strb	r2, [r3, #0]
 801175c:	68a3      	ldr	r3, [r4, #8]
 801175e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011762:	701a      	strb	r2, [r3, #0]
 8011764:	68a3      	ldr	r3, [r4, #8]
 8011766:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801176a:	701a      	strb	r2, [r3, #0]
 801176c:	e7ad      	b.n	80116ca <ucdr_serialize_uint32_t+0x72>
 801176e:	4628      	mov	r0, r5
 8011770:	ad01      	add	r5, sp, #4
 8011772:	4632      	mov	r2, r6
 8011774:	4629      	mov	r1, r5
 8011776:	f002 fa7a 	bl	8013c6e <memcpy>
 801177a:	4642      	mov	r2, r8
 801177c:	19a9      	adds	r1, r5, r6
 801177e:	68a0      	ldr	r0, [r4, #8]
 8011780:	f002 fa75 	bl	8013c6e <memcpy>
 8011784:	e7a1      	b.n	80116ca <ucdr_serialize_uint32_t+0x72>
 8011786:	bf00      	nop

08011788 <ucdr_serialize_endian_uint32_t>:
 8011788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801178c:	4604      	mov	r4, r0
 801178e:	b083      	sub	sp, #12
 8011790:	460d      	mov	r5, r1
 8011792:	2104      	movs	r1, #4
 8011794:	9201      	str	r2, [sp, #4]
 8011796:	f000 fdcb 	bl	8012330 <ucdr_buffer_alignment>
 801179a:	4601      	mov	r1, r0
 801179c:	4620      	mov	r0, r4
 801179e:	f894 8015 	ldrb.w	r8, [r4, #21]
 80117a2:	f000 fe09 	bl	80123b8 <ucdr_advance_buffer>
 80117a6:	2104      	movs	r1, #4
 80117a8:	4620      	mov	r0, r4
 80117aa:	f000 fd91 	bl	80122d0 <ucdr_check_buffer_available_for>
 80117ae:	2800      	cmp	r0, #0
 80117b0:	d138      	bne.n	8011824 <ucdr_serialize_endian_uint32_t+0x9c>
 80117b2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80117b6:	42b7      	cmp	r7, r6
 80117b8:	d92f      	bls.n	801181a <ucdr_serialize_endian_uint32_t+0x92>
 80117ba:	6923      	ldr	r3, [r4, #16]
 80117bc:	4620      	mov	r0, r4
 80117be:	60a7      	str	r7, [r4, #8]
 80117c0:	1bbf      	subs	r7, r7, r6
 80117c2:	443b      	add	r3, r7
 80117c4:	f1c7 0904 	rsb	r9, r7, #4
 80117c8:	6123      	str	r3, [r4, #16]
 80117ca:	4649      	mov	r1, r9
 80117cc:	f000 fd8c 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 80117d0:	2800      	cmp	r0, #0
 80117d2:	d04a      	beq.n	801186a <ucdr_serialize_endian_uint32_t+0xe2>
 80117d4:	2d01      	cmp	r5, #1
 80117d6:	d063      	beq.n	80118a0 <ucdr_serialize_endian_uint32_t+0x118>
 80117d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80117dc:	7033      	strb	r3, [r6, #0]
 80117de:	2f00      	cmp	r7, #0
 80117e0:	d051      	beq.n	8011886 <ucdr_serialize_endian_uint32_t+0xfe>
 80117e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80117e6:	2f01      	cmp	r7, #1
 80117e8:	7073      	strb	r3, [r6, #1]
 80117ea:	d050      	beq.n	801188e <ucdr_serialize_endian_uint32_t+0x106>
 80117ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80117f0:	2f02      	cmp	r7, #2
 80117f2:	70b3      	strb	r3, [r6, #2]
 80117f4:	d04f      	beq.n	8011896 <ucdr_serialize_endian_uint32_t+0x10e>
 80117f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80117fa:	70f3      	strb	r3, [r6, #3]
 80117fc:	6923      	ldr	r3, [r4, #16]
 80117fe:	2104      	movs	r1, #4
 8011800:	68a2      	ldr	r2, [r4, #8]
 8011802:	7da0      	ldrb	r0, [r4, #22]
 8011804:	3304      	adds	r3, #4
 8011806:	444a      	add	r2, r9
 8011808:	7561      	strb	r1, [r4, #21]
 801180a:	1bdb      	subs	r3, r3, r7
 801180c:	f080 0001 	eor.w	r0, r0, #1
 8011810:	60a2      	str	r2, [r4, #8]
 8011812:	6123      	str	r3, [r4, #16]
 8011814:	b003      	add	sp, #12
 8011816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801181a:	2104      	movs	r1, #4
 801181c:	4620      	mov	r0, r4
 801181e:	f000 fd63 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011822:	b1c8      	cbz	r0, 8011858 <ucdr_serialize_endian_uint32_t+0xd0>
 8011824:	2d01      	cmp	r5, #1
 8011826:	68a3      	ldr	r3, [r4, #8]
 8011828:	d01c      	beq.n	8011864 <ucdr_serialize_endian_uint32_t+0xdc>
 801182a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801182e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011832:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011836:	7018      	strb	r0, [r3, #0]
 8011838:	68a3      	ldr	r3, [r4, #8]
 801183a:	705a      	strb	r2, [r3, #1]
 801183c:	68a3      	ldr	r3, [r4, #8]
 801183e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011842:	7099      	strb	r1, [r3, #2]
 8011844:	68a3      	ldr	r3, [r4, #8]
 8011846:	70da      	strb	r2, [r3, #3]
 8011848:	2104      	movs	r1, #4
 801184a:	68a2      	ldr	r2, [r4, #8]
 801184c:	6923      	ldr	r3, [r4, #16]
 801184e:	440a      	add	r2, r1
 8011850:	7561      	strb	r1, [r4, #21]
 8011852:	440b      	add	r3, r1
 8011854:	60a2      	str	r2, [r4, #8]
 8011856:	6123      	str	r3, [r4, #16]
 8011858:	7da0      	ldrb	r0, [r4, #22]
 801185a:	f080 0001 	eor.w	r0, r0, #1
 801185e:	b003      	add	sp, #12
 8011860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011864:	9a01      	ldr	r2, [sp, #4]
 8011866:	601a      	str	r2, [r3, #0]
 8011868:	e7ee      	b.n	8011848 <ucdr_serialize_endian_uint32_t+0xc0>
 801186a:	68a2      	ldr	r2, [r4, #8]
 801186c:	6923      	ldr	r3, [r4, #16]
 801186e:	7da0      	ldrb	r0, [r4, #22]
 8011870:	1bd2      	subs	r2, r2, r7
 8011872:	1bdb      	subs	r3, r3, r7
 8011874:	f884 8015 	strb.w	r8, [r4, #21]
 8011878:	f080 0001 	eor.w	r0, r0, #1
 801187c:	60a2      	str	r2, [r4, #8]
 801187e:	6123      	str	r3, [r4, #16]
 8011880:	b003      	add	sp, #12
 8011882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011886:	68a3      	ldr	r3, [r4, #8]
 8011888:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801188c:	701a      	strb	r2, [r3, #0]
 801188e:	68a3      	ldr	r3, [r4, #8]
 8011890:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011894:	701a      	strb	r2, [r3, #0]
 8011896:	68a3      	ldr	r3, [r4, #8]
 8011898:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801189c:	701a      	strb	r2, [r3, #0]
 801189e:	e7ad      	b.n	80117fc <ucdr_serialize_endian_uint32_t+0x74>
 80118a0:	ad01      	add	r5, sp, #4
 80118a2:	463a      	mov	r2, r7
 80118a4:	4630      	mov	r0, r6
 80118a6:	4629      	mov	r1, r5
 80118a8:	f002 f9e1 	bl	8013c6e <memcpy>
 80118ac:	464a      	mov	r2, r9
 80118ae:	19e9      	adds	r1, r5, r7
 80118b0:	68a0      	ldr	r0, [r4, #8]
 80118b2:	f002 f9dc 	bl	8013c6e <memcpy>
 80118b6:	e7a1      	b.n	80117fc <ucdr_serialize_endian_uint32_t+0x74>

080118b8 <ucdr_deserialize_uint32_t>:
 80118b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118bc:	4604      	mov	r4, r0
 80118be:	460d      	mov	r5, r1
 80118c0:	2104      	movs	r1, #4
 80118c2:	f000 fd35 	bl	8012330 <ucdr_buffer_alignment>
 80118c6:	4601      	mov	r1, r0
 80118c8:	4620      	mov	r0, r4
 80118ca:	f894 8015 	ldrb.w	r8, [r4, #21]
 80118ce:	f000 fd73 	bl	80123b8 <ucdr_advance_buffer>
 80118d2:	2104      	movs	r1, #4
 80118d4:	4620      	mov	r0, r4
 80118d6:	f000 fcfb 	bl	80122d0 <ucdr_check_buffer_available_for>
 80118da:	2800      	cmp	r0, #0
 80118dc:	d138      	bne.n	8011950 <ucdr_deserialize_uint32_t+0x98>
 80118de:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80118e2:	42b7      	cmp	r7, r6
 80118e4:	d92f      	bls.n	8011946 <ucdr_deserialize_uint32_t+0x8e>
 80118e6:	6923      	ldr	r3, [r4, #16]
 80118e8:	4620      	mov	r0, r4
 80118ea:	60a7      	str	r7, [r4, #8]
 80118ec:	1bbf      	subs	r7, r7, r6
 80118ee:	443b      	add	r3, r7
 80118f0:	f1c7 0904 	rsb	r9, r7, #4
 80118f4:	6123      	str	r3, [r4, #16]
 80118f6:	4649      	mov	r1, r9
 80118f8:	f000 fcf6 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 80118fc:	2800      	cmp	r0, #0
 80118fe:	d046      	beq.n	801198e <ucdr_deserialize_uint32_t+0xd6>
 8011900:	7d23      	ldrb	r3, [r4, #20]
 8011902:	2b01      	cmp	r3, #1
 8011904:	d05c      	beq.n	80119c0 <ucdr_deserialize_uint32_t+0x108>
 8011906:	78f3      	ldrb	r3, [r6, #3]
 8011908:	702b      	strb	r3, [r5, #0]
 801190a:	2f00      	cmp	r7, #0
 801190c:	d04c      	beq.n	80119a8 <ucdr_deserialize_uint32_t+0xf0>
 801190e:	78b3      	ldrb	r3, [r6, #2]
 8011910:	2f01      	cmp	r7, #1
 8011912:	706b      	strb	r3, [r5, #1]
 8011914:	f105 0302 	add.w	r3, r5, #2
 8011918:	d04a      	beq.n	80119b0 <ucdr_deserialize_uint32_t+0xf8>
 801191a:	7873      	ldrb	r3, [r6, #1]
 801191c:	2f02      	cmp	r7, #2
 801191e:	70ab      	strb	r3, [r5, #2]
 8011920:	f105 0303 	add.w	r3, r5, #3
 8011924:	d048      	beq.n	80119b8 <ucdr_deserialize_uint32_t+0x100>
 8011926:	7833      	ldrb	r3, [r6, #0]
 8011928:	70eb      	strb	r3, [r5, #3]
 801192a:	6923      	ldr	r3, [r4, #16]
 801192c:	2104      	movs	r1, #4
 801192e:	68a2      	ldr	r2, [r4, #8]
 8011930:	3304      	adds	r3, #4
 8011932:	7da0      	ldrb	r0, [r4, #22]
 8011934:	444a      	add	r2, r9
 8011936:	7561      	strb	r1, [r4, #21]
 8011938:	1bdb      	subs	r3, r3, r7
 801193a:	f080 0001 	eor.w	r0, r0, #1
 801193e:	60a2      	str	r2, [r4, #8]
 8011940:	6123      	str	r3, [r4, #16]
 8011942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011946:	2104      	movs	r1, #4
 8011948:	4620      	mov	r0, r4
 801194a:	f000 fccd 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 801194e:	b1b0      	cbz	r0, 801197e <ucdr_deserialize_uint32_t+0xc6>
 8011950:	7d23      	ldrb	r3, [r4, #20]
 8011952:	2b01      	cmp	r3, #1
 8011954:	68a3      	ldr	r3, [r4, #8]
 8011956:	d017      	beq.n	8011988 <ucdr_deserialize_uint32_t+0xd0>
 8011958:	78db      	ldrb	r3, [r3, #3]
 801195a:	702b      	strb	r3, [r5, #0]
 801195c:	68a3      	ldr	r3, [r4, #8]
 801195e:	789b      	ldrb	r3, [r3, #2]
 8011960:	706b      	strb	r3, [r5, #1]
 8011962:	68a3      	ldr	r3, [r4, #8]
 8011964:	785b      	ldrb	r3, [r3, #1]
 8011966:	70ab      	strb	r3, [r5, #2]
 8011968:	68a3      	ldr	r3, [r4, #8]
 801196a:	781b      	ldrb	r3, [r3, #0]
 801196c:	70eb      	strb	r3, [r5, #3]
 801196e:	2104      	movs	r1, #4
 8011970:	68a2      	ldr	r2, [r4, #8]
 8011972:	6923      	ldr	r3, [r4, #16]
 8011974:	440a      	add	r2, r1
 8011976:	7561      	strb	r1, [r4, #21]
 8011978:	440b      	add	r3, r1
 801197a:	60a2      	str	r2, [r4, #8]
 801197c:	6123      	str	r3, [r4, #16]
 801197e:	7da0      	ldrb	r0, [r4, #22]
 8011980:	f080 0001 	eor.w	r0, r0, #1
 8011984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	602b      	str	r3, [r5, #0]
 801198c:	e7ef      	b.n	801196e <ucdr_deserialize_uint32_t+0xb6>
 801198e:	68a2      	ldr	r2, [r4, #8]
 8011990:	6923      	ldr	r3, [r4, #16]
 8011992:	1bd2      	subs	r2, r2, r7
 8011994:	7da0      	ldrb	r0, [r4, #22]
 8011996:	1bdb      	subs	r3, r3, r7
 8011998:	f884 8015 	strb.w	r8, [r4, #21]
 801199c:	f080 0001 	eor.w	r0, r0, #1
 80119a0:	60a2      	str	r2, [r4, #8]
 80119a2:	6123      	str	r3, [r4, #16]
 80119a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119a8:	68a3      	ldr	r3, [r4, #8]
 80119aa:	789b      	ldrb	r3, [r3, #2]
 80119ac:	706b      	strb	r3, [r5, #1]
 80119ae:	1cab      	adds	r3, r5, #2
 80119b0:	68a2      	ldr	r2, [r4, #8]
 80119b2:	7852      	ldrb	r2, [r2, #1]
 80119b4:	f803 2b01 	strb.w	r2, [r3], #1
 80119b8:	68a2      	ldr	r2, [r4, #8]
 80119ba:	7812      	ldrb	r2, [r2, #0]
 80119bc:	701a      	strb	r2, [r3, #0]
 80119be:	e7b4      	b.n	801192a <ucdr_deserialize_uint32_t+0x72>
 80119c0:	4631      	mov	r1, r6
 80119c2:	463a      	mov	r2, r7
 80119c4:	4628      	mov	r0, r5
 80119c6:	f002 f952 	bl	8013c6e <memcpy>
 80119ca:	464a      	mov	r2, r9
 80119cc:	19e8      	adds	r0, r5, r7
 80119ce:	68a1      	ldr	r1, [r4, #8]
 80119d0:	f002 f94d 	bl	8013c6e <memcpy>
 80119d4:	e7a9      	b.n	801192a <ucdr_deserialize_uint32_t+0x72>
 80119d6:	bf00      	nop

080119d8 <ucdr_deserialize_endian_uint32_t>:
 80119d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119dc:	4604      	mov	r4, r0
 80119de:	460e      	mov	r6, r1
 80119e0:	2104      	movs	r1, #4
 80119e2:	4615      	mov	r5, r2
 80119e4:	f000 fca4 	bl	8012330 <ucdr_buffer_alignment>
 80119e8:	4601      	mov	r1, r0
 80119ea:	4620      	mov	r0, r4
 80119ec:	f894 8015 	ldrb.w	r8, [r4, #21]
 80119f0:	f000 fce2 	bl	80123b8 <ucdr_advance_buffer>
 80119f4:	2104      	movs	r1, #4
 80119f6:	4620      	mov	r0, r4
 80119f8:	f000 fc6a 	bl	80122d0 <ucdr_check_buffer_available_for>
 80119fc:	2800      	cmp	r0, #0
 80119fe:	d13c      	bne.n	8011a7a <ucdr_deserialize_endian_uint32_t+0xa2>
 8011a00:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011a04:	42bb      	cmp	r3, r7
 8011a06:	d933      	bls.n	8011a70 <ucdr_deserialize_endian_uint32_t+0x98>
 8011a08:	eba3 0907 	sub.w	r9, r3, r7
 8011a0c:	60a3      	str	r3, [r4, #8]
 8011a0e:	6923      	ldr	r3, [r4, #16]
 8011a10:	4620      	mov	r0, r4
 8011a12:	f1c9 0a04 	rsb	sl, r9, #4
 8011a16:	444b      	add	r3, r9
 8011a18:	4651      	mov	r1, sl
 8011a1a:	6123      	str	r3, [r4, #16]
 8011a1c:	f000 fc64 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011a20:	2800      	cmp	r0, #0
 8011a22:	d048      	beq.n	8011ab6 <ucdr_deserialize_endian_uint32_t+0xde>
 8011a24:	2e01      	cmp	r6, #1
 8011a26:	d061      	beq.n	8011aec <ucdr_deserialize_endian_uint32_t+0x114>
 8011a28:	78fb      	ldrb	r3, [r7, #3]
 8011a2a:	702b      	strb	r3, [r5, #0]
 8011a2c:	f1b9 0f00 	cmp.w	r9, #0
 8011a30:	d050      	beq.n	8011ad4 <ucdr_deserialize_endian_uint32_t+0xfc>
 8011a32:	78bb      	ldrb	r3, [r7, #2]
 8011a34:	f1b9 0f01 	cmp.w	r9, #1
 8011a38:	706b      	strb	r3, [r5, #1]
 8011a3a:	f105 0302 	add.w	r3, r5, #2
 8011a3e:	d04d      	beq.n	8011adc <ucdr_deserialize_endian_uint32_t+0x104>
 8011a40:	787b      	ldrb	r3, [r7, #1]
 8011a42:	f1b9 0f02 	cmp.w	r9, #2
 8011a46:	70ab      	strb	r3, [r5, #2]
 8011a48:	f105 0303 	add.w	r3, r5, #3
 8011a4c:	d04a      	beq.n	8011ae4 <ucdr_deserialize_endian_uint32_t+0x10c>
 8011a4e:	783b      	ldrb	r3, [r7, #0]
 8011a50:	70eb      	strb	r3, [r5, #3]
 8011a52:	6923      	ldr	r3, [r4, #16]
 8011a54:	2104      	movs	r1, #4
 8011a56:	68a2      	ldr	r2, [r4, #8]
 8011a58:	3304      	adds	r3, #4
 8011a5a:	7da0      	ldrb	r0, [r4, #22]
 8011a5c:	4452      	add	r2, sl
 8011a5e:	7561      	strb	r1, [r4, #21]
 8011a60:	eba3 0309 	sub.w	r3, r3, r9
 8011a64:	f080 0001 	eor.w	r0, r0, #1
 8011a68:	60a2      	str	r2, [r4, #8]
 8011a6a:	6123      	str	r3, [r4, #16]
 8011a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a70:	2104      	movs	r1, #4
 8011a72:	4620      	mov	r0, r4
 8011a74:	f000 fc38 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011a78:	b1a8      	cbz	r0, 8011aa6 <ucdr_deserialize_endian_uint32_t+0xce>
 8011a7a:	2e01      	cmp	r6, #1
 8011a7c:	68a3      	ldr	r3, [r4, #8]
 8011a7e:	d017      	beq.n	8011ab0 <ucdr_deserialize_endian_uint32_t+0xd8>
 8011a80:	78db      	ldrb	r3, [r3, #3]
 8011a82:	702b      	strb	r3, [r5, #0]
 8011a84:	68a3      	ldr	r3, [r4, #8]
 8011a86:	789b      	ldrb	r3, [r3, #2]
 8011a88:	706b      	strb	r3, [r5, #1]
 8011a8a:	68a3      	ldr	r3, [r4, #8]
 8011a8c:	785b      	ldrb	r3, [r3, #1]
 8011a8e:	70ab      	strb	r3, [r5, #2]
 8011a90:	68a3      	ldr	r3, [r4, #8]
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	70eb      	strb	r3, [r5, #3]
 8011a96:	2104      	movs	r1, #4
 8011a98:	68a2      	ldr	r2, [r4, #8]
 8011a9a:	6923      	ldr	r3, [r4, #16]
 8011a9c:	440a      	add	r2, r1
 8011a9e:	7561      	strb	r1, [r4, #21]
 8011aa0:	440b      	add	r3, r1
 8011aa2:	60a2      	str	r2, [r4, #8]
 8011aa4:	6123      	str	r3, [r4, #16]
 8011aa6:	7da0      	ldrb	r0, [r4, #22]
 8011aa8:	f080 0001 	eor.w	r0, r0, #1
 8011aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	602b      	str	r3, [r5, #0]
 8011ab4:	e7ef      	b.n	8011a96 <ucdr_deserialize_endian_uint32_t+0xbe>
 8011ab6:	68a2      	ldr	r2, [r4, #8]
 8011ab8:	6923      	ldr	r3, [r4, #16]
 8011aba:	eba2 0209 	sub.w	r2, r2, r9
 8011abe:	7da0      	ldrb	r0, [r4, #22]
 8011ac0:	eba3 0309 	sub.w	r3, r3, r9
 8011ac4:	f884 8015 	strb.w	r8, [r4, #21]
 8011ac8:	f080 0001 	eor.w	r0, r0, #1
 8011acc:	60a2      	str	r2, [r4, #8]
 8011ace:	6123      	str	r3, [r4, #16]
 8011ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ad4:	68a3      	ldr	r3, [r4, #8]
 8011ad6:	789b      	ldrb	r3, [r3, #2]
 8011ad8:	706b      	strb	r3, [r5, #1]
 8011ada:	1cab      	adds	r3, r5, #2
 8011adc:	68a2      	ldr	r2, [r4, #8]
 8011ade:	7852      	ldrb	r2, [r2, #1]
 8011ae0:	f803 2b01 	strb.w	r2, [r3], #1
 8011ae4:	68a2      	ldr	r2, [r4, #8]
 8011ae6:	7812      	ldrb	r2, [r2, #0]
 8011ae8:	701a      	strb	r2, [r3, #0]
 8011aea:	e7b2      	b.n	8011a52 <ucdr_deserialize_endian_uint32_t+0x7a>
 8011aec:	4639      	mov	r1, r7
 8011aee:	464a      	mov	r2, r9
 8011af0:	4628      	mov	r0, r5
 8011af2:	f002 f8bc 	bl	8013c6e <memcpy>
 8011af6:	4652      	mov	r2, sl
 8011af8:	eb05 0009 	add.w	r0, r5, r9
 8011afc:	68a1      	ldr	r1, [r4, #8]
 8011afe:	f002 f8b6 	bl	8013c6e <memcpy>
 8011b02:	e7a6      	b.n	8011a52 <ucdr_deserialize_endian_uint32_t+0x7a>

08011b04 <ucdr_serialize_int32_t>:
 8011b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b08:	b082      	sub	sp, #8
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	9101      	str	r1, [sp, #4]
 8011b0e:	2104      	movs	r1, #4
 8011b10:	f000 fc0e 	bl	8012330 <ucdr_buffer_alignment>
 8011b14:	4601      	mov	r1, r0
 8011b16:	4620      	mov	r0, r4
 8011b18:	7d67      	ldrb	r7, [r4, #21]
 8011b1a:	f000 fc4d 	bl	80123b8 <ucdr_advance_buffer>
 8011b1e:	2104      	movs	r1, #4
 8011b20:	4620      	mov	r0, r4
 8011b22:	f000 fbd5 	bl	80122d0 <ucdr_check_buffer_available_for>
 8011b26:	2800      	cmp	r0, #0
 8011b28:	d139      	bne.n	8011b9e <ucdr_serialize_int32_t+0x9a>
 8011b2a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011b2e:	42ab      	cmp	r3, r5
 8011b30:	d930      	bls.n	8011b94 <ucdr_serialize_int32_t+0x90>
 8011b32:	1b5e      	subs	r6, r3, r5
 8011b34:	60a3      	str	r3, [r4, #8]
 8011b36:	6923      	ldr	r3, [r4, #16]
 8011b38:	4620      	mov	r0, r4
 8011b3a:	f1c6 0804 	rsb	r8, r6, #4
 8011b3e:	4433      	add	r3, r6
 8011b40:	4641      	mov	r1, r8
 8011b42:	6123      	str	r3, [r4, #16]
 8011b44:	f000 fbd0 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	d04c      	beq.n	8011be6 <ucdr_serialize_int32_t+0xe2>
 8011b4c:	7d23      	ldrb	r3, [r4, #20]
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	d063      	beq.n	8011c1a <ucdr_serialize_int32_t+0x116>
 8011b52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b56:	702b      	strb	r3, [r5, #0]
 8011b58:	2e00      	cmp	r6, #0
 8011b5a:	d051      	beq.n	8011c00 <ucdr_serialize_int32_t+0xfc>
 8011b5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011b60:	2e01      	cmp	r6, #1
 8011b62:	706b      	strb	r3, [r5, #1]
 8011b64:	d050      	beq.n	8011c08 <ucdr_serialize_int32_t+0x104>
 8011b66:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011b6a:	2e02      	cmp	r6, #2
 8011b6c:	70ab      	strb	r3, [r5, #2]
 8011b6e:	d04f      	beq.n	8011c10 <ucdr_serialize_int32_t+0x10c>
 8011b70:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011b74:	70eb      	strb	r3, [r5, #3]
 8011b76:	6923      	ldr	r3, [r4, #16]
 8011b78:	2104      	movs	r1, #4
 8011b7a:	68a2      	ldr	r2, [r4, #8]
 8011b7c:	3304      	adds	r3, #4
 8011b7e:	7da0      	ldrb	r0, [r4, #22]
 8011b80:	4442      	add	r2, r8
 8011b82:	7561      	strb	r1, [r4, #21]
 8011b84:	1b9e      	subs	r6, r3, r6
 8011b86:	f080 0001 	eor.w	r0, r0, #1
 8011b8a:	60a2      	str	r2, [r4, #8]
 8011b8c:	6126      	str	r6, [r4, #16]
 8011b8e:	b002      	add	sp, #8
 8011b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b94:	2104      	movs	r1, #4
 8011b96:	4620      	mov	r0, r4
 8011b98:	f000 fba6 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011b9c:	b1d0      	cbz	r0, 8011bd4 <ucdr_serialize_int32_t+0xd0>
 8011b9e:	7d23      	ldrb	r3, [r4, #20]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	68a3      	ldr	r3, [r4, #8]
 8011ba4:	d01c      	beq.n	8011be0 <ucdr_serialize_int32_t+0xdc>
 8011ba6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011baa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011bae:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011bb2:	7018      	strb	r0, [r3, #0]
 8011bb4:	68a3      	ldr	r3, [r4, #8]
 8011bb6:	705a      	strb	r2, [r3, #1]
 8011bb8:	68a3      	ldr	r3, [r4, #8]
 8011bba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011bbe:	7099      	strb	r1, [r3, #2]
 8011bc0:	68a3      	ldr	r3, [r4, #8]
 8011bc2:	70da      	strb	r2, [r3, #3]
 8011bc4:	2104      	movs	r1, #4
 8011bc6:	68a2      	ldr	r2, [r4, #8]
 8011bc8:	6923      	ldr	r3, [r4, #16]
 8011bca:	440a      	add	r2, r1
 8011bcc:	7561      	strb	r1, [r4, #21]
 8011bce:	440b      	add	r3, r1
 8011bd0:	60a2      	str	r2, [r4, #8]
 8011bd2:	6123      	str	r3, [r4, #16]
 8011bd4:	7da0      	ldrb	r0, [r4, #22]
 8011bd6:	f080 0001 	eor.w	r0, r0, #1
 8011bda:	b002      	add	sp, #8
 8011bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011be0:	9a01      	ldr	r2, [sp, #4]
 8011be2:	601a      	str	r2, [r3, #0]
 8011be4:	e7ee      	b.n	8011bc4 <ucdr_serialize_int32_t+0xc0>
 8011be6:	68a2      	ldr	r2, [r4, #8]
 8011be8:	6923      	ldr	r3, [r4, #16]
 8011bea:	7da0      	ldrb	r0, [r4, #22]
 8011bec:	1b92      	subs	r2, r2, r6
 8011bee:	1b9b      	subs	r3, r3, r6
 8011bf0:	7567      	strb	r7, [r4, #21]
 8011bf2:	f080 0001 	eor.w	r0, r0, #1
 8011bf6:	60a2      	str	r2, [r4, #8]
 8011bf8:	6123      	str	r3, [r4, #16]
 8011bfa:	b002      	add	sp, #8
 8011bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c00:	68a3      	ldr	r3, [r4, #8]
 8011c02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011c06:	701a      	strb	r2, [r3, #0]
 8011c08:	68a3      	ldr	r3, [r4, #8]
 8011c0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011c0e:	701a      	strb	r2, [r3, #0]
 8011c10:	68a3      	ldr	r3, [r4, #8]
 8011c12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011c16:	701a      	strb	r2, [r3, #0]
 8011c18:	e7ad      	b.n	8011b76 <ucdr_serialize_int32_t+0x72>
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	ad01      	add	r5, sp, #4
 8011c1e:	4632      	mov	r2, r6
 8011c20:	4629      	mov	r1, r5
 8011c22:	f002 f824 	bl	8013c6e <memcpy>
 8011c26:	4642      	mov	r2, r8
 8011c28:	19a9      	adds	r1, r5, r6
 8011c2a:	68a0      	ldr	r0, [r4, #8]
 8011c2c:	f002 f81f 	bl	8013c6e <memcpy>
 8011c30:	e7a1      	b.n	8011b76 <ucdr_serialize_int32_t+0x72>
 8011c32:	bf00      	nop

08011c34 <ucdr_deserialize_int32_t>:
 8011c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c38:	4604      	mov	r4, r0
 8011c3a:	460d      	mov	r5, r1
 8011c3c:	2104      	movs	r1, #4
 8011c3e:	f000 fb77 	bl	8012330 <ucdr_buffer_alignment>
 8011c42:	4601      	mov	r1, r0
 8011c44:	4620      	mov	r0, r4
 8011c46:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011c4a:	f000 fbb5 	bl	80123b8 <ucdr_advance_buffer>
 8011c4e:	2104      	movs	r1, #4
 8011c50:	4620      	mov	r0, r4
 8011c52:	f000 fb3d 	bl	80122d0 <ucdr_check_buffer_available_for>
 8011c56:	2800      	cmp	r0, #0
 8011c58:	d138      	bne.n	8011ccc <ucdr_deserialize_int32_t+0x98>
 8011c5a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011c5e:	42b7      	cmp	r7, r6
 8011c60:	d92f      	bls.n	8011cc2 <ucdr_deserialize_int32_t+0x8e>
 8011c62:	6923      	ldr	r3, [r4, #16]
 8011c64:	4620      	mov	r0, r4
 8011c66:	60a7      	str	r7, [r4, #8]
 8011c68:	1bbf      	subs	r7, r7, r6
 8011c6a:	443b      	add	r3, r7
 8011c6c:	f1c7 0904 	rsb	r9, r7, #4
 8011c70:	6123      	str	r3, [r4, #16]
 8011c72:	4649      	mov	r1, r9
 8011c74:	f000 fb38 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011c78:	2800      	cmp	r0, #0
 8011c7a:	d046      	beq.n	8011d0a <ucdr_deserialize_int32_t+0xd6>
 8011c7c:	7d23      	ldrb	r3, [r4, #20]
 8011c7e:	2b01      	cmp	r3, #1
 8011c80:	d05c      	beq.n	8011d3c <ucdr_deserialize_int32_t+0x108>
 8011c82:	78f3      	ldrb	r3, [r6, #3]
 8011c84:	702b      	strb	r3, [r5, #0]
 8011c86:	2f00      	cmp	r7, #0
 8011c88:	d04c      	beq.n	8011d24 <ucdr_deserialize_int32_t+0xf0>
 8011c8a:	78b3      	ldrb	r3, [r6, #2]
 8011c8c:	2f01      	cmp	r7, #1
 8011c8e:	706b      	strb	r3, [r5, #1]
 8011c90:	f105 0302 	add.w	r3, r5, #2
 8011c94:	d04a      	beq.n	8011d2c <ucdr_deserialize_int32_t+0xf8>
 8011c96:	7873      	ldrb	r3, [r6, #1]
 8011c98:	2f02      	cmp	r7, #2
 8011c9a:	70ab      	strb	r3, [r5, #2]
 8011c9c:	f105 0303 	add.w	r3, r5, #3
 8011ca0:	d048      	beq.n	8011d34 <ucdr_deserialize_int32_t+0x100>
 8011ca2:	7833      	ldrb	r3, [r6, #0]
 8011ca4:	70eb      	strb	r3, [r5, #3]
 8011ca6:	6923      	ldr	r3, [r4, #16]
 8011ca8:	2104      	movs	r1, #4
 8011caa:	68a2      	ldr	r2, [r4, #8]
 8011cac:	3304      	adds	r3, #4
 8011cae:	7da0      	ldrb	r0, [r4, #22]
 8011cb0:	444a      	add	r2, r9
 8011cb2:	7561      	strb	r1, [r4, #21]
 8011cb4:	1bdb      	subs	r3, r3, r7
 8011cb6:	f080 0001 	eor.w	r0, r0, #1
 8011cba:	60a2      	str	r2, [r4, #8]
 8011cbc:	6123      	str	r3, [r4, #16]
 8011cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cc2:	2104      	movs	r1, #4
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	f000 fb0f 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011cca:	b1b0      	cbz	r0, 8011cfa <ucdr_deserialize_int32_t+0xc6>
 8011ccc:	7d23      	ldrb	r3, [r4, #20]
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	68a3      	ldr	r3, [r4, #8]
 8011cd2:	d017      	beq.n	8011d04 <ucdr_deserialize_int32_t+0xd0>
 8011cd4:	78db      	ldrb	r3, [r3, #3]
 8011cd6:	702b      	strb	r3, [r5, #0]
 8011cd8:	68a3      	ldr	r3, [r4, #8]
 8011cda:	789b      	ldrb	r3, [r3, #2]
 8011cdc:	706b      	strb	r3, [r5, #1]
 8011cde:	68a3      	ldr	r3, [r4, #8]
 8011ce0:	785b      	ldrb	r3, [r3, #1]
 8011ce2:	70ab      	strb	r3, [r5, #2]
 8011ce4:	68a3      	ldr	r3, [r4, #8]
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	70eb      	strb	r3, [r5, #3]
 8011cea:	2104      	movs	r1, #4
 8011cec:	68a2      	ldr	r2, [r4, #8]
 8011cee:	6923      	ldr	r3, [r4, #16]
 8011cf0:	440a      	add	r2, r1
 8011cf2:	7561      	strb	r1, [r4, #21]
 8011cf4:	440b      	add	r3, r1
 8011cf6:	60a2      	str	r2, [r4, #8]
 8011cf8:	6123      	str	r3, [r4, #16]
 8011cfa:	7da0      	ldrb	r0, [r4, #22]
 8011cfc:	f080 0001 	eor.w	r0, r0, #1
 8011d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	602b      	str	r3, [r5, #0]
 8011d08:	e7ef      	b.n	8011cea <ucdr_deserialize_int32_t+0xb6>
 8011d0a:	68a2      	ldr	r2, [r4, #8]
 8011d0c:	6923      	ldr	r3, [r4, #16]
 8011d0e:	1bd2      	subs	r2, r2, r7
 8011d10:	7da0      	ldrb	r0, [r4, #22]
 8011d12:	1bdb      	subs	r3, r3, r7
 8011d14:	f884 8015 	strb.w	r8, [r4, #21]
 8011d18:	f080 0001 	eor.w	r0, r0, #1
 8011d1c:	60a2      	str	r2, [r4, #8]
 8011d1e:	6123      	str	r3, [r4, #16]
 8011d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d24:	68a3      	ldr	r3, [r4, #8]
 8011d26:	789b      	ldrb	r3, [r3, #2]
 8011d28:	706b      	strb	r3, [r5, #1]
 8011d2a:	1cab      	adds	r3, r5, #2
 8011d2c:	68a2      	ldr	r2, [r4, #8]
 8011d2e:	7852      	ldrb	r2, [r2, #1]
 8011d30:	f803 2b01 	strb.w	r2, [r3], #1
 8011d34:	68a2      	ldr	r2, [r4, #8]
 8011d36:	7812      	ldrb	r2, [r2, #0]
 8011d38:	701a      	strb	r2, [r3, #0]
 8011d3a:	e7b4      	b.n	8011ca6 <ucdr_deserialize_int32_t+0x72>
 8011d3c:	4631      	mov	r1, r6
 8011d3e:	463a      	mov	r2, r7
 8011d40:	4628      	mov	r0, r5
 8011d42:	f001 ff94 	bl	8013c6e <memcpy>
 8011d46:	464a      	mov	r2, r9
 8011d48:	19e8      	adds	r0, r5, r7
 8011d4a:	68a1      	ldr	r1, [r4, #8]
 8011d4c:	f001 ff8f 	bl	8013c6e <memcpy>
 8011d50:	e7a9      	b.n	8011ca6 <ucdr_deserialize_int32_t+0x72>
 8011d52:	bf00      	nop

08011d54 <ucdr_serialize_float>:
 8011d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d58:	4604      	mov	r4, r0
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	2104      	movs	r1, #4
 8011d5e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011d62:	f000 fae5 	bl	8012330 <ucdr_buffer_alignment>
 8011d66:	4601      	mov	r1, r0
 8011d68:	4620      	mov	r0, r4
 8011d6a:	7d67      	ldrb	r7, [r4, #21]
 8011d6c:	f000 fb24 	bl	80123b8 <ucdr_advance_buffer>
 8011d70:	2104      	movs	r1, #4
 8011d72:	4620      	mov	r0, r4
 8011d74:	f000 faac 	bl	80122d0 <ucdr_check_buffer_available_for>
 8011d78:	2800      	cmp	r0, #0
 8011d7a:	d139      	bne.n	8011df0 <ucdr_serialize_float+0x9c>
 8011d7c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011d80:	42ab      	cmp	r3, r5
 8011d82:	d930      	bls.n	8011de6 <ucdr_serialize_float+0x92>
 8011d84:	1b5e      	subs	r6, r3, r5
 8011d86:	60a3      	str	r3, [r4, #8]
 8011d88:	6923      	ldr	r3, [r4, #16]
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	f1c6 0804 	rsb	r8, r6, #4
 8011d90:	4433      	add	r3, r6
 8011d92:	4641      	mov	r1, r8
 8011d94:	6123      	str	r3, [r4, #16]
 8011d96:	f000 faa7 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011d9a:	2800      	cmp	r0, #0
 8011d9c:	d04c      	beq.n	8011e38 <ucdr_serialize_float+0xe4>
 8011d9e:	7d23      	ldrb	r3, [r4, #20]
 8011da0:	2b01      	cmp	r3, #1
 8011da2:	d063      	beq.n	8011e6c <ucdr_serialize_float+0x118>
 8011da4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011da8:	702b      	strb	r3, [r5, #0]
 8011daa:	2e00      	cmp	r6, #0
 8011dac:	d051      	beq.n	8011e52 <ucdr_serialize_float+0xfe>
 8011dae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011db2:	2e01      	cmp	r6, #1
 8011db4:	706b      	strb	r3, [r5, #1]
 8011db6:	d050      	beq.n	8011e5a <ucdr_serialize_float+0x106>
 8011db8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011dbc:	2e02      	cmp	r6, #2
 8011dbe:	70ab      	strb	r3, [r5, #2]
 8011dc0:	d04f      	beq.n	8011e62 <ucdr_serialize_float+0x10e>
 8011dc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011dc6:	70eb      	strb	r3, [r5, #3]
 8011dc8:	6923      	ldr	r3, [r4, #16]
 8011dca:	2104      	movs	r1, #4
 8011dcc:	68a2      	ldr	r2, [r4, #8]
 8011dce:	3304      	adds	r3, #4
 8011dd0:	7da0      	ldrb	r0, [r4, #22]
 8011dd2:	4442      	add	r2, r8
 8011dd4:	7561      	strb	r1, [r4, #21]
 8011dd6:	1b9e      	subs	r6, r3, r6
 8011dd8:	f080 0001 	eor.w	r0, r0, #1
 8011ddc:	60a2      	str	r2, [r4, #8]
 8011dde:	6126      	str	r6, [r4, #16]
 8011de0:	b002      	add	sp, #8
 8011de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de6:	2104      	movs	r1, #4
 8011de8:	4620      	mov	r0, r4
 8011dea:	f000 fa7d 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011dee:	b1d0      	cbz	r0, 8011e26 <ucdr_serialize_float+0xd2>
 8011df0:	7d23      	ldrb	r3, [r4, #20]
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	68a3      	ldr	r3, [r4, #8]
 8011df6:	d01c      	beq.n	8011e32 <ucdr_serialize_float+0xde>
 8011df8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011dfc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e00:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011e04:	7018      	strb	r0, [r3, #0]
 8011e06:	68a3      	ldr	r3, [r4, #8]
 8011e08:	705a      	strb	r2, [r3, #1]
 8011e0a:	68a3      	ldr	r3, [r4, #8]
 8011e0c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011e10:	7099      	strb	r1, [r3, #2]
 8011e12:	68a3      	ldr	r3, [r4, #8]
 8011e14:	70da      	strb	r2, [r3, #3]
 8011e16:	2104      	movs	r1, #4
 8011e18:	68a2      	ldr	r2, [r4, #8]
 8011e1a:	6923      	ldr	r3, [r4, #16]
 8011e1c:	440a      	add	r2, r1
 8011e1e:	7561      	strb	r1, [r4, #21]
 8011e20:	440b      	add	r3, r1
 8011e22:	60a2      	str	r2, [r4, #8]
 8011e24:	6123      	str	r3, [r4, #16]
 8011e26:	7da0      	ldrb	r0, [r4, #22]
 8011e28:	f080 0001 	eor.w	r0, r0, #1
 8011e2c:	b002      	add	sp, #8
 8011e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e32:	9a01      	ldr	r2, [sp, #4]
 8011e34:	601a      	str	r2, [r3, #0]
 8011e36:	e7ee      	b.n	8011e16 <ucdr_serialize_float+0xc2>
 8011e38:	68a2      	ldr	r2, [r4, #8]
 8011e3a:	6923      	ldr	r3, [r4, #16]
 8011e3c:	7da0      	ldrb	r0, [r4, #22]
 8011e3e:	1b92      	subs	r2, r2, r6
 8011e40:	1b9b      	subs	r3, r3, r6
 8011e42:	7567      	strb	r7, [r4, #21]
 8011e44:	f080 0001 	eor.w	r0, r0, #1
 8011e48:	60a2      	str	r2, [r4, #8]
 8011e4a:	6123      	str	r3, [r4, #16]
 8011e4c:	b002      	add	sp, #8
 8011e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e52:	68a3      	ldr	r3, [r4, #8]
 8011e54:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e58:	701a      	strb	r2, [r3, #0]
 8011e5a:	68a3      	ldr	r3, [r4, #8]
 8011e5c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011e60:	701a      	strb	r2, [r3, #0]
 8011e62:	68a3      	ldr	r3, [r4, #8]
 8011e64:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011e68:	701a      	strb	r2, [r3, #0]
 8011e6a:	e7ad      	b.n	8011dc8 <ucdr_serialize_float+0x74>
 8011e6c:	4628      	mov	r0, r5
 8011e6e:	ad01      	add	r5, sp, #4
 8011e70:	4632      	mov	r2, r6
 8011e72:	4629      	mov	r1, r5
 8011e74:	f001 fefb 	bl	8013c6e <memcpy>
 8011e78:	4642      	mov	r2, r8
 8011e7a:	19a9      	adds	r1, r5, r6
 8011e7c:	68a0      	ldr	r0, [r4, #8]
 8011e7e:	f001 fef6 	bl	8013c6e <memcpy>
 8011e82:	e7a1      	b.n	8011dc8 <ucdr_serialize_float+0x74>

08011e84 <ucdr_deserialize_float>:
 8011e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e88:	4604      	mov	r4, r0
 8011e8a:	460d      	mov	r5, r1
 8011e8c:	2104      	movs	r1, #4
 8011e8e:	f000 fa4f 	bl	8012330 <ucdr_buffer_alignment>
 8011e92:	4601      	mov	r1, r0
 8011e94:	4620      	mov	r0, r4
 8011e96:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011e9a:	f000 fa8d 	bl	80123b8 <ucdr_advance_buffer>
 8011e9e:	2104      	movs	r1, #4
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	f000 fa15 	bl	80122d0 <ucdr_check_buffer_available_for>
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d138      	bne.n	8011f1c <ucdr_deserialize_float+0x98>
 8011eaa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011eae:	42b7      	cmp	r7, r6
 8011eb0:	d92f      	bls.n	8011f12 <ucdr_deserialize_float+0x8e>
 8011eb2:	6923      	ldr	r3, [r4, #16]
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	60a7      	str	r7, [r4, #8]
 8011eb8:	1bbf      	subs	r7, r7, r6
 8011eba:	443b      	add	r3, r7
 8011ebc:	f1c7 0904 	rsb	r9, r7, #4
 8011ec0:	6123      	str	r3, [r4, #16]
 8011ec2:	4649      	mov	r1, r9
 8011ec4:	f000 fa10 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	d046      	beq.n	8011f5a <ucdr_deserialize_float+0xd6>
 8011ecc:	7d23      	ldrb	r3, [r4, #20]
 8011ece:	2b01      	cmp	r3, #1
 8011ed0:	d05c      	beq.n	8011f8c <ucdr_deserialize_float+0x108>
 8011ed2:	78f3      	ldrb	r3, [r6, #3]
 8011ed4:	702b      	strb	r3, [r5, #0]
 8011ed6:	2f00      	cmp	r7, #0
 8011ed8:	d04c      	beq.n	8011f74 <ucdr_deserialize_float+0xf0>
 8011eda:	78b3      	ldrb	r3, [r6, #2]
 8011edc:	2f01      	cmp	r7, #1
 8011ede:	706b      	strb	r3, [r5, #1]
 8011ee0:	f105 0302 	add.w	r3, r5, #2
 8011ee4:	d04a      	beq.n	8011f7c <ucdr_deserialize_float+0xf8>
 8011ee6:	7873      	ldrb	r3, [r6, #1]
 8011ee8:	2f02      	cmp	r7, #2
 8011eea:	70ab      	strb	r3, [r5, #2]
 8011eec:	f105 0303 	add.w	r3, r5, #3
 8011ef0:	d048      	beq.n	8011f84 <ucdr_deserialize_float+0x100>
 8011ef2:	7833      	ldrb	r3, [r6, #0]
 8011ef4:	70eb      	strb	r3, [r5, #3]
 8011ef6:	6923      	ldr	r3, [r4, #16]
 8011ef8:	2104      	movs	r1, #4
 8011efa:	68a2      	ldr	r2, [r4, #8]
 8011efc:	3304      	adds	r3, #4
 8011efe:	7da0      	ldrb	r0, [r4, #22]
 8011f00:	444a      	add	r2, r9
 8011f02:	7561      	strb	r1, [r4, #21]
 8011f04:	1bdb      	subs	r3, r3, r7
 8011f06:	f080 0001 	eor.w	r0, r0, #1
 8011f0a:	60a2      	str	r2, [r4, #8]
 8011f0c:	6123      	str	r3, [r4, #16]
 8011f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f12:	2104      	movs	r1, #4
 8011f14:	4620      	mov	r0, r4
 8011f16:	f000 f9e7 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011f1a:	b1b0      	cbz	r0, 8011f4a <ucdr_deserialize_float+0xc6>
 8011f1c:	7d23      	ldrb	r3, [r4, #20]
 8011f1e:	2b01      	cmp	r3, #1
 8011f20:	68a3      	ldr	r3, [r4, #8]
 8011f22:	d017      	beq.n	8011f54 <ucdr_deserialize_float+0xd0>
 8011f24:	78db      	ldrb	r3, [r3, #3]
 8011f26:	702b      	strb	r3, [r5, #0]
 8011f28:	68a3      	ldr	r3, [r4, #8]
 8011f2a:	789b      	ldrb	r3, [r3, #2]
 8011f2c:	706b      	strb	r3, [r5, #1]
 8011f2e:	68a3      	ldr	r3, [r4, #8]
 8011f30:	785b      	ldrb	r3, [r3, #1]
 8011f32:	70ab      	strb	r3, [r5, #2]
 8011f34:	68a3      	ldr	r3, [r4, #8]
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	70eb      	strb	r3, [r5, #3]
 8011f3a:	2104      	movs	r1, #4
 8011f3c:	68a2      	ldr	r2, [r4, #8]
 8011f3e:	6923      	ldr	r3, [r4, #16]
 8011f40:	440a      	add	r2, r1
 8011f42:	7561      	strb	r1, [r4, #21]
 8011f44:	440b      	add	r3, r1
 8011f46:	60a2      	str	r2, [r4, #8]
 8011f48:	6123      	str	r3, [r4, #16]
 8011f4a:	7da0      	ldrb	r0, [r4, #22]
 8011f4c:	f080 0001 	eor.w	r0, r0, #1
 8011f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	602b      	str	r3, [r5, #0]
 8011f58:	e7ef      	b.n	8011f3a <ucdr_deserialize_float+0xb6>
 8011f5a:	68a2      	ldr	r2, [r4, #8]
 8011f5c:	6923      	ldr	r3, [r4, #16]
 8011f5e:	1bd2      	subs	r2, r2, r7
 8011f60:	7da0      	ldrb	r0, [r4, #22]
 8011f62:	1bdb      	subs	r3, r3, r7
 8011f64:	f884 8015 	strb.w	r8, [r4, #21]
 8011f68:	f080 0001 	eor.w	r0, r0, #1
 8011f6c:	60a2      	str	r2, [r4, #8]
 8011f6e:	6123      	str	r3, [r4, #16]
 8011f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f74:	68a3      	ldr	r3, [r4, #8]
 8011f76:	789b      	ldrb	r3, [r3, #2]
 8011f78:	706b      	strb	r3, [r5, #1]
 8011f7a:	1cab      	adds	r3, r5, #2
 8011f7c:	68a2      	ldr	r2, [r4, #8]
 8011f7e:	7852      	ldrb	r2, [r2, #1]
 8011f80:	f803 2b01 	strb.w	r2, [r3], #1
 8011f84:	68a2      	ldr	r2, [r4, #8]
 8011f86:	7812      	ldrb	r2, [r2, #0]
 8011f88:	701a      	strb	r2, [r3, #0]
 8011f8a:	e7b4      	b.n	8011ef6 <ucdr_deserialize_float+0x72>
 8011f8c:	4631      	mov	r1, r6
 8011f8e:	463a      	mov	r2, r7
 8011f90:	4628      	mov	r0, r5
 8011f92:	f001 fe6c 	bl	8013c6e <memcpy>
 8011f96:	464a      	mov	r2, r9
 8011f98:	19e8      	adds	r0, r5, r7
 8011f9a:	68a1      	ldr	r1, [r4, #8]
 8011f9c:	f001 fe67 	bl	8013c6e <memcpy>
 8011fa0:	e7a9      	b.n	8011ef6 <ucdr_deserialize_float+0x72>
 8011fa2:	bf00      	nop

08011fa4 <ucdr_serialize_double>:
 8011fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fa8:	4604      	mov	r4, r0
 8011faa:	b082      	sub	sp, #8
 8011fac:	2108      	movs	r1, #8
 8011fae:	ed8d 0b00 	vstr	d0, [sp]
 8011fb2:	f000 f9bd 	bl	8012330 <ucdr_buffer_alignment>
 8011fb6:	4601      	mov	r1, r0
 8011fb8:	4620      	mov	r0, r4
 8011fba:	7d67      	ldrb	r7, [r4, #21]
 8011fbc:	f000 f9fc 	bl	80123b8 <ucdr_advance_buffer>
 8011fc0:	2108      	movs	r1, #8
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	f000 f984 	bl	80122d0 <ucdr_check_buffer_available_for>
 8011fc8:	2800      	cmp	r0, #0
 8011fca:	d14e      	bne.n	801206a <ucdr_serialize_double+0xc6>
 8011fcc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011fd0:	42ab      	cmp	r3, r5
 8011fd2:	d945      	bls.n	8012060 <ucdr_serialize_double+0xbc>
 8011fd4:	1b5e      	subs	r6, r3, r5
 8011fd6:	60a3      	str	r3, [r4, #8]
 8011fd8:	6923      	ldr	r3, [r4, #16]
 8011fda:	4620      	mov	r0, r4
 8011fdc:	f1c6 0808 	rsb	r8, r6, #8
 8011fe0:	4433      	add	r3, r6
 8011fe2:	4641      	mov	r1, r8
 8011fe4:	6123      	str	r3, [r4, #16]
 8011fe6:	f000 f97f 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8011fea:	2800      	cmp	r0, #0
 8011fec:	d074      	beq.n	80120d8 <ucdr_serialize_double+0x134>
 8011fee:	7d23      	ldrb	r3, [r4, #20]
 8011ff0:	2b01      	cmp	r3, #1
 8011ff2:	f000 809b 	beq.w	801212c <ucdr_serialize_double+0x188>
 8011ff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011ffa:	702b      	strb	r3, [r5, #0]
 8011ffc:	2e00      	cmp	r6, #0
 8011ffe:	d078      	beq.n	80120f2 <ucdr_serialize_double+0x14e>
 8012000:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012004:	2e01      	cmp	r6, #1
 8012006:	706b      	strb	r3, [r5, #1]
 8012008:	d077      	beq.n	80120fa <ucdr_serialize_double+0x156>
 801200a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801200e:	2e02      	cmp	r6, #2
 8012010:	70ab      	strb	r3, [r5, #2]
 8012012:	d076      	beq.n	8012102 <ucdr_serialize_double+0x15e>
 8012014:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012018:	2e03      	cmp	r6, #3
 801201a:	70eb      	strb	r3, [r5, #3]
 801201c:	d075      	beq.n	801210a <ucdr_serialize_double+0x166>
 801201e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012022:	2e04      	cmp	r6, #4
 8012024:	712b      	strb	r3, [r5, #4]
 8012026:	d074      	beq.n	8012112 <ucdr_serialize_double+0x16e>
 8012028:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801202c:	2e05      	cmp	r6, #5
 801202e:	716b      	strb	r3, [r5, #5]
 8012030:	d073      	beq.n	801211a <ucdr_serialize_double+0x176>
 8012032:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012036:	2e06      	cmp	r6, #6
 8012038:	71ab      	strb	r3, [r5, #6]
 801203a:	d072      	beq.n	8012122 <ucdr_serialize_double+0x17e>
 801203c:	f89d 3000 	ldrb.w	r3, [sp]
 8012040:	71eb      	strb	r3, [r5, #7]
 8012042:	6923      	ldr	r3, [r4, #16]
 8012044:	2108      	movs	r1, #8
 8012046:	68a2      	ldr	r2, [r4, #8]
 8012048:	3308      	adds	r3, #8
 801204a:	7da0      	ldrb	r0, [r4, #22]
 801204c:	4442      	add	r2, r8
 801204e:	7561      	strb	r1, [r4, #21]
 8012050:	1b9e      	subs	r6, r3, r6
 8012052:	f080 0001 	eor.w	r0, r0, #1
 8012056:	60a2      	str	r2, [r4, #8]
 8012058:	6126      	str	r6, [r4, #16]
 801205a:	b002      	add	sp, #8
 801205c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012060:	2108      	movs	r1, #8
 8012062:	4620      	mov	r0, r4
 8012064:	f000 f940 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8012068:	b350      	cbz	r0, 80120c0 <ucdr_serialize_double+0x11c>
 801206a:	7d23      	ldrb	r3, [r4, #20]
 801206c:	2b01      	cmp	r3, #1
 801206e:	d02d      	beq.n	80120cc <ucdr_serialize_double+0x128>
 8012070:	68a3      	ldr	r3, [r4, #8]
 8012072:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012076:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801207a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801207e:	7018      	strb	r0, [r3, #0]
 8012080:	68a3      	ldr	r3, [r4, #8]
 8012082:	705a      	strb	r2, [r3, #1]
 8012084:	68a3      	ldr	r3, [r4, #8]
 8012086:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801208a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801208e:	7099      	strb	r1, [r3, #2]
 8012090:	68a3      	ldr	r3, [r4, #8]
 8012092:	70da      	strb	r2, [r3, #3]
 8012094:	68a3      	ldr	r3, [r4, #8]
 8012096:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801209a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801209e:	7118      	strb	r0, [r3, #4]
 80120a0:	68a3      	ldr	r3, [r4, #8]
 80120a2:	715a      	strb	r2, [r3, #5]
 80120a4:	68a3      	ldr	r3, [r4, #8]
 80120a6:	f89d 2000 	ldrb.w	r2, [sp]
 80120aa:	7199      	strb	r1, [r3, #6]
 80120ac:	68a3      	ldr	r3, [r4, #8]
 80120ae:	71da      	strb	r2, [r3, #7]
 80120b0:	2108      	movs	r1, #8
 80120b2:	68a2      	ldr	r2, [r4, #8]
 80120b4:	6923      	ldr	r3, [r4, #16]
 80120b6:	440a      	add	r2, r1
 80120b8:	7561      	strb	r1, [r4, #21]
 80120ba:	440b      	add	r3, r1
 80120bc:	60a2      	str	r2, [r4, #8]
 80120be:	6123      	str	r3, [r4, #16]
 80120c0:	7da0      	ldrb	r0, [r4, #22]
 80120c2:	f080 0001 	eor.w	r0, r0, #1
 80120c6:	b002      	add	sp, #8
 80120c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120cc:	466b      	mov	r3, sp
 80120ce:	68a2      	ldr	r2, [r4, #8]
 80120d0:	cb03      	ldmia	r3!, {r0, r1}
 80120d2:	6010      	str	r0, [r2, #0]
 80120d4:	6051      	str	r1, [r2, #4]
 80120d6:	e7eb      	b.n	80120b0 <ucdr_serialize_double+0x10c>
 80120d8:	68a2      	ldr	r2, [r4, #8]
 80120da:	6923      	ldr	r3, [r4, #16]
 80120dc:	7da0      	ldrb	r0, [r4, #22]
 80120de:	1b92      	subs	r2, r2, r6
 80120e0:	1b9b      	subs	r3, r3, r6
 80120e2:	7567      	strb	r7, [r4, #21]
 80120e4:	f080 0001 	eor.w	r0, r0, #1
 80120e8:	60a2      	str	r2, [r4, #8]
 80120ea:	6123      	str	r3, [r4, #16]
 80120ec:	b002      	add	sp, #8
 80120ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f2:	68a3      	ldr	r3, [r4, #8]
 80120f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80120f8:	701a      	strb	r2, [r3, #0]
 80120fa:	68a3      	ldr	r3, [r4, #8]
 80120fc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012100:	701a      	strb	r2, [r3, #0]
 8012102:	68a3      	ldr	r3, [r4, #8]
 8012104:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012108:	701a      	strb	r2, [r3, #0]
 801210a:	68a3      	ldr	r3, [r4, #8]
 801210c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012110:	701a      	strb	r2, [r3, #0]
 8012112:	68a3      	ldr	r3, [r4, #8]
 8012114:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012118:	701a      	strb	r2, [r3, #0]
 801211a:	68a3      	ldr	r3, [r4, #8]
 801211c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012120:	701a      	strb	r2, [r3, #0]
 8012122:	68a3      	ldr	r3, [r4, #8]
 8012124:	f89d 2000 	ldrb.w	r2, [sp]
 8012128:	701a      	strb	r2, [r3, #0]
 801212a:	e78a      	b.n	8012042 <ucdr_serialize_double+0x9e>
 801212c:	4628      	mov	r0, r5
 801212e:	466d      	mov	r5, sp
 8012130:	4632      	mov	r2, r6
 8012132:	4629      	mov	r1, r5
 8012134:	f001 fd9b 	bl	8013c6e <memcpy>
 8012138:	4642      	mov	r2, r8
 801213a:	19a9      	adds	r1, r5, r6
 801213c:	68a0      	ldr	r0, [r4, #8]
 801213e:	f001 fd96 	bl	8013c6e <memcpy>
 8012142:	e77e      	b.n	8012042 <ucdr_serialize_double+0x9e>

08012144 <ucdr_deserialize_double>:
 8012144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012148:	4604      	mov	r4, r0
 801214a:	460d      	mov	r5, r1
 801214c:	2108      	movs	r1, #8
 801214e:	f000 f8ef 	bl	8012330 <ucdr_buffer_alignment>
 8012152:	4601      	mov	r1, r0
 8012154:	4620      	mov	r0, r4
 8012156:	f894 8015 	ldrb.w	r8, [r4, #21]
 801215a:	f000 f92d 	bl	80123b8 <ucdr_advance_buffer>
 801215e:	2108      	movs	r1, #8
 8012160:	4620      	mov	r0, r4
 8012162:	f000 f8b5 	bl	80122d0 <ucdr_check_buffer_available_for>
 8012166:	2800      	cmp	r0, #0
 8012168:	d151      	bne.n	801220e <ucdr_deserialize_double+0xca>
 801216a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801216e:	42be      	cmp	r6, r7
 8012170:	d948      	bls.n	8012204 <ucdr_deserialize_double+0xc0>
 8012172:	6923      	ldr	r3, [r4, #16]
 8012174:	4620      	mov	r0, r4
 8012176:	60a6      	str	r6, [r4, #8]
 8012178:	1bf6      	subs	r6, r6, r7
 801217a:	4433      	add	r3, r6
 801217c:	f1c6 0908 	rsb	r9, r6, #8
 8012180:	6123      	str	r3, [r4, #16]
 8012182:	4649      	mov	r1, r9
 8012184:	f000 f8b0 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 8012188:	2800      	cmp	r0, #0
 801218a:	d06d      	beq.n	8012268 <ucdr_deserialize_double+0x124>
 801218c:	7d23      	ldrb	r3, [r4, #20]
 801218e:	2b01      	cmp	r3, #1
 8012190:	f000 8093 	beq.w	80122ba <ucdr_deserialize_double+0x176>
 8012194:	79fb      	ldrb	r3, [r7, #7]
 8012196:	702b      	strb	r3, [r5, #0]
 8012198:	2e00      	cmp	r6, #0
 801219a:	d072      	beq.n	8012282 <ucdr_deserialize_double+0x13e>
 801219c:	79bb      	ldrb	r3, [r7, #6]
 801219e:	2e01      	cmp	r6, #1
 80121a0:	706b      	strb	r3, [r5, #1]
 80121a2:	f105 0302 	add.w	r3, r5, #2
 80121a6:	d070      	beq.n	801228a <ucdr_deserialize_double+0x146>
 80121a8:	797b      	ldrb	r3, [r7, #5]
 80121aa:	2e02      	cmp	r6, #2
 80121ac:	70ab      	strb	r3, [r5, #2]
 80121ae:	f105 0303 	add.w	r3, r5, #3
 80121b2:	d06e      	beq.n	8012292 <ucdr_deserialize_double+0x14e>
 80121b4:	793b      	ldrb	r3, [r7, #4]
 80121b6:	2e03      	cmp	r6, #3
 80121b8:	70eb      	strb	r3, [r5, #3]
 80121ba:	f105 0304 	add.w	r3, r5, #4
 80121be:	d06c      	beq.n	801229a <ucdr_deserialize_double+0x156>
 80121c0:	78fb      	ldrb	r3, [r7, #3]
 80121c2:	2e04      	cmp	r6, #4
 80121c4:	712b      	strb	r3, [r5, #4]
 80121c6:	f105 0305 	add.w	r3, r5, #5
 80121ca:	d06a      	beq.n	80122a2 <ucdr_deserialize_double+0x15e>
 80121cc:	78bb      	ldrb	r3, [r7, #2]
 80121ce:	2e05      	cmp	r6, #5
 80121d0:	716b      	strb	r3, [r5, #5]
 80121d2:	f105 0306 	add.w	r3, r5, #6
 80121d6:	d068      	beq.n	80122aa <ucdr_deserialize_double+0x166>
 80121d8:	787b      	ldrb	r3, [r7, #1]
 80121da:	2e06      	cmp	r6, #6
 80121dc:	71ab      	strb	r3, [r5, #6]
 80121de:	f105 0307 	add.w	r3, r5, #7
 80121e2:	d066      	beq.n	80122b2 <ucdr_deserialize_double+0x16e>
 80121e4:	783b      	ldrb	r3, [r7, #0]
 80121e6:	71eb      	strb	r3, [r5, #7]
 80121e8:	6923      	ldr	r3, [r4, #16]
 80121ea:	2108      	movs	r1, #8
 80121ec:	68a2      	ldr	r2, [r4, #8]
 80121ee:	3308      	adds	r3, #8
 80121f0:	7da0      	ldrb	r0, [r4, #22]
 80121f2:	444a      	add	r2, r9
 80121f4:	7561      	strb	r1, [r4, #21]
 80121f6:	1b9e      	subs	r6, r3, r6
 80121f8:	f080 0001 	eor.w	r0, r0, #1
 80121fc:	60a2      	str	r2, [r4, #8]
 80121fe:	6126      	str	r6, [r4, #16]
 8012200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012204:	2108      	movs	r1, #8
 8012206:	4620      	mov	r0, r4
 8012208:	f000 f86e 	bl	80122e8 <ucdr_check_final_buffer_behavior>
 801220c:	b310      	cbz	r0, 8012254 <ucdr_deserialize_double+0x110>
 801220e:	7d23      	ldrb	r3, [r4, #20]
 8012210:	2b01      	cmp	r3, #1
 8012212:	68a3      	ldr	r3, [r4, #8]
 8012214:	d023      	beq.n	801225e <ucdr_deserialize_double+0x11a>
 8012216:	79db      	ldrb	r3, [r3, #7]
 8012218:	702b      	strb	r3, [r5, #0]
 801221a:	68a3      	ldr	r3, [r4, #8]
 801221c:	799b      	ldrb	r3, [r3, #6]
 801221e:	706b      	strb	r3, [r5, #1]
 8012220:	68a3      	ldr	r3, [r4, #8]
 8012222:	795b      	ldrb	r3, [r3, #5]
 8012224:	70ab      	strb	r3, [r5, #2]
 8012226:	68a3      	ldr	r3, [r4, #8]
 8012228:	791b      	ldrb	r3, [r3, #4]
 801222a:	70eb      	strb	r3, [r5, #3]
 801222c:	68a3      	ldr	r3, [r4, #8]
 801222e:	78db      	ldrb	r3, [r3, #3]
 8012230:	712b      	strb	r3, [r5, #4]
 8012232:	68a3      	ldr	r3, [r4, #8]
 8012234:	789b      	ldrb	r3, [r3, #2]
 8012236:	716b      	strb	r3, [r5, #5]
 8012238:	68a3      	ldr	r3, [r4, #8]
 801223a:	785b      	ldrb	r3, [r3, #1]
 801223c:	71ab      	strb	r3, [r5, #6]
 801223e:	68a3      	ldr	r3, [r4, #8]
 8012240:	781b      	ldrb	r3, [r3, #0]
 8012242:	71eb      	strb	r3, [r5, #7]
 8012244:	2108      	movs	r1, #8
 8012246:	68a2      	ldr	r2, [r4, #8]
 8012248:	6923      	ldr	r3, [r4, #16]
 801224a:	440a      	add	r2, r1
 801224c:	7561      	strb	r1, [r4, #21]
 801224e:	440b      	add	r3, r1
 8012250:	60a2      	str	r2, [r4, #8]
 8012252:	6123      	str	r3, [r4, #16]
 8012254:	7da0      	ldrb	r0, [r4, #22]
 8012256:	f080 0001 	eor.w	r0, r0, #1
 801225a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801225e:	681a      	ldr	r2, [r3, #0]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	602a      	str	r2, [r5, #0]
 8012264:	606b      	str	r3, [r5, #4]
 8012266:	e7ed      	b.n	8012244 <ucdr_deserialize_double+0x100>
 8012268:	68a2      	ldr	r2, [r4, #8]
 801226a:	6923      	ldr	r3, [r4, #16]
 801226c:	1b92      	subs	r2, r2, r6
 801226e:	7da0      	ldrb	r0, [r4, #22]
 8012270:	1b9b      	subs	r3, r3, r6
 8012272:	f884 8015 	strb.w	r8, [r4, #21]
 8012276:	f080 0001 	eor.w	r0, r0, #1
 801227a:	60a2      	str	r2, [r4, #8]
 801227c:	6123      	str	r3, [r4, #16]
 801227e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012282:	68a3      	ldr	r3, [r4, #8]
 8012284:	799b      	ldrb	r3, [r3, #6]
 8012286:	706b      	strb	r3, [r5, #1]
 8012288:	1cab      	adds	r3, r5, #2
 801228a:	68a2      	ldr	r2, [r4, #8]
 801228c:	7952      	ldrb	r2, [r2, #5]
 801228e:	f803 2b01 	strb.w	r2, [r3], #1
 8012292:	68a2      	ldr	r2, [r4, #8]
 8012294:	7912      	ldrb	r2, [r2, #4]
 8012296:	f803 2b01 	strb.w	r2, [r3], #1
 801229a:	68a2      	ldr	r2, [r4, #8]
 801229c:	78d2      	ldrb	r2, [r2, #3]
 801229e:	f803 2b01 	strb.w	r2, [r3], #1
 80122a2:	68a2      	ldr	r2, [r4, #8]
 80122a4:	7892      	ldrb	r2, [r2, #2]
 80122a6:	f803 2b01 	strb.w	r2, [r3], #1
 80122aa:	68a2      	ldr	r2, [r4, #8]
 80122ac:	7852      	ldrb	r2, [r2, #1]
 80122ae:	f803 2b01 	strb.w	r2, [r3], #1
 80122b2:	68a2      	ldr	r2, [r4, #8]
 80122b4:	7812      	ldrb	r2, [r2, #0]
 80122b6:	701a      	strb	r2, [r3, #0]
 80122b8:	e796      	b.n	80121e8 <ucdr_deserialize_double+0xa4>
 80122ba:	4639      	mov	r1, r7
 80122bc:	4632      	mov	r2, r6
 80122be:	4628      	mov	r0, r5
 80122c0:	f001 fcd5 	bl	8013c6e <memcpy>
 80122c4:	464a      	mov	r2, r9
 80122c6:	19a8      	adds	r0, r5, r6
 80122c8:	68a1      	ldr	r1, [r4, #8]
 80122ca:	f001 fcd0 	bl	8013c6e <memcpy>
 80122ce:	e78b      	b.n	80121e8 <ucdr_deserialize_double+0xa4>

080122d0 <ucdr_check_buffer_available_for>:
 80122d0:	7d83      	ldrb	r3, [r0, #22]
 80122d2:	b93b      	cbnz	r3, 80122e4 <ucdr_check_buffer_available_for+0x14>
 80122d4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80122d8:	4419      	add	r1, r3
 80122da:	4288      	cmp	r0, r1
 80122dc:	bf34      	ite	cc
 80122de:	2000      	movcc	r0, #0
 80122e0:	2001      	movcs	r0, #1
 80122e2:	4770      	bx	lr
 80122e4:	2000      	movs	r0, #0
 80122e6:	4770      	bx	lr

080122e8 <ucdr_check_final_buffer_behavior>:
 80122e8:	7d83      	ldrb	r3, [r0, #22]
 80122ea:	b943      	cbnz	r3, 80122fe <ucdr_check_final_buffer_behavior+0x16>
 80122ec:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80122f0:	b510      	push	{r4, lr}
 80122f2:	4291      	cmp	r1, r2
 80122f4:	4604      	mov	r4, r0
 80122f6:	d205      	bcs.n	8012304 <ucdr_check_final_buffer_behavior+0x1c>
 80122f8:	2301      	movs	r3, #1
 80122fa:	4618      	mov	r0, r3
 80122fc:	bd10      	pop	{r4, pc}
 80122fe:	2300      	movs	r3, #0
 8012300:	4618      	mov	r0, r3
 8012302:	4770      	bx	lr
 8012304:	6982      	ldr	r2, [r0, #24]
 8012306:	b13a      	cbz	r2, 8012318 <ucdr_check_final_buffer_behavior+0x30>
 8012308:	69c1      	ldr	r1, [r0, #28]
 801230a:	4790      	blx	r2
 801230c:	f080 0301 	eor.w	r3, r0, #1
 8012310:	75a0      	strb	r0, [r4, #22]
 8012312:	b2db      	uxtb	r3, r3
 8012314:	4618      	mov	r0, r3
 8012316:	bd10      	pop	{r4, pc}
 8012318:	2001      	movs	r0, #1
 801231a:	75a0      	strb	r0, [r4, #22]
 801231c:	e7fa      	b.n	8012314 <ucdr_check_final_buffer_behavior+0x2c>
 801231e:	bf00      	nop

08012320 <ucdr_alignment>:
 8012320:	fbb0 f2f1 	udiv	r2, r0, r1
 8012324:	fb02 0011 	mls	r0, r2, r1, r0
 8012328:	1e4b      	subs	r3, r1, #1
 801232a:	1a08      	subs	r0, r1, r0
 801232c:	4018      	ands	r0, r3
 801232e:	4770      	bx	lr

08012330 <ucdr_buffer_alignment>:
 8012330:	7d43      	ldrb	r3, [r0, #21]
 8012332:	428b      	cmp	r3, r1
 8012334:	d209      	bcs.n	801234a <ucdr_buffer_alignment+0x1a>
 8012336:	6903      	ldr	r3, [r0, #16]
 8012338:	1e4a      	subs	r2, r1, #1
 801233a:	fbb3 f0f1 	udiv	r0, r3, r1
 801233e:	fb01 3010 	mls	r0, r1, r0, r3
 8012342:	1a09      	subs	r1, r1, r0
 8012344:	ea01 0002 	and.w	r0, r1, r2
 8012348:	4770      	bx	lr
 801234a:	2000      	movs	r0, #0
 801234c:	4770      	bx	lr
 801234e:	bf00      	nop

08012350 <ucdr_align_to>:
 8012350:	b538      	push	{r3, r4, r5, lr}
 8012352:	4604      	mov	r4, r0
 8012354:	460d      	mov	r5, r1
 8012356:	f7ff ffeb 	bl	8012330 <ucdr_buffer_alignment>
 801235a:	68a3      	ldr	r3, [r4, #8]
 801235c:	7565      	strb	r5, [r4, #21]
 801235e:	181a      	adds	r2, r3, r0
 8012360:	6923      	ldr	r3, [r4, #16]
 8012362:	4418      	add	r0, r3
 8012364:	6863      	ldr	r3, [r4, #4]
 8012366:	4293      	cmp	r3, r2
 8012368:	6120      	str	r0, [r4, #16]
 801236a:	bf28      	it	cs
 801236c:	4613      	movcs	r3, r2
 801236e:	60a3      	str	r3, [r4, #8]
 8012370:	bd38      	pop	{r3, r4, r5, pc}
 8012372:	bf00      	nop

08012374 <ucdr_buffer_remaining>:
 8012374:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8012378:	1a10      	subs	r0, r2, r0
 801237a:	4770      	bx	lr

0801237c <ucdr_check_final_buffer_behavior_array>:
 801237c:	b538      	push	{r3, r4, r5, lr}
 801237e:	7d83      	ldrb	r3, [r0, #22]
 8012380:	b9a3      	cbnz	r3, 80123ac <ucdr_check_final_buffer_behavior_array+0x30>
 8012382:	4604      	mov	r4, r0
 8012384:	460d      	mov	r5, r1
 8012386:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801238a:	429a      	cmp	r2, r3
 801238c:	d300      	bcc.n	8012390 <ucdr_check_final_buffer_behavior_array+0x14>
 801238e:	b931      	cbnz	r1, 801239e <ucdr_check_final_buffer_behavior_array+0x22>
 8012390:	4620      	mov	r0, r4
 8012392:	f7ff ffef 	bl	8012374 <ucdr_buffer_remaining>
 8012396:	42a8      	cmp	r0, r5
 8012398:	bf28      	it	cs
 801239a:	4628      	movcs	r0, r5
 801239c:	bd38      	pop	{r3, r4, r5, pc}
 801239e:	6983      	ldr	r3, [r0, #24]
 80123a0:	b133      	cbz	r3, 80123b0 <ucdr_check_final_buffer_behavior_array+0x34>
 80123a2:	69c1      	ldr	r1, [r0, #28]
 80123a4:	4798      	blx	r3
 80123a6:	75a0      	strb	r0, [r4, #22]
 80123a8:	2800      	cmp	r0, #0
 80123aa:	d0f1      	beq.n	8012390 <ucdr_check_final_buffer_behavior_array+0x14>
 80123ac:	2000      	movs	r0, #0
 80123ae:	bd38      	pop	{r3, r4, r5, pc}
 80123b0:	2301      	movs	r3, #1
 80123b2:	7583      	strb	r3, [r0, #22]
 80123b4:	e7fa      	b.n	80123ac <ucdr_check_final_buffer_behavior_array+0x30>
 80123b6:	bf00      	nop

080123b8 <ucdr_advance_buffer>:
 80123b8:	b538      	push	{r3, r4, r5, lr}
 80123ba:	4604      	mov	r4, r0
 80123bc:	460d      	mov	r5, r1
 80123be:	f7ff ff87 	bl	80122d0 <ucdr_check_buffer_available_for>
 80123c2:	b178      	cbz	r0, 80123e4 <ucdr_advance_buffer+0x2c>
 80123c4:	6923      	ldr	r3, [r4, #16]
 80123c6:	68a2      	ldr	r2, [r4, #8]
 80123c8:	442b      	add	r3, r5
 80123ca:	442a      	add	r2, r5
 80123cc:	6123      	str	r3, [r4, #16]
 80123ce:	2301      	movs	r3, #1
 80123d0:	60a2      	str	r2, [r4, #8]
 80123d2:	7563      	strb	r3, [r4, #21]
 80123d4:	bd38      	pop	{r3, r4, r5, pc}
 80123d6:	68a2      	ldr	r2, [r4, #8]
 80123d8:	1a2d      	subs	r5, r5, r0
 80123da:	6923      	ldr	r3, [r4, #16]
 80123dc:	4402      	add	r2, r0
 80123de:	4418      	add	r0, r3
 80123e0:	60a2      	str	r2, [r4, #8]
 80123e2:	6120      	str	r0, [r4, #16]
 80123e4:	4629      	mov	r1, r5
 80123e6:	2201      	movs	r2, #1
 80123e8:	4620      	mov	r0, r4
 80123ea:	f7ff ffc7 	bl	801237c <ucdr_check_final_buffer_behavior_array>
 80123ee:	2800      	cmp	r0, #0
 80123f0:	d1f1      	bne.n	80123d6 <ucdr_advance_buffer+0x1e>
 80123f2:	2301      	movs	r3, #1
 80123f4:	7563      	strb	r3, [r4, #21]
 80123f6:	bd38      	pop	{r3, r4, r5, pc}

080123f8 <__default_zero_allocate>:
 80123f8:	f001 b842 	b.w	8013480 <calloc>

080123fc <__default_reallocate>:
 80123fc:	f001 b92c 	b.w	8013658 <realloc>

08012400 <__default_deallocate>:
 8012400:	f001 b874 	b.w	80134ec <free>

08012404 <__default_allocate>:
 8012404:	f001 b86a 	b.w	80134dc <malloc>

08012408 <rcutils_get_default_allocator>:
 8012408:	b510      	push	{r4, lr}
 801240a:	4c05      	ldr	r4, [pc, #20]	@ (8012420 <rcutils_get_default_allocator+0x18>)
 801240c:	4686      	mov	lr, r0
 801240e:	4684      	mov	ip, r0
 8012410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012412:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012416:	6823      	ldr	r3, [r4, #0]
 8012418:	4670      	mov	r0, lr
 801241a:	f8cc 3000 	str.w	r3, [ip]
 801241e:	bd10      	pop	{r4, pc}
 8012420:	24000c90 	.word	0x24000c90

08012424 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8012424:	4a02      	ldr	r2, [pc, #8]	@ (8012430 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xc>)
 8012426:	4b03      	ldr	r3, [pc, #12]	@ (8012434 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x10>)
 8012428:	6812      	ldr	r2, [r2, #0]
 801242a:	601a      	str	r2, [r3, #0]
 801242c:	4770      	bx	lr
 801242e:	bf00      	nop
 8012430:	24000d28 	.word	0x24000d28
 8012434:	24000cac 	.word	0x24000cac

08012438 <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_init_function>:
 8012438:	f000 bd44 	b.w	8012ec4 <rosgraph_msgs__msg__Clock__init>

0801243c <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_fini_function>:
 801243c:	f000 bd54 	b.w	8012ee8 <rosgraph_msgs__msg__Clock__fini>

08012440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8012440:	b508      	push	{r3, lr}
 8012442:	f7ff f839 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012446:	4b06      	ldr	r3, [pc, #24]	@ (8012460 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 8012448:	4906      	ldr	r1, [pc, #24]	@ (8012464 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x24>)
 801244a:	681a      	ldr	r2, [r3, #0]
 801244c:	60c8      	str	r0, [r1, #12]
 801244e:	b10a      	cbz	r2, 8012454 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>
 8012450:	4803      	ldr	r0, [pc, #12]	@ (8012460 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 8012452:	bd08      	pop	{r3, pc}
 8012454:	4a04      	ldr	r2, [pc, #16]	@ (8012468 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x28>)
 8012456:	4802      	ldr	r0, [pc, #8]	@ (8012460 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 8012458:	6812      	ldr	r2, [r2, #0]
 801245a:	601a      	str	r2, [r3, #0]
 801245c:	bd08      	pop	{r3, pc}
 801245e:	bf00      	nop
 8012460:	24000cf4 	.word	0x24000cf4
 8012464:	24000cb8 	.word	0x24000cb8
 8012468:	24000d2c 	.word	0x24000d2c

0801246c <get_serialized_size_rosgraph_msgs__msg__Clock>:
 801246c:	b108      	cbz	r0, 8012472 <get_serialized_size_rosgraph_msgs__msg__Clock+0x6>
 801246e:	f7ff b831 	b.w	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012472:	4770      	bx	lr

08012474 <_Clock__max_serialized_size>:
 8012474:	b500      	push	{lr}
 8012476:	b083      	sub	sp, #12
 8012478:	2301      	movs	r3, #1
 801247a:	2100      	movs	r1, #0
 801247c:	f10d 0007 	add.w	r0, sp, #7
 8012480:	f88d 3007 	strb.w	r3, [sp, #7]
 8012484:	f7ff f876 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 8012488:	b003      	add	sp, #12
 801248a:	f85d fb04 	ldr.w	pc, [sp], #4
 801248e:	bf00      	nop

08012490 <_Clock__get_serialized_size>:
 8012490:	b110      	cbz	r0, 8012498 <_Clock__get_serialized_size+0x8>
 8012492:	2100      	movs	r1, #0
 8012494:	f7ff b81e 	b.w	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop

0801249c <_Clock__cdr_deserialize>:
 801249c:	b570      	push	{r4, r5, r6, lr}
 801249e:	460c      	mov	r4, r1
 80124a0:	b151      	cbz	r1, 80124b8 <_Clock__cdr_deserialize+0x1c>
 80124a2:	4605      	mov	r5, r0
 80124a4:	f7ff f87a 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80124a8:	4603      	mov	r3, r0
 80124aa:	4621      	mov	r1, r4
 80124ac:	4628      	mov	r0, r5
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124b4:	68db      	ldr	r3, [r3, #12]
 80124b6:	4718      	bx	r3
 80124b8:	4608      	mov	r0, r1
 80124ba:	bd70      	pop	{r4, r5, r6, pc}

080124bc <_Clock__cdr_serialize>:
 80124bc:	b160      	cbz	r0, 80124d8 <_Clock__cdr_serialize+0x1c>
 80124be:	b570      	push	{r4, r5, r6, lr}
 80124c0:	4604      	mov	r4, r0
 80124c2:	460d      	mov	r5, r1
 80124c4:	f7ff f86a 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80124c8:	4603      	mov	r3, r0
 80124ca:	4629      	mov	r1, r5
 80124cc:	4620      	mov	r0, r4
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124d4:	689b      	ldr	r3, [r3, #8]
 80124d6:	4718      	bx	r3
 80124d8:	4770      	bx	lr
 80124da:	bf00      	nop

080124dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 80124dc:	4800      	ldr	r0, [pc, #0]	@ (80124e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x4>)
 80124de:	4770      	bx	lr
 80124e0:	24000d00 	.word	0x24000d00

080124e4 <get_message_typesupport_handle_function>:
 80124e4:	b510      	push	{r4, lr}
 80124e6:	4604      	mov	r4, r0
 80124e8:	6800      	ldr	r0, [r0, #0]
 80124ea:	f7ed fef9 	bl	80002e0 <strcmp>
 80124ee:	2800      	cmp	r0, #0
 80124f0:	bf0c      	ite	eq
 80124f2:	4620      	moveq	r0, r4
 80124f4:	2000      	movne	r0, #0
 80124f6:	bd10      	pop	{r4, pc}

080124f8 <get_service_typesupport_handle_function>:
 80124f8:	b510      	push	{r4, lr}
 80124fa:	4604      	mov	r4, r0
 80124fc:	6800      	ldr	r0, [r0, #0]
 80124fe:	f7ed feef 	bl	80002e0 <strcmp>
 8012502:	2800      	cmp	r0, #0
 8012504:	bf0c      	ite	eq
 8012506:	4620      	moveq	r0, r4
 8012508:	2000      	movne	r0, #0
 801250a:	bd10      	pop	{r4, pc}

0801250c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801250c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012510:	6805      	ldr	r5, [r0, #0]
 8012512:	4604      	mov	r4, r0
 8012514:	460e      	mov	r6, r1
 8012516:	4628      	mov	r0, r5
 8012518:	f7ed fee2 	bl	80002e0 <strcmp>
 801251c:	b1c8      	cbz	r0, 8012552 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801251e:	4b11      	ldr	r3, [pc, #68]	@ (8012564 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	429d      	cmp	r5, r3
 8012524:	d112      	bne.n	801254c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012526:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801252a:	f8d8 4000 	ldr.w	r4, [r8]
 801252e:	b16c      	cbz	r4, 801254c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012530:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012534:	2700      	movs	r7, #0
 8012536:	3d04      	subs	r5, #4
 8012538:	4631      	mov	r1, r6
 801253a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801253e:	f7ed fecf 	bl	80002e0 <strcmp>
 8012542:	00bb      	lsls	r3, r7, #2
 8012544:	b140      	cbz	r0, 8012558 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8012546:	3701      	adds	r7, #1
 8012548:	42bc      	cmp	r4, r7
 801254a:	d1f5      	bne.n	8012538 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801254c:	2000      	movs	r0, #0
 801254e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012552:	4620      	mov	r0, r4
 8012554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012558:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801255c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012560:	58d3      	ldr	r3, [r2, r3]
 8012562:	4718      	bx	r3
 8012564:	24000d28 	.word	0x24000d28

08012568 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8012568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801256c:	6805      	ldr	r5, [r0, #0]
 801256e:	4604      	mov	r4, r0
 8012570:	460e      	mov	r6, r1
 8012572:	4628      	mov	r0, r5
 8012574:	f7ed feb4 	bl	80002e0 <strcmp>
 8012578:	b1c8      	cbz	r0, 80125ae <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 801257a:	4b11      	ldr	r3, [pc, #68]	@ (80125c0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	429d      	cmp	r5, r3
 8012580:	d112      	bne.n	80125a8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8012582:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012586:	f8d8 4000 	ldr.w	r4, [r8]
 801258a:	b16c      	cbz	r4, 80125a8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 801258c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012590:	2700      	movs	r7, #0
 8012592:	3d04      	subs	r5, #4
 8012594:	4631      	mov	r1, r6
 8012596:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801259a:	f7ed fea1 	bl	80002e0 <strcmp>
 801259e:	00bb      	lsls	r3, r7, #2
 80125a0:	b140      	cbz	r0, 80125b4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80125a2:	3701      	adds	r7, #1
 80125a4:	42bc      	cmp	r4, r7
 80125a6:	d1f5      	bne.n	8012594 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80125a8:	2000      	movs	r0, #0
 80125aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ae:	4620      	mov	r0, r4
 80125b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80125b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125bc:	58d3      	ldr	r3, [r2, r3]
 80125be:	4718      	bx	r3
 80125c0:	24000d28 	.word	0x24000d28

080125c4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80125c4:	f000 bc94 	b.w	8012ef0 <std_msgs__msg__Header__init>

080125c8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80125c8:	f000 bcb6 	b.w	8012f38 <std_msgs__msg__Header__fini>

080125cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80125cc:	b508      	push	{r3, lr}
 80125ce:	f7fe ff73 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80125d2:	4b06      	ldr	r3, [pc, #24]	@ (80125ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80125d4:	4906      	ldr	r1, [pc, #24]	@ (80125f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	60c8      	str	r0, [r1, #12]
 80125da:	b10a      	cbz	r2, 80125e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80125dc:	4803      	ldr	r0, [pc, #12]	@ (80125ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80125de:	bd08      	pop	{r3, pc}
 80125e0:	4a04      	ldr	r2, [pc, #16]	@ (80125f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80125e2:	4802      	ldr	r0, [pc, #8]	@ (80125ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80125e4:	6812      	ldr	r2, [r2, #0]
 80125e6:	601a      	str	r2, [r3, #0]
 80125e8:	bd08      	pop	{r3, pc}
 80125ea:	bf00      	nop
 80125ec:	24000da8 	.word	0x24000da8
 80125f0:	24000d30 	.word	0x24000d30
 80125f4:	24000d2c 	.word	0x24000d2c

080125f8 <_Header__max_serialized_size>:
 80125f8:	b500      	push	{lr}
 80125fa:	b083      	sub	sp, #12
 80125fc:	2301      	movs	r3, #1
 80125fe:	2100      	movs	r1, #0
 8012600:	f10d 0007 	add.w	r0, sp, #7
 8012604:	f88d 3007 	strb.w	r3, [sp, #7]
 8012608:	f7fe ffb4 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 801260c:	b003      	add	sp, #12
 801260e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012612:	bf00      	nop

08012614 <get_serialized_size_std_msgs__msg__Header>:
 8012614:	b570      	push	{r4, r5, r6, lr}
 8012616:	4605      	mov	r5, r0
 8012618:	b168      	cbz	r0, 8012636 <get_serialized_size_std_msgs__msg__Header+0x22>
 801261a:	460c      	mov	r4, r1
 801261c:	f7fe ff5a 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012620:	2104      	movs	r1, #4
 8012622:	1826      	adds	r6, r4, r0
 8012624:	f1c4 0405 	rsb	r4, r4, #5
 8012628:	4630      	mov	r0, r6
 801262a:	f7ff fe79 	bl	8012320 <ucdr_alignment>
 801262e:	68e9      	ldr	r1, [r5, #12]
 8012630:	440c      	add	r4, r1
 8012632:	4404      	add	r4, r0
 8012634:	19a0      	adds	r0, r4, r6
 8012636:	bd70      	pop	{r4, r5, r6, pc}

08012638 <_Header__cdr_deserialize>:
 8012638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801263a:	460c      	mov	r4, r1
 801263c:	b083      	sub	sp, #12
 801263e:	b1e9      	cbz	r1, 801267c <_Header__cdr_deserialize+0x44>
 8012640:	4606      	mov	r6, r0
 8012642:	f7fe ffab 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012646:	4603      	mov	r3, r0
 8012648:	4621      	mov	r1, r4
 801264a:	4630      	mov	r0, r6
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	68db      	ldr	r3, [r3, #12]
 8012650:	4798      	blx	r3
 8012652:	6927      	ldr	r7, [r4, #16]
 8012654:	ab01      	add	r3, sp, #4
 8012656:	68a1      	ldr	r1, [r4, #8]
 8012658:	463a      	mov	r2, r7
 801265a:	4630      	mov	r0, r6
 801265c:	f000 fc18 	bl	8012e90 <ucdr_deserialize_sequence_char>
 8012660:	9b01      	ldr	r3, [sp, #4]
 8012662:	4605      	mov	r5, r0
 8012664:	b920      	cbnz	r0, 8012670 <_Header__cdr_deserialize+0x38>
 8012666:	429f      	cmp	r7, r3
 8012668:	d30c      	bcc.n	8012684 <_Header__cdr_deserialize+0x4c>
 801266a:	4628      	mov	r0, r5
 801266c:	b003      	add	sp, #12
 801266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012670:	b103      	cbz	r3, 8012674 <_Header__cdr_deserialize+0x3c>
 8012672:	3b01      	subs	r3, #1
 8012674:	4628      	mov	r0, r5
 8012676:	60e3      	str	r3, [r4, #12]
 8012678:	b003      	add	sp, #12
 801267a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801267c:	460d      	mov	r5, r1
 801267e:	4628      	mov	r0, r5
 8012680:	b003      	add	sp, #12
 8012682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012684:	2101      	movs	r1, #1
 8012686:	4630      	mov	r0, r6
 8012688:	75b5      	strb	r5, [r6, #22]
 801268a:	7571      	strb	r1, [r6, #21]
 801268c:	60e5      	str	r5, [r4, #12]
 801268e:	f7ff fe5f 	bl	8012350 <ucdr_align_to>
 8012692:	4630      	mov	r0, r6
 8012694:	9901      	ldr	r1, [sp, #4]
 8012696:	f7ff fe8f 	bl	80123b8 <ucdr_advance_buffer>
 801269a:	4628      	mov	r0, r5
 801269c:	b003      	add	sp, #12
 801269e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080126a0 <_Header__cdr_serialize>:
 80126a0:	b308      	cbz	r0, 80126e6 <_Header__cdr_serialize+0x46>
 80126a2:	b570      	push	{r4, r5, r6, lr}
 80126a4:	4604      	mov	r4, r0
 80126a6:	460d      	mov	r5, r1
 80126a8:	f7fe ff78 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126ac:	4603      	mov	r3, r0
 80126ae:	4629      	mov	r1, r5
 80126b0:	4620      	mov	r0, r4
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	689b      	ldr	r3, [r3, #8]
 80126b6:	4798      	blx	r3
 80126b8:	68a6      	ldr	r6, [r4, #8]
 80126ba:	b15e      	cbz	r6, 80126d4 <_Header__cdr_serialize+0x34>
 80126bc:	4630      	mov	r0, r6
 80126be:	f7ed fe19 	bl	80002f4 <strlen>
 80126c2:	4603      	mov	r3, r0
 80126c4:	1c42      	adds	r2, r0, #1
 80126c6:	4631      	mov	r1, r6
 80126c8:	4628      	mov	r0, r5
 80126ca:	60e3      	str	r3, [r4, #12]
 80126cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126d0:	f000 bbcc 	b.w	8012e6c <ucdr_serialize_sequence_char>
 80126d4:	4633      	mov	r3, r6
 80126d6:	4632      	mov	r2, r6
 80126d8:	4631      	mov	r1, r6
 80126da:	4628      	mov	r0, r5
 80126dc:	60e3      	str	r3, [r4, #12]
 80126de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126e2:	f000 bbc3 	b.w	8012e6c <ucdr_serialize_sequence_char>
 80126e6:	4770      	bx	lr

080126e8 <_Header__get_serialized_size>:
 80126e8:	b538      	push	{r3, r4, r5, lr}
 80126ea:	4604      	mov	r4, r0
 80126ec:	b150      	cbz	r0, 8012704 <_Header__get_serialized_size+0x1c>
 80126ee:	2100      	movs	r1, #0
 80126f0:	f7fe fef0 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 80126f4:	2104      	movs	r1, #4
 80126f6:	4605      	mov	r5, r0
 80126f8:	f7ff fe12 	bl	8012320 <ucdr_alignment>
 80126fc:	68e2      	ldr	r2, [r4, #12]
 80126fe:	3205      	adds	r2, #5
 8012700:	1953      	adds	r3, r2, r5
 8012702:	4418      	add	r0, r3
 8012704:	bd38      	pop	{r3, r4, r5, pc}
 8012706:	bf00      	nop

08012708 <max_serialized_size_std_msgs__msg__Header>:
 8012708:	2301      	movs	r3, #1
 801270a:	b510      	push	{r4, lr}
 801270c:	7003      	strb	r3, [r0, #0]
 801270e:	4604      	mov	r4, r0
 8012710:	f7fe ff30 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 8012714:	2300      	movs	r3, #0
 8012716:	7023      	strb	r3, [r4, #0]
 8012718:	bd10      	pop	{r4, pc}
 801271a:	bf00      	nop

0801271c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801271c:	4800      	ldr	r0, [pc, #0]	@ (8012720 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801271e:	4770      	bx	lr
 8012720:	24000db4 	.word	0x24000db4

08012724 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012724:	4a02      	ldr	r2, [pc, #8]	@ (8012730 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 8012726:	4b03      	ldr	r3, [pc, #12]	@ (8012734 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 8012728:	6812      	ldr	r2, [r2, #0]
 801272a:	601a      	str	r2, [r3, #0]
 801272c:	4770      	bx	lr
 801272e:	bf00      	nop
 8012730:	24000d28 	.word	0x24000d28
 8012734:	24000de4 	.word	0x24000de4

08012738 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012738:	4a02      	ldr	r2, [pc, #8]	@ (8012744 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 801273a:	4b03      	ldr	r3, [pc, #12]	@ (8012748 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 801273c:	6812      	ldr	r2, [r2, #0]
 801273e:	601a      	str	r2, [r3, #0]
 8012740:	4770      	bx	lr
 8012742:	bf00      	nop
 8012744:	24000d28 	.word	0x24000d28
 8012748:	24000df8 	.word	0x24000df8

0801274c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 801274c:	4a02      	ldr	r2, [pc, #8]	@ (8012758 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 801274e:	4b03      	ldr	r3, [pc, #12]	@ (801275c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8012750:	6812      	ldr	r2, [r2, #0]
 8012752:	601a      	str	r2, [r3, #0]
 8012754:	4770      	bx	lr
 8012756:	bf00      	nop
 8012758:	24000d28 	.word	0x24000d28
 801275c:	24000e0c 	.word	0x24000e0c

08012760 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012760:	4a02      	ldr	r2, [pc, #8]	@ (801276c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8012762:	4b03      	ldr	r3, [pc, #12]	@ (8012770 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8012764:	6812      	ldr	r2, [r2, #0]
 8012766:	601a      	str	r2, [r3, #0]
 8012768:	4770      	bx	lr
 801276a:	bf00      	nop
 801276c:	24000d28 	.word	0x24000d28
 8012770:	24000e20 	.word	0x24000e20

08012774 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8012774:	f000 bbec 	b.w	8012f50 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

08012778 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 8012778:	f000 bc0e 	b.w	8012f98 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

0801277c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 801277c:	b510      	push	{r4, lr}
 801277e:	4c08      	ldr	r4, [pc, #32]	@ (80127a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8012780:	f7ff ff24 	bl	80125cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012784:	60e0      	str	r0, [r4, #12]
 8012786:	f000 fc73 	bl	8013070 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801278a:	4b06      	ldr	r3, [pc, #24]	@ (80127a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 801278c:	64a0      	str	r0, [r4, #72]	@ 0x48
 801278e:	681a      	ldr	r2, [r3, #0]
 8012790:	b10a      	cbz	r2, 8012796 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 8012792:	4804      	ldr	r0, [pc, #16]	@ (80127a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8012794:	bd10      	pop	{r4, pc}
 8012796:	4a04      	ldr	r2, [pc, #16]	@ (80127a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 8012798:	4802      	ldr	r0, [pc, #8]	@ (80127a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 801279a:	6812      	ldr	r2, [r2, #0]
 801279c:	601a      	str	r2, [r3, #0]
 801279e:	bd10      	pop	{r4, pc}
 80127a0:	24000e2c 	.word	0x24000e2c
 80127a4:	24000ea4 	.word	0x24000ea4
 80127a8:	24000d2c 	.word	0x24000d2c

080127ac <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 80127ac:	f000 bc00 	b.w	8012fb0 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

080127b0 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 80127b0:	f000 bc22 	b.w	8012ff8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

080127b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80127b4:	b510      	push	{r4, lr}
 80127b6:	4c08      	ldr	r4, [pc, #32]	@ (80127d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 80127b8:	f7ff ff08 	bl	80125cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80127bc:	60e0      	str	r0, [r4, #12]
 80127be:	f000 fc69 	bl	8013094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80127c2:	4b06      	ldr	r3, [pc, #24]	@ (80127dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80127c4:	64a0      	str	r0, [r4, #72]	@ 0x48
 80127c6:	681a      	ldr	r2, [r3, #0]
 80127c8:	b10a      	cbz	r2, 80127ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 80127ca:	4804      	ldr	r0, [pc, #16]	@ (80127dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80127cc:	bd10      	pop	{r4, pc}
 80127ce:	4a04      	ldr	r2, [pc, #16]	@ (80127e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 80127d0:	4802      	ldr	r0, [pc, #8]	@ (80127dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80127d2:	6812      	ldr	r2, [r2, #0]
 80127d4:	601a      	str	r2, [r3, #0]
 80127d6:	bd10      	pop	{r4, pc}
 80127d8:	24000eb0 	.word	0x24000eb0
 80127dc:	24000f28 	.word	0x24000f28
 80127e0:	24000d2c 	.word	0x24000d2c

080127e4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 80127e4:	f000 bc14 	b.w	8013010 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

080127e8 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 80127e8:	f000 bc24 	b.w	8013034 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

080127ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80127ec:	b508      	push	{r3, lr}
 80127ee:	f7fe fe63 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80127f2:	4b06      	ldr	r3, [pc, #24]	@ (801280c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80127f4:	4906      	ldr	r1, [pc, #24]	@ (8012810 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 80127f6:	681a      	ldr	r2, [r3, #0]
 80127f8:	60c8      	str	r0, [r1, #12]
 80127fa:	b10a      	cbz	r2, 8012800 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 80127fc:	4803      	ldr	r0, [pc, #12]	@ (801280c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80127fe:	bd08      	pop	{r3, pc}
 8012800:	4a04      	ldr	r2, [pc, #16]	@ (8012814 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 8012802:	4802      	ldr	r0, [pc, #8]	@ (801280c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8012804:	6812      	ldr	r2, [r2, #0]
 8012806:	601a      	str	r2, [r3, #0]
 8012808:	bd08      	pop	{r3, pc}
 801280a:	bf00      	nop
 801280c:	24000fac 	.word	0x24000fac
 8012810:	24000f34 	.word	0x24000f34
 8012814:	24000d2c 	.word	0x24000d2c

08012818 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8012818:	f000 bc10 	b.w	801303c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

0801281c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 801281c:	f000 bc20 	b.w	8013060 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08012820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012820:	b508      	push	{r3, lr}
 8012822:	f7fe fe49 	bl	80114b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012826:	4b06      	ldr	r3, [pc, #24]	@ (8012840 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8012828:	4906      	ldr	r1, [pc, #24]	@ (8012844 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 801282a:	681a      	ldr	r2, [r3, #0]
 801282c:	60c8      	str	r0, [r1, #12]
 801282e:	b10a      	cbz	r2, 8012834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8012830:	4803      	ldr	r0, [pc, #12]	@ (8012840 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8012832:	bd08      	pop	{r3, pc}
 8012834:	4a04      	ldr	r2, [pc, #16]	@ (8012848 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 8012836:	4802      	ldr	r0, [pc, #8]	@ (8012840 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8012838:	6812      	ldr	r2, [r2, #0]
 801283a:	601a      	str	r2, [r3, #0]
 801283c:	bd08      	pop	{r3, pc}
 801283e:	bf00      	nop
 8012840:	24001030 	.word	0x24001030
 8012844:	24000fb8 	.word	0x24000fb8
 8012848:	24000d2c 	.word	0x24000d2c

0801284c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 801284c:	b538      	push	{r3, r4, r5, lr}
 801284e:	4604      	mov	r4, r0
 8012850:	b150      	cbz	r0, 8012868 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8012852:	460d      	mov	r5, r1
 8012854:	f7ff fede 	bl	8012614 <get_serialized_size_std_msgs__msg__Header>
 8012858:	4603      	mov	r3, r0
 801285a:	f104 0018 	add.w	r0, r4, #24
 801285e:	461c      	mov	r4, r3
 8012860:	18e9      	adds	r1, r5, r3
 8012862:	f000 fc25 	bl	80130b0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8012866:	4420      	add	r0, r4
 8012868:	bd38      	pop	{r3, r4, r5, pc}
 801286a:	bf00      	nop

0801286c <_ActuationCommandStamped__cdr_deserialize>:
 801286c:	b570      	push	{r4, r5, r6, lr}
 801286e:	460c      	mov	r4, r1
 8012870:	b199      	cbz	r1, 801289a <_ActuationCommandStamped__cdr_deserialize+0x2e>
 8012872:	4605      	mov	r5, r0
 8012874:	f7ff ff52 	bl	801271c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012878:	4603      	mov	r3, r0
 801287a:	4621      	mov	r1, r4
 801287c:	4628      	mov	r0, r5
 801287e:	685b      	ldr	r3, [r3, #4]
 8012880:	68db      	ldr	r3, [r3, #12]
 8012882:	4798      	blx	r3
 8012884:	f000 fc9c 	bl	80131c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8012888:	4603      	mov	r3, r0
 801288a:	f104 0118 	add.w	r1, r4, #24
 801288e:	4628      	mov	r0, r5
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012896:	68db      	ldr	r3, [r3, #12]
 8012898:	4718      	bx	r3
 801289a:	4608      	mov	r0, r1
 801289c:	bd70      	pop	{r4, r5, r6, pc}
 801289e:	bf00      	nop

080128a0 <_ActuationCommandStamped__cdr_serialize>:
 80128a0:	b510      	push	{r4, lr}
 80128a2:	b082      	sub	sp, #8
 80128a4:	9101      	str	r1, [sp, #4]
 80128a6:	b1a0      	cbz	r0, 80128d2 <_ActuationCommandStamped__cdr_serialize+0x32>
 80128a8:	4604      	mov	r4, r0
 80128aa:	f7ff ff37 	bl	801271c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80128ae:	4603      	mov	r3, r0
 80128b0:	9901      	ldr	r1, [sp, #4]
 80128b2:	4620      	mov	r0, r4
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	689b      	ldr	r3, [r3, #8]
 80128b8:	4798      	blx	r3
 80128ba:	f000 fc81 	bl	80131c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80128be:	4603      	mov	r3, r0
 80128c0:	9901      	ldr	r1, [sp, #4]
 80128c2:	f104 0018 	add.w	r0, r4, #24
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	689b      	ldr	r3, [r3, #8]
 80128ca:	b002      	add	sp, #8
 80128cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128d0:	4718      	bx	r3
 80128d2:	b002      	add	sp, #8
 80128d4:	bd10      	pop	{r4, pc}
 80128d6:	bf00      	nop

080128d8 <_ActuationCommandStamped__get_serialized_size>:
 80128d8:	b510      	push	{r4, lr}
 80128da:	4604      	mov	r4, r0
 80128dc:	b148      	cbz	r0, 80128f2 <_ActuationCommandStamped__get_serialized_size+0x1a>
 80128de:	2100      	movs	r1, #0
 80128e0:	f7ff fe98 	bl	8012614 <get_serialized_size_std_msgs__msg__Header>
 80128e4:	4601      	mov	r1, r0
 80128e6:	f104 0018 	add.w	r0, r4, #24
 80128ea:	460c      	mov	r4, r1
 80128ec:	f000 fbe0 	bl	80130b0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80128f0:	4420      	add	r0, r4
 80128f2:	bd10      	pop	{r4, pc}

080128f4 <_ActuationCommandStamped__max_serialized_size>:
 80128f4:	b510      	push	{r4, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	2301      	movs	r3, #1
 80128fa:	2100      	movs	r1, #0
 80128fc:	f10d 0007 	add.w	r0, sp, #7
 8012900:	f88d 3007 	strb.w	r3, [sp, #7]
 8012904:	f7ff ff00 	bl	8012708 <max_serialized_size_std_msgs__msg__Header>
 8012908:	4604      	mov	r4, r0
 801290a:	f10d 0007 	add.w	r0, sp, #7
 801290e:	4621      	mov	r1, r4
 8012910:	f000 fc3c 	bl	801318c <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8012914:	4420      	add	r0, r4
 8012916:	b002      	add	sp, #8
 8012918:	bd10      	pop	{r4, pc}
 801291a:	bf00      	nop

0801291c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 801291c:	4800      	ldr	r0, [pc, #0]	@ (8012920 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 801291e:	4770      	bx	lr
 8012920:	2400103c 	.word	0x2400103c

08012924 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012924:	b538      	push	{r3, r4, r5, lr}
 8012926:	4604      	mov	r4, r0
 8012928:	b150      	cbz	r0, 8012940 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 801292a:	460d      	mov	r5, r1
 801292c:	f7ff fe72 	bl	8012614 <get_serialized_size_std_msgs__msg__Header>
 8012930:	4603      	mov	r3, r0
 8012932:	f104 0018 	add.w	r0, r4, #24
 8012936:	461c      	mov	r4, r3
 8012938:	18e9      	adds	r1, r5, r3
 801293a:	f000 fc45 	bl	80131c8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 801293e:	4420      	add	r0, r4
 8012940:	bd38      	pop	{r3, r4, r5, pc}
 8012942:	bf00      	nop

08012944 <_ActuationStatusStamped__cdr_deserialize>:
 8012944:	b570      	push	{r4, r5, r6, lr}
 8012946:	460c      	mov	r4, r1
 8012948:	b199      	cbz	r1, 8012972 <_ActuationStatusStamped__cdr_deserialize+0x2e>
 801294a:	4605      	mov	r5, r0
 801294c:	f7ff fee6 	bl	801271c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012950:	4603      	mov	r3, r0
 8012952:	4621      	mov	r1, r4
 8012954:	4628      	mov	r0, r5
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	68db      	ldr	r3, [r3, #12]
 801295a:	4798      	blx	r3
 801295c:	f000 fcbc 	bl	80132d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8012960:	4603      	mov	r3, r0
 8012962:	f104 0118 	add.w	r1, r4, #24
 8012966:	4628      	mov	r0, r5
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801296e:	68db      	ldr	r3, [r3, #12]
 8012970:	4718      	bx	r3
 8012972:	4608      	mov	r0, r1
 8012974:	bd70      	pop	{r4, r5, r6, pc}
 8012976:	bf00      	nop

08012978 <_ActuationStatusStamped__cdr_serialize>:
 8012978:	b510      	push	{r4, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	9101      	str	r1, [sp, #4]
 801297e:	b1a0      	cbz	r0, 80129aa <_ActuationStatusStamped__cdr_serialize+0x32>
 8012980:	4604      	mov	r4, r0
 8012982:	f7ff fecb 	bl	801271c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012986:	4603      	mov	r3, r0
 8012988:	9901      	ldr	r1, [sp, #4]
 801298a:	4620      	mov	r0, r4
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	689b      	ldr	r3, [r3, #8]
 8012990:	4798      	blx	r3
 8012992:	f000 fca1 	bl	80132d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8012996:	4603      	mov	r3, r0
 8012998:	9901      	ldr	r1, [sp, #4]
 801299a:	f104 0018 	add.w	r0, r4, #24
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	689b      	ldr	r3, [r3, #8]
 80129a2:	b002      	add	sp, #8
 80129a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129a8:	4718      	bx	r3
 80129aa:	b002      	add	sp, #8
 80129ac:	bd10      	pop	{r4, pc}
 80129ae:	bf00      	nop

080129b0 <_ActuationStatusStamped__get_serialized_size>:
 80129b0:	b510      	push	{r4, lr}
 80129b2:	4604      	mov	r4, r0
 80129b4:	b148      	cbz	r0, 80129ca <_ActuationStatusStamped__get_serialized_size+0x1a>
 80129b6:	2100      	movs	r1, #0
 80129b8:	f7ff fe2c 	bl	8012614 <get_serialized_size_std_msgs__msg__Header>
 80129bc:	4601      	mov	r1, r0
 80129be:	f104 0018 	add.w	r0, r4, #24
 80129c2:	460c      	mov	r4, r1
 80129c4:	f000 fc00 	bl	80131c8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80129c8:	4420      	add	r0, r4
 80129ca:	bd10      	pop	{r4, pc}

080129cc <_ActuationStatusStamped__max_serialized_size>:
 80129cc:	b510      	push	{r4, lr}
 80129ce:	b082      	sub	sp, #8
 80129d0:	2301      	movs	r3, #1
 80129d2:	2100      	movs	r1, #0
 80129d4:	f10d 0007 	add.w	r0, sp, #7
 80129d8:	f88d 3007 	strb.w	r3, [sp, #7]
 80129dc:	f7ff fe94 	bl	8012708 <max_serialized_size_std_msgs__msg__Header>
 80129e0:	4604      	mov	r4, r0
 80129e2:	f10d 0007 	add.w	r0, sp, #7
 80129e6:	4621      	mov	r1, r4
 80129e8:	f000 fc5c 	bl	80132a4 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80129ec:	4420      	add	r0, r4
 80129ee:	b002      	add	sp, #8
 80129f0:	bd10      	pop	{r4, pc}
 80129f2:	bf00      	nop

080129f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80129f4:	4800      	ldr	r0, [pc, #0]	@ (80129f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 80129f6:	4770      	bx	lr
 80129f8:	24001064 	.word	0x24001064

080129fc <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80129fc:	b538      	push	{r3, r4, r5, lr}
 80129fe:	b158      	cbz	r0, 8012a18 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 8012a00:	460d      	mov	r5, r1
 8012a02:	f7fe fd67 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012a06:	2104      	movs	r1, #4
 8012a08:	182c      	adds	r4, r5, r0
 8012a0a:	f1c5 0504 	rsb	r5, r5, #4
 8012a0e:	4620      	mov	r0, r4
 8012a10:	f7ff fc86 	bl	8012320 <ucdr_alignment>
 8012a14:	4428      	add	r0, r5
 8012a16:	4420      	add	r0, r4
 8012a18:	bd38      	pop	{r3, r4, r5, pc}
 8012a1a:	bf00      	nop

08012a1c <_SteeringWheelStatusStamped__cdr_deserialize>:
 8012a1c:	b538      	push	{r3, r4, r5, lr}
 8012a1e:	460c      	mov	r4, r1
 8012a20:	b179      	cbz	r1, 8012a42 <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 8012a22:	4605      	mov	r5, r0
 8012a24:	f7fe fdba 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	4621      	mov	r1, r4
 8012a2c:	4628      	mov	r0, r5
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	68db      	ldr	r3, [r3, #12]
 8012a32:	4798      	blx	r3
 8012a34:	f104 0108 	add.w	r1, r4, #8
 8012a38:	4628      	mov	r0, r5
 8012a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a3e:	f7ff ba21 	b.w	8011e84 <ucdr_deserialize_float>
 8012a42:	4608      	mov	r0, r1
 8012a44:	bd38      	pop	{r3, r4, r5, pc}
 8012a46:	bf00      	nop

08012a48 <_SteeringWheelStatusStamped__cdr_serialize>:
 8012a48:	b188      	cbz	r0, 8012a6e <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 8012a4a:	b538      	push	{r3, r4, r5, lr}
 8012a4c:	4604      	mov	r4, r0
 8012a4e:	460d      	mov	r5, r1
 8012a50:	f7fe fda4 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012a54:	4603      	mov	r3, r0
 8012a56:	4629      	mov	r1, r5
 8012a58:	4620      	mov	r0, r4
 8012a5a:	685b      	ldr	r3, [r3, #4]
 8012a5c:	689b      	ldr	r3, [r3, #8]
 8012a5e:	4798      	blx	r3
 8012a60:	ed94 0a02 	vldr	s0, [r4, #8]
 8012a64:	4628      	mov	r0, r5
 8012a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a6a:	f7ff b973 	b.w	8011d54 <ucdr_serialize_float>
 8012a6e:	4770      	bx	lr

08012a70 <_SteeringWheelStatusStamped__get_serialized_size>:
 8012a70:	b150      	cbz	r0, 8012a88 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 8012a72:	2100      	movs	r1, #0
 8012a74:	b510      	push	{r4, lr}
 8012a76:	f7fe fd2d 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	2104      	movs	r1, #4
 8012a7e:	f7ff fc4f 	bl	8012320 <ucdr_alignment>
 8012a82:	4420      	add	r0, r4
 8012a84:	3004      	adds	r0, #4
 8012a86:	bd10      	pop	{r4, pc}
 8012a88:	4770      	bx	lr
 8012a8a:	bf00      	nop

08012a8c <_SteeringWheelStatusStamped__max_serialized_size>:
 8012a8c:	b510      	push	{r4, lr}
 8012a8e:	b082      	sub	sp, #8
 8012a90:	2301      	movs	r3, #1
 8012a92:	2100      	movs	r1, #0
 8012a94:	f10d 0007 	add.w	r0, sp, #7
 8012a98:	f88d 3007 	strb.w	r3, [sp, #7]
 8012a9c:	f7fe fd6a 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 8012aa0:	4604      	mov	r4, r0
 8012aa2:	2104      	movs	r1, #4
 8012aa4:	f7ff fc3c 	bl	8012320 <ucdr_alignment>
 8012aa8:	4420      	add	r0, r4
 8012aaa:	3004      	adds	r0, #4
 8012aac:	b002      	add	sp, #8
 8012aae:	bd10      	pop	{r4, pc}

08012ab0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012ab0:	4800      	ldr	r0, [pc, #0]	@ (8012ab4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 8012ab2:	4770      	bx	lr
 8012ab4:	2400108c 	.word	0x2400108c

08012ab8 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012ab8:	b538      	push	{r3, r4, r5, lr}
 8012aba:	b158      	cbz	r0, 8012ad4 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8012abc:	460d      	mov	r5, r1
 8012abe:	f7fe fd09 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012ac2:	2101      	movs	r1, #1
 8012ac4:	182c      	adds	r4, r5, r0
 8012ac6:	f1c5 0501 	rsb	r5, r5, #1
 8012aca:	4620      	mov	r0, r4
 8012acc:	f7ff fc28 	bl	8012320 <ucdr_alignment>
 8012ad0:	4428      	add	r0, r5
 8012ad2:	4420      	add	r0, r4
 8012ad4:	bd38      	pop	{r3, r4, r5, pc}
 8012ad6:	bf00      	nop

08012ad8 <_VehicleEmergencyStamped__cdr_deserialize>:
 8012ad8:	b538      	push	{r3, r4, r5, lr}
 8012ada:	460c      	mov	r4, r1
 8012adc:	b179      	cbz	r1, 8012afe <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 8012ade:	4605      	mov	r5, r0
 8012ae0:	f7fe fd5c 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	4621      	mov	r1, r4
 8012ae8:	4628      	mov	r0, r5
 8012aea:	685b      	ldr	r3, [r3, #4]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	4798      	blx	r3
 8012af0:	f104 0108 	add.w	r1, r4, #8
 8012af4:	4628      	mov	r0, r5
 8012af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012afa:	f7fe bd69 	b.w	80115d0 <ucdr_deserialize_bool>
 8012afe:	4608      	mov	r0, r1
 8012b00:	bd38      	pop	{r3, r4, r5, pc}
 8012b02:	bf00      	nop

08012b04 <_VehicleEmergencyStamped__cdr_serialize>:
 8012b04:	b180      	cbz	r0, 8012b28 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8012b06:	b538      	push	{r3, r4, r5, lr}
 8012b08:	4604      	mov	r4, r0
 8012b0a:	460d      	mov	r5, r1
 8012b0c:	f7fe fd46 	bl	801159c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012b10:	4603      	mov	r3, r0
 8012b12:	4629      	mov	r1, r5
 8012b14:	4620      	mov	r0, r4
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	689b      	ldr	r3, [r3, #8]
 8012b1a:	4798      	blx	r3
 8012b1c:	7a21      	ldrb	r1, [r4, #8]
 8012b1e:	4628      	mov	r0, r5
 8012b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b24:	f7fe bd3e 	b.w	80115a4 <ucdr_serialize_bool>
 8012b28:	4770      	bx	lr
 8012b2a:	bf00      	nop

08012b2c <_VehicleEmergencyStamped__get_serialized_size>:
 8012b2c:	b150      	cbz	r0, 8012b44 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8012b2e:	2100      	movs	r1, #0
 8012b30:	b510      	push	{r4, lr}
 8012b32:	f7fe fccf 	bl	80114d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012b36:	4604      	mov	r4, r0
 8012b38:	2101      	movs	r1, #1
 8012b3a:	f7ff fbf1 	bl	8012320 <ucdr_alignment>
 8012b3e:	4420      	add	r0, r4
 8012b40:	3001      	adds	r0, #1
 8012b42:	bd10      	pop	{r4, pc}
 8012b44:	4770      	bx	lr
 8012b46:	bf00      	nop

08012b48 <_VehicleEmergencyStamped__max_serialized_size>:
 8012b48:	b510      	push	{r4, lr}
 8012b4a:	b082      	sub	sp, #8
 8012b4c:	2401      	movs	r4, #1
 8012b4e:	2100      	movs	r1, #0
 8012b50:	f10d 0007 	add.w	r0, sp, #7
 8012b54:	f88d 4007 	strb.w	r4, [sp, #7]
 8012b58:	f7fe fd0c 	bl	8011574 <max_serialized_size_builtin_interfaces__msg__Time>
 8012b5c:	4621      	mov	r1, r4
 8012b5e:	4604      	mov	r4, r0
 8012b60:	f7ff fbde 	bl	8012320 <ucdr_alignment>
 8012b64:	4420      	add	r0, r4
 8012b66:	3001      	adds	r0, #1
 8012b68:	b002      	add	sp, #8
 8012b6a:	bd10      	pop	{r4, pc}

08012b6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012b6c:	4800      	ldr	r0, [pc, #0]	@ (8012b70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8012b6e:	4770      	bx	lr
 8012b70:	240010b4 	.word	0x240010b4

08012b74 <autoware_auto_control_msgs__msg__AckermannControlCommand__init>:
 8012b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b76:	4605      	mov	r5, r0
 8012b78:	b300      	cbz	r0, 8012bbc <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x48>
 8012b7a:	f000 f971 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012b7e:	4604      	mov	r4, r0
 8012b80:	b178      	cbz	r0, 8012ba2 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x2e>
 8012b82:	f105 0608 	add.w	r6, r5, #8
 8012b86:	4630      	mov	r0, r6
 8012b88:	f000 f842 	bl	8012c10 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>
 8012b8c:	4604      	mov	r4, r0
 8012b8e:	b1c0      	cbz	r0, 8012bc2 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x4e>
 8012b90:	f105 0718 	add.w	r7, r5, #24
 8012b94:	4638      	mov	r0, r7
 8012b96:	f000 f853 	bl	8012c40 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>
 8012b9a:	4604      	mov	r4, r0
 8012b9c:	b1e8      	cbz	r0, 8012bda <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x66>
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ba2:	4628      	mov	r0, r5
 8012ba4:	f000 f960 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012ba8:	f105 0008 	add.w	r0, r5, #8
 8012bac:	f000 f844 	bl	8012c38 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8012bb0:	f105 0018 	add.w	r0, r5, #24
 8012bb4:	f000 f85a 	bl	8012c6c <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8012bb8:	4620      	mov	r0, r4
 8012bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bbc:	4604      	mov	r4, r0
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	f000 f950 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012bc8:	4630      	mov	r0, r6
 8012bca:	f000 f835 	bl	8012c38 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8012bce:	f105 0018 	add.w	r0, r5, #24
 8012bd2:	f000 f84b 	bl	8012c6c <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bda:	4628      	mov	r0, r5
 8012bdc:	f000 f944 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012be0:	4630      	mov	r0, r6
 8012be2:	f000 f829 	bl	8012c38 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8012be6:	4638      	mov	r0, r7
 8012be8:	f000 f840 	bl	8012c6c <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8012bec:	e7d7      	b.n	8012b9e <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x2a>
 8012bee:	bf00      	nop

08012bf0 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini>:
 8012bf0:	b168      	cbz	r0, 8012c0e <autoware_auto_control_msgs__msg__AckermannControlCommand__fini+0x1e>
 8012bf2:	b510      	push	{r4, lr}
 8012bf4:	4604      	mov	r4, r0
 8012bf6:	f000 f937 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012bfa:	f104 0008 	add.w	r0, r4, #8
 8012bfe:	f000 f81b 	bl	8012c38 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8012c02:	f104 0018 	add.w	r0, r4, #24
 8012c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c0a:	f000 b82f 	b.w	8012c6c <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8012c0e:	4770      	bx	lr

08012c10 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>:
 8012c10:	b538      	push	{r3, r4, r5, lr}
 8012c12:	4604      	mov	r4, r0
 8012c14:	b140      	cbz	r0, 8012c28 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init+0x18>
 8012c16:	f000 f923 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012c1a:	4605      	mov	r5, r0
 8012c1c:	b138      	cbz	r0, 8012c2e <autoware_auto_control_msgs__msg__AckermannLateralCommand__init+0x1e>
 8012c1e:	2300      	movs	r3, #0
 8012c20:	4628      	mov	r0, r5
 8012c22:	60a3      	str	r3, [r4, #8]
 8012c24:	60e3      	str	r3, [r4, #12]
 8012c26:	bd38      	pop	{r3, r4, r5, pc}
 8012c28:	4605      	mov	r5, r0
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	bd38      	pop	{r3, r4, r5, pc}
 8012c2e:	4620      	mov	r0, r4
 8012c30:	f000 f91a 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012c34:	4628      	mov	r0, r5
 8012c36:	bd38      	pop	{r3, r4, r5, pc}

08012c38 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>:
 8012c38:	b108      	cbz	r0, 8012c3e <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini+0x6>
 8012c3a:	f000 b915 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8012c3e:	4770      	bx	lr

08012c40 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>:
 8012c40:	b538      	push	{r3, r4, r5, lr}
 8012c42:	4604      	mov	r4, r0
 8012c44:	b148      	cbz	r0, 8012c5a <autoware_auto_control_msgs__msg__LongitudinalCommand__init+0x1a>
 8012c46:	f000 f90b 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012c4a:	4605      	mov	r5, r0
 8012c4c:	b140      	cbz	r0, 8012c60 <autoware_auto_control_msgs__msg__LongitudinalCommand__init+0x20>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	4628      	mov	r0, r5
 8012c52:	60a3      	str	r3, [r4, #8]
 8012c54:	60e3      	str	r3, [r4, #12]
 8012c56:	6123      	str	r3, [r4, #16]
 8012c58:	bd38      	pop	{r3, r4, r5, pc}
 8012c5a:	4605      	mov	r5, r0
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	bd38      	pop	{r3, r4, r5, pc}
 8012c60:	4620      	mov	r0, r4
 8012c62:	f000 f901 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012c66:	4628      	mov	r0, r5
 8012c68:	bd38      	pop	{r3, r4, r5, pc}
 8012c6a:	bf00      	nop

08012c6c <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>:
 8012c6c:	b108      	cbz	r0, 8012c72 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini+0x6>
 8012c6e:	f000 b8fb 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8012c72:	4770      	bx	lr

08012c74 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8012c74:	b538      	push	{r3, r4, r5, lr}
 8012c76:	4604      	mov	r4, r0
 8012c78:	b128      	cbz	r0, 8012c86 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8012c7a:	f000 f8f1 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012c7e:	4605      	mov	r5, r0
 8012c80:	b120      	cbz	r0, 8012c8c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8012c82:	4628      	mov	r0, r5
 8012c84:	bd38      	pop	{r3, r4, r5, pc}
 8012c86:	4605      	mov	r5, r0
 8012c88:	4628      	mov	r0, r5
 8012c8a:	bd38      	pop	{r3, r4, r5, pc}
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	f000 f8eb 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012c92:	4628      	mov	r0, r5
 8012c94:	bd38      	pop	{r3, r4, r5, pc}
 8012c96:	bf00      	nop

08012c98 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8012c98:	b108      	cbz	r0, 8012c9e <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8012c9a:	f000 b8e5 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8012c9e:	4770      	bx	lr

08012ca0 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8012ca0:	3800      	subs	r0, #0
 8012ca2:	bf18      	it	ne
 8012ca4:	2001      	movne	r0, #1
 8012ca6:	4770      	bx	lr

08012ca8 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8012ca8:	4770      	bx	lr
 8012caa:	bf00      	nop

08012cac <autoware_auto_vehicle_msgs__msg__ControlModeReport__init>:
 8012cac:	b538      	push	{r3, r4, r5, lr}
 8012cae:	4604      	mov	r4, r0
 8012cb0:	b138      	cbz	r0, 8012cc2 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init+0x16>
 8012cb2:	f000 f8d5 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012cb6:	4605      	mov	r5, r0
 8012cb8:	b130      	cbz	r0, 8012cc8 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init+0x1c>
 8012cba:	2300      	movs	r3, #0
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	7223      	strb	r3, [r4, #8]
 8012cc0:	bd38      	pop	{r3, r4, r5, pc}
 8012cc2:	4605      	mov	r5, r0
 8012cc4:	4628      	mov	r0, r5
 8012cc6:	bd38      	pop	{r3, r4, r5, pc}
 8012cc8:	4620      	mov	r0, r4
 8012cca:	f000 f8cd 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012cce:	4628      	mov	r0, r5
 8012cd0:	bd38      	pop	{r3, r4, r5, pc}
 8012cd2:	bf00      	nop

08012cd4 <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini>:
 8012cd4:	b108      	cbz	r0, 8012cda <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8012cd6:	f000 b8c7 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8012cda:	4770      	bx	lr

08012cdc <autoware_auto_vehicle_msgs__msg__GearCommand__init>:
 8012cdc:	b538      	push	{r3, r4, r5, lr}
 8012cde:	4604      	mov	r4, r0
 8012ce0:	b138      	cbz	r0, 8012cf2 <autoware_auto_vehicle_msgs__msg__GearCommand__init+0x16>
 8012ce2:	f000 f8bd 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012ce6:	4605      	mov	r5, r0
 8012ce8:	b130      	cbz	r0, 8012cf8 <autoware_auto_vehicle_msgs__msg__GearCommand__init+0x1c>
 8012cea:	2300      	movs	r3, #0
 8012cec:	4628      	mov	r0, r5
 8012cee:	7223      	strb	r3, [r4, #8]
 8012cf0:	bd38      	pop	{r3, r4, r5, pc}
 8012cf2:	4605      	mov	r5, r0
 8012cf4:	4628      	mov	r0, r5
 8012cf6:	bd38      	pop	{r3, r4, r5, pc}
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f000 f8b5 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012cfe:	4628      	mov	r0, r5
 8012d00:	bd38      	pop	{r3, r4, r5, pc}
 8012d02:	bf00      	nop

08012d04 <autoware_auto_vehicle_msgs__msg__GearCommand__fini>:
 8012d04:	b108      	cbz	r0, 8012d0a <autoware_auto_vehicle_msgs__msg__GearCommand__fini+0x6>
 8012d06:	f000 b8af 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8012d0a:	4770      	bx	lr

08012d0c <autoware_auto_vehicle_msgs__msg__GearReport__init>:
 8012d0c:	b538      	push	{r3, r4, r5, lr}
 8012d0e:	4604      	mov	r4, r0
 8012d10:	b138      	cbz	r0, 8012d22 <autoware_auto_vehicle_msgs__msg__GearReport__init+0x16>
 8012d12:	f000 f8a5 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012d16:	4605      	mov	r5, r0
 8012d18:	b130      	cbz	r0, 8012d28 <autoware_auto_vehicle_msgs__msg__GearReport__init+0x1c>
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	4628      	mov	r0, r5
 8012d1e:	7223      	strb	r3, [r4, #8]
 8012d20:	bd38      	pop	{r3, r4, r5, pc}
 8012d22:	4605      	mov	r5, r0
 8012d24:	4628      	mov	r0, r5
 8012d26:	bd38      	pop	{r3, r4, r5, pc}
 8012d28:	4620      	mov	r0, r4
 8012d2a:	f000 f89d 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012d2e:	4628      	mov	r0, r5
 8012d30:	bd38      	pop	{r3, r4, r5, pc}
 8012d32:	bf00      	nop

08012d34 <autoware_auto_vehicle_msgs__msg__GearReport__fini>:
 8012d34:	b108      	cbz	r0, 8012d3a <autoware_auto_vehicle_msgs__msg__GearReport__fini+0x6>
 8012d36:	f000 b897 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8012d3a:	4770      	bx	lr

08012d3c <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init>:
 8012d3c:	b538      	push	{r3, r4, r5, lr}
 8012d3e:	4604      	mov	r4, r0
 8012d40:	b138      	cbz	r0, 8012d52 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init+0x16>
 8012d42:	f000 f88d 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012d46:	4605      	mov	r5, r0
 8012d48:	b130      	cbz	r0, 8012d58 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init+0x1c>
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	7223      	strb	r3, [r4, #8]
 8012d50:	bd38      	pop	{r3, r4, r5, pc}
 8012d52:	4605      	mov	r5, r0
 8012d54:	4628      	mov	r0, r5
 8012d56:	bd38      	pop	{r3, r4, r5, pc}
 8012d58:	4620      	mov	r0, r4
 8012d5a:	f000 f885 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012d5e:	4628      	mov	r0, r5
 8012d60:	bd38      	pop	{r3, r4, r5, pc}
 8012d62:	bf00      	nop

08012d64 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8012d64:	b108      	cbz	r0, 8012d6a <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8012d66:	f000 b87f 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8012d6a:	4770      	bx	lr

08012d6c <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init>:
 8012d6c:	b538      	push	{r3, r4, r5, lr}
 8012d6e:	4604      	mov	r4, r0
 8012d70:	b138      	cbz	r0, 8012d82 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init+0x16>
 8012d72:	f000 f875 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012d76:	4605      	mov	r5, r0
 8012d78:	b130      	cbz	r0, 8012d88 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init+0x1c>
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	4628      	mov	r0, r5
 8012d7e:	7223      	strb	r3, [r4, #8]
 8012d80:	bd38      	pop	{r3, r4, r5, pc}
 8012d82:	4605      	mov	r5, r0
 8012d84:	4628      	mov	r0, r5
 8012d86:	bd38      	pop	{r3, r4, r5, pc}
 8012d88:	4620      	mov	r0, r4
 8012d8a:	f000 f86d 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012d8e:	4628      	mov	r0, r5
 8012d90:	bd38      	pop	{r3, r4, r5, pc}
 8012d92:	bf00      	nop

08012d94 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini>:
 8012d94:	b108      	cbz	r0, 8012d9a <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8012d96:	f000 b867 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8012d9a:	4770      	bx	lr

08012d9c <autoware_auto_vehicle_msgs__msg__SteeringReport__init>:
 8012d9c:	b538      	push	{r3, r4, r5, lr}
 8012d9e:	4604      	mov	r4, r0
 8012da0:	b138      	cbz	r0, 8012db2 <autoware_auto_vehicle_msgs__msg__SteeringReport__init+0x16>
 8012da2:	f000 f85d 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012da6:	4605      	mov	r5, r0
 8012da8:	b130      	cbz	r0, 8012db8 <autoware_auto_vehicle_msgs__msg__SteeringReport__init+0x1c>
 8012daa:	2300      	movs	r3, #0
 8012dac:	4628      	mov	r0, r5
 8012dae:	60a3      	str	r3, [r4, #8]
 8012db0:	bd38      	pop	{r3, r4, r5, pc}
 8012db2:	4605      	mov	r5, r0
 8012db4:	4628      	mov	r0, r5
 8012db6:	bd38      	pop	{r3, r4, r5, pc}
 8012db8:	4620      	mov	r0, r4
 8012dba:	f000 f855 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012dbe:	4628      	mov	r0, r5
 8012dc0:	bd38      	pop	{r3, r4, r5, pc}
 8012dc2:	bf00      	nop

08012dc4 <autoware_auto_vehicle_msgs__msg__SteeringReport__fini>:
 8012dc4:	b108      	cbz	r0, 8012dca <autoware_auto_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8012dc6:	f000 b84f 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8012dca:	4770      	bx	lr

08012dcc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8012dcc:	b538      	push	{r3, r4, r5, lr}
 8012dce:	4604      	mov	r4, r0
 8012dd0:	b138      	cbz	r0, 8012de2 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x16>
 8012dd2:	f000 f845 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012dd6:	4605      	mov	r5, r0
 8012dd8:	b130      	cbz	r0, 8012de8 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x1c>
 8012dda:	2300      	movs	r3, #0
 8012ddc:	4628      	mov	r0, r5
 8012dde:	7223      	strb	r3, [r4, #8]
 8012de0:	bd38      	pop	{r3, r4, r5, pc}
 8012de2:	4605      	mov	r5, r0
 8012de4:	4628      	mov	r0, r5
 8012de6:	bd38      	pop	{r3, r4, r5, pc}
 8012de8:	4620      	mov	r0, r4
 8012dea:	f000 f83d 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012dee:	4628      	mov	r0, r5
 8012df0:	bd38      	pop	{r3, r4, r5, pc}
 8012df2:	bf00      	nop

08012df4 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8012df4:	b108      	cbz	r0, 8012dfa <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8012df6:	f000 b837 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8012dfa:	4770      	bx	lr

08012dfc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8012dfc:	b538      	push	{r3, r4, r5, lr}
 8012dfe:	4604      	mov	r4, r0
 8012e00:	b138      	cbz	r0, 8012e12 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init+0x16>
 8012e02:	f000 f82d 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012e06:	4605      	mov	r5, r0
 8012e08:	b130      	cbz	r0, 8012e18 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init+0x1c>
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	7223      	strb	r3, [r4, #8]
 8012e10:	bd38      	pop	{r3, r4, r5, pc}
 8012e12:	4605      	mov	r5, r0
 8012e14:	4628      	mov	r0, r5
 8012e16:	bd38      	pop	{r3, r4, r5, pc}
 8012e18:	4620      	mov	r0, r4
 8012e1a:	f000 f825 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012e1e:	4628      	mov	r0, r5
 8012e20:	bd38      	pop	{r3, r4, r5, pc}
 8012e22:	bf00      	nop

08012e24 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8012e24:	b108      	cbz	r0, 8012e2a <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8012e26:	f000 b81f 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8012e2a:	4770      	bx	lr

08012e2c <autoware_auto_vehicle_msgs__msg__VelocityReport__init>:
 8012e2c:	b538      	push	{r3, r4, r5, lr}
 8012e2e:	4604      	mov	r4, r0
 8012e30:	b148      	cbz	r0, 8012e46 <autoware_auto_vehicle_msgs__msg__VelocityReport__init+0x1a>
 8012e32:	f000 f85d 	bl	8012ef0 <std_msgs__msg__Header__init>
 8012e36:	4605      	mov	r5, r0
 8012e38:	b140      	cbz	r0, 8012e4c <autoware_auto_vehicle_msgs__msg__VelocityReport__init+0x20>
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	6163      	str	r3, [r4, #20]
 8012e40:	61a3      	str	r3, [r4, #24]
 8012e42:	61e3      	str	r3, [r4, #28]
 8012e44:	bd38      	pop	{r3, r4, r5, pc}
 8012e46:	4605      	mov	r5, r0
 8012e48:	4628      	mov	r0, r5
 8012e4a:	bd38      	pop	{r3, r4, r5, pc}
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	f000 f873 	bl	8012f38 <std_msgs__msg__Header__fini>
 8012e52:	4628      	mov	r0, r5
 8012e54:	bd38      	pop	{r3, r4, r5, pc}
 8012e56:	bf00      	nop

08012e58 <autoware_auto_vehicle_msgs__msg__VelocityReport__fini>:
 8012e58:	b108      	cbz	r0, 8012e5e <autoware_auto_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8012e5a:	f000 b86d 	b.w	8012f38 <std_msgs__msg__Header__fini>
 8012e5e:	4770      	bx	lr

08012e60 <builtin_interfaces__msg__Time__init>:
 8012e60:	3800      	subs	r0, #0
 8012e62:	bf18      	it	ne
 8012e64:	2001      	movne	r0, #1
 8012e66:	4770      	bx	lr

08012e68 <builtin_interfaces__msg__Time__fini>:
 8012e68:	4770      	bx	lr
 8012e6a:	bf00      	nop

08012e6c <ucdr_serialize_sequence_char>:
 8012e6c:	b570      	push	{r4, r5, r6, lr}
 8012e6e:	4615      	mov	r5, r2
 8012e70:	460e      	mov	r6, r1
 8012e72:	7d01      	ldrb	r1, [r0, #20]
 8012e74:	4604      	mov	r4, r0
 8012e76:	f7fe fc87 	bl	8011788 <ucdr_serialize_endian_uint32_t>
 8012e7a:	b90d      	cbnz	r5, 8012e80 <ucdr_serialize_sequence_char+0x14>
 8012e7c:	2001      	movs	r0, #1
 8012e7e:	bd70      	pop	{r4, r5, r6, pc}
 8012e80:	462b      	mov	r3, r5
 8012e82:	4632      	mov	r2, r6
 8012e84:	7d21      	ldrb	r1, [r4, #20]
 8012e86:	4620      	mov	r0, r4
 8012e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e8c:	f000 ba28 	b.w	80132e0 <ucdr_serialize_endian_array_char>

08012e90 <ucdr_deserialize_sequence_char>:
 8012e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e94:	461d      	mov	r5, r3
 8012e96:	4616      	mov	r6, r2
 8012e98:	460f      	mov	r7, r1
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	7d01      	ldrb	r1, [r0, #20]
 8012e9e:	4604      	mov	r4, r0
 8012ea0:	f7fe fd9a 	bl	80119d8 <ucdr_deserialize_endian_uint32_t>
 8012ea4:	682b      	ldr	r3, [r5, #0]
 8012ea6:	429e      	cmp	r6, r3
 8012ea8:	d201      	bcs.n	8012eae <ucdr_deserialize_sequence_char+0x1e>
 8012eaa:	2201      	movs	r2, #1
 8012eac:	75a2      	strb	r2, [r4, #22]
 8012eae:	b913      	cbnz	r3, 8012eb6 <ucdr_deserialize_sequence_char+0x26>
 8012eb0:	2001      	movs	r0, #1
 8012eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eb6:	463a      	mov	r2, r7
 8012eb8:	7d21      	ldrb	r1, [r4, #20]
 8012eba:	4620      	mov	r0, r4
 8012ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ec0:	f000 ba40 	b.w	8013344 <ucdr_deserialize_endian_array_char>

08012ec4 <rosgraph_msgs__msg__Clock__init>:
 8012ec4:	b538      	push	{r3, r4, r5, lr}
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	b128      	cbz	r0, 8012ed6 <rosgraph_msgs__msg__Clock__init+0x12>
 8012eca:	f7ff ffc9 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012ece:	4605      	mov	r5, r0
 8012ed0:	b120      	cbz	r0, 8012edc <rosgraph_msgs__msg__Clock__init+0x18>
 8012ed2:	4628      	mov	r0, r5
 8012ed4:	bd38      	pop	{r3, r4, r5, pc}
 8012ed6:	4605      	mov	r5, r0
 8012ed8:	4628      	mov	r0, r5
 8012eda:	bd38      	pop	{r3, r4, r5, pc}
 8012edc:	4620      	mov	r0, r4
 8012ede:	f7ff ffc3 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	bd38      	pop	{r3, r4, r5, pc}
 8012ee6:	bf00      	nop

08012ee8 <rosgraph_msgs__msg__Clock__fini>:
 8012ee8:	b108      	cbz	r0, 8012eee <rosgraph_msgs__msg__Clock__fini+0x6>
 8012eea:	f7ff bfbd 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8012eee:	4770      	bx	lr

08012ef0 <std_msgs__msg__Header__init>:
 8012ef0:	b570      	push	{r4, r5, r6, lr}
 8012ef2:	4605      	mov	r5, r0
 8012ef4:	b1a8      	cbz	r0, 8012f22 <std_msgs__msg__Header__init+0x32>
 8012ef6:	f7ff ffb3 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8012efa:	4604      	mov	r4, r0
 8012efc:	b140      	cbz	r0, 8012f10 <std_msgs__msg__Header__init+0x20>
 8012efe:	f105 0608 	add.w	r6, r5, #8
 8012f02:	4630      	mov	r0, r6
 8012f04:	f000 fa52 	bl	80133ac <rosidl_runtime_c__String__init>
 8012f08:	4604      	mov	r4, r0
 8012f0a:	b168      	cbz	r0, 8012f28 <std_msgs__msg__Header__init+0x38>
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	bd70      	pop	{r4, r5, r6, pc}
 8012f10:	4628      	mov	r0, r5
 8012f12:	f7ff ffa9 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012f16:	f105 0008 	add.w	r0, r5, #8
 8012f1a:	f000 fa5d 	bl	80133d8 <rosidl_runtime_c__String__fini>
 8012f1e:	4620      	mov	r0, r4
 8012f20:	bd70      	pop	{r4, r5, r6, pc}
 8012f22:	4604      	mov	r4, r0
 8012f24:	4620      	mov	r0, r4
 8012f26:	bd70      	pop	{r4, r5, r6, pc}
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f7ff ff9d 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012f2e:	4630      	mov	r0, r6
 8012f30:	f000 fa52 	bl	80133d8 <rosidl_runtime_c__String__fini>
 8012f34:	e7ea      	b.n	8012f0c <std_msgs__msg__Header__init+0x1c>
 8012f36:	bf00      	nop

08012f38 <std_msgs__msg__Header__fini>:
 8012f38:	b148      	cbz	r0, 8012f4e <std_msgs__msg__Header__fini+0x16>
 8012f3a:	b510      	push	{r4, lr}
 8012f3c:	4604      	mov	r4, r0
 8012f3e:	f7ff ff93 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 8012f42:	f104 0008 	add.w	r0, r4, #8
 8012f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f4a:	f000 ba45 	b.w	80133d8 <rosidl_runtime_c__String__fini>
 8012f4e:	4770      	bx	lr

08012f50 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 8012f50:	b570      	push	{r4, r5, r6, lr}
 8012f52:	4605      	mov	r5, r0
 8012f54:	b1a8      	cbz	r0, 8012f82 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 8012f56:	f7ff ffcb 	bl	8012ef0 <std_msgs__msg__Header__init>
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	b140      	cbz	r0, 8012f70 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 8012f5e:	f105 0618 	add.w	r6, r5, #24
 8012f62:	4630      	mov	r0, r6
 8012f64:	f000 fa80 	bl	8013468 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 8012f68:	4604      	mov	r4, r0
 8012f6a:	b168      	cbz	r0, 8012f88 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	bd70      	pop	{r4, r5, r6, pc}
 8012f70:	4628      	mov	r0, r5
 8012f72:	f7ff ffe1 	bl	8012f38 <std_msgs__msg__Header__fini>
 8012f76:	f105 0018 	add.w	r0, r5, #24
 8012f7a:	f000 fa79 	bl	8013470 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012f7e:	4620      	mov	r0, r4
 8012f80:	bd70      	pop	{r4, r5, r6, pc}
 8012f82:	4604      	mov	r4, r0
 8012f84:	4620      	mov	r0, r4
 8012f86:	bd70      	pop	{r4, r5, r6, pc}
 8012f88:	4628      	mov	r0, r5
 8012f8a:	f7ff ffd5 	bl	8012f38 <std_msgs__msg__Header__fini>
 8012f8e:	4630      	mov	r0, r6
 8012f90:	f000 fa6e 	bl	8013470 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012f94:	e7ea      	b.n	8012f6c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 8012f96:	bf00      	nop

08012f98 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 8012f98:	b148      	cbz	r0, 8012fae <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 8012f9a:	b510      	push	{r4, lr}
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	f7ff ffcb 	bl	8012f38 <std_msgs__msg__Header__fini>
 8012fa2:	f104 0018 	add.w	r0, r4, #24
 8012fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012faa:	f000 ba61 	b.w	8013470 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012fae:	4770      	bx	lr

08012fb0 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 8012fb0:	b570      	push	{r4, r5, r6, lr}
 8012fb2:	4605      	mov	r5, r0
 8012fb4:	b1a8      	cbz	r0, 8012fe2 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 8012fb6:	f7ff ff9b 	bl	8012ef0 <std_msgs__msg__Header__init>
 8012fba:	4604      	mov	r4, r0
 8012fbc:	b140      	cbz	r0, 8012fd0 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 8012fbe:	f105 0618 	add.w	r6, r5, #24
 8012fc2:	4630      	mov	r0, r6
 8012fc4:	f000 fa56 	bl	8013474 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 8012fc8:	4604      	mov	r4, r0
 8012fca:	b168      	cbz	r0, 8012fe8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 8012fcc:	4620      	mov	r0, r4
 8012fce:	bd70      	pop	{r4, r5, r6, pc}
 8012fd0:	4628      	mov	r0, r5
 8012fd2:	f7ff ffb1 	bl	8012f38 <std_msgs__msg__Header__fini>
 8012fd6:	f105 0018 	add.w	r0, r5, #24
 8012fda:	f000 fa4f 	bl	801347c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012fde:	4620      	mov	r0, r4
 8012fe0:	bd70      	pop	{r4, r5, r6, pc}
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	bd70      	pop	{r4, r5, r6, pc}
 8012fe8:	4628      	mov	r0, r5
 8012fea:	f7ff ffa5 	bl	8012f38 <std_msgs__msg__Header__fini>
 8012fee:	4630      	mov	r0, r6
 8012ff0:	f000 fa44 	bl	801347c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012ff4:	e7ea      	b.n	8012fcc <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 8012ff6:	bf00      	nop

08012ff8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 8012ff8:	b148      	cbz	r0, 801300e <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 8012ffa:	b510      	push	{r4, lr}
 8012ffc:	4604      	mov	r4, r0
 8012ffe:	f7ff ff9b 	bl	8012f38 <std_msgs__msg__Header__fini>
 8013002:	f104 0018 	add.w	r0, r4, #24
 8013006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801300a:	f000 ba37 	b.w	801347c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801300e:	4770      	bx	lr

08013010 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 8013010:	b538      	push	{r3, r4, r5, lr}
 8013012:	4604      	mov	r4, r0
 8013014:	b128      	cbz	r0, 8013022 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 8013016:	f7ff ff23 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 801301a:	4605      	mov	r5, r0
 801301c:	b120      	cbz	r0, 8013028 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801301e:	4628      	mov	r0, r5
 8013020:	bd38      	pop	{r3, r4, r5, pc}
 8013022:	4605      	mov	r5, r0
 8013024:	4628      	mov	r0, r5
 8013026:	bd38      	pop	{r3, r4, r5, pc}
 8013028:	4620      	mov	r0, r4
 801302a:	f7ff ff1d 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 801302e:	4628      	mov	r0, r5
 8013030:	bd38      	pop	{r3, r4, r5, pc}
 8013032:	bf00      	nop

08013034 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 8013034:	b108      	cbz	r0, 801303a <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 8013036:	f7ff bf17 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 801303a:	4770      	bx	lr

0801303c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 801303c:	b538      	push	{r3, r4, r5, lr}
 801303e:	4604      	mov	r4, r0
 8013040:	b128      	cbz	r0, 801304e <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 8013042:	f7ff ff0d 	bl	8012e60 <builtin_interfaces__msg__Time__init>
 8013046:	4605      	mov	r5, r0
 8013048:	b120      	cbz	r0, 8013054 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 801304a:	4628      	mov	r0, r5
 801304c:	bd38      	pop	{r3, r4, r5, pc}
 801304e:	4605      	mov	r5, r0
 8013050:	4628      	mov	r0, r5
 8013052:	bd38      	pop	{r3, r4, r5, pc}
 8013054:	4620      	mov	r0, r4
 8013056:	f7ff ff07 	bl	8012e68 <builtin_interfaces__msg__Time__fini>
 801305a:	4628      	mov	r0, r5
 801305c:	bd38      	pop	{r3, r4, r5, pc}
 801305e:	bf00      	nop

08013060 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 8013060:	b108      	cbz	r0, 8013066 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 8013062:	f7ff bf01 	b.w	8012e68 <builtin_interfaces__msg__Time__fini>
 8013066:	4770      	bx	lr

08013068 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 8013068:	f000 b9fe 	b.w	8013468 <tier4_vehicle_msgs__msg__ActuationCommand__init>

0801306c <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 801306c:	f000 ba00 	b.w	8013470 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

08013070 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 8013070:	4b04      	ldr	r3, [pc, #16]	@ (8013084 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8013072:	681a      	ldr	r2, [r3, #0]
 8013074:	b10a      	cbz	r2, 801307a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 8013076:	4803      	ldr	r0, [pc, #12]	@ (8013084 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8013078:	4770      	bx	lr
 801307a:	4a03      	ldr	r2, [pc, #12]	@ (8013088 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 801307c:	4801      	ldr	r0, [pc, #4]	@ (8013084 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801307e:	6812      	ldr	r2, [r2, #0]
 8013080:	601a      	str	r2, [r3, #0]
 8013082:	4770      	bx	lr
 8013084:	24001190 	.word	0x24001190
 8013088:	24000d2c 	.word	0x24000d2c

0801308c <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 801308c:	f000 b9f2 	b.w	8013474 <tier4_vehicle_msgs__msg__ActuationStatus__init>

08013090 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 8013090:	f000 b9f4 	b.w	801347c <tier4_vehicle_msgs__msg__ActuationStatus__fini>

08013094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8013094:	4b04      	ldr	r3, [pc, #16]	@ (80130a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8013096:	681a      	ldr	r2, [r3, #0]
 8013098:	b10a      	cbz	r2, 801309e <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 801309a:	4803      	ldr	r0, [pc, #12]	@ (80130a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801309c:	4770      	bx	lr
 801309e:	4a03      	ldr	r2, [pc, #12]	@ (80130ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 80130a0:	4801      	ldr	r0, [pc, #4]	@ (80130a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 80130a2:	6812      	ldr	r2, [r2, #0]
 80130a4:	601a      	str	r2, [r3, #0]
 80130a6:	4770      	bx	lr
 80130a8:	24001250 	.word	0x24001250
 80130ac:	24000d2c 	.word	0x24000d2c

080130b0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 80130b0:	b1b8      	cbz	r0, 80130e2 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 80130b2:	b538      	push	{r3, r4, r5, lr}
 80130b4:	460d      	mov	r5, r1
 80130b6:	2108      	movs	r1, #8
 80130b8:	4628      	mov	r0, r5
 80130ba:	f7ff f931 	bl	8012320 <ucdr_alignment>
 80130be:	f105 0308 	add.w	r3, r5, #8
 80130c2:	2108      	movs	r1, #8
 80130c4:	f1c5 0508 	rsb	r5, r5, #8
 80130c8:	181c      	adds	r4, r3, r0
 80130ca:	4620      	mov	r0, r4
 80130cc:	f7ff f928 	bl	8012320 <ucdr_alignment>
 80130d0:	2108      	movs	r1, #8
 80130d2:	4408      	add	r0, r1
 80130d4:	4404      	add	r4, r0
 80130d6:	4620      	mov	r0, r4
 80130d8:	f7ff f922 	bl	8012320 <ucdr_alignment>
 80130dc:	4428      	add	r0, r5
 80130de:	4420      	add	r0, r4
 80130e0:	bd38      	pop	{r3, r4, r5, pc}
 80130e2:	4770      	bx	lr

080130e4 <_ActuationCommand__cdr_deserialize>:
 80130e4:	b538      	push	{r3, r4, r5, lr}
 80130e6:	460c      	mov	r4, r1
 80130e8:	b171      	cbz	r1, 8013108 <_ActuationCommand__cdr_deserialize+0x24>
 80130ea:	4605      	mov	r5, r0
 80130ec:	f7ff f82a 	bl	8012144 <ucdr_deserialize_double>
 80130f0:	f104 0108 	add.w	r1, r4, #8
 80130f4:	4628      	mov	r0, r5
 80130f6:	f7ff f825 	bl	8012144 <ucdr_deserialize_double>
 80130fa:	f104 0110 	add.w	r1, r4, #16
 80130fe:	4628      	mov	r0, r5
 8013100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013104:	f7ff b81e 	b.w	8012144 <ucdr_deserialize_double>
 8013108:	4608      	mov	r0, r1
 801310a:	bd38      	pop	{r3, r4, r5, pc}

0801310c <_ActuationCommand__cdr_serialize>:
 801310c:	b198      	cbz	r0, 8013136 <_ActuationCommand__cdr_serialize+0x2a>
 801310e:	b538      	push	{r3, r4, r5, lr}
 8013110:	460d      	mov	r5, r1
 8013112:	4604      	mov	r4, r0
 8013114:	ed90 0b00 	vldr	d0, [r0]
 8013118:	4608      	mov	r0, r1
 801311a:	f7fe ff43 	bl	8011fa4 <ucdr_serialize_double>
 801311e:	4628      	mov	r0, r5
 8013120:	ed94 0b02 	vldr	d0, [r4, #8]
 8013124:	f7fe ff3e 	bl	8011fa4 <ucdr_serialize_double>
 8013128:	4628      	mov	r0, r5
 801312a:	ed94 0b04 	vldr	d0, [r4, #16]
 801312e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013132:	f7fe bf37 	b.w	8011fa4 <ucdr_serialize_double>
 8013136:	4770      	bx	lr

08013138 <_ActuationCommand__get_serialized_size>:
 8013138:	b190      	cbz	r0, 8013160 <_ActuationCommand__get_serialized_size+0x28>
 801313a:	2108      	movs	r1, #8
 801313c:	2000      	movs	r0, #0
 801313e:	b510      	push	{r4, lr}
 8013140:	f7ff f8ee 	bl	8012320 <ucdr_alignment>
 8013144:	2108      	movs	r1, #8
 8013146:	1844      	adds	r4, r0, r1
 8013148:	4620      	mov	r0, r4
 801314a:	f7ff f8e9 	bl	8012320 <ucdr_alignment>
 801314e:	2108      	movs	r1, #8
 8013150:	4408      	add	r0, r1
 8013152:	4404      	add	r4, r0
 8013154:	4620      	mov	r0, r4
 8013156:	f7ff f8e3 	bl	8012320 <ucdr_alignment>
 801315a:	3008      	adds	r0, #8
 801315c:	4420      	add	r0, r4
 801315e:	bd10      	pop	{r4, pc}
 8013160:	4770      	bx	lr
 8013162:	bf00      	nop

08013164 <_ActuationCommand__max_serialized_size>:
 8013164:	b538      	push	{r3, r4, r5, lr}
 8013166:	2108      	movs	r1, #8
 8013168:	2000      	movs	r0, #0
 801316a:	f7ff f8d9 	bl	8012320 <ucdr_alignment>
 801316e:	2108      	movs	r1, #8
 8013170:	1845      	adds	r5, r0, r1
 8013172:	4628      	mov	r0, r5
 8013174:	f7ff f8d4 	bl	8012320 <ucdr_alignment>
 8013178:	2108      	movs	r1, #8
 801317a:	1844      	adds	r4, r0, r1
 801317c:	442c      	add	r4, r5
 801317e:	4620      	mov	r0, r4
 8013180:	f7ff f8ce 	bl	8012320 <ucdr_alignment>
 8013184:	3008      	adds	r0, #8
 8013186:	4420      	add	r0, r4
 8013188:	bd38      	pop	{r3, r4, r5, pc}
 801318a:	bf00      	nop

0801318c <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801318c:	b570      	push	{r4, r5, r6, lr}
 801318e:	460c      	mov	r4, r1
 8013190:	2301      	movs	r3, #1
 8013192:	2108      	movs	r1, #8
 8013194:	f104 0508 	add.w	r5, r4, #8
 8013198:	7003      	strb	r3, [r0, #0]
 801319a:	4620      	mov	r0, r4
 801319c:	f1c4 0408 	rsb	r4, r4, #8
 80131a0:	f7ff f8be 	bl	8012320 <ucdr_alignment>
 80131a4:	1946      	adds	r6, r0, r5
 80131a6:	2108      	movs	r1, #8
 80131a8:	4630      	mov	r0, r6
 80131aa:	f7ff f8b9 	bl	8012320 <ucdr_alignment>
 80131ae:	2108      	movs	r1, #8
 80131b0:	1845      	adds	r5, r0, r1
 80131b2:	4435      	add	r5, r6
 80131b4:	4628      	mov	r0, r5
 80131b6:	f7ff f8b3 	bl	8012320 <ucdr_alignment>
 80131ba:	4420      	add	r0, r4
 80131bc:	4428      	add	r0, r5
 80131be:	bd70      	pop	{r4, r5, r6, pc}

080131c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 80131c0:	4800      	ldr	r0, [pc, #0]	@ (80131c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 80131c2:	4770      	bx	lr
 80131c4:	2400125c 	.word	0x2400125c

080131c8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 80131c8:	b1b8      	cbz	r0, 80131fa <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 80131ca:	b538      	push	{r3, r4, r5, lr}
 80131cc:	460d      	mov	r5, r1
 80131ce:	2108      	movs	r1, #8
 80131d0:	4628      	mov	r0, r5
 80131d2:	f7ff f8a5 	bl	8012320 <ucdr_alignment>
 80131d6:	f105 0308 	add.w	r3, r5, #8
 80131da:	2108      	movs	r1, #8
 80131dc:	f1c5 0508 	rsb	r5, r5, #8
 80131e0:	181c      	adds	r4, r3, r0
 80131e2:	4620      	mov	r0, r4
 80131e4:	f7ff f89c 	bl	8012320 <ucdr_alignment>
 80131e8:	2108      	movs	r1, #8
 80131ea:	4408      	add	r0, r1
 80131ec:	4404      	add	r4, r0
 80131ee:	4620      	mov	r0, r4
 80131f0:	f7ff f896 	bl	8012320 <ucdr_alignment>
 80131f4:	4428      	add	r0, r5
 80131f6:	4420      	add	r0, r4
 80131f8:	bd38      	pop	{r3, r4, r5, pc}
 80131fa:	4770      	bx	lr

080131fc <_ActuationStatus__cdr_deserialize>:
 80131fc:	b538      	push	{r3, r4, r5, lr}
 80131fe:	460c      	mov	r4, r1
 8013200:	b171      	cbz	r1, 8013220 <_ActuationStatus__cdr_deserialize+0x24>
 8013202:	4605      	mov	r5, r0
 8013204:	f7fe ff9e 	bl	8012144 <ucdr_deserialize_double>
 8013208:	f104 0108 	add.w	r1, r4, #8
 801320c:	4628      	mov	r0, r5
 801320e:	f7fe ff99 	bl	8012144 <ucdr_deserialize_double>
 8013212:	f104 0110 	add.w	r1, r4, #16
 8013216:	4628      	mov	r0, r5
 8013218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801321c:	f7fe bf92 	b.w	8012144 <ucdr_deserialize_double>
 8013220:	4608      	mov	r0, r1
 8013222:	bd38      	pop	{r3, r4, r5, pc}

08013224 <_ActuationStatus__cdr_serialize>:
 8013224:	b198      	cbz	r0, 801324e <_ActuationStatus__cdr_serialize+0x2a>
 8013226:	b538      	push	{r3, r4, r5, lr}
 8013228:	460d      	mov	r5, r1
 801322a:	4604      	mov	r4, r0
 801322c:	ed90 0b00 	vldr	d0, [r0]
 8013230:	4608      	mov	r0, r1
 8013232:	f7fe feb7 	bl	8011fa4 <ucdr_serialize_double>
 8013236:	4628      	mov	r0, r5
 8013238:	ed94 0b02 	vldr	d0, [r4, #8]
 801323c:	f7fe feb2 	bl	8011fa4 <ucdr_serialize_double>
 8013240:	4628      	mov	r0, r5
 8013242:	ed94 0b04 	vldr	d0, [r4, #16]
 8013246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801324a:	f7fe beab 	b.w	8011fa4 <ucdr_serialize_double>
 801324e:	4770      	bx	lr

08013250 <_ActuationStatus__get_serialized_size>:
 8013250:	b190      	cbz	r0, 8013278 <_ActuationStatus__get_serialized_size+0x28>
 8013252:	2108      	movs	r1, #8
 8013254:	2000      	movs	r0, #0
 8013256:	b510      	push	{r4, lr}
 8013258:	f7ff f862 	bl	8012320 <ucdr_alignment>
 801325c:	2108      	movs	r1, #8
 801325e:	1844      	adds	r4, r0, r1
 8013260:	4620      	mov	r0, r4
 8013262:	f7ff f85d 	bl	8012320 <ucdr_alignment>
 8013266:	2108      	movs	r1, #8
 8013268:	4408      	add	r0, r1
 801326a:	4404      	add	r4, r0
 801326c:	4620      	mov	r0, r4
 801326e:	f7ff f857 	bl	8012320 <ucdr_alignment>
 8013272:	3008      	adds	r0, #8
 8013274:	4420      	add	r0, r4
 8013276:	bd10      	pop	{r4, pc}
 8013278:	4770      	bx	lr
 801327a:	bf00      	nop

0801327c <_ActuationStatus__max_serialized_size>:
 801327c:	b538      	push	{r3, r4, r5, lr}
 801327e:	2108      	movs	r1, #8
 8013280:	2000      	movs	r0, #0
 8013282:	f7ff f84d 	bl	8012320 <ucdr_alignment>
 8013286:	2108      	movs	r1, #8
 8013288:	1845      	adds	r5, r0, r1
 801328a:	4628      	mov	r0, r5
 801328c:	f7ff f848 	bl	8012320 <ucdr_alignment>
 8013290:	2108      	movs	r1, #8
 8013292:	1844      	adds	r4, r0, r1
 8013294:	442c      	add	r4, r5
 8013296:	4620      	mov	r0, r4
 8013298:	f7ff f842 	bl	8012320 <ucdr_alignment>
 801329c:	3008      	adds	r0, #8
 801329e:	4420      	add	r0, r4
 80132a0:	bd38      	pop	{r3, r4, r5, pc}
 80132a2:	bf00      	nop

080132a4 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 80132a4:	b570      	push	{r4, r5, r6, lr}
 80132a6:	460c      	mov	r4, r1
 80132a8:	2301      	movs	r3, #1
 80132aa:	2108      	movs	r1, #8
 80132ac:	f104 0508 	add.w	r5, r4, #8
 80132b0:	7003      	strb	r3, [r0, #0]
 80132b2:	4620      	mov	r0, r4
 80132b4:	f1c4 0408 	rsb	r4, r4, #8
 80132b8:	f7ff f832 	bl	8012320 <ucdr_alignment>
 80132bc:	1946      	adds	r6, r0, r5
 80132be:	2108      	movs	r1, #8
 80132c0:	4630      	mov	r0, r6
 80132c2:	f7ff f82d 	bl	8012320 <ucdr_alignment>
 80132c6:	2108      	movs	r1, #8
 80132c8:	1845      	adds	r5, r0, r1
 80132ca:	4435      	add	r5, r6
 80132cc:	4628      	mov	r0, r5
 80132ce:	f7ff f827 	bl	8012320 <ucdr_alignment>
 80132d2:	4420      	add	r0, r4
 80132d4:	4428      	add	r0, r5
 80132d6:	bd70      	pop	{r4, r5, r6, pc}

080132d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 80132d8:	4800      	ldr	r0, [pc, #0]	@ (80132dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 80132da:	4770      	bx	lr
 80132dc:	24001284 	.word	0x24001284

080132e0 <ucdr_serialize_endian_array_char>:
 80132e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132e4:	4619      	mov	r1, r3
 80132e6:	461f      	mov	r7, r3
 80132e8:	4605      	mov	r5, r0
 80132ea:	4690      	mov	r8, r2
 80132ec:	f7fe fff0 	bl	80122d0 <ucdr_check_buffer_available_for>
 80132f0:	b9e0      	cbnz	r0, 801332c <ucdr_serialize_endian_array_char+0x4c>
 80132f2:	463e      	mov	r6, r7
 80132f4:	e00b      	b.n	801330e <ucdr_serialize_endian_array_char+0x2e>
 80132f6:	4441      	add	r1, r8
 80132f8:	68a8      	ldr	r0, [r5, #8]
 80132fa:	4622      	mov	r2, r4
 80132fc:	1b36      	subs	r6, r6, r4
 80132fe:	f000 fcb6 	bl	8013c6e <memcpy>
 8013302:	68ab      	ldr	r3, [r5, #8]
 8013304:	6928      	ldr	r0, [r5, #16]
 8013306:	4423      	add	r3, r4
 8013308:	4420      	add	r0, r4
 801330a:	60ab      	str	r3, [r5, #8]
 801330c:	6128      	str	r0, [r5, #16]
 801330e:	4631      	mov	r1, r6
 8013310:	2201      	movs	r2, #1
 8013312:	4628      	mov	r0, r5
 8013314:	f7ff f832 	bl	801237c <ucdr_check_final_buffer_behavior_array>
 8013318:	1bb9      	subs	r1, r7, r6
 801331a:	4604      	mov	r4, r0
 801331c:	2800      	cmp	r0, #0
 801331e:	d1ea      	bne.n	80132f6 <ucdr_serialize_endian_array_char+0x16>
 8013320:	2301      	movs	r3, #1
 8013322:	7da8      	ldrb	r0, [r5, #22]
 8013324:	756b      	strb	r3, [r5, #21]
 8013326:	4058      	eors	r0, r3
 8013328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801332c:	463a      	mov	r2, r7
 801332e:	4641      	mov	r1, r8
 8013330:	68a8      	ldr	r0, [r5, #8]
 8013332:	f000 fc9c 	bl	8013c6e <memcpy>
 8013336:	68aa      	ldr	r2, [r5, #8]
 8013338:	692b      	ldr	r3, [r5, #16]
 801333a:	443a      	add	r2, r7
 801333c:	443b      	add	r3, r7
 801333e:	60aa      	str	r2, [r5, #8]
 8013340:	612b      	str	r3, [r5, #16]
 8013342:	e7ed      	b.n	8013320 <ucdr_serialize_endian_array_char+0x40>

08013344 <ucdr_deserialize_endian_array_char>:
 8013344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013348:	4619      	mov	r1, r3
 801334a:	461f      	mov	r7, r3
 801334c:	4605      	mov	r5, r0
 801334e:	4690      	mov	r8, r2
 8013350:	f7fe ffbe 	bl	80122d0 <ucdr_check_buffer_available_for>
 8013354:	b9e8      	cbnz	r0, 8013392 <ucdr_deserialize_endian_array_char+0x4e>
 8013356:	463e      	mov	r6, r7
 8013358:	e00c      	b.n	8013374 <ucdr_deserialize_endian_array_char+0x30>
 801335a:	eb08 0003 	add.w	r0, r8, r3
 801335e:	68a9      	ldr	r1, [r5, #8]
 8013360:	4622      	mov	r2, r4
 8013362:	1b36      	subs	r6, r6, r4
 8013364:	f000 fc83 	bl	8013c6e <memcpy>
 8013368:	68ab      	ldr	r3, [r5, #8]
 801336a:	6928      	ldr	r0, [r5, #16]
 801336c:	4423      	add	r3, r4
 801336e:	4420      	add	r0, r4
 8013370:	60ab      	str	r3, [r5, #8]
 8013372:	6128      	str	r0, [r5, #16]
 8013374:	4631      	mov	r1, r6
 8013376:	2201      	movs	r2, #1
 8013378:	4628      	mov	r0, r5
 801337a:	f7fe ffff 	bl	801237c <ucdr_check_final_buffer_behavior_array>
 801337e:	1bbb      	subs	r3, r7, r6
 8013380:	4604      	mov	r4, r0
 8013382:	2800      	cmp	r0, #0
 8013384:	d1e9      	bne.n	801335a <ucdr_deserialize_endian_array_char+0x16>
 8013386:	2301      	movs	r3, #1
 8013388:	7da8      	ldrb	r0, [r5, #22]
 801338a:	756b      	strb	r3, [r5, #21]
 801338c:	4058      	eors	r0, r3
 801338e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013392:	463a      	mov	r2, r7
 8013394:	68a9      	ldr	r1, [r5, #8]
 8013396:	4640      	mov	r0, r8
 8013398:	f000 fc69 	bl	8013c6e <memcpy>
 801339c:	68aa      	ldr	r2, [r5, #8]
 801339e:	692b      	ldr	r3, [r5, #16]
 80133a0:	443a      	add	r2, r7
 80133a2:	443b      	add	r3, r7
 80133a4:	60aa      	str	r2, [r5, #8]
 80133a6:	612b      	str	r3, [r5, #16]
 80133a8:	e7ed      	b.n	8013386 <ucdr_deserialize_endian_array_char+0x42>
 80133aa:	bf00      	nop

080133ac <rosidl_runtime_c__String__init>:
 80133ac:	b510      	push	{r4, lr}
 80133ae:	4604      	mov	r4, r0
 80133b0:	b086      	sub	sp, #24
 80133b2:	b170      	cbz	r0, 80133d2 <rosidl_runtime_c__String__init+0x26>
 80133b4:	a801      	add	r0, sp, #4
 80133b6:	f7ff f827 	bl	8012408 <rcutils_get_default_allocator>
 80133ba:	9b01      	ldr	r3, [sp, #4]
 80133bc:	9905      	ldr	r1, [sp, #20]
 80133be:	2001      	movs	r0, #1
 80133c0:	4798      	blx	r3
 80133c2:	6020      	str	r0, [r4, #0]
 80133c4:	b128      	cbz	r0, 80133d2 <rosidl_runtime_c__String__init+0x26>
 80133c6:	2100      	movs	r1, #0
 80133c8:	2201      	movs	r2, #1
 80133ca:	7001      	strb	r1, [r0, #0]
 80133cc:	4610      	mov	r0, r2
 80133ce:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80133d2:	b006      	add	sp, #24
 80133d4:	bd10      	pop	{r4, pc}
 80133d6:	bf00      	nop

080133d8 <rosidl_runtime_c__String__fini>:
 80133d8:	b320      	cbz	r0, 8013424 <rosidl_runtime_c__String__fini+0x4c>
 80133da:	6803      	ldr	r3, [r0, #0]
 80133dc:	b510      	push	{r4, lr}
 80133de:	4604      	mov	r4, r0
 80133e0:	b086      	sub	sp, #24
 80133e2:	b173      	cbz	r3, 8013402 <rosidl_runtime_c__String__fini+0x2a>
 80133e4:	6883      	ldr	r3, [r0, #8]
 80133e6:	b1f3      	cbz	r3, 8013426 <rosidl_runtime_c__String__fini+0x4e>
 80133e8:	a801      	add	r0, sp, #4
 80133ea:	f7ff f80d 	bl	8012408 <rcutils_get_default_allocator>
 80133ee:	9b02      	ldr	r3, [sp, #8]
 80133f0:	9905      	ldr	r1, [sp, #20]
 80133f2:	6820      	ldr	r0, [r4, #0]
 80133f4:	4798      	blx	r3
 80133f6:	2300      	movs	r3, #0
 80133f8:	e9c4 3300 	strd	r3, r3, [r4]
 80133fc:	60a3      	str	r3, [r4, #8]
 80133fe:	b006      	add	sp, #24
 8013400:	bd10      	pop	{r4, pc}
 8013402:	6843      	ldr	r3, [r0, #4]
 8013404:	b9db      	cbnz	r3, 801343e <rosidl_runtime_c__String__fini+0x66>
 8013406:	6883      	ldr	r3, [r0, #8]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d0f8      	beq.n	80133fe <rosidl_runtime_c__String__fini+0x26>
 801340c:	4b12      	ldr	r3, [pc, #72]	@ (8013458 <rosidl_runtime_c__String__fini+0x80>)
 801340e:	2251      	movs	r2, #81	@ 0x51
 8013410:	2101      	movs	r1, #1
 8013412:	4812      	ldr	r0, [pc, #72]	@ (801345c <rosidl_runtime_c__String__fini+0x84>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	68db      	ldr	r3, [r3, #12]
 8013418:	f000 fa62 	bl	80138e0 <fwrite>
 801341c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013420:	f000 f84a 	bl	80134b8 <exit>
 8013424:	4770      	bx	lr
 8013426:	4b0c      	ldr	r3, [pc, #48]	@ (8013458 <rosidl_runtime_c__String__fini+0x80>)
 8013428:	224c      	movs	r2, #76	@ 0x4c
 801342a:	2101      	movs	r1, #1
 801342c:	480c      	ldr	r0, [pc, #48]	@ (8013460 <rosidl_runtime_c__String__fini+0x88>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	68db      	ldr	r3, [r3, #12]
 8013432:	f000 fa55 	bl	80138e0 <fwrite>
 8013436:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801343a:	f000 f83d 	bl	80134b8 <exit>
 801343e:	4b06      	ldr	r3, [pc, #24]	@ (8013458 <rosidl_runtime_c__String__fini+0x80>)
 8013440:	224e      	movs	r2, #78	@ 0x4e
 8013442:	2101      	movs	r1, #1
 8013444:	4807      	ldr	r0, [pc, #28]	@ (8013464 <rosidl_runtime_c__String__fini+0x8c>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	68db      	ldr	r3, [r3, #12]
 801344a:	f000 fa49 	bl	80138e0 <fwrite>
 801344e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013452:	f000 f831 	bl	80134b8 <exit>
 8013456:	bf00      	nop
 8013458:	240012b8 	.word	0x240012b8
 801345c:	08015c84 	.word	0x08015c84
 8013460:	08015be4 	.word	0x08015be4
 8013464:	08015c34 	.word	0x08015c34

08013468 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 8013468:	3800      	subs	r0, #0
 801346a:	bf18      	it	ne
 801346c:	2001      	movne	r0, #1
 801346e:	4770      	bx	lr

08013470 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 8013470:	4770      	bx	lr
 8013472:	bf00      	nop

08013474 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 8013474:	3800      	subs	r0, #0
 8013476:	bf18      	it	ne
 8013478:	2001      	movne	r0, #1
 801347a:	4770      	bx	lr

0801347c <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 801347c:	4770      	bx	lr
 801347e:	bf00      	nop

08013480 <calloc>:
 8013480:	4b02      	ldr	r3, [pc, #8]	@ (801348c <calloc+0xc>)
 8013482:	460a      	mov	r2, r1
 8013484:	4601      	mov	r1, r0
 8013486:	6818      	ldr	r0, [r3, #0]
 8013488:	f000 b802 	b.w	8013490 <_calloc_r>
 801348c:	240012b8 	.word	0x240012b8

08013490 <_calloc_r>:
 8013490:	b570      	push	{r4, r5, r6, lr}
 8013492:	fba1 5402 	umull	r5, r4, r1, r2
 8013496:	b93c      	cbnz	r4, 80134a8 <_calloc_r+0x18>
 8013498:	4629      	mov	r1, r5
 801349a:	f000 f851 	bl	8013540 <_malloc_r>
 801349e:	4606      	mov	r6, r0
 80134a0:	b928      	cbnz	r0, 80134ae <_calloc_r+0x1e>
 80134a2:	2600      	movs	r6, #0
 80134a4:	4630      	mov	r0, r6
 80134a6:	bd70      	pop	{r4, r5, r6, pc}
 80134a8:	220c      	movs	r2, #12
 80134aa:	6002      	str	r2, [r0, #0]
 80134ac:	e7f9      	b.n	80134a2 <_calloc_r+0x12>
 80134ae:	462a      	mov	r2, r5
 80134b0:	4621      	mov	r1, r4
 80134b2:	f000 fafb 	bl	8013aac <memset>
 80134b6:	e7f5      	b.n	80134a4 <_calloc_r+0x14>

080134b8 <exit>:
 80134b8:	b508      	push	{r3, lr}
 80134ba:	4b06      	ldr	r3, [pc, #24]	@ (80134d4 <exit+0x1c>)
 80134bc:	4604      	mov	r4, r0
 80134be:	b113      	cbz	r3, 80134c6 <exit+0xe>
 80134c0:	2100      	movs	r1, #0
 80134c2:	f3af 8000 	nop.w
 80134c6:	4b04      	ldr	r3, [pc, #16]	@ (80134d8 <exit+0x20>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	b103      	cbz	r3, 80134ce <exit+0x16>
 80134cc:	4798      	blx	r3
 80134ce:	4620      	mov	r0, r4
 80134d0:	f7ed ff1e 	bl	8001310 <_exit>
 80134d4:	00000000 	.word	0x00000000
 80134d8:	24033448 	.word	0x24033448

080134dc <malloc>:
 80134dc:	4b02      	ldr	r3, [pc, #8]	@ (80134e8 <malloc+0xc>)
 80134de:	4601      	mov	r1, r0
 80134e0:	6818      	ldr	r0, [r3, #0]
 80134e2:	f000 b82d 	b.w	8013540 <_malloc_r>
 80134e6:	bf00      	nop
 80134e8:	240012b8 	.word	0x240012b8

080134ec <free>:
 80134ec:	4b02      	ldr	r3, [pc, #8]	@ (80134f8 <free+0xc>)
 80134ee:	4601      	mov	r1, r0
 80134f0:	6818      	ldr	r0, [r3, #0]
 80134f2:	f000 bbcb 	b.w	8013c8c <_free_r>
 80134f6:	bf00      	nop
 80134f8:	240012b8 	.word	0x240012b8

080134fc <sbrk_aligned>:
 80134fc:	b570      	push	{r4, r5, r6, lr}
 80134fe:	4e0f      	ldr	r6, [pc, #60]	@ (801353c <sbrk_aligned+0x40>)
 8013500:	460c      	mov	r4, r1
 8013502:	6831      	ldr	r1, [r6, #0]
 8013504:	4605      	mov	r5, r0
 8013506:	b911      	cbnz	r1, 801350e <sbrk_aligned+0x12>
 8013508:	f000 fb62 	bl	8013bd0 <_sbrk_r>
 801350c:	6030      	str	r0, [r6, #0]
 801350e:	4621      	mov	r1, r4
 8013510:	4628      	mov	r0, r5
 8013512:	f000 fb5d 	bl	8013bd0 <_sbrk_r>
 8013516:	1c43      	adds	r3, r0, #1
 8013518:	d103      	bne.n	8013522 <sbrk_aligned+0x26>
 801351a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801351e:	4620      	mov	r0, r4
 8013520:	bd70      	pop	{r4, r5, r6, pc}
 8013522:	1cc4      	adds	r4, r0, #3
 8013524:	f024 0403 	bic.w	r4, r4, #3
 8013528:	42a0      	cmp	r0, r4
 801352a:	d0f8      	beq.n	801351e <sbrk_aligned+0x22>
 801352c:	1a21      	subs	r1, r4, r0
 801352e:	4628      	mov	r0, r5
 8013530:	f000 fb4e 	bl	8013bd0 <_sbrk_r>
 8013534:	3001      	adds	r0, #1
 8013536:	d1f2      	bne.n	801351e <sbrk_aligned+0x22>
 8013538:	e7ef      	b.n	801351a <sbrk_aligned+0x1e>
 801353a:	bf00      	nop
 801353c:	24033308 	.word	0x24033308

08013540 <_malloc_r>:
 8013540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013544:	1ccd      	adds	r5, r1, #3
 8013546:	f025 0503 	bic.w	r5, r5, #3
 801354a:	3508      	adds	r5, #8
 801354c:	2d0c      	cmp	r5, #12
 801354e:	bf38      	it	cc
 8013550:	250c      	movcc	r5, #12
 8013552:	2d00      	cmp	r5, #0
 8013554:	4606      	mov	r6, r0
 8013556:	db01      	blt.n	801355c <_malloc_r+0x1c>
 8013558:	42a9      	cmp	r1, r5
 801355a:	d904      	bls.n	8013566 <_malloc_r+0x26>
 801355c:	230c      	movs	r3, #12
 801355e:	6033      	str	r3, [r6, #0]
 8013560:	2000      	movs	r0, #0
 8013562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013566:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801363c <_malloc_r+0xfc>
 801356a:	f000 f869 	bl	8013640 <__malloc_lock>
 801356e:	f8d8 3000 	ldr.w	r3, [r8]
 8013572:	461c      	mov	r4, r3
 8013574:	bb44      	cbnz	r4, 80135c8 <_malloc_r+0x88>
 8013576:	4629      	mov	r1, r5
 8013578:	4630      	mov	r0, r6
 801357a:	f7ff ffbf 	bl	80134fc <sbrk_aligned>
 801357e:	1c43      	adds	r3, r0, #1
 8013580:	4604      	mov	r4, r0
 8013582:	d158      	bne.n	8013636 <_malloc_r+0xf6>
 8013584:	f8d8 4000 	ldr.w	r4, [r8]
 8013588:	4627      	mov	r7, r4
 801358a:	2f00      	cmp	r7, #0
 801358c:	d143      	bne.n	8013616 <_malloc_r+0xd6>
 801358e:	2c00      	cmp	r4, #0
 8013590:	d04b      	beq.n	801362a <_malloc_r+0xea>
 8013592:	6823      	ldr	r3, [r4, #0]
 8013594:	4639      	mov	r1, r7
 8013596:	4630      	mov	r0, r6
 8013598:	eb04 0903 	add.w	r9, r4, r3
 801359c:	f000 fb18 	bl	8013bd0 <_sbrk_r>
 80135a0:	4581      	cmp	r9, r0
 80135a2:	d142      	bne.n	801362a <_malloc_r+0xea>
 80135a4:	6821      	ldr	r1, [r4, #0]
 80135a6:	1a6d      	subs	r5, r5, r1
 80135a8:	4629      	mov	r1, r5
 80135aa:	4630      	mov	r0, r6
 80135ac:	f7ff ffa6 	bl	80134fc <sbrk_aligned>
 80135b0:	3001      	adds	r0, #1
 80135b2:	d03a      	beq.n	801362a <_malloc_r+0xea>
 80135b4:	6823      	ldr	r3, [r4, #0]
 80135b6:	442b      	add	r3, r5
 80135b8:	6023      	str	r3, [r4, #0]
 80135ba:	f8d8 3000 	ldr.w	r3, [r8]
 80135be:	685a      	ldr	r2, [r3, #4]
 80135c0:	bb62      	cbnz	r2, 801361c <_malloc_r+0xdc>
 80135c2:	f8c8 7000 	str.w	r7, [r8]
 80135c6:	e00f      	b.n	80135e8 <_malloc_r+0xa8>
 80135c8:	6822      	ldr	r2, [r4, #0]
 80135ca:	1b52      	subs	r2, r2, r5
 80135cc:	d420      	bmi.n	8013610 <_malloc_r+0xd0>
 80135ce:	2a0b      	cmp	r2, #11
 80135d0:	d917      	bls.n	8013602 <_malloc_r+0xc2>
 80135d2:	1961      	adds	r1, r4, r5
 80135d4:	42a3      	cmp	r3, r4
 80135d6:	6025      	str	r5, [r4, #0]
 80135d8:	bf18      	it	ne
 80135da:	6059      	strne	r1, [r3, #4]
 80135dc:	6863      	ldr	r3, [r4, #4]
 80135de:	bf08      	it	eq
 80135e0:	f8c8 1000 	streq.w	r1, [r8]
 80135e4:	5162      	str	r2, [r4, r5]
 80135e6:	604b      	str	r3, [r1, #4]
 80135e8:	4630      	mov	r0, r6
 80135ea:	f000 f82f 	bl	801364c <__malloc_unlock>
 80135ee:	f104 000b 	add.w	r0, r4, #11
 80135f2:	1d23      	adds	r3, r4, #4
 80135f4:	f020 0007 	bic.w	r0, r0, #7
 80135f8:	1ac2      	subs	r2, r0, r3
 80135fa:	bf1c      	itt	ne
 80135fc:	1a1b      	subne	r3, r3, r0
 80135fe:	50a3      	strne	r3, [r4, r2]
 8013600:	e7af      	b.n	8013562 <_malloc_r+0x22>
 8013602:	6862      	ldr	r2, [r4, #4]
 8013604:	42a3      	cmp	r3, r4
 8013606:	bf0c      	ite	eq
 8013608:	f8c8 2000 	streq.w	r2, [r8]
 801360c:	605a      	strne	r2, [r3, #4]
 801360e:	e7eb      	b.n	80135e8 <_malloc_r+0xa8>
 8013610:	4623      	mov	r3, r4
 8013612:	6864      	ldr	r4, [r4, #4]
 8013614:	e7ae      	b.n	8013574 <_malloc_r+0x34>
 8013616:	463c      	mov	r4, r7
 8013618:	687f      	ldr	r7, [r7, #4]
 801361a:	e7b6      	b.n	801358a <_malloc_r+0x4a>
 801361c:	461a      	mov	r2, r3
 801361e:	685b      	ldr	r3, [r3, #4]
 8013620:	42a3      	cmp	r3, r4
 8013622:	d1fb      	bne.n	801361c <_malloc_r+0xdc>
 8013624:	2300      	movs	r3, #0
 8013626:	6053      	str	r3, [r2, #4]
 8013628:	e7de      	b.n	80135e8 <_malloc_r+0xa8>
 801362a:	230c      	movs	r3, #12
 801362c:	6033      	str	r3, [r6, #0]
 801362e:	4630      	mov	r0, r6
 8013630:	f000 f80c 	bl	801364c <__malloc_unlock>
 8013634:	e794      	b.n	8013560 <_malloc_r+0x20>
 8013636:	6005      	str	r5, [r0, #0]
 8013638:	e7d6      	b.n	80135e8 <_malloc_r+0xa8>
 801363a:	bf00      	nop
 801363c:	2403330c 	.word	0x2403330c

08013640 <__malloc_lock>:
 8013640:	4801      	ldr	r0, [pc, #4]	@ (8013648 <__malloc_lock+0x8>)
 8013642:	f000 bb12 	b.w	8013c6a <__retarget_lock_acquire_recursive>
 8013646:	bf00      	nop
 8013648:	24033450 	.word	0x24033450

0801364c <__malloc_unlock>:
 801364c:	4801      	ldr	r0, [pc, #4]	@ (8013654 <__malloc_unlock+0x8>)
 801364e:	f000 bb0d 	b.w	8013c6c <__retarget_lock_release_recursive>
 8013652:	bf00      	nop
 8013654:	24033450 	.word	0x24033450

08013658 <realloc>:
 8013658:	4b02      	ldr	r3, [pc, #8]	@ (8013664 <realloc+0xc>)
 801365a:	460a      	mov	r2, r1
 801365c:	4601      	mov	r1, r0
 801365e:	6818      	ldr	r0, [r3, #0]
 8013660:	f000 b802 	b.w	8013668 <_realloc_r>
 8013664:	240012b8 	.word	0x240012b8

08013668 <_realloc_r>:
 8013668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801366c:	4680      	mov	r8, r0
 801366e:	4615      	mov	r5, r2
 8013670:	460c      	mov	r4, r1
 8013672:	b921      	cbnz	r1, 801367e <_realloc_r+0x16>
 8013674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013678:	4611      	mov	r1, r2
 801367a:	f7ff bf61 	b.w	8013540 <_malloc_r>
 801367e:	b92a      	cbnz	r2, 801368c <_realloc_r+0x24>
 8013680:	f000 fb04 	bl	8013c8c <_free_r>
 8013684:	2400      	movs	r4, #0
 8013686:	4620      	mov	r0, r4
 8013688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801368c:	f000 fb48 	bl	8013d20 <_malloc_usable_size_r>
 8013690:	4285      	cmp	r5, r0
 8013692:	4606      	mov	r6, r0
 8013694:	d802      	bhi.n	801369c <_realloc_r+0x34>
 8013696:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801369a:	d8f4      	bhi.n	8013686 <_realloc_r+0x1e>
 801369c:	4629      	mov	r1, r5
 801369e:	4640      	mov	r0, r8
 80136a0:	f7ff ff4e 	bl	8013540 <_malloc_r>
 80136a4:	4607      	mov	r7, r0
 80136a6:	2800      	cmp	r0, #0
 80136a8:	d0ec      	beq.n	8013684 <_realloc_r+0x1c>
 80136aa:	42b5      	cmp	r5, r6
 80136ac:	462a      	mov	r2, r5
 80136ae:	4621      	mov	r1, r4
 80136b0:	bf28      	it	cs
 80136b2:	4632      	movcs	r2, r6
 80136b4:	f000 fadb 	bl	8013c6e <memcpy>
 80136b8:	4621      	mov	r1, r4
 80136ba:	4640      	mov	r0, r8
 80136bc:	f000 fae6 	bl	8013c8c <_free_r>
 80136c0:	463c      	mov	r4, r7
 80136c2:	e7e0      	b.n	8013686 <_realloc_r+0x1e>

080136c4 <std>:
 80136c4:	2300      	movs	r3, #0
 80136c6:	b510      	push	{r4, lr}
 80136c8:	4604      	mov	r4, r0
 80136ca:	e9c0 3300 	strd	r3, r3, [r0]
 80136ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80136d2:	6083      	str	r3, [r0, #8]
 80136d4:	8181      	strh	r1, [r0, #12]
 80136d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80136d8:	81c2      	strh	r2, [r0, #14]
 80136da:	6183      	str	r3, [r0, #24]
 80136dc:	4619      	mov	r1, r3
 80136de:	2208      	movs	r2, #8
 80136e0:	305c      	adds	r0, #92	@ 0x5c
 80136e2:	f000 f9e3 	bl	8013aac <memset>
 80136e6:	4b0d      	ldr	r3, [pc, #52]	@ (801371c <std+0x58>)
 80136e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80136ea:	4b0d      	ldr	r3, [pc, #52]	@ (8013720 <std+0x5c>)
 80136ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80136ee:	4b0d      	ldr	r3, [pc, #52]	@ (8013724 <std+0x60>)
 80136f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80136f2:	4b0d      	ldr	r3, [pc, #52]	@ (8013728 <std+0x64>)
 80136f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80136f6:	4b0d      	ldr	r3, [pc, #52]	@ (801372c <std+0x68>)
 80136f8:	6224      	str	r4, [r4, #32]
 80136fa:	429c      	cmp	r4, r3
 80136fc:	d006      	beq.n	801370c <std+0x48>
 80136fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013702:	4294      	cmp	r4, r2
 8013704:	d002      	beq.n	801370c <std+0x48>
 8013706:	33d0      	adds	r3, #208	@ 0xd0
 8013708:	429c      	cmp	r4, r3
 801370a:	d105      	bne.n	8013718 <std+0x54>
 801370c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013714:	f000 baa8 	b.w	8013c68 <__retarget_lock_init_recursive>
 8013718:	bd10      	pop	{r4, pc}
 801371a:	bf00      	nop
 801371c:	080138fd 	.word	0x080138fd
 8013720:	0801391f 	.word	0x0801391f
 8013724:	08013957 	.word	0x08013957
 8013728:	0801397b 	.word	0x0801397b
 801372c:	24033310 	.word	0x24033310

08013730 <stdio_exit_handler>:
 8013730:	4a02      	ldr	r2, [pc, #8]	@ (801373c <stdio_exit_handler+0xc>)
 8013732:	4903      	ldr	r1, [pc, #12]	@ (8013740 <stdio_exit_handler+0x10>)
 8013734:	4803      	ldr	r0, [pc, #12]	@ (8013744 <stdio_exit_handler+0x14>)
 8013736:	f000 b869 	b.w	801380c <_fwalk_sglue>
 801373a:	bf00      	nop
 801373c:	240012ac 	.word	0x240012ac
 8013740:	08013e39 	.word	0x08013e39
 8013744:	240012bc 	.word	0x240012bc

08013748 <cleanup_stdio>:
 8013748:	6841      	ldr	r1, [r0, #4]
 801374a:	4b0c      	ldr	r3, [pc, #48]	@ (801377c <cleanup_stdio+0x34>)
 801374c:	4299      	cmp	r1, r3
 801374e:	b510      	push	{r4, lr}
 8013750:	4604      	mov	r4, r0
 8013752:	d001      	beq.n	8013758 <cleanup_stdio+0x10>
 8013754:	f000 fb70 	bl	8013e38 <_fflush_r>
 8013758:	68a1      	ldr	r1, [r4, #8]
 801375a:	4b09      	ldr	r3, [pc, #36]	@ (8013780 <cleanup_stdio+0x38>)
 801375c:	4299      	cmp	r1, r3
 801375e:	d002      	beq.n	8013766 <cleanup_stdio+0x1e>
 8013760:	4620      	mov	r0, r4
 8013762:	f000 fb69 	bl	8013e38 <_fflush_r>
 8013766:	68e1      	ldr	r1, [r4, #12]
 8013768:	4b06      	ldr	r3, [pc, #24]	@ (8013784 <cleanup_stdio+0x3c>)
 801376a:	4299      	cmp	r1, r3
 801376c:	d004      	beq.n	8013778 <cleanup_stdio+0x30>
 801376e:	4620      	mov	r0, r4
 8013770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013774:	f000 bb60 	b.w	8013e38 <_fflush_r>
 8013778:	bd10      	pop	{r4, pc}
 801377a:	bf00      	nop
 801377c:	24033310 	.word	0x24033310
 8013780:	24033378 	.word	0x24033378
 8013784:	240333e0 	.word	0x240333e0

08013788 <global_stdio_init.part.0>:
 8013788:	b510      	push	{r4, lr}
 801378a:	4b0b      	ldr	r3, [pc, #44]	@ (80137b8 <global_stdio_init.part.0+0x30>)
 801378c:	4c0b      	ldr	r4, [pc, #44]	@ (80137bc <global_stdio_init.part.0+0x34>)
 801378e:	4a0c      	ldr	r2, [pc, #48]	@ (80137c0 <global_stdio_init.part.0+0x38>)
 8013790:	601a      	str	r2, [r3, #0]
 8013792:	4620      	mov	r0, r4
 8013794:	2200      	movs	r2, #0
 8013796:	2104      	movs	r1, #4
 8013798:	f7ff ff94 	bl	80136c4 <std>
 801379c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80137a0:	2201      	movs	r2, #1
 80137a2:	2109      	movs	r1, #9
 80137a4:	f7ff ff8e 	bl	80136c4 <std>
 80137a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80137ac:	2202      	movs	r2, #2
 80137ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137b2:	2112      	movs	r1, #18
 80137b4:	f7ff bf86 	b.w	80136c4 <std>
 80137b8:	24033448 	.word	0x24033448
 80137bc:	24033310 	.word	0x24033310
 80137c0:	08013731 	.word	0x08013731

080137c4 <__sfp_lock_acquire>:
 80137c4:	4801      	ldr	r0, [pc, #4]	@ (80137cc <__sfp_lock_acquire+0x8>)
 80137c6:	f000 ba50 	b.w	8013c6a <__retarget_lock_acquire_recursive>
 80137ca:	bf00      	nop
 80137cc:	24033451 	.word	0x24033451

080137d0 <__sfp_lock_release>:
 80137d0:	4801      	ldr	r0, [pc, #4]	@ (80137d8 <__sfp_lock_release+0x8>)
 80137d2:	f000 ba4b 	b.w	8013c6c <__retarget_lock_release_recursive>
 80137d6:	bf00      	nop
 80137d8:	24033451 	.word	0x24033451

080137dc <__sinit>:
 80137dc:	b510      	push	{r4, lr}
 80137de:	4604      	mov	r4, r0
 80137e0:	f7ff fff0 	bl	80137c4 <__sfp_lock_acquire>
 80137e4:	6a23      	ldr	r3, [r4, #32]
 80137e6:	b11b      	cbz	r3, 80137f0 <__sinit+0x14>
 80137e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137ec:	f7ff bff0 	b.w	80137d0 <__sfp_lock_release>
 80137f0:	4b04      	ldr	r3, [pc, #16]	@ (8013804 <__sinit+0x28>)
 80137f2:	6223      	str	r3, [r4, #32]
 80137f4:	4b04      	ldr	r3, [pc, #16]	@ (8013808 <__sinit+0x2c>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d1f5      	bne.n	80137e8 <__sinit+0xc>
 80137fc:	f7ff ffc4 	bl	8013788 <global_stdio_init.part.0>
 8013800:	e7f2      	b.n	80137e8 <__sinit+0xc>
 8013802:	bf00      	nop
 8013804:	08013749 	.word	0x08013749
 8013808:	24033448 	.word	0x24033448

0801380c <_fwalk_sglue>:
 801380c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013810:	4607      	mov	r7, r0
 8013812:	4688      	mov	r8, r1
 8013814:	4614      	mov	r4, r2
 8013816:	2600      	movs	r6, #0
 8013818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801381c:	f1b9 0901 	subs.w	r9, r9, #1
 8013820:	d505      	bpl.n	801382e <_fwalk_sglue+0x22>
 8013822:	6824      	ldr	r4, [r4, #0]
 8013824:	2c00      	cmp	r4, #0
 8013826:	d1f7      	bne.n	8013818 <_fwalk_sglue+0xc>
 8013828:	4630      	mov	r0, r6
 801382a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801382e:	89ab      	ldrh	r3, [r5, #12]
 8013830:	2b01      	cmp	r3, #1
 8013832:	d907      	bls.n	8013844 <_fwalk_sglue+0x38>
 8013834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013838:	3301      	adds	r3, #1
 801383a:	d003      	beq.n	8013844 <_fwalk_sglue+0x38>
 801383c:	4629      	mov	r1, r5
 801383e:	4638      	mov	r0, r7
 8013840:	47c0      	blx	r8
 8013842:	4306      	orrs	r6, r0
 8013844:	3568      	adds	r5, #104	@ 0x68
 8013846:	e7e9      	b.n	801381c <_fwalk_sglue+0x10>

08013848 <_fwrite_r>:
 8013848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801384c:	9c08      	ldr	r4, [sp, #32]
 801384e:	468a      	mov	sl, r1
 8013850:	4690      	mov	r8, r2
 8013852:	fb02 f903 	mul.w	r9, r2, r3
 8013856:	4606      	mov	r6, r0
 8013858:	b118      	cbz	r0, 8013862 <_fwrite_r+0x1a>
 801385a:	6a03      	ldr	r3, [r0, #32]
 801385c:	b90b      	cbnz	r3, 8013862 <_fwrite_r+0x1a>
 801385e:	f7ff ffbd 	bl	80137dc <__sinit>
 8013862:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013864:	07dd      	lsls	r5, r3, #31
 8013866:	d405      	bmi.n	8013874 <_fwrite_r+0x2c>
 8013868:	89a3      	ldrh	r3, [r4, #12]
 801386a:	0598      	lsls	r0, r3, #22
 801386c:	d402      	bmi.n	8013874 <_fwrite_r+0x2c>
 801386e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013870:	f000 f9fb 	bl	8013c6a <__retarget_lock_acquire_recursive>
 8013874:	89a3      	ldrh	r3, [r4, #12]
 8013876:	0719      	lsls	r1, r3, #28
 8013878:	d516      	bpl.n	80138a8 <_fwrite_r+0x60>
 801387a:	6923      	ldr	r3, [r4, #16]
 801387c:	b1a3      	cbz	r3, 80138a8 <_fwrite_r+0x60>
 801387e:	2500      	movs	r5, #0
 8013880:	454d      	cmp	r5, r9
 8013882:	d01f      	beq.n	80138c4 <_fwrite_r+0x7c>
 8013884:	68a7      	ldr	r7, [r4, #8]
 8013886:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801388a:	3f01      	subs	r7, #1
 801388c:	2f00      	cmp	r7, #0
 801388e:	60a7      	str	r7, [r4, #8]
 8013890:	da04      	bge.n	801389c <_fwrite_r+0x54>
 8013892:	69a3      	ldr	r3, [r4, #24]
 8013894:	429f      	cmp	r7, r3
 8013896:	db0f      	blt.n	80138b8 <_fwrite_r+0x70>
 8013898:	290a      	cmp	r1, #10
 801389a:	d00d      	beq.n	80138b8 <_fwrite_r+0x70>
 801389c:	6823      	ldr	r3, [r4, #0]
 801389e:	1c5a      	adds	r2, r3, #1
 80138a0:	6022      	str	r2, [r4, #0]
 80138a2:	7019      	strb	r1, [r3, #0]
 80138a4:	3501      	adds	r5, #1
 80138a6:	e7eb      	b.n	8013880 <_fwrite_r+0x38>
 80138a8:	4621      	mov	r1, r4
 80138aa:	4630      	mov	r0, r6
 80138ac:	f000 f8a8 	bl	8013a00 <__swsetup_r>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	d0e4      	beq.n	801387e <_fwrite_r+0x36>
 80138b4:	2500      	movs	r5, #0
 80138b6:	e005      	b.n	80138c4 <_fwrite_r+0x7c>
 80138b8:	4622      	mov	r2, r4
 80138ba:	4630      	mov	r0, r6
 80138bc:	f000 f861 	bl	8013982 <__swbuf_r>
 80138c0:	3001      	adds	r0, #1
 80138c2:	d1ef      	bne.n	80138a4 <_fwrite_r+0x5c>
 80138c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80138c6:	07da      	lsls	r2, r3, #31
 80138c8:	d405      	bmi.n	80138d6 <_fwrite_r+0x8e>
 80138ca:	89a3      	ldrh	r3, [r4, #12]
 80138cc:	059b      	lsls	r3, r3, #22
 80138ce:	d402      	bmi.n	80138d6 <_fwrite_r+0x8e>
 80138d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80138d2:	f000 f9cb 	bl	8013c6c <__retarget_lock_release_recursive>
 80138d6:	fbb5 f0f8 	udiv	r0, r5, r8
 80138da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080138e0 <fwrite>:
 80138e0:	b507      	push	{r0, r1, r2, lr}
 80138e2:	9300      	str	r3, [sp, #0]
 80138e4:	4613      	mov	r3, r2
 80138e6:	460a      	mov	r2, r1
 80138e8:	4601      	mov	r1, r0
 80138ea:	4803      	ldr	r0, [pc, #12]	@ (80138f8 <fwrite+0x18>)
 80138ec:	6800      	ldr	r0, [r0, #0]
 80138ee:	f7ff ffab 	bl	8013848 <_fwrite_r>
 80138f2:	b003      	add	sp, #12
 80138f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80138f8:	240012b8 	.word	0x240012b8

080138fc <__sread>:
 80138fc:	b510      	push	{r4, lr}
 80138fe:	460c      	mov	r4, r1
 8013900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013904:	f000 f952 	bl	8013bac <_read_r>
 8013908:	2800      	cmp	r0, #0
 801390a:	bfab      	itete	ge
 801390c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801390e:	89a3      	ldrhlt	r3, [r4, #12]
 8013910:	181b      	addge	r3, r3, r0
 8013912:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013916:	bfac      	ite	ge
 8013918:	6563      	strge	r3, [r4, #84]	@ 0x54
 801391a:	81a3      	strhlt	r3, [r4, #12]
 801391c:	bd10      	pop	{r4, pc}

0801391e <__swrite>:
 801391e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013922:	461f      	mov	r7, r3
 8013924:	898b      	ldrh	r3, [r1, #12]
 8013926:	05db      	lsls	r3, r3, #23
 8013928:	4605      	mov	r5, r0
 801392a:	460c      	mov	r4, r1
 801392c:	4616      	mov	r6, r2
 801392e:	d505      	bpl.n	801393c <__swrite+0x1e>
 8013930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013934:	2302      	movs	r3, #2
 8013936:	2200      	movs	r2, #0
 8013938:	f000 f926 	bl	8013b88 <_lseek_r>
 801393c:	89a3      	ldrh	r3, [r4, #12]
 801393e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013942:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013946:	81a3      	strh	r3, [r4, #12]
 8013948:	4632      	mov	r2, r6
 801394a:	463b      	mov	r3, r7
 801394c:	4628      	mov	r0, r5
 801394e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013952:	f000 b94d 	b.w	8013bf0 <_write_r>

08013956 <__sseek>:
 8013956:	b510      	push	{r4, lr}
 8013958:	460c      	mov	r4, r1
 801395a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801395e:	f000 f913 	bl	8013b88 <_lseek_r>
 8013962:	1c43      	adds	r3, r0, #1
 8013964:	89a3      	ldrh	r3, [r4, #12]
 8013966:	bf15      	itete	ne
 8013968:	6560      	strne	r0, [r4, #84]	@ 0x54
 801396a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801396e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013972:	81a3      	strheq	r3, [r4, #12]
 8013974:	bf18      	it	ne
 8013976:	81a3      	strhne	r3, [r4, #12]
 8013978:	bd10      	pop	{r4, pc}

0801397a <__sclose>:
 801397a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801397e:	f000 b89d 	b.w	8013abc <_close_r>

08013982 <__swbuf_r>:
 8013982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013984:	460e      	mov	r6, r1
 8013986:	4614      	mov	r4, r2
 8013988:	4605      	mov	r5, r0
 801398a:	b118      	cbz	r0, 8013994 <__swbuf_r+0x12>
 801398c:	6a03      	ldr	r3, [r0, #32]
 801398e:	b90b      	cbnz	r3, 8013994 <__swbuf_r+0x12>
 8013990:	f7ff ff24 	bl	80137dc <__sinit>
 8013994:	69a3      	ldr	r3, [r4, #24]
 8013996:	60a3      	str	r3, [r4, #8]
 8013998:	89a3      	ldrh	r3, [r4, #12]
 801399a:	071a      	lsls	r2, r3, #28
 801399c:	d501      	bpl.n	80139a2 <__swbuf_r+0x20>
 801399e:	6923      	ldr	r3, [r4, #16]
 80139a0:	b943      	cbnz	r3, 80139b4 <__swbuf_r+0x32>
 80139a2:	4621      	mov	r1, r4
 80139a4:	4628      	mov	r0, r5
 80139a6:	f000 f82b 	bl	8013a00 <__swsetup_r>
 80139aa:	b118      	cbz	r0, 80139b4 <__swbuf_r+0x32>
 80139ac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80139b0:	4638      	mov	r0, r7
 80139b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139b4:	6823      	ldr	r3, [r4, #0]
 80139b6:	6922      	ldr	r2, [r4, #16]
 80139b8:	1a98      	subs	r0, r3, r2
 80139ba:	6963      	ldr	r3, [r4, #20]
 80139bc:	b2f6      	uxtb	r6, r6
 80139be:	4283      	cmp	r3, r0
 80139c0:	4637      	mov	r7, r6
 80139c2:	dc05      	bgt.n	80139d0 <__swbuf_r+0x4e>
 80139c4:	4621      	mov	r1, r4
 80139c6:	4628      	mov	r0, r5
 80139c8:	f000 fa36 	bl	8013e38 <_fflush_r>
 80139cc:	2800      	cmp	r0, #0
 80139ce:	d1ed      	bne.n	80139ac <__swbuf_r+0x2a>
 80139d0:	68a3      	ldr	r3, [r4, #8]
 80139d2:	3b01      	subs	r3, #1
 80139d4:	60a3      	str	r3, [r4, #8]
 80139d6:	6823      	ldr	r3, [r4, #0]
 80139d8:	1c5a      	adds	r2, r3, #1
 80139da:	6022      	str	r2, [r4, #0]
 80139dc:	701e      	strb	r6, [r3, #0]
 80139de:	6962      	ldr	r2, [r4, #20]
 80139e0:	1c43      	adds	r3, r0, #1
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d004      	beq.n	80139f0 <__swbuf_r+0x6e>
 80139e6:	89a3      	ldrh	r3, [r4, #12]
 80139e8:	07db      	lsls	r3, r3, #31
 80139ea:	d5e1      	bpl.n	80139b0 <__swbuf_r+0x2e>
 80139ec:	2e0a      	cmp	r6, #10
 80139ee:	d1df      	bne.n	80139b0 <__swbuf_r+0x2e>
 80139f0:	4621      	mov	r1, r4
 80139f2:	4628      	mov	r0, r5
 80139f4:	f000 fa20 	bl	8013e38 <_fflush_r>
 80139f8:	2800      	cmp	r0, #0
 80139fa:	d0d9      	beq.n	80139b0 <__swbuf_r+0x2e>
 80139fc:	e7d6      	b.n	80139ac <__swbuf_r+0x2a>
	...

08013a00 <__swsetup_r>:
 8013a00:	b538      	push	{r3, r4, r5, lr}
 8013a02:	4b29      	ldr	r3, [pc, #164]	@ (8013aa8 <__swsetup_r+0xa8>)
 8013a04:	4605      	mov	r5, r0
 8013a06:	6818      	ldr	r0, [r3, #0]
 8013a08:	460c      	mov	r4, r1
 8013a0a:	b118      	cbz	r0, 8013a14 <__swsetup_r+0x14>
 8013a0c:	6a03      	ldr	r3, [r0, #32]
 8013a0e:	b90b      	cbnz	r3, 8013a14 <__swsetup_r+0x14>
 8013a10:	f7ff fee4 	bl	80137dc <__sinit>
 8013a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a18:	0719      	lsls	r1, r3, #28
 8013a1a:	d422      	bmi.n	8013a62 <__swsetup_r+0x62>
 8013a1c:	06da      	lsls	r2, r3, #27
 8013a1e:	d407      	bmi.n	8013a30 <__swsetup_r+0x30>
 8013a20:	2209      	movs	r2, #9
 8013a22:	602a      	str	r2, [r5, #0]
 8013a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a28:	81a3      	strh	r3, [r4, #12]
 8013a2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a2e:	e033      	b.n	8013a98 <__swsetup_r+0x98>
 8013a30:	0758      	lsls	r0, r3, #29
 8013a32:	d512      	bpl.n	8013a5a <__swsetup_r+0x5a>
 8013a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013a36:	b141      	cbz	r1, 8013a4a <__swsetup_r+0x4a>
 8013a38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013a3c:	4299      	cmp	r1, r3
 8013a3e:	d002      	beq.n	8013a46 <__swsetup_r+0x46>
 8013a40:	4628      	mov	r0, r5
 8013a42:	f000 f923 	bl	8013c8c <_free_r>
 8013a46:	2300      	movs	r3, #0
 8013a48:	6363      	str	r3, [r4, #52]	@ 0x34
 8013a4a:	89a3      	ldrh	r3, [r4, #12]
 8013a4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013a50:	81a3      	strh	r3, [r4, #12]
 8013a52:	2300      	movs	r3, #0
 8013a54:	6063      	str	r3, [r4, #4]
 8013a56:	6923      	ldr	r3, [r4, #16]
 8013a58:	6023      	str	r3, [r4, #0]
 8013a5a:	89a3      	ldrh	r3, [r4, #12]
 8013a5c:	f043 0308 	orr.w	r3, r3, #8
 8013a60:	81a3      	strh	r3, [r4, #12]
 8013a62:	6923      	ldr	r3, [r4, #16]
 8013a64:	b94b      	cbnz	r3, 8013a7a <__swsetup_r+0x7a>
 8013a66:	89a3      	ldrh	r3, [r4, #12]
 8013a68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013a70:	d003      	beq.n	8013a7a <__swsetup_r+0x7a>
 8013a72:	4621      	mov	r1, r4
 8013a74:	4628      	mov	r0, r5
 8013a76:	f000 fa2d 	bl	8013ed4 <__smakebuf_r>
 8013a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a7e:	f013 0201 	ands.w	r2, r3, #1
 8013a82:	d00a      	beq.n	8013a9a <__swsetup_r+0x9a>
 8013a84:	2200      	movs	r2, #0
 8013a86:	60a2      	str	r2, [r4, #8]
 8013a88:	6962      	ldr	r2, [r4, #20]
 8013a8a:	4252      	negs	r2, r2
 8013a8c:	61a2      	str	r2, [r4, #24]
 8013a8e:	6922      	ldr	r2, [r4, #16]
 8013a90:	b942      	cbnz	r2, 8013aa4 <__swsetup_r+0xa4>
 8013a92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013a96:	d1c5      	bne.n	8013a24 <__swsetup_r+0x24>
 8013a98:	bd38      	pop	{r3, r4, r5, pc}
 8013a9a:	0799      	lsls	r1, r3, #30
 8013a9c:	bf58      	it	pl
 8013a9e:	6962      	ldrpl	r2, [r4, #20]
 8013aa0:	60a2      	str	r2, [r4, #8]
 8013aa2:	e7f4      	b.n	8013a8e <__swsetup_r+0x8e>
 8013aa4:	2000      	movs	r0, #0
 8013aa6:	e7f7      	b.n	8013a98 <__swsetup_r+0x98>
 8013aa8:	240012b8 	.word	0x240012b8

08013aac <memset>:
 8013aac:	4402      	add	r2, r0
 8013aae:	4603      	mov	r3, r0
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d100      	bne.n	8013ab6 <memset+0xa>
 8013ab4:	4770      	bx	lr
 8013ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8013aba:	e7f9      	b.n	8013ab0 <memset+0x4>

08013abc <_close_r>:
 8013abc:	b538      	push	{r3, r4, r5, lr}
 8013abe:	4d06      	ldr	r5, [pc, #24]	@ (8013ad8 <_close_r+0x1c>)
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	4604      	mov	r4, r0
 8013ac4:	4608      	mov	r0, r1
 8013ac6:	602b      	str	r3, [r5, #0]
 8013ac8:	f7ed fc66 	bl	8001398 <_close>
 8013acc:	1c43      	adds	r3, r0, #1
 8013ace:	d102      	bne.n	8013ad6 <_close_r+0x1a>
 8013ad0:	682b      	ldr	r3, [r5, #0]
 8013ad2:	b103      	cbz	r3, 8013ad6 <_close_r+0x1a>
 8013ad4:	6023      	str	r3, [r4, #0]
 8013ad6:	bd38      	pop	{r3, r4, r5, pc}
 8013ad8:	2403344c 	.word	0x2403344c

08013adc <_reclaim_reent>:
 8013adc:	4b29      	ldr	r3, [pc, #164]	@ (8013b84 <_reclaim_reent+0xa8>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	4283      	cmp	r3, r0
 8013ae2:	b570      	push	{r4, r5, r6, lr}
 8013ae4:	4604      	mov	r4, r0
 8013ae6:	d04b      	beq.n	8013b80 <_reclaim_reent+0xa4>
 8013ae8:	69c3      	ldr	r3, [r0, #28]
 8013aea:	b1ab      	cbz	r3, 8013b18 <_reclaim_reent+0x3c>
 8013aec:	68db      	ldr	r3, [r3, #12]
 8013aee:	b16b      	cbz	r3, 8013b0c <_reclaim_reent+0x30>
 8013af0:	2500      	movs	r5, #0
 8013af2:	69e3      	ldr	r3, [r4, #28]
 8013af4:	68db      	ldr	r3, [r3, #12]
 8013af6:	5959      	ldr	r1, [r3, r5]
 8013af8:	2900      	cmp	r1, #0
 8013afa:	d13b      	bne.n	8013b74 <_reclaim_reent+0x98>
 8013afc:	3504      	adds	r5, #4
 8013afe:	2d80      	cmp	r5, #128	@ 0x80
 8013b00:	d1f7      	bne.n	8013af2 <_reclaim_reent+0x16>
 8013b02:	69e3      	ldr	r3, [r4, #28]
 8013b04:	4620      	mov	r0, r4
 8013b06:	68d9      	ldr	r1, [r3, #12]
 8013b08:	f000 f8c0 	bl	8013c8c <_free_r>
 8013b0c:	69e3      	ldr	r3, [r4, #28]
 8013b0e:	6819      	ldr	r1, [r3, #0]
 8013b10:	b111      	cbz	r1, 8013b18 <_reclaim_reent+0x3c>
 8013b12:	4620      	mov	r0, r4
 8013b14:	f000 f8ba 	bl	8013c8c <_free_r>
 8013b18:	6961      	ldr	r1, [r4, #20]
 8013b1a:	b111      	cbz	r1, 8013b22 <_reclaim_reent+0x46>
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	f000 f8b5 	bl	8013c8c <_free_r>
 8013b22:	69e1      	ldr	r1, [r4, #28]
 8013b24:	b111      	cbz	r1, 8013b2c <_reclaim_reent+0x50>
 8013b26:	4620      	mov	r0, r4
 8013b28:	f000 f8b0 	bl	8013c8c <_free_r>
 8013b2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013b2e:	b111      	cbz	r1, 8013b36 <_reclaim_reent+0x5a>
 8013b30:	4620      	mov	r0, r4
 8013b32:	f000 f8ab 	bl	8013c8c <_free_r>
 8013b36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013b38:	b111      	cbz	r1, 8013b40 <_reclaim_reent+0x64>
 8013b3a:	4620      	mov	r0, r4
 8013b3c:	f000 f8a6 	bl	8013c8c <_free_r>
 8013b40:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013b42:	b111      	cbz	r1, 8013b4a <_reclaim_reent+0x6e>
 8013b44:	4620      	mov	r0, r4
 8013b46:	f000 f8a1 	bl	8013c8c <_free_r>
 8013b4a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013b4c:	b111      	cbz	r1, 8013b54 <_reclaim_reent+0x78>
 8013b4e:	4620      	mov	r0, r4
 8013b50:	f000 f89c 	bl	8013c8c <_free_r>
 8013b54:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013b56:	b111      	cbz	r1, 8013b5e <_reclaim_reent+0x82>
 8013b58:	4620      	mov	r0, r4
 8013b5a:	f000 f897 	bl	8013c8c <_free_r>
 8013b5e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013b60:	b111      	cbz	r1, 8013b68 <_reclaim_reent+0x8c>
 8013b62:	4620      	mov	r0, r4
 8013b64:	f000 f892 	bl	8013c8c <_free_r>
 8013b68:	6a23      	ldr	r3, [r4, #32]
 8013b6a:	b14b      	cbz	r3, 8013b80 <_reclaim_reent+0xa4>
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b72:	4718      	bx	r3
 8013b74:	680e      	ldr	r6, [r1, #0]
 8013b76:	4620      	mov	r0, r4
 8013b78:	f000 f888 	bl	8013c8c <_free_r>
 8013b7c:	4631      	mov	r1, r6
 8013b7e:	e7bb      	b.n	8013af8 <_reclaim_reent+0x1c>
 8013b80:	bd70      	pop	{r4, r5, r6, pc}
 8013b82:	bf00      	nop
 8013b84:	240012b8 	.word	0x240012b8

08013b88 <_lseek_r>:
 8013b88:	b538      	push	{r3, r4, r5, lr}
 8013b8a:	4d07      	ldr	r5, [pc, #28]	@ (8013ba8 <_lseek_r+0x20>)
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	4608      	mov	r0, r1
 8013b90:	4611      	mov	r1, r2
 8013b92:	2200      	movs	r2, #0
 8013b94:	602a      	str	r2, [r5, #0]
 8013b96:	461a      	mov	r2, r3
 8013b98:	f7ed fc25 	bl	80013e6 <_lseek>
 8013b9c:	1c43      	adds	r3, r0, #1
 8013b9e:	d102      	bne.n	8013ba6 <_lseek_r+0x1e>
 8013ba0:	682b      	ldr	r3, [r5, #0]
 8013ba2:	b103      	cbz	r3, 8013ba6 <_lseek_r+0x1e>
 8013ba4:	6023      	str	r3, [r4, #0]
 8013ba6:	bd38      	pop	{r3, r4, r5, pc}
 8013ba8:	2403344c 	.word	0x2403344c

08013bac <_read_r>:
 8013bac:	b538      	push	{r3, r4, r5, lr}
 8013bae:	4d07      	ldr	r5, [pc, #28]	@ (8013bcc <_read_r+0x20>)
 8013bb0:	4604      	mov	r4, r0
 8013bb2:	4608      	mov	r0, r1
 8013bb4:	4611      	mov	r1, r2
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	602a      	str	r2, [r5, #0]
 8013bba:	461a      	mov	r2, r3
 8013bbc:	f7ed fbb3 	bl	8001326 <_read>
 8013bc0:	1c43      	adds	r3, r0, #1
 8013bc2:	d102      	bne.n	8013bca <_read_r+0x1e>
 8013bc4:	682b      	ldr	r3, [r5, #0]
 8013bc6:	b103      	cbz	r3, 8013bca <_read_r+0x1e>
 8013bc8:	6023      	str	r3, [r4, #0]
 8013bca:	bd38      	pop	{r3, r4, r5, pc}
 8013bcc:	2403344c 	.word	0x2403344c

08013bd0 <_sbrk_r>:
 8013bd0:	b538      	push	{r3, r4, r5, lr}
 8013bd2:	4d06      	ldr	r5, [pc, #24]	@ (8013bec <_sbrk_r+0x1c>)
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	4604      	mov	r4, r0
 8013bd8:	4608      	mov	r0, r1
 8013bda:	602b      	str	r3, [r5, #0]
 8013bdc:	f7ed fc10 	bl	8001400 <_sbrk>
 8013be0:	1c43      	adds	r3, r0, #1
 8013be2:	d102      	bne.n	8013bea <_sbrk_r+0x1a>
 8013be4:	682b      	ldr	r3, [r5, #0]
 8013be6:	b103      	cbz	r3, 8013bea <_sbrk_r+0x1a>
 8013be8:	6023      	str	r3, [r4, #0]
 8013bea:	bd38      	pop	{r3, r4, r5, pc}
 8013bec:	2403344c 	.word	0x2403344c

08013bf0 <_write_r>:
 8013bf0:	b538      	push	{r3, r4, r5, lr}
 8013bf2:	4d07      	ldr	r5, [pc, #28]	@ (8013c10 <_write_r+0x20>)
 8013bf4:	4604      	mov	r4, r0
 8013bf6:	4608      	mov	r0, r1
 8013bf8:	4611      	mov	r1, r2
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	602a      	str	r2, [r5, #0]
 8013bfe:	461a      	mov	r2, r3
 8013c00:	f7ed fbae 	bl	8001360 <_write>
 8013c04:	1c43      	adds	r3, r0, #1
 8013c06:	d102      	bne.n	8013c0e <_write_r+0x1e>
 8013c08:	682b      	ldr	r3, [r5, #0]
 8013c0a:	b103      	cbz	r3, 8013c0e <_write_r+0x1e>
 8013c0c:	6023      	str	r3, [r4, #0]
 8013c0e:	bd38      	pop	{r3, r4, r5, pc}
 8013c10:	2403344c 	.word	0x2403344c

08013c14 <__errno>:
 8013c14:	4b01      	ldr	r3, [pc, #4]	@ (8013c1c <__errno+0x8>)
 8013c16:	6818      	ldr	r0, [r3, #0]
 8013c18:	4770      	bx	lr
 8013c1a:	bf00      	nop
 8013c1c:	240012b8 	.word	0x240012b8

08013c20 <__libc_init_array>:
 8013c20:	b570      	push	{r4, r5, r6, lr}
 8013c22:	4d0d      	ldr	r5, [pc, #52]	@ (8013c58 <__libc_init_array+0x38>)
 8013c24:	4c0d      	ldr	r4, [pc, #52]	@ (8013c5c <__libc_init_array+0x3c>)
 8013c26:	1b64      	subs	r4, r4, r5
 8013c28:	10a4      	asrs	r4, r4, #2
 8013c2a:	2600      	movs	r6, #0
 8013c2c:	42a6      	cmp	r6, r4
 8013c2e:	d109      	bne.n	8013c44 <__libc_init_array+0x24>
 8013c30:	4d0b      	ldr	r5, [pc, #44]	@ (8013c60 <__libc_init_array+0x40>)
 8013c32:	4c0c      	ldr	r4, [pc, #48]	@ (8013c64 <__libc_init_array+0x44>)
 8013c34:	f000 f9ac 	bl	8013f90 <_init>
 8013c38:	1b64      	subs	r4, r4, r5
 8013c3a:	10a4      	asrs	r4, r4, #2
 8013c3c:	2600      	movs	r6, #0
 8013c3e:	42a6      	cmp	r6, r4
 8013c40:	d105      	bne.n	8013c4e <__libc_init_array+0x2e>
 8013c42:	bd70      	pop	{r4, r5, r6, pc}
 8013c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c48:	4798      	blx	r3
 8013c4a:	3601      	adds	r6, #1
 8013c4c:	e7ee      	b.n	8013c2c <__libc_init_array+0xc>
 8013c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c52:	4798      	blx	r3
 8013c54:	3601      	adds	r6, #1
 8013c56:	e7f2      	b.n	8013c3e <__libc_init_array+0x1e>
 8013c58:	08015ce0 	.word	0x08015ce0
 8013c5c:	08015ce0 	.word	0x08015ce0
 8013c60:	08015ce0 	.word	0x08015ce0
 8013c64:	08015d24 	.word	0x08015d24

08013c68 <__retarget_lock_init_recursive>:
 8013c68:	4770      	bx	lr

08013c6a <__retarget_lock_acquire_recursive>:
 8013c6a:	4770      	bx	lr

08013c6c <__retarget_lock_release_recursive>:
 8013c6c:	4770      	bx	lr

08013c6e <memcpy>:
 8013c6e:	440a      	add	r2, r1
 8013c70:	4291      	cmp	r1, r2
 8013c72:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013c76:	d100      	bne.n	8013c7a <memcpy+0xc>
 8013c78:	4770      	bx	lr
 8013c7a:	b510      	push	{r4, lr}
 8013c7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c84:	4291      	cmp	r1, r2
 8013c86:	d1f9      	bne.n	8013c7c <memcpy+0xe>
 8013c88:	bd10      	pop	{r4, pc}
	...

08013c8c <_free_r>:
 8013c8c:	b538      	push	{r3, r4, r5, lr}
 8013c8e:	4605      	mov	r5, r0
 8013c90:	2900      	cmp	r1, #0
 8013c92:	d041      	beq.n	8013d18 <_free_r+0x8c>
 8013c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c98:	1f0c      	subs	r4, r1, #4
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	bfb8      	it	lt
 8013c9e:	18e4      	addlt	r4, r4, r3
 8013ca0:	f7ff fcce 	bl	8013640 <__malloc_lock>
 8013ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8013d1c <_free_r+0x90>)
 8013ca6:	6813      	ldr	r3, [r2, #0]
 8013ca8:	b933      	cbnz	r3, 8013cb8 <_free_r+0x2c>
 8013caa:	6063      	str	r3, [r4, #4]
 8013cac:	6014      	str	r4, [r2, #0]
 8013cae:	4628      	mov	r0, r5
 8013cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cb4:	f7ff bcca 	b.w	801364c <__malloc_unlock>
 8013cb8:	42a3      	cmp	r3, r4
 8013cba:	d908      	bls.n	8013cce <_free_r+0x42>
 8013cbc:	6820      	ldr	r0, [r4, #0]
 8013cbe:	1821      	adds	r1, r4, r0
 8013cc0:	428b      	cmp	r3, r1
 8013cc2:	bf01      	itttt	eq
 8013cc4:	6819      	ldreq	r1, [r3, #0]
 8013cc6:	685b      	ldreq	r3, [r3, #4]
 8013cc8:	1809      	addeq	r1, r1, r0
 8013cca:	6021      	streq	r1, [r4, #0]
 8013ccc:	e7ed      	b.n	8013caa <_free_r+0x1e>
 8013cce:	461a      	mov	r2, r3
 8013cd0:	685b      	ldr	r3, [r3, #4]
 8013cd2:	b10b      	cbz	r3, 8013cd8 <_free_r+0x4c>
 8013cd4:	42a3      	cmp	r3, r4
 8013cd6:	d9fa      	bls.n	8013cce <_free_r+0x42>
 8013cd8:	6811      	ldr	r1, [r2, #0]
 8013cda:	1850      	adds	r0, r2, r1
 8013cdc:	42a0      	cmp	r0, r4
 8013cde:	d10b      	bne.n	8013cf8 <_free_r+0x6c>
 8013ce0:	6820      	ldr	r0, [r4, #0]
 8013ce2:	4401      	add	r1, r0
 8013ce4:	1850      	adds	r0, r2, r1
 8013ce6:	4283      	cmp	r3, r0
 8013ce8:	6011      	str	r1, [r2, #0]
 8013cea:	d1e0      	bne.n	8013cae <_free_r+0x22>
 8013cec:	6818      	ldr	r0, [r3, #0]
 8013cee:	685b      	ldr	r3, [r3, #4]
 8013cf0:	6053      	str	r3, [r2, #4]
 8013cf2:	4408      	add	r0, r1
 8013cf4:	6010      	str	r0, [r2, #0]
 8013cf6:	e7da      	b.n	8013cae <_free_r+0x22>
 8013cf8:	d902      	bls.n	8013d00 <_free_r+0x74>
 8013cfa:	230c      	movs	r3, #12
 8013cfc:	602b      	str	r3, [r5, #0]
 8013cfe:	e7d6      	b.n	8013cae <_free_r+0x22>
 8013d00:	6820      	ldr	r0, [r4, #0]
 8013d02:	1821      	adds	r1, r4, r0
 8013d04:	428b      	cmp	r3, r1
 8013d06:	bf04      	itt	eq
 8013d08:	6819      	ldreq	r1, [r3, #0]
 8013d0a:	685b      	ldreq	r3, [r3, #4]
 8013d0c:	6063      	str	r3, [r4, #4]
 8013d0e:	bf04      	itt	eq
 8013d10:	1809      	addeq	r1, r1, r0
 8013d12:	6021      	streq	r1, [r4, #0]
 8013d14:	6054      	str	r4, [r2, #4]
 8013d16:	e7ca      	b.n	8013cae <_free_r+0x22>
 8013d18:	bd38      	pop	{r3, r4, r5, pc}
 8013d1a:	bf00      	nop
 8013d1c:	2403330c 	.word	0x2403330c

08013d20 <_malloc_usable_size_r>:
 8013d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d24:	1f18      	subs	r0, r3, #4
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	bfbc      	itt	lt
 8013d2a:	580b      	ldrlt	r3, [r1, r0]
 8013d2c:	18c0      	addlt	r0, r0, r3
 8013d2e:	4770      	bx	lr

08013d30 <__sflush_r>:
 8013d30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d38:	0716      	lsls	r6, r2, #28
 8013d3a:	4605      	mov	r5, r0
 8013d3c:	460c      	mov	r4, r1
 8013d3e:	d454      	bmi.n	8013dea <__sflush_r+0xba>
 8013d40:	684b      	ldr	r3, [r1, #4]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	dc02      	bgt.n	8013d4c <__sflush_r+0x1c>
 8013d46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	dd48      	ble.n	8013dde <__sflush_r+0xae>
 8013d4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013d4e:	2e00      	cmp	r6, #0
 8013d50:	d045      	beq.n	8013dde <__sflush_r+0xae>
 8013d52:	2300      	movs	r3, #0
 8013d54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013d58:	682f      	ldr	r7, [r5, #0]
 8013d5a:	6a21      	ldr	r1, [r4, #32]
 8013d5c:	602b      	str	r3, [r5, #0]
 8013d5e:	d030      	beq.n	8013dc2 <__sflush_r+0x92>
 8013d60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013d62:	89a3      	ldrh	r3, [r4, #12]
 8013d64:	0759      	lsls	r1, r3, #29
 8013d66:	d505      	bpl.n	8013d74 <__sflush_r+0x44>
 8013d68:	6863      	ldr	r3, [r4, #4]
 8013d6a:	1ad2      	subs	r2, r2, r3
 8013d6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013d6e:	b10b      	cbz	r3, 8013d74 <__sflush_r+0x44>
 8013d70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013d72:	1ad2      	subs	r2, r2, r3
 8013d74:	2300      	movs	r3, #0
 8013d76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013d78:	6a21      	ldr	r1, [r4, #32]
 8013d7a:	4628      	mov	r0, r5
 8013d7c:	47b0      	blx	r6
 8013d7e:	1c43      	adds	r3, r0, #1
 8013d80:	89a3      	ldrh	r3, [r4, #12]
 8013d82:	d106      	bne.n	8013d92 <__sflush_r+0x62>
 8013d84:	6829      	ldr	r1, [r5, #0]
 8013d86:	291d      	cmp	r1, #29
 8013d88:	d82b      	bhi.n	8013de2 <__sflush_r+0xb2>
 8013d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8013e34 <__sflush_r+0x104>)
 8013d8c:	410a      	asrs	r2, r1
 8013d8e:	07d6      	lsls	r6, r2, #31
 8013d90:	d427      	bmi.n	8013de2 <__sflush_r+0xb2>
 8013d92:	2200      	movs	r2, #0
 8013d94:	6062      	str	r2, [r4, #4]
 8013d96:	04d9      	lsls	r1, r3, #19
 8013d98:	6922      	ldr	r2, [r4, #16]
 8013d9a:	6022      	str	r2, [r4, #0]
 8013d9c:	d504      	bpl.n	8013da8 <__sflush_r+0x78>
 8013d9e:	1c42      	adds	r2, r0, #1
 8013da0:	d101      	bne.n	8013da6 <__sflush_r+0x76>
 8013da2:	682b      	ldr	r3, [r5, #0]
 8013da4:	b903      	cbnz	r3, 8013da8 <__sflush_r+0x78>
 8013da6:	6560      	str	r0, [r4, #84]	@ 0x54
 8013da8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013daa:	602f      	str	r7, [r5, #0]
 8013dac:	b1b9      	cbz	r1, 8013dde <__sflush_r+0xae>
 8013dae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013db2:	4299      	cmp	r1, r3
 8013db4:	d002      	beq.n	8013dbc <__sflush_r+0x8c>
 8013db6:	4628      	mov	r0, r5
 8013db8:	f7ff ff68 	bl	8013c8c <_free_r>
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8013dc0:	e00d      	b.n	8013dde <__sflush_r+0xae>
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	47b0      	blx	r6
 8013dc8:	4602      	mov	r2, r0
 8013dca:	1c50      	adds	r0, r2, #1
 8013dcc:	d1c9      	bne.n	8013d62 <__sflush_r+0x32>
 8013dce:	682b      	ldr	r3, [r5, #0]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d0c6      	beq.n	8013d62 <__sflush_r+0x32>
 8013dd4:	2b1d      	cmp	r3, #29
 8013dd6:	d001      	beq.n	8013ddc <__sflush_r+0xac>
 8013dd8:	2b16      	cmp	r3, #22
 8013dda:	d11e      	bne.n	8013e1a <__sflush_r+0xea>
 8013ddc:	602f      	str	r7, [r5, #0]
 8013dde:	2000      	movs	r0, #0
 8013de0:	e022      	b.n	8013e28 <__sflush_r+0xf8>
 8013de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013de6:	b21b      	sxth	r3, r3
 8013de8:	e01b      	b.n	8013e22 <__sflush_r+0xf2>
 8013dea:	690f      	ldr	r7, [r1, #16]
 8013dec:	2f00      	cmp	r7, #0
 8013dee:	d0f6      	beq.n	8013dde <__sflush_r+0xae>
 8013df0:	0793      	lsls	r3, r2, #30
 8013df2:	680e      	ldr	r6, [r1, #0]
 8013df4:	bf08      	it	eq
 8013df6:	694b      	ldreq	r3, [r1, #20]
 8013df8:	600f      	str	r7, [r1, #0]
 8013dfa:	bf18      	it	ne
 8013dfc:	2300      	movne	r3, #0
 8013dfe:	eba6 0807 	sub.w	r8, r6, r7
 8013e02:	608b      	str	r3, [r1, #8]
 8013e04:	f1b8 0f00 	cmp.w	r8, #0
 8013e08:	dde9      	ble.n	8013dde <__sflush_r+0xae>
 8013e0a:	6a21      	ldr	r1, [r4, #32]
 8013e0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013e0e:	4643      	mov	r3, r8
 8013e10:	463a      	mov	r2, r7
 8013e12:	4628      	mov	r0, r5
 8013e14:	47b0      	blx	r6
 8013e16:	2800      	cmp	r0, #0
 8013e18:	dc08      	bgt.n	8013e2c <__sflush_r+0xfc>
 8013e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e22:	81a3      	strh	r3, [r4, #12]
 8013e24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e2c:	4407      	add	r7, r0
 8013e2e:	eba8 0800 	sub.w	r8, r8, r0
 8013e32:	e7e7      	b.n	8013e04 <__sflush_r+0xd4>
 8013e34:	dfbffffe 	.word	0xdfbffffe

08013e38 <_fflush_r>:
 8013e38:	b538      	push	{r3, r4, r5, lr}
 8013e3a:	690b      	ldr	r3, [r1, #16]
 8013e3c:	4605      	mov	r5, r0
 8013e3e:	460c      	mov	r4, r1
 8013e40:	b913      	cbnz	r3, 8013e48 <_fflush_r+0x10>
 8013e42:	2500      	movs	r5, #0
 8013e44:	4628      	mov	r0, r5
 8013e46:	bd38      	pop	{r3, r4, r5, pc}
 8013e48:	b118      	cbz	r0, 8013e52 <_fflush_r+0x1a>
 8013e4a:	6a03      	ldr	r3, [r0, #32]
 8013e4c:	b90b      	cbnz	r3, 8013e52 <_fflush_r+0x1a>
 8013e4e:	f7ff fcc5 	bl	80137dc <__sinit>
 8013e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d0f3      	beq.n	8013e42 <_fflush_r+0xa>
 8013e5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013e5c:	07d0      	lsls	r0, r2, #31
 8013e5e:	d404      	bmi.n	8013e6a <_fflush_r+0x32>
 8013e60:	0599      	lsls	r1, r3, #22
 8013e62:	d402      	bmi.n	8013e6a <_fflush_r+0x32>
 8013e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e66:	f7ff ff00 	bl	8013c6a <__retarget_lock_acquire_recursive>
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	4621      	mov	r1, r4
 8013e6e:	f7ff ff5f 	bl	8013d30 <__sflush_r>
 8013e72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e74:	07da      	lsls	r2, r3, #31
 8013e76:	4605      	mov	r5, r0
 8013e78:	d4e4      	bmi.n	8013e44 <_fflush_r+0xc>
 8013e7a:	89a3      	ldrh	r3, [r4, #12]
 8013e7c:	059b      	lsls	r3, r3, #22
 8013e7e:	d4e1      	bmi.n	8013e44 <_fflush_r+0xc>
 8013e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e82:	f7ff fef3 	bl	8013c6c <__retarget_lock_release_recursive>
 8013e86:	e7dd      	b.n	8013e44 <_fflush_r+0xc>

08013e88 <__swhatbuf_r>:
 8013e88:	b570      	push	{r4, r5, r6, lr}
 8013e8a:	460c      	mov	r4, r1
 8013e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e90:	2900      	cmp	r1, #0
 8013e92:	b096      	sub	sp, #88	@ 0x58
 8013e94:	4615      	mov	r5, r2
 8013e96:	461e      	mov	r6, r3
 8013e98:	da0d      	bge.n	8013eb6 <__swhatbuf_r+0x2e>
 8013e9a:	89a3      	ldrh	r3, [r4, #12]
 8013e9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013ea0:	f04f 0100 	mov.w	r1, #0
 8013ea4:	bf14      	ite	ne
 8013ea6:	2340      	movne	r3, #64	@ 0x40
 8013ea8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013eac:	2000      	movs	r0, #0
 8013eae:	6031      	str	r1, [r6, #0]
 8013eb0:	602b      	str	r3, [r5, #0]
 8013eb2:	b016      	add	sp, #88	@ 0x58
 8013eb4:	bd70      	pop	{r4, r5, r6, pc}
 8013eb6:	466a      	mov	r2, sp
 8013eb8:	f000 f848 	bl	8013f4c <_fstat_r>
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	dbec      	blt.n	8013e9a <__swhatbuf_r+0x12>
 8013ec0:	9901      	ldr	r1, [sp, #4]
 8013ec2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013ec6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013eca:	4259      	negs	r1, r3
 8013ecc:	4159      	adcs	r1, r3
 8013ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013ed2:	e7eb      	b.n	8013eac <__swhatbuf_r+0x24>

08013ed4 <__smakebuf_r>:
 8013ed4:	898b      	ldrh	r3, [r1, #12]
 8013ed6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ed8:	079d      	lsls	r5, r3, #30
 8013eda:	4606      	mov	r6, r0
 8013edc:	460c      	mov	r4, r1
 8013ede:	d507      	bpl.n	8013ef0 <__smakebuf_r+0x1c>
 8013ee0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013ee4:	6023      	str	r3, [r4, #0]
 8013ee6:	6123      	str	r3, [r4, #16]
 8013ee8:	2301      	movs	r3, #1
 8013eea:	6163      	str	r3, [r4, #20]
 8013eec:	b003      	add	sp, #12
 8013eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ef0:	ab01      	add	r3, sp, #4
 8013ef2:	466a      	mov	r2, sp
 8013ef4:	f7ff ffc8 	bl	8013e88 <__swhatbuf_r>
 8013ef8:	9f00      	ldr	r7, [sp, #0]
 8013efa:	4605      	mov	r5, r0
 8013efc:	4639      	mov	r1, r7
 8013efe:	4630      	mov	r0, r6
 8013f00:	f7ff fb1e 	bl	8013540 <_malloc_r>
 8013f04:	b948      	cbnz	r0, 8013f1a <__smakebuf_r+0x46>
 8013f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f0a:	059a      	lsls	r2, r3, #22
 8013f0c:	d4ee      	bmi.n	8013eec <__smakebuf_r+0x18>
 8013f0e:	f023 0303 	bic.w	r3, r3, #3
 8013f12:	f043 0302 	orr.w	r3, r3, #2
 8013f16:	81a3      	strh	r3, [r4, #12]
 8013f18:	e7e2      	b.n	8013ee0 <__smakebuf_r+0xc>
 8013f1a:	89a3      	ldrh	r3, [r4, #12]
 8013f1c:	6020      	str	r0, [r4, #0]
 8013f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f22:	81a3      	strh	r3, [r4, #12]
 8013f24:	9b01      	ldr	r3, [sp, #4]
 8013f26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013f2a:	b15b      	cbz	r3, 8013f44 <__smakebuf_r+0x70>
 8013f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f30:	4630      	mov	r0, r6
 8013f32:	f000 f81d 	bl	8013f70 <_isatty_r>
 8013f36:	b128      	cbz	r0, 8013f44 <__smakebuf_r+0x70>
 8013f38:	89a3      	ldrh	r3, [r4, #12]
 8013f3a:	f023 0303 	bic.w	r3, r3, #3
 8013f3e:	f043 0301 	orr.w	r3, r3, #1
 8013f42:	81a3      	strh	r3, [r4, #12]
 8013f44:	89a3      	ldrh	r3, [r4, #12]
 8013f46:	431d      	orrs	r5, r3
 8013f48:	81a5      	strh	r5, [r4, #12]
 8013f4a:	e7cf      	b.n	8013eec <__smakebuf_r+0x18>

08013f4c <_fstat_r>:
 8013f4c:	b538      	push	{r3, r4, r5, lr}
 8013f4e:	4d07      	ldr	r5, [pc, #28]	@ (8013f6c <_fstat_r+0x20>)
 8013f50:	2300      	movs	r3, #0
 8013f52:	4604      	mov	r4, r0
 8013f54:	4608      	mov	r0, r1
 8013f56:	4611      	mov	r1, r2
 8013f58:	602b      	str	r3, [r5, #0]
 8013f5a:	f7ed fa29 	bl	80013b0 <_fstat>
 8013f5e:	1c43      	adds	r3, r0, #1
 8013f60:	d102      	bne.n	8013f68 <_fstat_r+0x1c>
 8013f62:	682b      	ldr	r3, [r5, #0]
 8013f64:	b103      	cbz	r3, 8013f68 <_fstat_r+0x1c>
 8013f66:	6023      	str	r3, [r4, #0]
 8013f68:	bd38      	pop	{r3, r4, r5, pc}
 8013f6a:	bf00      	nop
 8013f6c:	2403344c 	.word	0x2403344c

08013f70 <_isatty_r>:
 8013f70:	b538      	push	{r3, r4, r5, lr}
 8013f72:	4d06      	ldr	r5, [pc, #24]	@ (8013f8c <_isatty_r+0x1c>)
 8013f74:	2300      	movs	r3, #0
 8013f76:	4604      	mov	r4, r0
 8013f78:	4608      	mov	r0, r1
 8013f7a:	602b      	str	r3, [r5, #0]
 8013f7c:	f7ed fa28 	bl	80013d0 <_isatty>
 8013f80:	1c43      	adds	r3, r0, #1
 8013f82:	d102      	bne.n	8013f8a <_isatty_r+0x1a>
 8013f84:	682b      	ldr	r3, [r5, #0]
 8013f86:	b103      	cbz	r3, 8013f8a <_isatty_r+0x1a>
 8013f88:	6023      	str	r3, [r4, #0]
 8013f8a:	bd38      	pop	{r3, r4, r5, pc}
 8013f8c:	2403344c 	.word	0x2403344c

08013f90 <_init>:
 8013f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f92:	bf00      	nop
 8013f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f96:	bc08      	pop	{r3}
 8013f98:	469e      	mov	lr, r3
 8013f9a:	4770      	bx	lr

08013f9c <_fini>:
 8013f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f9e:	bf00      	nop
 8013fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fa2:	bc08      	pop	{r3}
 8013fa4:	469e      	mov	lr, r3
 8013fa6:	4770      	bx	lr
