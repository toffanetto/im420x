
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021bf0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002948  08021e90  08021e90  00022e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080247d8  080247d8  000257d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000040  080247e0  080247e0  000257e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08024820  08024820  00025820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000013f0  24000000  08024824  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00068388  240013f0  08025c14  000273f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24069778  08025c14  00027778  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000273f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f05c  00000000  00000000  0002741e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005be5  00000000  00000000  0005647a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fb0  00000000  00000000  0005c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000185d  00000000  00000000  0005e010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004366e  00000000  00000000  0005f86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000341d2  00000000  00000000  000a2edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00192154  00000000  00000000  000d70ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  00269201  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009310  00000000  00000000  00269278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00272588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013f0 	.word	0x240013f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08021e78 	.word	0x08021e78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013f4 	.word	0x240013f4
 80002dc:	08021e78 	.word	0x08021e78

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b37      	ldr	r3, [pc, #220]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000766:	4a38      	ldr	r2, [pc, #224]	@ (8000848 <MX_ADC1_Init+0x108>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800076a:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_ADC1_Init+0x104>)
 800076c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_ADC1_Init+0x104>)
 800077a:	2201      	movs	r2, #1
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000780:	2204      	movs	r2, #4
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_ADC1_Init+0x104>)
 800078c:	2201      	movs	r2, #1
 800078e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000792:	2202      	movs	r2, #2
 8000794:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000798:	2200      	movs	r2, #0
 800079a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_ADC1_Init+0x104>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	4820      	ldr	r0, [pc, #128]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007c4:	f002 fdc4 	bl	8003350 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ce:	f000 ffd1 	bl	8001774 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007de:	f003 fde7 	bl	80043b0 <HAL_ADCEx_MultiModeConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e8:	f000 ffc4 	bl	8001774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ADC1_Init+0x10c>)
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	2306      	movs	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80007f4:	2306      	movs	r3, #6
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2304      	movs	r3, #4
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000810:	f003 f822 	bl	8003858 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800081a:	f000 ffab 	bl	8001774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_ADC1_Init+0x110>)
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000822:	230c      	movs	r3, #12
 8000824:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <MX_ADC1_Init+0x104>)
 800082c:	f003 f814 	bl	8003858 <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000836:	f000 ff9d 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2400140c 	.word	0x2400140c
 8000848:	40022000 	.word	0x40022000
 800084c:	19200040 	.word	0x19200040
 8000850:	08600004 	.word	0x08600004

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ba      	sub	sp, #232	@ 0xe8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f020 fba1 	bl	8020fbc <memset>
  if(adcHandle->Instance==ADC1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a45      	ldr	r2, [pc, #276]	@ (8000994 <HAL_ADC_MspInit+0x140>)
 8000880:	4293      	cmp	r3, r2
 8000882:	f040 8083 	bne.w	800098c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000886:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 8000896:	2325      	movs	r3, #37	@ 0x25
 8000898:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008aa:	2320      	movs	r3, #32
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4618      	mov	r0, r3
 80008c0:	f007 ffc2 	bl	8008848 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80008ca:	f000 ff53 	bl	8001774 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d4:	4a30      	ldr	r2, [pc, #192]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a29      	ldr	r2, [pc, #164]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800090a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800090e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000922:	4619      	mov	r1, r3
 8000924:	481d      	ldr	r0, [pc, #116]	@ (800099c <HAL_ADC_MspInit+0x148>)
 8000926:	f006 fd49 	bl	80073bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <HAL_ADC_MspInit+0x150>)
 800092e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000932:	2209      	movs	r2, #9
 8000934:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000944:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800094c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000954:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800095c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000964:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000968:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000972:	f003 fedb 	bl	800472c <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 800097c:	f000 fefa 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000984:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000986:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800098c:	bf00      	nop
 800098e:	37e8      	adds	r7, #232	@ 0xe8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40022000 	.word	0x40022000
 8000998:	58024400 	.word	0x58024400
 800099c:	58021400 	.word	0x58021400
 80009a0:	24001470 	.word	0x24001470
 80009a4:	40020410 	.word	0x40020410

080009a8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009b4:	f00e fd56 	bl	800f464 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80009c0:	f000 f986 	bl	8000cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009c4:	4b58      	ldr	r3, [pc, #352]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 8090 	bne.w	8000af2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d01e      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80009d8:	2208      	movs	r2, #8
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d015      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f023 0307 	bic.w	r3, r3, #7
 80009f0:	3308      	adds	r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	e7fd      	b.n	8000a12 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d06a      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d865      	bhi.n	8000af2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a26:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a30:	e004      	b.n	8000a3c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d903      	bls.n	8000a4e <pvPortMallocMicroROS+0xa6>
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f1      	bne.n	8000a32 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d04c      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4413      	add	r3, r2
 8000a60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	2308      	movs	r3, #8
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d920      	bls.n	8000abc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	613b      	str	r3, [r7, #16]
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ab6:	69b8      	ldr	r0, [r7, #24]
 8000ab8:	f000 f96e 	bl	8000d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d203      	bcs.n	8000ade <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a16      	ldr	r2, [pc, #88]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000af2:	f00e fcc5 	bl	800f480 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	60fb      	str	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24032230 	.word	0x24032230
 8000b28:	2403223c 	.word	0x2403223c
 8000b2c:	24032234 	.word	0x24032234
 8000b30:	24032228 	.word	0x24032228
 8000b34:	24032238 	.word	0x24032238

08000b38 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d04a      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10b      	bne.n	8000b7e <vPortFreeMicroROS+0x46>
	__asm volatile
 8000b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b6a:	f383 8811 	msr	BASEPRI, r3
 8000b6e:	f3bf 8f6f 	isb	sy
 8000b72:	f3bf 8f4f 	dsb	sy
 8000b76:	60fb      	str	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00b      	beq.n	8000b9e <vPortFreeMicroROS+0x66>
	__asm volatile
 8000b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	60bb      	str	r3, [r7, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	e7fd      	b.n	8000b9a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d019      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d115      	bne.n	8000be0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000bc4:	f00e fc4e 	bl	800f464 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f000 f8de 	bl	8000d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000bdc:	f00e fc50 	bl	800f480 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2403223c 	.word	0x2403223c
 8000bec:	24032234 	.word	0x24032234

08000bf0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	425b      	negs	r3, r3
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	4413      	add	r3, r2
 8000c04:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <getBlockSize+0x38>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

	return count;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2403223c 	.word	0x2403223c

08000c2c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c36:	f00e fc15 	bl	800f464 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c3a:	6838      	ldr	r0, [r7, #0]
 8000c3c:	f7ff feb4 	bl	80009a8 <pvPortMallocMicroROS>
 8000c40:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d017      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d014      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffce 	bl	8000bf0 <getBlockSize>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2208      	movs	r2, #8
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d201      	bcs.n	8000c68 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f020 fac4 	bl	80211fa <memcpy>

		vPortFreeMicroROS(pv);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff60 	bl	8000b38 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000c78:	f00e fc02 	bl	800f480 <xTaskResumeAll>

	return newmem;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c90:	f00e fbe8 	bl	800f464 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff fe82 	bl	80009a8 <pvPortMallocMicroROS>
 8000ca4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000caa:	e004      	b.n	8000cb6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	613a      	str	r2, [r7, #16]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	617a      	str	r2, [r7, #20]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f5      	bne.n	8000cac <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000cc0:	f00e fbde 	bl	800f480 <xTaskResumeAll>
  	return mem;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <prvHeapInit+0xac>)
 8000cd8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cdc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3307      	adds	r3, #7
 8000cec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d2e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <prvHeapInit+0xbc>)
 8000d5c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <prvHeapInit+0xc0>)
 8000d64:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <prvHeapInit+0xc4>)
 8000d68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	00030d40 	.word	0x00030d40
 8000d80:	240014e8 	.word	0x240014e8
 8000d84:	24032228 	.word	0x24032228
 8000d88:	24032230 	.word	0x24032230
 8000d8c:	24032238 	.word	0x24032238
 8000d90:	24032234 	.word	0x24032234
 8000d94:	2403223c 	.word	0x2403223c

08000d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <prvInsertBlockIntoFreeList+0xac>)
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e002      	b.n	8000dac <prvInsertBlockIntoFreeList+0x14>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8f7      	bhi.n	8000da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d108      	bne.n	8000dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d118      	bne.n	8000e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d00d      	beq.n	8000e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	441a      	add	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e008      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e003      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d002      	beq.n	8000e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	24032228 	.word	0x24032228
 8000e48:	24032230 	.word	0x24032230

08000e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e58:	4a17      	ldr	r2, [pc, #92]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e76:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e80:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2105      	movs	r1, #5
 8000e92:	200b      	movs	r0, #11
 8000e94:	f003 fc22 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e98:	200b      	movs	r0, #11
 8000e9a:	f003 fc39 	bl	8004710 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f003 fc1a 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f003 fc31 	bl	8004710 <HAL_NVIC_EnableIRQ>

}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	58024400 	.word	0x58024400

08000ebc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000eca:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000ecc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ed0:	4904      	ldr	r1, [pc, #16]	@ (8000ee4 <cubemx_transport_open+0x28>)
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f00a fd54 	bl	800b980 <HAL_UART_Receive_DMA>
    return true;
 8000ed8:	2301      	movs	r3, #1
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24032240 	.word	0x24032240

08000ee8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ef6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f00a fd8d 	bl	800ba18 <HAL_UART_DMAStop>
    return true;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f1c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f24:	2b20      	cmp	r3, #32
 8000f26:	d11b      	bne.n	8000f60 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	6978      	ldr	r0, [r7, #20]
 8000f32:	f00a fca5 	bl	800b880 <HAL_UART_Transmit_DMA>
 8000f36:	4603      	mov	r3, r0
 8000f38:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f3a:	e002      	b.n	8000f42 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f00c ff06 	bl	800dd4e <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f42:	7cfb      	ldrb	r3, [r7, #19]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d104      	bne.n	8000f52 <cubemx_transport_write+0x4a>
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4e:	2b20      	cmp	r3, #32
 8000f50:	d1f4      	bne.n	8000f3c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f52:	7cfb      	ldrb	r3, [r7, #19]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <cubemx_transport_write+0x54>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	e002      	b.n	8000f62 <cubemx_transport_write+0x5a>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e000      	b.n	8000f62 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f60:	2300      	movs	r3, #0
    }
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f80:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f86:	b672      	cpsid	i
}
 8000f88:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a5a      	ldr	r2, [pc, #360]	@ (80010fc <cubemx_transport_read+0x190>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d068      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a57      	ldr	r2, [pc, #348]	@ (8001100 <cubemx_transport_read+0x194>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d061      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a55      	ldr	r2, [pc, #340]	@ (8001104 <cubemx_transport_read+0x198>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d05a      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a52      	ldr	r2, [pc, #328]	@ (8001108 <cubemx_transport_read+0x19c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d053      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a50      	ldr	r2, [pc, #320]	@ (800110c <cubemx_transport_read+0x1a0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d04c      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a4d      	ldr	r2, [pc, #308]	@ (8001110 <cubemx_transport_read+0x1a4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d045      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a4b      	ldr	r2, [pc, #300]	@ (8001114 <cubemx_transport_read+0x1a8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d03e      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a48      	ldr	r2, [pc, #288]	@ (8001118 <cubemx_transport_read+0x1ac>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d037      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a46      	ldr	r2, [pc, #280]	@ (800111c <cubemx_transport_read+0x1b0>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d030      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a43      	ldr	r2, [pc, #268]	@ (8001120 <cubemx_transport_read+0x1b4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d029      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a41      	ldr	r2, [pc, #260]	@ (8001124 <cubemx_transport_read+0x1b8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d022      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a3e      	ldr	r2, [pc, #248]	@ (8001128 <cubemx_transport_read+0x1bc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01b      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a3c      	ldr	r2, [pc, #240]	@ (800112c <cubemx_transport_read+0x1c0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d014      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a39      	ldr	r2, [pc, #228]	@ (8001130 <cubemx_transport_read+0x1c4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <cubemx_transport_read+0xfe>
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a37      	ldr	r2, [pc, #220]	@ (8001134 <cubemx_transport_read+0x1c8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d006      	beq.n	800106a <cubemx_transport_read+0xfe>
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a34      	ldr	r2, [pc, #208]	@ (8001138 <cubemx_transport_read+0x1cc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d107      	bne.n	800107a <cubemx_transport_read+0x10e>
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001078:	e006      	b.n	8001088 <cubemx_transport_read+0x11c>
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001088:	4a2c      	ldr	r2, [pc, #176]	@ (800113c <cubemx_transport_read+0x1d0>)
 800108a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800108c:	b662      	cpsie	i
}
 800108e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	3301      	adds	r3, #1
 8001094:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001096:	2001      	movs	r0, #1
 8001098:	f00c fe59 	bl	800dd4e <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800109c:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <cubemx_transport_read+0x1d4>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b26      	ldr	r3, [pc, #152]	@ (800113c <cubemx_transport_read+0x1d0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d104      	bne.n	80010b2 <cubemx_transport_read+0x146>
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f6ff af6a 	blt.w	8000f86 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010b6:	e011      	b.n	80010dc <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <cubemx_transport_read+0x1d4>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	440b      	add	r3, r1
 80010c2:	4920      	ldr	r1, [pc, #128]	@ (8001144 <cubemx_transport_read+0x1d8>)
 80010c4:	5c8a      	ldrb	r2, [r1, r2]
 80010c6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <cubemx_transport_read+0x1d4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001140 <cubemx_transport_read+0x1d4>)
 80010d4:	6013      	str	r3, [r2, #0]
        wrote++;
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	3301      	adds	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <cubemx_transport_read+0x1d4>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <cubemx_transport_read+0x1d0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d003      	beq.n	80010f0 <cubemx_transport_read+0x184>
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d3e3      	bcc.n	80010b8 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 80010f0:	69bb      	ldr	r3, [r7, #24]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020010 	.word	0x40020010
 8001100:	40020028 	.word	0x40020028
 8001104:	40020040 	.word	0x40020040
 8001108:	40020058 	.word	0x40020058
 800110c:	40020070 	.word	0x40020070
 8001110:	40020088 	.word	0x40020088
 8001114:	400200a0 	.word	0x400200a0
 8001118:	400200b8 	.word	0x400200b8
 800111c:	40020410 	.word	0x40020410
 8001120:	40020428 	.word	0x40020428
 8001124:	40020440 	.word	0x40020440
 8001128:	40020458 	.word	0x40020458
 800112c:	40020470 	.word	0x40020470
 8001130:	40020488 	.word	0x40020488
 8001134:	400204a0 	.word	0x400204a0
 8001138:	400204b8 	.word	0x400204b8
 800113c:	24032a44 	.word	0x24032a44
 8001140:	24032a40 	.word	0x24032a40
 8001144:	24032240 	.word	0x24032240

08001148 <control_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in control_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_cmd_callback(const void * xMsgIn)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  const autoware_control_msgs__msg__Control * control_cmd_msg_ = (const autoware_control_msgs__msg__Control * )xMsgIn;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 0);
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <control_cmd_callback+0x24>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	4a03      	ldr	r2, [pc, #12]	@ (800116c <control_cmd_callback+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	24032a78 	.word	0x24032a78

08001170 <gear_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the gear command and save in gear_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void gear_cmd_callback(const void * xMsgIn)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__GearCommand * gear_cmd_msg_ = (const autoware_vehicle_msgs__msg__GearCommand * )xMsgIn;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 1);
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <gear_cmd_callback+0x24>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	4a03      	ldr	r2, [pc, #12]	@ (8001194 <gear_cmd_callback+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	24032a78 	.word	0x24032a78

08001198 <turn_indicators_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the turn lights commands and save in turn_indicators_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void turn_indicators_cmd_callback(const void * xMsgIn)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * turn_indicators_cmd_msg_ = (const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * )xMsgIn;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 2);
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <turn_indicators_cmd_callback+0x24>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	4a03      	ldr	r2, [pc, #12]	@ (80011bc <turn_indicators_cmd_callback+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	24032a78 	.word	0x24032a78

080011c0 <hazard_lights_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the hazard lights commands and save in hazard_lights_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void hazard_lights_cmd_callback(const void * xMsgIn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__HazardLightsCommand * hazard_lights_cmd_msg_ = (const autoware_vehicle_msgs__msg__HazardLightsCommand * )xMsgIn;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 3);
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <hazard_lights_cmd_callback+0x24>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	4a03      	ldr	r2, [pc, #12]	@ (80011e4 <hazard_lights_cmd_callback+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	24032a78 	.word	0x24032a78

080011e8 <actuation_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in actuation_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void actuation_cmd_callback(const void * xMsgIn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__ActuationCommandStamped * actuation_cmd_msg_ = (const tier4_vehicle_msgs__msg__ActuationCommandStamped * )xMsgIn;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 4);
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <actuation_cmd_callback+0x24>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f043 0310 	orr.w	r3, r3, #16
 80011fc:	4a03      	ldr	r2, [pc, #12]	@ (800120c <actuation_cmd_callback+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	24032a78 	.word	0x24032a78

08001210 <emergency_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in emergency_msg_ 
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void emergency_callback(const void * xMsgIn)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * emergency_msg_ = (const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * )xMsgIn;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 5);
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <emergency_callback+0x24>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f043 0320 	orr.w	r3, r3, #32
 8001224:	4a03      	ldr	r2, [pc, #12]	@ (8001234 <emergency_callback+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	24032a78 	.word	0x24032a78

08001238 <control_mode_cmd_callback>:
  * @brief  ROS service server callback to change the control mode and return a status about the change
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_mode_cmd_callback(const void * xRequestMsg, void * xResponseMsg)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  const autoware_vehicle_msgs__srv__ControlModeCommand_Request * control_mode_request_msg_ = (const autoware_vehicle_msgs__srv__ControlModeCommand_Request * )xRequestMsg;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  // TODO Send threadflag to TaskControle


  //xResponseMsg = &control_mode_response_msg_;
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 8001258:	480e      	ldr	r0, [pc, #56]	@ (8001294 <MX_FREERTOS_Init+0x40>)
 800125a:	f00c fd93 	bl	800dd84 <osMutexNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <MX_FREERTOS_Init+0x44>)
 8001262:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <MX_FREERTOS_Init+0x48>)
 8001266:	f00c fd8d 	bl	800dd84 <osMutexNew>
 800126a:	4603      	mov	r3, r0
 800126c:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <MX_FREERTOS_Init+0x4c>)
 800126e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8001270:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <MX_FREERTOS_Init+0x50>)
 8001272:	2100      	movs	r1, #0
 8001274:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <MX_FREERTOS_Init+0x54>)
 8001276:	f00c fc09 	bl	800da8c <osThreadNew>
 800127a:	4603      	mov	r3, r0
 800127c:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <MX_FREERTOS_Init+0x58>)
 800127e:	6013      	str	r3, [r2, #0]

  /* creation of TaskMicroAutowa */
  TaskMicroAutowaHandle = osThreadNew(StartMicroAutoware, NULL, &TaskMicroAutowa_attributes);
 8001280:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <MX_FREERTOS_Init+0x5c>)
 8001282:	2100      	movs	r1, #0
 8001284:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <MX_FREERTOS_Init+0x60>)
 8001286:	f00c fc01 	bl	800da8c <osThreadNew>
 800128a:	4603      	mov	r3, r0
 800128c:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <MX_FREERTOS_Init+0x64>)
 800128e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	080221a4 	.word	0x080221a4
 8001298:	24032a64 	.word	0x24032a64
 800129c:	080221b4 	.word	0x080221b4
 80012a0:	24032a68 	.word	0x24032a68
 80012a4:	0802215c 	.word	0x0802215c
 80012a8:	080022b1 	.word	0x080022b1
 80012ac:	24032a5c 	.word	0x24032a5c
 80012b0:	08022180 	.word	0x08022180
 80012b4:	08001781 	.word	0x08001781
 80012b8:	24032a60 	.word	0x24032a60

080012bc <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012cc:	d10d      	bne.n	80012ea <HAL_GPIO_EXTI_Callback+0x2e>
    ucButtonState ^= 1;
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_GPIO_EXTI_Callback+0x38>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	f083 0301 	eor.w	r3, r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_GPIO_EXTI_Callback+0x38>)
 80012da:	701a      	strb	r2, [r3, #0]
    osThreadFlagsSet(TaskControleHandle, 0x1000);
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00c fc63 	bl	800dbb0 <osThreadFlagsSet>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	24032a6c 	.word	0x24032a6c
 80012f8:	24032a5c 	.word	0x24032a5c

080012fc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	@ 0x38
 8001300:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	4b9e      	ldr	r3, [pc, #632]	@ (800158c <MX_GPIO_Init+0x290>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001318:	4a9c      	ldr	r2, [pc, #624]	@ (800158c <MX_GPIO_Init+0x290>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001322:	4b9a      	ldr	r3, [pc, #616]	@ (800158c <MX_GPIO_Init+0x290>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	623b      	str	r3, [r7, #32]
 800132e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001330:	4b96      	ldr	r3, [pc, #600]	@ (800158c <MX_GPIO_Init+0x290>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001336:	4a95      	ldr	r2, [pc, #596]	@ (800158c <MX_GPIO_Init+0x290>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800133c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001340:	4b92      	ldr	r3, [pc, #584]	@ (800158c <MX_GPIO_Init+0x290>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b8f      	ldr	r3, [pc, #572]	@ (800158c <MX_GPIO_Init+0x290>)
 8001350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001354:	4a8d      	ldr	r2, [pc, #564]	@ (800158c <MX_GPIO_Init+0x290>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800135e:	4b8b      	ldr	r3, [pc, #556]	@ (800158c <MX_GPIO_Init+0x290>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	4b87      	ldr	r3, [pc, #540]	@ (800158c <MX_GPIO_Init+0x290>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001372:	4a86      	ldr	r2, [pc, #536]	@ (800158c <MX_GPIO_Init+0x290>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800137c:	4b83      	ldr	r3, [pc, #524]	@ (800158c <MX_GPIO_Init+0x290>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800138a:	4b80      	ldr	r3, [pc, #512]	@ (800158c <MX_GPIO_Init+0x290>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001390:	4a7e      	ldr	r2, [pc, #504]	@ (800158c <MX_GPIO_Init+0x290>)
 8001392:	f043 0320 	orr.w	r3, r3, #32
 8001396:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800139a:	4b7c      	ldr	r3, [pc, #496]	@ (800158c <MX_GPIO_Init+0x290>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a0:	f003 0320 	and.w	r3, r3, #32
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a8:	4b78      	ldr	r3, [pc, #480]	@ (800158c <MX_GPIO_Init+0x290>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ae:	4a77      	ldr	r2, [pc, #476]	@ (800158c <MX_GPIO_Init+0x290>)
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b8:	4b74      	ldr	r3, [pc, #464]	@ (800158c <MX_GPIO_Init+0x290>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c6:	4b71      	ldr	r3, [pc, #452]	@ (800158c <MX_GPIO_Init+0x290>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013cc:	4a6f      	ldr	r2, [pc, #444]	@ (800158c <MX_GPIO_Init+0x290>)
 80013ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d6:	4b6d      	ldr	r3, [pc, #436]	@ (800158c <MX_GPIO_Init+0x290>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e4:	4b69      	ldr	r3, [pc, #420]	@ (800158c <MX_GPIO_Init+0x290>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ea:	4a68      	ldr	r2, [pc, #416]	@ (800158c <MX_GPIO_Init+0x290>)
 80013ec:	f043 0310 	orr.w	r3, r3, #16
 80013f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f4:	4b65      	ldr	r3, [pc, #404]	@ (800158c <MX_GPIO_Init+0x290>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001408:	4861      	ldr	r0, [pc, #388]	@ (8001590 <MX_GPIO_Init+0x294>)
 800140a:	f006 f987 	bl	800771c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001414:	485f      	ldr	r0, [pc, #380]	@ (8001594 <MX_GPIO_Init+0x298>)
 8001416:	f006 f981 	bl	800771c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	485e      	ldr	r0, [pc, #376]	@ (8001598 <MX_GPIO_Init+0x29c>)
 8001420:	f006 f97c 	bl	800771c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001424:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4858      	ldr	r0, [pc, #352]	@ (800159c <MX_GPIO_Init+0x2a0>)
 800143a:	f005 ffbf 	bl	80073bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800143e:	2332      	movs	r3, #50	@ 0x32
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800144e:	230b      	movs	r3, #11
 8001450:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4850      	ldr	r0, [pc, #320]	@ (800159c <MX_GPIO_Init+0x2a0>)
 800145a:	f005 ffaf 	bl	80073bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800145e:	2386      	movs	r3, #134	@ 0x86
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800146e:	230b      	movs	r3, #11
 8001470:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001476:	4619      	mov	r1, r3
 8001478:	4849      	ldr	r0, [pc, #292]	@ (80015a0 <MX_GPIO_Init+0x2a4>)
 800147a:	f005 ff9f 	bl	80073bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800147e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	483e      	ldr	r0, [pc, #248]	@ (8001590 <MX_GPIO_Init+0x294>)
 8001498:	f005 ff90 	bl	80073bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 800149c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	483c      	ldr	r0, [pc, #240]	@ (80015a4 <MX_GPIO_Init+0x2a8>)
 80014b4:	f005 ff82 	bl	80073bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ca:	230b      	movs	r3, #11
 80014cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	482e      	ldr	r0, [pc, #184]	@ (8001590 <MX_GPIO_Init+0x294>)
 80014d6:	f005 ff71 	bl	80073bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80014da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4828      	ldr	r0, [pc, #160]	@ (8001594 <MX_GPIO_Init+0x298>)
 80014f4:	f005 ff62 	bl	80073bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	4826      	ldr	r0, [pc, #152]	@ (80015a8 <MX_GPIO_Init+0x2ac>)
 800150e:	f005 ff55 	bl	80073bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001512:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001524:	230a      	movs	r3, #10
 8001526:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	481c      	ldr	r0, [pc, #112]	@ (80015a0 <MX_GPIO_Init+0x2a4>)
 8001530:	f005 ff44 	bl	80073bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001534:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001546:	230b      	movs	r3, #11
 8001548:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	4815      	ldr	r0, [pc, #84]	@ (80015a8 <MX_GPIO_Init+0x2ac>)
 8001552:	f005 ff33 	bl	80073bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001556:	2302      	movs	r3, #2
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	480a      	ldr	r0, [pc, #40]	@ (8001598 <MX_GPIO_Init+0x29c>)
 800156e:	f005 ff25 	bl	80073bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2107      	movs	r1, #7
 8001576:	2028      	movs	r0, #40	@ 0x28
 8001578:	f003 f8b0 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800157c:	2028      	movs	r0, #40	@ 0x28
 800157e:	f003 f8c7 	bl	8004710 <HAL_NVIC_EnableIRQ>

}
 8001582:	bf00      	nop
 8001584:	3738      	adds	r7, #56	@ 0x38
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	58024400 	.word	0x58024400
 8001590:	58020400 	.word	0x58020400
 8001594:	58020c00 	.word	0x58020c00
 8001598:	58021000 	.word	0x58021000
 800159c:	58020800 	.word	0x58020800
 80015a0:	58020000 	.word	0x58020000
 80015a4:	58021400 	.word	0x58021400
 80015a8:	58021800 	.word	0x58021800

080015ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b0:	f001 fc7e 	bl	8002eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b4:	f000 f81c 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b8:	f7ff fea0 	bl	80012fc <MX_GPIO_Init>
  MX_DMA_Init();
 80015bc:	f7ff fc46 	bl	8000e4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80015c0:	f001 f846 	bl	8002650 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80015c4:	f7ff f8bc 	bl	8000740 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80015c8:	f000 fff6 	bl	80025b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 80015cc:	2202      	movs	r2, #2
 80015ce:	4906      	ldr	r1, [pc, #24]	@ (80015e8 <main+0x3c>)
 80015d0:	4806      	ldr	r0, [pc, #24]	@ (80015ec <main+0x40>)
 80015d2:	f002 f85f 	bl	8003694 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015d6:	f00c fa0f 	bl	800d9f8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015da:	f7ff fe3b 	bl	8001254 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015de:	f00c fa2f 	bl	800da40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015e2:	bf00      	nop
 80015e4:	e7fd      	b.n	80015e2 <main+0x36>
 80015e6:	bf00      	nop
 80015e8:	24032a70 	.word	0x24032a70
 80015ec:	2400140c 	.word	0x2400140c

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b09e      	sub	sp, #120	@ 0x78
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015fa:	224c      	movs	r2, #76	@ 0x4c
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f01f fcdc 	bl	8020fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2220      	movs	r2, #32
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f01f fcd5 	bl	8020fbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001612:	2002      	movs	r0, #2
 8001614:	f006 f8b6 	bl	8007784 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	4b49      	ldr	r3, [pc, #292]	@ (8001744 <SystemClock_Config+0x154>)
 800161e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001620:	4a48      	ldr	r2, [pc, #288]	@ (8001744 <SystemClock_Config+0x154>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001628:	4b46      	ldr	r3, [pc, #280]	@ (8001744 <SystemClock_Config+0x154>)
 800162a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b45      	ldr	r3, [pc, #276]	@ (8001748 <SystemClock_Config+0x158>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	4a44      	ldr	r2, [pc, #272]	@ (8001748 <SystemClock_Config+0x158>)
 8001638:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800163c:	6193      	str	r3, [r2, #24]
 800163e:	4b42      	ldr	r3, [pc, #264]	@ (8001748 <SystemClock_Config+0x158>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800164a:	bf00      	nop
 800164c:	4b3e      	ldr	r3, [pc, #248]	@ (8001748 <SystemClock_Config+0x158>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001658:	d1f8      	bne.n	800164c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b3c      	ldr	r3, [pc, #240]	@ (800174c <SystemClock_Config+0x15c>)
 800165c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001660:	4a3a      	ldr	r2, [pc, #232]	@ (800174c <SystemClock_Config+0x15c>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800166a:	4b38      	ldr	r3, [pc, #224]	@ (800174c <SystemClock_Config+0x15c>)
 800166c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001678:	2300      	movs	r3, #0
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <SystemClock_Config+0x158>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a31      	ldr	r2, [pc, #196]	@ (8001748 <SystemClock_Config+0x158>)
 8001682:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <SystemClock_Config+0x158>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b2c      	ldr	r3, [pc, #176]	@ (8001744 <SystemClock_Config+0x154>)
 8001694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001696:	4a2b      	ldr	r2, [pc, #172]	@ (8001744 <SystemClock_Config+0x154>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800169e:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <SystemClock_Config+0x154>)
 80016a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016aa:	bf00      	nop
 80016ac:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <SystemClock_Config+0x158>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016b8:	d1f8      	bne.n	80016ac <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 80016ba:	2310      	movs	r3, #16
 80016bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80016c2:	2320      	movs	r3, #32
 80016c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c6:	2302      	movs	r3, #2
 80016c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80016ca:	2301      	movs	r3, #1
 80016cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016ce:	2301      	movs	r3, #1
 80016d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 80016d2:	23f0      	movs	r3, #240	@ 0xf0
 80016d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016da:	2304      	movs	r3, #4
 80016dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016de:	2302      	movs	r3, #2
 80016e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016e2:	2308      	movs	r3, #8
 80016e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016f2:	4618      	mov	r0, r3
 80016f4:	f006 f880 	bl	80077f8 <HAL_RCC_OscConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80016fe:	f000 f839 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001702:	233f      	movs	r3, #63	@ 0x3f
 8001704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001706:	2303      	movs	r3, #3
 8001708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800170e:	2308      	movs	r3, #8
 8001710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001712:	2340      	movs	r3, #64	@ 0x40
 8001714:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001716:	2340      	movs	r3, #64	@ 0x40
 8001718:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800171a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001720:	2340      	movs	r3, #64	@ 0x40
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	2104      	movs	r1, #4
 800172a:	4618      	mov	r0, r3
 800172c:	f006 fcbe 	bl	80080ac <HAL_RCC_ClockConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001736:	f000 f81d 	bl	8001774 <Error_Handler>
  }
}
 800173a:	bf00      	nop
 800173c:	3778      	adds	r7, #120	@ 0x78
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	58000400 	.word	0x58000400
 8001748:	58024800 	.word	0x58024800
 800174c:	58024400 	.word	0x58024400

08001750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001762:	f001 fbe1 	bl	8002f28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40001000 	.word	0x40001000

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <Error_Handler+0x8>

08001780 <StartMicroAutoware>:
  * @brief  MicroAutoware task function.
  * @param  argument : not used.
  * @retval None
  */
void StartMicroAutoware(void *argument)
{
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	f5ad 7d4a 	sub.w	sp, sp, #808	@ 0x328
 8001786:	af02      	add	r7, sp, #8
 8001788:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 800178c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001790:	6018      	str	r0, [r3, #0]

  // Variables -- START

  unsigned int uiFlags;
  unsigned char ucControlMode = AUTOWARE;
 8001792:	2301      	movs	r3, #1
 8001794:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 8001798:	4bb3      	ldr	r3, [pc, #716]	@ (8001a68 <StartMicroAutoware+0x2e8>)
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	4bb3      	ldr	r3, [pc, #716]	@ (8001a6c <StartMicroAutoware+0x2ec>)
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4bb3      	ldr	r3, [pc, #716]	@ (8001a70 <StartMicroAutoware+0x2f0>)
 80017a2:	4ab4      	ldr	r2, [pc, #720]	@ (8001a74 <StartMicroAutoware+0x2f4>)
 80017a4:	49b4      	ldr	r1, [pc, #720]	@ (8001a78 <StartMicroAutoware+0x2f8>)
 80017a6:	2001      	movs	r0, #1
 80017a8:	f013 fb32 	bl	8014e10 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80017ac:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017b0:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80017b4:	4618      	mov	r0, r3
 80017b6:	f013 fa81 	bl	8014cbc <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 80017ba:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017be:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80017c2:	4aae      	ldr	r2, [pc, #696]	@ (8001a7c <StartMicroAutoware+0x2fc>)
 80017c4:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 80017c6:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017ca:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80017ce:	4aac      	ldr	r2, [pc, #688]	@ (8001a80 <StartMicroAutoware+0x300>)
 80017d0:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 80017d2:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017d6:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80017da:	4aaa      	ldr	r2, [pc, #680]	@ (8001a84 <StartMicroAutoware+0x304>)
 80017dc:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80017de:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017e2:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80017e6:	4aa8      	ldr	r2, [pc, #672]	@ (8001a88 <StartMicroAutoware+0x308>)
 80017e8:	60da      	str	r2, [r3, #12]

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 80017ea:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017ee:	f5a3 741e 	sub.w	r4, r3, #632	@ 0x278
 80017f2:	463b      	mov	r3, r7
 80017f4:	4618      	mov	r0, r3
 80017f6:	f012 fdf1 	bl	80143dc <rclc_executor_get_zero_initialized_executor>
 80017fa:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80017fe:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001802:	4620      	mov	r0, r4
 8001804:	4619      	mov	r1, r3
 8001806:	2388      	movs	r3, #136	@ 0x88
 8001808:	461a      	mov	r2, r3
 800180a:	f01f fcf6 	bl	80211fa <memcpy>

  allocator = rcl_get_default_allocator();
 800180e:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001812:	f5a3 74f6 	sub.w	r4, r3, #492	@ 0x1ec
 8001816:	463b      	mov	r3, r7
 8001818:	4618      	mov	r0, r3
 800181a:	f013 fa5d 	bl	8014cd8 <rcutils_get_default_allocator>
 800181e:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001822:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001826:	461d      	mov	r5, r3
 8001828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800182a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800182c:	682b      	ldr	r3, [r5, #0]
 800182e:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001830:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001834:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	f013 f8fc 	bl	8014a38 <rclc_support_init>

  // create node
  rclc_node_init_default(&VehicleInterfaceNode, NODE_NAME, "microautoware", &support);
 8001840:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001844:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8001848:	4a90      	ldr	r2, [pc, #576]	@ (8001a8c <StartMicroAutoware+0x30c>)
 800184a:	4991      	ldr	r1, [pc, #580]	@ (8001a90 <StartMicroAutoware+0x310>)
 800184c:	f013 f93e 	bl	8014acc <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001850:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001854:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001858:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 800185c:	2201      	movs	r2, #1
 800185e:	f012 fdc7 	bl	80143f0 <rclc_executor_init>


  // create subscribers
  // TODO set QoS
  rclc_subscription_init_default(
 8001862:	f00f fdb3 	bl	80113cc <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>
 8001866:	4602      	mov	r2, r0
 8001868:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800186c:	f507 7045 	add.w	r0, r7, #788	@ 0x314
 8001870:	4b88      	ldr	r3, [pc, #544]	@ (8001a94 <StartMicroAutoware+0x314>)
 8001872:	f013 f9e1 	bl	8014c38 <rclc_subscription_init_default>
    		&control_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_control_msgs, msg, Control),
    		"/control/command/control_cmd");

  rclc_subscription_init_default(
 8001876:	f010 f8bf 	bl	80119f8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>
 800187a:	4602      	mov	r2, r0
 800187c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001880:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8001884:	4b84      	ldr	r3, [pc, #528]	@ (8001a98 <StartMicroAutoware+0x318>)
 8001886:	f013 f9d7 	bl	8014c38 <rclc_subscription_init_default>
    		&gear_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd");

  rclc_subscription_init_default(
 800188a:	f010 f92d 	bl	8011ae8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>
 800188e:	4602      	mov	r2, r0
 8001890:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001894:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 8001898:	4b80      	ldr	r3, [pc, #512]	@ (8001a9c <StartMicroAutoware+0x31c>)
 800189a:	f013 f9cd 	bl	8014c38 <rclc_subscription_init_default>
    		&turn_indicators_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd");

  rclc_subscription_init_default(
 800189e:	f010 f8db 	bl	8011a58 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>
 80018a2:	4602      	mov	r2, r0
 80018a4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018a8:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 80018ac:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa0 <StartMicroAutoware+0x320>)
 80018ae:	f013 f9c3 	bl	8014c38 <rclc_subscription_init_default>
    		&hazard_lights_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd");

  rclc_subscription_init_default(
 80018b2:	f013 fbe7 	bl	8015084 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018bc:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 80018c0:	4b78      	ldr	r3, [pc, #480]	@ (8001aa4 <StartMicroAutoware+0x324>)
 80018c2:	f013 f9b9 	bl	8014c38 <rclc_subscription_init_default>
    		&actuation_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd");

  rclc_subscription_init_default(
 80018c6:	f013 fc25 	bl	8015114 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 80018ca:	4602      	mov	r2, r0
 80018cc:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018d0:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 80018d4:	4b74      	ldr	r3, [pc, #464]	@ (8001aa8 <StartMicroAutoware+0x328>)
 80018d6:	f013 f9af 	bl	8014c38 <rclc_subscription_init_default>
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd");

  // create publishers
  // TODO set QoS
  rclc_publisher_init_default(
 80018da:	f010 f875 	bl	80119c8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>
 80018de:	4602      	mov	r2, r0
 80018e0:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018e4:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 80018e8:	4b70      	ldr	r3, [pc, #448]	@ (8001aac <StartMicroAutoware+0x32c>)
 80018ea:	f013 f931 	bl	8014b50 <rclc_publisher_init_default>
		  	&control_mode_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, ControlModeReport),
			"/vehicle/status/control_mode");

  rclc_publisher_init_default(
 80018ee:	f010 f92b 	bl	8011b48 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018f8:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 80018fc:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab0 <StartMicroAutoware+0x330>)
 80018fe:	f013 f927 	bl	8014b50 <rclc_publisher_init_default>
		  	&vehicle_twist_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, VelocityReport),
			"/vehicle/status/velocity_status");

  rclc_publisher_init_default(
 8001902:	f010 f8d9 	bl	8011ab8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>
 8001906:	4602      	mov	r2, r0
 8001908:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800190c:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 8001910:	4b68      	ldr	r3, [pc, #416]	@ (8001ab4 <StartMicroAutoware+0x334>)
 8001912:	f013 f91d 	bl	8014b50 <rclc_publisher_init_default>
			&steering_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, SteeringReport),
			"/vehicle/status/steering_status");

  rclc_publisher_init_default(
 8001916:	f010 f887 	bl	8011a28 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>
 800191a:	4602      	mov	r2, r0
 800191c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001920:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 8001924:	4b64      	ldr	r3, [pc, #400]	@ (8001ab8 <StartMicroAutoware+0x338>)
 8001926:	f013 f913 	bl	8014b50 <rclc_publisher_init_default>
			&gear_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearReport),
			"/vehicle/status/gear_status");

  rclc_publisher_init_default(
 800192a:	f010 f8f5 	bl	8011b18 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>
 800192e:	4602      	mov	r2, r0
 8001930:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001934:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 8001938:	4b60      	ldr	r3, [pc, #384]	@ (8001abc <StartMicroAutoware+0x33c>)
 800193a:	f013 f909 	bl	8014b50 <rclc_publisher_init_default>
			&turn_indicators_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsReport),
			"/vehicle/status/turn_indicators_status");

  rclc_publisher_init_default(
 800193e:	f010 f8a3 	bl	8011a88 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>
 8001942:	4602      	mov	r2, r0
 8001944:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001948:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 800194c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac0 <StartMicroAutoware+0x340>)
 800194e:	f013 f8ff 	bl	8014b50 <rclc_publisher_init_default>
			&hazard_lights_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsReport),
			"/vehicle/status/hazard_lights_status");

  rclc_publisher_init_default(
 8001952:	f013 fbaf 	bl	80150b4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 8001956:	4602      	mov	r2, r0
 8001958:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800195c:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 8001960:	4b58      	ldr	r3, [pc, #352]	@ (8001ac4 <StartMicroAutoware+0x344>)
 8001962:	f013 f8f5 	bl	8014b50 <rclc_publisher_init_default>
			&actuation_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
			"/vehicle/status/actuation_status");

  rclc_publisher_init_default(
 8001966:	f013 fbbd 	bl	80150e4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 800196a:	4602      	mov	r2, r0
 800196c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001970:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 8001974:	4b54      	ldr	r3, [pc, #336]	@ (8001ac8 <StartMicroAutoware+0x348>)
 8001976:	f013 f8eb 	bl	8014b50 <rclc_publisher_init_default>
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
			"/vehicle/status/steering_wheel_status");

  // creating servers
  rclc_service_init_default(
 800197a:	f010 f805 	bl	8011988 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>
 800197e:	4602      	mov	r2, r0
 8001980:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001984:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8001988:	4b50      	ldr	r3, [pc, #320]	@ (8001acc <StartMicroAutoware+0x34c>)
 800198a:	f013 f91b 	bl	8014bc4 <rclc_service_init_default>
			ROSIDL_GET_SRV_TYPE_SUPPORT(autoware_vehicle_msgs, srv, ControlModeCommand),
			"/control/control_mode_request");


  // adding callbacks to executor
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 800198e:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8001992:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 8001996:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 800199a:	2300      	movs	r3, #0
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad0 <StartMicroAutoware+0x350>)
 80019a0:	f012 fda2 	bl	80144e8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &gear_cmd_sub_, &gear_cmd_msg_, &gear_cmd_callback, ON_NEW_DATA);
 80019a4:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 80019a8:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 80019ac:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019b0:	2300      	movs	r3, #0
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	4b47      	ldr	r3, [pc, #284]	@ (8001ad4 <StartMicroAutoware+0x354>)
 80019b6:	f012 fd97 	bl	80144e8 <rclc_executor_add_subscription>
  rclc_executor_add_service(&executor, &control_mode_server_, &control_mode_request_msg_, &control_mode_response_msg_, control_mode_cmd_callback);
 80019ba:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 80019be:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80019c2:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 80019c6:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019ca:	4c43      	ldr	r4, [pc, #268]	@ (8001ad8 <StartMicroAutoware+0x358>)
 80019cc:	9400      	str	r4, [sp, #0]
 80019ce:	f012 fdc9 	bl	8014564 <rclc_executor_add_service>

  rclc_executor_add_subscription(&executor, &turn_indicators_cmd_sub_, &turn_indicators_cmd_msg_, &turn_indicators_cmd_callback, ON_NEW_DATA);
 80019d2:	f507 721e 	add.w	r2, r7, #632	@ 0x278
 80019d6:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 80019da:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019de:	2300      	movs	r3, #0
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	4b3e      	ldr	r3, [pc, #248]	@ (8001adc <StartMicroAutoware+0x35c>)
 80019e4:	f012 fd80 	bl	80144e8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &hazard_lights_cmd_sub_, &hazard_lights_cmd_msg_, &hazard_lights_cmd_callback, ON_NEW_DATA);
 80019e8:	f507 721b 	add.w	r2, r7, #620	@ 0x26c
 80019ec:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 80019f0:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019f4:	2300      	movs	r3, #0
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	4b39      	ldr	r3, [pc, #228]	@ (8001ae0 <StartMicroAutoware+0x360>)
 80019fa:	f012 fd75 	bl	80144e8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &actuation_cmd_sub_, &actuation_cmd_msg_, &actuation_cmd_callback, ON_NEW_DATA);
 80019fe:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001a02:	f507 7141 	add.w	r1, r7, #772	@ 0x304
 8001a06:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	4b35      	ldr	r3, [pc, #212]	@ (8001ae4 <StartMicroAutoware+0x364>)
 8001a10:	f012 fd6a 	bl	80144e8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);
 8001a14:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8001a18:	f507 7140 	add.w	r1, r7, #768	@ 0x300
 8001a1c:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001a20:	2300      	movs	r3, #0
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	4b30      	ldr	r3, [pc, #192]	@ (8001ae8 <StartMicroAutoware+0x368>)
 8001a26:	f012 fd5f 	bl	80144e8 <rclc_executor_add_subscription>


  for (;;)
  {

    rclc_executor_spin_some(&executor, 20 * (1000 * 1000)); // Spinning executor for 20 ms.
 8001a2a:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001a2e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001a60 <StartMicroAutoware+0x2e0>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	4608      	mov	r0, r1
 8001a36:	f012 ffc5 	bl	80149c4 <rclc_executor_spin_some>

    if(0x00111111 == ucSubscribersRecieved)
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001aec <StartMicroAutoware+0x36c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8001af0 <StartMicroAutoware+0x370>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d1f2      	bne.n	8001a2a <StartMicroAutoware+0x2aa>
    {

	  // TODO: Gather all subs data, then compact and send to TaskControle.

      // Verify if Autoware changed the operation mode
	  if(AUTOWARE == ucControlMode)
 8001a44:	f897 331b 	ldrb.w	r3, [r7, #795]	@ 0x31b
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d155      	bne.n	8001af8 <StartMicroAutoware+0x378>
	  {
		ucControlMode = MANUAL;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
		osThreadFlagsSet(TaskControleHandle, 0x10);
 8001a52:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <StartMicroAutoware+0x374>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2110      	movs	r1, #16
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00c f8a9 	bl	800dbb0 <osThreadFlagsSet>
 8001a5e:	e058      	b.n	8001b12 <StartMicroAutoware+0x392>
 8001a60:	01312d00 	.word	0x01312d00
 8001a64:	00000000 	.word	0x00000000
 8001a68:	08000f6d 	.word	0x08000f6d
 8001a6c:	08000f09 	.word	0x08000f09
 8001a70:	08000ee9 	.word	0x08000ee9
 8001a74:	08000ebd 	.word	0x08000ebd
 8001a78:	24032b6c 	.word	0x24032b6c
 8001a7c:	08001ba1 	.word	0x08001ba1
 8001a80:	08001be5 	.word	0x08001be5
 8001a84:	08001c1d 	.word	0x08001c1d
 8001a88:	08001c89 	.word	0x08001c89
 8001a8c:	08021ed8 	.word	0x08021ed8
 8001a90:	08021ee8 	.word	0x08021ee8
 8001a94:	08021efc 	.word	0x08021efc
 8001a98:	08021f1c 	.word	0x08021f1c
 8001a9c:	08021f38 	.word	0x08021f38
 8001aa0:	08021f60 	.word	0x08021f60
 8001aa4:	08021f84 	.word	0x08021f84
 8001aa8:	08021fa4 	.word	0x08021fa4
 8001aac:	08021fc4 	.word	0x08021fc4
 8001ab0:	08021fe4 	.word	0x08021fe4
 8001ab4:	08022004 	.word	0x08022004
 8001ab8:	08022024 	.word	0x08022024
 8001abc:	08022040 	.word	0x08022040
 8001ac0:	08022068 	.word	0x08022068
 8001ac4:	08022090 	.word	0x08022090
 8001ac8:	080220b4 	.word	0x080220b4
 8001acc:	080220dc 	.word	0x080220dc
 8001ad0:	08001149 	.word	0x08001149
 8001ad4:	08001171 	.word	0x08001171
 8001ad8:	08001239 	.word	0x08001239
 8001adc:	08001199 	.word	0x08001199
 8001ae0:	080011c1 	.word	0x080011c1
 8001ae4:	080011e9 	.word	0x080011e9
 8001ae8:	08001211 	.word	0x08001211
 8001aec:	24032a78 	.word	0x24032a78
 8001af0:	00111111 	.word	0x00111111
 8001af4:	24032a5c 	.word	0x24032a5c
	  }
	  else if(MANUAL == ucControlMode)
 8001af8:	f897 331b 	ldrb.w	r3, [r7, #795]	@ 0x31b
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d108      	bne.n	8001b12 <StartMicroAutoware+0x392>
	  {
		ucControlMode = AUTOWARE;
 8001b00:	2301      	movs	r3, #1
 8001b02:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
		osThreadFlagsSet(TaskControleHandle, 0x01);
 8001b06:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <StartMicroAutoware+0x410>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f00c f84f 	bl	800dbb0 <osThreadFlagsSet>
	  }

	  // Autonomous mode: send commands
      if(AUTOWARE == ucControlMode)
 8001b12:	f897 331b 	ldrb.w	r3, [r7, #795]	@ 0x31b
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d112      	bne.n	8001b40 <StartMicroAutoware+0x3c0>
      {
    	osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <StartMicroAutoware+0x414>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b22:	4618      	mov	r0, r3
 8001b24:	f00c f9b4 	bl	800de90 <osMutexAcquire>
	    // xControlAction
		osMutexRelease(MutexControlSignalHandle);
 8001b28:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <StartMicroAutoware+0x418>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00c f9fa 	bl	800df26 <osMutexRelease>

		osThreadFlagsSet(TaskControleHandle, 0x100);
 8001b32:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <StartMicroAutoware+0x410>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f00c f838 	bl	800dbb0 <osThreadFlagsSet>
      }

      // WAIT for flag to sync xControlSignal update
      uiFlags = osThreadFlagsWait(0x100, osFlagsWaitAll, TIMEOUT_GET_CONTROL_SIGNAL);
 8001b40:	221e      	movs	r2, #30
 8001b42:	2101      	movs	r1, #1
 8001b44:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b48:	f00c f880 	bl	800dc4c <osThreadFlagsWait>
 8001b4c:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
      {
    	// Pub data carla
      }

      // Checking control mode update by hardware.
      uiFlags = osThreadFlagsWait(0x11, osFlagsWaitAll, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2101      	movs	r1, #1
 8001b54:	2011      	movs	r0, #17
 8001b56:	f00c f879 	bl	800dc4c <osThreadFlagsWait>
 8001b5a:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c

	  if(0x01 == uiFlags)
 8001b5e:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d105      	bne.n	8001b72 <StartMicroAutoware+0x3f2>
	  {
	    ucControlMode = AUTOWARE;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
	    // publish to autoware
	    uiFlags = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
	  }

	  if(0x10 == uiFlags)
 8001b72:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d105      	bne.n	8001b86 <StartMicroAutoware+0x406>
	  {
	    ucControlMode = MANUAL;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
		// publish to autoware
		uiFlags = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
	  }


	  // Reseting subscribers flags
	  ucSubscribersRecieved = 0;
 8001b86:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <StartMicroAutoware+0x41c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
    rclc_executor_spin_some(&executor, 20 * (1000 * 1000)); // Spinning executor for 20 ms.
 8001b8c:	e74d      	b.n	8001a2a <StartMicroAutoware+0x2aa>
 8001b8e:	bf00      	nop
 8001b90:	24032a5c 	.word	0x24032a5c
 8001b94:	24032a68 	.word	0x24032a68
 8001b98:	24032a64 	.word	0x24032a64
 8001b9c:	24032a78 	.word	0x24032a78

08001ba0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <microros_allocate+0x3c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <microros_allocate+0x3c>)
 8001bb8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <microros_allocate+0x40>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <microros_allocate+0x40>)
 8001bc8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe feec 	bl	80009a8 <pvPortMallocMicroROS>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	24032a7c 	.word	0x24032a7c
 8001be0:	24032a80 	.word	0x24032a80

08001be4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00c      	beq.n	8001c0e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7fe fffb 	bl	8000bf0 <getBlockSize>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a06      	ldr	r2, [pc, #24]	@ (8001c18 <microros_deallocate+0x34>)
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <microros_deallocate+0x34>)
 8001c06:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7fe ff95 	bl	8000b38 <vPortFreeMicroROS>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24032a80 	.word	0x24032a80

08001c1c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c28:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <microros_reallocate+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	4413      	add	r3, r2
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <microros_reallocate+0x64>)
 8001c36:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <microros_reallocate+0x68>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	4413      	add	r3, r2
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <microros_reallocate+0x68>)
 8001c46:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d104      	bne.n	8001c58 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001c4e:	68b8      	ldr	r0, [r7, #8]
 8001c50:	f7fe feaa 	bl	80009a8 <pvPortMallocMicroROS>
 8001c54:	4603      	mov	r3, r0
 8001c56:	e00e      	b.n	8001c76 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7fe ffc9 	bl	8000bf0 <getBlockSize>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a08      	ldr	r2, [pc, #32]	@ (8001c84 <microros_reallocate+0x68>)
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <microros_reallocate+0x68>)
 8001c6a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f7fe ffdc 	bl	8000c2c <pvPortReallocMicroROS>
 8001c74:	4603      	mov	r3, r0
  }
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	24032a7c 	.word	0x24032a7c
 8001c84:	24032a80 	.word	0x24032a80

08001c88 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd0 <microros_zero_allocate+0x48>)
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <microros_zero_allocate+0x48>)
 8001ca6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	4a08      	ldr	r2, [pc, #32]	@ (8001cd4 <microros_zero_allocate+0x4c>)
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <microros_zero_allocate+0x4c>)
 8001cba:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f7fe ffe1 	bl	8000c86 <pvPortCallocMicroROS>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	24032a7c 	.word	0x24032a7c
 8001cd4:	24032a80 	.word	0x24032a80

08001cd8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001cd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001cea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cee:	a320      	add	r3, pc, #128	@ (adr r3, 8001d70 <UTILS_NanosecondsToTimespec+0x98>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f7fe fb5c 	bl	80003b0 <__aeabi_ldivmod>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001d02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d06:	a31a      	add	r3, pc, #104	@ (adr r3, 8001d70 <UTILS_NanosecondsToTimespec+0x98>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fb50 	bl	80003b0 <__aeabi_ldivmod>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da20      	bge.n	8001d5e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4a11      	ldr	r2, [pc, #68]	@ (8001d68 <UTILS_NanosecondsToTimespec+0x90>)
 8001d22:	fb82 1203 	smull	r1, r2, r2, r3
 8001d26:	1712      	asrs	r2, r2, #28
 8001d28:	17db      	asrs	r3, r3, #31
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d36:	6979      	ldr	r1, [r7, #20]
 8001d38:	17c8      	asrs	r0, r1, #31
 8001d3a:	460c      	mov	r4, r1
 8001d3c:	4605      	mov	r5, r0
 8001d3e:	ebb2 0804 	subs.w	r8, r2, r4
 8001d42:	eb63 0905 	sbc.w	r9, r3, r5
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	4906      	ldr	r1, [pc, #24]	@ (8001d6c <UTILS_NanosecondsToTimespec+0x94>)
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	441a      	add	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
    }
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d68:	44b82fa1 	.word	0x44b82fa1
 8001d6c:	3b9aca00 	.word	0x3b9aca00
 8001d70:	3b9aca00 	.word	0x3b9aca00
 8001d74:	00000000 	.word	0x00000000

08001d78 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d7c:	b08e      	sub	sp, #56	@ 0x38
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6278      	str	r0, [r7, #36]	@ 0x24
 8001d82:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001d84:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001d9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f00d fdf2 	bl	800f988 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da6:	17da      	asrs	r2, r3, #31
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	61fa      	str	r2, [r7, #28]
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	69b9      	ldr	r1, [r7, #24]
 8001db6:	000b      	movs	r3, r1
 8001db8:	2200      	movs	r2, #0
 8001dba:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	461c      	mov	r4, r3
 8001dc4:	4615      	mov	r5, r2
 8001dc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001dca:	1911      	adds	r1, r2, r4
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	416b      	adcs	r3, r5
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001dd6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001dda:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	f04f 0400 	mov.w	r4, #0
 8001de6:	f04f 0500 	mov.w	r5, #0
 8001dea:	015d      	lsls	r5, r3, #5
 8001dec:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001df0:	0154      	lsls	r4, r2, #5
 8001df2:	4622      	mov	r2, r4
 8001df4:	462b      	mov	r3, r5
 8001df6:	ebb2 0800 	subs.w	r8, r2, r0
 8001dfa:	eb63 0901 	sbc.w	r9, r3, r1
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001e0a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001e0e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001e12:	4690      	mov	r8, r2
 8001e14:	4699      	mov	r9, r3
 8001e16:	eb18 0a00 	adds.w	sl, r8, r0
 8001e1a:	eb49 0b01 	adc.w	fp, r9, r1
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e2a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e2e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e32:	ebb2 040a 	subs.w	r4, r2, sl
 8001e36:	603c      	str	r4, [r7, #0]
 8001e38:	eb63 030b 	sbc.w	r3, r3, fp
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e42:	4623      	mov	r3, r4
 8001e44:	181b      	adds	r3, r3, r0
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	462b      	mov	r3, r5
 8001e4a:	eb41 0303 	adc.w	r3, r1, r3
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	6a3a      	ldr	r2, [r7, #32]
 8001e52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e56:	f7ff ff3f 	bl	8001cd8 <UTILS_NanosecondsToTimespec>

    return 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3738      	adds	r7, #56	@ 0x38
 8001e60:	46bd      	mov	sp, r7
 8001e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <HAL_MspInit+0x38>)
 8001e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <HAL_MspInit+0x38>)
 8001e76:	f043 0302 	orr.w	r3, r3, #2
 8001e7a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <HAL_MspInit+0x38>)
 8001e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	210f      	movs	r1, #15
 8001e90:	f06f 0001 	mvn.w	r0, #1
 8001e94:	f002 fc22 	bl	80046dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	58024400 	.word	0x58024400

08001ea4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b090      	sub	sp, #64	@ 0x40
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b0f      	cmp	r3, #15
 8001eb0:	d827      	bhi.n	8001f02 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	2036      	movs	r0, #54	@ 0x36
 8001eb8:	f002 fc10 	bl	80046dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ebc:	2036      	movs	r0, #54	@ 0x36
 8001ebe:	f002 fc27 	bl	8004710 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001ec2:	4a29      	ldr	r2, [pc, #164]	@ (8001f68 <HAL_InitTick+0xc4>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ec8:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <HAL_InitTick+0xc8>)
 8001eca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ece:	4a27      	ldr	r2, [pc, #156]	@ (8001f6c <HAL_InitTick+0xc8>)
 8001ed0:	f043 0310 	orr.w	r3, r3, #16
 8001ed4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ed8:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <HAL_InitTick+0xc8>)
 8001eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ee6:	f107 0210 	add.w	r2, r7, #16
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f006 fc67 	bl	80087c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d106      	bne.n	8001f0e <HAL_InitTick+0x6a>
 8001f00:	e001      	b.n	8001f06 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e02b      	b.n	8001f5e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f06:	f006 fc31 	bl	800876c <HAL_RCC_GetPCLK1Freq>
 8001f0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001f0c:	e004      	b.n	8001f18 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f0e:	f006 fc2d 	bl	800876c <HAL_RCC_GetPCLK1Freq>
 8001f12:	4603      	mov	r3, r0
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f1a:	4a15      	ldr	r2, [pc, #84]	@ (8001f70 <HAL_InitTick+0xcc>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	0c9b      	lsrs	r3, r3, #18
 8001f22:	3b01      	subs	r3, #1
 8001f24:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <HAL_InitTick+0xd0>)
 8001f28:	4a13      	ldr	r2, [pc, #76]	@ (8001f78 <HAL_InitTick+0xd4>)
 8001f2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_InitTick+0xd0>)
 8001f2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f34:	4a0f      	ldr	r2, [pc, #60]	@ (8001f74 <HAL_InitTick+0xd0>)
 8001f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <HAL_InitTick+0xd0>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <HAL_InitTick+0xd0>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001f46:	480b      	ldr	r0, [pc, #44]	@ (8001f74 <HAL_InitTick+0xd0>)
 8001f48:	f009 f97c 	bl	800b244 <HAL_TIM_Base_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d104      	bne.n	8001f5c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001f52:	4808      	ldr	r0, [pc, #32]	@ (8001f74 <HAL_InitTick+0xd0>)
 8001f54:	f009 f9d8 	bl	800b308 <HAL_TIM_Base_Start_IT>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	e000      	b.n	8001f5e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3740      	adds	r7, #64	@ 0x40
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2400000c 	.word	0x2400000c
 8001f6c:	58024400 	.word	0x58024400
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	24032a84 	.word	0x24032a84
 8001f78:	40001000 	.word	0x40001000

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <NMI_Handler+0x4>

08001f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <MemManage_Handler+0x4>

08001f94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <BusFault_Handler+0x4>

08001f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <UsageFault_Handler+0x4>

08001fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <DMA1_Stream0_IRQHandler+0x10>)
 8001fba:	f003 fee1 	bl	8005d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	24032cf0 	.word	0x24032cf0

08001fc8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <DMA1_Stream1_IRQHandler+0x10>)
 8001fce:	f003 fed7 	bl	8005d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	24032d68 	.word	0x24032d68

08001fdc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <USART3_IRQHandler+0x10>)
 8001fe2:	f009 fdaf 	bl	800bb44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	24032b6c 	.word	0x24032b6c

08001ff0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8001ff4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ff8:	f005 fba9 	bl	800774e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <TIM6_DAC_IRQHandler+0x10>)
 8002006:	f009 f9f7 	bl	800b3f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	24032a84 	.word	0x24032a84

08002014 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return 1;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_kill>:

int _kill(int pid, int sig)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800202e:	f01f f8af 	bl	8021190 <__errno>
 8002032:	4603      	mov	r3, r0
 8002034:	2216      	movs	r2, #22
 8002036:	601a      	str	r2, [r3, #0]
  return -1;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_exit>:

void _exit (int status)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800204c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ffe7 	bl	8002024 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002056:	bf00      	nop
 8002058:	e7fd      	b.n	8002056 <_exit+0x12>

0800205a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e00a      	b.n	8002082 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800206c:	f3af 8000 	nop.w
 8002070:	4601      	mov	r1, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	60ba      	str	r2, [r7, #8]
 8002078:	b2ca      	uxtb	r2, r1
 800207a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	dbf0      	blt.n	800206c <_read+0x12>
  }

  return len;
 800208a:	687b      	ldr	r3, [r7, #4]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e009      	b.n	80020ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	60ba      	str	r2, [r7, #8]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	dbf1      	blt.n	80020a6 <_write+0x12>
  }
  return len;
 80020c2:	687b      	ldr	r3, [r7, #4]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_close>:

int _close(int file)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f4:	605a      	str	r2, [r3, #4]
  return 0;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_isatty>:

int _isatty(int file)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800210c:	2301      	movs	r3, #1
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	@ (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	@ (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f01f f814 	bl	8021190 <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	220c      	movs	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	24080000 	.word	0x24080000
 8002194:	00000400 	.word	0x00000400
 8002198:	24032ad4 	.word	0x24032ad4
 800219c:	24069778 	.word	0x24069778

080021a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021a4:	4b37      	ldr	r3, [pc, #220]	@ (8002284 <SystemInit+0xe4>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021aa:	4a36      	ldr	r2, [pc, #216]	@ (8002284 <SystemInit+0xe4>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021b4:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <SystemInit+0xe8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	2b06      	cmp	r3, #6
 80021be:	d807      	bhi.n	80021d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021c0:	4b31      	ldr	r3, [pc, #196]	@ (8002288 <SystemInit+0xe8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f023 030f 	bic.w	r3, r3, #15
 80021c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002288 <SystemInit+0xe8>)
 80021ca:	f043 0307 	orr.w	r3, r3, #7
 80021ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80021d0:	4b2e      	ldr	r3, [pc, #184]	@ (800228c <SystemInit+0xec>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2d      	ldr	r2, [pc, #180]	@ (800228c <SystemInit+0xec>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021dc:	4b2b      	ldr	r3, [pc, #172]	@ (800228c <SystemInit+0xec>)
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80021e2:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <SystemInit+0xec>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4929      	ldr	r1, [pc, #164]	@ (800228c <SystemInit+0xec>)
 80021e8:	4b29      	ldr	r3, [pc, #164]	@ (8002290 <SystemInit+0xf0>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021ee:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <SystemInit+0xe8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021fa:	4b23      	ldr	r3, [pc, #140]	@ (8002288 <SystemInit+0xe8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 030f 	bic.w	r3, r3, #15
 8002202:	4a21      	ldr	r2, [pc, #132]	@ (8002288 <SystemInit+0xe8>)
 8002204:	f043 0307 	orr.w	r3, r3, #7
 8002208:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800220a:	4b20      	ldr	r3, [pc, #128]	@ (800228c <SystemInit+0xec>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002210:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <SystemInit+0xec>)
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002216:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <SystemInit+0xec>)
 8002218:	2200      	movs	r2, #0
 800221a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800221c:	4b1b      	ldr	r3, [pc, #108]	@ (800228c <SystemInit+0xec>)
 800221e:	4a1d      	ldr	r2, [pc, #116]	@ (8002294 <SystemInit+0xf4>)
 8002220:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002222:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <SystemInit+0xec>)
 8002224:	4a1c      	ldr	r2, [pc, #112]	@ (8002298 <SystemInit+0xf8>)
 8002226:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002228:	4b18      	ldr	r3, [pc, #96]	@ (800228c <SystemInit+0xec>)
 800222a:	4a1c      	ldr	r2, [pc, #112]	@ (800229c <SystemInit+0xfc>)
 800222c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800222e:	4b17      	ldr	r3, [pc, #92]	@ (800228c <SystemInit+0xec>)
 8002230:	2200      	movs	r2, #0
 8002232:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002234:	4b15      	ldr	r3, [pc, #84]	@ (800228c <SystemInit+0xec>)
 8002236:	4a19      	ldr	r2, [pc, #100]	@ (800229c <SystemInit+0xfc>)
 8002238:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800223a:	4b14      	ldr	r3, [pc, #80]	@ (800228c <SystemInit+0xec>)
 800223c:	2200      	movs	r2, #0
 800223e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002240:	4b12      	ldr	r3, [pc, #72]	@ (800228c <SystemInit+0xec>)
 8002242:	4a16      	ldr	r2, [pc, #88]	@ (800229c <SystemInit+0xfc>)
 8002244:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002246:	4b11      	ldr	r3, [pc, #68]	@ (800228c <SystemInit+0xec>)
 8002248:	2200      	movs	r2, #0
 800224a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800224c:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <SystemInit+0xec>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0e      	ldr	r2, [pc, #56]	@ (800228c <SystemInit+0xec>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002256:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002258:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <SystemInit+0xec>)
 800225a:	2200      	movs	r2, #0
 800225c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800225e:	4b10      	ldr	r3, [pc, #64]	@ (80022a0 <SystemInit+0x100>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <SystemInit+0x104>)
 8002264:	4013      	ands	r3, r2
 8002266:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800226a:	d202      	bcs.n	8002272 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800226c:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <SystemInit+0x108>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002272:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <SystemInit+0x10c>)
 8002274:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002278:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800227a:	bf00      	nop
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00
 8002288:	52002000 	.word	0x52002000
 800228c:	58024400 	.word	0x58024400
 8002290:	eaf6ed7f 	.word	0xeaf6ed7f
 8002294:	02020200 	.word	0x02020200
 8002298:	01ff0000 	.word	0x01ff0000
 800229c:	01010280 	.word	0x01010280
 80022a0:	5c001000 	.word	0x5c001000
 80022a4:	ffff0000 	.word	0xffff0000
 80022a8:	51008108 	.word	0x51008108
 80022ac:	52004000 	.word	0x52004000

080022b0 <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void *argument)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	f5ad 7d4a 	sub.w	sp, sp, #808	@ 0x328
 80022b6:	af02      	add	r7, sp, #8
 80022b8:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80022bc:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 80022c0:	6018      	str	r0, [r3, #0]

  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  unsigned char ucSmState = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f887 32ef 	strb.w	r3, [r7, #751]	@ 0x2ef

  unsigned int uiX0   = 33970;
 80022c8:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 80022cc:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  unsigned int uiXMin = 1057;
 80022d0:	f240 4321 	movw	r3, #1057	@ 0x421
 80022d4:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  unsigned int uiXMax = 65535;
 80022d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022dc:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  unsigned int uiY0   = 33580;
 80022e0:	f248 332c 	movw	r3, #33580	@ 0x832c
 80022e4:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
  unsigned int uiYMin = 1062;
 80022e8:	f240 4326 	movw	r3, #1062	@ 0x426
 80022ec:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
  unsigned int uiYMax = 65535;
 80022f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022f4:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
  vehicle_status xVehicleStatus;

  unsigned char cDmaBuffer[UART2_DMA_BUFFER_SIZE]; // TODO Ajustar o buffer pro tamanho da mensagem, manter a mais nova
  struct uxrCustomTransport xUart2DmaTransport;

  xUart2DmaTransport.args = &huart2;
 80022f8:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80022fc:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8002300:	4aa5      	ldr	r2, [pc, #660]	@ (8002598 <StartTaskControle+0x2e8>)
 8002302:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c

  HAL_UART_Receive_DMA(&huart2, cDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8002306:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 800230a:	2240      	movs	r2, #64	@ 0x40
 800230c:	4619      	mov	r1, r3
 800230e:	48a2      	ldr	r0, [pc, #648]	@ (8002598 <StartTaskControle+0x2e8>)
 8002310:	f009 fb36 	bl	800b980 <HAL_UART_Receive_DMA>

  ucControlMode = AUTOWARE;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 331f 	strb.w	r3, [r7, #799]	@ 0x31f

  for(;;)
  {

	uiFlags = osThreadFlagsWait(0x11, osFlagsWaitAny, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	2011      	movs	r0, #17
 8002320:	f00b fc94 	bl	800dc4c <osThreadFlagsWait>
 8002324:	f8c7 0318 	str.w	r0, [r7, #792]	@ 0x318

	if(0x01 == uiFlags)
 8002328:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <StartTaskControle+0x8c>
	{
	  ucControlMode = AUTOWARE;
 8002330:	2301      	movs	r3, #1
 8002332:	f887 331f 	strb.w	r3, [r7, #799]	@ 0x31f
	  uiFlags = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
	}

	if(0x10 == uiFlags)
 800233c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8002340:	2b10      	cmp	r3, #16
 8002342:	d105      	bne.n	8002350 <StartTaskControle+0xa0>
	{
	  ucControlMode = MANUAL;
 8002344:	2302      	movs	r3, #2
 8002346:	f887 331f 	strb.w	r3, [r7, #799]	@ 0x31f
	  uiFlags = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
	}

	uiFlags = osThreadFlagsWait(0x1000, osFlagsWaitAll, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2101      	movs	r1, #1
 8002354:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002358:	f00b fc78 	bl	800dc4c <osThreadFlagsWait>
 800235c:	f8c7 0318 	str.w	r0, [r7, #792]	@ 0x318

	if(0x1000 == uiFlags)
 8002360:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8002364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002368:	d11d      	bne.n	80023a6 <StartTaskControle+0xf6>
	{
	  if(AUTOWARE == ucControlMode)
 800236a:	f897 331f 	ldrb.w	r3, [r7, #799]	@ 0x31f
 800236e:	2b01      	cmp	r3, #1
 8002370:	d109      	bne.n	8002386 <StartTaskControle+0xd6>
	  {
		ucControlMode = MANUAL;
 8002372:	2302      	movs	r3, #2
 8002374:	f887 331f 	strb.w	r3, [r7, #799]	@ 0x31f
		osThreadFlagsSet(TaskMicroAutowaHandle, 0x10);
 8002378:	4b88      	ldr	r3, [pc, #544]	@ (800259c <StartTaskControle+0x2ec>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2110      	movs	r1, #16
 800237e:	4618      	mov	r0, r3
 8002380:	f00b fc16 	bl	800dbb0 <osThreadFlagsSet>
 8002384:	e00c      	b.n	80023a0 <StartTaskControle+0xf0>
	  }
	  else if(MANUAL == ucControlMode)
 8002386:	f897 331f 	ldrb.w	r3, [r7, #799]	@ 0x31f
 800238a:	2b02      	cmp	r3, #2
 800238c:	d108      	bne.n	80023a0 <StartTaskControle+0xf0>
	  {
		ucControlMode = AUTOWARE;
 800238e:	2301      	movs	r3, #1
 8002390:	f887 331f 	strb.w	r3, [r7, #799]	@ 0x31f
		osThreadFlagsSet(TaskMicroAutowaHandle, 0x01);
 8002394:	4b81      	ldr	r3, [pc, #516]	@ (800259c <StartTaskControle+0x2ec>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	4618      	mov	r0, r3
 800239c:	f00b fc08 	bl	800dbb0 <osThreadFlagsSet>
	  }
	  uiFlags = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
	}

	if(AUTOWARE == ucControlMode)
 80023a6:	f897 331f 	ldrb.w	r3, [r7, #799]	@ 0x31f
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d159      	bne.n	8002462 <StartTaskControle+0x1b2>
	{
	  // WAIT for flag to sync xControlAction update
	  uiFlags = osThreadFlagsWait(0x100, osFlagsWaitAll, TIMEOUT_GET_CONTROL_ACTION);
 80023ae:	221e      	movs	r2, #30
 80023b0:	2101      	movs	r1, #1
 80023b2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80023b6:	f00b fc49 	bl	800dc4c <osThreadFlagsWait>
 80023ba:	f8c7 0318 	str.w	r0, [r7, #792]	@ 0x318
	  if(osFlagsErrorTimeout == uiFlags)
	  {
	  // Deu ruim timeout
	  }

	  if(0x100 == uiFlags)
 80023be:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80023c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023c6:	d14c      	bne.n	8002462 <StartTaskControle+0x1b2>
	  {
	    osMutexAcquire(MutexControlActionHandle, osWaitForever);
 80023c8:	4b75      	ldr	r3, [pc, #468]	@ (80025a0 <StartTaskControle+0x2f0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023d0:	4618      	mov	r0, r3
 80023d2:	f00b fd5d 	bl	800de90 <osMutexAcquire>
	    cTxMsgToCarla = cGetStringFromControlAction(xControlAction);
 80023d6:	4b73      	ldr	r3, [pc, #460]	@ (80025a4 <StartTaskControle+0x2f4>)
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	9200      	str	r2, [sp, #0]
 80023dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023de:	f000 fb71 	bl	8002ac4 <cGetStringFromControlAction>
 80023e2:	f8c7 02fc 	str.w	r0, [r7, #764]	@ 0x2fc
	    osMutexRelease(MutexControlActionHandle);
 80023e6:	4b6e      	ldr	r3, [pc, #440]	@ (80025a0 <StartTaskControle+0x2f0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f00b fd9b 	bl	800df26 <osMutexRelease>

	    // Send cTxMsgToCarla to CARLA
	    cubemx_transport_write(&xUart2DmaTransport, cTxMsgToCarla, strlen((char * ) cTxMsgToCarla), 0);
 80023f0:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 80023f4:	f7fd ff7e 	bl	80002f4 <strlen>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f107 000c 	add.w	r0, r7, #12
 80023fe:	2300      	movs	r3, #0
 8002400:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 8002404:	f7fe fd80 	bl	8000f08 <cubemx_transport_write>

	    // Recieve data from CARLA
	    do{
		  // Read xVehicleStatus
		  cubemx_transport_read(&xUart2DmaTransport, cDmaBuffer, UART2_DMA_BUFFER_SIZE, 1, 0); // Using timeout = 1 tick.
 8002408:	f507 7127 	add.w	r1, r7, #668	@ 0x29c
 800240c:	f107 000c 	add.w	r0, r7, #12
 8002410:	2300      	movs	r3, #0
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2301      	movs	r3, #1
 8002416:	2240      	movs	r2, #64	@ 0x40
 8002418:	f7fe fda8 	bl	8000f6c <cubemx_transport_read>

		  ucFlagFullMsg = ucGetVehicleStatusFromString(&xVehicleStatus, cDmaBuffer, &ucSmState);
 800241c:	f207 22ef 	addw	r2, r7, #751	@ 0x2ef
 8002420:	f507 7127 	add.w	r1, r7, #668	@ 0x29c
 8002424:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fbaf 	bl	8002b8c <ucGetVehicleStatusFromString>
 800242e:	4603      	mov	r3, r0
 8002430:	f887 32fb 	strb.w	r3, [r7, #763]	@ 0x2fb

	    } while(!ucFlagFullMsg); //NAO_ENCONTRAR_O_$ -> Precisa da mensagem inteira
 8002434:	f897 32fb 	ldrb.w	r3, [r7, #763]	@ 0x2fb
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0e5      	beq.n	8002408 <StartTaskControle+0x158>

	    osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 800243c:	4b5a      	ldr	r3, [pc, #360]	@ (80025a8 <StartTaskControle+0x2f8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002444:	4618      	mov	r0, r3
 8002446:	f00b fd23 	bl	800de90 <osMutexAcquire>
	    //xControlSignal
	    osMutexRelease(MutexControlSignalHandle);
 800244a:	4b57      	ldr	r3, [pc, #348]	@ (80025a8 <StartTaskControle+0x2f8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f00b fd69 	bl	800df26 <osMutexRelease>

	    osThreadFlagsSet(TaskMicroAutowaHandle, 0x100);
 8002454:	4b51      	ldr	r3, [pc, #324]	@ (800259c <StartTaskControle+0x2ec>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800245c:	4618      	mov	r0, r3
 800245e:	f00b fba7 	bl	800dbb0 <osThreadFlagsSet>
	  }
	}

    if(MANUAL == ucControlMode)
 8002462:	f897 331f 	ldrb.w	r3, [r7, #799]	@ 0x31f
 8002466:	2b02      	cmp	r3, #2
 8002468:	f47f af57 	bne.w	800231a <StartTaskControle+0x6a>
    {
      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 800246c:	4b4f      	ldr	r3, [pc, #316]	@ (80025ac <StartTaskControle+0x2fc>)
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8002474:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8002478:	f8d7 1314 	ldr.w	r1, [r7, #788]	@ 0x314
 800247c:	f000 faee 	bl	8002a5c <fGetJoyPostition>
 8002480:	ed87 0abd 	vstr	s0, [r7, #756]	@ 0x2f4
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 8002484:	4b49      	ldr	r3, [pc, #292]	@ (80025ac <StartTaskControle+0x2fc>)
 8002486:	6858      	ldr	r0, [r3, #4]
 8002488:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 800248c:	f8d7 2300 	ldr.w	r2, [r7, #768]	@ 0x300
 8002490:	f8d7 1308 	ldr.w	r1, [r7, #776]	@ 0x308
 8002494:	f000 fae2 	bl	8002a5c <fGetJoyPostition>
 8002498:	ed87 0abc 	vstr	s0, [r7, #752]	@ 0x2f0

      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 800249c:	4b40      	ldr	r3, [pc, #256]	@ (80025a0 <StartTaskControle+0x2f0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024a4:	4618      	mov	r0, r3
 80024a6:	f00b fcf3 	bl	800de90 <osMutexAcquire>
      xControlAction.fTrottle = (fJoyYAxis > 0) ? fJoyYAxis*MAX_TROTTLE : 0;
 80024aa:	edd7 7abc 	vldr	s15, [r7, #752]	@ 0x2f0
 80024ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	dd06      	ble.n	80024c6 <StartTaskControle+0x216>
 80024b8:	edd7 7abc 	vldr	s15, [r7, #752]	@ 0x2f0
 80024bc:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80025b0 <StartTaskControle+0x300>
 80024c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c4:	e001      	b.n	80024ca <StartTaskControle+0x21a>
 80024c6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80025b4 <StartTaskControle+0x304>
 80024ca:	4b36      	ldr	r3, [pc, #216]	@ (80025a4 <StartTaskControle+0x2f4>)
 80024cc:	edc3 7a00 	vstr	s15, [r3]
      xControlAction.fBrake = (fJoyYAxis < 0) ? fJoyYAxis*MAX_BRAKE : 0;
 80024d0:	edd7 7abc 	vldr	s15, [r7, #752]	@ 0x2f0
 80024d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	d506      	bpl.n	80024ec <StartTaskControle+0x23c>
 80024de:	edd7 7abc 	vldr	s15, [r7, #752]	@ 0x2f0
 80024e2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80025b0 <StartTaskControle+0x300>
 80024e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ea:	e001      	b.n	80024f0 <StartTaskControle+0x240>
 80024ec:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80025b4 <StartTaskControle+0x304>
 80024f0:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <StartTaskControle+0x2f4>)
 80024f2:	edc3 7a01 	vstr	s15, [r3, #4]
      xControlAction.fSteeringAngle = fJoyXAxis*MAX_STEERING_ANGLE;
 80024f6:	edd7 7abd 	vldr	s15, [r7, #756]	@ 0x2f4
 80024fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024fe:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8002590 <StartTaskControle+0x2e0>
 8002502:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002506:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800250a:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <StartTaskControle+0x2f4>)
 800250c:	edc3 7a02 	vstr	s15, [r3, #8]
      xControlAction.ucManualGearShift = 0;
 8002510:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <StartTaskControle+0x2f4>)
 8002512:	2200      	movs	r2, #0
 8002514:	739a      	strb	r2, [r3, #14]
      xControlAction.ucHandBrake = 0;
 8002516:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <StartTaskControle+0x2f4>)
 8002518:	2200      	movs	r2, #0
 800251a:	731a      	strb	r2, [r3, #12]
      xControlAction.ucReverse = 0;
 800251c:	4b21      	ldr	r3, [pc, #132]	@ (80025a4 <StartTaskControle+0x2f4>)
 800251e:	2200      	movs	r2, #0
 8002520:	735a      	strb	r2, [r3, #13]
      xControlAction.ucControlMode = MANUAL;
 8002522:	4b20      	ldr	r3, [pc, #128]	@ (80025a4 <StartTaskControle+0x2f4>)
 8002524:	2202      	movs	r2, #2
 8002526:	741a      	strb	r2, [r3, #16]
      xControlAction.ucGear = 1;
 8002528:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <StartTaskControle+0x2f4>)
 800252a:	2201      	movs	r2, #1
 800252c:	73da      	strb	r2, [r3, #15]

      cTxMsgToCarla = cGetStringFromControlAction(xControlAction);
 800252e:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <StartTaskControle+0x2f4>)
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	9200      	str	r2, [sp, #0]
 8002534:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002536:	f000 fac5 	bl	8002ac4 <cGetStringFromControlAction>
 800253a:	f8c7 02fc 	str.w	r0, [r7, #764]	@ 0x2fc

	  osMutexRelease(MutexControlActionHandle);
 800253e:	4b18      	ldr	r3, [pc, #96]	@ (80025a0 <StartTaskControle+0x2f0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f00b fcef 	bl	800df26 <osMutexRelease>

	  // Send cTxMsgToCarla to CARLA
	  cubemx_transport_write(&xUart2DmaTransport, cTxMsgToCarla, strlen((char * ) cTxMsgToCarla), 0);
 8002548:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 800254c:	f7fd fed2 	bl	80002f4 <strlen>
 8002550:	4602      	mov	r2, r0
 8002552:	f107 000c 	add.w	r0, r7, #12
 8002556:	2300      	movs	r3, #0
 8002558:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 800255c:	f7fe fcd4 	bl	8000f08 <cubemx_transport_write>
	  // Recieve data from CARLA


      // Empacota xControlSignal
      
      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8002560:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <StartTaskControle+0x2f8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002568:	4618      	mov	r0, r3
 800256a:	f00b fc91 	bl	800de90 <osMutexAcquire>
      // xControlSignal
      osMutexRelease(MutexControlSignalHandle);
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <StartTaskControle+0x2f8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f00b fcd7 	bl	800df26 <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, 0x100);
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <StartTaskControle+0x2ec>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002580:	4618      	mov	r0, r3
 8002582:	f00b fb15 	bl	800dbb0 <osThreadFlagsSet>

      // WAIT
      osDelay(20);
 8002586:	2014      	movs	r0, #20
 8002588:	f00b fbe1 	bl	800dd4e <osDelay>
	uiFlags = osThreadFlagsWait(0x11, osFlagsWaitAny, 0);
 800258c:	e6c5      	b.n	800231a <StartTaskControle+0x6a>
 800258e:	bf00      	nop
 8002590:	7af71723 	.word	0x7af71723
 8002594:	3fe0c152 	.word	0x3fe0c152
 8002598:	24032ad8 	.word	0x24032ad8
 800259c:	24032a60 	.word	0x24032a60
 80025a0:	24032a68 	.word	0x24032a68
 80025a4:	24032a48 	.word	0x24032a48
 80025a8:	24032a64 	.word	0x24032a64
 80025ac:	24032a70 	.word	0x24032a70
 80025b0:	42c80000 	.word	0x42c80000
 80025b4:	00000000 	.word	0x00000000

080025b8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025bc:	4b22      	ldr	r3, [pc, #136]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 80025be:	4a23      	ldr	r2, [pc, #140]	@ (800264c <MX_USART2_UART_Init+0x94>)
 80025c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025c2:	4b21      	ldr	r3, [pc, #132]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 80025c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 80025de:	220c      	movs	r2, #12
 80025e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025e2:	4b19      	ldr	r3, [pc, #100]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e8:	4b17      	ldr	r3, [pc, #92]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ee:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025f4:	4b14      	ldr	r3, [pc, #80]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025fa:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002600:	4811      	ldr	r0, [pc, #68]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 8002602:	f009 f8ed 	bl	800b7e0 <HAL_UART_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800260c:	f7ff f8b2 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002610:	2100      	movs	r1, #0
 8002612:	480d      	ldr	r0, [pc, #52]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 8002614:	f00b f8e2 	bl	800d7dc <HAL_UARTEx_SetTxFifoThreshold>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800261e:	f7ff f8a9 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002622:	2100      	movs	r1, #0
 8002624:	4808      	ldr	r0, [pc, #32]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 8002626:	f00b f917 	bl	800d858 <HAL_UARTEx_SetRxFifoThreshold>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002630:	f7ff f8a0 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002634:	4804      	ldr	r0, [pc, #16]	@ (8002648 <MX_USART2_UART_Init+0x90>)
 8002636:	f00b f898 	bl	800d76a <HAL_UARTEx_DisableFifoMode>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002640:	f7ff f898 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}
 8002648:	24032ad8 	.word	0x24032ad8
 800264c:	40004400 	.word	0x40004400

08002650 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002654:	4b22      	ldr	r3, [pc, #136]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 8002656:	4a23      	ldr	r2, [pc, #140]	@ (80026e4 <MX_USART3_UART_Init+0x94>)
 8002658:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800265a:	4b21      	ldr	r3, [pc, #132]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 800265c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002660:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002662:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002668:	4b1d      	ldr	r3, [pc, #116]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800266e:	4b1c      	ldr	r3, [pc, #112]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002674:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 8002676:	220c      	movs	r2, #12
 8002678:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267a:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002680:	4b17      	ldr	r3, [pc, #92]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002686:	4b16      	ldr	r3, [pc, #88]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800268c:	4b14      	ldr	r3, [pc, #80]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 800268e:	2200      	movs	r2, #0
 8002690:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002692:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 8002694:	2200      	movs	r2, #0
 8002696:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002698:	4811      	ldr	r0, [pc, #68]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 800269a:	f009 f8a1 	bl	800b7e0 <HAL_UART_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80026a4:	f7ff f866 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026a8:	2100      	movs	r1, #0
 80026aa:	480d      	ldr	r0, [pc, #52]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 80026ac:	f00b f896 	bl	800d7dc <HAL_UARTEx_SetTxFifoThreshold>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80026b6:	f7ff f85d 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ba:	2100      	movs	r1, #0
 80026bc:	4808      	ldr	r0, [pc, #32]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 80026be:	f00b f8cb 	bl	800d858 <HAL_UARTEx_SetRxFifoThreshold>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80026c8:	f7ff f854 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80026cc:	4804      	ldr	r0, [pc, #16]	@ (80026e0 <MX_USART3_UART_Init+0x90>)
 80026ce:	f00b f84c 	bl	800d76a <HAL_UARTEx_DisableFifoMode>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80026d8:	f7ff f84c 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	24032b6c 	.word	0x24032b6c
 80026e4:	40004800 	.word	0x40004800

080026e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b0be      	sub	sp, #248	@ 0xf8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002700:	f107 0320 	add.w	r3, r7, #32
 8002704:	22c0      	movs	r2, #192	@ 0xc0
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f01e fc57 	bl	8020fbc <memset>
  if(uartHandle->Instance==USART2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a67      	ldr	r2, [pc, #412]	@ (80028b0 <HAL_UART_MspInit+0x1c8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	f040 80db 	bne.w	80028d0 <HAL_UART_MspInit+0x1e8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800271a:	f04f 0202 	mov.w	r2, #2
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800272c:	f107 0320 	add.w	r3, r7, #32
 8002730:	4618      	mov	r0, r3
 8002732:	f006 f889 	bl	8008848 <HAL_RCCEx_PeriphCLKConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800273c:	f7ff f81a 	bl	8001774 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002740:	4b5c      	ldr	r3, [pc, #368]	@ (80028b4 <HAL_UART_MspInit+0x1cc>)
 8002742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002746:	4a5b      	ldr	r2, [pc, #364]	@ (80028b4 <HAL_UART_MspInit+0x1cc>)
 8002748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800274c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002750:	4b58      	ldr	r3, [pc, #352]	@ (80028b4 <HAL_UART_MspInit+0x1cc>)
 8002752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	4b55      	ldr	r3, [pc, #340]	@ (80028b4 <HAL_UART_MspInit+0x1cc>)
 8002760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002764:	4a53      	ldr	r2, [pc, #332]	@ (80028b4 <HAL_UART_MspInit+0x1cc>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800276e:	4b51      	ldr	r3, [pc, #324]	@ (80028b4 <HAL_UART_MspInit+0x1cc>)
 8002770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800277c:	4b4d      	ldr	r3, [pc, #308]	@ (80028b4 <HAL_UART_MspInit+0x1cc>)
 800277e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002782:	4a4c      	ldr	r2, [pc, #304]	@ (80028b4 <HAL_UART_MspInit+0x1cc>)
 8002784:	f043 0308 	orr.w	r3, r3, #8
 8002788:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800278c:	4b49      	ldr	r3, [pc, #292]	@ (80028b4 <HAL_UART_MspInit+0x1cc>)
 800278e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800279a:	2308      	movs	r3, #8
 800279c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027b2:	2307      	movs	r3, #7
 80027b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80027bc:	4619      	mov	r1, r3
 80027be:	483e      	ldr	r0, [pc, #248]	@ (80028b8 <HAL_UART_MspInit+0x1d0>)
 80027c0:	f004 fdfc 	bl	80073bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027c4:	2320      	movs	r3, #32
 80027c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027dc:	2307      	movs	r3, #7
 80027de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4834      	ldr	r0, [pc, #208]	@ (80028bc <HAL_UART_MspInit+0x1d4>)
 80027ea:	f004 fde7 	bl	80073bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 80027ee:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 80027f0:	4a34      	ldr	r2, [pc, #208]	@ (80028c4 <HAL_UART_MspInit+0x1dc>)
 80027f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80027f4:	4b32      	ldr	r3, [pc, #200]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 80027f6:	222b      	movs	r2, #43	@ 0x2b
 80027f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fa:	4b31      	ldr	r3, [pc, #196]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002800:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002806:	4b2e      	ldr	r3, [pc, #184]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 8002808:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800280c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280e:	4b2c      	ldr	r3, [pc, #176]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 8002810:	2200      	movs	r2, #0
 8002812:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002814:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800281a:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 800281c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002820:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002822:	4b27      	ldr	r3, [pc, #156]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 8002824:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002828:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800282a:	4b25      	ldr	r3, [pc, #148]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 800282c:	2200      	movs	r2, #0
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002830:	4823      	ldr	r0, [pc, #140]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 8002832:	f001 ff7b 	bl	800472c <HAL_DMA_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 800283c:	f7fe ff9a 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a1f      	ldr	r2, [pc, #124]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 8002844:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002848:	4a1d      	ldr	r2, [pc, #116]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 800284e:	4b1e      	ldr	r3, [pc, #120]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 8002850:	4a1e      	ldr	r2, [pc, #120]	@ (80028cc <HAL_UART_MspInit+0x1e4>)
 8002852:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002854:	4b1c      	ldr	r3, [pc, #112]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 8002856:	222c      	movs	r2, #44	@ 0x2c
 8002858:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800285a:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 800285c:	2240      	movs	r2, #64	@ 0x40
 800285e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002860:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002866:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 8002868:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800286c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800286e:	4b16      	ldr	r3, [pc, #88]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002874:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800287a:	4b13      	ldr	r3, [pc, #76]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 800287c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002880:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002882:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 8002884:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002888:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800288a:	4b0f      	ldr	r3, [pc, #60]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 800288c:	2200      	movs	r2, #0
 800288e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002890:	480d      	ldr	r0, [pc, #52]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 8002892:	f001 ff4b 	bl	800472c <HAL_DMA_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_UART_MspInit+0x1b8>
    {
      Error_Handler();
 800289c:	f7fe ff6a 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a09      	ldr	r2, [pc, #36]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 80028a4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80028a6:	4a08      	ldr	r2, [pc, #32]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80028ac:	e0c3      	b.n	8002a36 <HAL_UART_MspInit+0x34e>
 80028ae:	bf00      	nop
 80028b0:	40004400 	.word	0x40004400
 80028b4:	58024400 	.word	0x58024400
 80028b8:	58020000 	.word	0x58020000
 80028bc:	58020c00 	.word	0x58020c00
 80028c0:	24032c00 	.word	0x24032c00
 80028c4:	40020428 	.word	0x40020428
 80028c8:	24032c78 	.word	0x24032c78
 80028cc:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a5a      	ldr	r2, [pc, #360]	@ (8002a40 <HAL_UART_MspInit+0x358>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f040 80ad 	bne.w	8002a36 <HAL_UART_MspInit+0x34e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028dc:	f04f 0202 	mov.w	r2, #2
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ee:	f107 0320 	add.w	r3, r7, #32
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 ffa8 	bl	8008848 <HAL_RCCEx_PeriphCLKConfig>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 80028fe:	f7fe ff39 	bl	8001774 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002902:	4b50      	ldr	r3, [pc, #320]	@ (8002a44 <HAL_UART_MspInit+0x35c>)
 8002904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002908:	4a4e      	ldr	r2, [pc, #312]	@ (8002a44 <HAL_UART_MspInit+0x35c>)
 800290a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800290e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002912:	4b4c      	ldr	r3, [pc, #304]	@ (8002a44 <HAL_UART_MspInit+0x35c>)
 8002914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002918:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002920:	4b48      	ldr	r3, [pc, #288]	@ (8002a44 <HAL_UART_MspInit+0x35c>)
 8002922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002926:	4a47      	ldr	r2, [pc, #284]	@ (8002a44 <HAL_UART_MspInit+0x35c>)
 8002928:	f043 0308 	orr.w	r3, r3, #8
 800292c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002930:	4b44      	ldr	r3, [pc, #272]	@ (8002a44 <HAL_UART_MspInit+0x35c>)
 8002932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800293e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2300      	movs	r3, #0
 8002954:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002958:	2307      	movs	r3, #7
 800295a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800295e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002962:	4619      	mov	r1, r3
 8002964:	4838      	ldr	r0, [pc, #224]	@ (8002a48 <HAL_UART_MspInit+0x360>)
 8002966:	f004 fd29 	bl	80073bc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800296a:	4b38      	ldr	r3, [pc, #224]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 800296c:	4a38      	ldr	r2, [pc, #224]	@ (8002a50 <HAL_UART_MspInit+0x368>)
 800296e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002970:	4b36      	ldr	r3, [pc, #216]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 8002972:	222d      	movs	r2, #45	@ 0x2d
 8002974:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002976:	4b35      	ldr	r3, [pc, #212]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800297c:	4b33      	ldr	r3, [pc, #204]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002982:	4b32      	ldr	r3, [pc, #200]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 8002984:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002988:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800298a:	4b30      	ldr	r3, [pc, #192]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002990:	4b2e      	ldr	r3, [pc, #184]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002996:	4b2d      	ldr	r3, [pc, #180]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 8002998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800299c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800299e:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 80029a0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80029a4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029a6:	4b29      	ldr	r3, [pc, #164]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80029ac:	4827      	ldr	r0, [pc, #156]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 80029ae:	f001 febd 	bl	800472c <HAL_DMA_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_UART_MspInit+0x2d4>
      Error_Handler();
 80029b8:	f7fe fedc 	bl	8001774 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a23      	ldr	r2, [pc, #140]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 80029c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80029c4:	4a21      	ldr	r2, [pc, #132]	@ (8002a4c <HAL_UART_MspInit+0x364>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80029ca:	4b22      	ldr	r3, [pc, #136]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 80029cc:	4a22      	ldr	r2, [pc, #136]	@ (8002a58 <HAL_UART_MspInit+0x370>)
 80029ce:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80029d0:	4b20      	ldr	r3, [pc, #128]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 80029d2:	222e      	movs	r2, #46	@ 0x2e
 80029d4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 80029d8:	2240      	movs	r2, #64	@ 0x40
 80029da:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 80029e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029f0:	4b18      	ldr	r3, [pc, #96]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80029f6:	4b17      	ldr	r3, [pc, #92]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029fc:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 80029fe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002a02:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a04:	4b13      	ldr	r3, [pc, #76]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002a0a:	4812      	ldr	r0, [pc, #72]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 8002a0c:	f001 fe8e 	bl	800472c <HAL_DMA_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_UART_MspInit+0x332>
      Error_Handler();
 8002a16:	f7fe fead 	bl	8001774 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 8002a1e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a20:	4a0c      	ldr	r2, [pc, #48]	@ (8002a54 <HAL_UART_MspInit+0x36c>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2108      	movs	r1, #8
 8002a2a:	2027      	movs	r0, #39	@ 0x27
 8002a2c:	f001 fe56 	bl	80046dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a30:	2027      	movs	r0, #39	@ 0x27
 8002a32:	f001 fe6d 	bl	8004710 <HAL_NVIC_EnableIRQ>
}
 8002a36:	bf00      	nop
 8002a38:	37f8      	adds	r7, #248	@ 0xf8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40004800 	.word	0x40004800
 8002a44:	58024400 	.word	0x58024400
 8002a48:	58020c00 	.word	0x58020c00
 8002a4c:	24032cf0 	.word	0x24032cf0
 8002a50:	40020010 	.word	0x40020010
 8002a54:	24032d68 	.word	0x24032d68
 8002a58:	40020028 	.word	0x40020028

08002a5c <fGetJoyPostition>:
  *         uiRefMax: Analog value for axis maximum limit.
  *         uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  return (uiValue - uiRef0 > 0) ? (uiValue - uiRef0)/((float)(uiRefMax - uiRef0)) : (uiValue - uiRef0)/((float)(uiRef0 - uiRefMin));
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d010      	beq.n	8002a94 <fGetJoyPostition+0x38>
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a92:	e00f      	b.n	8002ab4 <fGetJoyPostition+0x58>
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8002ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <cGetStringFromControlAction>:


unsigned char * cGetStringFromControlAction(control_action xControlActionTx)
{
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac8:	b09b      	sub	sp, #108	@ 0x6c
 8002aca:	af0e      	add	r7, sp, #56	@ 0x38
 8002acc:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8002ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  unsigned char * tx_msg = NULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  float_bytes xThrottle;
  float_bytes xSteering;
  float_bytes xBrake;

  xThrottle.fFloat = xControlActionTx.fTrottle;
 8002ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  xSteering.fFloat = xControlActionTx.fSteeringAngle;
 8002adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
  xBrake.fFloat = xControlActionTx.fBrake;
 8002ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ae2:	623b      	str	r3, [r7, #32]

  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
		  xThrottle.ucBytes[0], xThrottle.ucBytes[1], xThrottle.ucBytes[2], xThrottle.ucBytes[3],
 8002ae4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002ae8:	469c      	mov	ip, r3
		  xThrottle.ucBytes[0], xThrottle.ucBytes[1], xThrottle.ucBytes[2], xThrottle.ucBytes[3],
 8002aea:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002aee:	469e      	mov	lr, r3
		  xThrottle.ucBytes[0], xThrottle.ucBytes[1], xThrottle.ucBytes[2], xThrottle.ucBytes[3],
 8002af0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002af4:	4618      	mov	r0, r3
		  xThrottle.ucBytes[0], xThrottle.ucBytes[1], xThrottle.ucBytes[2], xThrottle.ucBytes[3],
 8002af6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002afa:	461c      	mov	r4, r3
		  xSteering.ucBytes[0], xSteering.ucBytes[1], xSteering.ucBytes[2], xSteering.ucBytes[3],
 8002afc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002b00:	461d      	mov	r5, r3
		  xSteering.ucBytes[0], xSteering.ucBytes[1], xSteering.ucBytes[2], xSteering.ucBytes[3],
 8002b02:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002b06:	461e      	mov	r6, r3
		  xSteering.ucBytes[0], xSteering.ucBytes[1], xSteering.ucBytes[2], xSteering.ucBytes[3],
 8002b08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002b0c:	61fb      	str	r3, [r7, #28]
		  xSteering.ucBytes[0], xSteering.ucBytes[1], xSteering.ucBytes[2], xSteering.ucBytes[3],
 8002b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002b12:	61bb      	str	r3, [r7, #24]
		  xBrake.ucBytes[0], xBrake.ucBytes[1], xBrake.ucBytes[2], xBrake.ucBytes[3],
 8002b14:	f897 3020 	ldrb.w	r3, [r7, #32]
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002b18:	617b      	str	r3, [r7, #20]
		  xBrake.ucBytes[0], xBrake.ucBytes[1], xBrake.ucBytes[2], xBrake.ucBytes[3],
 8002b1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002b1e:	613b      	str	r3, [r7, #16]
		  xBrake.ucBytes[0], xBrake.ucBytes[1], xBrake.ucBytes[2], xBrake.ucBytes[3],
 8002b20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002b24:	60fb      	str	r3, [r7, #12]
		  xBrake.ucBytes[0], xBrake.ucBytes[1], xBrake.ucBytes[2], xBrake.ucBytes[3],
 8002b26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002b2a:	60bb      	str	r3, [r7, #8]
		  xControlActionTx.ucHandBrake,
 8002b2c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002b30:	607b      	str	r3, [r7, #4]
		  xControlActionTx.ucReverse,
 8002b32:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002b36:	4619      	mov	r1, r3
		  xControlActionTx.ucGear,
 8002b38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002b3c:	461a      	mov	r2, r3
		  xControlActionTx.ucManualGearShift);
 8002b3e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
  sprintf((char * )tx_msg, "#T%c%c%c%cS%c%c%c%cB%c%c%c%cH%cR%cG%cM%c$",
 8002b42:	930d      	str	r3, [sp, #52]	@ 0x34
 8002b44:	920c      	str	r2, [sp, #48]	@ 0x30
 8002b46:	910b      	str	r1, [sp, #44]	@ 0x2c
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	920a      	str	r2, [sp, #40]	@ 0x28
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	9208      	str	r2, [sp, #32]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	9207      	str	r2, [sp, #28]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	9206      	str	r2, [sp, #24]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	9205      	str	r2, [sp, #20]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	9304      	str	r3, [sp, #16]
 8002b64:	9603      	str	r6, [sp, #12]
 8002b66:	9502      	str	r5, [sp, #8]
 8002b68:	9401      	str	r4, [sp, #4]
 8002b6a:	9000      	str	r0, [sp, #0]
 8002b6c:	4673      	mov	r3, lr
 8002b6e:	4662      	mov	r2, ip
 8002b70:	4905      	ldr	r1, [pc, #20]	@ (8002b88 <cGetStringFromControlAction+0xc4>)
 8002b72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b74:	f01e f8c8 	bl	8020d08 <siprintf>

  return tx_msg;
 8002b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3734      	adds	r7, #52	@ 0x34
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8002b84:	b004      	add	sp, #16
 8002b86:	4770      	bx	lr
 8002b88:	080220fc 	.word	0x080220fc

08002b8c <ucGetVehicleStatusFromString>:


unsigned char ucGetVehicleStatusFromString(vehicle_status * xVehicleStatusRx, unsigned char * ucStringRx, unsigned char * ucSmState)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]

  for(int i = 0; i < strlen((char * )ucStringRx); i++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	e151      	b.n	8002e42 <ucGetVehicleStatusFromString+0x2b6>
  {
    switch (* ucSmState)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b28      	cmp	r3, #40	@ 0x28
 8002ba4:	f200 8147 	bhi.w	8002e36 <ucGetVehicleStatusFromString+0x2aa>
 8002ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb0 <ucGetVehicleStatusFromString+0x24>)
 8002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002c55 	.word	0x08002c55
 8002bb4:	08002c6b 	.word	0x08002c6b
 8002bb8:	08002e37 	.word	0x08002e37
 8002bbc:	08002e37 	.word	0x08002e37
 8002bc0:	08002e37 	.word	0x08002e37
 8002bc4:	08002e37 	.word	0x08002e37
 8002bc8:	08002e37 	.word	0x08002e37
 8002bcc:	08002e37 	.word	0x08002e37
 8002bd0:	08002e37 	.word	0x08002e37
 8002bd4:	08002e37 	.word	0x08002e37
 8002bd8:	08002d33 	.word	0x08002d33
 8002bdc:	08002d47 	.word	0x08002d47
 8002be0:	08002d5b 	.word	0x08002d5b
 8002be4:	08002d6f 	.word	0x08002d6f
 8002be8:	08002e37 	.word	0x08002e37
 8002bec:	08002e37 	.word	0x08002e37
 8002bf0:	08002e37 	.word	0x08002e37
 8002bf4:	08002e37 	.word	0x08002e37
 8002bf8:	08002e37 	.word	0x08002e37
 8002bfc:	08002e37 	.word	0x08002e37
 8002c00:	08002d83 	.word	0x08002d83
 8002c04:	08002d97 	.word	0x08002d97
 8002c08:	08002dab 	.word	0x08002dab
 8002c0c:	08002dbf 	.word	0x08002dbf
 8002c10:	08002e37 	.word	0x08002e37
 8002c14:	08002e37 	.word	0x08002e37
 8002c18:	08002e37 	.word	0x08002e37
 8002c1c:	08002e37 	.word	0x08002e37
 8002c20:	08002e37 	.word	0x08002e37
 8002c24:	08002e37 	.word	0x08002e37
 8002c28:	08002dd3 	.word	0x08002dd3
 8002c2c:	08002de7 	.word	0x08002de7
 8002c30:	08002dfb 	.word	0x08002dfb
 8002c34:	08002e0f 	.word	0x08002e0f
 8002c38:	08002e37 	.word	0x08002e37
 8002c3c:	08002e37 	.word	0x08002e37
 8002c40:	08002e37 	.word	0x08002e37
 8002c44:	08002e37 	.word	0x08002e37
 8002c48:	08002e37 	.word	0x08002e37
 8002c4c:	08002e37 	.word	0x08002e37
 8002c50:	08002e23 	.word	0x08002e23
    {
      case 0:
        if('#' == ucStringRx[i])
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4413      	add	r3, r2
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b23      	cmp	r3, #35	@ 0x23
 8002c5e:	f040 80ec 	bne.w	8002e3a <ucGetVehicleStatusFromString+0x2ae>
        {
          * ucSmState = 1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002c68:	e0e7      	b.n	8002e3a <ucGetVehicleStatusFromString+0x2ae>
      
      case 1:
        switch (ucStringRx[i])
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	3b24      	subs	r3, #36	@ 0x24
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d85a      	bhi.n	8002d2e <ucGetVehicleStatusFromString+0x1a2>
 8002c78:	a201      	add	r2, pc, #4	@ (adr r2, 8002c80 <ucGetVehicleStatusFromString+0xf4>)
 8002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7e:	bf00      	nop
 8002c80:	08002d25 	.word	0x08002d25
 8002c84:	08002d2f 	.word	0x08002d2f
 8002c88:	08002d2f 	.word	0x08002d2f
 8002c8c:	08002d2f 	.word	0x08002d2f
 8002c90:	08002d2f 	.word	0x08002d2f
 8002c94:	08002d2f 	.word	0x08002d2f
 8002c98:	08002d2f 	.word	0x08002d2f
 8002c9c:	08002d2f 	.word	0x08002d2f
 8002ca0:	08002d2f 	.word	0x08002d2f
 8002ca4:	08002d2f 	.word	0x08002d2f
 8002ca8:	08002d2f 	.word	0x08002d2f
 8002cac:	08002d2f 	.word	0x08002d2f
 8002cb0:	08002d2f 	.word	0x08002d2f
 8002cb4:	08002d2f 	.word	0x08002d2f
 8002cb8:	08002d2f 	.word	0x08002d2f
 8002cbc:	08002d2f 	.word	0x08002d2f
 8002cc0:	08002d2f 	.word	0x08002d2f
 8002cc4:	08002d2f 	.word	0x08002d2f
 8002cc8:	08002d2f 	.word	0x08002d2f
 8002ccc:	08002d2f 	.word	0x08002d2f
 8002cd0:	08002d2f 	.word	0x08002d2f
 8002cd4:	08002d2f 	.word	0x08002d2f
 8002cd8:	08002d2f 	.word	0x08002d2f
 8002cdc:	08002d2f 	.word	0x08002d2f
 8002ce0:	08002d2f 	.word	0x08002d2f
 8002ce4:	08002d2f 	.word	0x08002d2f
 8002ce8:	08002d2f 	.word	0x08002d2f
 8002cec:	08002d2f 	.word	0x08002d2f
 8002cf0:	08002d2f 	.word	0x08002d2f
 8002cf4:	08002d05 	.word	0x08002d05
 8002cf8:	08002d0d 	.word	0x08002d0d
 8002cfc:	08002d15 	.word	0x08002d15
 8002d00:	08002d1d 	.word	0x08002d1d
        {
          case 'A':
            * ucSmState = 10;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	220a      	movs	r2, #10
 8002d08:	701a      	strb	r2, [r3, #0]
            break;
 8002d0a:	e011      	b.n	8002d30 <ucGetVehicleStatusFromString+0x1a4>

          case 'B':
            * ucSmState = 20;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2214      	movs	r2, #20
 8002d10:	701a      	strb	r2, [r3, #0]
            break;
 8002d12:	e00d      	b.n	8002d30 <ucGetVehicleStatusFromString+0x1a4>

          case 'C':
            * ucSmState = 30;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	221e      	movs	r2, #30
 8002d18:	701a      	strb	r2, [r3, #0]
            break;
 8002d1a:	e009      	b.n	8002d30 <ucGetVehicleStatusFromString+0x1a4>

          case 'D':
            * ucSmState = 40;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2228      	movs	r2, #40	@ 0x28
 8002d20:	701a      	strb	r2, [r3, #0]
            break;
 8002d22:	e005      	b.n	8002d30 <ucGetVehicleStatusFromString+0x1a4>

          case '$':
            * ucSmState = 0;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
            return 1;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e092      	b.n	8002e54 <ucGetVehicleStatusFromString+0x2c8>
            break;
                
          default:
              break;
 8002d2e:	bf00      	nop
        }
        break;
 8002d30:	e084      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 10:
        xVehicleStatusRx->fLongSpeed.ucBytes[0] = ucStringRx[i];
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	4413      	add	r3, r2
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	701a      	strb	r2, [r3, #0]
        * ucSmState = 11;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	220b      	movs	r2, #11
 8002d42:	701a      	strb	r2, [r3, #0]
        break;
 8002d44:	e07a      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 11:
        xVehicleStatusRx->fLongSpeed.ucBytes[1] = ucStringRx[i];
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	705a      	strb	r2, [r3, #1]
        * ucSmState = 12;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	220c      	movs	r2, #12
 8002d56:	701a      	strb	r2, [r3, #0]
        break;
 8002d58:	e070      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 12:
        xVehicleStatusRx->fLongSpeed.ucBytes[2] = ucStringRx[i];
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	4413      	add	r3, r2
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	709a      	strb	r2, [r3, #2]
        * ucSmState = 13;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	220d      	movs	r2, #13
 8002d6a:	701a      	strb	r2, [r3, #0]
        break;
 8002d6c:	e066      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 13:
        xVehicleStatusRx->fLongSpeed.ucBytes[3] = ucStringRx[i];
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	4413      	add	r3, r2
 8002d74:	781a      	ldrb	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	70da      	strb	r2, [r3, #3]
        * ucSmState = 1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
        break;
 8002d80:	e05c      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 20:
        xVehicleStatusRx->fLatSpeed.ucBytes[0] = ucStringRx[i];
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	4413      	add	r3, r2
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	711a      	strb	r2, [r3, #4]
        * ucSmState = 21;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2215      	movs	r2, #21
 8002d92:	701a      	strb	r2, [r3, #0]
        break;
 8002d94:	e052      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 21:
        xVehicleStatusRx->fLatSpeed.ucBytes[1] = ucStringRx[i];
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	781a      	ldrb	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	715a      	strb	r2, [r3, #5]
        * ucSmState = 22;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2216      	movs	r2, #22
 8002da6:	701a      	strb	r2, [r3, #0]
        break;
 8002da8:	e048      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 22:
        xVehicleStatusRx->fLatSpeed.ucBytes[2] = ucStringRx[i];
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	4413      	add	r3, r2
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	719a      	strb	r2, [r3, #6]
        * ucSmState = 23;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2217      	movs	r2, #23
 8002dba:	701a      	strb	r2, [r3, #0]
        break;
 8002dbc:	e03e      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 23:
        xVehicleStatusRx->fLatSpeed.ucBytes[3] = ucStringRx[i];
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	781a      	ldrb	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	71da      	strb	r2, [r3, #7]
        * ucSmState = 1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
        break;
 8002dd0:	e034      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 30:
        xVehicleStatusRx->fLatSpeed.ucBytes[0] = ucStringRx[i];
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	781a      	ldrb	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	711a      	strb	r2, [r3, #4]
        * ucSmState = 31;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	221f      	movs	r2, #31
 8002de2:	701a      	strb	r2, [r3, #0]
        break;
 8002de4:	e02a      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 31:
        xVehicleStatusRx->fHeadingRate.ucBytes[1] = ucStringRx[i];
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	4413      	add	r3, r2
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	725a      	strb	r2, [r3, #9]
        * ucSmState = 32;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	701a      	strb	r2, [r3, #0]
        break;
 8002df8:	e020      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 32:
        xVehicleStatusRx->fHeadingRate.ucBytes[2] = ucStringRx[i];
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	4413      	add	r3, r2
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	729a      	strb	r2, [r3, #10]
        * ucSmState = 33;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2221      	movs	r2, #33	@ 0x21
 8002e0a:	701a      	strb	r2, [r3, #0]
        break;
 8002e0c:	e016      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 33:
        xVehicleStatusRx->fHeadingRate.ucBytes[3] = ucStringRx[i];
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	4413      	add	r3, r2
 8002e14:	781a      	ldrb	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	72da      	strb	r2, [r3, #11]
        * ucSmState = 1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
        break;
 8002e20:	e00c      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>

      case 40:
        xVehicleStatusRx->ucGear = ucStringRx[i];
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	4413      	add	r3, r2
 8002e28:	781a      	ldrb	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	731a      	strb	r2, [r3, #12]
        * ucSmState = 1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	701a      	strb	r2, [r3, #0]
        break;
 8002e34:	e002      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>


      default:
          break;
 8002e36:	bf00      	nop
 8002e38:	e000      	b.n	8002e3c <ucGetVehicleStatusFromString+0x2b0>
        break;
 8002e3a:	bf00      	nop
  for(int i = 0; i < strlen((char * )ucStringRx); i++)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	68b8      	ldr	r0, [r7, #8]
 8002e44:	f7fd fa56 	bl	80002f4 <strlen>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f63f aea6 	bhi.w	8002b9e <ucGetVehicleStatusFromString+0x12>
    }
  }
  return 0;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e60:	f7ff f99e 	bl	80021a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e64:	480c      	ldr	r0, [pc, #48]	@ (8002e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e66:	490d      	ldr	r1, [pc, #52]	@ (8002e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e6c:	e002      	b.n	8002e74 <LoopCopyDataInit>

08002e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e72:	3304      	adds	r3, #4

08002e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e78:	d3f9      	bcc.n	8002e6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e80:	e001      	b.n	8002e86 <LoopFillZerobss>

08002e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e84:	3204      	adds	r2, #4

08002e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e88:	d3fb      	bcc.n	8002e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e8a:	f01e f987 	bl	802119c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e8e:	f7fe fb8d 	bl	80015ac <main>
  bx  lr
 8002e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e9c:	240013f0 	.word	0x240013f0
  ldr r2, =_sidata
 8002ea0:	08024824 	.word	0x08024824
  ldr r2, =_sbss
 8002ea4:	240013f0 	.word	0x240013f0
  ldr r4, =_ebss
 8002ea8:	24069778 	.word	0x24069778

08002eac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eac:	e7fe      	b.n	8002eac <ADC3_IRQHandler>
	...

08002eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb6:	2003      	movs	r0, #3
 8002eb8:	f001 fc05 	bl	80046c6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ebc:	f005 faac 	bl	8008418 <HAL_RCC_GetSysClockFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_Init+0x68>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	4913      	ldr	r1, [pc, #76]	@ (8002f1c <HAL_Init+0x6c>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eda:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <HAL_Init+0x68>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8002f1c <HAL_Init+0x6c>)
 8002ee4:	5cd3      	ldrb	r3, [r2, r3]
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8002f20 <HAL_Init+0x70>)
 8002ef2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f24 <HAL_Init+0x74>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002efa:	200f      	movs	r0, #15
 8002efc:	f7fe ffd2 	bl	8001ea4 <HAL_InitTick>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e002      	b.n	8002f10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f0a:	f7fe ffad 	bl	8001e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	080221c4 	.word	0x080221c4
 8002f20:	24000008 	.word	0x24000008
 8002f24:	24000004 	.word	0x24000004

08002f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_IncTick+0x20>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <HAL_IncTick+0x24>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	4a04      	ldr	r2, [pc, #16]	@ (8002f4c <HAL_IncTick+0x24>)
 8002f3a:	6013      	str	r3, [r2, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	24000010 	.word	0x24000010
 8002f4c:	24032de0 	.word	0x24032de0

08002f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return uwTick;
 8002f54:	4b03      	ldr	r3, [pc, #12]	@ (8002f64 <HAL_GetTick+0x14>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	24032de0 	.word	0x24032de0

08002f68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <HAL_GetREVID+0x14>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0c1b      	lsrs	r3, r3, #16
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	5c001000 	.word	0x5c001000

08002f80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3360      	adds	r3, #96	@ 0x60
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	430b      	orrs	r3, r1
 8003016:	431a      	orrs	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	431a      	orrs	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	611a      	str	r2, [r3, #16]
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800305a:	b480      	push	{r7}
 800305c:	b087      	sub	sp, #28
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3360      	adds	r3, #96	@ 0x60
 800306a:	461a      	mov	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	431a      	orrs	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	601a      	str	r2, [r3, #0]
  }
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b087      	sub	sp, #28
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3330      	adds	r3, #48	@ 0x30
 80030c6:	461a      	mov	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	4413      	add	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	211f      	movs	r1, #31
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	401a      	ands	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0e9b      	lsrs	r3, r3, #26
 80030ee:	f003 011f 	and.w	r1, r3, #31
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	431a      	orrs	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f023 0203 	bic.w	r2, r3, #3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	60da      	str	r2, [r3, #12]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3314      	adds	r3, #20
 8003144:	461a      	mov	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	0e5b      	lsrs	r3, r3, #25
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	4413      	add	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	0d1b      	lsrs	r3, r3, #20
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	2107      	movs	r1, #7
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	401a      	ands	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	0d1b      	lsrs	r3, r3, #20
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	fa01 f303 	lsl.w	r3, r1, r3
 8003178:	431a      	orrs	r2, r3
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800317e:	bf00      	nop
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031a4:	43db      	mvns	r3, r3
 80031a6:	401a      	ands	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0318 	and.w	r3, r3, #24
 80031ae:	4908      	ldr	r1, [pc, #32]	@ (80031d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031b0:	40d9      	lsrs	r1, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	400b      	ands	r3, r1
 80031b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031ba:	431a      	orrs	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	000fffff 	.word	0x000fffff

080031d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 031f 	and.w	r3, r3, #31
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <LL_ADC_DisableDeepPowerDown+0x20>)
 80031fe:	4013      	ands	r3, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6093      	str	r3, [r2, #8]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	5fffffc0 	.word	0x5fffffc0

08003214 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003228:	d101      	bne.n	800322e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <LL_ADC_EnableInternalRegulator+0x24>)
 800324a:	4013      	ands	r3, r2
 800324c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	6fffffc0 	.word	0x6fffffc0

08003264 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003278:	d101      	bne.n	800327e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <LL_ADC_Enable+0x24>)
 800329a:	4013      	ands	r3, r2
 800329c:	f043 0201 	orr.w	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	7fffffc0 	.word	0x7fffffc0

080032b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <LL_ADC_IsEnabled+0x18>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <LL_ADC_IsEnabled+0x1a>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <LL_ADC_REG_StartConversion+0x24>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	f043 0204 	orr.w	r2, r3, #4
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	7fffffc0 	.word	0x7fffffc0

08003304 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b04      	cmp	r3, #4
 8003316:	d101      	bne.n	800331c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b08      	cmp	r3, #8
 800333c:	d101      	bne.n	8003342 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b089      	sub	sp, #36	@ 0x24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800335c:	2300      	movs	r3, #0
 800335e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e18f      	b.n	800368a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7fd fa6b 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff3f 	bl	8003214 <LL_ADC_IsDeepPowerDownEnabled>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff25 	bl	80031f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ff5a 	bl	8003264 <LL_ADC_IsInternalRegulatorEnabled>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d114      	bne.n	80033e0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff3e 	bl	800323c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033c0:	4b87      	ldr	r3, [pc, #540]	@ (80035e0 <HAL_ADC_Init+0x290>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	4a87      	ldr	r2, [pc, #540]	@ (80035e4 <HAL_ADC_Init+0x294>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	3301      	adds	r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033d2:	e002      	b.n	80033da <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f9      	bne.n	80033d4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff3d 	bl	8003264 <LL_ADC_IsInternalRegulatorEnabled>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10d      	bne.n	800340c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f4:	f043 0210 	orr.w	r2, r3, #16
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003400:	f043 0201 	orr.w	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff77 	bl	8003304 <LL_ADC_REG_IsConversionOngoing>
 8003416:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	f040 8129 	bne.w	8003678 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f040 8125 	bne.w	8003678 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003432:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003436:	f043 0202 	orr.w	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff ff36 	bl	80032b4 <LL_ADC_IsEnabled>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d136      	bne.n	80034bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a65      	ldr	r2, [pc, #404]	@ (80035e8 <HAL_ADC_Init+0x298>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_ADC_Init+0x112>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a63      	ldr	r2, [pc, #396]	@ (80035ec <HAL_ADC_Init+0x29c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10e      	bne.n	8003480 <HAL_ADC_Init+0x130>
 8003462:	4861      	ldr	r0, [pc, #388]	@ (80035e8 <HAL_ADC_Init+0x298>)
 8003464:	f7ff ff26 	bl	80032b4 <LL_ADC_IsEnabled>
 8003468:	4604      	mov	r4, r0
 800346a:	4860      	ldr	r0, [pc, #384]	@ (80035ec <HAL_ADC_Init+0x29c>)
 800346c:	f7ff ff22 	bl	80032b4 <LL_ADC_IsEnabled>
 8003470:	4603      	mov	r3, r0
 8003472:	4323      	orrs	r3, r4
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e008      	b.n	8003492 <HAL_ADC_Init+0x142>
 8003480:	485b      	ldr	r0, [pc, #364]	@ (80035f0 <HAL_ADC_Init+0x2a0>)
 8003482:	f7ff ff17 	bl	80032b4 <LL_ADC_IsEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d012      	beq.n	80034bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a53      	ldr	r2, [pc, #332]	@ (80035e8 <HAL_ADC_Init+0x298>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d004      	beq.n	80034aa <HAL_ADC_Init+0x15a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a51      	ldr	r2, [pc, #324]	@ (80035ec <HAL_ADC_Init+0x29c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_ADC_Init+0x15e>
 80034aa:	4a52      	ldr	r2, [pc, #328]	@ (80035f4 <HAL_ADC_Init+0x2a4>)
 80034ac:	e000      	b.n	80034b0 <HAL_ADC_Init+0x160>
 80034ae:	4a52      	ldr	r2, [pc, #328]	@ (80035f8 <HAL_ADC_Init+0x2a8>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4619      	mov	r1, r3
 80034b6:	4610      	mov	r0, r2
 80034b8:	f7ff fd62 	bl	8002f80 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80034bc:	f7ff fd54 	bl	8002f68 <HAL_GetREVID>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d914      	bls.n	80034f4 <HAL_ADC_Init+0x1a4>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d110      	bne.n	80034f4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7d5b      	ldrb	r3, [r3, #21]
 80034d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80034e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	7f1b      	ldrb	r3, [r3, #28]
 80034e8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80034ea:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034ec:	f043 030c 	orr.w	r3, r3, #12
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	e00d      	b.n	8003510 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	7d5b      	ldrb	r3, [r3, #21]
 80034f8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034fe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003504:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	7f1b      	ldrb	r3, [r3, #28]
 800350a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7f1b      	ldrb	r3, [r3, #28]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d106      	bne.n	8003526 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	3b01      	subs	r3, #1
 800351e:	045b      	lsls	r3, r3, #17
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	4b2c      	ldr	r3, [pc, #176]	@ (80035fc <HAL_ADC_Init+0x2ac>)
 800354a:	4013      	ands	r3, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	69b9      	ldr	r1, [r7, #24]
 8003552:	430b      	orrs	r3, r1
 8003554:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fed2 	bl	8003304 <LL_ADC_REG_IsConversionOngoing>
 8003560:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fedf 	bl	800332a <LL_ADC_INJ_IsConversionOngoing>
 800356c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d15f      	bne.n	8003634 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d15c      	bne.n	8003634 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	7d1b      	ldrb	r3, [r3, #20]
 800357e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	4b1c      	ldr	r3, [pc, #112]	@ (8003600 <HAL_ADC_Init+0x2b0>)
 8003590:	4013      	ands	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	69b9      	ldr	r1, [r7, #24]
 8003598:	430b      	orrs	r3, r1
 800359a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d130      	bne.n	8003608 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	4b14      	ldr	r3, [pc, #80]	@ (8003604 <HAL_ADC_Init+0x2b4>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035ba:	3a01      	subs	r2, #1
 80035bc:	0411      	lsls	r1, r2, #16
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035c2:	4311      	orrs	r1, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80035c8:	4311      	orrs	r1, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035ce:	430a      	orrs	r2, r1
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	611a      	str	r2, [r3, #16]
 80035dc:	e01c      	b.n	8003618 <HAL_ADC_Init+0x2c8>
 80035de:	bf00      	nop
 80035e0:	24000004 	.word	0x24000004
 80035e4:	053e2d63 	.word	0x053e2d63
 80035e8:	40022000 	.word	0x40022000
 80035ec:	40022100 	.word	0x40022100
 80035f0:	58026000 	.word	0x58026000
 80035f4:	40022300 	.word	0x40022300
 80035f8:	58026300 	.word	0x58026300
 80035fc:	fff0c003 	.word	0xfff0c003
 8003600:	ffffbffc 	.word	0xffffbffc
 8003604:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fd8c 	bl	800414c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10c      	bne.n	8003656 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	f023 010f 	bic.w	r1, r3, #15
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	1e5a      	subs	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
 8003654:	e007      	b.n	8003666 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 020f 	bic.w	r2, r2, #15
 8003664:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	f043 0201 	orr.w	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	655a      	str	r2, [r3, #84]	@ 0x54
 8003676:	e007      	b.n	8003688 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367c:	f043 0210 	orr.w	r2, r3, #16
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003688:	7ffb      	ldrb	r3, [r7, #31]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3724      	adds	r7, #36	@ 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd90      	pop	{r4, r7, pc}
 8003692:	bf00      	nop

08003694 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a55      	ldr	r2, [pc, #340]	@ (80037fc <HAL_ADC_Start_DMA+0x168>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_ADC_Start_DMA+0x20>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a54      	ldr	r2, [pc, #336]	@ (8003800 <HAL_ADC_Start_DMA+0x16c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_Start_DMA+0x24>
 80036b4:	4b53      	ldr	r3, [pc, #332]	@ (8003804 <HAL_ADC_Start_DMA+0x170>)
 80036b6:	e000      	b.n	80036ba <HAL_ADC_Start_DMA+0x26>
 80036b8:	4b53      	ldr	r3, [pc, #332]	@ (8003808 <HAL_ADC_Start_DMA+0x174>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fd8a 	bl	80031d4 <LL_ADC_GetMultimode>
 80036c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fe1c 	bl	8003304 <LL_ADC_REG_IsConversionOngoing>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f040 808c 	bne.w	80037ec <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_ADC_Start_DMA+0x4e>
 80036de:	2302      	movs	r3, #2
 80036e0:	e087      	b.n	80037f2 <HAL_ADC_Start_DMA+0x15e>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b05      	cmp	r3, #5
 80036f4:	d002      	beq.n	80036fc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b09      	cmp	r3, #9
 80036fa:	d170      	bne.n	80037de <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fc07 	bl	8003f10 <ADC_Enable>
 8003702:	4603      	mov	r3, r0
 8003704:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d163      	bne.n	80037d4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003710:	4b3e      	ldr	r3, [pc, #248]	@ (800380c <HAL_ADC_Start_DMA+0x178>)
 8003712:	4013      	ands	r3, r2
 8003714:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a37      	ldr	r2, [pc, #220]	@ (8003800 <HAL_ADC_Start_DMA+0x16c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d002      	beq.n	800372c <HAL_ADC_Start_DMA+0x98>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	e000      	b.n	800372e <HAL_ADC_Start_DMA+0x9a>
 800372c:	4b33      	ldr	r3, [pc, #204]	@ (80037fc <HAL_ADC_Start_DMA+0x168>)
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	4293      	cmp	r3, r2
 8003734:	d002      	beq.n	800373c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003740:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d006      	beq.n	8003762 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003758:	f023 0206 	bic.w	r2, r3, #6
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003760:	e002      	b.n	8003768 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376c:	4a28      	ldr	r2, [pc, #160]	@ (8003810 <HAL_ADC_Start_DMA+0x17c>)
 800376e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003774:	4a27      	ldr	r2, [pc, #156]	@ (8003814 <HAL_ADC_Start_DMA+0x180>)
 8003776:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377c:	4a26      	ldr	r2, [pc, #152]	@ (8003818 <HAL_ADC_Start_DMA+0x184>)
 800377e:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	221c      	movs	r2, #28
 8003786:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0210 	orr.w	r2, r2, #16
 800379e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f7ff fcaf 	bl	800310e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3340      	adds	r3, #64	@ 0x40
 80037ba:	4619      	mov	r1, r3
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f001 fb10 	bl	8004de4 <HAL_DMA_Start_IT>
 80037c4:	4603      	mov	r3, r0
 80037c6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fd85 	bl	80032dc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80037d2:	e00d      	b.n	80037f0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80037dc:	e008      	b.n	80037f0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80037ea:	e001      	b.n	80037f0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
 80037ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40022000 	.word	0x40022000
 8003800:	40022100 	.word	0x40022100
 8003804:	40022300 	.word	0x40022300
 8003808:	58026300 	.word	0x58026300
 800380c:	fffff0fe 	.word	0xfffff0fe
 8003810:	08004025 	.word	0x08004025
 8003814:	080040fd 	.word	0x080040fd
 8003818:	08004119 	.word	0x08004119

0800381c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b0a1      	sub	sp, #132	@ 0x84
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4a65      	ldr	r2, [pc, #404]	@ (8003a08 <HAL_ADC_ConfigChannel+0x1b0>)
 8003872:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x2a>
 800387e:	2302      	movs	r3, #2
 8003880:	e32e      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x688>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff fd38 	bl	8003304 <LL_ADC_REG_IsConversionOngoing>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	f040 8313 	bne.w	8003ec2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	db2c      	blt.n	80038fe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d108      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x6a>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0e9b      	lsrs	r3, r3, #26
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2201      	movs	r2, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	e016      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x98>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038d2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80038da:	2320      	movs	r3, #32
 80038dc:	e003      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80038de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038e0:	fab3 f383 	clz	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2201      	movs	r2, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	69d1      	ldr	r1, [r2, #28]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	430b      	orrs	r3, r1
 80038fc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	f7ff fbd3 	bl	80030b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fcf5 	bl	8003304 <LL_ADC_REG_IsConversionOngoing>
 800391a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fd02 	bl	800332a <LL_ADC_INJ_IsConversionOngoing>
 8003926:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 80b8 	bne.w	8003aa0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003930:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003932:	2b00      	cmp	r3, #0
 8003934:	f040 80b4 	bne.w	8003aa0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	461a      	mov	r2, r3
 8003946:	f7ff fbf5 	bl	8003134 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800394a:	4b30      	ldr	r3, [pc, #192]	@ (8003a0c <HAL_ADC_ConfigChannel+0x1b4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003956:	d10b      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x118>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	089b      	lsrs	r3, r3, #2
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	e01d      	b.n	80039ac <HAL_ADC_ConfigChannel+0x154>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x13e>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	e00a      	b.n	80039ac <HAL_ADC_ConfigChannel+0x154>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	089b      	lsrs	r3, r3, #2
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d02c      	beq.n	8003a10 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6919      	ldr	r1, [r3, #16]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039c4:	f7ff fb10 	bl	8002fe8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6919      	ldr	r1, [r3, #16]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	7e5b      	ldrb	r3, [r3, #25]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d102      	bne.n	80039de <HAL_ADC_ConfigChannel+0x186>
 80039d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80039dc:	e000      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x188>
 80039de:	2300      	movs	r3, #0
 80039e0:	461a      	mov	r2, r3
 80039e2:	f7ff fb3a 	bl	800305a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6919      	ldr	r1, [r3, #16]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	7e1b      	ldrb	r3, [r3, #24]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d102      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x1a4>
 80039f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039fa:	e000      	b.n	80039fe <HAL_ADC_ConfigChannel+0x1a6>
 80039fc:	2300      	movs	r3, #0
 80039fe:	461a      	mov	r2, r3
 8003a00:	f7ff fb12 	bl	8003028 <LL_ADC_SetDataRightShift>
 8003a04:	e04c      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x248>
 8003a06:	bf00      	nop
 8003a08:	47ff0000 	.word	0x47ff0000
 8003a0c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	069b      	lsls	r3, r3, #26
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d107      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a32:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	069b      	lsls	r3, r3, #26
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d107      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a56:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	069b      	lsls	r3, r3, #26
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d107      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a7a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	069b      	lsls	r3, r3, #26
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d107      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a9e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fc05 	bl	80032b4 <LL_ADC_IsEnabled>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f040 8211 	bne.w	8003ed4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6819      	ldr	r1, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f7ff fb64 	bl	800318c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4aa1      	ldr	r2, [pc, #644]	@ (8003d50 <HAL_ADC_ConfigChannel+0x4f8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	f040 812e 	bne.w	8003d2c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x2a0>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	0e9b      	lsrs	r3, r3, #26
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	2b09      	cmp	r3, #9
 8003aee:	bf94      	ite	ls
 8003af0:	2301      	movls	r3, #1
 8003af2:	2300      	movhi	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e019      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x2d4>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b00:	fa93 f3a3 	rbit	r3, r3
 8003b04:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003b0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003b10:	2320      	movs	r3, #32
 8003b12:	e003      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003b14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	2b09      	cmp	r3, #9
 8003b24:	bf94      	ite	ls
 8003b26:	2301      	movls	r3, #1
 8003b28:	2300      	movhi	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d079      	beq.n	8003c24 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x2f4>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	0e9b      	lsrs	r3, r3, #26
 8003b42:	3301      	adds	r3, #1
 8003b44:	069b      	lsls	r3, r3, #26
 8003b46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b4a:	e015      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x320>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b54:	fa93 f3a3 	rbit	r3, r3
 8003b58:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003b64:	2320      	movs	r3, #32
 8003b66:	e003      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	3301      	adds	r3, #1
 8003b72:	069b      	lsls	r3, r3, #26
 8003b74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x340>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	0e9b      	lsrs	r3, r3, #26
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	e017      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x370>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e003      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	ea42 0103 	orr.w	r1, r2, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x396>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0e9b      	lsrs	r3, r3, #26
 8003bde:	3301      	adds	r3, #1
 8003be0:	f003 021f 	and.w	r2, r3, #31
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	051b      	lsls	r3, r3, #20
 8003bec:	e018      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x3c8>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003c06:	2320      	movs	r3, #32
 8003c08:	e003      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	f003 021f 	and.w	r2, r3, #31
 8003c18:	4613      	mov	r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c20:	430b      	orrs	r3, r1
 8003c22:	e07e      	b.n	8003d22 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x3e8>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	0e9b      	lsrs	r3, r3, #26
 8003c36:	3301      	adds	r3, #1
 8003c38:	069b      	lsls	r3, r3, #26
 8003c3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c3e:	e015      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x414>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003c58:	2320      	movs	r3, #32
 8003c5a:	e003      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	3301      	adds	r3, #1
 8003c66:	069b      	lsls	r3, r3, #26
 8003c68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x434>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0e9b      	lsrs	r3, r3, #26
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8a:	e017      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x464>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	61bb      	str	r3, [r7, #24]
  return result;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e003      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbc:	ea42 0103 	orr.w	r1, r2, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10d      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x490>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	0e9b      	lsrs	r3, r3, #26
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f003 021f 	and.w	r2, r3, #31
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	3b1e      	subs	r3, #30
 8003ce0:	051b      	lsls	r3, r3, #20
 8003ce2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ce6:	e01b      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x4c8>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	fa93 f3a3 	rbit	r3, r3
 8003cf4:	60fb      	str	r3, [r7, #12]
  return result;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003d00:	2320      	movs	r3, #32
 8003d02:	e003      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	f003 021f 	and.w	r2, r3, #31
 8003d12:	4613      	mov	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	3b1e      	subs	r3, #30
 8003d1a:	051b      	lsls	r3, r3, #20
 8003d1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d20:	430b      	orrs	r3, r1
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	6892      	ldr	r2, [r2, #8]
 8003d26:	4619      	mov	r1, r3
 8003d28:	f7ff fa04 	bl	8003134 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f280 80cf 	bge.w	8003ed4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a06      	ldr	r2, [pc, #24]	@ (8003d54 <HAL_ADC_ConfigChannel+0x4fc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_ADC_ConfigChannel+0x4f2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a04      	ldr	r2, [pc, #16]	@ (8003d58 <HAL_ADC_ConfigChannel+0x500>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d10a      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x508>
 8003d4a:	4b04      	ldr	r3, [pc, #16]	@ (8003d5c <HAL_ADC_ConfigChannel+0x504>)
 8003d4c:	e009      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x50a>
 8003d4e:	bf00      	nop
 8003d50:	47ff0000 	.word	0x47ff0000
 8003d54:	40022000 	.word	0x40022000
 8003d58:	40022100 	.word	0x40022100
 8003d5c:	40022300 	.word	0x40022300
 8003d60:	4b61      	ldr	r3, [pc, #388]	@ (8003ee8 <HAL_ADC_ConfigChannel+0x690>)
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff f932 	bl	8002fcc <LL_ADC_GetCommonPathInternalCh>
 8003d68:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a5f      	ldr	r2, [pc, #380]	@ (8003eec <HAL_ADC_ConfigChannel+0x694>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_ADC_ConfigChannel+0x526>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a5d      	ldr	r2, [pc, #372]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x698>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10e      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x544>
 8003d7e:	485b      	ldr	r0, [pc, #364]	@ (8003eec <HAL_ADC_ConfigChannel+0x694>)
 8003d80:	f7ff fa98 	bl	80032b4 <LL_ADC_IsEnabled>
 8003d84:	4604      	mov	r4, r0
 8003d86:	485a      	ldr	r0, [pc, #360]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x698>)
 8003d88:	f7ff fa94 	bl	80032b4 <LL_ADC_IsEnabled>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4323      	orrs	r3, r4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e008      	b.n	8003dae <HAL_ADC_ConfigChannel+0x556>
 8003d9c:	4855      	ldr	r0, [pc, #340]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x69c>)
 8003d9e:	f7ff fa89 	bl	80032b4 <LL_ADC_IsEnabled>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d07d      	beq.n	8003eae <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a50      	ldr	r2, [pc, #320]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x6a0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d130      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x5c6>
 8003dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d12b      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a4a      	ldr	r2, [pc, #296]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x69c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	f040 8081 	bne.w	8003ed4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a45      	ldr	r2, [pc, #276]	@ (8003eec <HAL_ADC_ConfigChannel+0x694>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x58e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a43      	ldr	r2, [pc, #268]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x698>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x592>
 8003de6:	4a45      	ldr	r2, [pc, #276]	@ (8003efc <HAL_ADC_ConfigChannel+0x6a4>)
 8003de8:	e000      	b.n	8003dec <HAL_ADC_ConfigChannel+0x594>
 8003dea:	4a3f      	ldr	r2, [pc, #252]	@ (8003ee8 <HAL_ADC_ConfigChannel+0x690>)
 8003dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f7ff f8d6 	bl	8002fa6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dfa:	4b41      	ldr	r3, [pc, #260]	@ (8003f00 <HAL_ADC_ConfigChannel+0x6a8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	099b      	lsrs	r3, r3, #6
 8003e00:	4a40      	ldr	r2, [pc, #256]	@ (8003f04 <HAL_ADC_ConfigChannel+0x6ac>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	099b      	lsrs	r3, r3, #6
 8003e08:	3301      	adds	r3, #1
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e0e:	e002      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f9      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e1c:	e05a      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a39      	ldr	r2, [pc, #228]	@ (8003f08 <HAL_ADC_ConfigChannel+0x6b0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d11e      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x60e>
 8003e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d119      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x69c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d14b      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2a      	ldr	r2, [pc, #168]	@ (8003eec <HAL_ADC_ConfigChannel+0x694>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_ADC_ConfigChannel+0x5f8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a29      	ldr	r2, [pc, #164]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x698>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x5fc>
 8003e50:	4a2a      	ldr	r2, [pc, #168]	@ (8003efc <HAL_ADC_ConfigChannel+0x6a4>)
 8003e52:	e000      	b.n	8003e56 <HAL_ADC_ConfigChannel+0x5fe>
 8003e54:	4a24      	ldr	r2, [pc, #144]	@ (8003ee8 <HAL_ADC_ConfigChannel+0x690>)
 8003e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f7ff f8a1 	bl	8002fa6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e64:	e036      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a28      	ldr	r2, [pc, #160]	@ (8003f0c <HAL_ADC_ConfigChannel+0x6b4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d131      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x67c>
 8003e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d12c      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x69c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d127      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a18      	ldr	r2, [pc, #96]	@ (8003eec <HAL_ADC_ConfigChannel+0x694>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x640>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a17      	ldr	r2, [pc, #92]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x698>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d101      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x644>
 8003e98:	4a18      	ldr	r2, [pc, #96]	@ (8003efc <HAL_ADC_ConfigChannel+0x6a4>)
 8003e9a:	e000      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x646>
 8003e9c:	4a12      	ldr	r2, [pc, #72]	@ (8003ee8 <HAL_ADC_ConfigChannel+0x690>)
 8003e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ea0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f7ff f87d 	bl	8002fa6 <LL_ADC_SetCommonPathInternalCh>
 8003eac:	e012      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003ec0:	e008      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	f043 0220 	orr.w	r2, r3, #32
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003edc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3784      	adds	r7, #132	@ 0x84
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd90      	pop	{r4, r7, pc}
 8003ee8:	58026300 	.word	0x58026300
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40022100 	.word	0x40022100
 8003ef4:	58026000 	.word	0x58026000
 8003ef8:	cb840000 	.word	0xcb840000
 8003efc:	40022300 	.word	0x40022300
 8003f00:	24000004 	.word	0x24000004
 8003f04:	053e2d63 	.word	0x053e2d63
 8003f08:	c7520000 	.word	0xc7520000
 8003f0c:	cfb80000 	.word	0xcfb80000

08003f10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff f9c9 	bl	80032b4 <LL_ADC_IsEnabled>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d16e      	bne.n	8004006 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	4b38      	ldr	r3, [pc, #224]	@ (8004010 <ADC_Enable+0x100>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3a:	f043 0210 	orr.w	r2, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f46:	f043 0201 	orr.w	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e05a      	b.n	8004008 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff f998 	bl	800328c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f5c:	f7fe fff8 	bl	8002f50 <HAL_GetTick>
 8003f60:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a2b      	ldr	r2, [pc, #172]	@ (8004014 <ADC_Enable+0x104>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <ADC_Enable+0x66>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a29      	ldr	r2, [pc, #164]	@ (8004018 <ADC_Enable+0x108>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <ADC_Enable+0x6a>
 8003f76:	4b29      	ldr	r3, [pc, #164]	@ (800401c <ADC_Enable+0x10c>)
 8003f78:	e000      	b.n	8003f7c <ADC_Enable+0x6c>
 8003f7a:	4b29      	ldr	r3, [pc, #164]	@ (8004020 <ADC_Enable+0x110>)
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff f929 	bl	80031d4 <LL_ADC_GetMultimode>
 8003f82:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a23      	ldr	r2, [pc, #140]	@ (8004018 <ADC_Enable+0x108>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d002      	beq.n	8003f94 <ADC_Enable+0x84>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	e000      	b.n	8003f96 <ADC_Enable+0x86>
 8003f94:	4b1f      	ldr	r3, [pc, #124]	@ (8004014 <ADC_Enable+0x104>)
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d02c      	beq.n	8003ff8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d130      	bne.n	8004006 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fa4:	e028      	b.n	8003ff8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff f982 	bl	80032b4 <LL_ADC_IsEnabled>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d104      	bne.n	8003fc0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff f966 	bl	800328c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fc0:	f7fe ffc6 	bl	8002f50 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d914      	bls.n	8003ff8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d00d      	beq.n	8003ff8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe0:	f043 0210 	orr.w	r2, r3, #16
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fec:	f043 0201 	orr.w	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e007      	b.n	8004008 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b01      	cmp	r3, #1
 8004004:	d1cf      	bne.n	8003fa6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	8000003f 	.word	0x8000003f
 8004014:	40022000 	.word	0x40022000
 8004018:	40022100 	.word	0x40022100
 800401c:	40022300 	.word	0x40022300
 8004020:	58026300 	.word	0x58026300

08004024 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004036:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800403a:	2b00      	cmp	r3, #0
 800403c:	d14b      	bne.n	80040d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004042:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d021      	beq.n	800409c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff f817 	bl	8003090 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d032      	beq.n	80040ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d12b      	bne.n	80040ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004086:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d11f      	bne.n	80040ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	655a      	str	r2, [r3, #84]	@ 0x54
 800409a:	e018      	b.n	80040ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d111      	bne.n	80040ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d105      	bne.n	80040ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c6:	f043 0201 	orr.w	r2, r3, #1
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f7ff fba4 	bl	800381c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80040d4:	e00e      	b.n	80040f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff fbae 	bl	8003844 <HAL_ADC_ErrorCallback>
}
 80040e8:	e004      	b.n	80040f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004108:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f7ff fb90 	bl	8003830 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004136:	f043 0204 	orr.w	r2, r3, #4
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f7ff fb80 	bl	8003844 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a7a      	ldr	r2, [pc, #488]	@ (8004344 <ADC_ConfigureBoostMode+0x1f8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <ADC_ConfigureBoostMode+0x1c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a79      	ldr	r2, [pc, #484]	@ (8004348 <ADC_ConfigureBoostMode+0x1fc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d109      	bne.n	800417c <ADC_ConfigureBoostMode+0x30>
 8004168:	4b78      	ldr	r3, [pc, #480]	@ (800434c <ADC_ConfigureBoostMode+0x200>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e008      	b.n	800418e <ADC_ConfigureBoostMode+0x42>
 800417c:	4b74      	ldr	r3, [pc, #464]	@ (8004350 <ADC_ConfigureBoostMode+0x204>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01c      	beq.n	80041cc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004192:	f004 fabb 	bl	800870c <HAL_RCC_GetHCLKFreq>
 8004196:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041a0:	d010      	beq.n	80041c4 <ADC_ConfigureBoostMode+0x78>
 80041a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041a6:	d873      	bhi.n	8004290 <ADC_ConfigureBoostMode+0x144>
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ac:	d002      	beq.n	80041b4 <ADC_ConfigureBoostMode+0x68>
 80041ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041b2:	d16d      	bne.n	8004290 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	60fb      	str	r3, [r7, #12]
        break;
 80041c2:	e068      	b.n	8004296 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	089b      	lsrs	r3, r3, #2
 80041c8:	60fb      	str	r3, [r7, #12]
        break;
 80041ca:	e064      	b.n	8004296 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80041cc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80041d0:	f04f 0100 	mov.w	r1, #0
 80041d4:	f005 fd42 	bl	8009c5c <HAL_RCCEx_GetPeriphCLKFreq>
 80041d8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80041e2:	d051      	beq.n	8004288 <ADC_ConfigureBoostMode+0x13c>
 80041e4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80041e8:	d854      	bhi.n	8004294 <ADC_ConfigureBoostMode+0x148>
 80041ea:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80041ee:	d047      	beq.n	8004280 <ADC_ConfigureBoostMode+0x134>
 80041f0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80041f4:	d84e      	bhi.n	8004294 <ADC_ConfigureBoostMode+0x148>
 80041f6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80041fa:	d03d      	beq.n	8004278 <ADC_ConfigureBoostMode+0x12c>
 80041fc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004200:	d848      	bhi.n	8004294 <ADC_ConfigureBoostMode+0x148>
 8004202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004206:	d033      	beq.n	8004270 <ADC_ConfigureBoostMode+0x124>
 8004208:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800420c:	d842      	bhi.n	8004294 <ADC_ConfigureBoostMode+0x148>
 800420e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004212:	d029      	beq.n	8004268 <ADC_ConfigureBoostMode+0x11c>
 8004214:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004218:	d83c      	bhi.n	8004294 <ADC_ConfigureBoostMode+0x148>
 800421a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800421e:	d01a      	beq.n	8004256 <ADC_ConfigureBoostMode+0x10a>
 8004220:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004224:	d836      	bhi.n	8004294 <ADC_ConfigureBoostMode+0x148>
 8004226:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800422a:	d014      	beq.n	8004256 <ADC_ConfigureBoostMode+0x10a>
 800422c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004230:	d830      	bhi.n	8004294 <ADC_ConfigureBoostMode+0x148>
 8004232:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004236:	d00e      	beq.n	8004256 <ADC_ConfigureBoostMode+0x10a>
 8004238:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800423c:	d82a      	bhi.n	8004294 <ADC_ConfigureBoostMode+0x148>
 800423e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004242:	d008      	beq.n	8004256 <ADC_ConfigureBoostMode+0x10a>
 8004244:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004248:	d824      	bhi.n	8004294 <ADC_ConfigureBoostMode+0x148>
 800424a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800424e:	d002      	beq.n	8004256 <ADC_ConfigureBoostMode+0x10a>
 8004250:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004254:	d11e      	bne.n	8004294 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	0c9b      	lsrs	r3, r3, #18
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	60fb      	str	r3, [r7, #12]
        break;
 8004266:	e016      	b.n	8004296 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	60fb      	str	r3, [r7, #12]
        break;
 800426e:	e012      	b.n	8004296 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	60fb      	str	r3, [r7, #12]
        break;
 8004276:	e00e      	b.n	8004296 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	099b      	lsrs	r3, r3, #6
 800427c:	60fb      	str	r3, [r7, #12]
        break;
 800427e:	e00a      	b.n	8004296 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	09db      	lsrs	r3, r3, #7
 8004284:	60fb      	str	r3, [r7, #12]
        break;
 8004286:	e006      	b.n	8004296 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	60fb      	str	r3, [r7, #12]
        break;
 800428e:	e002      	b.n	8004296 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004294:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004296:	f7fe fe67 	bl	8002f68 <HAL_GetREVID>
 800429a:	4603      	mov	r3, r0
 800429c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d815      	bhi.n	80042d0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004354 <ADC_ConfigureBoostMode+0x208>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d908      	bls.n	80042be <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042ba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80042bc:	e03e      	b.n	800433c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042cc:	609a      	str	r2, [r3, #8]
}
 80042ce:	e035      	b.n	800433c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	085b      	lsrs	r3, r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004358 <ADC_ConfigureBoostMode+0x20c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d808      	bhi.n	80042f0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80042ec:	609a      	str	r2, [r3, #8]
}
 80042ee:	e025      	b.n	800433c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a1a      	ldr	r2, [pc, #104]	@ (800435c <ADC_ConfigureBoostMode+0x210>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d80a      	bhi.n	800430e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	e016      	b.n	800433c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a13      	ldr	r2, [pc, #76]	@ (8004360 <ADC_ConfigureBoostMode+0x214>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d80a      	bhi.n	800432c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004328:	609a      	str	r2, [r3, #8]
}
 800432a:	e007      	b.n	800433c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800433a:	609a      	str	r2, [r3, #8]
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40022000 	.word	0x40022000
 8004348:	40022100 	.word	0x40022100
 800434c:	40022300 	.word	0x40022300
 8004350:	58026300 	.word	0x58026300
 8004354:	01312d00 	.word	0x01312d00
 8004358:	005f5e10 	.word	0x005f5e10
 800435c:	00bebc20 	.word	0x00bebc20
 8004360:	017d7840 	.word	0x017d7840

08004364 <LL_ADC_IsEnabled>:
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <LL_ADC_IsEnabled+0x18>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <LL_ADC_IsEnabled+0x1a>
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <LL_ADC_REG_IsConversionOngoing>:
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b04      	cmp	r3, #4
 800439c:	d101      	bne.n	80043a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b09f      	sub	sp, #124	@ 0x7c
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e0be      	b.n	800454c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80043d6:	2300      	movs	r3, #0
 80043d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80043da:	2300      	movs	r3, #0
 80043dc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d102      	bne.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	e001      	b.n	80043f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fc:	f043 0220 	orr.w	r2, r3, #32
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e09d      	b.n	800454c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff ffb9 	bl	800438a <LL_ADC_REG_IsConversionOngoing>
 8004418:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff ffb3 	bl	800438a <LL_ADC_REG_IsConversionOngoing>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d17f      	bne.n	800452a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800442a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800442c:	2b00      	cmp	r3, #0
 800442e:	d17c      	bne.n	800452a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a47      	ldr	r2, [pc, #284]	@ (8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a46      	ldr	r2, [pc, #280]	@ (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d101      	bne.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004444:	4b45      	ldr	r3, [pc, #276]	@ (800455c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004446:	e000      	b.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004448:	4b45      	ldr	r3, [pc, #276]	@ (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800444a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d039      	beq.n	80044c8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	431a      	orrs	r2, r3
 8004462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004464:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a3a      	ldr	r2, [pc, #232]	@ (8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d004      	beq.n	800447a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a38      	ldr	r2, [pc, #224]	@ (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d10e      	bne.n	8004498 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800447a:	4836      	ldr	r0, [pc, #216]	@ (8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800447c:	f7ff ff72 	bl	8004364 <LL_ADC_IsEnabled>
 8004480:	4604      	mov	r4, r0
 8004482:	4835      	ldr	r0, [pc, #212]	@ (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004484:	f7ff ff6e 	bl	8004364 <LL_ADC_IsEnabled>
 8004488:	4603      	mov	r3, r0
 800448a:	4323      	orrs	r3, r4
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e008      	b.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004498:	4832      	ldr	r0, [pc, #200]	@ (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800449a:	f7ff ff63 	bl	8004364 <LL_ADC_IsEnabled>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d047      	beq.n	800453e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004568 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	6811      	ldr	r1, [r2, #0]
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	6892      	ldr	r2, [r2, #8]
 80044be:	430a      	orrs	r2, r1
 80044c0:	431a      	orrs	r2, r3
 80044c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044c6:	e03a      	b.n	800453e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80044c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d10e      	bne.n	8004506 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80044e8:	481a      	ldr	r0, [pc, #104]	@ (8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044ea:	f7ff ff3b 	bl	8004364 <LL_ADC_IsEnabled>
 80044ee:	4604      	mov	r4, r0
 80044f0:	4819      	ldr	r0, [pc, #100]	@ (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044f2:	f7ff ff37 	bl	8004364 <LL_ADC_IsEnabled>
 80044f6:	4603      	mov	r3, r0
 80044f8:	4323      	orrs	r3, r4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e008      	b.n	8004518 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004506:	4817      	ldr	r0, [pc, #92]	@ (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004508:	f7ff ff2c 	bl	8004364 <LL_ADC_IsEnabled>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d010      	beq.n	800453e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800451c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004522:	4013      	ands	r3, r2
 8004524:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004526:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004528:	e009      	b.n	800453e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452e:	f043 0220 	orr.w	r2, r3, #32
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800453c:	e000      	b.n	8004540 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800453e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004548:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800454c:	4618      	mov	r0, r3
 800454e:	377c      	adds	r7, #124	@ 0x7c
 8004550:	46bd      	mov	sp, r7
 8004552:	bd90      	pop	{r4, r7, pc}
 8004554:	40022000 	.word	0x40022000
 8004558:	40022100 	.word	0x40022100
 800455c:	40022300 	.word	0x40022300
 8004560:	58026300 	.word	0x58026300
 8004564:	58026000 	.word	0x58026000
 8004568:	fffff0e0 	.word	0xfffff0e0

0800456c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <__NVIC_SetPriorityGrouping+0x40>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004588:	4013      	ands	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004594:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <__NVIC_SetPriorityGrouping+0x44>)
 8004596:	4313      	orrs	r3, r2
 8004598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800459a:	4a04      	ldr	r2, [pc, #16]	@ (80045ac <__NVIC_SetPriorityGrouping+0x40>)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	60d3      	str	r3, [r2, #12]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	e000ed00 	.word	0xe000ed00
 80045b0:	05fa0000 	.word	0x05fa0000

080045b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045b8:	4b04      	ldr	r3, [pc, #16]	@ (80045cc <__NVIC_GetPriorityGrouping+0x18>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	f003 0307 	and.w	r3, r3, #7
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	db0b      	blt.n	80045fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	f003 021f 	and.w	r2, r3, #31
 80045e8:	4907      	ldr	r1, [pc, #28]	@ (8004608 <__NVIC_EnableIRQ+0x38>)
 80045ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	2001      	movs	r0, #1
 80045f2:	fa00 f202 	lsl.w	r2, r0, r2
 80045f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	e000e100 	.word	0xe000e100

0800460c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	6039      	str	r1, [r7, #0]
 8004616:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800461c:	2b00      	cmp	r3, #0
 800461e:	db0a      	blt.n	8004636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	b2da      	uxtb	r2, r3
 8004624:	490c      	ldr	r1, [pc, #48]	@ (8004658 <__NVIC_SetPriority+0x4c>)
 8004626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800462a:	0112      	lsls	r2, r2, #4
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	440b      	add	r3, r1
 8004630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004634:	e00a      	b.n	800464c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	4908      	ldr	r1, [pc, #32]	@ (800465c <__NVIC_SetPriority+0x50>)
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	3b04      	subs	r3, #4
 8004644:	0112      	lsls	r2, r2, #4
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	440b      	add	r3, r1
 800464a:	761a      	strb	r2, [r3, #24]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000e100 	.word	0xe000e100
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	@ 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f1c3 0307 	rsb	r3, r3, #7
 800467a:	2b04      	cmp	r3, #4
 800467c:	bf28      	it	cs
 800467e:	2304      	movcs	r3, #4
 8004680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3304      	adds	r3, #4
 8004686:	2b06      	cmp	r3, #6
 8004688:	d902      	bls.n	8004690 <NVIC_EncodePriority+0x30>
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3b03      	subs	r3, #3
 800468e:	e000      	b.n	8004692 <NVIC_EncodePriority+0x32>
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	401a      	ands	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	43d9      	mvns	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b8:	4313      	orrs	r3, r2
         );
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3724      	adds	r7, #36	@ 0x24
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff ff4c 	bl	800456c <__NVIC_SetPriorityGrouping>
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046ea:	f7ff ff63 	bl	80045b4 <__NVIC_GetPriorityGrouping>
 80046ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	6978      	ldr	r0, [r7, #20]
 80046f6:	f7ff ffb3 	bl	8004660 <NVIC_EncodePriority>
 80046fa:	4602      	mov	r2, r0
 80046fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004700:	4611      	mov	r1, r2
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff ff82 	bl	800460c <__NVIC_SetPriority>
}
 8004708:	bf00      	nop
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800471a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff ff56 	bl	80045d0 <__NVIC_EnableIRQ>
}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004734:	f7fe fc0c 	bl	8002f50 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e316      	b.n	8004d72 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a66      	ldr	r2, [pc, #408]	@ (80048e4 <HAL_DMA_Init+0x1b8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d04a      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a65      	ldr	r2, [pc, #404]	@ (80048e8 <HAL_DMA_Init+0x1bc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d045      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a63      	ldr	r2, [pc, #396]	@ (80048ec <HAL_DMA_Init+0x1c0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d040      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a62      	ldr	r2, [pc, #392]	@ (80048f0 <HAL_DMA_Init+0x1c4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d03b      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a60      	ldr	r2, [pc, #384]	@ (80048f4 <HAL_DMA_Init+0x1c8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d036      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a5f      	ldr	r2, [pc, #380]	@ (80048f8 <HAL_DMA_Init+0x1cc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d031      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a5d      	ldr	r2, [pc, #372]	@ (80048fc <HAL_DMA_Init+0x1d0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d02c      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a5c      	ldr	r2, [pc, #368]	@ (8004900 <HAL_DMA_Init+0x1d4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d027      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a5a      	ldr	r2, [pc, #360]	@ (8004904 <HAL_DMA_Init+0x1d8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d022      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a59      	ldr	r2, [pc, #356]	@ (8004908 <HAL_DMA_Init+0x1dc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d01d      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a57      	ldr	r2, [pc, #348]	@ (800490c <HAL_DMA_Init+0x1e0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d018      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a56      	ldr	r2, [pc, #344]	@ (8004910 <HAL_DMA_Init+0x1e4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d013      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a54      	ldr	r2, [pc, #336]	@ (8004914 <HAL_DMA_Init+0x1e8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00e      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a53      	ldr	r2, [pc, #332]	@ (8004918 <HAL_DMA_Init+0x1ec>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d009      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a51      	ldr	r2, [pc, #324]	@ (800491c <HAL_DMA_Init+0x1f0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d004      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a50      	ldr	r2, [pc, #320]	@ (8004920 <HAL_DMA_Init+0x1f4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d101      	bne.n	80047e8 <HAL_DMA_Init+0xbc>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <HAL_DMA_Init+0xbe>
 80047e8:	2300      	movs	r3, #0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 813b 	beq.w	8004a66 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a37      	ldr	r2, [pc, #220]	@ (80048e4 <HAL_DMA_Init+0x1b8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d04a      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a36      	ldr	r2, [pc, #216]	@ (80048e8 <HAL_DMA_Init+0x1bc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d045      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a34      	ldr	r2, [pc, #208]	@ (80048ec <HAL_DMA_Init+0x1c0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d040      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a33      	ldr	r2, [pc, #204]	@ (80048f0 <HAL_DMA_Init+0x1c4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d03b      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a31      	ldr	r2, [pc, #196]	@ (80048f4 <HAL_DMA_Init+0x1c8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d036      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a30      	ldr	r2, [pc, #192]	@ (80048f8 <HAL_DMA_Init+0x1cc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d031      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a2e      	ldr	r2, [pc, #184]	@ (80048fc <HAL_DMA_Init+0x1d0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d02c      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a2d      	ldr	r2, [pc, #180]	@ (8004900 <HAL_DMA_Init+0x1d4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d027      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2b      	ldr	r2, [pc, #172]	@ (8004904 <HAL_DMA_Init+0x1d8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d022      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2a      	ldr	r2, [pc, #168]	@ (8004908 <HAL_DMA_Init+0x1dc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d01d      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a28      	ldr	r2, [pc, #160]	@ (800490c <HAL_DMA_Init+0x1e0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d018      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a27      	ldr	r2, [pc, #156]	@ (8004910 <HAL_DMA_Init+0x1e4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d013      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a25      	ldr	r2, [pc, #148]	@ (8004914 <HAL_DMA_Init+0x1e8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00e      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a24      	ldr	r2, [pc, #144]	@ (8004918 <HAL_DMA_Init+0x1ec>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d009      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a22      	ldr	r2, [pc, #136]	@ (800491c <HAL_DMA_Init+0x1f0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a21      	ldr	r2, [pc, #132]	@ (8004920 <HAL_DMA_Init+0x1f4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d108      	bne.n	80048b2 <HAL_DMA_Init+0x186>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0201 	bic.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e007      	b.n	80048c2 <HAL_DMA_Init+0x196>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0201 	bic.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048c2:	e02f      	b.n	8004924 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048c4:	f7fe fb44 	bl	8002f50 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	d928      	bls.n	8004924 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2203      	movs	r2, #3
 80048dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e246      	b.n	8004d72 <HAL_DMA_Init+0x646>
 80048e4:	40020010 	.word	0x40020010
 80048e8:	40020028 	.word	0x40020028
 80048ec:	40020040 	.word	0x40020040
 80048f0:	40020058 	.word	0x40020058
 80048f4:	40020070 	.word	0x40020070
 80048f8:	40020088 	.word	0x40020088
 80048fc:	400200a0 	.word	0x400200a0
 8004900:	400200b8 	.word	0x400200b8
 8004904:	40020410 	.word	0x40020410
 8004908:	40020428 	.word	0x40020428
 800490c:	40020440 	.word	0x40020440
 8004910:	40020458 	.word	0x40020458
 8004914:	40020470 	.word	0x40020470
 8004918:	40020488 	.word	0x40020488
 800491c:	400204a0 	.word	0x400204a0
 8004920:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1c8      	bne.n	80048c4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4b83      	ldr	r3, [pc, #524]	@ (8004b4c <HAL_DMA_Init+0x420>)
 800493e:	4013      	ands	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800494a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004956:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004962:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	2b04      	cmp	r3, #4
 8004976:	d107      	bne.n	8004988 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004980:	4313      	orrs	r3, r2
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004988:	4b71      	ldr	r3, [pc, #452]	@ (8004b50 <HAL_DMA_Init+0x424>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b71      	ldr	r3, [pc, #452]	@ (8004b54 <HAL_DMA_Init+0x428>)
 800498e:	4013      	ands	r3, r2
 8004990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004994:	d328      	bcc.n	80049e8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b28      	cmp	r3, #40	@ 0x28
 800499c:	d903      	bls.n	80049a6 <HAL_DMA_Init+0x27a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80049a4:	d917      	bls.n	80049d6 <HAL_DMA_Init+0x2aa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80049ac:	d903      	bls.n	80049b6 <HAL_DMA_Init+0x28a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b42      	cmp	r3, #66	@ 0x42
 80049b4:	d90f      	bls.n	80049d6 <HAL_DMA_Init+0x2aa>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b46      	cmp	r3, #70	@ 0x46
 80049bc:	d903      	bls.n	80049c6 <HAL_DMA_Init+0x29a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b48      	cmp	r3, #72	@ 0x48
 80049c4:	d907      	bls.n	80049d6 <HAL_DMA_Init+0x2aa>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b4e      	cmp	r3, #78	@ 0x4e
 80049cc:	d905      	bls.n	80049da <HAL_DMA_Init+0x2ae>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b52      	cmp	r3, #82	@ 0x52
 80049d4:	d801      	bhi.n	80049da <HAL_DMA_Init+0x2ae>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <HAL_DMA_Init+0x2b0>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049e6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f023 0307 	bic.w	r3, r3, #7
 80049fe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d117      	bne.n	8004a42 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00e      	beq.n	8004a42 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f002 fb3f 	bl	80070a8 <DMA_CheckFifoParam>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2240      	movs	r2, #64	@ 0x40
 8004a34:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e197      	b.n	8004d72 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f002 fa7a 	bl	8006f44 <DMA_CalcBaseAndBitshift>
 8004a50:	4603      	mov	r3, r0
 8004a52:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	223f      	movs	r2, #63	@ 0x3f
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	e0cd      	b.n	8004c02 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b58 <HAL_DMA_Init+0x42c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d022      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a39      	ldr	r2, [pc, #228]	@ (8004b5c <HAL_DMA_Init+0x430>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d01d      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a38      	ldr	r2, [pc, #224]	@ (8004b60 <HAL_DMA_Init+0x434>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d018      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a36      	ldr	r2, [pc, #216]	@ (8004b64 <HAL_DMA_Init+0x438>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a35      	ldr	r2, [pc, #212]	@ (8004b68 <HAL_DMA_Init+0x43c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00e      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a33      	ldr	r2, [pc, #204]	@ (8004b6c <HAL_DMA_Init+0x440>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a32      	ldr	r2, [pc, #200]	@ (8004b70 <HAL_DMA_Init+0x444>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a30      	ldr	r2, [pc, #192]	@ (8004b74 <HAL_DMA_Init+0x448>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d101      	bne.n	8004aba <HAL_DMA_Init+0x38e>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <HAL_DMA_Init+0x390>
 8004aba:	2300      	movs	r3, #0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8097 	beq.w	8004bf0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a24      	ldr	r2, [pc, #144]	@ (8004b58 <HAL_DMA_Init+0x42c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d021      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a22      	ldr	r2, [pc, #136]	@ (8004b5c <HAL_DMA_Init+0x430>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d01c      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a21      	ldr	r2, [pc, #132]	@ (8004b60 <HAL_DMA_Init+0x434>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d017      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b64 <HAL_DMA_Init+0x438>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d012      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1e      	ldr	r2, [pc, #120]	@ (8004b68 <HAL_DMA_Init+0x43c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00d      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b6c <HAL_DMA_Init+0x440>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d008      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1b      	ldr	r2, [pc, #108]	@ (8004b70 <HAL_DMA_Init+0x444>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a19      	ldr	r2, [pc, #100]	@ (8004b74 <HAL_DMA_Init+0x448>)
 8004b0e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4b13      	ldr	r3, [pc, #76]	@ (8004b78 <HAL_DMA_Init+0x44c>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b40      	cmp	r3, #64	@ 0x40
 8004b36:	d021      	beq.n	8004b7c <HAL_DMA_Init+0x450>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b80      	cmp	r3, #128	@ 0x80
 8004b3e:	d102      	bne.n	8004b46 <HAL_DMA_Init+0x41a>
 8004b40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b44:	e01b      	b.n	8004b7e <HAL_DMA_Init+0x452>
 8004b46:	2300      	movs	r3, #0
 8004b48:	e019      	b.n	8004b7e <HAL_DMA_Init+0x452>
 8004b4a:	bf00      	nop
 8004b4c:	fe10803f 	.word	0xfe10803f
 8004b50:	5c001000 	.word	0x5c001000
 8004b54:	ffff0000 	.word	0xffff0000
 8004b58:	58025408 	.word	0x58025408
 8004b5c:	5802541c 	.word	0x5802541c
 8004b60:	58025430 	.word	0x58025430
 8004b64:	58025444 	.word	0x58025444
 8004b68:	58025458 	.word	0x58025458
 8004b6c:	5802546c 	.word	0x5802546c
 8004b70:	58025480 	.word	0x58025480
 8004b74:	58025494 	.word	0x58025494
 8004b78:	fffe000f 	.word	0xfffe000f
 8004b7c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68d2      	ldr	r2, [r2, #12]
 8004b82:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004bac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4b6e      	ldr	r3, [pc, #440]	@ (8004d7c <HAL_DMA_Init+0x650>)
 8004bc4:	4413      	add	r3, r2
 8004bc6:	4a6e      	ldr	r2, [pc, #440]	@ (8004d80 <HAL_DMA_Init+0x654>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	009a      	lsls	r2, r3, #2
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f002 f9b5 	bl	8006f44 <DMA_CalcBaseAndBitshift>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	2201      	movs	r2, #1
 8004be8:	409a      	lsls	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	e008      	b.n	8004c02 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2240      	movs	r2, #64	@ 0x40
 8004bf4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e0b7      	b.n	8004d72 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a5f      	ldr	r2, [pc, #380]	@ (8004d84 <HAL_DMA_Init+0x658>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d072      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a5d      	ldr	r2, [pc, #372]	@ (8004d88 <HAL_DMA_Init+0x65c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d06d      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5c      	ldr	r2, [pc, #368]	@ (8004d8c <HAL_DMA_Init+0x660>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d068      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5a      	ldr	r2, [pc, #360]	@ (8004d90 <HAL_DMA_Init+0x664>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d063      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a59      	ldr	r2, [pc, #356]	@ (8004d94 <HAL_DMA_Init+0x668>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d05e      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a57      	ldr	r2, [pc, #348]	@ (8004d98 <HAL_DMA_Init+0x66c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d059      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a56      	ldr	r2, [pc, #344]	@ (8004d9c <HAL_DMA_Init+0x670>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d054      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a54      	ldr	r2, [pc, #336]	@ (8004da0 <HAL_DMA_Init+0x674>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d04f      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a53      	ldr	r2, [pc, #332]	@ (8004da4 <HAL_DMA_Init+0x678>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d04a      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a51      	ldr	r2, [pc, #324]	@ (8004da8 <HAL_DMA_Init+0x67c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d045      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a50      	ldr	r2, [pc, #320]	@ (8004dac <HAL_DMA_Init+0x680>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d040      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a4e      	ldr	r2, [pc, #312]	@ (8004db0 <HAL_DMA_Init+0x684>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d03b      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a4d      	ldr	r2, [pc, #308]	@ (8004db4 <HAL_DMA_Init+0x688>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d036      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a4b      	ldr	r2, [pc, #300]	@ (8004db8 <HAL_DMA_Init+0x68c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d031      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a4a      	ldr	r2, [pc, #296]	@ (8004dbc <HAL_DMA_Init+0x690>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d02c      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a48      	ldr	r2, [pc, #288]	@ (8004dc0 <HAL_DMA_Init+0x694>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d027      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a47      	ldr	r2, [pc, #284]	@ (8004dc4 <HAL_DMA_Init+0x698>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d022      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a45      	ldr	r2, [pc, #276]	@ (8004dc8 <HAL_DMA_Init+0x69c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01d      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a44      	ldr	r2, [pc, #272]	@ (8004dcc <HAL_DMA_Init+0x6a0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d018      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a42      	ldr	r2, [pc, #264]	@ (8004dd0 <HAL_DMA_Init+0x6a4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a41      	ldr	r2, [pc, #260]	@ (8004dd4 <HAL_DMA_Init+0x6a8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a3f      	ldr	r2, [pc, #252]	@ (8004dd8 <HAL_DMA_Init+0x6ac>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d009      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a3e      	ldr	r2, [pc, #248]	@ (8004ddc <HAL_DMA_Init+0x6b0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a3c      	ldr	r2, [pc, #240]	@ (8004de0 <HAL_DMA_Init+0x6b4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d101      	bne.n	8004cf6 <HAL_DMA_Init+0x5ca>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_DMA_Init+0x5cc>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d032      	beq.n	8004d62 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f002 fa4f 	bl	80071a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b80      	cmp	r3, #128	@ 0x80
 8004d08:	d102      	bne.n	8004d10 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d24:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <HAL_DMA_Init+0x624>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d80c      	bhi.n	8004d50 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f002 facc 	bl	80072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	e008      	b.n	8004d62 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	a7fdabf8 	.word	0xa7fdabf8
 8004d80:	cccccccd 	.word	0xcccccccd
 8004d84:	40020010 	.word	0x40020010
 8004d88:	40020028 	.word	0x40020028
 8004d8c:	40020040 	.word	0x40020040
 8004d90:	40020058 	.word	0x40020058
 8004d94:	40020070 	.word	0x40020070
 8004d98:	40020088 	.word	0x40020088
 8004d9c:	400200a0 	.word	0x400200a0
 8004da0:	400200b8 	.word	0x400200b8
 8004da4:	40020410 	.word	0x40020410
 8004da8:	40020428 	.word	0x40020428
 8004dac:	40020440 	.word	0x40020440
 8004db0:	40020458 	.word	0x40020458
 8004db4:	40020470 	.word	0x40020470
 8004db8:	40020488 	.word	0x40020488
 8004dbc:	400204a0 	.word	0x400204a0
 8004dc0:	400204b8 	.word	0x400204b8
 8004dc4:	58025408 	.word	0x58025408
 8004dc8:	5802541c 	.word	0x5802541c
 8004dcc:	58025430 	.word	0x58025430
 8004dd0:	58025444 	.word	0x58025444
 8004dd4:	58025458 	.word	0x58025458
 8004dd8:	5802546c 	.word	0x5802546c
 8004ddc:	58025480 	.word	0x58025480
 8004de0:	58025494 	.word	0x58025494

08004de4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e226      	b.n	800524e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_DMA_Start_IT+0x2a>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e21f      	b.n	800524e <HAL_DMA_Start_IT+0x46a>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	f040 820a 	bne.w	8005238 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a68      	ldr	r2, [pc, #416]	@ (8004fd8 <HAL_DMA_Start_IT+0x1f4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d04a      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a66      	ldr	r2, [pc, #408]	@ (8004fdc <HAL_DMA_Start_IT+0x1f8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d045      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a65      	ldr	r2, [pc, #404]	@ (8004fe0 <HAL_DMA_Start_IT+0x1fc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d040      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a63      	ldr	r2, [pc, #396]	@ (8004fe4 <HAL_DMA_Start_IT+0x200>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d03b      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a62      	ldr	r2, [pc, #392]	@ (8004fe8 <HAL_DMA_Start_IT+0x204>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d036      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a60      	ldr	r2, [pc, #384]	@ (8004fec <HAL_DMA_Start_IT+0x208>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d031      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a5f      	ldr	r2, [pc, #380]	@ (8004ff0 <HAL_DMA_Start_IT+0x20c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d02c      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ff4 <HAL_DMA_Start_IT+0x210>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d027      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a5c      	ldr	r2, [pc, #368]	@ (8004ff8 <HAL_DMA_Start_IT+0x214>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d022      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a5a      	ldr	r2, [pc, #360]	@ (8004ffc <HAL_DMA_Start_IT+0x218>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01d      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a59      	ldr	r2, [pc, #356]	@ (8005000 <HAL_DMA_Start_IT+0x21c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d018      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a57      	ldr	r2, [pc, #348]	@ (8005004 <HAL_DMA_Start_IT+0x220>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a56      	ldr	r2, [pc, #344]	@ (8005008 <HAL_DMA_Start_IT+0x224>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a54      	ldr	r2, [pc, #336]	@ (800500c <HAL_DMA_Start_IT+0x228>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a53      	ldr	r2, [pc, #332]	@ (8005010 <HAL_DMA_Start_IT+0x22c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a51      	ldr	r2, [pc, #324]	@ (8005014 <HAL_DMA_Start_IT+0x230>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d108      	bne.n	8004ee4 <HAL_DMA_Start_IT+0x100>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	e007      	b.n	8004ef4 <HAL_DMA_Start_IT+0x110>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f001 fe76 	bl	8006bec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a34      	ldr	r2, [pc, #208]	@ (8004fd8 <HAL_DMA_Start_IT+0x1f4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d04a      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a33      	ldr	r2, [pc, #204]	@ (8004fdc <HAL_DMA_Start_IT+0x1f8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d045      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a31      	ldr	r2, [pc, #196]	@ (8004fe0 <HAL_DMA_Start_IT+0x1fc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d040      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a30      	ldr	r2, [pc, #192]	@ (8004fe4 <HAL_DMA_Start_IT+0x200>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d03b      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004fe8 <HAL_DMA_Start_IT+0x204>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d036      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a2d      	ldr	r2, [pc, #180]	@ (8004fec <HAL_DMA_Start_IT+0x208>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d031      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff0 <HAL_DMA_Start_IT+0x20c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d02c      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff4 <HAL_DMA_Start_IT+0x210>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d027      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a28      	ldr	r2, [pc, #160]	@ (8004ff8 <HAL_DMA_Start_IT+0x214>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d022      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a27      	ldr	r2, [pc, #156]	@ (8004ffc <HAL_DMA_Start_IT+0x218>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d01d      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a25      	ldr	r2, [pc, #148]	@ (8005000 <HAL_DMA_Start_IT+0x21c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d018      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a24      	ldr	r2, [pc, #144]	@ (8005004 <HAL_DMA_Start_IT+0x220>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d013      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a22      	ldr	r2, [pc, #136]	@ (8005008 <HAL_DMA_Start_IT+0x224>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00e      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a21      	ldr	r2, [pc, #132]	@ (800500c <HAL_DMA_Start_IT+0x228>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d009      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1f      	ldr	r2, [pc, #124]	@ (8005010 <HAL_DMA_Start_IT+0x22c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005014 <HAL_DMA_Start_IT+0x230>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d101      	bne.n	8004fa4 <HAL_DMA_Start_IT+0x1c0>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <HAL_DMA_Start_IT+0x1c2>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d036      	beq.n	8005018 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f023 021e 	bic.w	r2, r3, #30
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0216 	orr.w	r2, r2, #22
 8004fbc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d03e      	beq.n	8005044 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0208 	orr.w	r2, r2, #8
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e035      	b.n	8005044 <HAL_DMA_Start_IT+0x260>
 8004fd8:	40020010 	.word	0x40020010
 8004fdc:	40020028 	.word	0x40020028
 8004fe0:	40020040 	.word	0x40020040
 8004fe4:	40020058 	.word	0x40020058
 8004fe8:	40020070 	.word	0x40020070
 8004fec:	40020088 	.word	0x40020088
 8004ff0:	400200a0 	.word	0x400200a0
 8004ff4:	400200b8 	.word	0x400200b8
 8004ff8:	40020410 	.word	0x40020410
 8004ffc:	40020428 	.word	0x40020428
 8005000:	40020440 	.word	0x40020440
 8005004:	40020458 	.word	0x40020458
 8005008:	40020470 	.word	0x40020470
 800500c:	40020488 	.word	0x40020488
 8005010:	400204a0 	.word	0x400204a0
 8005014:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 020e 	bic.w	r2, r3, #14
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 020a 	orr.w	r2, r2, #10
 800502a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0204 	orr.w	r2, r2, #4
 8005042:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a83      	ldr	r2, [pc, #524]	@ (8005258 <HAL_DMA_Start_IT+0x474>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d072      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a82      	ldr	r2, [pc, #520]	@ (800525c <HAL_DMA_Start_IT+0x478>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d06d      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a80      	ldr	r2, [pc, #512]	@ (8005260 <HAL_DMA_Start_IT+0x47c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d068      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a7f      	ldr	r2, [pc, #508]	@ (8005264 <HAL_DMA_Start_IT+0x480>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d063      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a7d      	ldr	r2, [pc, #500]	@ (8005268 <HAL_DMA_Start_IT+0x484>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d05e      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a7c      	ldr	r2, [pc, #496]	@ (800526c <HAL_DMA_Start_IT+0x488>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d059      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a7a      	ldr	r2, [pc, #488]	@ (8005270 <HAL_DMA_Start_IT+0x48c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d054      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a79      	ldr	r2, [pc, #484]	@ (8005274 <HAL_DMA_Start_IT+0x490>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d04f      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a77      	ldr	r2, [pc, #476]	@ (8005278 <HAL_DMA_Start_IT+0x494>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d04a      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a76      	ldr	r2, [pc, #472]	@ (800527c <HAL_DMA_Start_IT+0x498>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d045      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a74      	ldr	r2, [pc, #464]	@ (8005280 <HAL_DMA_Start_IT+0x49c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d040      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a73      	ldr	r2, [pc, #460]	@ (8005284 <HAL_DMA_Start_IT+0x4a0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d03b      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a71      	ldr	r2, [pc, #452]	@ (8005288 <HAL_DMA_Start_IT+0x4a4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d036      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a70      	ldr	r2, [pc, #448]	@ (800528c <HAL_DMA_Start_IT+0x4a8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d031      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a6e      	ldr	r2, [pc, #440]	@ (8005290 <HAL_DMA_Start_IT+0x4ac>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d02c      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a6d      	ldr	r2, [pc, #436]	@ (8005294 <HAL_DMA_Start_IT+0x4b0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d027      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a6b      	ldr	r2, [pc, #428]	@ (8005298 <HAL_DMA_Start_IT+0x4b4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d022      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a6a      	ldr	r2, [pc, #424]	@ (800529c <HAL_DMA_Start_IT+0x4b8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d01d      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a68      	ldr	r2, [pc, #416]	@ (80052a0 <HAL_DMA_Start_IT+0x4bc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d018      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a67      	ldr	r2, [pc, #412]	@ (80052a4 <HAL_DMA_Start_IT+0x4c0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d013      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a65      	ldr	r2, [pc, #404]	@ (80052a8 <HAL_DMA_Start_IT+0x4c4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00e      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a64      	ldr	r2, [pc, #400]	@ (80052ac <HAL_DMA_Start_IT+0x4c8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d009      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a62      	ldr	r2, [pc, #392]	@ (80052b0 <HAL_DMA_Start_IT+0x4cc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d004      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a61      	ldr	r2, [pc, #388]	@ (80052b4 <HAL_DMA_Start_IT+0x4d0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d101      	bne.n	8005138 <HAL_DMA_Start_IT+0x354>
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <HAL_DMA_Start_IT+0x356>
 8005138:	2300      	movs	r3, #0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01a      	beq.n	8005174 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005156:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800515a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800516e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005172:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a37      	ldr	r2, [pc, #220]	@ (8005258 <HAL_DMA_Start_IT+0x474>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d04a      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a36      	ldr	r2, [pc, #216]	@ (800525c <HAL_DMA_Start_IT+0x478>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d045      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a34      	ldr	r2, [pc, #208]	@ (8005260 <HAL_DMA_Start_IT+0x47c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d040      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a33      	ldr	r2, [pc, #204]	@ (8005264 <HAL_DMA_Start_IT+0x480>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d03b      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a31      	ldr	r2, [pc, #196]	@ (8005268 <HAL_DMA_Start_IT+0x484>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d036      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a30      	ldr	r2, [pc, #192]	@ (800526c <HAL_DMA_Start_IT+0x488>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d031      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005270 <HAL_DMA_Start_IT+0x48c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d02c      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a2d      	ldr	r2, [pc, #180]	@ (8005274 <HAL_DMA_Start_IT+0x490>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d027      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005278 <HAL_DMA_Start_IT+0x494>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d022      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2a      	ldr	r2, [pc, #168]	@ (800527c <HAL_DMA_Start_IT+0x498>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d01d      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a28      	ldr	r2, [pc, #160]	@ (8005280 <HAL_DMA_Start_IT+0x49c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d018      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a27      	ldr	r2, [pc, #156]	@ (8005284 <HAL_DMA_Start_IT+0x4a0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d013      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a25      	ldr	r2, [pc, #148]	@ (8005288 <HAL_DMA_Start_IT+0x4a4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00e      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a24      	ldr	r2, [pc, #144]	@ (800528c <HAL_DMA_Start_IT+0x4a8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d009      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a22      	ldr	r2, [pc, #136]	@ (8005290 <HAL_DMA_Start_IT+0x4ac>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d004      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a21      	ldr	r2, [pc, #132]	@ (8005294 <HAL_DMA_Start_IT+0x4b0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d108      	bne.n	8005226 <HAL_DMA_Start_IT+0x442>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e012      	b.n	800524c <HAL_DMA_Start_IT+0x468>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e009      	b.n	800524c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800523e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800524c:	7dfb      	ldrb	r3, [r7, #23]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40020010 	.word	0x40020010
 800525c:	40020028 	.word	0x40020028
 8005260:	40020040 	.word	0x40020040
 8005264:	40020058 	.word	0x40020058
 8005268:	40020070 	.word	0x40020070
 800526c:	40020088 	.word	0x40020088
 8005270:	400200a0 	.word	0x400200a0
 8005274:	400200b8 	.word	0x400200b8
 8005278:	40020410 	.word	0x40020410
 800527c:	40020428 	.word	0x40020428
 8005280:	40020440 	.word	0x40020440
 8005284:	40020458 	.word	0x40020458
 8005288:	40020470 	.word	0x40020470
 800528c:	40020488 	.word	0x40020488
 8005290:	400204a0 	.word	0x400204a0
 8005294:	400204b8 	.word	0x400204b8
 8005298:	58025408 	.word	0x58025408
 800529c:	5802541c 	.word	0x5802541c
 80052a0:	58025430 	.word	0x58025430
 80052a4:	58025444 	.word	0x58025444
 80052a8:	58025458 	.word	0x58025458
 80052ac:	5802546c 	.word	0x5802546c
 80052b0:	58025480 	.word	0x58025480
 80052b4:	58025494 	.word	0x58025494

080052b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80052c0:	f7fd fe46 	bl	8002f50 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e2dc      	b.n	800588a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d008      	beq.n	80052ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2280      	movs	r2, #128	@ 0x80
 80052e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e2cd      	b.n	800588a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a76      	ldr	r2, [pc, #472]	@ (80054cc <HAL_DMA_Abort+0x214>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d04a      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a74      	ldr	r2, [pc, #464]	@ (80054d0 <HAL_DMA_Abort+0x218>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d045      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a73      	ldr	r2, [pc, #460]	@ (80054d4 <HAL_DMA_Abort+0x21c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d040      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a71      	ldr	r2, [pc, #452]	@ (80054d8 <HAL_DMA_Abort+0x220>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d03b      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a70      	ldr	r2, [pc, #448]	@ (80054dc <HAL_DMA_Abort+0x224>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d036      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a6e      	ldr	r2, [pc, #440]	@ (80054e0 <HAL_DMA_Abort+0x228>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d031      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a6d      	ldr	r2, [pc, #436]	@ (80054e4 <HAL_DMA_Abort+0x22c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d02c      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a6b      	ldr	r2, [pc, #428]	@ (80054e8 <HAL_DMA_Abort+0x230>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d027      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a6a      	ldr	r2, [pc, #424]	@ (80054ec <HAL_DMA_Abort+0x234>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d022      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a68      	ldr	r2, [pc, #416]	@ (80054f0 <HAL_DMA_Abort+0x238>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01d      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a67      	ldr	r2, [pc, #412]	@ (80054f4 <HAL_DMA_Abort+0x23c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d018      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a65      	ldr	r2, [pc, #404]	@ (80054f8 <HAL_DMA_Abort+0x240>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a64      	ldr	r2, [pc, #400]	@ (80054fc <HAL_DMA_Abort+0x244>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a62      	ldr	r2, [pc, #392]	@ (8005500 <HAL_DMA_Abort+0x248>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a61      	ldr	r2, [pc, #388]	@ (8005504 <HAL_DMA_Abort+0x24c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a5f      	ldr	r2, [pc, #380]	@ (8005508 <HAL_DMA_Abort+0x250>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <HAL_DMA_Abort+0xda>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <HAL_DMA_Abort+0xdc>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d013      	beq.n	80053c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 021e 	bic.w	r2, r2, #30
 80053a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e00a      	b.n	80053d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 020e 	bic.w	r2, r2, #14
 80053ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a3c      	ldr	r2, [pc, #240]	@ (80054cc <HAL_DMA_Abort+0x214>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d072      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a3a      	ldr	r2, [pc, #232]	@ (80054d0 <HAL_DMA_Abort+0x218>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d06d      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a39      	ldr	r2, [pc, #228]	@ (80054d4 <HAL_DMA_Abort+0x21c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d068      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a37      	ldr	r2, [pc, #220]	@ (80054d8 <HAL_DMA_Abort+0x220>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d063      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a36      	ldr	r2, [pc, #216]	@ (80054dc <HAL_DMA_Abort+0x224>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d05e      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a34      	ldr	r2, [pc, #208]	@ (80054e0 <HAL_DMA_Abort+0x228>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d059      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a33      	ldr	r2, [pc, #204]	@ (80054e4 <HAL_DMA_Abort+0x22c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d054      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a31      	ldr	r2, [pc, #196]	@ (80054e8 <HAL_DMA_Abort+0x230>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d04f      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a30      	ldr	r2, [pc, #192]	@ (80054ec <HAL_DMA_Abort+0x234>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d04a      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2e      	ldr	r2, [pc, #184]	@ (80054f0 <HAL_DMA_Abort+0x238>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d045      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2d      	ldr	r2, [pc, #180]	@ (80054f4 <HAL_DMA_Abort+0x23c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d040      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a2b      	ldr	r2, [pc, #172]	@ (80054f8 <HAL_DMA_Abort+0x240>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d03b      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a2a      	ldr	r2, [pc, #168]	@ (80054fc <HAL_DMA_Abort+0x244>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d036      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a28      	ldr	r2, [pc, #160]	@ (8005500 <HAL_DMA_Abort+0x248>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d031      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a27      	ldr	r2, [pc, #156]	@ (8005504 <HAL_DMA_Abort+0x24c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d02c      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a25      	ldr	r2, [pc, #148]	@ (8005508 <HAL_DMA_Abort+0x250>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d027      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a24      	ldr	r2, [pc, #144]	@ (800550c <HAL_DMA_Abort+0x254>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a22      	ldr	r2, [pc, #136]	@ (8005510 <HAL_DMA_Abort+0x258>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01d      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a21      	ldr	r2, [pc, #132]	@ (8005514 <HAL_DMA_Abort+0x25c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1f      	ldr	r2, [pc, #124]	@ (8005518 <HAL_DMA_Abort+0x260>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1e      	ldr	r2, [pc, #120]	@ (800551c <HAL_DMA_Abort+0x264>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005520 <HAL_DMA_Abort+0x268>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005524 <HAL_DMA_Abort+0x26c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a19      	ldr	r2, [pc, #100]	@ (8005528 <HAL_DMA_Abort+0x270>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d132      	bne.n	800552c <HAL_DMA_Abort+0x274>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e031      	b.n	800552e <HAL_DMA_Abort+0x276>
 80054ca:	bf00      	nop
 80054cc:	40020010 	.word	0x40020010
 80054d0:	40020028 	.word	0x40020028
 80054d4:	40020040 	.word	0x40020040
 80054d8:	40020058 	.word	0x40020058
 80054dc:	40020070 	.word	0x40020070
 80054e0:	40020088 	.word	0x40020088
 80054e4:	400200a0 	.word	0x400200a0
 80054e8:	400200b8 	.word	0x400200b8
 80054ec:	40020410 	.word	0x40020410
 80054f0:	40020428 	.word	0x40020428
 80054f4:	40020440 	.word	0x40020440
 80054f8:	40020458 	.word	0x40020458
 80054fc:	40020470 	.word	0x40020470
 8005500:	40020488 	.word	0x40020488
 8005504:	400204a0 	.word	0x400204a0
 8005508:	400204b8 	.word	0x400204b8
 800550c:	58025408 	.word	0x58025408
 8005510:	5802541c 	.word	0x5802541c
 8005514:	58025430 	.word	0x58025430
 8005518:	58025444 	.word	0x58025444
 800551c:	58025458 	.word	0x58025458
 8005520:	5802546c 	.word	0x5802546c
 8005524:	58025480 	.word	0x58025480
 8005528:	58025494 	.word	0x58025494
 800552c:	2300      	movs	r3, #0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d007      	beq.n	8005542 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800553c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005540:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a6d      	ldr	r2, [pc, #436]	@ (80056fc <HAL_DMA_Abort+0x444>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d04a      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a6b      	ldr	r2, [pc, #428]	@ (8005700 <HAL_DMA_Abort+0x448>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d045      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a6a      	ldr	r2, [pc, #424]	@ (8005704 <HAL_DMA_Abort+0x44c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d040      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a68      	ldr	r2, [pc, #416]	@ (8005708 <HAL_DMA_Abort+0x450>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d03b      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a67      	ldr	r2, [pc, #412]	@ (800570c <HAL_DMA_Abort+0x454>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d036      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a65      	ldr	r2, [pc, #404]	@ (8005710 <HAL_DMA_Abort+0x458>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d031      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a64      	ldr	r2, [pc, #400]	@ (8005714 <HAL_DMA_Abort+0x45c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d02c      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a62      	ldr	r2, [pc, #392]	@ (8005718 <HAL_DMA_Abort+0x460>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d027      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a61      	ldr	r2, [pc, #388]	@ (800571c <HAL_DMA_Abort+0x464>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d022      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a5f      	ldr	r2, [pc, #380]	@ (8005720 <HAL_DMA_Abort+0x468>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01d      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005724 <HAL_DMA_Abort+0x46c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d018      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a5c      	ldr	r2, [pc, #368]	@ (8005728 <HAL_DMA_Abort+0x470>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a5b      	ldr	r2, [pc, #364]	@ (800572c <HAL_DMA_Abort+0x474>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a59      	ldr	r2, [pc, #356]	@ (8005730 <HAL_DMA_Abort+0x478>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a58      	ldr	r2, [pc, #352]	@ (8005734 <HAL_DMA_Abort+0x47c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a56      	ldr	r2, [pc, #344]	@ (8005738 <HAL_DMA_Abort+0x480>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d108      	bne.n	80055f4 <HAL_DMA_Abort+0x33c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0201 	bic.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e007      	b.n	8005604 <HAL_DMA_Abort+0x34c>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0201 	bic.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005604:	e013      	b.n	800562e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005606:	f7fd fca3 	bl	8002f50 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b05      	cmp	r3, #5
 8005612:	d90c      	bls.n	800562e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2203      	movs	r2, #3
 800561e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e12d      	b.n	800588a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e5      	bne.n	8005606 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a2f      	ldr	r2, [pc, #188]	@ (80056fc <HAL_DMA_Abort+0x444>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d04a      	beq.n	80056da <HAL_DMA_Abort+0x422>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2d      	ldr	r2, [pc, #180]	@ (8005700 <HAL_DMA_Abort+0x448>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d045      	beq.n	80056da <HAL_DMA_Abort+0x422>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2c      	ldr	r2, [pc, #176]	@ (8005704 <HAL_DMA_Abort+0x44c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d040      	beq.n	80056da <HAL_DMA_Abort+0x422>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a2a      	ldr	r2, [pc, #168]	@ (8005708 <HAL_DMA_Abort+0x450>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d03b      	beq.n	80056da <HAL_DMA_Abort+0x422>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a29      	ldr	r2, [pc, #164]	@ (800570c <HAL_DMA_Abort+0x454>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d036      	beq.n	80056da <HAL_DMA_Abort+0x422>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a27      	ldr	r2, [pc, #156]	@ (8005710 <HAL_DMA_Abort+0x458>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d031      	beq.n	80056da <HAL_DMA_Abort+0x422>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a26      	ldr	r2, [pc, #152]	@ (8005714 <HAL_DMA_Abort+0x45c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d02c      	beq.n	80056da <HAL_DMA_Abort+0x422>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a24      	ldr	r2, [pc, #144]	@ (8005718 <HAL_DMA_Abort+0x460>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d027      	beq.n	80056da <HAL_DMA_Abort+0x422>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a23      	ldr	r2, [pc, #140]	@ (800571c <HAL_DMA_Abort+0x464>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <HAL_DMA_Abort+0x422>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a21      	ldr	r2, [pc, #132]	@ (8005720 <HAL_DMA_Abort+0x468>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01d      	beq.n	80056da <HAL_DMA_Abort+0x422>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a20      	ldr	r2, [pc, #128]	@ (8005724 <HAL_DMA_Abort+0x46c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_DMA_Abort+0x422>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005728 <HAL_DMA_Abort+0x470>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_DMA_Abort+0x422>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1d      	ldr	r2, [pc, #116]	@ (800572c <HAL_DMA_Abort+0x474>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_DMA_Abort+0x422>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005730 <HAL_DMA_Abort+0x478>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_DMA_Abort+0x422>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005734 <HAL_DMA_Abort+0x47c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_DMA_Abort+0x422>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a18      	ldr	r2, [pc, #96]	@ (8005738 <HAL_DMA_Abort+0x480>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <HAL_DMA_Abort+0x426>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <HAL_DMA_Abort+0x428>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d02b      	beq.n	800573c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	223f      	movs	r2, #63	@ 0x3f
 80056f4:	409a      	lsls	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	609a      	str	r2, [r3, #8]
 80056fa:	e02a      	b.n	8005752 <HAL_DMA_Abort+0x49a>
 80056fc:	40020010 	.word	0x40020010
 8005700:	40020028 	.word	0x40020028
 8005704:	40020040 	.word	0x40020040
 8005708:	40020058 	.word	0x40020058
 800570c:	40020070 	.word	0x40020070
 8005710:	40020088 	.word	0x40020088
 8005714:	400200a0 	.word	0x400200a0
 8005718:	400200b8 	.word	0x400200b8
 800571c:	40020410 	.word	0x40020410
 8005720:	40020428 	.word	0x40020428
 8005724:	40020440 	.word	0x40020440
 8005728:	40020458 	.word	0x40020458
 800572c:	40020470 	.word	0x40020470
 8005730:	40020488 	.word	0x40020488
 8005734:	400204a0 	.word	0x400204a0
 8005738:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005740:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2201      	movs	r2, #1
 800574c:	409a      	lsls	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a4f      	ldr	r2, [pc, #316]	@ (8005894 <HAL_DMA_Abort+0x5dc>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d072      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a4d      	ldr	r2, [pc, #308]	@ (8005898 <HAL_DMA_Abort+0x5e0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d06d      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a4c      	ldr	r2, [pc, #304]	@ (800589c <HAL_DMA_Abort+0x5e4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d068      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a4a      	ldr	r2, [pc, #296]	@ (80058a0 <HAL_DMA_Abort+0x5e8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d063      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a49      	ldr	r2, [pc, #292]	@ (80058a4 <HAL_DMA_Abort+0x5ec>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d05e      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a47      	ldr	r2, [pc, #284]	@ (80058a8 <HAL_DMA_Abort+0x5f0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d059      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a46      	ldr	r2, [pc, #280]	@ (80058ac <HAL_DMA_Abort+0x5f4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d054      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a44      	ldr	r2, [pc, #272]	@ (80058b0 <HAL_DMA_Abort+0x5f8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d04f      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a43      	ldr	r2, [pc, #268]	@ (80058b4 <HAL_DMA_Abort+0x5fc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d04a      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a41      	ldr	r2, [pc, #260]	@ (80058b8 <HAL_DMA_Abort+0x600>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d045      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a40      	ldr	r2, [pc, #256]	@ (80058bc <HAL_DMA_Abort+0x604>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d040      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a3e      	ldr	r2, [pc, #248]	@ (80058c0 <HAL_DMA_Abort+0x608>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d03b      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a3d      	ldr	r2, [pc, #244]	@ (80058c4 <HAL_DMA_Abort+0x60c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d036      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a3b      	ldr	r2, [pc, #236]	@ (80058c8 <HAL_DMA_Abort+0x610>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d031      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a3a      	ldr	r2, [pc, #232]	@ (80058cc <HAL_DMA_Abort+0x614>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d02c      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a38      	ldr	r2, [pc, #224]	@ (80058d0 <HAL_DMA_Abort+0x618>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d027      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a37      	ldr	r2, [pc, #220]	@ (80058d4 <HAL_DMA_Abort+0x61c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d022      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a35      	ldr	r2, [pc, #212]	@ (80058d8 <HAL_DMA_Abort+0x620>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d01d      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a34      	ldr	r2, [pc, #208]	@ (80058dc <HAL_DMA_Abort+0x624>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d018      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a32      	ldr	r2, [pc, #200]	@ (80058e0 <HAL_DMA_Abort+0x628>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a31      	ldr	r2, [pc, #196]	@ (80058e4 <HAL_DMA_Abort+0x62c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00e      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a2f      	ldr	r2, [pc, #188]	@ (80058e8 <HAL_DMA_Abort+0x630>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d009      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a2e      	ldr	r2, [pc, #184]	@ (80058ec <HAL_DMA_Abort+0x634>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a2c      	ldr	r2, [pc, #176]	@ (80058f0 <HAL_DMA_Abort+0x638>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d101      	bne.n	8005846 <HAL_DMA_Abort+0x58e>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <HAL_DMA_Abort+0x590>
 8005846:	2300      	movs	r3, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d015      	beq.n	8005878 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005854:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00c      	beq.n	8005878 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800586c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005876:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40020010 	.word	0x40020010
 8005898:	40020028 	.word	0x40020028
 800589c:	40020040 	.word	0x40020040
 80058a0:	40020058 	.word	0x40020058
 80058a4:	40020070 	.word	0x40020070
 80058a8:	40020088 	.word	0x40020088
 80058ac:	400200a0 	.word	0x400200a0
 80058b0:	400200b8 	.word	0x400200b8
 80058b4:	40020410 	.word	0x40020410
 80058b8:	40020428 	.word	0x40020428
 80058bc:	40020440 	.word	0x40020440
 80058c0:	40020458 	.word	0x40020458
 80058c4:	40020470 	.word	0x40020470
 80058c8:	40020488 	.word	0x40020488
 80058cc:	400204a0 	.word	0x400204a0
 80058d0:	400204b8 	.word	0x400204b8
 80058d4:	58025408 	.word	0x58025408
 80058d8:	5802541c 	.word	0x5802541c
 80058dc:	58025430 	.word	0x58025430
 80058e0:	58025444 	.word	0x58025444
 80058e4:	58025458 	.word	0x58025458
 80058e8:	5802546c 	.word	0x5802546c
 80058ec:	58025480 	.word	0x58025480
 80058f0:	58025494 	.word	0x58025494

080058f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e237      	b.n	8005d76 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d004      	beq.n	800591c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2280      	movs	r2, #128	@ 0x80
 8005916:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e22c      	b.n	8005d76 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a5c      	ldr	r2, [pc, #368]	@ (8005a94 <HAL_DMA_Abort_IT+0x1a0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d04a      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a5b      	ldr	r2, [pc, #364]	@ (8005a98 <HAL_DMA_Abort_IT+0x1a4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d045      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a59      	ldr	r2, [pc, #356]	@ (8005a9c <HAL_DMA_Abort_IT+0x1a8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d040      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a58      	ldr	r2, [pc, #352]	@ (8005aa0 <HAL_DMA_Abort_IT+0x1ac>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d03b      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a56      	ldr	r2, [pc, #344]	@ (8005aa4 <HAL_DMA_Abort_IT+0x1b0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d036      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a55      	ldr	r2, [pc, #340]	@ (8005aa8 <HAL_DMA_Abort_IT+0x1b4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d031      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a53      	ldr	r2, [pc, #332]	@ (8005aac <HAL_DMA_Abort_IT+0x1b8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d02c      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a52      	ldr	r2, [pc, #328]	@ (8005ab0 <HAL_DMA_Abort_IT+0x1bc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d027      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a50      	ldr	r2, [pc, #320]	@ (8005ab4 <HAL_DMA_Abort_IT+0x1c0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d022      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a4f      	ldr	r2, [pc, #316]	@ (8005ab8 <HAL_DMA_Abort_IT+0x1c4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d01d      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a4d      	ldr	r2, [pc, #308]	@ (8005abc <HAL_DMA_Abort_IT+0x1c8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d018      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a4c      	ldr	r2, [pc, #304]	@ (8005ac0 <HAL_DMA_Abort_IT+0x1cc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d013      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a4a      	ldr	r2, [pc, #296]	@ (8005ac4 <HAL_DMA_Abort_IT+0x1d0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00e      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a49      	ldr	r2, [pc, #292]	@ (8005ac8 <HAL_DMA_Abort_IT+0x1d4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d009      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a47      	ldr	r2, [pc, #284]	@ (8005acc <HAL_DMA_Abort_IT+0x1d8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d004      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a46      	ldr	r2, [pc, #280]	@ (8005ad0 <HAL_DMA_Abort_IT+0x1dc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d101      	bne.n	80059c0 <HAL_DMA_Abort_IT+0xcc>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <HAL_DMA_Abort_IT+0xce>
 80059c0:	2300      	movs	r3, #0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8086 	beq.w	8005ad4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2204      	movs	r2, #4
 80059cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a2f      	ldr	r2, [pc, #188]	@ (8005a94 <HAL_DMA_Abort_IT+0x1a0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d04a      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a2e      	ldr	r2, [pc, #184]	@ (8005a98 <HAL_DMA_Abort_IT+0x1a4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d045      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a2c      	ldr	r2, [pc, #176]	@ (8005a9c <HAL_DMA_Abort_IT+0x1a8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d040      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a2b      	ldr	r2, [pc, #172]	@ (8005aa0 <HAL_DMA_Abort_IT+0x1ac>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d03b      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a29      	ldr	r2, [pc, #164]	@ (8005aa4 <HAL_DMA_Abort_IT+0x1b0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d036      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a28      	ldr	r2, [pc, #160]	@ (8005aa8 <HAL_DMA_Abort_IT+0x1b4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d031      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a26      	ldr	r2, [pc, #152]	@ (8005aac <HAL_DMA_Abort_IT+0x1b8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d02c      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a25      	ldr	r2, [pc, #148]	@ (8005ab0 <HAL_DMA_Abort_IT+0x1bc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d027      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a23      	ldr	r2, [pc, #140]	@ (8005ab4 <HAL_DMA_Abort_IT+0x1c0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d022      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a22      	ldr	r2, [pc, #136]	@ (8005ab8 <HAL_DMA_Abort_IT+0x1c4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d01d      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a20      	ldr	r2, [pc, #128]	@ (8005abc <HAL_DMA_Abort_IT+0x1c8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d018      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac0 <HAL_DMA_Abort_IT+0x1cc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d013      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac4 <HAL_DMA_Abort_IT+0x1d0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00e      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac8 <HAL_DMA_Abort_IT+0x1d4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d009      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1a      	ldr	r2, [pc, #104]	@ (8005acc <HAL_DMA_Abort_IT+0x1d8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d004      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a19      	ldr	r2, [pc, #100]	@ (8005ad0 <HAL_DMA_Abort_IT+0x1dc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d108      	bne.n	8005a82 <HAL_DMA_Abort_IT+0x18e>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0201 	bic.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	e178      	b.n	8005d74 <HAL_DMA_Abort_IT+0x480>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e16f      	b.n	8005d74 <HAL_DMA_Abort_IT+0x480>
 8005a94:	40020010 	.word	0x40020010
 8005a98:	40020028 	.word	0x40020028
 8005a9c:	40020040 	.word	0x40020040
 8005aa0:	40020058 	.word	0x40020058
 8005aa4:	40020070 	.word	0x40020070
 8005aa8:	40020088 	.word	0x40020088
 8005aac:	400200a0 	.word	0x400200a0
 8005ab0:	400200b8 	.word	0x400200b8
 8005ab4:	40020410 	.word	0x40020410
 8005ab8:	40020428 	.word	0x40020428
 8005abc:	40020440 	.word	0x40020440
 8005ac0:	40020458 	.word	0x40020458
 8005ac4:	40020470 	.word	0x40020470
 8005ac8:	40020488 	.word	0x40020488
 8005acc:	400204a0 	.word	0x400204a0
 8005ad0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 020e 	bic.w	r2, r2, #14
 8005ae2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a6c      	ldr	r2, [pc, #432]	@ (8005c9c <HAL_DMA_Abort_IT+0x3a8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d04a      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a6b      	ldr	r2, [pc, #428]	@ (8005ca0 <HAL_DMA_Abort_IT+0x3ac>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d045      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a69      	ldr	r2, [pc, #420]	@ (8005ca4 <HAL_DMA_Abort_IT+0x3b0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d040      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a68      	ldr	r2, [pc, #416]	@ (8005ca8 <HAL_DMA_Abort_IT+0x3b4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d03b      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a66      	ldr	r2, [pc, #408]	@ (8005cac <HAL_DMA_Abort_IT+0x3b8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d036      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a65      	ldr	r2, [pc, #404]	@ (8005cb0 <HAL_DMA_Abort_IT+0x3bc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d031      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a63      	ldr	r2, [pc, #396]	@ (8005cb4 <HAL_DMA_Abort_IT+0x3c0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d02c      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a62      	ldr	r2, [pc, #392]	@ (8005cb8 <HAL_DMA_Abort_IT+0x3c4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d027      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a60      	ldr	r2, [pc, #384]	@ (8005cbc <HAL_DMA_Abort_IT+0x3c8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d022      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a5f      	ldr	r2, [pc, #380]	@ (8005cc0 <HAL_DMA_Abort_IT+0x3cc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d01d      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a5d      	ldr	r2, [pc, #372]	@ (8005cc4 <HAL_DMA_Abort_IT+0x3d0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d018      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a5c      	ldr	r2, [pc, #368]	@ (8005cc8 <HAL_DMA_Abort_IT+0x3d4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5a      	ldr	r2, [pc, #360]	@ (8005ccc <HAL_DMA_Abort_IT+0x3d8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00e      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a59      	ldr	r2, [pc, #356]	@ (8005cd0 <HAL_DMA_Abort_IT+0x3dc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d009      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a57      	ldr	r2, [pc, #348]	@ (8005cd4 <HAL_DMA_Abort_IT+0x3e0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d004      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a56      	ldr	r2, [pc, #344]	@ (8005cd8 <HAL_DMA_Abort_IT+0x3e4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d108      	bne.n	8005b96 <HAL_DMA_Abort_IT+0x2a2>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e007      	b.n	8005ba6 <HAL_DMA_Abort_IT+0x2b2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0201 	bic.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a3c      	ldr	r2, [pc, #240]	@ (8005c9c <HAL_DMA_Abort_IT+0x3a8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d072      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ca0 <HAL_DMA_Abort_IT+0x3ac>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d06d      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a39      	ldr	r2, [pc, #228]	@ (8005ca4 <HAL_DMA_Abort_IT+0x3b0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d068      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a37      	ldr	r2, [pc, #220]	@ (8005ca8 <HAL_DMA_Abort_IT+0x3b4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d063      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a36      	ldr	r2, [pc, #216]	@ (8005cac <HAL_DMA_Abort_IT+0x3b8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d05e      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a34      	ldr	r2, [pc, #208]	@ (8005cb0 <HAL_DMA_Abort_IT+0x3bc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d059      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a33      	ldr	r2, [pc, #204]	@ (8005cb4 <HAL_DMA_Abort_IT+0x3c0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d054      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a31      	ldr	r2, [pc, #196]	@ (8005cb8 <HAL_DMA_Abort_IT+0x3c4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d04f      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a30      	ldr	r2, [pc, #192]	@ (8005cbc <HAL_DMA_Abort_IT+0x3c8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d04a      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a2e      	ldr	r2, [pc, #184]	@ (8005cc0 <HAL_DMA_Abort_IT+0x3cc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d045      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a2d      	ldr	r2, [pc, #180]	@ (8005cc4 <HAL_DMA_Abort_IT+0x3d0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d040      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a2b      	ldr	r2, [pc, #172]	@ (8005cc8 <HAL_DMA_Abort_IT+0x3d4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d03b      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a2a      	ldr	r2, [pc, #168]	@ (8005ccc <HAL_DMA_Abort_IT+0x3d8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d036      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a28      	ldr	r2, [pc, #160]	@ (8005cd0 <HAL_DMA_Abort_IT+0x3dc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d031      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a27      	ldr	r2, [pc, #156]	@ (8005cd4 <HAL_DMA_Abort_IT+0x3e0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d02c      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a25      	ldr	r2, [pc, #148]	@ (8005cd8 <HAL_DMA_Abort_IT+0x3e4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d027      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a24      	ldr	r2, [pc, #144]	@ (8005cdc <HAL_DMA_Abort_IT+0x3e8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a22      	ldr	r2, [pc, #136]	@ (8005ce0 <HAL_DMA_Abort_IT+0x3ec>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01d      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a21      	ldr	r2, [pc, #132]	@ (8005ce4 <HAL_DMA_Abort_IT+0x3f0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce8 <HAL_DMA_Abort_IT+0x3f4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1e      	ldr	r2, [pc, #120]	@ (8005cec <HAL_DMA_Abort_IT+0x3f8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf0 <HAL_DMA_Abort_IT+0x3fc>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf4 <HAL_DMA_Abort_IT+0x400>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a19      	ldr	r2, [pc, #100]	@ (8005cf8 <HAL_DMA_Abort_IT+0x404>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d132      	bne.n	8005cfc <HAL_DMA_Abort_IT+0x408>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e031      	b.n	8005cfe <HAL_DMA_Abort_IT+0x40a>
 8005c9a:	bf00      	nop
 8005c9c:	40020010 	.word	0x40020010
 8005ca0:	40020028 	.word	0x40020028
 8005ca4:	40020040 	.word	0x40020040
 8005ca8:	40020058 	.word	0x40020058
 8005cac:	40020070 	.word	0x40020070
 8005cb0:	40020088 	.word	0x40020088
 8005cb4:	400200a0 	.word	0x400200a0
 8005cb8:	400200b8 	.word	0x400200b8
 8005cbc:	40020410 	.word	0x40020410
 8005cc0:	40020428 	.word	0x40020428
 8005cc4:	40020440 	.word	0x40020440
 8005cc8:	40020458 	.word	0x40020458
 8005ccc:	40020470 	.word	0x40020470
 8005cd0:	40020488 	.word	0x40020488
 8005cd4:	400204a0 	.word	0x400204a0
 8005cd8:	400204b8 	.word	0x400204b8
 8005cdc:	58025408 	.word	0x58025408
 8005ce0:	5802541c 	.word	0x5802541c
 8005ce4:	58025430 	.word	0x58025430
 8005ce8:	58025444 	.word	0x58025444
 8005cec:	58025458 	.word	0x58025458
 8005cf0:	5802546c 	.word	0x5802546c
 8005cf4:	58025480 	.word	0x58025480
 8005cf8:	58025494 	.word	0x58025494
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d028      	beq.n	8005d54 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d10:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d16:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	2201      	movs	r2, #1
 8005d22:	409a      	lsls	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d30:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00c      	beq.n	8005d54 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d48:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d52:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop

08005d80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08a      	sub	sp, #40	@ 0x28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d8c:	4b67      	ldr	r3, [pc, #412]	@ (8005f2c <HAL_DMA_IRQHandler+0x1ac>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a67      	ldr	r2, [pc, #412]	@ (8005f30 <HAL_DMA_IRQHandler+0x1b0>)
 8005d92:	fba2 2303 	umull	r2, r3, r2, r3
 8005d96:	0a9b      	lsrs	r3, r3, #10
 8005d98:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a5f      	ldr	r2, [pc, #380]	@ (8005f34 <HAL_DMA_IRQHandler+0x1b4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d04a      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8005f38 <HAL_DMA_IRQHandler+0x1b8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d045      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a5c      	ldr	r2, [pc, #368]	@ (8005f3c <HAL_DMA_IRQHandler+0x1bc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d040      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a5a      	ldr	r2, [pc, #360]	@ (8005f40 <HAL_DMA_IRQHandler+0x1c0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d03b      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a59      	ldr	r2, [pc, #356]	@ (8005f44 <HAL_DMA_IRQHandler+0x1c4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d036      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a57      	ldr	r2, [pc, #348]	@ (8005f48 <HAL_DMA_IRQHandler+0x1c8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d031      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a56      	ldr	r2, [pc, #344]	@ (8005f4c <HAL_DMA_IRQHandler+0x1cc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d02c      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a54      	ldr	r2, [pc, #336]	@ (8005f50 <HAL_DMA_IRQHandler+0x1d0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d027      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a53      	ldr	r2, [pc, #332]	@ (8005f54 <HAL_DMA_IRQHandler+0x1d4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d022      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a51      	ldr	r2, [pc, #324]	@ (8005f58 <HAL_DMA_IRQHandler+0x1d8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d01d      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a50      	ldr	r2, [pc, #320]	@ (8005f5c <HAL_DMA_IRQHandler+0x1dc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d018      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a4e      	ldr	r2, [pc, #312]	@ (8005f60 <HAL_DMA_IRQHandler+0x1e0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d013      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a4d      	ldr	r2, [pc, #308]	@ (8005f64 <HAL_DMA_IRQHandler+0x1e4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00e      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a4b      	ldr	r2, [pc, #300]	@ (8005f68 <HAL_DMA_IRQHandler+0x1e8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d009      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a4a      	ldr	r2, [pc, #296]	@ (8005f6c <HAL_DMA_IRQHandler+0x1ec>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d004      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a48      	ldr	r2, [pc, #288]	@ (8005f70 <HAL_DMA_IRQHandler+0x1f0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d101      	bne.n	8005e56 <HAL_DMA_IRQHandler+0xd6>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <HAL_DMA_IRQHandler+0xd8>
 8005e56:	2300      	movs	r3, #0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 842b 	beq.w	80066b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e62:	f003 031f 	and.w	r3, r3, #31
 8005e66:	2208      	movs	r2, #8
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 80a2 	beq.w	8005fb8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a2e      	ldr	r2, [pc, #184]	@ (8005f34 <HAL_DMA_IRQHandler+0x1b4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d04a      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a2d      	ldr	r2, [pc, #180]	@ (8005f38 <HAL_DMA_IRQHandler+0x1b8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d045      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005f3c <HAL_DMA_IRQHandler+0x1bc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d040      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a2a      	ldr	r2, [pc, #168]	@ (8005f40 <HAL_DMA_IRQHandler+0x1c0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d03b      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a28      	ldr	r2, [pc, #160]	@ (8005f44 <HAL_DMA_IRQHandler+0x1c4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d036      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a27      	ldr	r2, [pc, #156]	@ (8005f48 <HAL_DMA_IRQHandler+0x1c8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d031      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a25      	ldr	r2, [pc, #148]	@ (8005f4c <HAL_DMA_IRQHandler+0x1cc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d02c      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a24      	ldr	r2, [pc, #144]	@ (8005f50 <HAL_DMA_IRQHandler+0x1d0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d027      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a22      	ldr	r2, [pc, #136]	@ (8005f54 <HAL_DMA_IRQHandler+0x1d4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d022      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a21      	ldr	r2, [pc, #132]	@ (8005f58 <HAL_DMA_IRQHandler+0x1d8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d01d      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1f      	ldr	r2, [pc, #124]	@ (8005f5c <HAL_DMA_IRQHandler+0x1dc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d018      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8005f60 <HAL_DMA_IRQHandler+0x1e0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d013      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f64 <HAL_DMA_IRQHandler+0x1e4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00e      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1b      	ldr	r2, [pc, #108]	@ (8005f68 <HAL_DMA_IRQHandler+0x1e8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d009      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a19      	ldr	r2, [pc, #100]	@ (8005f6c <HAL_DMA_IRQHandler+0x1ec>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d004      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a18      	ldr	r2, [pc, #96]	@ (8005f70 <HAL_DMA_IRQHandler+0x1f0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d12f      	bne.n	8005f74 <HAL_DMA_IRQHandler+0x1f4>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bf14      	ite	ne
 8005f22:	2301      	movne	r3, #1
 8005f24:	2300      	moveq	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	e02e      	b.n	8005f88 <HAL_DMA_IRQHandler+0x208>
 8005f2a:	bf00      	nop
 8005f2c:	24000004 	.word	0x24000004
 8005f30:	1b4e81b5 	.word	0x1b4e81b5
 8005f34:	40020010 	.word	0x40020010
 8005f38:	40020028 	.word	0x40020028
 8005f3c:	40020040 	.word	0x40020040
 8005f40:	40020058 	.word	0x40020058
 8005f44:	40020070 	.word	0x40020070
 8005f48:	40020088 	.word	0x40020088
 8005f4c:	400200a0 	.word	0x400200a0
 8005f50:	400200b8 	.word	0x400200b8
 8005f54:	40020410 	.word	0x40020410
 8005f58:	40020428 	.word	0x40020428
 8005f5c:	40020440 	.word	0x40020440
 8005f60:	40020458 	.word	0x40020458
 8005f64:	40020470 	.word	0x40020470
 8005f68:	40020488 	.word	0x40020488
 8005f6c:	400204a0 	.word	0x400204a0
 8005f70:	400204b8 	.word	0x400204b8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bf14      	ite	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	2300      	moveq	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d015      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0204 	bic.w	r2, r2, #4
 8005f9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa0:	f003 031f 	and.w	r3, r3, #31
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	409a      	lsls	r2, r3
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb0:	f043 0201 	orr.w	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbc:	f003 031f 	and.w	r3, r3, #31
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d06e      	beq.n	80060ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a69      	ldr	r2, [pc, #420]	@ (8006178 <HAL_DMA_IRQHandler+0x3f8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d04a      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a67      	ldr	r2, [pc, #412]	@ (800617c <HAL_DMA_IRQHandler+0x3fc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d045      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a66      	ldr	r2, [pc, #408]	@ (8006180 <HAL_DMA_IRQHandler+0x400>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d040      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a64      	ldr	r2, [pc, #400]	@ (8006184 <HAL_DMA_IRQHandler+0x404>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d03b      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a63      	ldr	r2, [pc, #396]	@ (8006188 <HAL_DMA_IRQHandler+0x408>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d036      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a61      	ldr	r2, [pc, #388]	@ (800618c <HAL_DMA_IRQHandler+0x40c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d031      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a60      	ldr	r2, [pc, #384]	@ (8006190 <HAL_DMA_IRQHandler+0x410>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d02c      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a5e      	ldr	r2, [pc, #376]	@ (8006194 <HAL_DMA_IRQHandler+0x414>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d027      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a5d      	ldr	r2, [pc, #372]	@ (8006198 <HAL_DMA_IRQHandler+0x418>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d022      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a5b      	ldr	r2, [pc, #364]	@ (800619c <HAL_DMA_IRQHandler+0x41c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01d      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a5a      	ldr	r2, [pc, #360]	@ (80061a0 <HAL_DMA_IRQHandler+0x420>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d018      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a58      	ldr	r2, [pc, #352]	@ (80061a4 <HAL_DMA_IRQHandler+0x424>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d013      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a57      	ldr	r2, [pc, #348]	@ (80061a8 <HAL_DMA_IRQHandler+0x428>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00e      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a55      	ldr	r2, [pc, #340]	@ (80061ac <HAL_DMA_IRQHandler+0x42c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d009      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a54      	ldr	r2, [pc, #336]	@ (80061b0 <HAL_DMA_IRQHandler+0x430>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d004      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a52      	ldr	r2, [pc, #328]	@ (80061b4 <HAL_DMA_IRQHandler+0x434>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d10a      	bne.n	8006084 <HAL_DMA_IRQHandler+0x304>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006078:	2b00      	cmp	r3, #0
 800607a:	bf14      	ite	ne
 800607c:	2301      	movne	r3, #1
 800607e:	2300      	moveq	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	e003      	b.n	800608c <HAL_DMA_IRQHandler+0x30c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2300      	movs	r3, #0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00d      	beq.n	80060ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	2201      	movs	r2, #1
 800609a:	409a      	lsls	r2, r3
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a4:	f043 0202 	orr.w	r2, r3, #2
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b0:	f003 031f 	and.w	r3, r3, #31
 80060b4:	2204      	movs	r2, #4
 80060b6:	409a      	lsls	r2, r3
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 808f 	beq.w	80061e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006178 <HAL_DMA_IRQHandler+0x3f8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d04a      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a2a      	ldr	r2, [pc, #168]	@ (800617c <HAL_DMA_IRQHandler+0x3fc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d045      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a29      	ldr	r2, [pc, #164]	@ (8006180 <HAL_DMA_IRQHandler+0x400>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d040      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a27      	ldr	r2, [pc, #156]	@ (8006184 <HAL_DMA_IRQHandler+0x404>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d03b      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a26      	ldr	r2, [pc, #152]	@ (8006188 <HAL_DMA_IRQHandler+0x408>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d036      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a24      	ldr	r2, [pc, #144]	@ (800618c <HAL_DMA_IRQHandler+0x40c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d031      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a23      	ldr	r2, [pc, #140]	@ (8006190 <HAL_DMA_IRQHandler+0x410>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d02c      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a21      	ldr	r2, [pc, #132]	@ (8006194 <HAL_DMA_IRQHandler+0x414>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d027      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a20      	ldr	r2, [pc, #128]	@ (8006198 <HAL_DMA_IRQHandler+0x418>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d022      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1e      	ldr	r2, [pc, #120]	@ (800619c <HAL_DMA_IRQHandler+0x41c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d01d      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1d      	ldr	r2, [pc, #116]	@ (80061a0 <HAL_DMA_IRQHandler+0x420>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d018      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1b      	ldr	r2, [pc, #108]	@ (80061a4 <HAL_DMA_IRQHandler+0x424>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d013      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1a      	ldr	r2, [pc, #104]	@ (80061a8 <HAL_DMA_IRQHandler+0x428>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00e      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a18      	ldr	r2, [pc, #96]	@ (80061ac <HAL_DMA_IRQHandler+0x42c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d009      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a17      	ldr	r2, [pc, #92]	@ (80061b0 <HAL_DMA_IRQHandler+0x430>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d004      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a15      	ldr	r2, [pc, #84]	@ (80061b4 <HAL_DMA_IRQHandler+0x434>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d12a      	bne.n	80061b8 <HAL_DMA_IRQHandler+0x438>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	bf14      	ite	ne
 8006170:	2301      	movne	r3, #1
 8006172:	2300      	moveq	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	e023      	b.n	80061c0 <HAL_DMA_IRQHandler+0x440>
 8006178:	40020010 	.word	0x40020010
 800617c:	40020028 	.word	0x40020028
 8006180:	40020040 	.word	0x40020040
 8006184:	40020058 	.word	0x40020058
 8006188:	40020070 	.word	0x40020070
 800618c:	40020088 	.word	0x40020088
 8006190:	400200a0 	.word	0x400200a0
 8006194:	400200b8 	.word	0x400200b8
 8006198:	40020410 	.word	0x40020410
 800619c:	40020428 	.word	0x40020428
 80061a0:	40020440 	.word	0x40020440
 80061a4:	40020458 	.word	0x40020458
 80061a8:	40020470 	.word	0x40020470
 80061ac:	40020488 	.word	0x40020488
 80061b0:	400204a0 	.word	0x400204a0
 80061b4:	400204b8 	.word	0x400204b8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2300      	movs	r3, #0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00d      	beq.n	80061e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2204      	movs	r2, #4
 80061ce:	409a      	lsls	r2, r3
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d8:	f043 0204 	orr.w	r2, r3, #4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	2210      	movs	r2, #16
 80061ea:	409a      	lsls	r2, r3
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 80a6 	beq.w	8006342 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a85      	ldr	r2, [pc, #532]	@ (8006410 <HAL_DMA_IRQHandler+0x690>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d04a      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a83      	ldr	r2, [pc, #524]	@ (8006414 <HAL_DMA_IRQHandler+0x694>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d045      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a82      	ldr	r2, [pc, #520]	@ (8006418 <HAL_DMA_IRQHandler+0x698>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d040      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a80      	ldr	r2, [pc, #512]	@ (800641c <HAL_DMA_IRQHandler+0x69c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d03b      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a7f      	ldr	r2, [pc, #508]	@ (8006420 <HAL_DMA_IRQHandler+0x6a0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d036      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a7d      	ldr	r2, [pc, #500]	@ (8006424 <HAL_DMA_IRQHandler+0x6a4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d031      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a7c      	ldr	r2, [pc, #496]	@ (8006428 <HAL_DMA_IRQHandler+0x6a8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d02c      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a7a      	ldr	r2, [pc, #488]	@ (800642c <HAL_DMA_IRQHandler+0x6ac>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d027      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a79      	ldr	r2, [pc, #484]	@ (8006430 <HAL_DMA_IRQHandler+0x6b0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d022      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a77      	ldr	r2, [pc, #476]	@ (8006434 <HAL_DMA_IRQHandler+0x6b4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01d      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a76      	ldr	r2, [pc, #472]	@ (8006438 <HAL_DMA_IRQHandler+0x6b8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d018      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a74      	ldr	r2, [pc, #464]	@ (800643c <HAL_DMA_IRQHandler+0x6bc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a73      	ldr	r2, [pc, #460]	@ (8006440 <HAL_DMA_IRQHandler+0x6c0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a71      	ldr	r2, [pc, #452]	@ (8006444 <HAL_DMA_IRQHandler+0x6c4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a70      	ldr	r2, [pc, #448]	@ (8006448 <HAL_DMA_IRQHandler+0x6c8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a6e      	ldr	r2, [pc, #440]	@ (800644c <HAL_DMA_IRQHandler+0x6cc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d10a      	bne.n	80062ac <HAL_DMA_IRQHandler+0x52c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf14      	ite	ne
 80062a4:	2301      	movne	r3, #1
 80062a6:	2300      	moveq	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e009      	b.n	80062c0 <HAL_DMA_IRQHandler+0x540>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bf14      	ite	ne
 80062ba:	2301      	movne	r3, #1
 80062bc:	2300      	moveq	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d03e      	beq.n	8006342 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	2210      	movs	r2, #16
 80062ce:	409a      	lsls	r2, r3
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d018      	beq.n	8006314 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d108      	bne.n	8006302 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d024      	beq.n	8006342 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
 8006300:	e01f      	b.n	8006342 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01b      	beq.n	8006342 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	4798      	blx	r3
 8006312:	e016      	b.n	8006342 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631e:	2b00      	cmp	r3, #0
 8006320:	d107      	bne.n	8006332 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0208 	bic.w	r2, r2, #8
 8006330:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006346:	f003 031f 	and.w	r3, r3, #31
 800634a:	2220      	movs	r2, #32
 800634c:	409a      	lsls	r2, r3
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	4013      	ands	r3, r2
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 8110 	beq.w	8006578 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a2c      	ldr	r2, [pc, #176]	@ (8006410 <HAL_DMA_IRQHandler+0x690>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d04a      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a2b      	ldr	r2, [pc, #172]	@ (8006414 <HAL_DMA_IRQHandler+0x694>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d045      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a29      	ldr	r2, [pc, #164]	@ (8006418 <HAL_DMA_IRQHandler+0x698>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d040      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a28      	ldr	r2, [pc, #160]	@ (800641c <HAL_DMA_IRQHandler+0x69c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d03b      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a26      	ldr	r2, [pc, #152]	@ (8006420 <HAL_DMA_IRQHandler+0x6a0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d036      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a25      	ldr	r2, [pc, #148]	@ (8006424 <HAL_DMA_IRQHandler+0x6a4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d031      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a23      	ldr	r2, [pc, #140]	@ (8006428 <HAL_DMA_IRQHandler+0x6a8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d02c      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a22      	ldr	r2, [pc, #136]	@ (800642c <HAL_DMA_IRQHandler+0x6ac>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d027      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a20      	ldr	r2, [pc, #128]	@ (8006430 <HAL_DMA_IRQHandler+0x6b0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d022      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006434 <HAL_DMA_IRQHandler+0x6b4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d01d      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006438 <HAL_DMA_IRQHandler+0x6b8>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d018      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1c      	ldr	r2, [pc, #112]	@ (800643c <HAL_DMA_IRQHandler+0x6bc>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d013      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006440 <HAL_DMA_IRQHandler+0x6c0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00e      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a19      	ldr	r2, [pc, #100]	@ (8006444 <HAL_DMA_IRQHandler+0x6c4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d009      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a17      	ldr	r2, [pc, #92]	@ (8006448 <HAL_DMA_IRQHandler+0x6c8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a16      	ldr	r2, [pc, #88]	@ (800644c <HAL_DMA_IRQHandler+0x6cc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d12b      	bne.n	8006450 <HAL_DMA_IRQHandler+0x6d0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	bf14      	ite	ne
 8006406:	2301      	movne	r3, #1
 8006408:	2300      	moveq	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	e02a      	b.n	8006464 <HAL_DMA_IRQHandler+0x6e4>
 800640e:	bf00      	nop
 8006410:	40020010 	.word	0x40020010
 8006414:	40020028 	.word	0x40020028
 8006418:	40020040 	.word	0x40020040
 800641c:	40020058 	.word	0x40020058
 8006420:	40020070 	.word	0x40020070
 8006424:	40020088 	.word	0x40020088
 8006428:	400200a0 	.word	0x400200a0
 800642c:	400200b8 	.word	0x400200b8
 8006430:	40020410 	.word	0x40020410
 8006434:	40020428 	.word	0x40020428
 8006438:	40020440 	.word	0x40020440
 800643c:	40020458 	.word	0x40020458
 8006440:	40020470 	.word	0x40020470
 8006444:	40020488 	.word	0x40020488
 8006448:	400204a0 	.word	0x400204a0
 800644c:	400204b8 	.word	0x400204b8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	bf14      	ite	ne
 800645e:	2301      	movne	r3, #1
 8006460:	2300      	moveq	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8087 	beq.w	8006578 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	2220      	movs	r2, #32
 8006474:	409a      	lsls	r2, r3
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b04      	cmp	r3, #4
 8006484:	d139      	bne.n	80064fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0216 	bic.w	r2, r2, #22
 8006494:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695a      	ldr	r2, [r3, #20]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d103      	bne.n	80064b6 <HAL_DMA_IRQHandler+0x736>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0208 	bic.w	r2, r2, #8
 80064c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	223f      	movs	r2, #63	@ 0x3f
 80064d0:	409a      	lsls	r2, r3
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 834a 	beq.w	8006b84 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4798      	blx	r3
          }
          return;
 80064f8:	e344      	b.n	8006b84 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d018      	beq.n	800653a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d108      	bne.n	8006528 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651a:	2b00      	cmp	r3, #0
 800651c:	d02c      	beq.n	8006578 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	4798      	blx	r3
 8006526:	e027      	b.n	8006578 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d023      	beq.n	8006578 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	4798      	blx	r3
 8006538:	e01e      	b.n	8006578 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10f      	bne.n	8006568 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0210 	bic.w	r2, r2, #16
 8006556:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 8306 	beq.w	8006b8e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8088 	beq.w	80066a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2204      	movs	r2, #4
 8006594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a7a      	ldr	r2, [pc, #488]	@ (8006788 <HAL_DMA_IRQHandler+0xa08>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d04a      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a79      	ldr	r2, [pc, #484]	@ (800678c <HAL_DMA_IRQHandler+0xa0c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d045      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a77      	ldr	r2, [pc, #476]	@ (8006790 <HAL_DMA_IRQHandler+0xa10>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d040      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a76      	ldr	r2, [pc, #472]	@ (8006794 <HAL_DMA_IRQHandler+0xa14>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d03b      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a74      	ldr	r2, [pc, #464]	@ (8006798 <HAL_DMA_IRQHandler+0xa18>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d036      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a73      	ldr	r2, [pc, #460]	@ (800679c <HAL_DMA_IRQHandler+0xa1c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d031      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a71      	ldr	r2, [pc, #452]	@ (80067a0 <HAL_DMA_IRQHandler+0xa20>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d02c      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a70      	ldr	r2, [pc, #448]	@ (80067a4 <HAL_DMA_IRQHandler+0xa24>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d027      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a6e      	ldr	r2, [pc, #440]	@ (80067a8 <HAL_DMA_IRQHandler+0xa28>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d022      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a6d      	ldr	r2, [pc, #436]	@ (80067ac <HAL_DMA_IRQHandler+0xa2c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d01d      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a6b      	ldr	r2, [pc, #428]	@ (80067b0 <HAL_DMA_IRQHandler+0xa30>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d018      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a6a      	ldr	r2, [pc, #424]	@ (80067b4 <HAL_DMA_IRQHandler+0xa34>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d013      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a68      	ldr	r2, [pc, #416]	@ (80067b8 <HAL_DMA_IRQHandler+0xa38>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00e      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a67      	ldr	r2, [pc, #412]	@ (80067bc <HAL_DMA_IRQHandler+0xa3c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d009      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a65      	ldr	r2, [pc, #404]	@ (80067c0 <HAL_DMA_IRQHandler+0xa40>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a64      	ldr	r2, [pc, #400]	@ (80067c4 <HAL_DMA_IRQHandler+0xa44>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d108      	bne.n	800664a <HAL_DMA_IRQHandler+0x8ca>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e007      	b.n	800665a <HAL_DMA_IRQHandler+0x8da>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0201 	bic.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3301      	adds	r3, #1
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006662:	429a      	cmp	r2, r3
 8006664:	d307      	bcc.n	8006676 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f2      	bne.n	800665a <HAL_DMA_IRQHandler+0x8da>
 8006674:	e000      	b.n	8006678 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006676:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d004      	beq.n	8006690 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2203      	movs	r2, #3
 800668a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800668e:	e003      	b.n	8006698 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8272 	beq.w	8006b8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
 80066b2:	e26c      	b.n	8006b8e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a43      	ldr	r2, [pc, #268]	@ (80067c8 <HAL_DMA_IRQHandler+0xa48>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d022      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a42      	ldr	r2, [pc, #264]	@ (80067cc <HAL_DMA_IRQHandler+0xa4c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d01d      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a40      	ldr	r2, [pc, #256]	@ (80067d0 <HAL_DMA_IRQHandler+0xa50>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d018      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a3f      	ldr	r2, [pc, #252]	@ (80067d4 <HAL_DMA_IRQHandler+0xa54>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d013      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a3d      	ldr	r2, [pc, #244]	@ (80067d8 <HAL_DMA_IRQHandler+0xa58>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00e      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a3c      	ldr	r2, [pc, #240]	@ (80067dc <HAL_DMA_IRQHandler+0xa5c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d009      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a3a      	ldr	r2, [pc, #232]	@ (80067e0 <HAL_DMA_IRQHandler+0xa60>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a39      	ldr	r2, [pc, #228]	@ (80067e4 <HAL_DMA_IRQHandler+0xa64>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d101      	bne.n	8006708 <HAL_DMA_IRQHandler+0x988>
 8006704:	2301      	movs	r3, #1
 8006706:	e000      	b.n	800670a <HAL_DMA_IRQHandler+0x98a>
 8006708:	2300      	movs	r3, #0
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 823f 	beq.w	8006b8e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800671c:	f003 031f 	and.w	r3, r3, #31
 8006720:	2204      	movs	r2, #4
 8006722:	409a      	lsls	r2, r3
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	4013      	ands	r3, r2
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80cd 	beq.w	80068c8 <HAL_DMA_IRQHandler+0xb48>
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80c7 	beq.w	80068c8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	2204      	movs	r2, #4
 8006744:	409a      	lsls	r2, r3
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d049      	beq.n	80067e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8210 	beq.w	8006b88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006770:	e20a      	b.n	8006b88 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8206 	beq.w	8006b88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006784:	e200      	b.n	8006b88 <HAL_DMA_IRQHandler+0xe08>
 8006786:	bf00      	nop
 8006788:	40020010 	.word	0x40020010
 800678c:	40020028 	.word	0x40020028
 8006790:	40020040 	.word	0x40020040
 8006794:	40020058 	.word	0x40020058
 8006798:	40020070 	.word	0x40020070
 800679c:	40020088 	.word	0x40020088
 80067a0:	400200a0 	.word	0x400200a0
 80067a4:	400200b8 	.word	0x400200b8
 80067a8:	40020410 	.word	0x40020410
 80067ac:	40020428 	.word	0x40020428
 80067b0:	40020440 	.word	0x40020440
 80067b4:	40020458 	.word	0x40020458
 80067b8:	40020470 	.word	0x40020470
 80067bc:	40020488 	.word	0x40020488
 80067c0:	400204a0 	.word	0x400204a0
 80067c4:	400204b8 	.word	0x400204b8
 80067c8:	58025408 	.word	0x58025408
 80067cc:	5802541c 	.word	0x5802541c
 80067d0:	58025430 	.word	0x58025430
 80067d4:	58025444 	.word	0x58025444
 80067d8:	58025458 	.word	0x58025458
 80067dc:	5802546c 	.word	0x5802546c
 80067e0:	58025480 	.word	0x58025480
 80067e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d160      	bne.n	80068b4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a7f      	ldr	r2, [pc, #508]	@ (80069f4 <HAL_DMA_IRQHandler+0xc74>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d04a      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a7d      	ldr	r2, [pc, #500]	@ (80069f8 <HAL_DMA_IRQHandler+0xc78>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d045      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a7c      	ldr	r2, [pc, #496]	@ (80069fc <HAL_DMA_IRQHandler+0xc7c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d040      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a7a      	ldr	r2, [pc, #488]	@ (8006a00 <HAL_DMA_IRQHandler+0xc80>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d03b      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a79      	ldr	r2, [pc, #484]	@ (8006a04 <HAL_DMA_IRQHandler+0xc84>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d036      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a77      	ldr	r2, [pc, #476]	@ (8006a08 <HAL_DMA_IRQHandler+0xc88>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d031      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a76      	ldr	r2, [pc, #472]	@ (8006a0c <HAL_DMA_IRQHandler+0xc8c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d02c      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a74      	ldr	r2, [pc, #464]	@ (8006a10 <HAL_DMA_IRQHandler+0xc90>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d027      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a73      	ldr	r2, [pc, #460]	@ (8006a14 <HAL_DMA_IRQHandler+0xc94>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d022      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a71      	ldr	r2, [pc, #452]	@ (8006a18 <HAL_DMA_IRQHandler+0xc98>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d01d      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a70      	ldr	r2, [pc, #448]	@ (8006a1c <HAL_DMA_IRQHandler+0xc9c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d018      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a6e      	ldr	r2, [pc, #440]	@ (8006a20 <HAL_DMA_IRQHandler+0xca0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d013      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a6d      	ldr	r2, [pc, #436]	@ (8006a24 <HAL_DMA_IRQHandler+0xca4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00e      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a6b      	ldr	r2, [pc, #428]	@ (8006a28 <HAL_DMA_IRQHandler+0xca8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d009      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a6a      	ldr	r2, [pc, #424]	@ (8006a2c <HAL_DMA_IRQHandler+0xcac>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d004      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a68      	ldr	r2, [pc, #416]	@ (8006a30 <HAL_DMA_IRQHandler+0xcb0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d108      	bne.n	80068a4 <HAL_DMA_IRQHandler+0xb24>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0208 	bic.w	r2, r2, #8
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	e007      	b.n	80068b4 <HAL_DMA_IRQHandler+0xb34>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0204 	bic.w	r2, r2, #4
 80068b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8165 	beq.w	8006b88 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068c6:	e15f      	b.n	8006b88 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	2202      	movs	r2, #2
 80068d2:	409a      	lsls	r2, r3
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4013      	ands	r3, r2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 80c5 	beq.w	8006a68 <HAL_DMA_IRQHandler+0xce8>
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 80bf 	beq.w	8006a68 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	2202      	movs	r2, #2
 80068f4:	409a      	lsls	r2, r3
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d018      	beq.n	8006936 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 813a 	beq.w	8006b8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006920:	e134      	b.n	8006b8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 8130 	beq.w	8006b8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006934:	e12a      	b.n	8006b8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 8089 	bne.w	8006a54 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a2b      	ldr	r2, [pc, #172]	@ (80069f4 <HAL_DMA_IRQHandler+0xc74>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d04a      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a29      	ldr	r2, [pc, #164]	@ (80069f8 <HAL_DMA_IRQHandler+0xc78>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d045      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a28      	ldr	r2, [pc, #160]	@ (80069fc <HAL_DMA_IRQHandler+0xc7c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d040      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a26      	ldr	r2, [pc, #152]	@ (8006a00 <HAL_DMA_IRQHandler+0xc80>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d03b      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a25      	ldr	r2, [pc, #148]	@ (8006a04 <HAL_DMA_IRQHandler+0xc84>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d036      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a23      	ldr	r2, [pc, #140]	@ (8006a08 <HAL_DMA_IRQHandler+0xc88>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d031      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a22      	ldr	r2, [pc, #136]	@ (8006a0c <HAL_DMA_IRQHandler+0xc8c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d02c      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a20      	ldr	r2, [pc, #128]	@ (8006a10 <HAL_DMA_IRQHandler+0xc90>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d027      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1f      	ldr	r2, [pc, #124]	@ (8006a14 <HAL_DMA_IRQHandler+0xc94>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d022      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a18 <HAL_DMA_IRQHandler+0xc98>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01d      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1c      	ldr	r2, [pc, #112]	@ (8006a1c <HAL_DMA_IRQHandler+0xc9c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d018      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006a20 <HAL_DMA_IRQHandler+0xca0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a19      	ldr	r2, [pc, #100]	@ (8006a24 <HAL_DMA_IRQHandler+0xca4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00e      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a17      	ldr	r2, [pc, #92]	@ (8006a28 <HAL_DMA_IRQHandler+0xca8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d009      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a16      	ldr	r2, [pc, #88]	@ (8006a2c <HAL_DMA_IRQHandler+0xcac>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a14      	ldr	r2, [pc, #80]	@ (8006a30 <HAL_DMA_IRQHandler+0xcb0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d128      	bne.n	8006a34 <HAL_DMA_IRQHandler+0xcb4>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0214 	bic.w	r2, r2, #20
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	e027      	b.n	8006a44 <HAL_DMA_IRQHandler+0xcc4>
 80069f4:	40020010 	.word	0x40020010
 80069f8:	40020028 	.word	0x40020028
 80069fc:	40020040 	.word	0x40020040
 8006a00:	40020058 	.word	0x40020058
 8006a04:	40020070 	.word	0x40020070
 8006a08:	40020088 	.word	0x40020088
 8006a0c:	400200a0 	.word	0x400200a0
 8006a10:	400200b8 	.word	0x400200b8
 8006a14:	40020410 	.word	0x40020410
 8006a18:	40020428 	.word	0x40020428
 8006a1c:	40020440 	.word	0x40020440
 8006a20:	40020458 	.word	0x40020458
 8006a24:	40020470 	.word	0x40020470
 8006a28:	40020488 	.word	0x40020488
 8006a2c:	400204a0 	.word	0x400204a0
 8006a30:	400204b8 	.word	0x400204b8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 020a 	bic.w	r2, r2, #10
 8006a42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8097 	beq.w	8006b8c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a66:	e091      	b.n	8006b8c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a6c:	f003 031f 	and.w	r3, r3, #31
 8006a70:	2208      	movs	r2, #8
 8006a72:	409a      	lsls	r2, r3
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	4013      	ands	r3, r2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 8088 	beq.w	8006b8e <HAL_DMA_IRQHandler+0xe0e>
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f003 0308 	and.w	r3, r3, #8
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8082 	beq.w	8006b8e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a41      	ldr	r2, [pc, #260]	@ (8006b94 <HAL_DMA_IRQHandler+0xe14>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d04a      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a3f      	ldr	r2, [pc, #252]	@ (8006b98 <HAL_DMA_IRQHandler+0xe18>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d045      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a3e      	ldr	r2, [pc, #248]	@ (8006b9c <HAL_DMA_IRQHandler+0xe1c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d040      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a3c      	ldr	r2, [pc, #240]	@ (8006ba0 <HAL_DMA_IRQHandler+0xe20>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d03b      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a3b      	ldr	r2, [pc, #236]	@ (8006ba4 <HAL_DMA_IRQHandler+0xe24>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d036      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a39      	ldr	r2, [pc, #228]	@ (8006ba8 <HAL_DMA_IRQHandler+0xe28>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d031      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a38      	ldr	r2, [pc, #224]	@ (8006bac <HAL_DMA_IRQHandler+0xe2c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d02c      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a36      	ldr	r2, [pc, #216]	@ (8006bb0 <HAL_DMA_IRQHandler+0xe30>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d027      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a35      	ldr	r2, [pc, #212]	@ (8006bb4 <HAL_DMA_IRQHandler+0xe34>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d022      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a33      	ldr	r2, [pc, #204]	@ (8006bb8 <HAL_DMA_IRQHandler+0xe38>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d01d      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a32      	ldr	r2, [pc, #200]	@ (8006bbc <HAL_DMA_IRQHandler+0xe3c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d018      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a30      	ldr	r2, [pc, #192]	@ (8006bc0 <HAL_DMA_IRQHandler+0xe40>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d013      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a2f      	ldr	r2, [pc, #188]	@ (8006bc4 <HAL_DMA_IRQHandler+0xe44>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00e      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a2d      	ldr	r2, [pc, #180]	@ (8006bc8 <HAL_DMA_IRQHandler+0xe48>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d009      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8006bcc <HAL_DMA_IRQHandler+0xe4c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d004      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a2a      	ldr	r2, [pc, #168]	@ (8006bd0 <HAL_DMA_IRQHandler+0xe50>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d108      	bne.n	8006b3c <HAL_DMA_IRQHandler+0xdbc>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 021c 	bic.w	r2, r2, #28
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e007      	b.n	8006b4c <HAL_DMA_IRQHandler+0xdcc>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 020e 	bic.w	r2, r2, #14
 8006b4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b50:	f003 031f 	and.w	r3, r3, #31
 8006b54:	2201      	movs	r2, #1
 8006b56:	409a      	lsls	r2, r3
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
 8006b82:	e004      	b.n	8006b8e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006b84:	bf00      	nop
 8006b86:	e002      	b.n	8006b8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b88:	bf00      	nop
 8006b8a:	e000      	b.n	8006b8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b8e:	3728      	adds	r7, #40	@ 0x28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40020010 	.word	0x40020010
 8006b98:	40020028 	.word	0x40020028
 8006b9c:	40020040 	.word	0x40020040
 8006ba0:	40020058 	.word	0x40020058
 8006ba4:	40020070 	.word	0x40020070
 8006ba8:	40020088 	.word	0x40020088
 8006bac:	400200a0 	.word	0x400200a0
 8006bb0:	400200b8 	.word	0x400200b8
 8006bb4:	40020410 	.word	0x40020410
 8006bb8:	40020428 	.word	0x40020428
 8006bbc:	40020440 	.word	0x40020440
 8006bc0:	40020458 	.word	0x40020458
 8006bc4:	40020470 	.word	0x40020470
 8006bc8:	40020488 	.word	0x40020488
 8006bcc:	400204a0 	.word	0x400204a0
 8006bd0:	400204b8 	.word	0x400204b8

08006bd4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bfe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c04:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a7f      	ldr	r2, [pc, #508]	@ (8006e08 <DMA_SetConfig+0x21c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d072      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a7d      	ldr	r2, [pc, #500]	@ (8006e0c <DMA_SetConfig+0x220>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d06d      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a7c      	ldr	r2, [pc, #496]	@ (8006e10 <DMA_SetConfig+0x224>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d068      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a7a      	ldr	r2, [pc, #488]	@ (8006e14 <DMA_SetConfig+0x228>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d063      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a79      	ldr	r2, [pc, #484]	@ (8006e18 <DMA_SetConfig+0x22c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d05e      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a77      	ldr	r2, [pc, #476]	@ (8006e1c <DMA_SetConfig+0x230>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d059      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a76      	ldr	r2, [pc, #472]	@ (8006e20 <DMA_SetConfig+0x234>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d054      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a74      	ldr	r2, [pc, #464]	@ (8006e24 <DMA_SetConfig+0x238>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d04f      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a73      	ldr	r2, [pc, #460]	@ (8006e28 <DMA_SetConfig+0x23c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d04a      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a71      	ldr	r2, [pc, #452]	@ (8006e2c <DMA_SetConfig+0x240>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d045      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a70      	ldr	r2, [pc, #448]	@ (8006e30 <DMA_SetConfig+0x244>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d040      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a6e      	ldr	r2, [pc, #440]	@ (8006e34 <DMA_SetConfig+0x248>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d03b      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a6d      	ldr	r2, [pc, #436]	@ (8006e38 <DMA_SetConfig+0x24c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d036      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a6b      	ldr	r2, [pc, #428]	@ (8006e3c <DMA_SetConfig+0x250>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d031      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a6a      	ldr	r2, [pc, #424]	@ (8006e40 <DMA_SetConfig+0x254>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d02c      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a68      	ldr	r2, [pc, #416]	@ (8006e44 <DMA_SetConfig+0x258>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d027      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a67      	ldr	r2, [pc, #412]	@ (8006e48 <DMA_SetConfig+0x25c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d022      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a65      	ldr	r2, [pc, #404]	@ (8006e4c <DMA_SetConfig+0x260>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d01d      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a64      	ldr	r2, [pc, #400]	@ (8006e50 <DMA_SetConfig+0x264>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d018      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a62      	ldr	r2, [pc, #392]	@ (8006e54 <DMA_SetConfig+0x268>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a61      	ldr	r2, [pc, #388]	@ (8006e58 <DMA_SetConfig+0x26c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00e      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a5f      	ldr	r2, [pc, #380]	@ (8006e5c <DMA_SetConfig+0x270>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d009      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a5e      	ldr	r2, [pc, #376]	@ (8006e60 <DMA_SetConfig+0x274>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d004      	beq.n	8006cf6 <DMA_SetConfig+0x10a>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a5c      	ldr	r2, [pc, #368]	@ (8006e64 <DMA_SetConfig+0x278>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d101      	bne.n	8006cfa <DMA_SetConfig+0x10e>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <DMA_SetConfig+0x110>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00d      	beq.n	8006d1c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006d08:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d1a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a39      	ldr	r2, [pc, #228]	@ (8006e08 <DMA_SetConfig+0x21c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d04a      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a38      	ldr	r2, [pc, #224]	@ (8006e0c <DMA_SetConfig+0x220>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d045      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a36      	ldr	r2, [pc, #216]	@ (8006e10 <DMA_SetConfig+0x224>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d040      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a35      	ldr	r2, [pc, #212]	@ (8006e14 <DMA_SetConfig+0x228>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d03b      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a33      	ldr	r2, [pc, #204]	@ (8006e18 <DMA_SetConfig+0x22c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d036      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a32      	ldr	r2, [pc, #200]	@ (8006e1c <DMA_SetConfig+0x230>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d031      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a30      	ldr	r2, [pc, #192]	@ (8006e20 <DMA_SetConfig+0x234>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d02c      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a2f      	ldr	r2, [pc, #188]	@ (8006e24 <DMA_SetConfig+0x238>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d027      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a2d      	ldr	r2, [pc, #180]	@ (8006e28 <DMA_SetConfig+0x23c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d022      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8006e2c <DMA_SetConfig+0x240>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d01d      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a2a      	ldr	r2, [pc, #168]	@ (8006e30 <DMA_SetConfig+0x244>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d018      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a29      	ldr	r2, [pc, #164]	@ (8006e34 <DMA_SetConfig+0x248>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d013      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a27      	ldr	r2, [pc, #156]	@ (8006e38 <DMA_SetConfig+0x24c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00e      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a26      	ldr	r2, [pc, #152]	@ (8006e3c <DMA_SetConfig+0x250>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d009      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a24      	ldr	r2, [pc, #144]	@ (8006e40 <DMA_SetConfig+0x254>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d004      	beq.n	8006dbc <DMA_SetConfig+0x1d0>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a23      	ldr	r2, [pc, #140]	@ (8006e44 <DMA_SetConfig+0x258>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d101      	bne.n	8006dc0 <DMA_SetConfig+0x1d4>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <DMA_SetConfig+0x1d6>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d059      	beq.n	8006e7a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	223f      	movs	r2, #63	@ 0x3f
 8006dd0:	409a      	lsls	r2, r3
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006de4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	2b40      	cmp	r3, #64	@ 0x40
 8006df4:	d138      	bne.n	8006e68 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e06:	e086      	b.n	8006f16 <DMA_SetConfig+0x32a>
 8006e08:	40020010 	.word	0x40020010
 8006e0c:	40020028 	.word	0x40020028
 8006e10:	40020040 	.word	0x40020040
 8006e14:	40020058 	.word	0x40020058
 8006e18:	40020070 	.word	0x40020070
 8006e1c:	40020088 	.word	0x40020088
 8006e20:	400200a0 	.word	0x400200a0
 8006e24:	400200b8 	.word	0x400200b8
 8006e28:	40020410 	.word	0x40020410
 8006e2c:	40020428 	.word	0x40020428
 8006e30:	40020440 	.word	0x40020440
 8006e34:	40020458 	.word	0x40020458
 8006e38:	40020470 	.word	0x40020470
 8006e3c:	40020488 	.word	0x40020488
 8006e40:	400204a0 	.word	0x400204a0
 8006e44:	400204b8 	.word	0x400204b8
 8006e48:	58025408 	.word	0x58025408
 8006e4c:	5802541c 	.word	0x5802541c
 8006e50:	58025430 	.word	0x58025430
 8006e54:	58025444 	.word	0x58025444
 8006e58:	58025458 	.word	0x58025458
 8006e5c:	5802546c 	.word	0x5802546c
 8006e60:	58025480 	.word	0x58025480
 8006e64:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	60da      	str	r2, [r3, #12]
}
 8006e78:	e04d      	b.n	8006f16 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a29      	ldr	r2, [pc, #164]	@ (8006f24 <DMA_SetConfig+0x338>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d022      	beq.n	8006eca <DMA_SetConfig+0x2de>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a27      	ldr	r2, [pc, #156]	@ (8006f28 <DMA_SetConfig+0x33c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d01d      	beq.n	8006eca <DMA_SetConfig+0x2de>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a26      	ldr	r2, [pc, #152]	@ (8006f2c <DMA_SetConfig+0x340>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d018      	beq.n	8006eca <DMA_SetConfig+0x2de>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a24      	ldr	r2, [pc, #144]	@ (8006f30 <DMA_SetConfig+0x344>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d013      	beq.n	8006eca <DMA_SetConfig+0x2de>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a23      	ldr	r2, [pc, #140]	@ (8006f34 <DMA_SetConfig+0x348>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00e      	beq.n	8006eca <DMA_SetConfig+0x2de>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a21      	ldr	r2, [pc, #132]	@ (8006f38 <DMA_SetConfig+0x34c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d009      	beq.n	8006eca <DMA_SetConfig+0x2de>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a20      	ldr	r2, [pc, #128]	@ (8006f3c <DMA_SetConfig+0x350>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d004      	beq.n	8006eca <DMA_SetConfig+0x2de>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8006f40 <DMA_SetConfig+0x354>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d101      	bne.n	8006ece <DMA_SetConfig+0x2e2>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <DMA_SetConfig+0x2e4>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d020      	beq.n	8006f16 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	2201      	movs	r2, #1
 8006ede:	409a      	lsls	r2, r3
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	2b40      	cmp	r3, #64	@ 0x40
 8006ef2:	d108      	bne.n	8006f06 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	60da      	str	r2, [r3, #12]
}
 8006f04:	e007      	b.n	8006f16 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	60da      	str	r2, [r3, #12]
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	58025408 	.word	0x58025408
 8006f28:	5802541c 	.word	0x5802541c
 8006f2c:	58025430 	.word	0x58025430
 8006f30:	58025444 	.word	0x58025444
 8006f34:	58025458 	.word	0x58025458
 8006f38:	5802546c 	.word	0x5802546c
 8006f3c:	58025480 	.word	0x58025480
 8006f40:	58025494 	.word	0x58025494

08006f44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a42      	ldr	r2, [pc, #264]	@ (800705c <DMA_CalcBaseAndBitshift+0x118>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d04a      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a41      	ldr	r2, [pc, #260]	@ (8007060 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d045      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a3f      	ldr	r2, [pc, #252]	@ (8007064 <DMA_CalcBaseAndBitshift+0x120>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d040      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a3e      	ldr	r2, [pc, #248]	@ (8007068 <DMA_CalcBaseAndBitshift+0x124>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d03b      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a3c      	ldr	r2, [pc, #240]	@ (800706c <DMA_CalcBaseAndBitshift+0x128>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d036      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a3b      	ldr	r2, [pc, #236]	@ (8007070 <DMA_CalcBaseAndBitshift+0x12c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d031      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a39      	ldr	r2, [pc, #228]	@ (8007074 <DMA_CalcBaseAndBitshift+0x130>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d02c      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a38      	ldr	r2, [pc, #224]	@ (8007078 <DMA_CalcBaseAndBitshift+0x134>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d027      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a36      	ldr	r2, [pc, #216]	@ (800707c <DMA_CalcBaseAndBitshift+0x138>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d022      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a35      	ldr	r2, [pc, #212]	@ (8007080 <DMA_CalcBaseAndBitshift+0x13c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d01d      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a33      	ldr	r2, [pc, #204]	@ (8007084 <DMA_CalcBaseAndBitshift+0x140>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d018      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a32      	ldr	r2, [pc, #200]	@ (8007088 <DMA_CalcBaseAndBitshift+0x144>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d013      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a30      	ldr	r2, [pc, #192]	@ (800708c <DMA_CalcBaseAndBitshift+0x148>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00e      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8007090 <DMA_CalcBaseAndBitshift+0x14c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d009      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8007094 <DMA_CalcBaseAndBitshift+0x150>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d004      	beq.n	8006fec <DMA_CalcBaseAndBitshift+0xa8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8007098 <DMA_CalcBaseAndBitshift+0x154>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d101      	bne.n	8006ff0 <DMA_CalcBaseAndBitshift+0xac>
 8006fec:	2301      	movs	r3, #1
 8006fee:	e000      	b.n	8006ff2 <DMA_CalcBaseAndBitshift+0xae>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d024      	beq.n	8007040 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	3b10      	subs	r3, #16
 8006ffe:	4a27      	ldr	r2, [pc, #156]	@ (800709c <DMA_CalcBaseAndBitshift+0x158>)
 8007000:	fba2 2303 	umull	r2, r3, r2, r3
 8007004:	091b      	lsrs	r3, r3, #4
 8007006:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	4a24      	ldr	r2, [pc, #144]	@ (80070a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007010:	5cd3      	ldrb	r3, [r2, r3]
 8007012:	461a      	mov	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b03      	cmp	r3, #3
 800701c:	d908      	bls.n	8007030 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	4b1f      	ldr	r3, [pc, #124]	@ (80070a4 <DMA_CalcBaseAndBitshift+0x160>)
 8007026:	4013      	ands	r3, r2
 8007028:	1d1a      	adds	r2, r3, #4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	659a      	str	r2, [r3, #88]	@ 0x58
 800702e:	e00d      	b.n	800704c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	4b1b      	ldr	r3, [pc, #108]	@ (80070a4 <DMA_CalcBaseAndBitshift+0x160>)
 8007038:	4013      	ands	r3, r2
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6593      	str	r3, [r2, #88]	@ 0x58
 800703e:	e005      	b.n	800704c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	40020010 	.word	0x40020010
 8007060:	40020028 	.word	0x40020028
 8007064:	40020040 	.word	0x40020040
 8007068:	40020058 	.word	0x40020058
 800706c:	40020070 	.word	0x40020070
 8007070:	40020088 	.word	0x40020088
 8007074:	400200a0 	.word	0x400200a0
 8007078:	400200b8 	.word	0x400200b8
 800707c:	40020410 	.word	0x40020410
 8007080:	40020428 	.word	0x40020428
 8007084:	40020440 	.word	0x40020440
 8007088:	40020458 	.word	0x40020458
 800708c:	40020470 	.word	0x40020470
 8007090:	40020488 	.word	0x40020488
 8007094:	400204a0 	.word	0x400204a0
 8007098:	400204b8 	.word	0x400204b8
 800709c:	aaaaaaab 	.word	0xaaaaaaab
 80070a0:	080221d4 	.word	0x080221d4
 80070a4:	fffffc00 	.word	0xfffffc00

080070a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d120      	bne.n	80070fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d858      	bhi.n	8007176 <DMA_CheckFifoParam+0xce>
 80070c4:	a201      	add	r2, pc, #4	@ (adr r2, 80070cc <DMA_CheckFifoParam+0x24>)
 80070c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ca:	bf00      	nop
 80070cc:	080070dd 	.word	0x080070dd
 80070d0:	080070ef 	.word	0x080070ef
 80070d4:	080070dd 	.word	0x080070dd
 80070d8:	08007177 	.word	0x08007177
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d048      	beq.n	800717a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070ec:	e045      	b.n	800717a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80070f6:	d142      	bne.n	800717e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070fc:	e03f      	b.n	800717e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007106:	d123      	bne.n	8007150 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710c:	2b03      	cmp	r3, #3
 800710e:	d838      	bhi.n	8007182 <DMA_CheckFifoParam+0xda>
 8007110:	a201      	add	r2, pc, #4	@ (adr r2, 8007118 <DMA_CheckFifoParam+0x70>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	08007129 	.word	0x08007129
 800711c:	0800712f 	.word	0x0800712f
 8007120:	08007129 	.word	0x08007129
 8007124:	08007141 	.word	0x08007141
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	73fb      	strb	r3, [r7, #15]
        break;
 800712c:	e030      	b.n	8007190 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d025      	beq.n	8007186 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800713e:	e022      	b.n	8007186 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007144:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007148:	d11f      	bne.n	800718a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800714e:	e01c      	b.n	800718a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007154:	2b02      	cmp	r3, #2
 8007156:	d902      	bls.n	800715e <DMA_CheckFifoParam+0xb6>
 8007158:	2b03      	cmp	r3, #3
 800715a:	d003      	beq.n	8007164 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800715c:	e018      	b.n	8007190 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	73fb      	strb	r3, [r7, #15]
        break;
 8007162:	e015      	b.n	8007190 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007168:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00e      	beq.n	800718e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	73fb      	strb	r3, [r7, #15]
    break;
 8007174:	e00b      	b.n	800718e <DMA_CheckFifoParam+0xe6>
        break;
 8007176:	bf00      	nop
 8007178:	e00a      	b.n	8007190 <DMA_CheckFifoParam+0xe8>
        break;
 800717a:	bf00      	nop
 800717c:	e008      	b.n	8007190 <DMA_CheckFifoParam+0xe8>
        break;
 800717e:	bf00      	nop
 8007180:	e006      	b.n	8007190 <DMA_CheckFifoParam+0xe8>
        break;
 8007182:	bf00      	nop
 8007184:	e004      	b.n	8007190 <DMA_CheckFifoParam+0xe8>
        break;
 8007186:	bf00      	nop
 8007188:	e002      	b.n	8007190 <DMA_CheckFifoParam+0xe8>
        break;
 800718a:	bf00      	nop
 800718c:	e000      	b.n	8007190 <DMA_CheckFifoParam+0xe8>
    break;
 800718e:	bf00      	nop
    }
  }

  return status;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop

080071a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a38      	ldr	r2, [pc, #224]	@ (8007294 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d022      	beq.n	80071fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a36      	ldr	r2, [pc, #216]	@ (8007298 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d01d      	beq.n	80071fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a35      	ldr	r2, [pc, #212]	@ (800729c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d018      	beq.n	80071fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a33      	ldr	r2, [pc, #204]	@ (80072a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d013      	beq.n	80071fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a32      	ldr	r2, [pc, #200]	@ (80072a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00e      	beq.n	80071fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a30      	ldr	r2, [pc, #192]	@ (80072a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d009      	beq.n	80071fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a2f      	ldr	r2, [pc, #188]	@ (80072ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d004      	beq.n	80071fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a2d      	ldr	r2, [pc, #180]	@ (80072b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d101      	bne.n	8007202 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007202:	2300      	movs	r3, #0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01a      	beq.n	800723e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	3b08      	subs	r3, #8
 8007210:	4a28      	ldr	r2, [pc, #160]	@ (80072b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	091b      	lsrs	r3, r3, #4
 8007218:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4b26      	ldr	r3, [pc, #152]	@ (80072b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	461a      	mov	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a24      	ldr	r2, [pc, #144]	@ (80072bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800722c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	2201      	movs	r2, #1
 8007236:	409a      	lsls	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800723c:	e024      	b.n	8007288 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	3b10      	subs	r3, #16
 8007246:	4a1e      	ldr	r2, [pc, #120]	@ (80072c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	091b      	lsrs	r3, r3, #4
 800724e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	4a1c      	ldr	r2, [pc, #112]	@ (80072c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d806      	bhi.n	8007266 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4a1b      	ldr	r2, [pc, #108]	@ (80072c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d902      	bls.n	8007266 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3308      	adds	r3, #8
 8007264:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4b18      	ldr	r3, [pc, #96]	@ (80072cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a16      	ldr	r2, [pc, #88]	@ (80072d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007278:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	2201      	movs	r2, #1
 8007282:	409a      	lsls	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007288:	bf00      	nop
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	58025408 	.word	0x58025408
 8007298:	5802541c 	.word	0x5802541c
 800729c:	58025430 	.word	0x58025430
 80072a0:	58025444 	.word	0x58025444
 80072a4:	58025458 	.word	0x58025458
 80072a8:	5802546c 	.word	0x5802546c
 80072ac:	58025480 	.word	0x58025480
 80072b0:	58025494 	.word	0x58025494
 80072b4:	cccccccd 	.word	0xcccccccd
 80072b8:	16009600 	.word	0x16009600
 80072bc:	58025880 	.word	0x58025880
 80072c0:	aaaaaaab 	.word	0xaaaaaaab
 80072c4:	400204b8 	.word	0x400204b8
 80072c8:	4002040f 	.word	0x4002040f
 80072cc:	10008200 	.word	0x10008200
 80072d0:	40020880 	.word	0x40020880

080072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d04a      	beq.n	8007380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d847      	bhi.n	8007380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a25      	ldr	r2, [pc, #148]	@ (800738c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d022      	beq.n	8007340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a24      	ldr	r2, [pc, #144]	@ (8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d01d      	beq.n	8007340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a22      	ldr	r2, [pc, #136]	@ (8007394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d018      	beq.n	8007340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a21      	ldr	r2, [pc, #132]	@ (8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d013      	beq.n	8007340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a1f      	ldr	r2, [pc, #124]	@ (800739c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d00e      	beq.n	8007340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a1e      	ldr	r2, [pc, #120]	@ (80073a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d009      	beq.n	8007340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1c      	ldr	r2, [pc, #112]	@ (80073a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d004      	beq.n	8007340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1b      	ldr	r2, [pc, #108]	@ (80073a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d101      	bne.n	8007344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007340:	2301      	movs	r3, #1
 8007342:	e000      	b.n	8007346 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007344:	2300      	movs	r3, #0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4b17      	ldr	r3, [pc, #92]	@ (80073ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	461a      	mov	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a15      	ldr	r2, [pc, #84]	@ (80073b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800735c:	671a      	str	r2, [r3, #112]	@ 0x70
 800735e:	e009      	b.n	8007374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4b14      	ldr	r3, [pc, #80]	@ (80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	461a      	mov	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a11      	ldr	r2, [pc, #68]	@ (80073b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007372:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3b01      	subs	r3, #1
 8007378:	2201      	movs	r2, #1
 800737a:	409a      	lsls	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007380:	bf00      	nop
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	58025408 	.word	0x58025408
 8007390:	5802541c 	.word	0x5802541c
 8007394:	58025430 	.word	0x58025430
 8007398:	58025444 	.word	0x58025444
 800739c:	58025458 	.word	0x58025458
 80073a0:	5802546c 	.word	0x5802546c
 80073a4:	58025480 	.word	0x58025480
 80073a8:	58025494 	.word	0x58025494
 80073ac:	1600963f 	.word	0x1600963f
 80073b0:	58025940 	.word	0x58025940
 80073b4:	1000823f 	.word	0x1000823f
 80073b8:	40020940 	.word	0x40020940

080073bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073bc:	b480      	push	{r7}
 80073be:	b089      	sub	sp, #36	@ 0x24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80073ca:	4b89      	ldr	r3, [pc, #548]	@ (80075f0 <HAL_GPIO_Init+0x234>)
 80073cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073ce:	e194      	b.n	80076fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	2101      	movs	r1, #1
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	fa01 f303 	lsl.w	r3, r1, r3
 80073dc:	4013      	ands	r3, r2
 80073de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 8186 	beq.w	80076f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f003 0303 	and.w	r3, r3, #3
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d005      	beq.n	8007400 <HAL_GPIO_Init+0x44>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d130      	bne.n	8007462 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	2203      	movs	r2, #3
 800740c:	fa02 f303 	lsl.w	r3, r2, r3
 8007410:	43db      	mvns	r3, r3
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	4013      	ands	r3, r2
 8007416:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	4313      	orrs	r3, r2
 8007428:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007436:	2201      	movs	r2, #1
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	fa02 f303 	lsl.w	r3, r2, r3
 800743e:	43db      	mvns	r3, r3
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	4013      	ands	r3, r2
 8007444:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	091b      	lsrs	r3, r3, #4
 800744c:	f003 0201 	and.w	r2, r3, #1
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	fa02 f303 	lsl.w	r3, r2, r3
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	4313      	orrs	r3, r2
 800745a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	2b03      	cmp	r3, #3
 800746c:	d017      	beq.n	800749e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	2203      	movs	r2, #3
 800747a:	fa02 f303 	lsl.w	r3, r2, r3
 800747e:	43db      	mvns	r3, r3
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	4013      	ands	r3, r2
 8007484:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	fa02 f303 	lsl.w	r3, r2, r3
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	4313      	orrs	r3, r2
 8007496:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d123      	bne.n	80074f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	08da      	lsrs	r2, r3, #3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3208      	adds	r2, #8
 80074b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	220f      	movs	r2, #15
 80074c2:	fa02 f303 	lsl.w	r3, r2, r3
 80074c6:	43db      	mvns	r3, r3
 80074c8:	69ba      	ldr	r2, [r7, #24]
 80074ca:	4013      	ands	r3, r2
 80074cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	691a      	ldr	r2, [r3, #16]
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	08da      	lsrs	r2, r3, #3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3208      	adds	r2, #8
 80074ec:	69b9      	ldr	r1, [r7, #24]
 80074ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	2203      	movs	r2, #3
 80074fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007502:	43db      	mvns	r3, r3
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	4013      	ands	r3, r2
 8007508:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f003 0203 	and.w	r2, r3, #3
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	fa02 f303 	lsl.w	r3, r2, r3
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	4313      	orrs	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 80e0 	beq.w	80076f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007534:	4b2f      	ldr	r3, [pc, #188]	@ (80075f4 <HAL_GPIO_Init+0x238>)
 8007536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800753a:	4a2e      	ldr	r2, [pc, #184]	@ (80075f4 <HAL_GPIO_Init+0x238>)
 800753c:	f043 0302 	orr.w	r3, r3, #2
 8007540:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007544:	4b2b      	ldr	r3, [pc, #172]	@ (80075f4 <HAL_GPIO_Init+0x238>)
 8007546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007552:	4a29      	ldr	r2, [pc, #164]	@ (80075f8 <HAL_GPIO_Init+0x23c>)
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	089b      	lsrs	r3, r3, #2
 8007558:	3302      	adds	r3, #2
 800755a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800755e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	220f      	movs	r2, #15
 800756a:	fa02 f303 	lsl.w	r3, r2, r3
 800756e:	43db      	mvns	r3, r3
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	4013      	ands	r3, r2
 8007574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a20      	ldr	r2, [pc, #128]	@ (80075fc <HAL_GPIO_Init+0x240>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d052      	beq.n	8007624 <HAL_GPIO_Init+0x268>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a1f      	ldr	r2, [pc, #124]	@ (8007600 <HAL_GPIO_Init+0x244>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d031      	beq.n	80075ea <HAL_GPIO_Init+0x22e>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a1e      	ldr	r2, [pc, #120]	@ (8007604 <HAL_GPIO_Init+0x248>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d02b      	beq.n	80075e6 <HAL_GPIO_Init+0x22a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a1d      	ldr	r2, [pc, #116]	@ (8007608 <HAL_GPIO_Init+0x24c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d025      	beq.n	80075e2 <HAL_GPIO_Init+0x226>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a1c      	ldr	r2, [pc, #112]	@ (800760c <HAL_GPIO_Init+0x250>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d01f      	beq.n	80075de <HAL_GPIO_Init+0x222>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007610 <HAL_GPIO_Init+0x254>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d019      	beq.n	80075da <HAL_GPIO_Init+0x21e>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a1a      	ldr	r2, [pc, #104]	@ (8007614 <HAL_GPIO_Init+0x258>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d013      	beq.n	80075d6 <HAL_GPIO_Init+0x21a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a19      	ldr	r2, [pc, #100]	@ (8007618 <HAL_GPIO_Init+0x25c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00d      	beq.n	80075d2 <HAL_GPIO_Init+0x216>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a18      	ldr	r2, [pc, #96]	@ (800761c <HAL_GPIO_Init+0x260>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d007      	beq.n	80075ce <HAL_GPIO_Init+0x212>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a17      	ldr	r2, [pc, #92]	@ (8007620 <HAL_GPIO_Init+0x264>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d101      	bne.n	80075ca <HAL_GPIO_Init+0x20e>
 80075c6:	2309      	movs	r3, #9
 80075c8:	e02d      	b.n	8007626 <HAL_GPIO_Init+0x26a>
 80075ca:	230a      	movs	r3, #10
 80075cc:	e02b      	b.n	8007626 <HAL_GPIO_Init+0x26a>
 80075ce:	2308      	movs	r3, #8
 80075d0:	e029      	b.n	8007626 <HAL_GPIO_Init+0x26a>
 80075d2:	2307      	movs	r3, #7
 80075d4:	e027      	b.n	8007626 <HAL_GPIO_Init+0x26a>
 80075d6:	2306      	movs	r3, #6
 80075d8:	e025      	b.n	8007626 <HAL_GPIO_Init+0x26a>
 80075da:	2305      	movs	r3, #5
 80075dc:	e023      	b.n	8007626 <HAL_GPIO_Init+0x26a>
 80075de:	2304      	movs	r3, #4
 80075e0:	e021      	b.n	8007626 <HAL_GPIO_Init+0x26a>
 80075e2:	2303      	movs	r3, #3
 80075e4:	e01f      	b.n	8007626 <HAL_GPIO_Init+0x26a>
 80075e6:	2302      	movs	r3, #2
 80075e8:	e01d      	b.n	8007626 <HAL_GPIO_Init+0x26a>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e01b      	b.n	8007626 <HAL_GPIO_Init+0x26a>
 80075ee:	bf00      	nop
 80075f0:	58000080 	.word	0x58000080
 80075f4:	58024400 	.word	0x58024400
 80075f8:	58000400 	.word	0x58000400
 80075fc:	58020000 	.word	0x58020000
 8007600:	58020400 	.word	0x58020400
 8007604:	58020800 	.word	0x58020800
 8007608:	58020c00 	.word	0x58020c00
 800760c:	58021000 	.word	0x58021000
 8007610:	58021400 	.word	0x58021400
 8007614:	58021800 	.word	0x58021800
 8007618:	58021c00 	.word	0x58021c00
 800761c:	58022000 	.word	0x58022000
 8007620:	58022400 	.word	0x58022400
 8007624:	2300      	movs	r3, #0
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	f002 0203 	and.w	r2, r2, #3
 800762c:	0092      	lsls	r2, r2, #2
 800762e:	4093      	lsls	r3, r2
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	4313      	orrs	r3, r2
 8007634:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007636:	4938      	ldr	r1, [pc, #224]	@ (8007718 <HAL_GPIO_Init+0x35c>)
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	089b      	lsrs	r3, r3, #2
 800763c:	3302      	adds	r3, #2
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	43db      	mvns	r3, r3
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	4013      	ands	r3, r2
 8007654:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800766a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	43db      	mvns	r3, r3
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	4013      	ands	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007698:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	43db      	mvns	r3, r3
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	4013      	ands	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	69ba      	ldr	r2, [r7, #24]
 80076c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	43db      	mvns	r3, r3
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	4013      	ands	r3, r2
 80076d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	3301      	adds	r3, #1
 80076f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	fa22 f303 	lsr.w	r3, r2, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	f47f ae63 	bne.w	80073d0 <HAL_GPIO_Init+0x14>
  }
}
 800770a:	bf00      	nop
 800770c:	bf00      	nop
 800770e:	3724      	adds	r7, #36	@ 0x24
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	58000400 	.word	0x58000400

0800771c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	807b      	strh	r3, [r7, #2]
 8007728:	4613      	mov	r3, r2
 800772a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800772c:	787b      	ldrb	r3, [r7, #1]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007732:	887a      	ldrh	r2, [r7, #2]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007738:	e003      	b.n	8007742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800773a:	887b      	ldrh	r3, [r7, #2]
 800773c:	041a      	lsls	r2, r3, #16
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	619a      	str	r2, [r3, #24]
}
 8007742:	bf00      	nop
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	4603      	mov	r3, r0
 8007756:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800775c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007760:	88fb      	ldrh	r3, [r7, #6]
 8007762:	4013      	ands	r3, r2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d008      	beq.n	800777a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007768:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800776c:	88fb      	ldrh	r3, [r7, #6]
 800776e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007772:	88fb      	ldrh	r3, [r7, #6]
 8007774:	4618      	mov	r0, r3
 8007776:	f7f9 fda1 	bl	80012bc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800777a:	bf00      	nop
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800778c:	4b19      	ldr	r3, [pc, #100]	@ (80077f4 <HAL_PWREx_ConfigSupply+0x70>)
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f003 0304 	and.w	r3, r3, #4
 8007794:	2b04      	cmp	r3, #4
 8007796:	d00a      	beq.n	80077ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007798:	4b16      	ldr	r3, [pc, #88]	@ (80077f4 <HAL_PWREx_ConfigSupply+0x70>)
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f003 0307 	and.w	r3, r3, #7
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d001      	beq.n	80077aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e01f      	b.n	80077ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e01d      	b.n	80077ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80077ae:	4b11      	ldr	r3, [pc, #68]	@ (80077f4 <HAL_PWREx_ConfigSupply+0x70>)
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f023 0207 	bic.w	r2, r3, #7
 80077b6:	490f      	ldr	r1, [pc, #60]	@ (80077f4 <HAL_PWREx_ConfigSupply+0x70>)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80077be:	f7fb fbc7 	bl	8002f50 <HAL_GetTick>
 80077c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077c4:	e009      	b.n	80077da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80077c6:	f7fb fbc3 	bl	8002f50 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077d4:	d901      	bls.n	80077da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e007      	b.n	80077ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077da:	4b06      	ldr	r3, [pc, #24]	@ (80077f4 <HAL_PWREx_ConfigSupply+0x70>)
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077e6:	d1ee      	bne.n	80077c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	58024800 	.word	0x58024800

080077f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08c      	sub	sp, #48	@ 0x30
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d102      	bne.n	800780c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f000 bc48 	b.w	800809c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 8088 	beq.w	800792a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800781a:	4b99      	ldr	r3, [pc, #612]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007822:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007824:	4b96      	ldr	r3, [pc, #600]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007828:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800782a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800782c:	2b10      	cmp	r3, #16
 800782e:	d007      	beq.n	8007840 <HAL_RCC_OscConfig+0x48>
 8007830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007832:	2b18      	cmp	r3, #24
 8007834:	d111      	bne.n	800785a <HAL_RCC_OscConfig+0x62>
 8007836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007838:	f003 0303 	and.w	r3, r3, #3
 800783c:	2b02      	cmp	r3, #2
 800783e:	d10c      	bne.n	800785a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007840:	4b8f      	ldr	r3, [pc, #572]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d06d      	beq.n	8007928 <HAL_RCC_OscConfig+0x130>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d169      	bne.n	8007928 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	f000 bc21 	b.w	800809c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007862:	d106      	bne.n	8007872 <HAL_RCC_OscConfig+0x7a>
 8007864:	4b86      	ldr	r3, [pc, #536]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a85      	ldr	r2, [pc, #532]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 800786a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	e02e      	b.n	80078d0 <HAL_RCC_OscConfig+0xd8>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10c      	bne.n	8007894 <HAL_RCC_OscConfig+0x9c>
 800787a:	4b81      	ldr	r3, [pc, #516]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a80      	ldr	r2, [pc, #512]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	4b7e      	ldr	r3, [pc, #504]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a7d      	ldr	r2, [pc, #500]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 800788c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	e01d      	b.n	80078d0 <HAL_RCC_OscConfig+0xd8>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800789c:	d10c      	bne.n	80078b8 <HAL_RCC_OscConfig+0xc0>
 800789e:	4b78      	ldr	r3, [pc, #480]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a77      	ldr	r2, [pc, #476]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80078a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	4b75      	ldr	r3, [pc, #468]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a74      	ldr	r2, [pc, #464]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80078b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e00b      	b.n	80078d0 <HAL_RCC_OscConfig+0xd8>
 80078b8:	4b71      	ldr	r3, [pc, #452]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a70      	ldr	r2, [pc, #448]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80078be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	4b6e      	ldr	r3, [pc, #440]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a6d      	ldr	r2, [pc, #436]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80078ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d013      	beq.n	8007900 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d8:	f7fb fb3a 	bl	8002f50 <HAL_GetTick>
 80078dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078de:	e008      	b.n	80078f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078e0:	f7fb fb36 	bl	8002f50 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b64      	cmp	r3, #100	@ 0x64
 80078ec:	d901      	bls.n	80078f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e3d4      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078f2:	4b63      	ldr	r3, [pc, #396]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0f0      	beq.n	80078e0 <HAL_RCC_OscConfig+0xe8>
 80078fe:	e014      	b.n	800792a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007900:	f7fb fb26 	bl	8002f50 <HAL_GetTick>
 8007904:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007906:	e008      	b.n	800791a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007908:	f7fb fb22 	bl	8002f50 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b64      	cmp	r3, #100	@ 0x64
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e3c0      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800791a:	4b59      	ldr	r3, [pc, #356]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1f0      	bne.n	8007908 <HAL_RCC_OscConfig+0x110>
 8007926:	e000      	b.n	800792a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80ca 	beq.w	8007acc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007938:	4b51      	ldr	r3, [pc, #324]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007940:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007942:	4b4f      	ldr	r3, [pc, #316]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007946:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d007      	beq.n	800795e <HAL_RCC_OscConfig+0x166>
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	2b18      	cmp	r3, #24
 8007952:	d156      	bne.n	8007a02 <HAL_RCC_OscConfig+0x20a>
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d151      	bne.n	8007a02 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800795e:	4b48      	ldr	r3, [pc, #288]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0304 	and.w	r3, r3, #4
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <HAL_RCC_OscConfig+0x17e>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e392      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007976:	4b42      	ldr	r3, [pc, #264]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f023 0219 	bic.w	r2, r3, #25
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	493f      	ldr	r1, [pc, #252]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007984:	4313      	orrs	r3, r2
 8007986:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007988:	f7fb fae2 	bl	8002f50 <HAL_GetTick>
 800798c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800798e:	e008      	b.n	80079a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007990:	f7fb fade 	bl	8002f50 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d901      	bls.n	80079a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e37c      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079a2:	4b37      	ldr	r3, [pc, #220]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0f0      	beq.n	8007990 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ae:	f7fb fadb 	bl	8002f68 <HAL_GetREVID>
 80079b2:	4603      	mov	r3, r0
 80079b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d817      	bhi.n	80079ec <HAL_RCC_OscConfig+0x1f4>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	2b40      	cmp	r3, #64	@ 0x40
 80079c2:	d108      	bne.n	80079d6 <HAL_RCC_OscConfig+0x1de>
 80079c4:	4b2e      	ldr	r3, [pc, #184]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80079cc:	4a2c      	ldr	r2, [pc, #176]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80079ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079d4:	e07a      	b.n	8007acc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	031b      	lsls	r3, r3, #12
 80079e4:	4926      	ldr	r1, [pc, #152]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079ea:	e06f      	b.n	8007acc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ec:	4b24      	ldr	r3, [pc, #144]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	061b      	lsls	r3, r3, #24
 80079fa:	4921      	ldr	r1, [pc, #132]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a00:	e064      	b.n	8007acc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d047      	beq.n	8007a9a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f023 0219 	bic.w	r2, r3, #25
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	491a      	ldr	r1, [pc, #104]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a1c:	f7fb fa98 	bl	8002f50 <HAL_GetTick>
 8007a20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a22:	e008      	b.n	8007a36 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a24:	f7fb fa94 	bl	8002f50 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e332      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a36:	4b12      	ldr	r3, [pc, #72]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0304 	and.w	r3, r3, #4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0f0      	beq.n	8007a24 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a42:	f7fb fa91 	bl	8002f68 <HAL_GetREVID>
 8007a46:	4603      	mov	r3, r0
 8007a48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d819      	bhi.n	8007a84 <HAL_RCC_OscConfig+0x28c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b40      	cmp	r3, #64	@ 0x40
 8007a56:	d108      	bne.n	8007a6a <HAL_RCC_OscConfig+0x272>
 8007a58:	4b09      	ldr	r3, [pc, #36]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007a60:	4a07      	ldr	r2, [pc, #28]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a66:	6053      	str	r3, [r2, #4]
 8007a68:	e030      	b.n	8007acc <HAL_RCC_OscConfig+0x2d4>
 8007a6a:	4b05      	ldr	r3, [pc, #20]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	031b      	lsls	r3, r3, #12
 8007a78:	4901      	ldr	r1, [pc, #4]	@ (8007a80 <HAL_RCC_OscConfig+0x288>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	604b      	str	r3, [r1, #4]
 8007a7e:	e025      	b.n	8007acc <HAL_RCC_OscConfig+0x2d4>
 8007a80:	58024400 	.word	0x58024400
 8007a84:	4b9a      	ldr	r3, [pc, #616]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	061b      	lsls	r3, r3, #24
 8007a92:	4997      	ldr	r1, [pc, #604]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	604b      	str	r3, [r1, #4]
 8007a98:	e018      	b.n	8007acc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a9a:	4b95      	ldr	r3, [pc, #596]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a94      	ldr	r2, [pc, #592]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007aa0:	f023 0301 	bic.w	r3, r3, #1
 8007aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa6:	f7fb fa53 	bl	8002f50 <HAL_GetTick>
 8007aaa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aae:	f7fb fa4f 	bl	8002f50 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e2ed      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ac0:	4b8b      	ldr	r3, [pc, #556]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f0      	bne.n	8007aae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0310 	and.w	r3, r3, #16
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 80a9 	beq.w	8007c2c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ada:	4b85      	ldr	r3, [pc, #532]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ae2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ae4:	4b82      	ldr	r3, [pc, #520]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	2b08      	cmp	r3, #8
 8007aee:	d007      	beq.n	8007b00 <HAL_RCC_OscConfig+0x308>
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	2b18      	cmp	r3, #24
 8007af4:	d13a      	bne.n	8007b6c <HAL_RCC_OscConfig+0x374>
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d135      	bne.n	8007b6c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b00:	4b7b      	ldr	r3, [pc, #492]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <HAL_RCC_OscConfig+0x320>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	2b80      	cmp	r3, #128	@ 0x80
 8007b12:	d001      	beq.n	8007b18 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e2c1      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b18:	f7fb fa26 	bl	8002f68 <HAL_GetREVID>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d817      	bhi.n	8007b56 <HAL_RCC_OscConfig+0x35e>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	d108      	bne.n	8007b40 <HAL_RCC_OscConfig+0x348>
 8007b2e:	4b70      	ldr	r3, [pc, #448]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007b36:	4a6e      	ldr	r2, [pc, #440]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007b38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b3c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b3e:	e075      	b.n	8007c2c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b40:	4b6b      	ldr	r3, [pc, #428]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	069b      	lsls	r3, r3, #26
 8007b4e:	4968      	ldr	r1, [pc, #416]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b54:	e06a      	b.n	8007c2c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b56:	4b66      	ldr	r3, [pc, #408]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	061b      	lsls	r3, r3, #24
 8007b64:	4962      	ldr	r1, [pc, #392]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b6a:	e05f      	b.n	8007c2c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d042      	beq.n	8007bfa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b74:	4b5e      	ldr	r3, [pc, #376]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a5d      	ldr	r2, [pc, #372]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b80:	f7fb f9e6 	bl	8002f50 <HAL_GetTick>
 8007b84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b86:	e008      	b.n	8007b9a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007b88:	f7fb f9e2 	bl	8002f50 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e280      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b9a:	4b55      	ldr	r3, [pc, #340]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0f0      	beq.n	8007b88 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ba6:	f7fb f9df 	bl	8002f68 <HAL_GetREVID>
 8007baa:	4603      	mov	r3, r0
 8007bac:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d817      	bhi.n	8007be4 <HAL_RCC_OscConfig+0x3ec>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d108      	bne.n	8007bce <HAL_RCC_OscConfig+0x3d6>
 8007bbc:	4b4c      	ldr	r3, [pc, #304]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007bc4:	4a4a      	ldr	r2, [pc, #296]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007bc6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bca:	6053      	str	r3, [r2, #4]
 8007bcc:	e02e      	b.n	8007c2c <HAL_RCC_OscConfig+0x434>
 8007bce:	4b48      	ldr	r3, [pc, #288]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	069b      	lsls	r3, r3, #26
 8007bdc:	4944      	ldr	r1, [pc, #272]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	604b      	str	r3, [r1, #4]
 8007be2:	e023      	b.n	8007c2c <HAL_RCC_OscConfig+0x434>
 8007be4:	4b42      	ldr	r3, [pc, #264]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	061b      	lsls	r3, r3, #24
 8007bf2:	493f      	ldr	r1, [pc, #252]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60cb      	str	r3, [r1, #12]
 8007bf8:	e018      	b.n	8007c2c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a3c      	ldr	r2, [pc, #240]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007c00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c06:	f7fb f9a3 	bl	8002f50 <HAL_GetTick>
 8007c0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c0c:	e008      	b.n	8007c20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007c0e:	f7fb f99f 	bl	8002f50 <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d901      	bls.n	8007c20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e23d      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c20:	4b33      	ldr	r3, [pc, #204]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1f0      	bne.n	8007c0e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0308 	and.w	r3, r3, #8
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d036      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d019      	beq.n	8007c74 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c40:	4b2b      	ldr	r3, [pc, #172]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c44:	4a2a      	ldr	r2, [pc, #168]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007c46:	f043 0301 	orr.w	r3, r3, #1
 8007c4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c4c:	f7fb f980 	bl	8002f50 <HAL_GetTick>
 8007c50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c52:	e008      	b.n	8007c66 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c54:	f7fb f97c 	bl	8002f50 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d901      	bls.n	8007c66 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e21a      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c66:	4b22      	ldr	r3, [pc, #136]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0f0      	beq.n	8007c54 <HAL_RCC_OscConfig+0x45c>
 8007c72:	e018      	b.n	8007ca6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c74:	4b1e      	ldr	r3, [pc, #120]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c78:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007c7a:	f023 0301 	bic.w	r3, r3, #1
 8007c7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c80:	f7fb f966 	bl	8002f50 <HAL_GetTick>
 8007c84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c86:	e008      	b.n	8007c9a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c88:	f7fb f962 	bl	8002f50 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d901      	bls.n	8007c9a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e200      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c9a:	4b15      	ldr	r3, [pc, #84]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1f0      	bne.n	8007c88 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0320 	and.w	r3, r3, #32
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d039      	beq.n	8007d26 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d01c      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007cba:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007cc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007cc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007cc6:	f7fb f943 	bl	8002f50 <HAL_GetTick>
 8007cca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ccc:	e008      	b.n	8007ce0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cce:	f7fb f93f 	bl	8002f50 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d901      	bls.n	8007ce0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e1dd      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ce0:	4b03      	ldr	r3, [pc, #12]	@ (8007cf0 <HAL_RCC_OscConfig+0x4f8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0f0      	beq.n	8007cce <HAL_RCC_OscConfig+0x4d6>
 8007cec:	e01b      	b.n	8007d26 <HAL_RCC_OscConfig+0x52e>
 8007cee:	bf00      	nop
 8007cf0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007cf4:	4b9b      	ldr	r3, [pc, #620]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a9a      	ldr	r2, [pc, #616]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007cfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cfe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d00:	f7fb f926 	bl	8002f50 <HAL_GetTick>
 8007d04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d06:	e008      	b.n	8007d1a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d08:	f7fb f922 	bl	8002f50 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d901      	bls.n	8007d1a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e1c0      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d1a:	4b92      	ldr	r3, [pc, #584]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1f0      	bne.n	8007d08 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0304 	and.w	r3, r3, #4
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 8081 	beq.w	8007e36 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d34:	4b8c      	ldr	r3, [pc, #560]	@ (8007f68 <HAL_RCC_OscConfig+0x770>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a8b      	ldr	r2, [pc, #556]	@ (8007f68 <HAL_RCC_OscConfig+0x770>)
 8007d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d40:	f7fb f906 	bl	8002f50 <HAL_GetTick>
 8007d44:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d46:	e008      	b.n	8007d5a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d48:	f7fb f902 	bl	8002f50 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b64      	cmp	r3, #100	@ 0x64
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e1a0      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d5a:	4b83      	ldr	r3, [pc, #524]	@ (8007f68 <HAL_RCC_OscConfig+0x770>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0f0      	beq.n	8007d48 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d106      	bne.n	8007d7c <HAL_RCC_OscConfig+0x584>
 8007d6e:	4b7d      	ldr	r3, [pc, #500]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d72:	4a7c      	ldr	r2, [pc, #496]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007d74:	f043 0301 	orr.w	r3, r3, #1
 8007d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d7a:	e02d      	b.n	8007dd8 <HAL_RCC_OscConfig+0x5e0>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10c      	bne.n	8007d9e <HAL_RCC_OscConfig+0x5a6>
 8007d84:	4b77      	ldr	r3, [pc, #476]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d88:	4a76      	ldr	r2, [pc, #472]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007d8a:	f023 0301 	bic.w	r3, r3, #1
 8007d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d90:	4b74      	ldr	r3, [pc, #464]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d94:	4a73      	ldr	r2, [pc, #460]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007d96:	f023 0304 	bic.w	r3, r3, #4
 8007d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d9c:	e01c      	b.n	8007dd8 <HAL_RCC_OscConfig+0x5e0>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	d10c      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x5c8>
 8007da6:	4b6f      	ldr	r3, [pc, #444]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007daa:	4a6e      	ldr	r2, [pc, #440]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007dac:	f043 0304 	orr.w	r3, r3, #4
 8007db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007db2:	4b6c      	ldr	r3, [pc, #432]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007db6:	4a6b      	ldr	r2, [pc, #428]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007db8:	f043 0301 	orr.w	r3, r3, #1
 8007dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dbe:	e00b      	b.n	8007dd8 <HAL_RCC_OscConfig+0x5e0>
 8007dc0:	4b68      	ldr	r3, [pc, #416]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dc4:	4a67      	ldr	r2, [pc, #412]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007dc6:	f023 0301 	bic.w	r3, r3, #1
 8007dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dcc:	4b65      	ldr	r3, [pc, #404]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dd0:	4a64      	ldr	r2, [pc, #400]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007dd2:	f023 0304 	bic.w	r3, r3, #4
 8007dd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d015      	beq.n	8007e0c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de0:	f7fb f8b6 	bl	8002f50 <HAL_GetTick>
 8007de4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007de6:	e00a      	b.n	8007dfe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007de8:	f7fb f8b2 	bl	8002f50 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e14e      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dfe:	4b59      	ldr	r3, [pc, #356]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0ee      	beq.n	8007de8 <HAL_RCC_OscConfig+0x5f0>
 8007e0a:	e014      	b.n	8007e36 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e0c:	f7fb f8a0 	bl	8002f50 <HAL_GetTick>
 8007e10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e12:	e00a      	b.n	8007e2a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e14:	f7fb f89c 	bl	8002f50 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e138      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e2a:	4b4e      	ldr	r3, [pc, #312]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1ee      	bne.n	8007e14 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 812d 	beq.w	800809a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007e40:	4b48      	ldr	r3, [pc, #288]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e48:	2b18      	cmp	r3, #24
 8007e4a:	f000 80bd 	beq.w	8007fc8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	f040 809e 	bne.w	8007f94 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e58:	4b42      	ldr	r3, [pc, #264]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a41      	ldr	r2, [pc, #260]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007e5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e64:	f7fb f874 	bl	8002f50 <HAL_GetTick>
 8007e68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e6c:	f7fb f870 	bl	8002f50 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e10e      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e7e:	4b39      	ldr	r3, [pc, #228]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1f0      	bne.n	8007e6c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e8a:	4b36      	ldr	r3, [pc, #216]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007e8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e8e:	4b37      	ldr	r3, [pc, #220]	@ (8007f6c <HAL_RCC_OscConfig+0x774>)
 8007e90:	4013      	ands	r3, r2
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007e9a:	0112      	lsls	r2, r2, #4
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	4931      	ldr	r1, [pc, #196]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	025b      	lsls	r3, r3, #9
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	041b      	lsls	r3, r3, #16
 8007ec2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	061b      	lsls	r3, r3, #24
 8007ed0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ed4:	4923      	ldr	r1, [pc, #140]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007eda:	4b22      	ldr	r3, [pc, #136]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ede:	4a21      	ldr	r2, [pc, #132]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007ee0:	f023 0301 	bic.w	r3, r3, #1
 8007ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eea:	4b21      	ldr	r3, [pc, #132]	@ (8007f70 <HAL_RCC_OscConfig+0x778>)
 8007eec:	4013      	ands	r3, r2
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007ef2:	00d2      	lsls	r2, r2, #3
 8007ef4:	491b      	ldr	r1, [pc, #108]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007efa:	4b1a      	ldr	r3, [pc, #104]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007efe:	f023 020c 	bic.w	r2, r3, #12
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f06:	4917      	ldr	r1, [pc, #92]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007f0c:	4b15      	ldr	r3, [pc, #84]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f10:	f023 0202 	bic.w	r2, r3, #2
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f18:	4912      	ldr	r1, [pc, #72]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f1e:	4b11      	ldr	r3, [pc, #68]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f22:	4a10      	ldr	r2, [pc, #64]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2e:	4a0d      	ldr	r2, [pc, #52]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007f36:	4b0b      	ldr	r3, [pc, #44]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007f42:	4b08      	ldr	r3, [pc, #32]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f46:	4a07      	ldr	r2, [pc, #28]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f48:	f043 0301 	orr.w	r3, r3, #1
 8007f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f4e:	4b05      	ldr	r3, [pc, #20]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a04      	ldr	r2, [pc, #16]	@ (8007f64 <HAL_RCC_OscConfig+0x76c>)
 8007f54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f5a:	f7fa fff9 	bl	8002f50 <HAL_GetTick>
 8007f5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f60:	e011      	b.n	8007f86 <HAL_RCC_OscConfig+0x78e>
 8007f62:	bf00      	nop
 8007f64:	58024400 	.word	0x58024400
 8007f68:	58024800 	.word	0x58024800
 8007f6c:	fffffc0c 	.word	0xfffffc0c
 8007f70:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f74:	f7fa ffec 	bl	8002f50 <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e08a      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f86:	4b47      	ldr	r3, [pc, #284]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0f0      	beq.n	8007f74 <HAL_RCC_OscConfig+0x77c>
 8007f92:	e082      	b.n	800809a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f94:	4b43      	ldr	r3, [pc, #268]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a42      	ldr	r2, [pc, #264]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 8007f9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa0:	f7fa ffd6 	bl	8002f50 <HAL_GetTick>
 8007fa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fa6:	e008      	b.n	8007fba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fa8:	f7fa ffd2 	bl	8002f50 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e070      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fba:	4b3a      	ldr	r3, [pc, #232]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f0      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x7b0>
 8007fc6:	e068      	b.n	800809a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007fc8:	4b36      	ldr	r3, [pc, #216]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 8007fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fcc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007fce:	4b35      	ldr	r3, [pc, #212]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d031      	beq.n	8008040 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f003 0203 	and.w	r2, r3, #3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d12a      	bne.n	8008040 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	091b      	lsrs	r3, r3, #4
 8007fee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d122      	bne.n	8008040 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008004:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008006:	429a      	cmp	r2, r3
 8008008:	d11a      	bne.n	8008040 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	0a5b      	lsrs	r3, r3, #9
 800800e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008016:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008018:	429a      	cmp	r2, r3
 800801a:	d111      	bne.n	8008040 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	0c1b      	lsrs	r3, r3, #16
 8008020:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008028:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800802a:	429a      	cmp	r2, r3
 800802c:	d108      	bne.n	8008040 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	0e1b      	lsrs	r3, r3, #24
 8008032:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800803c:	429a      	cmp	r2, r3
 800803e:	d001      	beq.n	8008044 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e02b      	b.n	800809c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008044:	4b17      	ldr	r3, [pc, #92]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 8008046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008048:	08db      	lsrs	r3, r3, #3
 800804a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800804e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	429a      	cmp	r2, r3
 8008058:	d01f      	beq.n	800809a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800805a:	4b12      	ldr	r3, [pc, #72]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 800805c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805e:	4a11      	ldr	r2, [pc, #68]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 8008060:	f023 0301 	bic.w	r3, r3, #1
 8008064:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008066:	f7fa ff73 	bl	8002f50 <HAL_GetTick>
 800806a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800806c:	bf00      	nop
 800806e:	f7fa ff6f 	bl	8002f50 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008076:	4293      	cmp	r3, r2
 8008078:	d0f9      	beq.n	800806e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800807a:	4b0a      	ldr	r3, [pc, #40]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 800807c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800807e:	4b0a      	ldr	r3, [pc, #40]	@ (80080a8 <HAL_RCC_OscConfig+0x8b0>)
 8008080:	4013      	ands	r3, r2
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008086:	00d2      	lsls	r2, r2, #3
 8008088:	4906      	ldr	r1, [pc, #24]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 800808a:	4313      	orrs	r3, r2
 800808c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800808e:	4b05      	ldr	r3, [pc, #20]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 8008090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008092:	4a04      	ldr	r2, [pc, #16]	@ (80080a4 <HAL_RCC_OscConfig+0x8ac>)
 8008094:	f043 0301 	orr.w	r3, r3, #1
 8008098:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3730      	adds	r7, #48	@ 0x30
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	58024400 	.word	0x58024400
 80080a8:	ffff0007 	.word	0xffff0007

080080ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e19c      	b.n	80083fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80080c0:	4b8a      	ldr	r3, [pc, #552]	@ (80082ec <HAL_RCC_ClockConfig+0x240>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 030f 	and.w	r3, r3, #15
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d910      	bls.n	80080f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ce:	4b87      	ldr	r3, [pc, #540]	@ (80082ec <HAL_RCC_ClockConfig+0x240>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f023 020f 	bic.w	r2, r3, #15
 80080d6:	4985      	ldr	r1, [pc, #532]	@ (80082ec <HAL_RCC_ClockConfig+0x240>)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	4313      	orrs	r3, r2
 80080dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080de:	4b83      	ldr	r3, [pc, #524]	@ (80082ec <HAL_RCC_ClockConfig+0x240>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 030f 	and.w	r3, r3, #15
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d001      	beq.n	80080f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e184      	b.n	80083fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d010      	beq.n	800811e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691a      	ldr	r2, [r3, #16]
 8008100:	4b7b      	ldr	r3, [pc, #492]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008108:	429a      	cmp	r2, r3
 800810a:	d908      	bls.n	800811e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800810c:	4b78      	ldr	r3, [pc, #480]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	4975      	ldr	r1, [pc, #468]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 800811a:	4313      	orrs	r3, r2
 800811c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0308 	and.w	r3, r3, #8
 8008126:	2b00      	cmp	r3, #0
 8008128:	d010      	beq.n	800814c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	695a      	ldr	r2, [r3, #20]
 800812e:	4b70      	ldr	r3, [pc, #448]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008136:	429a      	cmp	r2, r3
 8008138:	d908      	bls.n	800814c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800813a:	4b6d      	ldr	r3, [pc, #436]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	496a      	ldr	r1, [pc, #424]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 8008148:	4313      	orrs	r3, r2
 800814a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0310 	and.w	r3, r3, #16
 8008154:	2b00      	cmp	r3, #0
 8008156:	d010      	beq.n	800817a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699a      	ldr	r2, [r3, #24]
 800815c:	4b64      	ldr	r3, [pc, #400]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008164:	429a      	cmp	r2, r3
 8008166:	d908      	bls.n	800817a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008168:	4b61      	ldr	r3, [pc, #388]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	495e      	ldr	r1, [pc, #376]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 8008176:	4313      	orrs	r3, r2
 8008178:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0320 	and.w	r3, r3, #32
 8008182:	2b00      	cmp	r3, #0
 8008184:	d010      	beq.n	80081a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69da      	ldr	r2, [r3, #28]
 800818a:	4b59      	ldr	r3, [pc, #356]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008192:	429a      	cmp	r2, r3
 8008194:	d908      	bls.n	80081a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008196:	4b56      	ldr	r3, [pc, #344]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	4953      	ldr	r1, [pc, #332]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d010      	beq.n	80081d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	4b4d      	ldr	r3, [pc, #308]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	f003 030f 	and.w	r3, r3, #15
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d908      	bls.n	80081d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081c4:	4b4a      	ldr	r3, [pc, #296]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	f023 020f 	bic.w	r2, r3, #15
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	4947      	ldr	r1, [pc, #284]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d055      	beq.n	800828e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80081e2:	4b43      	ldr	r3, [pc, #268]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	4940      	ldr	r1, [pc, #256]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d107      	bne.n	800820c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081fc:	4b3c      	ldr	r3, [pc, #240]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d121      	bne.n	800824c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e0f6      	b.n	80083fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b03      	cmp	r3, #3
 8008212:	d107      	bne.n	8008224 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008214:	4b36      	ldr	r3, [pc, #216]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d115      	bne.n	800824c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e0ea      	b.n	80083fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d107      	bne.n	800823c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800822c:	4b30      	ldr	r3, [pc, #192]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008234:	2b00      	cmp	r3, #0
 8008236:	d109      	bne.n	800824c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e0de      	b.n	80083fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800823c:	4b2c      	ldr	r3, [pc, #176]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e0d6      	b.n	80083fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800824c:	4b28      	ldr	r3, [pc, #160]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	f023 0207 	bic.w	r2, r3, #7
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	4925      	ldr	r1, [pc, #148]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 800825a:	4313      	orrs	r3, r2
 800825c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800825e:	f7fa fe77 	bl	8002f50 <HAL_GetTick>
 8008262:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008264:	e00a      	b.n	800827c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008266:	f7fa fe73 	bl	8002f50 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008274:	4293      	cmp	r3, r2
 8008276:	d901      	bls.n	800827c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e0be      	b.n	80083fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800827c:	4b1c      	ldr	r3, [pc, #112]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	00db      	lsls	r3, r3, #3
 800828a:	429a      	cmp	r2, r3
 800828c:	d1eb      	bne.n	8008266 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d010      	beq.n	80082bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	4b14      	ldr	r3, [pc, #80]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d208      	bcs.n	80082bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082aa:	4b11      	ldr	r3, [pc, #68]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	f023 020f 	bic.w	r2, r3, #15
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	490e      	ldr	r1, [pc, #56]	@ (80082f0 <HAL_RCC_ClockConfig+0x244>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082bc:	4b0b      	ldr	r3, [pc, #44]	@ (80082ec <HAL_RCC_ClockConfig+0x240>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 030f 	and.w	r3, r3, #15
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d214      	bcs.n	80082f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ca:	4b08      	ldr	r3, [pc, #32]	@ (80082ec <HAL_RCC_ClockConfig+0x240>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f023 020f 	bic.w	r2, r3, #15
 80082d2:	4906      	ldr	r1, [pc, #24]	@ (80082ec <HAL_RCC_ClockConfig+0x240>)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082da:	4b04      	ldr	r3, [pc, #16]	@ (80082ec <HAL_RCC_ClockConfig+0x240>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 030f 	and.w	r3, r3, #15
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d005      	beq.n	80082f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e086      	b.n	80083fa <HAL_RCC_ClockConfig+0x34e>
 80082ec:	52002000 	.word	0x52002000
 80082f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d010      	beq.n	8008322 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691a      	ldr	r2, [r3, #16]
 8008304:	4b3f      	ldr	r3, [pc, #252]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800830c:	429a      	cmp	r2, r3
 800830e:	d208      	bcs.n	8008322 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008310:	4b3c      	ldr	r3, [pc, #240]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	4939      	ldr	r1, [pc, #228]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 800831e:	4313      	orrs	r3, r2
 8008320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0308 	and.w	r3, r3, #8
 800832a:	2b00      	cmp	r3, #0
 800832c:	d010      	beq.n	8008350 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	695a      	ldr	r2, [r3, #20]
 8008332:	4b34      	ldr	r3, [pc, #208]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800833a:	429a      	cmp	r2, r3
 800833c:	d208      	bcs.n	8008350 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800833e:	4b31      	ldr	r3, [pc, #196]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	492e      	ldr	r1, [pc, #184]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 800834c:	4313      	orrs	r3, r2
 800834e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0310 	and.w	r3, r3, #16
 8008358:	2b00      	cmp	r3, #0
 800835a:	d010      	beq.n	800837e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699a      	ldr	r2, [r3, #24]
 8008360:	4b28      	ldr	r3, [pc, #160]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008368:	429a      	cmp	r2, r3
 800836a:	d208      	bcs.n	800837e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800836c:	4b25      	ldr	r3, [pc, #148]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	4922      	ldr	r1, [pc, #136]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 800837a:	4313      	orrs	r3, r2
 800837c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b00      	cmp	r3, #0
 8008388:	d010      	beq.n	80083ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	69da      	ldr	r2, [r3, #28]
 800838e:	4b1d      	ldr	r3, [pc, #116]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008396:	429a      	cmp	r2, r3
 8008398:	d208      	bcs.n	80083ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800839a:	4b1a      	ldr	r3, [pc, #104]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	4917      	ldr	r1, [pc, #92]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80083ac:	f000 f834 	bl	8008418 <HAL_RCC_GetSysClockFreq>
 80083b0:	4602      	mov	r2, r0
 80083b2:	4b14      	ldr	r3, [pc, #80]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	0a1b      	lsrs	r3, r3, #8
 80083b8:	f003 030f 	and.w	r3, r3, #15
 80083bc:	4912      	ldr	r1, [pc, #72]	@ (8008408 <HAL_RCC_ClockConfig+0x35c>)
 80083be:	5ccb      	ldrb	r3, [r1, r3]
 80083c0:	f003 031f 	and.w	r3, r3, #31
 80083c4:	fa22 f303 	lsr.w	r3, r2, r3
 80083c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80083ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008404 <HAL_RCC_ClockConfig+0x358>)
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f003 030f 	and.w	r3, r3, #15
 80083d2:	4a0d      	ldr	r2, [pc, #52]	@ (8008408 <HAL_RCC_ClockConfig+0x35c>)
 80083d4:	5cd3      	ldrb	r3, [r2, r3]
 80083d6:	f003 031f 	and.w	r3, r3, #31
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	fa22 f303 	lsr.w	r3, r2, r3
 80083e0:	4a0a      	ldr	r2, [pc, #40]	@ (800840c <HAL_RCC_ClockConfig+0x360>)
 80083e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80083e4:	4a0a      	ldr	r2, [pc, #40]	@ (8008410 <HAL_RCC_ClockConfig+0x364>)
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80083ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008414 <HAL_RCC_ClockConfig+0x368>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7f9 fd58 	bl	8001ea4 <HAL_InitTick>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	58024400 	.word	0x58024400
 8008408:	080221c4 	.word	0x080221c4
 800840c:	24000008 	.word	0x24000008
 8008410:	24000004 	.word	0x24000004
 8008414:	2400000c 	.word	0x2400000c

08008418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008418:	b480      	push	{r7}
 800841a:	b089      	sub	sp, #36	@ 0x24
 800841c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800841e:	4bb3      	ldr	r3, [pc, #716]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008426:	2b18      	cmp	r3, #24
 8008428:	f200 8155 	bhi.w	80086d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800842c:	a201      	add	r2, pc, #4	@ (adr r2, 8008434 <HAL_RCC_GetSysClockFreq+0x1c>)
 800842e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008432:	bf00      	nop
 8008434:	08008499 	.word	0x08008499
 8008438:	080086d7 	.word	0x080086d7
 800843c:	080086d7 	.word	0x080086d7
 8008440:	080086d7 	.word	0x080086d7
 8008444:	080086d7 	.word	0x080086d7
 8008448:	080086d7 	.word	0x080086d7
 800844c:	080086d7 	.word	0x080086d7
 8008450:	080086d7 	.word	0x080086d7
 8008454:	080084bf 	.word	0x080084bf
 8008458:	080086d7 	.word	0x080086d7
 800845c:	080086d7 	.word	0x080086d7
 8008460:	080086d7 	.word	0x080086d7
 8008464:	080086d7 	.word	0x080086d7
 8008468:	080086d7 	.word	0x080086d7
 800846c:	080086d7 	.word	0x080086d7
 8008470:	080086d7 	.word	0x080086d7
 8008474:	080084c5 	.word	0x080084c5
 8008478:	080086d7 	.word	0x080086d7
 800847c:	080086d7 	.word	0x080086d7
 8008480:	080086d7 	.word	0x080086d7
 8008484:	080086d7 	.word	0x080086d7
 8008488:	080086d7 	.word	0x080086d7
 800848c:	080086d7 	.word	0x080086d7
 8008490:	080086d7 	.word	0x080086d7
 8008494:	080084cb 	.word	0x080084cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008498:	4b94      	ldr	r3, [pc, #592]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d009      	beq.n	80084b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084a4:	4b91      	ldr	r3, [pc, #580]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	08db      	lsrs	r3, r3, #3
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	4a90      	ldr	r2, [pc, #576]	@ (80086f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
 80084b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80084b6:	e111      	b.n	80086dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80084b8:	4b8d      	ldr	r3, [pc, #564]	@ (80086f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80084ba:	61bb      	str	r3, [r7, #24]
      break;
 80084bc:	e10e      	b.n	80086dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80084be:	4b8d      	ldr	r3, [pc, #564]	@ (80086f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80084c0:	61bb      	str	r3, [r7, #24]
      break;
 80084c2:	e10b      	b.n	80086dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80084c4:	4b8c      	ldr	r3, [pc, #560]	@ (80086f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80084c6:	61bb      	str	r3, [r7, #24]
      break;
 80084c8:	e108      	b.n	80086dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084ca:	4b88      	ldr	r3, [pc, #544]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80084d4:	4b85      	ldr	r3, [pc, #532]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d8:	091b      	lsrs	r3, r3, #4
 80084da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80084e0:	4b82      	ldr	r3, [pc, #520]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80084ea:	4b80      	ldr	r3, [pc, #512]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ee:	08db      	lsrs	r3, r3, #3
 80084f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	fb02 f303 	mul.w	r3, r2, r3
 80084fa:	ee07 3a90 	vmov	s15, r3
 80084fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008502:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 80e1 	beq.w	80086d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b02      	cmp	r3, #2
 8008512:	f000 8083 	beq.w	800861c <HAL_RCC_GetSysClockFreq+0x204>
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b02      	cmp	r3, #2
 800851a:	f200 80a1 	bhi.w	8008660 <HAL_RCC_GetSysClockFreq+0x248>
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <HAL_RCC_GetSysClockFreq+0x114>
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d056      	beq.n	80085d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800852a:	e099      	b.n	8008660 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800852c:	4b6f      	ldr	r3, [pc, #444]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0320 	and.w	r3, r3, #32
 8008534:	2b00      	cmp	r3, #0
 8008536:	d02d      	beq.n	8008594 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008538:	4b6c      	ldr	r3, [pc, #432]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	08db      	lsrs	r3, r3, #3
 800853e:	f003 0303 	and.w	r3, r3, #3
 8008542:	4a6b      	ldr	r2, [pc, #428]	@ (80086f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008544:	fa22 f303 	lsr.w	r3, r2, r3
 8008548:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	ee07 3a90 	vmov	s15, r3
 8008550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	ee07 3a90 	vmov	s15, r3
 800855a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008562:	4b62      	ldr	r3, [pc, #392]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008572:	ed97 6a02 	vldr	s12, [r7, #8]
 8008576:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80086fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800857a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800858a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008592:	e087      	b.n	80086a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008700 <HAL_RCC_GetSysClockFreq+0x2e8>
 80085a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a6:	4b51      	ldr	r3, [pc, #324]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80085ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80086fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80085be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085d6:	e065      	b.n	80086a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008704 <HAL_RCC_GetSysClockFreq+0x2ec>
 80085e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ea:	4b40      	ldr	r3, [pc, #256]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f2:	ee07 3a90 	vmov	s15, r3
 80085f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80085fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80086fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800860a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800860e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008616:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800861a:	e043      	b.n	80086a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008626:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008708 <HAL_RCC_GetSysClockFreq+0x2f0>
 800862a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862e:	4b2f      	ldr	r3, [pc, #188]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008642:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80086fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800864a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800865e:	e021      	b.n	80086a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008704 <HAL_RCC_GetSysClockFreq+0x2ec>
 800866e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008672:	4b1e      	ldr	r3, [pc, #120]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008682:	ed97 6a02 	vldr	s12, [r7, #8]
 8008686:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80086fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800868a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800869a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80086a4:	4b11      	ldr	r3, [pc, #68]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a8:	0a5b      	lsrs	r3, r3, #9
 80086aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ae:	3301      	adds	r3, #1
 80086b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	ee07 3a90 	vmov	s15, r3
 80086b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80086bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80086c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086c8:	ee17 3a90 	vmov	r3, s15
 80086cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80086ce:	e005      	b.n	80086dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	61bb      	str	r3, [r7, #24]
      break;
 80086d4:	e002      	b.n	80086dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80086d6:	4b07      	ldr	r3, [pc, #28]	@ (80086f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80086d8:	61bb      	str	r3, [r7, #24]
      break;
 80086da:	bf00      	nop
  }

  return sysclockfreq;
 80086dc:	69bb      	ldr	r3, [r7, #24]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3724      	adds	r7, #36	@ 0x24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	58024400 	.word	0x58024400
 80086f0:	03d09000 	.word	0x03d09000
 80086f4:	003d0900 	.word	0x003d0900
 80086f8:	007a1200 	.word	0x007a1200
 80086fc:	46000000 	.word	0x46000000
 8008700:	4c742400 	.word	0x4c742400
 8008704:	4a742400 	.word	0x4a742400
 8008708:	4af42400 	.word	0x4af42400

0800870c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008712:	f7ff fe81 	bl	8008418 <HAL_RCC_GetSysClockFreq>
 8008716:	4602      	mov	r2, r0
 8008718:	4b10      	ldr	r3, [pc, #64]	@ (800875c <HAL_RCC_GetHCLKFreq+0x50>)
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	0a1b      	lsrs	r3, r3, #8
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	490f      	ldr	r1, [pc, #60]	@ (8008760 <HAL_RCC_GetHCLKFreq+0x54>)
 8008724:	5ccb      	ldrb	r3, [r1, r3]
 8008726:	f003 031f 	and.w	r3, r3, #31
 800872a:	fa22 f303 	lsr.w	r3, r2, r3
 800872e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008730:	4b0a      	ldr	r3, [pc, #40]	@ (800875c <HAL_RCC_GetHCLKFreq+0x50>)
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	f003 030f 	and.w	r3, r3, #15
 8008738:	4a09      	ldr	r2, [pc, #36]	@ (8008760 <HAL_RCC_GetHCLKFreq+0x54>)
 800873a:	5cd3      	ldrb	r3, [r2, r3]
 800873c:	f003 031f 	and.w	r3, r3, #31
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	fa22 f303 	lsr.w	r3, r2, r3
 8008746:	4a07      	ldr	r2, [pc, #28]	@ (8008764 <HAL_RCC_GetHCLKFreq+0x58>)
 8008748:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800874a:	4a07      	ldr	r2, [pc, #28]	@ (8008768 <HAL_RCC_GetHCLKFreq+0x5c>)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008750:	4b04      	ldr	r3, [pc, #16]	@ (8008764 <HAL_RCC_GetHCLKFreq+0x58>)
 8008752:	681b      	ldr	r3, [r3, #0]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	58024400 	.word	0x58024400
 8008760:	080221c4 	.word	0x080221c4
 8008764:	24000008 	.word	0x24000008
 8008768:	24000004 	.word	0x24000004

0800876c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008770:	f7ff ffcc 	bl	800870c <HAL_RCC_GetHCLKFreq>
 8008774:	4602      	mov	r2, r0
 8008776:	4b06      	ldr	r3, [pc, #24]	@ (8008790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	091b      	lsrs	r3, r3, #4
 800877c:	f003 0307 	and.w	r3, r3, #7
 8008780:	4904      	ldr	r1, [pc, #16]	@ (8008794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008782:	5ccb      	ldrb	r3, [r1, r3]
 8008784:	f003 031f 	and.w	r3, r3, #31
 8008788:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800878c:	4618      	mov	r0, r3
 800878e:	bd80      	pop	{r7, pc}
 8008790:	58024400 	.word	0x58024400
 8008794:	080221c4 	.word	0x080221c4

08008798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800879c:	f7ff ffb6 	bl	800870c <HAL_RCC_GetHCLKFreq>
 80087a0:	4602      	mov	r2, r0
 80087a2:	4b06      	ldr	r3, [pc, #24]	@ (80087bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	0a1b      	lsrs	r3, r3, #8
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	4904      	ldr	r1, [pc, #16]	@ (80087c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80087ae:	5ccb      	ldrb	r3, [r1, r3]
 80087b0:	f003 031f 	and.w	r3, r3, #31
 80087b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	58024400 	.word	0x58024400
 80087c0:	080221c4 	.word	0x080221c4

080087c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	223f      	movs	r2, #63	@ 0x3f
 80087d2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80087d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008840 <HAL_RCC_GetClockConfig+0x7c>)
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	f003 0207 	and.w	r2, r3, #7
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80087e0:	4b17      	ldr	r3, [pc, #92]	@ (8008840 <HAL_RCC_GetClockConfig+0x7c>)
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80087ec:	4b14      	ldr	r3, [pc, #80]	@ (8008840 <HAL_RCC_GetClockConfig+0x7c>)
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f003 020f 	and.w	r2, r3, #15
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80087f8:	4b11      	ldr	r3, [pc, #68]	@ (8008840 <HAL_RCC_GetClockConfig+0x7c>)
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008804:	4b0e      	ldr	r3, [pc, #56]	@ (8008840 <HAL_RCC_GetClockConfig+0x7c>)
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008810:	4b0b      	ldr	r3, [pc, #44]	@ (8008840 <HAL_RCC_GetClockConfig+0x7c>)
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800881c:	4b08      	ldr	r3, [pc, #32]	@ (8008840 <HAL_RCC_GetClockConfig+0x7c>)
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008828:	4b06      	ldr	r3, [pc, #24]	@ (8008844 <HAL_RCC_GetClockConfig+0x80>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 020f 	and.w	r2, r3, #15
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	601a      	str	r2, [r3, #0]
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	58024400 	.word	0x58024400
 8008844:	52002000 	.word	0x52002000

08008848 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800884c:	b0ca      	sub	sp, #296	@ 0x128
 800884e:	af00      	add	r7, sp, #0
 8008850:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008854:	2300      	movs	r3, #0
 8008856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800885a:	2300      	movs	r3, #0
 800885c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800886c:	2500      	movs	r5, #0
 800886e:	ea54 0305 	orrs.w	r3, r4, r5
 8008872:	d049      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800887a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800887e:	d02f      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008880:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008884:	d828      	bhi.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800888a:	d01a      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800888c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008890:	d822      	bhi.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800889a:	d007      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800889c:	e01c      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800889e:	4bb8      	ldr	r3, [pc, #736]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a2:	4ab7      	ldr	r2, [pc, #732]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80088aa:	e01a      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b0:	3308      	adds	r3, #8
 80088b2:	2102      	movs	r1, #2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f002 fb61 	bl	800af7c <RCCEx_PLL2_Config>
 80088ba:	4603      	mov	r3, r0
 80088bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80088c0:	e00f      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c6:	3328      	adds	r3, #40	@ 0x28
 80088c8:	2102      	movs	r1, #2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f002 fc08 	bl	800b0e0 <RCCEx_PLL3_Config>
 80088d0:	4603      	mov	r3, r0
 80088d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80088d6:	e004      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088de:	e000      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80088e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80088ea:	4ba5      	ldr	r3, [pc, #660]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80088f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088f8:	4aa1      	ldr	r2, [pc, #644]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088fa:	430b      	orrs	r3, r1
 80088fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80088fe:	e003      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008914:	f04f 0900 	mov.w	r9, #0
 8008918:	ea58 0309 	orrs.w	r3, r8, r9
 800891c:	d047      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008924:	2b04      	cmp	r3, #4
 8008926:	d82a      	bhi.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008928:	a201      	add	r2, pc, #4	@ (adr r2, 8008930 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800892a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892e:	bf00      	nop
 8008930:	08008945 	.word	0x08008945
 8008934:	08008953 	.word	0x08008953
 8008938:	08008969 	.word	0x08008969
 800893c:	08008987 	.word	0x08008987
 8008940:	08008987 	.word	0x08008987
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008944:	4b8e      	ldr	r3, [pc, #568]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008948:	4a8d      	ldr	r2, [pc, #564]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800894a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800894e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008950:	e01a      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008956:	3308      	adds	r3, #8
 8008958:	2100      	movs	r1, #0
 800895a:	4618      	mov	r0, r3
 800895c:	f002 fb0e 	bl	800af7c <RCCEx_PLL2_Config>
 8008960:	4603      	mov	r3, r0
 8008962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008966:	e00f      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896c:	3328      	adds	r3, #40	@ 0x28
 800896e:	2100      	movs	r1, #0
 8008970:	4618      	mov	r0, r3
 8008972:	f002 fbb5 	bl	800b0e0 <RCCEx_PLL3_Config>
 8008976:	4603      	mov	r3, r0
 8008978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800897c:	e004      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008984:	e000      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10a      	bne.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008990:	4b7b      	ldr	r3, [pc, #492]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008994:	f023 0107 	bic.w	r1, r3, #7
 8008998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800899e:	4a78      	ldr	r2, [pc, #480]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089a0:	430b      	orrs	r3, r1
 80089a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80089a4:	e003      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80089ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80089ba:	f04f 0b00 	mov.w	fp, #0
 80089be:	ea5a 030b 	orrs.w	r3, sl, fp
 80089c2:	d04c      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80089c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ce:	d030      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80089d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d4:	d829      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80089d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80089d8:	d02d      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80089da:	2bc0      	cmp	r3, #192	@ 0xc0
 80089dc:	d825      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80089de:	2b80      	cmp	r3, #128	@ 0x80
 80089e0:	d018      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80089e2:	2b80      	cmp	r3, #128	@ 0x80
 80089e4:	d821      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80089ea:	2b40      	cmp	r3, #64	@ 0x40
 80089ec:	d007      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80089ee:	e01c      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089f0:	4b63      	ldr	r3, [pc, #396]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f4:	4a62      	ldr	r2, [pc, #392]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80089fc:	e01c      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a02:	3308      	adds	r3, #8
 8008a04:	2100      	movs	r1, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f002 fab8 	bl	800af7c <RCCEx_PLL2_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008a12:	e011      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a18:	3328      	adds	r3, #40	@ 0x28
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f002 fb5f 	bl	800b0e0 <RCCEx_PLL3_Config>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008a28:	e006      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a30:	e002      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008a32:	bf00      	nop
 8008a34:	e000      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008a40:	4b4f      	ldr	r3, [pc, #316]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a44:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a50:	430b      	orrs	r3, r1
 8008a52:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a54:	e003      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008a6a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008a74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	d053      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a8a:	d035      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008a8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a90:	d82e      	bhi.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a96:	d031      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008a98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a9c:	d828      	bhi.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008aa2:	d01a      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008aa8:	d822      	bhi.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008aae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ab2:	d007      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008ab4:	e01c      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab6:	4b32      	ldr	r3, [pc, #200]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aba:	4a31      	ldr	r2, [pc, #196]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ac2:	e01c      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac8:	3308      	adds	r3, #8
 8008aca:	2100      	movs	r1, #0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f002 fa55 	bl	800af7c <RCCEx_PLL2_Config>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008ad8:	e011      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ade:	3328      	adds	r3, #40	@ 0x28
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f002 fafc 	bl	800b0e0 <RCCEx_PLL3_Config>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008aee:	e006      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008af6:	e002      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008af8:	bf00      	nop
 8008afa:	e000      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10b      	bne.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008b06:	4b1e      	ldr	r3, [pc, #120]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b0a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008b16:	4a1a      	ldr	r2, [pc, #104]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b1c:	e003      	b.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008b32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008b36:	2300      	movs	r3, #0
 8008b38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008b3c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008b40:	460b      	mov	r3, r1
 8008b42:	4313      	orrs	r3, r2
 8008b44:	d056      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b52:	d038      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008b54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b58:	d831      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b5e:	d034      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008b60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b64:	d82b      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b6a:	d01d      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008b6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b70:	d825      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d006      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008b76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b7a:	d00a      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008b7c:	e01f      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b7e:	bf00      	nop
 8008b80:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b84:	4ba2      	ldr	r3, [pc, #648]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b88:	4aa1      	ldr	r2, [pc, #644]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b90:	e01c      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b96:	3308      	adds	r3, #8
 8008b98:	2100      	movs	r1, #0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f002 f9ee 	bl	800af7c <RCCEx_PLL2_Config>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008ba6:	e011      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bac:	3328      	adds	r3, #40	@ 0x28
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f002 fa95 	bl	800b0e0 <RCCEx_PLL3_Config>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bbc:	e006      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bc4:	e002      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008bc6:	bf00      	nop
 8008bc8:	e000      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10b      	bne.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008bd4:	4b8e      	ldr	r3, [pc, #568]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bd8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008be4:	4a8a      	ldr	r2, [pc, #552]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008be6:	430b      	orrs	r3, r1
 8008be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bea:	e003      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008c00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008c04:	2300      	movs	r3, #0
 8008c06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008c0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4313      	orrs	r3, r2
 8008c12:	d03a      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c1a:	2b30      	cmp	r3, #48	@ 0x30
 8008c1c:	d01f      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008c1e:	2b30      	cmp	r3, #48	@ 0x30
 8008c20:	d819      	bhi.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008c22:	2b20      	cmp	r3, #32
 8008c24:	d00c      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008c26:	2b20      	cmp	r3, #32
 8008c28:	d815      	bhi.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d019      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008c2e:	2b10      	cmp	r3, #16
 8008c30:	d111      	bne.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c32:	4b77      	ldr	r3, [pc, #476]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c36:	4a76      	ldr	r2, [pc, #472]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008c3e:	e011      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c44:	3308      	adds	r3, #8
 8008c46:	2102      	movs	r1, #2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f002 f997 	bl	800af7c <RCCEx_PLL2_Config>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008c54:	e006      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c5c:	e002      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008c5e:	bf00      	nop
 8008c60:	e000      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008c6c:	4b68      	ldr	r3, [pc, #416]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c70:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c7a:	4a65      	ldr	r2, [pc, #404]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c80:	e003      	b.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008c96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008ca0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	d051      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cb4:	d035      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008cb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cba:	d82e      	bhi.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008cbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008cc0:	d031      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008cc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008cc6:	d828      	bhi.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ccc:	d01a      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cd2:	d822      	bhi.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cdc:	d007      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008cde:	e01c      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008cec:	e01c      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f002 f940 	bl	800af7c <RCCEx_PLL2_Config>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d02:	e011      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d08:	3328      	adds	r3, #40	@ 0x28
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f002 f9e7 	bl	800b0e0 <RCCEx_PLL3_Config>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d18:	e006      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d20:	e002      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008d22:	bf00      	nop
 8008d24:	e000      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10a      	bne.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008d30:	4b37      	ldr	r3, [pc, #220]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d3e:	4a34      	ldr	r2, [pc, #208]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d40:	430b      	orrs	r3, r1
 8008d42:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d44:	e003      	b.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008d64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	d056      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d78:	d033      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008d7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d7e:	d82c      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d84:	d02f      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008d86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d8a:	d826      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d90:	d02b      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008d92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d96:	d820      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d9c:	d012      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008da2:	d81a      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d022      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dac:	d115      	bne.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008db2:	3308      	adds	r3, #8
 8008db4:	2101      	movs	r1, #1
 8008db6:	4618      	mov	r0, r3
 8008db8:	f002 f8e0 	bl	800af7c <RCCEx_PLL2_Config>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008dc2:	e015      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc8:	3328      	adds	r3, #40	@ 0x28
 8008dca:	2101      	movs	r1, #1
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f002 f987 	bl	800b0e0 <RCCEx_PLL3_Config>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008dd8:	e00a      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008de0:	e006      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008de2:	bf00      	nop
 8008de4:	e004      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008de6:	bf00      	nop
 8008de8:	e002      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008dea:	bf00      	nop
 8008dec:	e000      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10d      	bne.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008df8:	4b05      	ldr	r3, [pc, #20]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dfc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e06:	4a02      	ldr	r2, [pc, #8]	@ (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e0c:	e006      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008e0e:	bf00      	nop
 8008e10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008e28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	d055      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e48:	d033      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e4e:	d82c      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e54:	d02f      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e5a:	d826      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e60:	d02b      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008e62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e66:	d820      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e6c:	d012      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e72:	d81a      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d022      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008e78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e7c:	d115      	bne.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e82:	3308      	adds	r3, #8
 8008e84:	2101      	movs	r1, #1
 8008e86:	4618      	mov	r0, r3
 8008e88:	f002 f878 	bl	800af7c <RCCEx_PLL2_Config>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e92:	e015      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e98:	3328      	adds	r3, #40	@ 0x28
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f002 f91f 	bl	800b0e0 <RCCEx_PLL3_Config>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008ea8:	e00a      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008eb0:	e006      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008eb2:	bf00      	nop
 8008eb4:	e004      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008eb6:	bf00      	nop
 8008eb8:	e002      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008eba:	bf00      	nop
 8008ebc:	e000      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10b      	bne.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008ec8:	4ba3      	ldr	r3, [pc, #652]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ecc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008ed8:	4a9f      	ldr	r2, [pc, #636]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eda:	430b      	orrs	r3, r1
 8008edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ede:	e003      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ee4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008efe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008f02:	460b      	mov	r3, r1
 8008f04:	4313      	orrs	r3, r2
 8008f06:	d037      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f12:	d00e      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f18:	d816      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d018      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008f1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f22:	d111      	bne.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f24:	4b8c      	ldr	r3, [pc, #560]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f28:	4a8b      	ldr	r2, [pc, #556]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008f30:	e00f      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f36:	3308      	adds	r3, #8
 8008f38:	2101      	movs	r1, #1
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f002 f81e 	bl	800af7c <RCCEx_PLL2_Config>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008f46:	e004      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f4e:	e000      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f68:	4a7b      	ldr	r2, [pc, #492]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f6a:	430b      	orrs	r3, r1
 8008f6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f6e:	e003      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008f84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008f8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008f92:	460b      	mov	r3, r1
 8008f94:	4313      	orrs	r3, r2
 8008f96:	d039      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d81c      	bhi.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa8:	08008fe5 	.word	0x08008fe5
 8008fac:	08008fb9 	.word	0x08008fb9
 8008fb0:	08008fc7 	.word	0x08008fc7
 8008fb4:	08008fe5 	.word	0x08008fe5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb8:	4b67      	ldr	r3, [pc, #412]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fbc:	4a66      	ldr	r2, [pc, #408]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008fc4:	e00f      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fca:	3308      	adds	r3, #8
 8008fcc:	2102      	movs	r1, #2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 ffd4 	bl	800af7c <RCCEx_PLL2_Config>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008fda:	e004      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fe2:	e000      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008fee:	4b5a      	ldr	r3, [pc, #360]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ff2:	f023 0103 	bic.w	r1, r3, #3
 8008ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ffc:	4a56      	ldr	r2, [pc, #344]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ffe:	430b      	orrs	r3, r1
 8009000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009002:	e003      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800900c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009018:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800901c:	2300      	movs	r3, #0
 800901e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009022:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009026:	460b      	mov	r3, r1
 8009028:	4313      	orrs	r3, r2
 800902a:	f000 809f 	beq.w	800916c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800902e:	4b4b      	ldr	r3, [pc, #300]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a4a      	ldr	r2, [pc, #296]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009038:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800903a:	f7f9 ff89 	bl	8002f50 <HAL_GetTick>
 800903e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009042:	e00b      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009044:	f7f9 ff84 	bl	8002f50 <HAL_GetTick>
 8009048:	4602      	mov	r2, r0
 800904a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	2b64      	cmp	r3, #100	@ 0x64
 8009052:	d903      	bls.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800905a:	e005      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800905c:	4b3f      	ldr	r3, [pc, #252]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009064:	2b00      	cmp	r3, #0
 8009066:	d0ed      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800906c:	2b00      	cmp	r3, #0
 800906e:	d179      	bne.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009070:	4b39      	ldr	r3, [pc, #228]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009072:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009078:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800907c:	4053      	eors	r3, r2
 800907e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009082:	2b00      	cmp	r3, #0
 8009084:	d015      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009086:	4b34      	ldr	r3, [pc, #208]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800908a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800908e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009092:	4b31      	ldr	r3, [pc, #196]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009096:	4a30      	ldr	r2, [pc, #192]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800909c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800909e:	4b2e      	ldr	r3, [pc, #184]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090a2:	4a2d      	ldr	r2, [pc, #180]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090aa:	4a2b      	ldr	r2, [pc, #172]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80090b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80090ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090be:	d118      	bne.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c0:	f7f9 ff46 	bl	8002f50 <HAL_GetTick>
 80090c4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090c8:	e00d      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090ca:	f7f9 ff41 	bl	8002f50 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80090d4:	1ad2      	subs	r2, r2, r3
 80090d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80090da:	429a      	cmp	r2, r3
 80090dc:	d903      	bls.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80090e4:	e005      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090e6:	4b1c      	ldr	r3, [pc, #112]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0eb      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80090f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d129      	bne.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800910a:	d10e      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800910c:	4b12      	ldr	r3, [pc, #72]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009118:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800911c:	091a      	lsrs	r2, r3, #4
 800911e:	4b10      	ldr	r3, [pc, #64]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009120:	4013      	ands	r3, r2
 8009122:	4a0d      	ldr	r2, [pc, #52]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009124:	430b      	orrs	r3, r1
 8009126:	6113      	str	r3, [r2, #16]
 8009128:	e005      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800912a:	4b0b      	ldr	r3, [pc, #44]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	4a0a      	ldr	r2, [pc, #40]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009130:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009134:	6113      	str	r3, [r2, #16]
 8009136:	4b08      	ldr	r3, [pc, #32]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009138:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009146:	4a04      	ldr	r2, [pc, #16]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009148:	430b      	orrs	r3, r1
 800914a:	6713      	str	r3, [r2, #112]	@ 0x70
 800914c:	e00e      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800914e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009152:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009156:	e009      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009158:	58024400 	.word	0x58024400
 800915c:	58024800 	.word	0x58024800
 8009160:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009168:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800916c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	f002 0301 	and.w	r3, r2, #1
 8009178:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800917c:	2300      	movs	r3, #0
 800917e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009182:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009186:	460b      	mov	r3, r1
 8009188:	4313      	orrs	r3, r2
 800918a:	f000 8089 	beq.w	80092a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800918e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009192:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009194:	2b28      	cmp	r3, #40	@ 0x28
 8009196:	d86b      	bhi.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009198:	a201      	add	r2, pc, #4	@ (adr r2, 80091a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	08009279 	.word	0x08009279
 80091a4:	08009271 	.word	0x08009271
 80091a8:	08009271 	.word	0x08009271
 80091ac:	08009271 	.word	0x08009271
 80091b0:	08009271 	.word	0x08009271
 80091b4:	08009271 	.word	0x08009271
 80091b8:	08009271 	.word	0x08009271
 80091bc:	08009271 	.word	0x08009271
 80091c0:	08009245 	.word	0x08009245
 80091c4:	08009271 	.word	0x08009271
 80091c8:	08009271 	.word	0x08009271
 80091cc:	08009271 	.word	0x08009271
 80091d0:	08009271 	.word	0x08009271
 80091d4:	08009271 	.word	0x08009271
 80091d8:	08009271 	.word	0x08009271
 80091dc:	08009271 	.word	0x08009271
 80091e0:	0800925b 	.word	0x0800925b
 80091e4:	08009271 	.word	0x08009271
 80091e8:	08009271 	.word	0x08009271
 80091ec:	08009271 	.word	0x08009271
 80091f0:	08009271 	.word	0x08009271
 80091f4:	08009271 	.word	0x08009271
 80091f8:	08009271 	.word	0x08009271
 80091fc:	08009271 	.word	0x08009271
 8009200:	08009279 	.word	0x08009279
 8009204:	08009271 	.word	0x08009271
 8009208:	08009271 	.word	0x08009271
 800920c:	08009271 	.word	0x08009271
 8009210:	08009271 	.word	0x08009271
 8009214:	08009271 	.word	0x08009271
 8009218:	08009271 	.word	0x08009271
 800921c:	08009271 	.word	0x08009271
 8009220:	08009279 	.word	0x08009279
 8009224:	08009271 	.word	0x08009271
 8009228:	08009271 	.word	0x08009271
 800922c:	08009271 	.word	0x08009271
 8009230:	08009271 	.word	0x08009271
 8009234:	08009271 	.word	0x08009271
 8009238:	08009271 	.word	0x08009271
 800923c:	08009271 	.word	0x08009271
 8009240:	08009279 	.word	0x08009279
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009248:	3308      	adds	r3, #8
 800924a:	2101      	movs	r1, #1
 800924c:	4618      	mov	r0, r3
 800924e:	f001 fe95 	bl	800af7c <RCCEx_PLL2_Config>
 8009252:	4603      	mov	r3, r0
 8009254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009258:	e00f      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800925a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800925e:	3328      	adds	r3, #40	@ 0x28
 8009260:	2101      	movs	r1, #1
 8009262:	4618      	mov	r0, r3
 8009264:	f001 ff3c 	bl	800b0e0 <RCCEx_PLL3_Config>
 8009268:	4603      	mov	r3, r0
 800926a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800926e:	e004      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009276:	e000      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800927a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009282:	4bbf      	ldr	r3, [pc, #764]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009286:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800928a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800928e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009290:	4abb      	ldr	r2, [pc, #748]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009292:	430b      	orrs	r3, r1
 8009294:	6553      	str	r3, [r2, #84]	@ 0x54
 8009296:	e003      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800929c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80092a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f002 0302 	and.w	r3, r2, #2
 80092ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092b0:	2300      	movs	r3, #0
 80092b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80092b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80092ba:	460b      	mov	r3, r1
 80092bc:	4313      	orrs	r3, r2
 80092be:	d041      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80092c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092c6:	2b05      	cmp	r3, #5
 80092c8:	d824      	bhi.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80092ca:	a201      	add	r2, pc, #4	@ (adr r2, 80092d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	0800931d 	.word	0x0800931d
 80092d4:	080092e9 	.word	0x080092e9
 80092d8:	080092ff 	.word	0x080092ff
 80092dc:	0800931d 	.word	0x0800931d
 80092e0:	0800931d 	.word	0x0800931d
 80092e4:	0800931d 	.word	0x0800931d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ec:	3308      	adds	r3, #8
 80092ee:	2101      	movs	r1, #1
 80092f0:	4618      	mov	r0, r3
 80092f2:	f001 fe43 	bl	800af7c <RCCEx_PLL2_Config>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80092fc:	e00f      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009302:	3328      	adds	r3, #40	@ 0x28
 8009304:	2101      	movs	r1, #1
 8009306:	4618      	mov	r0, r3
 8009308:	f001 feea 	bl	800b0e0 <RCCEx_PLL3_Config>
 800930c:	4603      	mov	r3, r0
 800930e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009312:	e004      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800931a:	e000      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800931c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800931e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009326:	4b96      	ldr	r3, [pc, #600]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800932a:	f023 0107 	bic.w	r1, r3, #7
 800932e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009332:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009334:	4a92      	ldr	r2, [pc, #584]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009336:	430b      	orrs	r3, r1
 8009338:	6553      	str	r3, [r2, #84]	@ 0x54
 800933a:	e003      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	f002 0304 	and.w	r3, r2, #4
 8009350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009354:	2300      	movs	r3, #0
 8009356:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800935a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800935e:	460b      	mov	r3, r1
 8009360:	4313      	orrs	r3, r2
 8009362:	d044      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800936c:	2b05      	cmp	r3, #5
 800936e:	d825      	bhi.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009370:	a201      	add	r2, pc, #4	@ (adr r2, 8009378 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	080093c5 	.word	0x080093c5
 800937c:	08009391 	.word	0x08009391
 8009380:	080093a7 	.word	0x080093a7
 8009384:	080093c5 	.word	0x080093c5
 8009388:	080093c5 	.word	0x080093c5
 800938c:	080093c5 	.word	0x080093c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009394:	3308      	adds	r3, #8
 8009396:	2101      	movs	r1, #1
 8009398:	4618      	mov	r0, r3
 800939a:	f001 fdef 	bl	800af7c <RCCEx_PLL2_Config>
 800939e:	4603      	mov	r3, r0
 80093a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80093a4:	e00f      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093aa:	3328      	adds	r3, #40	@ 0x28
 80093ac:	2101      	movs	r1, #1
 80093ae:	4618      	mov	r0, r3
 80093b0:	f001 fe96 	bl	800b0e0 <RCCEx_PLL3_Config>
 80093b4:	4603      	mov	r3, r0
 80093b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80093ba:	e004      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093c2:	e000      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80093c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10b      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093ce:	4b6c      	ldr	r3, [pc, #432]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093d2:	f023 0107 	bic.w	r1, r3, #7
 80093d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093de:	4a68      	ldr	r2, [pc, #416]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093e0:	430b      	orrs	r3, r1
 80093e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80093e4:	e003      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	f002 0320 	and.w	r3, r2, #32
 80093fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80093fe:	2300      	movs	r3, #0
 8009400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009408:	460b      	mov	r3, r1
 800940a:	4313      	orrs	r3, r2
 800940c:	d055      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800940e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009416:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800941a:	d033      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800941c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009420:	d82c      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009426:	d02f      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800942c:	d826      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800942e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009432:	d02b      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009434:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009438:	d820      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800943a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800943e:	d012      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009444:	d81a      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d022      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800944a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800944e:	d115      	bne.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009454:	3308      	adds	r3, #8
 8009456:	2100      	movs	r1, #0
 8009458:	4618      	mov	r0, r3
 800945a:	f001 fd8f 	bl	800af7c <RCCEx_PLL2_Config>
 800945e:	4603      	mov	r3, r0
 8009460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009464:	e015      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800946a:	3328      	adds	r3, #40	@ 0x28
 800946c:	2102      	movs	r1, #2
 800946e:	4618      	mov	r0, r3
 8009470:	f001 fe36 	bl	800b0e0 <RCCEx_PLL3_Config>
 8009474:	4603      	mov	r3, r0
 8009476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800947a:	e00a      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009482:	e006      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009484:	bf00      	nop
 8009486:	e004      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009488:	bf00      	nop
 800948a:	e002      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800948c:	bf00      	nop
 800948e:	e000      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10b      	bne.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800949a:	4b39      	ldr	r3, [pc, #228]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800949c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800949e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80094a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094aa:	4a35      	ldr	r2, [pc, #212]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094ac:	430b      	orrs	r3, r1
 80094ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80094b0:	e003      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80094ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80094c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80094ca:	2300      	movs	r3, #0
 80094cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80094d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4313      	orrs	r3, r2
 80094d8:	d058      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80094e6:	d033      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80094e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80094ec:	d82c      	bhi.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80094ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094f2:	d02f      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80094f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094f8:	d826      	bhi.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80094fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094fe:	d02b      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009500:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009504:	d820      	bhi.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009506:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800950a:	d012      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800950c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009510:	d81a      	bhi.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009512:	2b00      	cmp	r3, #0
 8009514:	d022      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800951a:	d115      	bne.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800951c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009520:	3308      	adds	r3, #8
 8009522:	2100      	movs	r1, #0
 8009524:	4618      	mov	r0, r3
 8009526:	f001 fd29 	bl	800af7c <RCCEx_PLL2_Config>
 800952a:	4603      	mov	r3, r0
 800952c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009530:	e015      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009536:	3328      	adds	r3, #40	@ 0x28
 8009538:	2102      	movs	r1, #2
 800953a:	4618      	mov	r0, r3
 800953c:	f001 fdd0 	bl	800b0e0 <RCCEx_PLL3_Config>
 8009540:	4603      	mov	r3, r0
 8009542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009546:	e00a      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800954e:	e006      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009550:	bf00      	nop
 8009552:	e004      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009554:	bf00      	nop
 8009556:	e002      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009558:	bf00      	nop
 800955a:	e000      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800955c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800955e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10e      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009566:	4b06      	ldr	r3, [pc, #24]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800956a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800956e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009572:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009576:	4a02      	ldr	r2, [pc, #8]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009578:	430b      	orrs	r3, r1
 800957a:	6593      	str	r3, [r2, #88]	@ 0x58
 800957c:	e006      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800957e:	bf00      	nop
 8009580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800958c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800959c:	2300      	movs	r3, #0
 800959e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80095a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80095a6:	460b      	mov	r3, r1
 80095a8:	4313      	orrs	r3, r2
 80095aa:	d055      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80095ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80095b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80095b8:	d033      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80095ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80095be:	d82c      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80095c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095c4:	d02f      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80095c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095ca:	d826      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80095cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80095d0:	d02b      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80095d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80095d6:	d820      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80095d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095dc:	d012      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80095de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095e2:	d81a      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d022      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80095e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095ec:	d115      	bne.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f2:	3308      	adds	r3, #8
 80095f4:	2100      	movs	r1, #0
 80095f6:	4618      	mov	r0, r3
 80095f8:	f001 fcc0 	bl	800af7c <RCCEx_PLL2_Config>
 80095fc:	4603      	mov	r3, r0
 80095fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009602:	e015      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009608:	3328      	adds	r3, #40	@ 0x28
 800960a:	2102      	movs	r1, #2
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fd67 	bl	800b0e0 <RCCEx_PLL3_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009618:	e00a      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009620:	e006      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009622:	bf00      	nop
 8009624:	e004      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009626:	bf00      	nop
 8009628:	e002      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800962a:	bf00      	nop
 800962c:	e000      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800962e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10b      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009638:	4ba1      	ldr	r3, [pc, #644]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800963a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800963c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009644:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009648:	4a9d      	ldr	r2, [pc, #628]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800964a:	430b      	orrs	r3, r1
 800964c:	6593      	str	r3, [r2, #88]	@ 0x58
 800964e:	e003      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f002 0308 	and.w	r3, r2, #8
 8009664:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009668:	2300      	movs	r3, #0
 800966a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800966e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009672:	460b      	mov	r3, r1
 8009674:	4313      	orrs	r3, r2
 8009676:	d01e      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800967c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009684:	d10c      	bne.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800968a:	3328      	adds	r3, #40	@ 0x28
 800968c:	2102      	movs	r1, #2
 800968e:	4618      	mov	r0, r3
 8009690:	f001 fd26 	bl	800b0e0 <RCCEx_PLL3_Config>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d002      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80096a0:	4b87      	ldr	r3, [pc, #540]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096b0:	4a83      	ldr	r2, [pc, #524]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096b2:	430b      	orrs	r3, r1
 80096b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f002 0310 	and.w	r3, r2, #16
 80096c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096c6:	2300      	movs	r3, #0
 80096c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80096cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80096d0:	460b      	mov	r3, r1
 80096d2:	4313      	orrs	r3, r2
 80096d4:	d01e      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80096d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096e2:	d10c      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80096e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e8:	3328      	adds	r3, #40	@ 0x28
 80096ea:	2102      	movs	r1, #2
 80096ec:	4618      	mov	r0, r3
 80096ee:	f001 fcf7 	bl	800b0e0 <RCCEx_PLL3_Config>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096fe:	4b70      	ldr	r3, [pc, #448]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009702:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800970a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800970e:	4a6c      	ldr	r2, [pc, #432]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009710:	430b      	orrs	r3, r1
 8009712:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009720:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009724:	2300      	movs	r3, #0
 8009726:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800972a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800972e:	460b      	mov	r3, r1
 8009730:	4313      	orrs	r3, r2
 8009732:	d03e      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800973c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009740:	d022      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009746:	d81b      	bhi.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800974c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009750:	d00b      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009752:	e015      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009758:	3308      	adds	r3, #8
 800975a:	2100      	movs	r1, #0
 800975c:	4618      	mov	r0, r3
 800975e:	f001 fc0d 	bl	800af7c <RCCEx_PLL2_Config>
 8009762:	4603      	mov	r3, r0
 8009764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009768:	e00f      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800976a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976e:	3328      	adds	r3, #40	@ 0x28
 8009770:	2102      	movs	r1, #2
 8009772:	4618      	mov	r0, r3
 8009774:	f001 fcb4 	bl	800b0e0 <RCCEx_PLL3_Config>
 8009778:	4603      	mov	r3, r0
 800977a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800977e:	e004      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009786:	e000      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800978a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10b      	bne.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009792:	4b4b      	ldr	r3, [pc, #300]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009796:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800979a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80097a2:	4a47      	ldr	r2, [pc, #284]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097a4:	430b      	orrs	r3, r1
 80097a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80097a8:	e003      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80097b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80097be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80097c0:	2300      	movs	r3, #0
 80097c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80097c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80097c8:	460b      	mov	r3, r1
 80097ca:	4313      	orrs	r3, r2
 80097cc:	d03b      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80097ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097da:	d01f      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80097dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097e0:	d818      	bhi.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80097e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097e6:	d003      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80097e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097ec:	d007      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80097ee:	e011      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097f0:	4b33      	ldr	r3, [pc, #204]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f4:	4a32      	ldr	r2, [pc, #200]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80097fc:	e00f      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009802:	3328      	adds	r3, #40	@ 0x28
 8009804:	2101      	movs	r1, #1
 8009806:	4618      	mov	r0, r3
 8009808:	f001 fc6a 	bl	800b0e0 <RCCEx_PLL3_Config>
 800980c:	4603      	mov	r3, r0
 800980e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009812:	e004      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800981a:	e000      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800981c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800981e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10b      	bne.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009826:	4b26      	ldr	r3, [pc, #152]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800982a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800982e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009836:	4a22      	ldr	r2, [pc, #136]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009838:	430b      	orrs	r3, r1
 800983a:	6553      	str	r3, [r2, #84]	@ 0x54
 800983c:	e003      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009852:	673b      	str	r3, [r7, #112]	@ 0x70
 8009854:	2300      	movs	r3, #0
 8009856:	677b      	str	r3, [r7, #116]	@ 0x74
 8009858:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800985c:	460b      	mov	r3, r1
 800985e:	4313      	orrs	r3, r2
 8009860:	d034      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800986c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009870:	d007      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009872:	e011      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009874:	4b12      	ldr	r3, [pc, #72]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009878:	4a11      	ldr	r2, [pc, #68]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800987a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800987e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009880:	e00e      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009886:	3308      	adds	r3, #8
 8009888:	2102      	movs	r1, #2
 800988a:	4618      	mov	r0, r3
 800988c:	f001 fb76 	bl	800af7c <RCCEx_PLL2_Config>
 8009890:	4603      	mov	r3, r0
 8009892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009896:	e003      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800989e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10d      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80098a8:	4b05      	ldr	r3, [pc, #20]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098b6:	4a02      	ldr	r2, [pc, #8]	@ (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098b8:	430b      	orrs	r3, r1
 80098ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80098bc:	e006      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80098be:	bf00      	nop
 80098c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80098cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80098d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098da:	2300      	movs	r3, #0
 80098dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80098e2:	460b      	mov	r3, r1
 80098e4:	4313      	orrs	r3, r2
 80098e6:	d00c      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ec:	3328      	adds	r3, #40	@ 0x28
 80098ee:	2102      	movs	r1, #2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fbf5 	bl	800b0e0 <RCCEx_PLL3_Config>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800990e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009910:	2300      	movs	r3, #0
 8009912:	667b      	str	r3, [r7, #100]	@ 0x64
 8009914:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009918:	460b      	mov	r3, r1
 800991a:	4313      	orrs	r3, r2
 800991c:	d038      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800991e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800992a:	d018      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800992c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009930:	d811      	bhi.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009936:	d014      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800993c:	d80b      	bhi.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d011      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009946:	d106      	bne.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009948:	4bc3      	ldr	r3, [pc, #780]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800994a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994c:	4ac2      	ldr	r2, [pc, #776]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800994e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009954:	e008      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800995c:	e004      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800995e:	bf00      	nop
 8009960:	e002      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009962:	bf00      	nop
 8009964:	e000      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10b      	bne.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009970:	4bb9      	ldr	r3, [pc, #740]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009974:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800997c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009980:	4ab5      	ldr	r2, [pc, #724]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009982:	430b      	orrs	r3, r1
 8009984:	6553      	str	r3, [r2, #84]	@ 0x54
 8009986:	e003      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800998c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800999c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800999e:	2300      	movs	r3, #0
 80099a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80099a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80099a6:	460b      	mov	r3, r1
 80099a8:	4313      	orrs	r3, r2
 80099aa:	d009      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80099ac:	4baa      	ldr	r3, [pc, #680]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80099b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099ba:	4aa7      	ldr	r2, [pc, #668]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099bc:	430b      	orrs	r3, r1
 80099be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80099c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80099cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80099ce:	2300      	movs	r3, #0
 80099d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80099d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80099d6:	460b      	mov	r3, r1
 80099d8:	4313      	orrs	r3, r2
 80099da:	d00a      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80099dc:	4b9e      	ldr	r3, [pc, #632]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80099e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80099ec:	4a9a      	ldr	r2, [pc, #616]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099ee:	430b      	orrs	r3, r1
 80099f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80099f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80099fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a00:	2300      	movs	r3, #0
 8009a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	d009      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a0e:	4b92      	ldr	r3, [pc, #584]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a12:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a1c:	4a8e      	ldr	r2, [pc, #568]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a1e:	430b      	orrs	r3, r1
 8009a20:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009a2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a30:	2300      	movs	r3, #0
 8009a32:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a34:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	d00e      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a3e:	4b86      	ldr	r3, [pc, #536]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	4a85      	ldr	r2, [pc, #532]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a48:	6113      	str	r3, [r2, #16]
 8009a4a:	4b83      	ldr	r3, [pc, #524]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a4c:	6919      	ldr	r1, [r3, #16]
 8009a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009a56:	4a80      	ldr	r2, [pc, #512]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a58:	430b      	orrs	r3, r1
 8009a5a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009a72:	460b      	mov	r3, r1
 8009a74:	4313      	orrs	r3, r2
 8009a76:	d009      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a78:	4b77      	ldr	r3, [pc, #476]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a7c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a86:	4a74      	ldr	r2, [pc, #464]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a88:	430b      	orrs	r3, r1
 8009a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	d00a      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009aa8:	4b6b      	ldr	r3, [pc, #428]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ab8:	4a67      	ldr	r2, [pc, #412]	@ (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009aba:	430b      	orrs	r3, r1
 8009abc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ad0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	d011      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ade:	3308      	adds	r3, #8
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f001 fa4a 	bl	800af7c <RCCEx_PLL2_Config>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	2100      	movs	r1, #0
 8009b08:	6239      	str	r1, [r7, #32]
 8009b0a:	f003 0302 	and.w	r3, r3, #2
 8009b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b10:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009b14:	460b      	mov	r3, r1
 8009b16:	4313      	orrs	r3, r2
 8009b18:	d011      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1e:	3308      	adds	r3, #8
 8009b20:	2101      	movs	r1, #1
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 fa2a 	bl	800af7c <RCCEx_PLL2_Config>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	2100      	movs	r1, #0
 8009b48:	61b9      	str	r1, [r7, #24]
 8009b4a:	f003 0304 	and.w	r3, r3, #4
 8009b4e:	61fb      	str	r3, [r7, #28]
 8009b50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009b54:	460b      	mov	r3, r1
 8009b56:	4313      	orrs	r3, r2
 8009b58:	d011      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b5e:	3308      	adds	r3, #8
 8009b60:	2102      	movs	r1, #2
 8009b62:	4618      	mov	r0, r3
 8009b64:	f001 fa0a 	bl	800af7c <RCCEx_PLL2_Config>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	2100      	movs	r1, #0
 8009b88:	6139      	str	r1, [r7, #16]
 8009b8a:	f003 0308 	and.w	r3, r3, #8
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009b94:	460b      	mov	r3, r1
 8009b96:	4313      	orrs	r3, r2
 8009b98:	d011      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b9e:	3328      	adds	r3, #40	@ 0x28
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f001 fa9c 	bl	800b0e0 <RCCEx_PLL3_Config>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	f003 0310 	and.w	r3, r3, #16
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	d011      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bde:	3328      	adds	r3, #40	@ 0x28
 8009be0:	2101      	movs	r1, #1
 8009be2:	4618      	mov	r0, r3
 8009be4:	f001 fa7c 	bl	800b0e0 <RCCEx_PLL3_Config>
 8009be8:	4603      	mov	r3, r0
 8009bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	2100      	movs	r1, #0
 8009c08:	6039      	str	r1, [r7, #0]
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	607b      	str	r3, [r7, #4]
 8009c10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009c14:	460b      	mov	r3, r1
 8009c16:	4313      	orrs	r3, r2
 8009c18:	d011      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1e:	3328      	adds	r3, #40	@ 0x28
 8009c20:	2102      	movs	r1, #2
 8009c22:	4618      	mov	r0, r3
 8009c24:	f001 fa5c 	bl	800b0e0 <RCCEx_PLL3_Config>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009c3e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d101      	bne.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	e000      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009c52:	46bd      	mov	sp, r7
 8009c54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c58:	58024400 	.word	0x58024400

08009c5c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b090      	sub	sp, #64	@ 0x40
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c6a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009c6e:	430b      	orrs	r3, r1
 8009c70:	f040 8094 	bne.w	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009c74:	4b9e      	ldr	r3, [pc, #632]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c78:	f003 0307 	and.w	r3, r3, #7
 8009c7c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	f200 8087 	bhi.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009c86:	a201      	add	r2, pc, #4	@ (adr r2, 8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009ca1 	.word	0x08009ca1
 8009c90:	08009cc9 	.word	0x08009cc9
 8009c94:	08009cf1 	.word	0x08009cf1
 8009c98:	08009d8d 	.word	0x08009d8d
 8009c9c:	08009d19 	.word	0x08009d19
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ca0:	4b93      	ldr	r3, [pc, #588]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ca8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009cac:	d108      	bne.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f001 f810 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cbc:	f000 bd45 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc4:	f000 bd41 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cc8:	4b89      	ldr	r3, [pc, #548]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cd4:	d108      	bne.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cd6:	f107 0318 	add.w	r3, r7, #24
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fd54 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ce4:	f000 bd31 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cec:	f000 bd2d 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cf0:	4b7f      	ldr	r3, [pc, #508]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cfc:	d108      	bne.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cfe:	f107 030c 	add.w	r3, r7, #12
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 fe94 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d0c:	f000 bd1d 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d14:	f000 bd19 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d18:	4b75      	ldr	r3, [pc, #468]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d20:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d22:	4b73      	ldr	r3, [pc, #460]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0304 	and.w	r3, r3, #4
 8009d2a:	2b04      	cmp	r3, #4
 8009d2c:	d10c      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d109      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d34:	4b6e      	ldr	r3, [pc, #440]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	08db      	lsrs	r3, r3, #3
 8009d3a:	f003 0303 	and.w	r3, r3, #3
 8009d3e:	4a6d      	ldr	r2, [pc, #436]	@ (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009d40:	fa22 f303 	lsr.w	r3, r2, r3
 8009d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d46:	e01f      	b.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d48:	4b69      	ldr	r3, [pc, #420]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d54:	d106      	bne.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d5c:	d102      	bne.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d5e:	4b66      	ldr	r3, [pc, #408]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d62:	e011      	b.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d64:	4b62      	ldr	r3, [pc, #392]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d70:	d106      	bne.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d78:	d102      	bne.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d7a:	4b60      	ldr	r3, [pc, #384]	@ (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d7e:	e003      	b.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d84:	f000 bce1 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d88:	f000 bcdf 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d8c:	4b5c      	ldr	r3, [pc, #368]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d90:	f000 bcdb 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d98:	f000 bcd7 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009da0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009da4:	430b      	orrs	r3, r1
 8009da6:	f040 80ad 	bne.w	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009daa:	4b51      	ldr	r3, [pc, #324]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dae:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009db2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dba:	d056      	beq.n	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dc2:	f200 8090 	bhi.w	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc8:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dca:	f000 8088 	beq.w	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd0:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dd2:	f200 8088 	bhi.w	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd8:	2b80      	cmp	r3, #128	@ 0x80
 8009dda:	d032      	beq.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dde:	2b80      	cmp	r3, #128	@ 0x80
 8009de0:	f200 8081 	bhi.w	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d003      	beq.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dec:	2b40      	cmp	r3, #64	@ 0x40
 8009dee:	d014      	beq.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009df0:	e079      	b.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009df2:	4b3f      	ldr	r3, [pc, #252]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dfe:	d108      	bne.n	8009e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 ff67 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e0e:	f000 bc9c 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e16:	f000 bc98 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e1a:	4b35      	ldr	r3, [pc, #212]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e26:	d108      	bne.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e28:	f107 0318 	add.w	r3, r7, #24
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fcab 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e36:	f000 bc88 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e3e:	f000 bc84 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e42:	4b2b      	ldr	r3, [pc, #172]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e4e:	d108      	bne.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e50:	f107 030c 	add.w	r3, r7, #12
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 fdeb 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e5e:	f000 bc74 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e66:	f000 bc70 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e6a:	4b21      	ldr	r3, [pc, #132]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e72:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e74:	4b1e      	ldr	r3, [pc, #120]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0304 	and.w	r3, r3, #4
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d10c      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d109      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e86:	4b1a      	ldr	r3, [pc, #104]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	08db      	lsrs	r3, r3, #3
 8009e8c:	f003 0303 	and.w	r3, r3, #3
 8009e90:	4a18      	ldr	r2, [pc, #96]	@ (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009e92:	fa22 f303 	lsr.w	r3, r2, r3
 8009e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e98:	e01f      	b.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e9a:	4b15      	ldr	r3, [pc, #84]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ea6:	d106      	bne.n	8009eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009eae:	d102      	bne.n	8009eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009eb0:	4b11      	ldr	r3, [pc, #68]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009eb4:	e011      	b.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ebe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ec2:	d106      	bne.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009eca:	d102      	bne.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ed0:	e003      	b.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009ed6:	f000 bc38 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009eda:	f000 bc36 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ede:	4b08      	ldr	r3, [pc, #32]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee2:	f000 bc32 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eea:	f000 bc2e 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009eee:	bf00      	nop
 8009ef0:	58024400 	.word	0x58024400
 8009ef4:	03d09000 	.word	0x03d09000
 8009ef8:	003d0900 	.word	0x003d0900
 8009efc:	007a1200 	.word	0x007a1200
 8009f00:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f08:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009f0c:	430b      	orrs	r3, r1
 8009f0e:	f040 809c 	bne.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009f12:	4b9e      	ldr	r3, [pc, #632]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f16:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009f1a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f22:	d054      	beq.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f2a:	f200 808b 	bhi.w	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009f34:	f000 8083 	beq.w	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009f3e:	f200 8081 	bhi.w	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f48:	d02f      	beq.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f50:	d878      	bhi.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f5e:	d012      	beq.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009f60:	e070      	b.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f62:	4b8a      	ldr	r3, [pc, #552]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f6e:	d107      	bne.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 feaf 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f7e:	e3e4      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f84:	e3e1      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f86:	4b81      	ldr	r3, [pc, #516]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f92:	d107      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f94:	f107 0318 	add.w	r3, r7, #24
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 fbf5 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fa2:	e3d2      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fa8:	e3cf      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009faa:	4b78      	ldr	r3, [pc, #480]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fb6:	d107      	bne.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fb8:	f107 030c 	add.w	r3, r7, #12
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 fd37 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fc6:	e3c0      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fcc:	e3bd      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009fce:	4b6f      	ldr	r3, [pc, #444]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009fd6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fd8:	4b6c      	ldr	r3, [pc, #432]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d10c      	bne.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d109      	bne.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fea:	4b68      	ldr	r3, [pc, #416]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	08db      	lsrs	r3, r3, #3
 8009ff0:	f003 0303 	and.w	r3, r3, #3
 8009ff4:	4a66      	ldr	r2, [pc, #408]	@ (800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8009ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ffc:	e01e      	b.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ffe:	4b63      	ldr	r3, [pc, #396]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a00a:	d106      	bne.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a00e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a012:	d102      	bne.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a014:	4b5f      	ldr	r3, [pc, #380]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a018:	e010      	b.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a01a:	4b5c      	ldr	r3, [pc, #368]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a026:	d106      	bne.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a02a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a02e:	d102      	bne.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a030:	4b59      	ldr	r3, [pc, #356]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a034:	e002      	b.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a03a:	e386      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a03c:	e385      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a03e:	4b57      	ldr	r3, [pc, #348]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a042:	e382      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a048:	e37f      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a04e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a052:	430b      	orrs	r3, r1
 800a054:	f040 80a7 	bne.w	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a058:	4b4c      	ldr	r3, [pc, #304]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a05a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a05c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a060:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a064:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a068:	d055      	beq.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a070:	f200 8096 	bhi.w	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a076:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a07a:	f000 8084 	beq.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a080:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a084:	f200 808c 	bhi.w	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a08e:	d030      	beq.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a096:	f200 8083 	bhi.w	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d004      	beq.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0a6:	d012      	beq.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a0a8:	e07a      	b.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0aa:	4b38      	ldr	r3, [pc, #224]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0b6:	d107      	bne.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 fe0b 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0c6:	e340      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0cc:	e33d      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0ce:	4b2f      	ldr	r3, [pc, #188]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0da:	d107      	bne.n	800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0dc:	f107 0318 	add.w	r3, r7, #24
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 fb51 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ea:	e32e      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f0:	e32b      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0f2:	4b26      	ldr	r3, [pc, #152]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0fe:	d107      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a100:	f107 030c 	add.w	r3, r7, #12
 800a104:	4618      	mov	r0, r3
 800a106:	f000 fc93 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a10e:	e31c      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a114:	e319      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a116:	4b1d      	ldr	r3, [pc, #116]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a11a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a11e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a120:	4b1a      	ldr	r3, [pc, #104]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d10c      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a12c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d109      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a132:	4b16      	ldr	r3, [pc, #88]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	08db      	lsrs	r3, r3, #3
 800a138:	f003 0303 	and.w	r3, r3, #3
 800a13c:	4a14      	ldr	r2, [pc, #80]	@ (800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a13e:	fa22 f303 	lsr.w	r3, r2, r3
 800a142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a144:	e01e      	b.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a146:	4b11      	ldr	r3, [pc, #68]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a14e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a152:	d106      	bne.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a15a:	d102      	bne.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a15c:	4b0d      	ldr	r3, [pc, #52]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a160:	e010      	b.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a162:	4b0a      	ldr	r3, [pc, #40]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a16a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a16e:	d106      	bne.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a176:	d102      	bne.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a178:	4b07      	ldr	r3, [pc, #28]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a17c:	e002      	b.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a182:	e2e2      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a184:	e2e1      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a186:	4b05      	ldr	r3, [pc, #20]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a18a:	e2de      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a18c:	58024400 	.word	0x58024400
 800a190:	03d09000 	.word	0x03d09000
 800a194:	003d0900 	.word	0x003d0900
 800a198:	007a1200 	.word	0x007a1200
 800a19c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1a4:	e2d1      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a1a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1aa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a1ae:	430b      	orrs	r3, r1
 800a1b0:	f040 809c 	bne.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a1b4:	4b93      	ldr	r3, [pc, #588]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a1bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1c4:	d054      	beq.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1cc:	f200 808b 	bhi.w	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1d6:	f000 8083 	beq.w	800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1e0:	f200 8081 	bhi.w	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1ea:	d02f      	beq.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1f2:	d878      	bhi.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d004      	beq.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a200:	d012      	beq.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a202:	e070      	b.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a204:	4b7f      	ldr	r3, [pc, #508]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a20c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a210:	d107      	bne.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fd5e 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a220:	e293      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a226:	e290      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a228:	4b76      	ldr	r3, [pc, #472]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a230:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a234:	d107      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a236:	f107 0318 	add.w	r3, r7, #24
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 faa4 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a244:	e281      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a24a:	e27e      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a24c:	4b6d      	ldr	r3, [pc, #436]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a254:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a258:	d107      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a25a:	f107 030c 	add.w	r3, r7, #12
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 fbe6 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a268:	e26f      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a26e:	e26c      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a270:	4b64      	ldr	r3, [pc, #400]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a274:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a278:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a27a:	4b62      	ldr	r3, [pc, #392]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0304 	and.w	r3, r3, #4
 800a282:	2b04      	cmp	r3, #4
 800a284:	d10c      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d109      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a28c:	4b5d      	ldr	r3, [pc, #372]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	08db      	lsrs	r3, r3, #3
 800a292:	f003 0303 	and.w	r3, r3, #3
 800a296:	4a5c      	ldr	r2, [pc, #368]	@ (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a298:	fa22 f303 	lsr.w	r3, r2, r3
 800a29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a29e:	e01e      	b.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2a0:	4b58      	ldr	r3, [pc, #352]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2ac:	d106      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a2ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2b4:	d102      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2b6:	4b55      	ldr	r3, [pc, #340]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2ba:	e010      	b.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2bc:	4b51      	ldr	r3, [pc, #324]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2c8:	d106      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a2ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2d0:	d102      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2d2:	4b4f      	ldr	r3, [pc, #316]	@ (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2d6:	e002      	b.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a2dc:	e235      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2de:	e234      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2e0:	4b4c      	ldr	r3, [pc, #304]	@ (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e4:	e231      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ea:	e22e      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2f0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a2f4:	430b      	orrs	r3, r1
 800a2f6:	f040 808f 	bne.w	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a2fa:	4b42      	ldr	r3, [pc, #264]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2fe:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a302:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a306:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a30a:	d06b      	beq.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a312:	d874      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a316:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a31a:	d056      	beq.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a322:	d86c      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a326:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a32a:	d03b      	beq.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a332:	d864      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a336:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a33a:	d021      	beq.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a342:	d85c      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a346:	2b00      	cmp	r3, #0
 800a348:	d004      	beq.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a350:	d004      	beq.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a352:	e054      	b.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a354:	f7fe fa0a 	bl	800876c <HAL_RCC_GetPCLK1Freq>
 800a358:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a35a:	e1f6      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a35c:	4b29      	ldr	r3, [pc, #164]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a368:	d107      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a36a:	f107 0318 	add.w	r3, r7, #24
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 fa0a 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a378:	e1e7      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a37e:	e1e4      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a380:	4b20      	ldr	r3, [pc, #128]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a38c:	d107      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a38e:	f107 030c 	add.w	r3, r7, #12
 800a392:	4618      	mov	r0, r3
 800a394:	f000 fb4c 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a39c:	e1d5      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3a2:	e1d2      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a3a4:	4b17      	ldr	r3, [pc, #92]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0304 	and.w	r3, r3, #4
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	d109      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3b0:	4b14      	ldr	r3, [pc, #80]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	08db      	lsrs	r3, r3, #3
 800a3b6:	f003 0303 	and.w	r3, r3, #3
 800a3ba:	4a13      	ldr	r2, [pc, #76]	@ (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3c2:	e1c2      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3c8:	e1bf      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a3ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3d6:	d102      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a3d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3dc:	e1b5      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3e2:	e1b2      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a3e4:	4b07      	ldr	r3, [pc, #28]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3f0:	d102      	bne.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a3f2:	4b07      	ldr	r3, [pc, #28]	@ (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f6:	e1a8      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3fc:	e1a5      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a402:	e1a2      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a404:	58024400 	.word	0x58024400
 800a408:	03d09000 	.word	0x03d09000
 800a40c:	003d0900 	.word	0x003d0900
 800a410:	007a1200 	.word	0x007a1200
 800a414:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a41c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a420:	430b      	orrs	r3, r1
 800a422:	d173      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a424:	4b9c      	ldr	r3, [pc, #624]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a42c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a430:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a434:	d02f      	beq.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a43c:	d863      	bhi.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a440:	2b00      	cmp	r3, #0
 800a442:	d004      	beq.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a44a:	d012      	beq.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a44c:	e05b      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a44e:	4b92      	ldr	r3, [pc, #584]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a45a:	d107      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a45c:	f107 0318 	add.w	r3, r7, #24
 800a460:	4618      	mov	r0, r3
 800a462:	f000 f991 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46a:	e16e      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a470:	e16b      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a472:	4b89      	ldr	r3, [pc, #548]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a47a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a47e:	d107      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a480:	f107 030c 	add.w	r3, r7, #12
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fad3 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a48e:	e15c      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a494:	e159      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a496:	4b80      	ldr	r3, [pc, #512]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a49a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a49e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4a0:	4b7d      	ldr	r3, [pc, #500]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d10c      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4b2:	4b79      	ldr	r3, [pc, #484]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	08db      	lsrs	r3, r3, #3
 800a4b8:	f003 0303 	and.w	r3, r3, #3
 800a4bc:	4a77      	ldr	r2, [pc, #476]	@ (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a4be:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4c4:	e01e      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4c6:	4b74      	ldr	r3, [pc, #464]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4d2:	d106      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4da:	d102      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4dc:	4b70      	ldr	r3, [pc, #448]	@ (800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4e0:	e010      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4e2:	4b6d      	ldr	r3, [pc, #436]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ee:	d106      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4f6:	d102      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4f8:	4b6a      	ldr	r3, [pc, #424]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4fc:	e002      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a502:	e122      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a504:	e121      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50a:	e11e      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a50c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a510:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a514:	430b      	orrs	r3, r1
 800a516:	d133      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a518:	4b5f      	ldr	r3, [pc, #380]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a51a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a51c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a520:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a524:	2b00      	cmp	r3, #0
 800a526:	d004      	beq.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a52e:	d012      	beq.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a530:	e023      	b.n	800a57a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a532:	4b59      	ldr	r3, [pc, #356]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a53a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a53e:	d107      	bne.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a544:	4618      	mov	r0, r3
 800a546:	f000 fbc7 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a54e:	e0fc      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a554:	e0f9      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a556:	4b50      	ldr	r3, [pc, #320]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a55e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a562:	d107      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a564:	f107 0318 	add.w	r3, r7, #24
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 f90d 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a56e:	6a3b      	ldr	r3, [r7, #32]
 800a570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a572:	e0ea      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a578:	e0e7      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a57e:	e0e4      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a580:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a584:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a588:	430b      	orrs	r3, r1
 800a58a:	f040 808d 	bne.w	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a58e:	4b42      	ldr	r3, [pc, #264]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a592:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a596:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a59e:	d06b      	beq.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5a6:	d874      	bhi.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ae:	d056      	beq.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5b6:	d86c      	bhi.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a5be:	d03b      	beq.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a5c6:	d864      	bhi.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ce:	d021      	beq.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5d6:	d85c      	bhi.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d004      	beq.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5e4:	d004      	beq.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a5e6:	e054      	b.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a5e8:	f000 f8b8 	bl	800a75c <HAL_RCCEx_GetD3PCLK1Freq>
 800a5ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5ee:	e0ac      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5f0:	4b29      	ldr	r3, [pc, #164]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5fc:	d107      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5fe:	f107 0318 	add.w	r3, r7, #24
 800a602:	4618      	mov	r0, r3
 800a604:	f000 f8c0 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a60c:	e09d      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a612:	e09a      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a614:	4b20      	ldr	r3, [pc, #128]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a61c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a620:	d107      	bne.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a622:	f107 030c 	add.w	r3, r7, #12
 800a626:	4618      	mov	r0, r3
 800a628:	f000 fa02 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a630:	e08b      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a636:	e088      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a638:	4b17      	ldr	r3, [pc, #92]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b04      	cmp	r3, #4
 800a642:	d109      	bne.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a644:	4b14      	ldr	r3, [pc, #80]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	08db      	lsrs	r3, r3, #3
 800a64a:	f003 0303 	and.w	r3, r3, #3
 800a64e:	4a13      	ldr	r2, [pc, #76]	@ (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a650:	fa22 f303 	lsr.w	r3, r2, r3
 800a654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a656:	e078      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a65c:	e075      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a65e:	4b0e      	ldr	r3, [pc, #56]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a66a:	d102      	bne.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a66c:	4b0c      	ldr	r3, [pc, #48]	@ (800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a670:	e06b      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a676:	e068      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a678:	4b07      	ldr	r3, [pc, #28]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a684:	d102      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a686:	4b07      	ldr	r3, [pc, #28]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a68a:	e05e      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a690:	e05b      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a692:	2300      	movs	r3, #0
 800a694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a696:	e058      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a698:	58024400 	.word	0x58024400
 800a69c:	03d09000 	.word	0x03d09000
 800a6a0:	003d0900 	.word	0x003d0900
 800a6a4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ac:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	d148      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a6b4:	4b27      	ldr	r3, [pc, #156]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a6b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6c4:	d02a      	beq.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6cc:	d838      	bhi.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d004      	beq.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6da:	d00d      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a6dc:	e030      	b.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a6de:	4b1d      	ldr	r3, [pc, #116]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6ea:	d102      	bne.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a6ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a758 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f0:	e02b      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f6:	e028      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6f8:	4b16      	ldr	r3, [pc, #88]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a700:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a704:	d107      	bne.n	800a716 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fae4 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a714:	e019      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a71a:	e016      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a71c:	4b0d      	ldr	r3, [pc, #52]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a728:	d107      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a72a:	f107 0318 	add.w	r3, r7, #24
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 f82a 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a738:	e007      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a73e:	e004      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a744:	e001      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a74a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3740      	adds	r7, #64	@ 0x40
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	58024400 	.word	0x58024400
 800a758:	007a1200 	.word	0x007a1200

0800a75c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a760:	f7fd ffd4 	bl	800870c <HAL_RCC_GetHCLKFreq>
 800a764:	4602      	mov	r2, r0
 800a766:	4b06      	ldr	r3, [pc, #24]	@ (800a780 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	091b      	lsrs	r3, r3, #4
 800a76c:	f003 0307 	and.w	r3, r3, #7
 800a770:	4904      	ldr	r1, [pc, #16]	@ (800a784 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a772:	5ccb      	ldrb	r3, [r1, r3]
 800a774:	f003 031f 	and.w	r3, r3, #31
 800a778:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	58024400 	.word	0x58024400
 800a784:	080221c4 	.word	0x080221c4

0800a788 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a788:	b480      	push	{r7}
 800a78a:	b089      	sub	sp, #36	@ 0x24
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a790:	4ba1      	ldr	r3, [pc, #644]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a794:	f003 0303 	and.w	r3, r3, #3
 800a798:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a79a:	4b9f      	ldr	r3, [pc, #636]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a79c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a79e:	0b1b      	lsrs	r3, r3, #12
 800a7a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a7a6:	4b9c      	ldr	r3, [pc, #624]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7aa:	091b      	lsrs	r3, r3, #4
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a7b2:	4b99      	ldr	r3, [pc, #612]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7b6:	08db      	lsrs	r3, r3, #3
 800a7b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	fb02 f303 	mul.w	r3, r2, r3
 800a7c2:	ee07 3a90 	vmov	s15, r3
 800a7c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 8111 	beq.w	800a9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	f000 8083 	beq.w	800a8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	f200 80a1 	bhi.w	800a928 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d003      	beq.n	800a7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d056      	beq.n	800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a7f2:	e099      	b.n	800a928 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7f4:	4b88      	ldr	r3, [pc, #544]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 0320 	and.w	r3, r3, #32
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d02d      	beq.n	800a85c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a800:	4b85      	ldr	r3, [pc, #532]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	08db      	lsrs	r3, r3, #3
 800a806:	f003 0303 	and.w	r3, r3, #3
 800a80a:	4a84      	ldr	r2, [pc, #528]	@ (800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a80c:	fa22 f303 	lsr.w	r3, r2, r3
 800a810:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	ee07 3a90 	vmov	s15, r3
 800a818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	ee07 3a90 	vmov	s15, r3
 800a822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a82a:	4b7b      	ldr	r3, [pc, #492]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a82c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a82e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a83a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a83e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a84a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a84e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a852:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a856:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a85a:	e087      	b.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a866:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aa24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a86e:	4b6a      	ldr	r3, [pc, #424]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a87e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a882:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a88a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a88e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a89a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a89e:	e065      	b.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	ee07 3a90 	vmov	s15, r3
 800a8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aa28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a8ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8b2:	4b59      	ldr	r3, [pc, #356]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ba:	ee07 3a90 	vmov	s15, r3
 800a8be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8e2:	e043      	b.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	ee07 3a90 	vmov	s15, r3
 800a8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aa2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a8f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8f6:	4b48      	ldr	r3, [pc, #288]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a906:	ed97 6a03 	vldr	s12, [r7, #12]
 800a90a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a90e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a926:	e021      	b.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a932:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aa28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a93a:	4b37      	ldr	r3, [pc, #220]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a94a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a94e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a95a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a96a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a96c:	4b2a      	ldr	r3, [pc, #168]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a96e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a970:	0a5b      	lsrs	r3, r3, #9
 800a972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a976:	ee07 3a90 	vmov	s15, r3
 800a97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a982:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a986:	edd7 6a07 	vldr	s13, [r7, #28]
 800a98a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a98e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a992:	ee17 2a90 	vmov	r2, s15
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a99a:	4b1f      	ldr	r3, [pc, #124]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a99c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a99e:	0c1b      	lsrs	r3, r3, #16
 800a9a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9a4:	ee07 3a90 	vmov	s15, r3
 800a9a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9c0:	ee17 2a90 	vmov	r2, s15
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a9c8:	4b13      	ldr	r3, [pc, #76]	@ (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9cc:	0e1b      	lsrs	r3, r3, #24
 800a9ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9d2:	ee07 3a90 	vmov	s15, r3
 800a9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9ee:	ee17 2a90 	vmov	r2, s15
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a9f6:	e008      	b.n	800aa0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	609a      	str	r2, [r3, #8]
}
 800aa0a:	bf00      	nop
 800aa0c:	3724      	adds	r7, #36	@ 0x24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	58024400 	.word	0x58024400
 800aa1c:	03d09000 	.word	0x03d09000
 800aa20:	46000000 	.word	0x46000000
 800aa24:	4c742400 	.word	0x4c742400
 800aa28:	4a742400 	.word	0x4a742400
 800aa2c:	4af42400 	.word	0x4af42400

0800aa30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b089      	sub	sp, #36	@ 0x24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa38:	4ba1      	ldr	r3, [pc, #644]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa3c:	f003 0303 	and.w	r3, r3, #3
 800aa40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aa42:	4b9f      	ldr	r3, [pc, #636]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa46:	0d1b      	lsrs	r3, r3, #20
 800aa48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aa4e:	4b9c      	ldr	r3, [pc, #624]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa52:	0a1b      	lsrs	r3, r3, #8
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aa5a:	4b99      	ldr	r3, [pc, #612]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa5e:	08db      	lsrs	r3, r3, #3
 800aa60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	fb02 f303 	mul.w	r3, r2, r3
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 8111 	beq.w	800aca0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	f000 8083 	beq.w	800ab8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	f200 80a1 	bhi.w	800abd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d056      	beq.n	800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aa9a:	e099      	b.n	800abd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa9c:	4b88      	ldr	r3, [pc, #544]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 0320 	and.w	r3, r3, #32
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d02d      	beq.n	800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaa8:	4b85      	ldr	r3, [pc, #532]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	08db      	lsrs	r3, r3, #3
 800aaae:	f003 0303 	and.w	r3, r3, #3
 800aab2:	4a84      	ldr	r2, [pc, #528]	@ (800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aab4:	fa22 f303 	lsr.w	r3, r2, r3
 800aab8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	ee07 3a90 	vmov	s15, r3
 800aac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aad2:	4b7b      	ldr	r3, [pc, #492]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aada:	ee07 3a90 	vmov	s15, r3
 800aade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aae2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aae6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aaea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aafe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ab02:	e087      	b.n	800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800accc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ab12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab16:	4b6a      	ldr	r3, [pc, #424]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab1e:	ee07 3a90 	vmov	s15, r3
 800ab22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab46:	e065      	b.n	800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800acd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab5a:	4b59      	ldr	r3, [pc, #356]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab62:	ee07 3a90 	vmov	s15, r3
 800ab66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab8a:	e043      	b.n	800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800acd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ab9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab9e:	4b48      	ldr	r3, [pc, #288]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aba6:	ee07 3a90 	vmov	s15, r3
 800abaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abae:	ed97 6a03 	vldr	s12, [r7, #12]
 800abb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abce:	e021      	b.n	800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800acd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800abde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe2:	4b37      	ldr	r3, [pc, #220]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ac14:	4b2a      	ldr	r3, [pc, #168]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac18:	0a5b      	lsrs	r3, r3, #9
 800ac1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac3a:	ee17 2a90 	vmov	r2, s15
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ac42:	4b1f      	ldr	r3, [pc, #124]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac46:	0c1b      	lsrs	r3, r3, #16
 800ac48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac4c:	ee07 3a90 	vmov	s15, r3
 800ac50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac68:	ee17 2a90 	vmov	r2, s15
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ac70:	4b13      	ldr	r3, [pc, #76]	@ (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac74:	0e1b      	lsrs	r3, r3, #24
 800ac76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac96:	ee17 2a90 	vmov	r2, s15
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ac9e:	e008      	b.n	800acb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	609a      	str	r2, [r3, #8]
}
 800acb2:	bf00      	nop
 800acb4:	3724      	adds	r7, #36	@ 0x24
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	58024400 	.word	0x58024400
 800acc4:	03d09000 	.word	0x03d09000
 800acc8:	46000000 	.word	0x46000000
 800accc:	4c742400 	.word	0x4c742400
 800acd0:	4a742400 	.word	0x4a742400
 800acd4:	4af42400 	.word	0x4af42400

0800acd8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800acd8:	b480      	push	{r7}
 800acda:	b089      	sub	sp, #36	@ 0x24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ace0:	4ba0      	ldr	r3, [pc, #640]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ace2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace4:	f003 0303 	and.w	r3, r3, #3
 800ace8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800acea:	4b9e      	ldr	r3, [pc, #632]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acee:	091b      	lsrs	r3, r3, #4
 800acf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acf4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800acf6:	4b9b      	ldr	r3, [pc, #620]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ad00:	4b98      	ldr	r3, [pc, #608]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad04:	08db      	lsrs	r3, r3, #3
 800ad06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	fb02 f303 	mul.w	r3, r2, r3
 800ad10:	ee07 3a90 	vmov	s15, r3
 800ad14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad18:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f000 8111 	beq.w	800af46 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	f000 8083 	beq.w	800ae32 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	f200 80a1 	bhi.w	800ae76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d003      	beq.n	800ad42 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d056      	beq.n	800adee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ad40:	e099      	b.n	800ae76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad42:	4b88      	ldr	r3, [pc, #544]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0320 	and.w	r3, r3, #32
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d02d      	beq.n	800adaa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad4e:	4b85      	ldr	r3, [pc, #532]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	08db      	lsrs	r3, r3, #3
 800ad54:	f003 0303 	and.w	r3, r3, #3
 800ad58:	4a83      	ldr	r2, [pc, #524]	@ (800af68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ad5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	ee07 3a90 	vmov	s15, r3
 800ad70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad78:	4b7a      	ldr	r3, [pc, #488]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad80:	ee07 3a90 	vmov	s15, r3
 800ad84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad88:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad8c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800af6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ada0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ada4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ada8:	e087      	b.n	800aeba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	ee07 3a90 	vmov	s15, r3
 800adb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800af70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800adb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adbc:	4b69      	ldr	r3, [pc, #420]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc4:	ee07 3a90 	vmov	s15, r3
 800adc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adcc:	ed97 6a03 	vldr	s12, [r7, #12]
 800add0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800af6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800add4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800add8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800addc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ade0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ade4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adec:	e065      	b.n	800aeba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	ee07 3a90 	vmov	s15, r3
 800adf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800af74 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800adfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae00:	4b58      	ldr	r3, [pc, #352]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae08:	ee07 3a90 	vmov	s15, r3
 800ae0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae10:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae14:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800af6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae30:	e043      	b.n	800aeba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	ee07 3a90 	vmov	s15, r3
 800ae38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae3c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800af78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ae40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae44:	4b47      	ldr	r3, [pc, #284]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae4c:	ee07 3a90 	vmov	s15, r3
 800ae50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae54:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae58:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800af6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae74:	e021      	b.n	800aeba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	ee07 3a90 	vmov	s15, r3
 800ae7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae80:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800af70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ae84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae88:	4b36      	ldr	r3, [pc, #216]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae90:	ee07 3a90 	vmov	s15, r3
 800ae94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae98:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae9c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800af6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aea8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeb8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800aeba:	4b2a      	ldr	r3, [pc, #168]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aebe:	0a5b      	lsrs	r3, r3, #9
 800aec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aec4:	ee07 3a90 	vmov	s15, r3
 800aec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aecc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aed4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aedc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aee0:	ee17 2a90 	vmov	r2, s15
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800aee8:	4b1e      	ldr	r3, [pc, #120]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeec:	0c1b      	lsrs	r3, r3, #16
 800aeee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aefe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af02:	edd7 6a07 	vldr	s13, [r7, #28]
 800af06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af0e:	ee17 2a90 	vmov	r2, s15
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800af16:	4b13      	ldr	r3, [pc, #76]	@ (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af1a:	0e1b      	lsrs	r3, r3, #24
 800af1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af20:	ee07 3a90 	vmov	s15, r3
 800af24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af30:	edd7 6a07 	vldr	s13, [r7, #28]
 800af34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af3c:	ee17 2a90 	vmov	r2, s15
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800af44:	e008      	b.n	800af58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	609a      	str	r2, [r3, #8]
}
 800af58:	bf00      	nop
 800af5a:	3724      	adds	r7, #36	@ 0x24
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr
 800af64:	58024400 	.word	0x58024400
 800af68:	03d09000 	.word	0x03d09000
 800af6c:	46000000 	.word	0x46000000
 800af70:	4c742400 	.word	0x4c742400
 800af74:	4a742400 	.word	0x4a742400
 800af78:	4af42400 	.word	0x4af42400

0800af7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af8a:	4b53      	ldr	r3, [pc, #332]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800af8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af8e:	f003 0303 	and.w	r3, r3, #3
 800af92:	2b03      	cmp	r3, #3
 800af94:	d101      	bne.n	800af9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	e099      	b.n	800b0ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800af9a:	4b4f      	ldr	r3, [pc, #316]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a4e      	ldr	r2, [pc, #312]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800afa0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800afa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afa6:	f7f7 ffd3 	bl	8002f50 <HAL_GetTick>
 800afaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800afac:	e008      	b.n	800afc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800afae:	f7f7 ffcf 	bl	8002f50 <HAL_GetTick>
 800afb2:	4602      	mov	r2, r0
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d901      	bls.n	800afc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800afbc:	2303      	movs	r3, #3
 800afbe:	e086      	b.n	800b0ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800afc0:	4b45      	ldr	r3, [pc, #276]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1f0      	bne.n	800afae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800afcc:	4b42      	ldr	r3, [pc, #264]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800afce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	031b      	lsls	r3, r3, #12
 800afda:	493f      	ldr	r1, [pc, #252]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800afdc:	4313      	orrs	r3, r2
 800afde:	628b      	str	r3, [r1, #40]	@ 0x28
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	3b01      	subs	r3, #1
 800aff0:	025b      	lsls	r3, r3, #9
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	431a      	orrs	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	3b01      	subs	r3, #1
 800affc:	041b      	lsls	r3, r3, #16
 800affe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b002:	431a      	orrs	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	3b01      	subs	r3, #1
 800b00a:	061b      	lsls	r3, r3, #24
 800b00c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b010:	4931      	ldr	r1, [pc, #196]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b012:	4313      	orrs	r3, r2
 800b014:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b016:	4b30      	ldr	r3, [pc, #192]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b01a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	695b      	ldr	r3, [r3, #20]
 800b022:	492d      	ldr	r1, [pc, #180]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b024:	4313      	orrs	r3, r2
 800b026:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b028:	4b2b      	ldr	r3, [pc, #172]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b02c:	f023 0220 	bic.w	r2, r3, #32
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	4928      	ldr	r1, [pc, #160]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b036:	4313      	orrs	r3, r2
 800b038:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b03a:	4b27      	ldr	r3, [pc, #156]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b03e:	4a26      	ldr	r2, [pc, #152]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b040:	f023 0310 	bic.w	r3, r3, #16
 800b044:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b046:	4b24      	ldr	r3, [pc, #144]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b048:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b04a:	4b24      	ldr	r3, [pc, #144]	@ (800b0dc <RCCEx_PLL2_Config+0x160>)
 800b04c:	4013      	ands	r3, r2
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	69d2      	ldr	r2, [r2, #28]
 800b052:	00d2      	lsls	r2, r2, #3
 800b054:	4920      	ldr	r1, [pc, #128]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b056:	4313      	orrs	r3, r2
 800b058:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b05a:	4b1f      	ldr	r3, [pc, #124]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05e:	4a1e      	ldr	r2, [pc, #120]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b060:	f043 0310 	orr.w	r3, r3, #16
 800b064:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d106      	bne.n	800b07a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b06c:	4b1a      	ldr	r3, [pc, #104]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b070:	4a19      	ldr	r2, [pc, #100]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b072:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b076:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b078:	e00f      	b.n	800b09a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d106      	bne.n	800b08e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b080:	4b15      	ldr	r3, [pc, #84]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b084:	4a14      	ldr	r2, [pc, #80]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b08a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b08c:	e005      	b.n	800b09a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b08e:	4b12      	ldr	r3, [pc, #72]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b092:	4a11      	ldr	r2, [pc, #68]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b094:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b098:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b09a:	4b0f      	ldr	r3, [pc, #60]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a0e      	ldr	r2, [pc, #56]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b0a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b0a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0a6:	f7f7 ff53 	bl	8002f50 <HAL_GetTick>
 800b0aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0ac:	e008      	b.n	800b0c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b0ae:	f7f7 ff4f 	bl	8002f50 <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d901      	bls.n	800b0c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e006      	b.n	800b0ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0c0:	4b05      	ldr	r3, [pc, #20]	@ (800b0d8 <RCCEx_PLL2_Config+0x15c>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d0f0      	beq.n	800b0ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	58024400 	.word	0x58024400
 800b0dc:	ffff0007 	.word	0xffff0007

0800b0e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b0ee:	4b53      	ldr	r3, [pc, #332]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b0f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f2:	f003 0303 	and.w	r3, r3, #3
 800b0f6:	2b03      	cmp	r3, #3
 800b0f8:	d101      	bne.n	800b0fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e099      	b.n	800b232 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b0fe:	4b4f      	ldr	r3, [pc, #316]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a4e      	ldr	r2, [pc, #312]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b10a:	f7f7 ff21 	bl	8002f50 <HAL_GetTick>
 800b10e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b110:	e008      	b.n	800b124 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b112:	f7f7 ff1d 	bl	8002f50 <HAL_GetTick>
 800b116:	4602      	mov	r2, r0
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d901      	bls.n	800b124 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b120:	2303      	movs	r3, #3
 800b122:	e086      	b.n	800b232 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b124:	4b45      	ldr	r3, [pc, #276]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1f0      	bne.n	800b112 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b130:	4b42      	ldr	r3, [pc, #264]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b134:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	051b      	lsls	r3, r3, #20
 800b13e:	493f      	ldr	r1, [pc, #252]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b140:	4313      	orrs	r3, r2
 800b142:	628b      	str	r3, [r1, #40]	@ 0x28
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	3b01      	subs	r3, #1
 800b14a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	3b01      	subs	r3, #1
 800b154:	025b      	lsls	r3, r3, #9
 800b156:	b29b      	uxth	r3, r3
 800b158:	431a      	orrs	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	3b01      	subs	r3, #1
 800b160:	041b      	lsls	r3, r3, #16
 800b162:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b166:	431a      	orrs	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	061b      	lsls	r3, r3, #24
 800b170:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b174:	4931      	ldr	r1, [pc, #196]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b176:	4313      	orrs	r3, r2
 800b178:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b17a:	4b30      	ldr	r3, [pc, #192]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b17e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	492d      	ldr	r1, [pc, #180]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b188:	4313      	orrs	r3, r2
 800b18a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b18c:	4b2b      	ldr	r3, [pc, #172]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b190:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	4928      	ldr	r1, [pc, #160]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b19a:	4313      	orrs	r3, r2
 800b19c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b19e:	4b27      	ldr	r3, [pc, #156]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b1a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a2:	4a26      	ldr	r2, [pc, #152]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b1a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b1aa:	4b24      	ldr	r3, [pc, #144]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b1ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1ae:	4b24      	ldr	r3, [pc, #144]	@ (800b240 <RCCEx_PLL3_Config+0x160>)
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	69d2      	ldr	r2, [r2, #28]
 800b1b6:	00d2      	lsls	r2, r2, #3
 800b1b8:	4920      	ldr	r1, [pc, #128]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b1be:	4b1f      	ldr	r3, [pc, #124]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c2:	4a1e      	ldr	r2, [pc, #120]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b1c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d106      	bne.n	800b1de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b1d0:	4b1a      	ldr	r3, [pc, #104]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1d4:	4a19      	ldr	r2, [pc, #100]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b1d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b1da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b1dc:	e00f      	b.n	800b1fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d106      	bne.n	800b1f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b1e4:	4b15      	ldr	r3, [pc, #84]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e8:	4a14      	ldr	r2, [pc, #80]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b1ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b1ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b1f0:	e005      	b.n	800b1fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b1f2:	4b12      	ldr	r3, [pc, #72]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f6:	4a11      	ldr	r2, [pc, #68]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b1f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b1fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b1fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a0e      	ldr	r2, [pc, #56]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b20a:	f7f7 fea1 	bl	8002f50 <HAL_GetTick>
 800b20e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b210:	e008      	b.n	800b224 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b212:	f7f7 fe9d 	bl	8002f50 <HAL_GetTick>
 800b216:	4602      	mov	r2, r0
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d901      	bls.n	800b224 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b220:	2303      	movs	r3, #3
 800b222:	e006      	b.n	800b232 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b224:	4b05      	ldr	r3, [pc, #20]	@ (800b23c <RCCEx_PLL3_Config+0x15c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0f0      	beq.n	800b212 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b230:	7bfb      	ldrb	r3, [r7, #15]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	58024400 	.word	0x58024400
 800b240:	ffff0007 	.word	0xffff0007

0800b244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d101      	bne.n	800b256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	e049      	b.n	800b2ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d106      	bne.n	800b270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f841 	bl	800b2f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2202      	movs	r2, #2
 800b274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3304      	adds	r3, #4
 800b280:	4619      	mov	r1, r3
 800b282:	4610      	mov	r0, r2
 800b284:	f000 f9e8 	bl	800b658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b083      	sub	sp, #12
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b2fa:	bf00      	nop
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
	...

0800b308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b316:	b2db      	uxtb	r3, r3
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d001      	beq.n	800b320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e054      	b.n	800b3ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2202      	movs	r2, #2
 800b324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68da      	ldr	r2, [r3, #12]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f042 0201 	orr.w	r2, r2, #1
 800b336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a26      	ldr	r2, [pc, #152]	@ (800b3d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d022      	beq.n	800b388 <HAL_TIM_Base_Start_IT+0x80>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b34a:	d01d      	beq.n	800b388 <HAL_TIM_Base_Start_IT+0x80>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a22      	ldr	r2, [pc, #136]	@ (800b3dc <HAL_TIM_Base_Start_IT+0xd4>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d018      	beq.n	800b388 <HAL_TIM_Base_Start_IT+0x80>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a21      	ldr	r2, [pc, #132]	@ (800b3e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d013      	beq.n	800b388 <HAL_TIM_Base_Start_IT+0x80>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a1f      	ldr	r2, [pc, #124]	@ (800b3e4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d00e      	beq.n	800b388 <HAL_TIM_Base_Start_IT+0x80>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a1e      	ldr	r2, [pc, #120]	@ (800b3e8 <HAL_TIM_Base_Start_IT+0xe0>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d009      	beq.n	800b388 <HAL_TIM_Base_Start_IT+0x80>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a1c      	ldr	r2, [pc, #112]	@ (800b3ec <HAL_TIM_Base_Start_IT+0xe4>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d004      	beq.n	800b388 <HAL_TIM_Base_Start_IT+0x80>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a1b      	ldr	r2, [pc, #108]	@ (800b3f0 <HAL_TIM_Base_Start_IT+0xe8>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d115      	bne.n	800b3b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	689a      	ldr	r2, [r3, #8]
 800b38e:	4b19      	ldr	r3, [pc, #100]	@ (800b3f4 <HAL_TIM_Base_Start_IT+0xec>)
 800b390:	4013      	ands	r3, r2
 800b392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2b06      	cmp	r3, #6
 800b398:	d015      	beq.n	800b3c6 <HAL_TIM_Base_Start_IT+0xbe>
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3a0:	d011      	beq.n	800b3c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f042 0201 	orr.w	r2, r2, #1
 800b3b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3b2:	e008      	b.n	800b3c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f042 0201 	orr.w	r2, r2, #1
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	e000      	b.n	800b3c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	40010000 	.word	0x40010000
 800b3dc:	40000400 	.word	0x40000400
 800b3e0:	40000800 	.word	0x40000800
 800b3e4:	40000c00 	.word	0x40000c00
 800b3e8:	40010400 	.word	0x40010400
 800b3ec:	40001800 	.word	0x40001800
 800b3f0:	40014000 	.word	0x40014000
 800b3f4:	00010007 	.word	0x00010007

0800b3f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	f003 0302 	and.w	r3, r3, #2
 800b416:	2b00      	cmp	r3, #0
 800b418:	d020      	beq.n	800b45c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f003 0302 	and.w	r3, r3, #2
 800b420:	2b00      	cmp	r3, #0
 800b422:	d01b      	beq.n	800b45c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f06f 0202 	mvn.w	r2, #2
 800b42c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	f003 0303 	and.w	r3, r3, #3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 f8e9 	bl	800b61a <HAL_TIM_IC_CaptureCallback>
 800b448:	e005      	b.n	800b456 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f8db 	bl	800b606 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f8ec 	bl	800b62e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f003 0304 	and.w	r3, r3, #4
 800b462:	2b00      	cmp	r3, #0
 800b464:	d020      	beq.n	800b4a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f003 0304 	and.w	r3, r3, #4
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d01b      	beq.n	800b4a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f06f 0204 	mvn.w	r2, #4
 800b478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2202      	movs	r2, #2
 800b47e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d003      	beq.n	800b496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f8c3 	bl	800b61a <HAL_TIM_IC_CaptureCallback>
 800b494:	e005      	b.n	800b4a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f8b5 	bl	800b606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 f8c6 	bl	800b62e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	f003 0308 	and.w	r3, r3, #8
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d020      	beq.n	800b4f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f003 0308 	and.w	r3, r3, #8
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d01b      	beq.n	800b4f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f06f 0208 	mvn.w	r2, #8
 800b4c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2204      	movs	r2, #4
 800b4ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	69db      	ldr	r3, [r3, #28]
 800b4d2:	f003 0303 	and.w	r3, r3, #3
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d003      	beq.n	800b4e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f89d 	bl	800b61a <HAL_TIM_IC_CaptureCallback>
 800b4e0:	e005      	b.n	800b4ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f88f 	bl	800b606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 f8a0 	bl	800b62e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	f003 0310 	and.w	r3, r3, #16
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d020      	beq.n	800b540 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f003 0310 	and.w	r3, r3, #16
 800b504:	2b00      	cmp	r3, #0
 800b506:	d01b      	beq.n	800b540 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f06f 0210 	mvn.w	r2, #16
 800b510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2208      	movs	r2, #8
 800b516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b522:	2b00      	cmp	r3, #0
 800b524:	d003      	beq.n	800b52e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f877 	bl	800b61a <HAL_TIM_IC_CaptureCallback>
 800b52c:	e005      	b.n	800b53a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f869 	bl	800b606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f87a 	bl	800b62e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	f003 0301 	and.w	r3, r3, #1
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00c      	beq.n	800b564 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f003 0301 	and.w	r3, r3, #1
 800b550:	2b00      	cmp	r3, #0
 800b552:	d007      	beq.n	800b564 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f06f 0201 	mvn.w	r2, #1
 800b55c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f7f6 f8f6 	bl	8001750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d104      	bne.n	800b578 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00c      	beq.n	800b592 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d007      	beq.n	800b592 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b58a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f913 	bl	800b7b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00c      	beq.n	800b5b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d007      	beq.n	800b5b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b5ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f90b 	bl	800b7cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00c      	beq.n	800b5da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d007      	beq.n	800b5da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b5d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f834 	bl	800b642 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	f003 0320 	and.w	r3, r3, #32
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00c      	beq.n	800b5fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f003 0320 	and.w	r3, r3, #32
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d007      	beq.n	800b5fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f06f 0220 	mvn.w	r2, #32
 800b5f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f8d3 	bl	800b7a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b5fe:	bf00      	nop
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b606:	b480      	push	{r7}
 800b608:	b083      	sub	sp, #12
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b60e:	bf00      	nop
 800b610:	370c      	adds	r7, #12
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b083      	sub	sp, #12
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b622:	bf00      	nop
 800b624:	370c      	adds	r7, #12
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b62e:	b480      	push	{r7}
 800b630:	b083      	sub	sp, #12
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b636:	bf00      	nop
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b642:	b480      	push	{r7}
 800b644:	b083      	sub	sp, #12
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b64a:	bf00      	nop
 800b64c:	370c      	adds	r7, #12
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
	...

0800b658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a46      	ldr	r2, [pc, #280]	@ (800b784 <TIM_Base_SetConfig+0x12c>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d013      	beq.n	800b698 <TIM_Base_SetConfig+0x40>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b676:	d00f      	beq.n	800b698 <TIM_Base_SetConfig+0x40>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a43      	ldr	r2, [pc, #268]	@ (800b788 <TIM_Base_SetConfig+0x130>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d00b      	beq.n	800b698 <TIM_Base_SetConfig+0x40>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a42      	ldr	r2, [pc, #264]	@ (800b78c <TIM_Base_SetConfig+0x134>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d007      	beq.n	800b698 <TIM_Base_SetConfig+0x40>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a41      	ldr	r2, [pc, #260]	@ (800b790 <TIM_Base_SetConfig+0x138>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d003      	beq.n	800b698 <TIM_Base_SetConfig+0x40>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a40      	ldr	r2, [pc, #256]	@ (800b794 <TIM_Base_SetConfig+0x13c>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d108      	bne.n	800b6aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b69e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a35      	ldr	r2, [pc, #212]	@ (800b784 <TIM_Base_SetConfig+0x12c>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d01f      	beq.n	800b6f2 <TIM_Base_SetConfig+0x9a>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6b8:	d01b      	beq.n	800b6f2 <TIM_Base_SetConfig+0x9a>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a32      	ldr	r2, [pc, #200]	@ (800b788 <TIM_Base_SetConfig+0x130>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d017      	beq.n	800b6f2 <TIM_Base_SetConfig+0x9a>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a31      	ldr	r2, [pc, #196]	@ (800b78c <TIM_Base_SetConfig+0x134>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d013      	beq.n	800b6f2 <TIM_Base_SetConfig+0x9a>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a30      	ldr	r2, [pc, #192]	@ (800b790 <TIM_Base_SetConfig+0x138>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d00f      	beq.n	800b6f2 <TIM_Base_SetConfig+0x9a>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a2f      	ldr	r2, [pc, #188]	@ (800b794 <TIM_Base_SetConfig+0x13c>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d00b      	beq.n	800b6f2 <TIM_Base_SetConfig+0x9a>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a2e      	ldr	r2, [pc, #184]	@ (800b798 <TIM_Base_SetConfig+0x140>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d007      	beq.n	800b6f2 <TIM_Base_SetConfig+0x9a>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a2d      	ldr	r2, [pc, #180]	@ (800b79c <TIM_Base_SetConfig+0x144>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d003      	beq.n	800b6f2 <TIM_Base_SetConfig+0x9a>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a2c      	ldr	r2, [pc, #176]	@ (800b7a0 <TIM_Base_SetConfig+0x148>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d108      	bne.n	800b704 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	4313      	orrs	r3, r2
 800b702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	4313      	orrs	r3, r2
 800b710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	689a      	ldr	r2, [r3, #8]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4a16      	ldr	r2, [pc, #88]	@ (800b784 <TIM_Base_SetConfig+0x12c>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d00f      	beq.n	800b750 <TIM_Base_SetConfig+0xf8>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4a18      	ldr	r2, [pc, #96]	@ (800b794 <TIM_Base_SetConfig+0x13c>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d00b      	beq.n	800b750 <TIM_Base_SetConfig+0xf8>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4a17      	ldr	r2, [pc, #92]	@ (800b798 <TIM_Base_SetConfig+0x140>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d007      	beq.n	800b750 <TIM_Base_SetConfig+0xf8>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a16      	ldr	r2, [pc, #88]	@ (800b79c <TIM_Base_SetConfig+0x144>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d003      	beq.n	800b750 <TIM_Base_SetConfig+0xf8>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4a15      	ldr	r2, [pc, #84]	@ (800b7a0 <TIM_Base_SetConfig+0x148>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d103      	bne.n	800b758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	691a      	ldr	r2, [r3, #16]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	2b01      	cmp	r3, #1
 800b768:	d105      	bne.n	800b776 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	f023 0201 	bic.w	r2, r3, #1
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	611a      	str	r2, [r3, #16]
  }
}
 800b776:	bf00      	nop
 800b778:	3714      	adds	r7, #20
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop
 800b784:	40010000 	.word	0x40010000
 800b788:	40000400 	.word	0x40000400
 800b78c:	40000800 	.word	0x40000800
 800b790:	40000c00 	.word	0x40000c00
 800b794:	40010400 	.word	0x40010400
 800b798:	40014000 	.word	0x40014000
 800b79c:	40014400 	.word	0x40014400
 800b7a0:	40014800 	.word	0x40014800

0800b7a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b7d4:	bf00      	nop
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d101      	bne.n	800b7f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e042      	b.n	800b878 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d106      	bne.n	800b80a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f7f6 ff6f 	bl	80026e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2224      	movs	r2, #36	@ 0x24
 800b80e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f022 0201 	bic.w	r2, r2, #1
 800b820:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b826:	2b00      	cmp	r3, #0
 800b828:	d002      	beq.n	800b830 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f001 faea 	bl	800ce04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fd7f 	bl	800c334 <UART_SetConfig>
 800b836:	4603      	mov	r3, r0
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d101      	bne.n	800b840 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	e01b      	b.n	800b878 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b84e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	689a      	ldr	r2, [r3, #8]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b85e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f042 0201 	orr.w	r2, r2, #1
 800b86e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f001 fb69 	bl	800cf48 <UART_CheckIdleState>
 800b876:	4603      	mov	r3, r0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b08a      	sub	sp, #40	@ 0x28
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	4613      	mov	r3, r2
 800b88c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b894:	2b20      	cmp	r3, #32
 800b896:	d167      	bne.n	800b968 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <HAL_UART_Transmit_DMA+0x24>
 800b89e:	88fb      	ldrh	r3, [r7, #6]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d101      	bne.n	800b8a8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e060      	b.n	800b96a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	88fa      	ldrh	r2, [r7, #6]
 800b8b2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	88fa      	ldrh	r2, [r7, #6]
 800b8ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2221      	movs	r2, #33	@ 0x21
 800b8ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d028      	beq.n	800b928 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8da:	4a26      	ldr	r2, [pc, #152]	@ (800b974 <HAL_UART_Transmit_DMA+0xf4>)
 800b8dc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8e2:	4a25      	ldr	r2, [pc, #148]	@ (800b978 <HAL_UART_Transmit_DMA+0xf8>)
 800b8e4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8ea:	4a24      	ldr	r2, [pc, #144]	@ (800b97c <HAL_UART_Transmit_DMA+0xfc>)
 800b8ec:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8fe:	4619      	mov	r1, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3328      	adds	r3, #40	@ 0x28
 800b906:	461a      	mov	r2, r3
 800b908:	88fb      	ldrh	r3, [r7, #6]
 800b90a:	f7f9 fa6b 	bl	8004de4 <HAL_DMA_Start_IT>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d009      	beq.n	800b928 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2210      	movs	r2, #16
 800b918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2220      	movs	r2, #32
 800b920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	e020      	b.n	800b96a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2240      	movs	r2, #64	@ 0x40
 800b92e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3308      	adds	r3, #8
 800b936:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	e853 3f00 	ldrex	r3, [r3]
 800b93e:	613b      	str	r3, [r7, #16]
   return(result);
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b946:	627b      	str	r3, [r7, #36]	@ 0x24
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3308      	adds	r3, #8
 800b94e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b950:	623a      	str	r2, [r7, #32]
 800b952:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b954:	69f9      	ldr	r1, [r7, #28]
 800b956:	6a3a      	ldr	r2, [r7, #32]
 800b958:	e841 2300 	strex	r3, r2, [r1]
 800b95c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1e5      	bne.n	800b930 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	e000      	b.n	800b96a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b968:	2302      	movs	r3, #2
  }
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3728      	adds	r7, #40	@ 0x28
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	0800d415 	.word	0x0800d415
 800b978:	0800d4ab 	.word	0x0800d4ab
 800b97c:	0800d62d 	.word	0x0800d62d

0800b980 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b08a      	sub	sp, #40	@ 0x28
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	4613      	mov	r3, r2
 800b98c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b994:	2b20      	cmp	r3, #32
 800b996:	d137      	bne.n	800ba08 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d002      	beq.n	800b9a4 <HAL_UART_Receive_DMA+0x24>
 800b99e:	88fb      	ldrh	r3, [r7, #6]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d101      	bne.n	800b9a8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e030      	b.n	800ba0a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a18      	ldr	r2, [pc, #96]	@ (800ba14 <HAL_UART_Receive_DMA+0x94>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d01f      	beq.n	800b9f8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d018      	beq.n	800b9f8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	e853 3f00 	ldrex	r3, [r3]
 800b9d2:	613b      	str	r3, [r7, #16]
   return(result);
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b9da:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e4:	623b      	str	r3, [r7, #32]
 800b9e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e8:	69f9      	ldr	r1, [r7, #28]
 800b9ea:	6a3a      	ldr	r2, [r7, #32]
 800b9ec:	e841 2300 	strex	r3, r2, [r1]
 800b9f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1e6      	bne.n	800b9c6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b9f8:	88fb      	ldrh	r3, [r7, #6]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	68b9      	ldr	r1, [r7, #8]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f001 fbba 	bl	800d178 <UART_Start_Receive_DMA>
 800ba04:	4603      	mov	r3, r0
 800ba06:	e000      	b.n	800ba0a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ba08:	2302      	movs	r3, #2
  }
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3728      	adds	r7, #40	@ 0x28
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	58000c00 	.word	0x58000c00

0800ba18 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b090      	sub	sp, #64	@ 0x40
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba2e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba3a:	2b80      	cmp	r3, #128	@ 0x80
 800ba3c:	d139      	bne.n	800bab2 <HAL_UART_DMAStop+0x9a>
 800ba3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba40:	2b21      	cmp	r3, #33	@ 0x21
 800ba42:	d136      	bne.n	800bab2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	3308      	adds	r3, #8
 800ba4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4c:	6a3b      	ldr	r3, [r7, #32]
 800ba4e:	e853 3f00 	ldrex	r3, [r3]
 800ba52:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	3308      	adds	r3, #8
 800ba62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba6c:	e841 2300 	strex	r3, r2, [r1]
 800ba70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d1e5      	bne.n	800ba44 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d015      	beq.n	800baac <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7f9 fc17 	bl	80052b8 <HAL_DMA_Abort>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00d      	beq.n	800baac <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fb f89d 	bl	8006bd4 <HAL_DMA_GetError>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b20      	cmp	r3, #32
 800ba9e:	d105      	bne.n	800baac <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2210      	movs	r2, #16
 800baa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800baa8:	2303      	movs	r3, #3
 800baaa:	e047      	b.n	800bb3c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f001 fc09 	bl	800d2c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800babc:	2b40      	cmp	r3, #64	@ 0x40
 800babe:	d13c      	bne.n	800bb3a <HAL_UART_DMAStop+0x122>
 800bac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac2:	2b22      	cmp	r3, #34	@ 0x22
 800bac4:	d139      	bne.n	800bb3a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3308      	adds	r3, #8
 800bacc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	e853 3f00 	ldrex	r3, [r3]
 800bad4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800badc:	633b      	str	r3, [r7, #48]	@ 0x30
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3308      	adds	r3, #8
 800bae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bae6:	61ba      	str	r2, [r7, #24]
 800bae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baea:	6979      	ldr	r1, [r7, #20]
 800baec:	69ba      	ldr	r2, [r7, #24]
 800baee:	e841 2300 	strex	r3, r2, [r1]
 800baf2:	613b      	str	r3, [r7, #16]
   return(result);
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1e5      	bne.n	800bac6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d017      	beq.n	800bb34 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7f9 fbd4 	bl	80052b8 <HAL_DMA_Abort>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00e      	beq.n	800bb34 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7fb f859 	bl	8006bd4 <HAL_DMA_GetError>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b20      	cmp	r3, #32
 800bb26:	d105      	bne.n	800bb34 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2210      	movs	r2, #16
 800bb2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e003      	b.n	800bb3c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f001 fc07 	bl	800d348 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3740      	adds	r7, #64	@ 0x40
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b0ba      	sub	sp, #232	@ 0xe8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bb6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bb6e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bb72:	4013      	ands	r3, r2
 800bb74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bb78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d11b      	bne.n	800bbb8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb84:	f003 0320 	and.w	r3, r3, #32
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d015      	beq.n	800bbb8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb90:	f003 0320 	and.w	r3, r3, #32
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d105      	bne.n	800bba4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d009      	beq.n	800bbb8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 8377 	beq.w	800c29c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	4798      	blx	r3
      }
      return;
 800bbb6:	e371      	b.n	800c29c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bbb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8123 	beq.w	800be08 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bbc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bbc6:	4b8d      	ldr	r3, [pc, #564]	@ (800bdfc <HAL_UART_IRQHandler+0x2b8>)
 800bbc8:	4013      	ands	r3, r2
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d106      	bne.n	800bbdc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bbce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bbd2:	4b8b      	ldr	r3, [pc, #556]	@ (800be00 <HAL_UART_IRQHandler+0x2bc>)
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f000 8116 	beq.w	800be08 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bbdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbe0:	f003 0301 	and.w	r3, r3, #1
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d011      	beq.n	800bc0c <HAL_UART_IRQHandler+0xc8>
 800bbe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00b      	beq.n	800bc0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc02:	f043 0201 	orr.w	r2, r3, #1
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc10:	f003 0302 	and.w	r3, r3, #2
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d011      	beq.n	800bc3c <HAL_UART_IRQHandler+0xf8>
 800bc18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc1c:	f003 0301 	and.w	r3, r3, #1
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00b      	beq.n	800bc3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2202      	movs	r2, #2
 800bc2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc32:	f043 0204 	orr.w	r2, r3, #4
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc40:	f003 0304 	and.w	r3, r3, #4
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d011      	beq.n	800bc6c <HAL_UART_IRQHandler+0x128>
 800bc48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc4c:	f003 0301 	and.w	r3, r3, #1
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00b      	beq.n	800bc6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2204      	movs	r2, #4
 800bc5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc62:	f043 0202 	orr.w	r2, r3, #2
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc70:	f003 0308 	and.w	r3, r3, #8
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d017      	beq.n	800bca8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc7c:	f003 0320 	and.w	r3, r3, #32
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d105      	bne.n	800bc90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bc84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bc88:	4b5c      	ldr	r3, [pc, #368]	@ (800bdfc <HAL_UART_IRQHandler+0x2b8>)
 800bc8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00b      	beq.n	800bca8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2208      	movs	r2, #8
 800bc96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc9e:	f043 0208 	orr.w	r2, r3, #8
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d012      	beq.n	800bcda <HAL_UART_IRQHandler+0x196>
 800bcb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00c      	beq.n	800bcda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bcc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcd0:	f043 0220 	orr.w	r2, r3, #32
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 82dd 	beq.w	800c2a0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcea:	f003 0320 	and.w	r3, r3, #32
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d013      	beq.n	800bd1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bcf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcf6:	f003 0320 	and.w	r3, r3, #32
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d105      	bne.n	800bd0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bcfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d007      	beq.n	800bd1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d003      	beq.n	800bd1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd2e:	2b40      	cmp	r3, #64	@ 0x40
 800bd30:	d005      	beq.n	800bd3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d054      	beq.n	800bde8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f001 fb02 	bl	800d348 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd4e:	2b40      	cmp	r3, #64	@ 0x40
 800bd50:	d146      	bne.n	800bde0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3308      	adds	r3, #8
 800bd58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bd60:	e853 3f00 	ldrex	r3, [r3]
 800bd64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bd68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bd6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3308      	adds	r3, #8
 800bd7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bd7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bd82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bd8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bd8e:	e841 2300 	strex	r3, r2, [r1]
 800bd92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bd96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1d9      	bne.n	800bd52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d017      	beq.n	800bdd8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdae:	4a15      	ldr	r2, [pc, #84]	@ (800be04 <HAL_UART_IRQHandler+0x2c0>)
 800bdb0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7f9 fd9b 	bl	80058f4 <HAL_DMA_Abort_IT>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d019      	beq.n	800bdf8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bdd2:	4610      	mov	r0, r2
 800bdd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdd6:	e00f      	b.n	800bdf8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fa95 	bl	800c308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdde:	e00b      	b.n	800bdf8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 fa91 	bl	800c308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bde6:	e007      	b.n	800bdf8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fa8d 	bl	800c308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bdf6:	e253      	b.n	800c2a0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdf8:	bf00      	nop
    return;
 800bdfa:	e251      	b.n	800c2a0 <HAL_UART_IRQHandler+0x75c>
 800bdfc:	10000001 	.word	0x10000001
 800be00:	04000120 	.word	0x04000120
 800be04:	0800d6ad 	.word	0x0800d6ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	f040 81e7 	bne.w	800c1e0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be16:	f003 0310 	and.w	r3, r3, #16
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f000 81e0 	beq.w	800c1e0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be24:	f003 0310 	and.w	r3, r3, #16
 800be28:	2b00      	cmp	r3, #0
 800be2a:	f000 81d9 	beq.w	800c1e0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2210      	movs	r2, #16
 800be34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be40:	2b40      	cmp	r3, #64	@ 0x40
 800be42:	f040 8151 	bne.w	800c0e8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a96      	ldr	r2, [pc, #600]	@ (800c0a8 <HAL_UART_IRQHandler+0x564>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d068      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a93      	ldr	r2, [pc, #588]	@ (800c0ac <HAL_UART_IRQHandler+0x568>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d061      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a91      	ldr	r2, [pc, #580]	@ (800c0b0 <HAL_UART_IRQHandler+0x56c>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d05a      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a8e      	ldr	r2, [pc, #568]	@ (800c0b4 <HAL_UART_IRQHandler+0x570>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d053      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a8c      	ldr	r2, [pc, #560]	@ (800c0b8 <HAL_UART_IRQHandler+0x574>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d04c      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a89      	ldr	r2, [pc, #548]	@ (800c0bc <HAL_UART_IRQHandler+0x578>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d045      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a87      	ldr	r2, [pc, #540]	@ (800c0c0 <HAL_UART_IRQHandler+0x57c>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d03e      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a84      	ldr	r2, [pc, #528]	@ (800c0c4 <HAL_UART_IRQHandler+0x580>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d037      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a82      	ldr	r2, [pc, #520]	@ (800c0c8 <HAL_UART_IRQHandler+0x584>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d030      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a7f      	ldr	r2, [pc, #508]	@ (800c0cc <HAL_UART_IRQHandler+0x588>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d029      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a7d      	ldr	r2, [pc, #500]	@ (800c0d0 <HAL_UART_IRQHandler+0x58c>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d022      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a7a      	ldr	r2, [pc, #488]	@ (800c0d4 <HAL_UART_IRQHandler+0x590>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d01b      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a78      	ldr	r2, [pc, #480]	@ (800c0d8 <HAL_UART_IRQHandler+0x594>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d014      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a75      	ldr	r2, [pc, #468]	@ (800c0dc <HAL_UART_IRQHandler+0x598>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d00d      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a73      	ldr	r2, [pc, #460]	@ (800c0e0 <HAL_UART_IRQHandler+0x59c>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d006      	beq.n	800bf26 <HAL_UART_IRQHandler+0x3e2>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a70      	ldr	r2, [pc, #448]	@ (800c0e4 <HAL_UART_IRQHandler+0x5a0>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d106      	bne.n	800bf34 <HAL_UART_IRQHandler+0x3f0>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	e005      	b.n	800bf40 <HAL_UART_IRQHandler+0x3fc>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 81ab 	beq.w	800c2a4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bf54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	f080 81a3 	bcs.w	800c2a4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bf64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf6e:	69db      	ldr	r3, [r3, #28]
 800bf70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf74:	f000 8087 	beq.w	800c086 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf84:	e853 3f00 	ldrex	r3, [r3]
 800bf88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bf8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bf90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bfa6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bfae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bfb2:	e841 2300 	strex	r3, r2, [r1]
 800bfb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bfba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1da      	bne.n	800bf78 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	3308      	adds	r3, #8
 800bfc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfcc:	e853 3f00 	ldrex	r3, [r3]
 800bfd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bfd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfd4:	f023 0301 	bic.w	r3, r3, #1
 800bfd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	3308      	adds	r3, #8
 800bfe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bfe6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bfea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bfee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bff2:	e841 2300 	strex	r3, r2, [r1]
 800bff6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bff8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1e1      	bne.n	800bfc2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3308      	adds	r3, #8
 800c004:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c008:	e853 3f00 	ldrex	r3, [r3]
 800c00c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c00e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c014:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3308      	adds	r3, #8
 800c01e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c022:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c024:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c026:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c028:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c02a:	e841 2300 	strex	r3, r2, [r1]
 800c02e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1e3      	bne.n	800bffe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2220      	movs	r2, #32
 800c03a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c04c:	e853 3f00 	ldrex	r3, [r3]
 800c050:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c054:	f023 0310 	bic.w	r3, r3, #16
 800c058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	461a      	mov	r2, r3
 800c062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c066:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c068:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c06c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c06e:	e841 2300 	strex	r3, r2, [r1]
 800c072:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1e4      	bne.n	800c044 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c080:	4618      	mov	r0, r3
 800c082:	f7f9 f919 	bl	80052b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2202      	movs	r2, #2
 800c08a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c098:	b29b      	uxth	r3, r3
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 f93b 	bl	800c31c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c0a6:	e0fd      	b.n	800c2a4 <HAL_UART_IRQHandler+0x760>
 800c0a8:	40020010 	.word	0x40020010
 800c0ac:	40020028 	.word	0x40020028
 800c0b0:	40020040 	.word	0x40020040
 800c0b4:	40020058 	.word	0x40020058
 800c0b8:	40020070 	.word	0x40020070
 800c0bc:	40020088 	.word	0x40020088
 800c0c0:	400200a0 	.word	0x400200a0
 800c0c4:	400200b8 	.word	0x400200b8
 800c0c8:	40020410 	.word	0x40020410
 800c0cc:	40020428 	.word	0x40020428
 800c0d0:	40020440 	.word	0x40020440
 800c0d4:	40020458 	.word	0x40020458
 800c0d8:	40020470 	.word	0x40020470
 800c0dc:	40020488 	.word	0x40020488
 800c0e0:	400204a0 	.word	0x400204a0
 800c0e4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	1ad3      	subs	r3, r2, r3
 800c0f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c102:	b29b      	uxth	r3, r3
 800c104:	2b00      	cmp	r3, #0
 800c106:	f000 80cf 	beq.w	800c2a8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c10a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f000 80ca 	beq.w	800c2a8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11c:	e853 3f00 	ldrex	r3, [r3]
 800c120:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c128:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	461a      	mov	r2, r3
 800c132:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c136:	647b      	str	r3, [r7, #68]	@ 0x44
 800c138:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c13c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c13e:	e841 2300 	strex	r3, r2, [r1]
 800c142:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1e4      	bne.n	800c114 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	3308      	adds	r3, #8
 800c150:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c154:	e853 3f00 	ldrex	r3, [r3]
 800c158:	623b      	str	r3, [r7, #32]
   return(result);
 800c15a:	6a3a      	ldr	r2, [r7, #32]
 800c15c:	4b55      	ldr	r3, [pc, #340]	@ (800c2b4 <HAL_UART_IRQHandler+0x770>)
 800c15e:	4013      	ands	r3, r2
 800c160:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	3308      	adds	r3, #8
 800c16a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c16e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c170:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c176:	e841 2300 	strex	r3, r2, [r1]
 800c17a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1e3      	bne.n	800c14a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2220      	movs	r2, #32
 800c186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	e853 3f00 	ldrex	r3, [r3]
 800c1a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f023 0310 	bic.w	r3, r3, #16
 800c1aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c1b8:	61fb      	str	r3, [r7, #28]
 800c1ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1bc:	69b9      	ldr	r1, [r7, #24]
 800c1be:	69fa      	ldr	r2, [r7, #28]
 800c1c0:	e841 2300 	strex	r3, r2, [r1]
 800c1c4:	617b      	str	r3, [r7, #20]
   return(result);
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1e4      	bne.n	800c196 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c1d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f89f 	bl	800c31c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c1de:	e063      	b.n	800c2a8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00e      	beq.n	800c20a <HAL_UART_IRQHandler+0x6c6>
 800c1ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d008      	beq.n	800c20a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c200:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f001 fa93 	bl	800d72e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c208:	e051      	b.n	800c2ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c20e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c212:	2b00      	cmp	r3, #0
 800c214:	d014      	beq.n	800c240 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c21a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d105      	bne.n	800c22e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c226:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d008      	beq.n	800c240 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c232:	2b00      	cmp	r3, #0
 800c234:	d03a      	beq.n	800c2ac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	4798      	blx	r3
    }
    return;
 800c23e:	e035      	b.n	800c2ac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d009      	beq.n	800c260 <HAL_UART_IRQHandler+0x71c>
 800c24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c254:	2b00      	cmp	r3, #0
 800c256:	d003      	beq.n	800c260 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f001 fa3d 	bl	800d6d8 <UART_EndTransmit_IT>
    return;
 800c25e:	e026      	b.n	800c2ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c264:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d009      	beq.n	800c280 <HAL_UART_IRQHandler+0x73c>
 800c26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c270:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c274:	2b00      	cmp	r3, #0
 800c276:	d003      	beq.n	800c280 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f001 fa6c 	bl	800d756 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c27e:	e016      	b.n	800c2ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c284:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d010      	beq.n	800c2ae <HAL_UART_IRQHandler+0x76a>
 800c28c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c290:	2b00      	cmp	r3, #0
 800c292:	da0c      	bge.n	800c2ae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f001 fa54 	bl	800d742 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c29a:	e008      	b.n	800c2ae <HAL_UART_IRQHandler+0x76a>
      return;
 800c29c:	bf00      	nop
 800c29e:	e006      	b.n	800c2ae <HAL_UART_IRQHandler+0x76a>
    return;
 800c2a0:	bf00      	nop
 800c2a2:	e004      	b.n	800c2ae <HAL_UART_IRQHandler+0x76a>
      return;
 800c2a4:	bf00      	nop
 800c2a6:	e002      	b.n	800c2ae <HAL_UART_IRQHandler+0x76a>
      return;
 800c2a8:	bf00      	nop
 800c2aa:	e000      	b.n	800c2ae <HAL_UART_IRQHandler+0x76a>
    return;
 800c2ac:	bf00      	nop
  }
}
 800c2ae:	37e8      	adds	r7, #232	@ 0xe8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	effffffe 	.word	0xeffffffe

0800c2b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c2d4:	bf00      	nop
 800c2d6:	370c      	adds	r7, #12
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	460b      	mov	r3, r1
 800c326:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c328:	bf00      	nop
 800c32a:	370c      	adds	r7, #12
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c338:	b092      	sub	sp, #72	@ 0x48
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c33e:	2300      	movs	r3, #0
 800c340:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	689a      	ldr	r2, [r3, #8]
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	691b      	ldr	r3, [r3, #16]
 800c34c:	431a      	orrs	r2, r3
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	695b      	ldr	r3, [r3, #20]
 800c352:	431a      	orrs	r2, r3
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	69db      	ldr	r3, [r3, #28]
 800c358:	4313      	orrs	r3, r2
 800c35a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	4bbe      	ldr	r3, [pc, #760]	@ (800c65c <UART_SetConfig+0x328>)
 800c364:	4013      	ands	r3, r2
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	6812      	ldr	r2, [r2, #0]
 800c36a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c36c:	430b      	orrs	r3, r1
 800c36e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	68da      	ldr	r2, [r3, #12]
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	430a      	orrs	r2, r1
 800c384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	699b      	ldr	r3, [r3, #24]
 800c38a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4ab3      	ldr	r2, [pc, #716]	@ (800c660 <UART_SetConfig+0x32c>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d004      	beq.n	800c3a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	6a1b      	ldr	r3, [r3, #32]
 800c39a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c39c:	4313      	orrs	r3, r2
 800c39e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	689a      	ldr	r2, [r3, #8]
 800c3a6:	4baf      	ldr	r3, [pc, #700]	@ (800c664 <UART_SetConfig+0x330>)
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	697a      	ldr	r2, [r7, #20]
 800c3ac:	6812      	ldr	r2, [r2, #0]
 800c3ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c3b0:	430b      	orrs	r3, r1
 800c3b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ba:	f023 010f 	bic.w	r1, r3, #15
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	430a      	orrs	r2, r1
 800c3c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4aa6      	ldr	r2, [pc, #664]	@ (800c668 <UART_SetConfig+0x334>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d177      	bne.n	800c4c4 <UART_SetConfig+0x190>
 800c3d4:	4ba5      	ldr	r3, [pc, #660]	@ (800c66c <UART_SetConfig+0x338>)
 800c3d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c3dc:	2b28      	cmp	r3, #40	@ 0x28
 800c3de:	d86d      	bhi.n	800c4bc <UART_SetConfig+0x188>
 800c3e0:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e8 <UART_SetConfig+0xb4>)
 800c3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e6:	bf00      	nop
 800c3e8:	0800c48d 	.word	0x0800c48d
 800c3ec:	0800c4bd 	.word	0x0800c4bd
 800c3f0:	0800c4bd 	.word	0x0800c4bd
 800c3f4:	0800c4bd 	.word	0x0800c4bd
 800c3f8:	0800c4bd 	.word	0x0800c4bd
 800c3fc:	0800c4bd 	.word	0x0800c4bd
 800c400:	0800c4bd 	.word	0x0800c4bd
 800c404:	0800c4bd 	.word	0x0800c4bd
 800c408:	0800c495 	.word	0x0800c495
 800c40c:	0800c4bd 	.word	0x0800c4bd
 800c410:	0800c4bd 	.word	0x0800c4bd
 800c414:	0800c4bd 	.word	0x0800c4bd
 800c418:	0800c4bd 	.word	0x0800c4bd
 800c41c:	0800c4bd 	.word	0x0800c4bd
 800c420:	0800c4bd 	.word	0x0800c4bd
 800c424:	0800c4bd 	.word	0x0800c4bd
 800c428:	0800c49d 	.word	0x0800c49d
 800c42c:	0800c4bd 	.word	0x0800c4bd
 800c430:	0800c4bd 	.word	0x0800c4bd
 800c434:	0800c4bd 	.word	0x0800c4bd
 800c438:	0800c4bd 	.word	0x0800c4bd
 800c43c:	0800c4bd 	.word	0x0800c4bd
 800c440:	0800c4bd 	.word	0x0800c4bd
 800c444:	0800c4bd 	.word	0x0800c4bd
 800c448:	0800c4a5 	.word	0x0800c4a5
 800c44c:	0800c4bd 	.word	0x0800c4bd
 800c450:	0800c4bd 	.word	0x0800c4bd
 800c454:	0800c4bd 	.word	0x0800c4bd
 800c458:	0800c4bd 	.word	0x0800c4bd
 800c45c:	0800c4bd 	.word	0x0800c4bd
 800c460:	0800c4bd 	.word	0x0800c4bd
 800c464:	0800c4bd 	.word	0x0800c4bd
 800c468:	0800c4ad 	.word	0x0800c4ad
 800c46c:	0800c4bd 	.word	0x0800c4bd
 800c470:	0800c4bd 	.word	0x0800c4bd
 800c474:	0800c4bd 	.word	0x0800c4bd
 800c478:	0800c4bd 	.word	0x0800c4bd
 800c47c:	0800c4bd 	.word	0x0800c4bd
 800c480:	0800c4bd 	.word	0x0800c4bd
 800c484:	0800c4bd 	.word	0x0800c4bd
 800c488:	0800c4b5 	.word	0x0800c4b5
 800c48c:	2301      	movs	r3, #1
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c492:	e222      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c494:	2304      	movs	r3, #4
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c49a:	e21e      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c49c:	2308      	movs	r3, #8
 800c49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a2:	e21a      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c4a4:	2310      	movs	r3, #16
 800c4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4aa:	e216      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c4ac:	2320      	movs	r3, #32
 800c4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b2:	e212      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c4b4:	2340      	movs	r3, #64	@ 0x40
 800c4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ba:	e20e      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c4bc:	2380      	movs	r3, #128	@ 0x80
 800c4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4c2:	e20a      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a69      	ldr	r2, [pc, #420]	@ (800c670 <UART_SetConfig+0x33c>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d130      	bne.n	800c530 <UART_SetConfig+0x1fc>
 800c4ce:	4b67      	ldr	r3, [pc, #412]	@ (800c66c <UART_SetConfig+0x338>)
 800c4d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4d2:	f003 0307 	and.w	r3, r3, #7
 800c4d6:	2b05      	cmp	r3, #5
 800c4d8:	d826      	bhi.n	800c528 <UART_SetConfig+0x1f4>
 800c4da:	a201      	add	r2, pc, #4	@ (adr r2, 800c4e0 <UART_SetConfig+0x1ac>)
 800c4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e0:	0800c4f9 	.word	0x0800c4f9
 800c4e4:	0800c501 	.word	0x0800c501
 800c4e8:	0800c509 	.word	0x0800c509
 800c4ec:	0800c511 	.word	0x0800c511
 800c4f0:	0800c519 	.word	0x0800c519
 800c4f4:	0800c521 	.word	0x0800c521
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4fe:	e1ec      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c500:	2304      	movs	r3, #4
 800c502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c506:	e1e8      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c508:	2308      	movs	r3, #8
 800c50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c50e:	e1e4      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c510:	2310      	movs	r3, #16
 800c512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c516:	e1e0      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c518:	2320      	movs	r3, #32
 800c51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c51e:	e1dc      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c520:	2340      	movs	r3, #64	@ 0x40
 800c522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c526:	e1d8      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c528:	2380      	movs	r3, #128	@ 0x80
 800c52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52e:	e1d4      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a4f      	ldr	r2, [pc, #316]	@ (800c674 <UART_SetConfig+0x340>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d130      	bne.n	800c59c <UART_SetConfig+0x268>
 800c53a:	4b4c      	ldr	r3, [pc, #304]	@ (800c66c <UART_SetConfig+0x338>)
 800c53c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c53e:	f003 0307 	and.w	r3, r3, #7
 800c542:	2b05      	cmp	r3, #5
 800c544:	d826      	bhi.n	800c594 <UART_SetConfig+0x260>
 800c546:	a201      	add	r2, pc, #4	@ (adr r2, 800c54c <UART_SetConfig+0x218>)
 800c548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c54c:	0800c565 	.word	0x0800c565
 800c550:	0800c56d 	.word	0x0800c56d
 800c554:	0800c575 	.word	0x0800c575
 800c558:	0800c57d 	.word	0x0800c57d
 800c55c:	0800c585 	.word	0x0800c585
 800c560:	0800c58d 	.word	0x0800c58d
 800c564:	2300      	movs	r3, #0
 800c566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c56a:	e1b6      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c56c:	2304      	movs	r3, #4
 800c56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c572:	e1b2      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c574:	2308      	movs	r3, #8
 800c576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c57a:	e1ae      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c57c:	2310      	movs	r3, #16
 800c57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c582:	e1aa      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c584:	2320      	movs	r3, #32
 800c586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58a:	e1a6      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c58c:	2340      	movs	r3, #64	@ 0x40
 800c58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c592:	e1a2      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c594:	2380      	movs	r3, #128	@ 0x80
 800c596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59a:	e19e      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a35      	ldr	r2, [pc, #212]	@ (800c678 <UART_SetConfig+0x344>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d130      	bne.n	800c608 <UART_SetConfig+0x2d4>
 800c5a6:	4b31      	ldr	r3, [pc, #196]	@ (800c66c <UART_SetConfig+0x338>)
 800c5a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5aa:	f003 0307 	and.w	r3, r3, #7
 800c5ae:	2b05      	cmp	r3, #5
 800c5b0:	d826      	bhi.n	800c600 <UART_SetConfig+0x2cc>
 800c5b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5b8 <UART_SetConfig+0x284>)
 800c5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b8:	0800c5d1 	.word	0x0800c5d1
 800c5bc:	0800c5d9 	.word	0x0800c5d9
 800c5c0:	0800c5e1 	.word	0x0800c5e1
 800c5c4:	0800c5e9 	.word	0x0800c5e9
 800c5c8:	0800c5f1 	.word	0x0800c5f1
 800c5cc:	0800c5f9 	.word	0x0800c5f9
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5d6:	e180      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c5d8:	2304      	movs	r3, #4
 800c5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5de:	e17c      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c5e0:	2308      	movs	r3, #8
 800c5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5e6:	e178      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c5e8:	2310      	movs	r3, #16
 800c5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ee:	e174      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c5f0:	2320      	movs	r3, #32
 800c5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5f6:	e170      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c5f8:	2340      	movs	r3, #64	@ 0x40
 800c5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5fe:	e16c      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c600:	2380      	movs	r3, #128	@ 0x80
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c606:	e168      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a1b      	ldr	r2, [pc, #108]	@ (800c67c <UART_SetConfig+0x348>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d142      	bne.n	800c698 <UART_SetConfig+0x364>
 800c612:	4b16      	ldr	r3, [pc, #88]	@ (800c66c <UART_SetConfig+0x338>)
 800c614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c616:	f003 0307 	and.w	r3, r3, #7
 800c61a:	2b05      	cmp	r3, #5
 800c61c:	d838      	bhi.n	800c690 <UART_SetConfig+0x35c>
 800c61e:	a201      	add	r2, pc, #4	@ (adr r2, 800c624 <UART_SetConfig+0x2f0>)
 800c620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c624:	0800c63d 	.word	0x0800c63d
 800c628:	0800c645 	.word	0x0800c645
 800c62c:	0800c64d 	.word	0x0800c64d
 800c630:	0800c655 	.word	0x0800c655
 800c634:	0800c681 	.word	0x0800c681
 800c638:	0800c689 	.word	0x0800c689
 800c63c:	2300      	movs	r3, #0
 800c63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c642:	e14a      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c644:	2304      	movs	r3, #4
 800c646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c64a:	e146      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c64c:	2308      	movs	r3, #8
 800c64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c652:	e142      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c654:	2310      	movs	r3, #16
 800c656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c65a:	e13e      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c65c:	cfff69f3 	.word	0xcfff69f3
 800c660:	58000c00 	.word	0x58000c00
 800c664:	11fff4ff 	.word	0x11fff4ff
 800c668:	40011000 	.word	0x40011000
 800c66c:	58024400 	.word	0x58024400
 800c670:	40004400 	.word	0x40004400
 800c674:	40004800 	.word	0x40004800
 800c678:	40004c00 	.word	0x40004c00
 800c67c:	40005000 	.word	0x40005000
 800c680:	2320      	movs	r3, #32
 800c682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c686:	e128      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c688:	2340      	movs	r3, #64	@ 0x40
 800c68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c68e:	e124      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c690:	2380      	movs	r3, #128	@ 0x80
 800c692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c696:	e120      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4acb      	ldr	r2, [pc, #812]	@ (800c9cc <UART_SetConfig+0x698>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d176      	bne.n	800c790 <UART_SetConfig+0x45c>
 800c6a2:	4bcb      	ldr	r3, [pc, #812]	@ (800c9d0 <UART_SetConfig+0x69c>)
 800c6a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c6aa:	2b28      	cmp	r3, #40	@ 0x28
 800c6ac:	d86c      	bhi.n	800c788 <UART_SetConfig+0x454>
 800c6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c6b4 <UART_SetConfig+0x380>)
 800c6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b4:	0800c759 	.word	0x0800c759
 800c6b8:	0800c789 	.word	0x0800c789
 800c6bc:	0800c789 	.word	0x0800c789
 800c6c0:	0800c789 	.word	0x0800c789
 800c6c4:	0800c789 	.word	0x0800c789
 800c6c8:	0800c789 	.word	0x0800c789
 800c6cc:	0800c789 	.word	0x0800c789
 800c6d0:	0800c789 	.word	0x0800c789
 800c6d4:	0800c761 	.word	0x0800c761
 800c6d8:	0800c789 	.word	0x0800c789
 800c6dc:	0800c789 	.word	0x0800c789
 800c6e0:	0800c789 	.word	0x0800c789
 800c6e4:	0800c789 	.word	0x0800c789
 800c6e8:	0800c789 	.word	0x0800c789
 800c6ec:	0800c789 	.word	0x0800c789
 800c6f0:	0800c789 	.word	0x0800c789
 800c6f4:	0800c769 	.word	0x0800c769
 800c6f8:	0800c789 	.word	0x0800c789
 800c6fc:	0800c789 	.word	0x0800c789
 800c700:	0800c789 	.word	0x0800c789
 800c704:	0800c789 	.word	0x0800c789
 800c708:	0800c789 	.word	0x0800c789
 800c70c:	0800c789 	.word	0x0800c789
 800c710:	0800c789 	.word	0x0800c789
 800c714:	0800c771 	.word	0x0800c771
 800c718:	0800c789 	.word	0x0800c789
 800c71c:	0800c789 	.word	0x0800c789
 800c720:	0800c789 	.word	0x0800c789
 800c724:	0800c789 	.word	0x0800c789
 800c728:	0800c789 	.word	0x0800c789
 800c72c:	0800c789 	.word	0x0800c789
 800c730:	0800c789 	.word	0x0800c789
 800c734:	0800c779 	.word	0x0800c779
 800c738:	0800c789 	.word	0x0800c789
 800c73c:	0800c789 	.word	0x0800c789
 800c740:	0800c789 	.word	0x0800c789
 800c744:	0800c789 	.word	0x0800c789
 800c748:	0800c789 	.word	0x0800c789
 800c74c:	0800c789 	.word	0x0800c789
 800c750:	0800c789 	.word	0x0800c789
 800c754:	0800c781 	.word	0x0800c781
 800c758:	2301      	movs	r3, #1
 800c75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c75e:	e0bc      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c760:	2304      	movs	r3, #4
 800c762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c766:	e0b8      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c768:	2308      	movs	r3, #8
 800c76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c76e:	e0b4      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c770:	2310      	movs	r3, #16
 800c772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c776:	e0b0      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c778:	2320      	movs	r3, #32
 800c77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c77e:	e0ac      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c780:	2340      	movs	r3, #64	@ 0x40
 800c782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c786:	e0a8      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c788:	2380      	movs	r3, #128	@ 0x80
 800c78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c78e:	e0a4      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a8f      	ldr	r2, [pc, #572]	@ (800c9d4 <UART_SetConfig+0x6a0>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d130      	bne.n	800c7fc <UART_SetConfig+0x4c8>
 800c79a:	4b8d      	ldr	r3, [pc, #564]	@ (800c9d0 <UART_SetConfig+0x69c>)
 800c79c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c79e:	f003 0307 	and.w	r3, r3, #7
 800c7a2:	2b05      	cmp	r3, #5
 800c7a4:	d826      	bhi.n	800c7f4 <UART_SetConfig+0x4c0>
 800c7a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c7ac <UART_SetConfig+0x478>)
 800c7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ac:	0800c7c5 	.word	0x0800c7c5
 800c7b0:	0800c7cd 	.word	0x0800c7cd
 800c7b4:	0800c7d5 	.word	0x0800c7d5
 800c7b8:	0800c7dd 	.word	0x0800c7dd
 800c7bc:	0800c7e5 	.word	0x0800c7e5
 800c7c0:	0800c7ed 	.word	0x0800c7ed
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ca:	e086      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c7cc:	2304      	movs	r3, #4
 800c7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7d2:	e082      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c7d4:	2308      	movs	r3, #8
 800c7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7da:	e07e      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c7dc:	2310      	movs	r3, #16
 800c7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7e2:	e07a      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c7e4:	2320      	movs	r3, #32
 800c7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ea:	e076      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c7ec:	2340      	movs	r3, #64	@ 0x40
 800c7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7f2:	e072      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c7f4:	2380      	movs	r3, #128	@ 0x80
 800c7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7fa:	e06e      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a75      	ldr	r2, [pc, #468]	@ (800c9d8 <UART_SetConfig+0x6a4>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d130      	bne.n	800c868 <UART_SetConfig+0x534>
 800c806:	4b72      	ldr	r3, [pc, #456]	@ (800c9d0 <UART_SetConfig+0x69c>)
 800c808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c80a:	f003 0307 	and.w	r3, r3, #7
 800c80e:	2b05      	cmp	r3, #5
 800c810:	d826      	bhi.n	800c860 <UART_SetConfig+0x52c>
 800c812:	a201      	add	r2, pc, #4	@ (adr r2, 800c818 <UART_SetConfig+0x4e4>)
 800c814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c818:	0800c831 	.word	0x0800c831
 800c81c:	0800c839 	.word	0x0800c839
 800c820:	0800c841 	.word	0x0800c841
 800c824:	0800c849 	.word	0x0800c849
 800c828:	0800c851 	.word	0x0800c851
 800c82c:	0800c859 	.word	0x0800c859
 800c830:	2300      	movs	r3, #0
 800c832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c836:	e050      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c838:	2304      	movs	r3, #4
 800c83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c83e:	e04c      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c840:	2308      	movs	r3, #8
 800c842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c846:	e048      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c848:	2310      	movs	r3, #16
 800c84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c84e:	e044      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c850:	2320      	movs	r3, #32
 800c852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c856:	e040      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c858:	2340      	movs	r3, #64	@ 0x40
 800c85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c85e:	e03c      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c860:	2380      	movs	r3, #128	@ 0x80
 800c862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c866:	e038      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a5b      	ldr	r2, [pc, #364]	@ (800c9dc <UART_SetConfig+0x6a8>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d130      	bne.n	800c8d4 <UART_SetConfig+0x5a0>
 800c872:	4b57      	ldr	r3, [pc, #348]	@ (800c9d0 <UART_SetConfig+0x69c>)
 800c874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c876:	f003 0307 	and.w	r3, r3, #7
 800c87a:	2b05      	cmp	r3, #5
 800c87c:	d826      	bhi.n	800c8cc <UART_SetConfig+0x598>
 800c87e:	a201      	add	r2, pc, #4	@ (adr r2, 800c884 <UART_SetConfig+0x550>)
 800c880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c884:	0800c89d 	.word	0x0800c89d
 800c888:	0800c8a5 	.word	0x0800c8a5
 800c88c:	0800c8ad 	.word	0x0800c8ad
 800c890:	0800c8b5 	.word	0x0800c8b5
 800c894:	0800c8bd 	.word	0x0800c8bd
 800c898:	0800c8c5 	.word	0x0800c8c5
 800c89c:	2302      	movs	r3, #2
 800c89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8a2:	e01a      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c8a4:	2304      	movs	r3, #4
 800c8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8aa:	e016      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c8ac:	2308      	movs	r3, #8
 800c8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8b2:	e012      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c8b4:	2310      	movs	r3, #16
 800c8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ba:	e00e      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c8bc:	2320      	movs	r3, #32
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8c2:	e00a      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c8c4:	2340      	movs	r3, #64	@ 0x40
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ca:	e006      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c8cc:	2380      	movs	r3, #128	@ 0x80
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8d2:	e002      	b.n	800c8da <UART_SetConfig+0x5a6>
 800c8d4:	2380      	movs	r3, #128	@ 0x80
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a3f      	ldr	r2, [pc, #252]	@ (800c9dc <UART_SetConfig+0x6a8>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	f040 80f8 	bne.w	800cad6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c8ea:	2b20      	cmp	r3, #32
 800c8ec:	dc46      	bgt.n	800c97c <UART_SetConfig+0x648>
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	f2c0 8082 	blt.w	800c9f8 <UART_SetConfig+0x6c4>
 800c8f4:	3b02      	subs	r3, #2
 800c8f6:	2b1e      	cmp	r3, #30
 800c8f8:	d87e      	bhi.n	800c9f8 <UART_SetConfig+0x6c4>
 800c8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c900 <UART_SetConfig+0x5cc>)
 800c8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c900:	0800c983 	.word	0x0800c983
 800c904:	0800c9f9 	.word	0x0800c9f9
 800c908:	0800c98b 	.word	0x0800c98b
 800c90c:	0800c9f9 	.word	0x0800c9f9
 800c910:	0800c9f9 	.word	0x0800c9f9
 800c914:	0800c9f9 	.word	0x0800c9f9
 800c918:	0800c99b 	.word	0x0800c99b
 800c91c:	0800c9f9 	.word	0x0800c9f9
 800c920:	0800c9f9 	.word	0x0800c9f9
 800c924:	0800c9f9 	.word	0x0800c9f9
 800c928:	0800c9f9 	.word	0x0800c9f9
 800c92c:	0800c9f9 	.word	0x0800c9f9
 800c930:	0800c9f9 	.word	0x0800c9f9
 800c934:	0800c9f9 	.word	0x0800c9f9
 800c938:	0800c9ab 	.word	0x0800c9ab
 800c93c:	0800c9f9 	.word	0x0800c9f9
 800c940:	0800c9f9 	.word	0x0800c9f9
 800c944:	0800c9f9 	.word	0x0800c9f9
 800c948:	0800c9f9 	.word	0x0800c9f9
 800c94c:	0800c9f9 	.word	0x0800c9f9
 800c950:	0800c9f9 	.word	0x0800c9f9
 800c954:	0800c9f9 	.word	0x0800c9f9
 800c958:	0800c9f9 	.word	0x0800c9f9
 800c95c:	0800c9f9 	.word	0x0800c9f9
 800c960:	0800c9f9 	.word	0x0800c9f9
 800c964:	0800c9f9 	.word	0x0800c9f9
 800c968:	0800c9f9 	.word	0x0800c9f9
 800c96c:	0800c9f9 	.word	0x0800c9f9
 800c970:	0800c9f9 	.word	0x0800c9f9
 800c974:	0800c9f9 	.word	0x0800c9f9
 800c978:	0800c9eb 	.word	0x0800c9eb
 800c97c:	2b40      	cmp	r3, #64	@ 0x40
 800c97e:	d037      	beq.n	800c9f0 <UART_SetConfig+0x6bc>
 800c980:	e03a      	b.n	800c9f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c982:	f7fd feeb 	bl	800a75c <HAL_RCCEx_GetD3PCLK1Freq>
 800c986:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c988:	e03c      	b.n	800ca04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c98a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fd fefa 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c998:	e034      	b.n	800ca04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c99a:	f107 0318 	add.w	r3, r7, #24
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fe f846 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9a8:	e02c      	b.n	800ca04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9aa:	4b09      	ldr	r3, [pc, #36]	@ (800c9d0 <UART_SetConfig+0x69c>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f003 0320 	and.w	r3, r3, #32
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d016      	beq.n	800c9e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9b6:	4b06      	ldr	r3, [pc, #24]	@ (800c9d0 <UART_SetConfig+0x69c>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	08db      	lsrs	r3, r3, #3
 800c9bc:	f003 0303 	and.w	r3, r3, #3
 800c9c0:	4a07      	ldr	r2, [pc, #28]	@ (800c9e0 <UART_SetConfig+0x6ac>)
 800c9c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9c8:	e01c      	b.n	800ca04 <UART_SetConfig+0x6d0>
 800c9ca:	bf00      	nop
 800c9cc:	40011400 	.word	0x40011400
 800c9d0:	58024400 	.word	0x58024400
 800c9d4:	40007800 	.word	0x40007800
 800c9d8:	40007c00 	.word	0x40007c00
 800c9dc:	58000c00 	.word	0x58000c00
 800c9e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c9e4:	4b9d      	ldr	r3, [pc, #628]	@ (800cc5c <UART_SetConfig+0x928>)
 800c9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9e8:	e00c      	b.n	800ca04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9ea:	4b9d      	ldr	r3, [pc, #628]	@ (800cc60 <UART_SetConfig+0x92c>)
 800c9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9ee:	e009      	b.n	800ca04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9f6:	e005      	b.n	800ca04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ca02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 81de 	beq.w	800cdc8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca10:	4a94      	ldr	r2, [pc, #592]	@ (800cc64 <UART_SetConfig+0x930>)
 800ca12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca16:	461a      	mov	r2, r3
 800ca18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca1e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	685a      	ldr	r2, [r3, #4]
 800ca24:	4613      	mov	r3, r2
 800ca26:	005b      	lsls	r3, r3, #1
 800ca28:	4413      	add	r3, r2
 800ca2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d305      	bcc.n	800ca3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d903      	bls.n	800ca44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ca42:	e1c1      	b.n	800cdc8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca46:	2200      	movs	r2, #0
 800ca48:	60bb      	str	r3, [r7, #8]
 800ca4a:	60fa      	str	r2, [r7, #12]
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca50:	4a84      	ldr	r2, [pc, #528]	@ (800cc64 <UART_SetConfig+0x930>)
 800ca52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	2200      	movs	r2, #0
 800ca5a:	603b      	str	r3, [r7, #0]
 800ca5c:	607a      	str	r2, [r7, #4]
 800ca5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca66:	f7f3 fcf3 	bl	8000450 <__aeabi_uldivmod>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	4610      	mov	r0, r2
 800ca70:	4619      	mov	r1, r3
 800ca72:	f04f 0200 	mov.w	r2, #0
 800ca76:	f04f 0300 	mov.w	r3, #0
 800ca7a:	020b      	lsls	r3, r1, #8
 800ca7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca80:	0202      	lsls	r2, r0, #8
 800ca82:	6979      	ldr	r1, [r7, #20]
 800ca84:	6849      	ldr	r1, [r1, #4]
 800ca86:	0849      	lsrs	r1, r1, #1
 800ca88:	2000      	movs	r0, #0
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	4605      	mov	r5, r0
 800ca8e:	eb12 0804 	adds.w	r8, r2, r4
 800ca92:	eb43 0905 	adc.w	r9, r3, r5
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	469a      	mov	sl, r3
 800ca9e:	4693      	mov	fp, r2
 800caa0:	4652      	mov	r2, sl
 800caa2:	465b      	mov	r3, fp
 800caa4:	4640      	mov	r0, r8
 800caa6:	4649      	mov	r1, r9
 800caa8:	f7f3 fcd2 	bl	8000450 <__aeabi_uldivmod>
 800caac:	4602      	mov	r2, r0
 800caae:	460b      	mov	r3, r1
 800cab0:	4613      	mov	r3, r2
 800cab2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800caba:	d308      	bcc.n	800cace <UART_SetConfig+0x79a>
 800cabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cabe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cac2:	d204      	bcs.n	800cace <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800caca:	60da      	str	r2, [r3, #12]
 800cacc:	e17c      	b.n	800cdc8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cad4:	e178      	b.n	800cdc8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	69db      	ldr	r3, [r3, #28]
 800cada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cade:	f040 80c5 	bne.w	800cc6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cae2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cae6:	2b20      	cmp	r3, #32
 800cae8:	dc48      	bgt.n	800cb7c <UART_SetConfig+0x848>
 800caea:	2b00      	cmp	r3, #0
 800caec:	db7b      	blt.n	800cbe6 <UART_SetConfig+0x8b2>
 800caee:	2b20      	cmp	r3, #32
 800caf0:	d879      	bhi.n	800cbe6 <UART_SetConfig+0x8b2>
 800caf2:	a201      	add	r2, pc, #4	@ (adr r2, 800caf8 <UART_SetConfig+0x7c4>)
 800caf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf8:	0800cb83 	.word	0x0800cb83
 800cafc:	0800cb8b 	.word	0x0800cb8b
 800cb00:	0800cbe7 	.word	0x0800cbe7
 800cb04:	0800cbe7 	.word	0x0800cbe7
 800cb08:	0800cb93 	.word	0x0800cb93
 800cb0c:	0800cbe7 	.word	0x0800cbe7
 800cb10:	0800cbe7 	.word	0x0800cbe7
 800cb14:	0800cbe7 	.word	0x0800cbe7
 800cb18:	0800cba3 	.word	0x0800cba3
 800cb1c:	0800cbe7 	.word	0x0800cbe7
 800cb20:	0800cbe7 	.word	0x0800cbe7
 800cb24:	0800cbe7 	.word	0x0800cbe7
 800cb28:	0800cbe7 	.word	0x0800cbe7
 800cb2c:	0800cbe7 	.word	0x0800cbe7
 800cb30:	0800cbe7 	.word	0x0800cbe7
 800cb34:	0800cbe7 	.word	0x0800cbe7
 800cb38:	0800cbb3 	.word	0x0800cbb3
 800cb3c:	0800cbe7 	.word	0x0800cbe7
 800cb40:	0800cbe7 	.word	0x0800cbe7
 800cb44:	0800cbe7 	.word	0x0800cbe7
 800cb48:	0800cbe7 	.word	0x0800cbe7
 800cb4c:	0800cbe7 	.word	0x0800cbe7
 800cb50:	0800cbe7 	.word	0x0800cbe7
 800cb54:	0800cbe7 	.word	0x0800cbe7
 800cb58:	0800cbe7 	.word	0x0800cbe7
 800cb5c:	0800cbe7 	.word	0x0800cbe7
 800cb60:	0800cbe7 	.word	0x0800cbe7
 800cb64:	0800cbe7 	.word	0x0800cbe7
 800cb68:	0800cbe7 	.word	0x0800cbe7
 800cb6c:	0800cbe7 	.word	0x0800cbe7
 800cb70:	0800cbe7 	.word	0x0800cbe7
 800cb74:	0800cbe7 	.word	0x0800cbe7
 800cb78:	0800cbd9 	.word	0x0800cbd9
 800cb7c:	2b40      	cmp	r3, #64	@ 0x40
 800cb7e:	d02e      	beq.n	800cbde <UART_SetConfig+0x8aa>
 800cb80:	e031      	b.n	800cbe6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb82:	f7fb fdf3 	bl	800876c <HAL_RCC_GetPCLK1Freq>
 800cb86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb88:	e033      	b.n	800cbf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb8a:	f7fb fe05 	bl	8008798 <HAL_RCC_GetPCLK2Freq>
 800cb8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb90:	e02f      	b.n	800cbf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fd fdf6 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cba0:	e027      	b.n	800cbf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cba2:	f107 0318 	add.w	r3, r7, #24
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fd ff42 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbb0:	e01f      	b.n	800cbf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbb2:	4b2d      	ldr	r3, [pc, #180]	@ (800cc68 <UART_SetConfig+0x934>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f003 0320 	and.w	r3, r3, #32
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d009      	beq.n	800cbd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbbe:	4b2a      	ldr	r3, [pc, #168]	@ (800cc68 <UART_SetConfig+0x934>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	08db      	lsrs	r3, r3, #3
 800cbc4:	f003 0303 	and.w	r3, r3, #3
 800cbc8:	4a24      	ldr	r2, [pc, #144]	@ (800cc5c <UART_SetConfig+0x928>)
 800cbca:	fa22 f303 	lsr.w	r3, r2, r3
 800cbce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbd0:	e00f      	b.n	800cbf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cbd2:	4b22      	ldr	r3, [pc, #136]	@ (800cc5c <UART_SetConfig+0x928>)
 800cbd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbd6:	e00c      	b.n	800cbf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbd8:	4b21      	ldr	r3, [pc, #132]	@ (800cc60 <UART_SetConfig+0x92c>)
 800cbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbdc:	e009      	b.n	800cbf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbe4:	e005      	b.n	800cbf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cbf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f000 80e7 	beq.w	800cdc8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbfe:	4a19      	ldr	r2, [pc, #100]	@ (800cc64 <UART_SetConfig+0x930>)
 800cc00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc04:	461a      	mov	r2, r3
 800cc06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc08:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc0c:	005a      	lsls	r2, r3, #1
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	085b      	lsrs	r3, r3, #1
 800cc14:	441a      	add	r2, r3
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc22:	2b0f      	cmp	r3, #15
 800cc24:	d916      	bls.n	800cc54 <UART_SetConfig+0x920>
 800cc26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc2c:	d212      	bcs.n	800cc54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	f023 030f 	bic.w	r3, r3, #15
 800cc36:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3a:	085b      	lsrs	r3, r3, #1
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	f003 0307 	and.w	r3, r3, #7
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cc46:	4313      	orrs	r3, r2
 800cc48:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cc50:	60da      	str	r2, [r3, #12]
 800cc52:	e0b9      	b.n	800cdc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cc5a:	e0b5      	b.n	800cdc8 <UART_SetConfig+0xa94>
 800cc5c:	03d09000 	.word	0x03d09000
 800cc60:	003d0900 	.word	0x003d0900
 800cc64:	080221dc 	.word	0x080221dc
 800cc68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cc70:	2b20      	cmp	r3, #32
 800cc72:	dc49      	bgt.n	800cd08 <UART_SetConfig+0x9d4>
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	db7c      	blt.n	800cd72 <UART_SetConfig+0xa3e>
 800cc78:	2b20      	cmp	r3, #32
 800cc7a:	d87a      	bhi.n	800cd72 <UART_SetConfig+0xa3e>
 800cc7c:	a201      	add	r2, pc, #4	@ (adr r2, 800cc84 <UART_SetConfig+0x950>)
 800cc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc82:	bf00      	nop
 800cc84:	0800cd0f 	.word	0x0800cd0f
 800cc88:	0800cd17 	.word	0x0800cd17
 800cc8c:	0800cd73 	.word	0x0800cd73
 800cc90:	0800cd73 	.word	0x0800cd73
 800cc94:	0800cd1f 	.word	0x0800cd1f
 800cc98:	0800cd73 	.word	0x0800cd73
 800cc9c:	0800cd73 	.word	0x0800cd73
 800cca0:	0800cd73 	.word	0x0800cd73
 800cca4:	0800cd2f 	.word	0x0800cd2f
 800cca8:	0800cd73 	.word	0x0800cd73
 800ccac:	0800cd73 	.word	0x0800cd73
 800ccb0:	0800cd73 	.word	0x0800cd73
 800ccb4:	0800cd73 	.word	0x0800cd73
 800ccb8:	0800cd73 	.word	0x0800cd73
 800ccbc:	0800cd73 	.word	0x0800cd73
 800ccc0:	0800cd73 	.word	0x0800cd73
 800ccc4:	0800cd3f 	.word	0x0800cd3f
 800ccc8:	0800cd73 	.word	0x0800cd73
 800cccc:	0800cd73 	.word	0x0800cd73
 800ccd0:	0800cd73 	.word	0x0800cd73
 800ccd4:	0800cd73 	.word	0x0800cd73
 800ccd8:	0800cd73 	.word	0x0800cd73
 800ccdc:	0800cd73 	.word	0x0800cd73
 800cce0:	0800cd73 	.word	0x0800cd73
 800cce4:	0800cd73 	.word	0x0800cd73
 800cce8:	0800cd73 	.word	0x0800cd73
 800ccec:	0800cd73 	.word	0x0800cd73
 800ccf0:	0800cd73 	.word	0x0800cd73
 800ccf4:	0800cd73 	.word	0x0800cd73
 800ccf8:	0800cd73 	.word	0x0800cd73
 800ccfc:	0800cd73 	.word	0x0800cd73
 800cd00:	0800cd73 	.word	0x0800cd73
 800cd04:	0800cd65 	.word	0x0800cd65
 800cd08:	2b40      	cmp	r3, #64	@ 0x40
 800cd0a:	d02e      	beq.n	800cd6a <UART_SetConfig+0xa36>
 800cd0c:	e031      	b.n	800cd72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd0e:	f7fb fd2d 	bl	800876c <HAL_RCC_GetPCLK1Freq>
 800cd12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cd14:	e033      	b.n	800cd7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd16:	f7fb fd3f 	bl	8008798 <HAL_RCC_GetPCLK2Freq>
 800cd1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cd1c:	e02f      	b.n	800cd7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fd fd30 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd2c:	e027      	b.n	800cd7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd2e:	f107 0318 	add.w	r3, r7, #24
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fd fe7c 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd3c:	e01f      	b.n	800cd7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd3e:	4b2d      	ldr	r3, [pc, #180]	@ (800cdf4 <UART_SetConfig+0xac0>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f003 0320 	and.w	r3, r3, #32
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d009      	beq.n	800cd5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd4a:	4b2a      	ldr	r3, [pc, #168]	@ (800cdf4 <UART_SetConfig+0xac0>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	08db      	lsrs	r3, r3, #3
 800cd50:	f003 0303 	and.w	r3, r3, #3
 800cd54:	4a28      	ldr	r2, [pc, #160]	@ (800cdf8 <UART_SetConfig+0xac4>)
 800cd56:	fa22 f303 	lsr.w	r3, r2, r3
 800cd5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd5c:	e00f      	b.n	800cd7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cd5e:	4b26      	ldr	r3, [pc, #152]	@ (800cdf8 <UART_SetConfig+0xac4>)
 800cd60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd62:	e00c      	b.n	800cd7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd64:	4b25      	ldr	r3, [pc, #148]	@ (800cdfc <UART_SetConfig+0xac8>)
 800cd66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd68:	e009      	b.n	800cd7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd70:	e005      	b.n	800cd7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cd72:	2300      	movs	r3, #0
 800cd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cd7c:	bf00      	nop
    }

    if (pclk != 0U)
 800cd7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d021      	beq.n	800cdc8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd88:	4a1d      	ldr	r2, [pc, #116]	@ (800ce00 <UART_SetConfig+0xacc>)
 800cd8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd92:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	085b      	lsrs	r3, r3, #1
 800cd9c:	441a      	add	r2, r3
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cda6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cda8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdaa:	2b0f      	cmp	r3, #15
 800cdac:	d909      	bls.n	800cdc2 <UART_SetConfig+0xa8e>
 800cdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdb4:	d205      	bcs.n	800cdc2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60da      	str	r2, [r3, #12]
 800cdc0:	e002      	b.n	800cdc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	2200      	movs	r2, #0
 800cddc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	2200      	movs	r2, #0
 800cde2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cde4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3748      	adds	r7, #72	@ 0x48
 800cdec:	46bd      	mov	sp, r7
 800cdee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdf2:	bf00      	nop
 800cdf4:	58024400 	.word	0x58024400
 800cdf8:	03d09000 	.word	0x03d09000
 800cdfc:	003d0900 	.word	0x003d0900
 800ce00:	080221dc 	.word	0x080221dc

0800ce04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce10:	f003 0308 	and.w	r3, r3, #8
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00a      	beq.n	800ce2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	430a      	orrs	r2, r1
 800ce2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce32:	f003 0301 	and.w	r3, r3, #1
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00a      	beq.n	800ce50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	430a      	orrs	r2, r1
 800ce4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce54:	f003 0302 	and.w	r3, r3, #2
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00a      	beq.n	800ce72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	430a      	orrs	r2, r1
 800ce70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce76:	f003 0304 	and.w	r3, r3, #4
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00a      	beq.n	800ce94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	430a      	orrs	r2, r1
 800ce92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce98:	f003 0310 	and.w	r3, r3, #16
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00a      	beq.n	800ceb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	430a      	orrs	r2, r1
 800ceb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ceba:	f003 0320 	and.w	r3, r3, #32
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00a      	beq.n	800ced8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	430a      	orrs	r2, r1
 800ced6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d01a      	beq.n	800cf1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	430a      	orrs	r2, r1
 800cef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cefe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf02:	d10a      	bne.n	800cf1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	430a      	orrs	r2, r1
 800cf18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00a      	beq.n	800cf3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	430a      	orrs	r2, r1
 800cf3a:	605a      	str	r2, [r3, #4]
  }
}
 800cf3c:	bf00      	nop
 800cf3e:	370c      	adds	r7, #12
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b098      	sub	sp, #96	@ 0x60
 800cf4c:	af02      	add	r7, sp, #8
 800cf4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf58:	f7f5 fffa 	bl	8002f50 <HAL_GetTick>
 800cf5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f003 0308 	and.w	r3, r3, #8
 800cf68:	2b08      	cmp	r3, #8
 800cf6a:	d12f      	bne.n	800cfcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf74:	2200      	movs	r2, #0
 800cf76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 f88e 	bl	800d09c <UART_WaitOnFlagUntilTimeout>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d022      	beq.n	800cfcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf8e:	e853 3f00 	ldrex	r3, [r3]
 800cf92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cf94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfa4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cfaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfac:	e841 2300 	strex	r3, r2, [r1]
 800cfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cfb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d1e6      	bne.n	800cf86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2220      	movs	r2, #32
 800cfbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfc8:	2303      	movs	r3, #3
 800cfca:	e063      	b.n	800d094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 0304 	and.w	r3, r3, #4
 800cfd6:	2b04      	cmp	r3, #4
 800cfd8:	d149      	bne.n	800d06e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 f857 	bl	800d09c <UART_WaitOnFlagUntilTimeout>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d03c      	beq.n	800d06e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffc:	e853 3f00 	ldrex	r3, [r3]
 800d000:	623b      	str	r3, [r7, #32]
   return(result);
 800d002:	6a3b      	ldr	r3, [r7, #32]
 800d004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	461a      	mov	r2, r3
 800d010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d012:	633b      	str	r3, [r7, #48]	@ 0x30
 800d014:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d01a:	e841 2300 	strex	r3, r2, [r1]
 800d01e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d022:	2b00      	cmp	r3, #0
 800d024:	d1e6      	bne.n	800cff4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	3308      	adds	r3, #8
 800d02c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	e853 3f00 	ldrex	r3, [r3]
 800d034:	60fb      	str	r3, [r7, #12]
   return(result);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f023 0301 	bic.w	r3, r3, #1
 800d03c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	3308      	adds	r3, #8
 800d044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d046:	61fa      	str	r2, [r7, #28]
 800d048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04a:	69b9      	ldr	r1, [r7, #24]
 800d04c:	69fa      	ldr	r2, [r7, #28]
 800d04e:	e841 2300 	strex	r3, r2, [r1]
 800d052:	617b      	str	r3, [r7, #20]
   return(result);
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1e5      	bne.n	800d026 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2220      	movs	r2, #32
 800d05e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d06a:	2303      	movs	r3, #3
 800d06c:	e012      	b.n	800d094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2220      	movs	r2, #32
 800d072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2220      	movs	r2, #32
 800d07a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d092:	2300      	movs	r3, #0
}
 800d094:	4618      	mov	r0, r3
 800d096:	3758      	adds	r7, #88	@ 0x58
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	603b      	str	r3, [r7, #0]
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0ac:	e04f      	b.n	800d14e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0b4:	d04b      	beq.n	800d14e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0b6:	f7f5 ff4b 	bl	8002f50 <HAL_GetTick>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	69ba      	ldr	r2, [r7, #24]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d302      	bcc.n	800d0cc <UART_WaitOnFlagUntilTimeout+0x30>
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d101      	bne.n	800d0d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	e04e      	b.n	800d16e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f003 0304 	and.w	r3, r3, #4
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d037      	beq.n	800d14e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	2b80      	cmp	r3, #128	@ 0x80
 800d0e2:	d034      	beq.n	800d14e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	2b40      	cmp	r3, #64	@ 0x40
 800d0e8:	d031      	beq.n	800d14e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	69db      	ldr	r3, [r3, #28]
 800d0f0:	f003 0308 	and.w	r3, r3, #8
 800d0f4:	2b08      	cmp	r3, #8
 800d0f6:	d110      	bne.n	800d11a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2208      	movs	r2, #8
 800d0fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f000 f921 	bl	800d348 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2208      	movs	r2, #8
 800d10a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	e029      	b.n	800d16e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	69db      	ldr	r3, [r3, #28]
 800d120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d128:	d111      	bne.n	800d14e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f000 f907 	bl	800d348 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2220      	movs	r2, #32
 800d13e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d14a:	2303      	movs	r3, #3
 800d14c:	e00f      	b.n	800d16e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	69da      	ldr	r2, [r3, #28]
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	4013      	ands	r3, r2
 800d158:	68ba      	ldr	r2, [r7, #8]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	bf0c      	ite	eq
 800d15e:	2301      	moveq	r3, #1
 800d160:	2300      	movne	r3, #0
 800d162:	b2db      	uxtb	r3, r3
 800d164:	461a      	mov	r2, r3
 800d166:	79fb      	ldrb	r3, [r7, #7]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d0a0      	beq.n	800d0ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
	...

0800d178 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b096      	sub	sp, #88	@ 0x58
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	4613      	mov	r3, r2
 800d184:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	88fa      	ldrh	r2, [r7, #6]
 800d190:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2200      	movs	r2, #0
 800d198:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2222      	movs	r2, #34	@ 0x22
 800d1a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d02d      	beq.n	800d20a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1b4:	4a40      	ldr	r2, [pc, #256]	@ (800d2b8 <UART_Start_Receive_DMA+0x140>)
 800d1b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1be:	4a3f      	ldr	r2, [pc, #252]	@ (800d2bc <UART_Start_Receive_DMA+0x144>)
 800d1c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1c8:	4a3d      	ldr	r2, [pc, #244]	@ (800d2c0 <UART_Start_Receive_DMA+0x148>)
 800d1ca:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	3324      	adds	r3, #36	@ 0x24
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	88fb      	ldrh	r3, [r7, #6]
 800d1ec:	f7f7 fdfa 	bl	8004de4 <HAL_DMA_Start_IT>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d009      	beq.n	800d20a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2210      	movs	r2, #16
 800d1fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2220      	movs	r2, #32
 800d202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	e051      	b.n	800d2ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	691b      	ldr	r3, [r3, #16]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d018      	beq.n	800d244 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d21a:	e853 3f00 	ldrex	r3, [r3]
 800d21e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d226:	657b      	str	r3, [r7, #84]	@ 0x54
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	461a      	mov	r2, r3
 800d22e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d230:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d232:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d234:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d238:	e841 2300 	strex	r3, r2, [r1]
 800d23c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d23e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1e6      	bne.n	800d212 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	3308      	adds	r3, #8
 800d24a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d24e:	e853 3f00 	ldrex	r3, [r3]
 800d252:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d256:	f043 0301 	orr.w	r3, r3, #1
 800d25a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	3308      	adds	r3, #8
 800d262:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d264:	637a      	str	r2, [r7, #52]	@ 0x34
 800d266:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d268:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d26a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d26c:	e841 2300 	strex	r3, r2, [r1]
 800d270:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1e5      	bne.n	800d244 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3308      	adds	r3, #8
 800d27e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	e853 3f00 	ldrex	r3, [r3]
 800d286:	613b      	str	r3, [r7, #16]
   return(result);
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d28e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3308      	adds	r3, #8
 800d296:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d298:	623a      	str	r2, [r7, #32]
 800d29a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d29c:	69f9      	ldr	r1, [r7, #28]
 800d29e:	6a3a      	ldr	r2, [r7, #32]
 800d2a0:	e841 2300 	strex	r3, r2, [r1]
 800d2a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1e5      	bne.n	800d278 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3758      	adds	r7, #88	@ 0x58
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	0800d4c7 	.word	0x0800d4c7
 800d2bc:	0800d5ef 	.word	0x0800d5ef
 800d2c0:	0800d62d 	.word	0x0800d62d

0800d2c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b08f      	sub	sp, #60	@ 0x3c
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	e853 3f00 	ldrex	r3, [r3]
 800d2d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d2e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2f2:	e841 2300 	strex	r3, r2, [r1]
 800d2f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1e6      	bne.n	800d2cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	3308      	adds	r3, #8
 800d304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	e853 3f00 	ldrex	r3, [r3]
 800d30c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d314:	633b      	str	r3, [r7, #48]	@ 0x30
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	3308      	adds	r3, #8
 800d31c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d31e:	61ba      	str	r2, [r7, #24]
 800d320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d322:	6979      	ldr	r1, [r7, #20]
 800d324:	69ba      	ldr	r2, [r7, #24]
 800d326:	e841 2300 	strex	r3, r2, [r1]
 800d32a:	613b      	str	r3, [r7, #16]
   return(result);
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d1e5      	bne.n	800d2fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2220      	movs	r2, #32
 800d336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d33a:	bf00      	nop
 800d33c:	373c      	adds	r7, #60	@ 0x3c
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
	...

0800d348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d348:	b480      	push	{r7}
 800d34a:	b095      	sub	sp, #84	@ 0x54
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d358:	e853 3f00 	ldrex	r3, [r3]
 800d35c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	461a      	mov	r2, r3
 800d36c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d36e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d370:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d376:	e841 2300 	strex	r3, r2, [r1]
 800d37a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d1e6      	bne.n	800d350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	3308      	adds	r3, #8
 800d388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38a:	6a3b      	ldr	r3, [r7, #32]
 800d38c:	e853 3f00 	ldrex	r3, [r3]
 800d390:	61fb      	str	r3, [r7, #28]
   return(result);
 800d392:	69fa      	ldr	r2, [r7, #28]
 800d394:	4b1e      	ldr	r3, [pc, #120]	@ (800d410 <UART_EndRxTransfer+0xc8>)
 800d396:	4013      	ands	r3, r2
 800d398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	3308      	adds	r3, #8
 800d3a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d3a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d3a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d3a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3aa:	e841 2300 	strex	r3, r2, [r1]
 800d3ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1e5      	bne.n	800d382 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d118      	bne.n	800d3f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	e853 3f00 	ldrex	r3, [r3]
 800d3ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	f023 0310 	bic.w	r3, r3, #16
 800d3d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3dc:	61bb      	str	r3, [r7, #24]
 800d3de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e0:	6979      	ldr	r1, [r7, #20]
 800d3e2:	69ba      	ldr	r2, [r7, #24]
 800d3e4:	e841 2300 	strex	r3, r2, [r1]
 800d3e8:	613b      	str	r3, [r7, #16]
   return(result);
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1e6      	bne.n	800d3be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2220      	movs	r2, #32
 800d3f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2200      	movs	r2, #0
 800d402:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d404:	bf00      	nop
 800d406:	3754      	adds	r7, #84	@ 0x54
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	effffffe 	.word	0xeffffffe

0800d414 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b090      	sub	sp, #64	@ 0x40
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d420:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	69db      	ldr	r3, [r3, #28]
 800d426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d42a:	d037      	beq.n	800d49c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d42c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d42e:	2200      	movs	r2, #0
 800d430:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3308      	adds	r3, #8
 800d43a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43e:	e853 3f00 	ldrex	r3, [r3]
 800d442:	623b      	str	r3, [r7, #32]
   return(result);
 800d444:	6a3b      	ldr	r3, [r7, #32]
 800d446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d44a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d44c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	3308      	adds	r3, #8
 800d452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d454:	633a      	str	r2, [r7, #48]	@ 0x30
 800d456:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d458:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d45a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d45c:	e841 2300 	strex	r3, r2, [r1]
 800d460:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1e5      	bne.n	800d434 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	e853 3f00 	ldrex	r3, [r3]
 800d474:	60fb      	str	r3, [r7, #12]
   return(result);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d47c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	461a      	mov	r2, r3
 800d484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d486:	61fb      	str	r3, [r7, #28]
 800d488:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48a:	69b9      	ldr	r1, [r7, #24]
 800d48c:	69fa      	ldr	r2, [r7, #28]
 800d48e:	e841 2300 	strex	r3, r2, [r1]
 800d492:	617b      	str	r3, [r7, #20]
   return(result);
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1e6      	bne.n	800d468 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d49a:	e002      	b.n	800d4a2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d49c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d49e:	f7fe ff0b 	bl	800c2b8 <HAL_UART_TxCpltCallback>
}
 800d4a2:	bf00      	nop
 800d4a4:	3740      	adds	r7, #64	@ 0x40
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b084      	sub	sp, #16
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f7fe ff07 	bl	800c2cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4be:	bf00      	nop
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b09c      	sub	sp, #112	@ 0x70
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	69db      	ldr	r3, [r3, #28]
 800d4d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4dc:	d071      	beq.n	800d5c2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d4de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4ee:	e853 3f00 	ldrex	r3, [r3]
 800d4f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d4f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d4fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	461a      	mov	r2, r3
 800d502:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d504:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d506:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d508:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d50a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d50c:	e841 2300 	strex	r3, r2, [r1]
 800d510:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d514:	2b00      	cmp	r3, #0
 800d516:	d1e6      	bne.n	800d4e6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3308      	adds	r3, #8
 800d51e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d522:	e853 3f00 	ldrex	r3, [r3]
 800d526:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d52a:	f023 0301 	bic.w	r3, r3, #1
 800d52e:	667b      	str	r3, [r7, #100]	@ 0x64
 800d530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	3308      	adds	r3, #8
 800d536:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d538:	647a      	str	r2, [r7, #68]	@ 0x44
 800d53a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d53e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d540:	e841 2300 	strex	r3, r2, [r1]
 800d544:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d1e5      	bne.n	800d518 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d54c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	3308      	adds	r3, #8
 800d552:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d556:	e853 3f00 	ldrex	r3, [r3]
 800d55a:	623b      	str	r3, [r7, #32]
   return(result);
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d562:	663b      	str	r3, [r7, #96]	@ 0x60
 800d564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3308      	adds	r3, #8
 800d56a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d56c:	633a      	str	r2, [r7, #48]	@ 0x30
 800d56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d570:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d574:	e841 2300 	strex	r3, r2, [r1]
 800d578:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1e5      	bne.n	800d54c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d582:	2220      	movs	r2, #32
 800d584:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d588:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d58a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d118      	bne.n	800d5c2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	e853 3f00 	ldrex	r3, [r3]
 800d59c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f023 0310 	bic.w	r3, r3, #16
 800d5a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d5a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5ae:	61fb      	str	r3, [r7, #28]
 800d5b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b2:	69b9      	ldr	r1, [r7, #24]
 800d5b4:	69fa      	ldr	r2, [r7, #28]
 800d5b6:	e841 2300 	strex	r3, r2, [r1]
 800d5ba:	617b      	str	r3, [r7, #20]
   return(result);
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d1e6      	bne.n	800d590 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d107      	bne.n	800d5e0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d5d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d5da:	f7fe fe9f 	bl	800c31c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5de:	e002      	b.n	800d5e6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d5e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d5e2:	f7fe fe7d 	bl	800c2e0 <HAL_UART_RxCpltCallback>
}
 800d5e6:	bf00      	nop
 800d5e8:	3770      	adds	r7, #112	@ 0x70
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b084      	sub	sp, #16
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5fa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2201      	movs	r2, #1
 800d600:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d606:	2b01      	cmp	r3, #1
 800d608:	d109      	bne.n	800d61e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d610:	085b      	lsrs	r3, r3, #1
 800d612:	b29b      	uxth	r3, r3
 800d614:	4619      	mov	r1, r3
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f7fe fe80 	bl	800c31c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d61c:	e002      	b.n	800d624 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f7fe fe68 	bl	800c2f4 <HAL_UART_RxHalfCpltCallback>
}
 800d624:	bf00      	nop
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d638:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d640:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d648:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	689b      	ldr	r3, [r3, #8]
 800d650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d654:	2b80      	cmp	r3, #128	@ 0x80
 800d656:	d109      	bne.n	800d66c <UART_DMAError+0x40>
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	2b21      	cmp	r3, #33	@ 0x21
 800d65c:	d106      	bne.n	800d66c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	2200      	movs	r2, #0
 800d662:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800d666:	6978      	ldr	r0, [r7, #20]
 800d668:	f7ff fe2c 	bl	800d2c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d676:	2b40      	cmp	r3, #64	@ 0x40
 800d678:	d109      	bne.n	800d68e <UART_DMAError+0x62>
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2b22      	cmp	r3, #34	@ 0x22
 800d67e:	d106      	bne.n	800d68e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	2200      	movs	r2, #0
 800d684:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800d688:	6978      	ldr	r0, [r7, #20]
 800d68a:	f7ff fe5d 	bl	800d348 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d694:	f043 0210 	orr.w	r2, r3, #16
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d69e:	6978      	ldr	r0, [r7, #20]
 800d6a0:	f7fe fe32 	bl	800c308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6a4:	bf00      	nop
 800d6a6:	3718      	adds	r7, #24
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	f7fe fe1c 	bl	800c308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6d0:	bf00      	nop
 800d6d2:	3710      	adds	r7, #16
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b088      	sub	sp, #32
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	e853 3f00 	ldrex	r3, [r3]
 800d6ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6f4:	61fb      	str	r3, [r7, #28]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	61bb      	str	r3, [r7, #24]
 800d700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d702:	6979      	ldr	r1, [r7, #20]
 800d704:	69ba      	ldr	r2, [r7, #24]
 800d706:	e841 2300 	strex	r3, r2, [r1]
 800d70a:	613b      	str	r3, [r7, #16]
   return(result);
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1e6      	bne.n	800d6e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2220      	movs	r2, #32
 800d716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f7fe fdc9 	bl	800c2b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d726:	bf00      	nop
 800d728:	3720      	adds	r7, #32
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d72e:	b480      	push	{r7}
 800d730:	b083      	sub	sp, #12
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d736:	bf00      	nop
 800d738:	370c      	adds	r7, #12
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d742:	b480      	push	{r7}
 800d744:	b083      	sub	sp, #12
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d74a:	bf00      	nop
 800d74c:	370c      	adds	r7, #12
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr

0800d756 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d756:	b480      	push	{r7}
 800d758:	b083      	sub	sp, #12
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d75e:	bf00      	nop
 800d760:	370c      	adds	r7, #12
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr

0800d76a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d76a:	b480      	push	{r7}
 800d76c:	b085      	sub	sp, #20
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d101      	bne.n	800d780 <HAL_UARTEx_DisableFifoMode+0x16>
 800d77c:	2302      	movs	r3, #2
 800d77e:	e027      	b.n	800d7d0 <HAL_UARTEx_DisableFifoMode+0x66>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2201      	movs	r2, #1
 800d784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2224      	movs	r2, #36	@ 0x24
 800d78c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f022 0201 	bic.w	r2, r2, #1
 800d7a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d7ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2220      	movs	r2, #32
 800d7c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7ce:	2300      	movs	r3, #0
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3714      	adds	r7, #20
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d101      	bne.n	800d7f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7f0:	2302      	movs	r3, #2
 800d7f2:	e02d      	b.n	800d850 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2224      	movs	r2, #36	@ 0x24
 800d800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f022 0201 	bic.w	r2, r2, #1
 800d81a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	683a      	ldr	r2, [r7, #0]
 800d82c:	430a      	orrs	r2, r1
 800d82e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f84f 	bl	800d8d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2220      	movs	r2, #32
 800d842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2200      	movs	r2, #0
 800d84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d101      	bne.n	800d870 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d86c:	2302      	movs	r3, #2
 800d86e:	e02d      	b.n	800d8cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2201      	movs	r2, #1
 800d874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2224      	movs	r2, #36	@ 0x24
 800d87c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f022 0201 	bic.w	r2, r2, #1
 800d896:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	689b      	ldr	r3, [r3, #8]
 800d89e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	683a      	ldr	r2, [r7, #0]
 800d8a8:	430a      	orrs	r2, r1
 800d8aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 f811 	bl	800d8d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68fa      	ldr	r2, [r7, #12]
 800d8b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2220      	movs	r2, #32
 800d8be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d108      	bne.n	800d8f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8f4:	e031      	b.n	800d95a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8f6:	2310      	movs	r3, #16
 800d8f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8fa:	2310      	movs	r3, #16
 800d8fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	0e5b      	lsrs	r3, r3, #25
 800d906:	b2db      	uxtb	r3, r3
 800d908:	f003 0307 	and.w	r3, r3, #7
 800d90c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	0f5b      	lsrs	r3, r3, #29
 800d916:	b2db      	uxtb	r3, r3
 800d918:	f003 0307 	and.w	r3, r3, #7
 800d91c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d91e:	7bbb      	ldrb	r3, [r7, #14]
 800d920:	7b3a      	ldrb	r2, [r7, #12]
 800d922:	4911      	ldr	r1, [pc, #68]	@ (800d968 <UARTEx_SetNbDataToProcess+0x94>)
 800d924:	5c8a      	ldrb	r2, [r1, r2]
 800d926:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d92a:	7b3a      	ldrb	r2, [r7, #12]
 800d92c:	490f      	ldr	r1, [pc, #60]	@ (800d96c <UARTEx_SetNbDataToProcess+0x98>)
 800d92e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d930:	fb93 f3f2 	sdiv	r3, r3, r2
 800d934:	b29a      	uxth	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
 800d93e:	7b7a      	ldrb	r2, [r7, #13]
 800d940:	4909      	ldr	r1, [pc, #36]	@ (800d968 <UARTEx_SetNbDataToProcess+0x94>)
 800d942:	5c8a      	ldrb	r2, [r1, r2]
 800d944:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d948:	7b7a      	ldrb	r2, [r7, #13]
 800d94a:	4908      	ldr	r1, [pc, #32]	@ (800d96c <UARTEx_SetNbDataToProcess+0x98>)
 800d94c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d94e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d952:	b29a      	uxth	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d95a:	bf00      	nop
 800d95c:	3714      	adds	r7, #20
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop
 800d968:	080221f4 	.word	0x080221f4
 800d96c:	080221fc 	.word	0x080221fc

0800d970 <__NVIC_SetPriority>:
{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	4603      	mov	r3, r0
 800d978:	6039      	str	r1, [r7, #0]
 800d97a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d97c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d980:	2b00      	cmp	r3, #0
 800d982:	db0a      	blt.n	800d99a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	b2da      	uxtb	r2, r3
 800d988:	490c      	ldr	r1, [pc, #48]	@ (800d9bc <__NVIC_SetPriority+0x4c>)
 800d98a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d98e:	0112      	lsls	r2, r2, #4
 800d990:	b2d2      	uxtb	r2, r2
 800d992:	440b      	add	r3, r1
 800d994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d998:	e00a      	b.n	800d9b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	b2da      	uxtb	r2, r3
 800d99e:	4908      	ldr	r1, [pc, #32]	@ (800d9c0 <__NVIC_SetPriority+0x50>)
 800d9a0:	88fb      	ldrh	r3, [r7, #6]
 800d9a2:	f003 030f 	and.w	r3, r3, #15
 800d9a6:	3b04      	subs	r3, #4
 800d9a8:	0112      	lsls	r2, r2, #4
 800d9aa:	b2d2      	uxtb	r2, r2
 800d9ac:	440b      	add	r3, r1
 800d9ae:	761a      	strb	r2, [r3, #24]
}
 800d9b0:	bf00      	nop
 800d9b2:	370c      	adds	r7, #12
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr
 800d9bc:	e000e100 	.word	0xe000e100
 800d9c0:	e000ed00 	.word	0xe000ed00

0800d9c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d9c8:	4b05      	ldr	r3, [pc, #20]	@ (800d9e0 <SysTick_Handler+0x1c>)
 800d9ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d9cc:	f002 f976 	bl	800fcbc <xTaskGetSchedulerState>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d001      	beq.n	800d9da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d9d6:	f003 fa77 	bl	8010ec8 <xPortSysTickHandler>
  }
}
 800d9da:	bf00      	nop
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	e000e010 	.word	0xe000e010

0800d9e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	f06f 0004 	mvn.w	r0, #4
 800d9ee:	f7ff ffbf 	bl	800d970 <__NVIC_SetPriority>
#endif
}
 800d9f2:	bf00      	nop
 800d9f4:	bd80      	pop	{r7, pc}
	...

0800d9f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d9f8:	b480      	push	{r7}
 800d9fa:	b083      	sub	sp, #12
 800d9fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9fe:	f3ef 8305 	mrs	r3, IPSR
 800da02:	603b      	str	r3, [r7, #0]
  return(result);
 800da04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da06:	2b00      	cmp	r3, #0
 800da08:	d003      	beq.n	800da12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800da0a:	f06f 0305 	mvn.w	r3, #5
 800da0e:	607b      	str	r3, [r7, #4]
 800da10:	e00c      	b.n	800da2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800da12:	4b0a      	ldr	r3, [pc, #40]	@ (800da3c <osKernelInitialize+0x44>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d105      	bne.n	800da26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800da1a:	4b08      	ldr	r3, [pc, #32]	@ (800da3c <osKernelInitialize+0x44>)
 800da1c:	2201      	movs	r2, #1
 800da1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da20:	2300      	movs	r3, #0
 800da22:	607b      	str	r3, [r7, #4]
 800da24:	e002      	b.n	800da2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800da26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800da2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da2c:	687b      	ldr	r3, [r7, #4]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	24032de4 	.word	0x24032de4

0800da40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da46:	f3ef 8305 	mrs	r3, IPSR
 800da4a:	603b      	str	r3, [r7, #0]
  return(result);
 800da4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d003      	beq.n	800da5a <osKernelStart+0x1a>
    stat = osErrorISR;
 800da52:	f06f 0305 	mvn.w	r3, #5
 800da56:	607b      	str	r3, [r7, #4]
 800da58:	e010      	b.n	800da7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da5a:	4b0b      	ldr	r3, [pc, #44]	@ (800da88 <osKernelStart+0x48>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d109      	bne.n	800da76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800da62:	f7ff ffbf 	bl	800d9e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800da66:	4b08      	ldr	r3, [pc, #32]	@ (800da88 <osKernelStart+0x48>)
 800da68:	2202      	movs	r2, #2
 800da6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800da6c:	f001 fc8a 	bl	800f384 <vTaskStartScheduler>
      stat = osOK;
 800da70:	2300      	movs	r3, #0
 800da72:	607b      	str	r3, [r7, #4]
 800da74:	e002      	b.n	800da7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800da76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800da7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da7c:	687b      	ldr	r3, [r7, #4]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3708      	adds	r7, #8
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	24032de4 	.word	0x24032de4

0800da8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08e      	sub	sp, #56	@ 0x38
 800da90:	af04      	add	r7, sp, #16
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800da98:	2300      	movs	r3, #0
 800da9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da9c:	f3ef 8305 	mrs	r3, IPSR
 800daa0:	617b      	str	r3, [r7, #20]
  return(result);
 800daa2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d17e      	bne.n	800dba6 <osThreadNew+0x11a>
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d07b      	beq.n	800dba6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800daae:	2380      	movs	r3, #128	@ 0x80
 800dab0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dab2:	2318      	movs	r3, #24
 800dab4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dab6:	2300      	movs	r3, #0
 800dab8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800daba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dabe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d045      	beq.n	800db52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d002      	beq.n	800dad4 <osThreadNew+0x48>
        name = attr->name;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	699b      	ldr	r3, [r3, #24]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d002      	beq.n	800dae2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	699b      	ldr	r3, [r3, #24]
 800dae0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d008      	beq.n	800dafa <osThreadNew+0x6e>
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	2b38      	cmp	r3, #56	@ 0x38
 800daec:	d805      	bhi.n	800dafa <osThreadNew+0x6e>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	f003 0301 	and.w	r3, r3, #1
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d001      	beq.n	800dafe <osThreadNew+0x72>
        return (NULL);
 800dafa:	2300      	movs	r3, #0
 800dafc:	e054      	b.n	800dba8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	695b      	ldr	r3, [r3, #20]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d003      	beq.n	800db0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	695b      	ldr	r3, [r3, #20]
 800db0a:	089b      	lsrs	r3, r3, #2
 800db0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	689b      	ldr	r3, [r3, #8]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00e      	beq.n	800db34 <osThreadNew+0xa8>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	2ba7      	cmp	r3, #167	@ 0xa7
 800db1c:	d90a      	bls.n	800db34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db22:	2b00      	cmp	r3, #0
 800db24:	d006      	beq.n	800db34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	695b      	ldr	r3, [r3, #20]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d002      	beq.n	800db34 <osThreadNew+0xa8>
        mem = 1;
 800db2e:	2301      	movs	r3, #1
 800db30:	61bb      	str	r3, [r7, #24]
 800db32:	e010      	b.n	800db56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d10c      	bne.n	800db56 <osThreadNew+0xca>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d108      	bne.n	800db56 <osThreadNew+0xca>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	691b      	ldr	r3, [r3, #16]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d104      	bne.n	800db56 <osThreadNew+0xca>
          mem = 0;
 800db4c:	2300      	movs	r3, #0
 800db4e:	61bb      	str	r3, [r7, #24]
 800db50:	e001      	b.n	800db56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800db52:	2300      	movs	r3, #0
 800db54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d110      	bne.n	800db7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db64:	9202      	str	r2, [sp, #8]
 800db66:	9301      	str	r3, [sp, #4]
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	9300      	str	r3, [sp, #0]
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	6a3a      	ldr	r2, [r7, #32]
 800db70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800db72:	68f8      	ldr	r0, [r7, #12]
 800db74:	f001 fa12 	bl	800ef9c <xTaskCreateStatic>
 800db78:	4603      	mov	r3, r0
 800db7a:	613b      	str	r3, [r7, #16]
 800db7c:	e013      	b.n	800dba6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d110      	bne.n	800dba6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800db84:	6a3b      	ldr	r3, [r7, #32]
 800db86:	b29a      	uxth	r2, r3
 800db88:	f107 0310 	add.w	r3, r7, #16
 800db8c:	9301      	str	r3, [sp, #4]
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f001 fa60 	bl	800f05c <xTaskCreate>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d001      	beq.n	800dba6 <osThreadNew+0x11a>
            hTask = NULL;
 800dba2:	2300      	movs	r3, #0
 800dba4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dba6:	693b      	ldr	r3, [r7, #16]
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3728      	adds	r7, #40	@ 0x28
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b088      	sub	sp, #32
 800dbb4:	af02      	add	r7, sp, #8
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d002      	beq.n	800dbca <osThreadFlagsSet+0x1a>
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	da03      	bge.n	800dbd2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800dbca:	f06f 0303 	mvn.w	r3, #3
 800dbce:	60fb      	str	r3, [r7, #12]
 800dbd0:	e035      	b.n	800dc3e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800dbd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dbd6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbd8:	f3ef 8305 	mrs	r3, IPSR
 800dbdc:	613b      	str	r3, [r7, #16]
  return(result);
 800dbde:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d01f      	beq.n	800dc24 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800dbe8:	f107 0308 	add.w	r3, r7, #8
 800dbec:	9300      	str	r3, [sp, #0]
 800dbee:	2300      	movs	r3, #0
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	6839      	ldr	r1, [r7, #0]
 800dbf4:	6978      	ldr	r0, [r7, #20]
 800dbf6:	f002 fb11 	bl	801021c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800dbfa:	f107 030c 	add.w	r3, r7, #12
 800dbfe:	2200      	movs	r2, #0
 800dc00:	9200      	str	r2, [sp, #0]
 800dc02:	2200      	movs	r2, #0
 800dc04:	2100      	movs	r1, #0
 800dc06:	6978      	ldr	r0, [r7, #20]
 800dc08:	f002 fb08 	bl	801021c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d015      	beq.n	800dc3e <osThreadFlagsSet+0x8e>
 800dc12:	4b0d      	ldr	r3, [pc, #52]	@ (800dc48 <osThreadFlagsSet+0x98>)
 800dc14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc18:	601a      	str	r2, [r3, #0]
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	f3bf 8f6f 	isb	sy
 800dc22:	e00c      	b.n	800dc3e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800dc24:	2300      	movs	r3, #0
 800dc26:	2201      	movs	r2, #1
 800dc28:	6839      	ldr	r1, [r7, #0]
 800dc2a:	6978      	ldr	r0, [r7, #20]
 800dc2c:	f002 fa34 	bl	8010098 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800dc30:	f107 030c 	add.w	r3, r7, #12
 800dc34:	2200      	movs	r2, #0
 800dc36:	2100      	movs	r1, #0
 800dc38:	6978      	ldr	r0, [r7, #20]
 800dc3a:	f002 fa2d 	bl	8010098 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3718      	adds	r7, #24
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	e000ed04 	.word	0xe000ed04

0800dc4c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08c      	sub	sp, #48	@ 0x30
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc58:	f3ef 8305 	mrs	r3, IPSR
 800dc5c:	617b      	str	r3, [r7, #20]
  return(result);
 800dc5e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d003      	beq.n	800dc6c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800dc64:	f06f 0305 	mvn.w	r3, #5
 800dc68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc6a:	e06b      	b.n	800dd44 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	da03      	bge.n	800dc7a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800dc72:	f06f 0303 	mvn.w	r3, #3
 800dc76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc78:	e064      	b.n	800dd44 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	f003 0302 	and.w	r3, r3, #2
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <osThreadFlagsWait+0x3e>
      clear = 0U;
 800dc84:	2300      	movs	r3, #0
 800dc86:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc88:	e001      	b.n	800dc8e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800dc96:	f001 fc91 	bl	800f5bc <xTaskGetTickCount>
 800dc9a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800dc9c:	f107 0210 	add.w	r2, r7, #16
 800dca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dca4:	2000      	movs	r0, #0
 800dca6:	f002 f997 	bl	800ffd8 <xTaskNotifyWait>
 800dcaa:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d137      	bne.n	800dd22 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800dcb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	4013      	ands	r3, r2
 800dcb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	f003 0301 	and.w	r3, r3, #1
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00c      	beq.n	800dce6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd0:	4013      	ands	r3, r2
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d032      	beq.n	800dd3e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10f      	bne.n	800dcfe <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800dcde:	f06f 0302 	mvn.w	r3, #2
 800dce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800dce4:	e02e      	b.n	800dd44 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcea:	4013      	ands	r3, r2
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d128      	bne.n	800dd42 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d103      	bne.n	800dcfe <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800dcf6:	f06f 0302 	mvn.w	r3, #2
 800dcfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800dcfc:	e022      	b.n	800dd44 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800dcfe:	f001 fc5d 	bl	800f5bc <xTaskGetTickCount>
 800dd02:	4602      	mov	r2, r0
 800dd04:	6a3b      	ldr	r3, [r7, #32]
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800dd0a:	69ba      	ldr	r2, [r7, #24]
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d902      	bls.n	800dd18 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd16:	e00e      	b.n	800dd36 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800dd18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd20:	e009      	b.n	800dd36 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d103      	bne.n	800dd30 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800dd28:	f06f 0302 	mvn.w	r3, #2
 800dd2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd2e:	e002      	b.n	800dd36 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800dd30:	f06f 0301 	mvn.w	r3, #1
 800dd34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d1af      	bne.n	800dc9c <osThreadFlagsWait+0x50>
 800dd3c:	e002      	b.n	800dd44 <osThreadFlagsWait+0xf8>
            break;
 800dd3e:	bf00      	nop
 800dd40:	e000      	b.n	800dd44 <osThreadFlagsWait+0xf8>
            break;
 800dd42:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800dd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3730      	adds	r7, #48	@ 0x30
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b084      	sub	sp, #16
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd56:	f3ef 8305 	mrs	r3, IPSR
 800dd5a:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d003      	beq.n	800dd6a <osDelay+0x1c>
    stat = osErrorISR;
 800dd62:	f06f 0305 	mvn.w	r3, #5
 800dd66:	60fb      	str	r3, [r7, #12]
 800dd68:	e007      	b.n	800dd7a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <osDelay+0x2c>
      vTaskDelay(ticks);
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f001 facf 	bl	800f318 <vTaskDelay>
    }
  }

  return (stat);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b088      	sub	sp, #32
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd90:	f3ef 8305 	mrs	r3, IPSR
 800dd94:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd96:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d174      	bne.n	800de86 <osMutexNew+0x102>
    if (attr != NULL) {
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d003      	beq.n	800ddaa <osMutexNew+0x26>
      type = attr->attr_bits;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	61bb      	str	r3, [r7, #24]
 800dda8:	e001      	b.n	800ddae <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	f003 0301 	and.w	r3, r3, #1
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d002      	beq.n	800ddbe <osMutexNew+0x3a>
      rmtx = 1U;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	617b      	str	r3, [r7, #20]
 800ddbc:	e001      	b.n	800ddc2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	f003 0308 	and.w	r3, r3, #8
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d15c      	bne.n	800de86 <osMutexNew+0x102>
      mem = -1;
 800ddcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ddd0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d015      	beq.n	800de04 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d006      	beq.n	800ddee <osMutexNew+0x6a>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	2b4f      	cmp	r3, #79	@ 0x4f
 800dde6:	d902      	bls.n	800ddee <osMutexNew+0x6a>
          mem = 1;
 800dde8:	2301      	movs	r3, #1
 800ddea:	613b      	str	r3, [r7, #16]
 800ddec:	e00c      	b.n	800de08 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d108      	bne.n	800de08 <osMutexNew+0x84>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d104      	bne.n	800de08 <osMutexNew+0x84>
            mem = 0;
 800ddfe:	2300      	movs	r3, #0
 800de00:	613b      	str	r3, [r7, #16]
 800de02:	e001      	b.n	800de08 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800de04:	2300      	movs	r3, #0
 800de06:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d112      	bne.n	800de34 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d007      	beq.n	800de24 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	689b      	ldr	r3, [r3, #8]
 800de18:	4619      	mov	r1, r3
 800de1a:	2004      	movs	r0, #4
 800de1c:	f000 fb1f 	bl	800e45e <xQueueCreateMutexStatic>
 800de20:	61f8      	str	r0, [r7, #28]
 800de22:	e016      	b.n	800de52 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	689b      	ldr	r3, [r3, #8]
 800de28:	4619      	mov	r1, r3
 800de2a:	2001      	movs	r0, #1
 800de2c:	f000 fb17 	bl	800e45e <xQueueCreateMutexStatic>
 800de30:	61f8      	str	r0, [r7, #28]
 800de32:	e00e      	b.n	800de52 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d10b      	bne.n	800de52 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d004      	beq.n	800de4a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800de40:	2004      	movs	r0, #4
 800de42:	f000 faf4 	bl	800e42e <xQueueCreateMutex>
 800de46:	61f8      	str	r0, [r7, #28]
 800de48:	e003      	b.n	800de52 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800de4a:	2001      	movs	r0, #1
 800de4c:	f000 faef 	bl	800e42e <xQueueCreateMutex>
 800de50:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00c      	beq.n	800de72 <osMutexNew+0xee>
        if (attr != NULL) {
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d003      	beq.n	800de66 <osMutexNew+0xe2>
          name = attr->name;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	60fb      	str	r3, [r7, #12]
 800de64:	e001      	b.n	800de6a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800de66:	2300      	movs	r3, #0
 800de68:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800de6a:	68f9      	ldr	r1, [r7, #12]
 800de6c:	69f8      	ldr	r0, [r7, #28]
 800de6e:	f001 f837 	bl	800eee0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d006      	beq.n	800de86 <osMutexNew+0x102>
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d003      	beq.n	800de86 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	f043 0301 	orr.w	r3, r3, #1
 800de84:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800de86:	69fb      	ldr	r3, [r7, #28]
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3720      	adds	r7, #32
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800de90:	b580      	push	{r7, lr}
 800de92:	b086      	sub	sp, #24
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f023 0301 	bic.w	r3, r3, #1
 800dea0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f003 0301 	and.w	r3, r3, #1
 800dea8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800deaa:	2300      	movs	r3, #0
 800deac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800deae:	f3ef 8305 	mrs	r3, IPSR
 800deb2:	60bb      	str	r3, [r7, #8]
  return(result);
 800deb4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d003      	beq.n	800dec2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800deba:	f06f 0305 	mvn.w	r3, #5
 800debe:	617b      	str	r3, [r7, #20]
 800dec0:	e02c      	b.n	800df1c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d103      	bne.n	800ded0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800dec8:	f06f 0303 	mvn.w	r3, #3
 800decc:	617b      	str	r3, [r7, #20]
 800dece:	e025      	b.n	800df1c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d011      	beq.n	800defa <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ded6:	6839      	ldr	r1, [r7, #0]
 800ded8:	6938      	ldr	r0, [r7, #16]
 800deda:	f000 fb10 	bl	800e4fe <xQueueTakeMutexRecursive>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d01b      	beq.n	800df1c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d003      	beq.n	800def2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800deea:	f06f 0301 	mvn.w	r3, #1
 800deee:	617b      	str	r3, [r7, #20]
 800def0:	e014      	b.n	800df1c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800def2:	f06f 0302 	mvn.w	r3, #2
 800def6:	617b      	str	r3, [r7, #20]
 800def8:	e010      	b.n	800df1c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800defa:	6839      	ldr	r1, [r7, #0]
 800defc:	6938      	ldr	r0, [r7, #16]
 800defe:	f000 fdb7 	bl	800ea70 <xQueueSemaphoreTake>
 800df02:	4603      	mov	r3, r0
 800df04:	2b01      	cmp	r3, #1
 800df06:	d009      	beq.n	800df1c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d003      	beq.n	800df16 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800df0e:	f06f 0301 	mvn.w	r3, #1
 800df12:	617b      	str	r3, [r7, #20]
 800df14:	e002      	b.n	800df1c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800df16:	f06f 0302 	mvn.w	r3, #2
 800df1a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800df1c:	697b      	ldr	r3, [r7, #20]
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3718      	adds	r7, #24
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}

0800df26 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800df26:	b580      	push	{r7, lr}
 800df28:	b086      	sub	sp, #24
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f023 0301 	bic.w	r3, r3, #1
 800df34:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f003 0301 	and.w	r3, r3, #1
 800df3c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800df3e:	2300      	movs	r3, #0
 800df40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df42:	f3ef 8305 	mrs	r3, IPSR
 800df46:	60bb      	str	r3, [r7, #8]
  return(result);
 800df48:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d003      	beq.n	800df56 <osMutexRelease+0x30>
    stat = osErrorISR;
 800df4e:	f06f 0305 	mvn.w	r3, #5
 800df52:	617b      	str	r3, [r7, #20]
 800df54:	e01f      	b.n	800df96 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d103      	bne.n	800df64 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800df5c:	f06f 0303 	mvn.w	r3, #3
 800df60:	617b      	str	r3, [r7, #20]
 800df62:	e018      	b.n	800df96 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d009      	beq.n	800df7e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800df6a:	6938      	ldr	r0, [r7, #16]
 800df6c:	f000 fa92 	bl	800e494 <xQueueGiveMutexRecursive>
 800df70:	4603      	mov	r3, r0
 800df72:	2b01      	cmp	r3, #1
 800df74:	d00f      	beq.n	800df96 <osMutexRelease+0x70>
        stat = osErrorResource;
 800df76:	f06f 0302 	mvn.w	r3, #2
 800df7a:	617b      	str	r3, [r7, #20]
 800df7c:	e00b      	b.n	800df96 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800df7e:	2300      	movs	r3, #0
 800df80:	2200      	movs	r2, #0
 800df82:	2100      	movs	r1, #0
 800df84:	6938      	ldr	r0, [r7, #16]
 800df86:	f000 faf1 	bl	800e56c <xQueueGenericSend>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d002      	beq.n	800df96 <osMutexRelease+0x70>
        stat = osErrorResource;
 800df90:	f06f 0302 	mvn.w	r3, #2
 800df94:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800df96:	697b      	ldr	r3, [r7, #20]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3718      	adds	r7, #24
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	4a07      	ldr	r2, [pc, #28]	@ (800dfcc <vApplicationGetIdleTaskMemory+0x2c>)
 800dfb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	4a06      	ldr	r2, [pc, #24]	@ (800dfd0 <vApplicationGetIdleTaskMemory+0x30>)
 800dfb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2280      	movs	r2, #128	@ 0x80
 800dfbc:	601a      	str	r2, [r3, #0]
}
 800dfbe:	bf00      	nop
 800dfc0:	3714      	adds	r7, #20
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr
 800dfca:	bf00      	nop
 800dfcc:	24032de8 	.word	0x24032de8
 800dfd0:	24032e90 	.word	0x24032e90

0800dfd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	4a07      	ldr	r2, [pc, #28]	@ (800e000 <vApplicationGetTimerTaskMemory+0x2c>)
 800dfe4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	4a06      	ldr	r2, [pc, #24]	@ (800e004 <vApplicationGetTimerTaskMemory+0x30>)
 800dfea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dff2:	601a      	str	r2, [r3, #0]
}
 800dff4:	bf00      	nop
 800dff6:	3714      	adds	r7, #20
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr
 800e000:	24033090 	.word	0x24033090
 800e004:	24033138 	.word	0x24033138

0800e008 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f103 0208 	add.w	r2, r3, #8
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e020:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f103 0208 	add.w	r2, r3, #8
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f103 0208 	add.w	r2, r3, #8
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2200      	movs	r2, #0
 800e03a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e03c:	bf00      	nop
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e056:	bf00      	nop
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e062:	b480      	push	{r7}
 800e064:	b085      	sub	sp, #20
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
 800e06a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	689a      	ldr	r2, [r3, #8]
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	683a      	ldr	r2, [r7, #0]
 800e086:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	683a      	ldr	r2, [r7, #0]
 800e08c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	1c5a      	adds	r2, r3, #1
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	601a      	str	r2, [r3, #0]
}
 800e09e:	bf00      	nop
 800e0a0:	3714      	adds	r7, #20
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr

0800e0aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e0aa:	b480      	push	{r7}
 800e0ac:	b085      	sub	sp, #20
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
 800e0b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e0c0:	d103      	bne.n	800e0ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	691b      	ldr	r3, [r3, #16]
 800e0c6:	60fb      	str	r3, [r7, #12]
 800e0c8:	e00c      	b.n	800e0e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	60fb      	str	r3, [r7, #12]
 800e0d0:	e002      	b.n	800e0d8 <vListInsert+0x2e>
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	60fb      	str	r3, [r7, #12]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	68ba      	ldr	r2, [r7, #8]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d2f6      	bcs.n	800e0d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	685a      	ldr	r2, [r3, #4]
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	683a      	ldr	r2, [r7, #0]
 800e0f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	68fa      	ldr	r2, [r7, #12]
 800e0f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	683a      	ldr	r2, [r7, #0]
 800e0fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	1c5a      	adds	r2, r3, #1
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	601a      	str	r2, [r3, #0]
}
 800e110:	bf00      	nop
 800e112:	3714      	adds	r7, #20
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	691b      	ldr	r3, [r3, #16]
 800e128:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	6892      	ldr	r2, [r2, #8]
 800e132:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	6852      	ldr	r2, [r2, #4]
 800e13c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	429a      	cmp	r2, r3
 800e146:	d103      	bne.n	800e150 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	689a      	ldr	r2, [r3, #8]
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	1e5a      	subs	r2, r3, #1
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
}
 800e164:	4618      	mov	r0, r3
 800e166:	3714      	adds	r7, #20
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10b      	bne.n	800e19c <xQueueGenericReset+0x2c>
	__asm volatile
 800e184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e188:	f383 8811 	msr	BASEPRI, r3
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	60bb      	str	r3, [r7, #8]
}
 800e196:	bf00      	nop
 800e198:	bf00      	nop
 800e19a:	e7fd      	b.n	800e198 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e19c:	f002 fe04 	bl	8010da8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1a8:	68f9      	ldr	r1, [r7, #12]
 800e1aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e1ac:	fb01 f303 	mul.w	r3, r1, r3
 800e1b0:	441a      	add	r2, r3
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1cc:	3b01      	subs	r3, #1
 800e1ce:	68f9      	ldr	r1, [r7, #12]
 800e1d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e1d2:	fb01 f303 	mul.w	r3, r1, r3
 800e1d6:	441a      	add	r2, r3
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	22ff      	movs	r2, #255	@ 0xff
 800e1e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	22ff      	movs	r2, #255	@ 0xff
 800e1e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d114      	bne.n	800e21c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d01a      	beq.n	800e230 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	3310      	adds	r3, #16
 800e1fe:	4618      	mov	r0, r3
 800e200:	f001 fb5e 	bl	800f8c0 <xTaskRemoveFromEventList>
 800e204:	4603      	mov	r3, r0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d012      	beq.n	800e230 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e20a:	4b0d      	ldr	r3, [pc, #52]	@ (800e240 <xQueueGenericReset+0xd0>)
 800e20c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e210:	601a      	str	r2, [r3, #0]
 800e212:	f3bf 8f4f 	dsb	sy
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	e009      	b.n	800e230 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	3310      	adds	r3, #16
 800e220:	4618      	mov	r0, r3
 800e222:	f7ff fef1 	bl	800e008 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	3324      	adds	r3, #36	@ 0x24
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7ff feec 	bl	800e008 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e230:	f002 fdec 	bl	8010e0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e234:	2301      	movs	r3, #1
}
 800e236:	4618      	mov	r0, r3
 800e238:	3710      	adds	r7, #16
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	e000ed04 	.word	0xe000ed04

0800e244 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e244:	b580      	push	{r7, lr}
 800e246:	b08e      	sub	sp, #56	@ 0x38
 800e248:	af02      	add	r7, sp, #8
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	607a      	str	r2, [r7, #4]
 800e250:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d10b      	bne.n	800e270 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e25c:	f383 8811 	msr	BASEPRI, r3
 800e260:	f3bf 8f6f 	isb	sy
 800e264:	f3bf 8f4f 	dsb	sy
 800e268:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e26a:	bf00      	nop
 800e26c:	bf00      	nop
 800e26e:	e7fd      	b.n	800e26c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d10b      	bne.n	800e28e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e27a:	f383 8811 	msr	BASEPRI, r3
 800e27e:	f3bf 8f6f 	isb	sy
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e288:	bf00      	nop
 800e28a:	bf00      	nop
 800e28c:	e7fd      	b.n	800e28a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d002      	beq.n	800e29a <xQueueGenericCreateStatic+0x56>
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d001      	beq.n	800e29e <xQueueGenericCreateStatic+0x5a>
 800e29a:	2301      	movs	r3, #1
 800e29c:	e000      	b.n	800e2a0 <xQueueGenericCreateStatic+0x5c>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10b      	bne.n	800e2bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a8:	f383 8811 	msr	BASEPRI, r3
 800e2ac:	f3bf 8f6f 	isb	sy
 800e2b0:	f3bf 8f4f 	dsb	sy
 800e2b4:	623b      	str	r3, [r7, #32]
}
 800e2b6:	bf00      	nop
 800e2b8:	bf00      	nop
 800e2ba:	e7fd      	b.n	800e2b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d102      	bne.n	800e2c8 <xQueueGenericCreateStatic+0x84>
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d101      	bne.n	800e2cc <xQueueGenericCreateStatic+0x88>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e000      	b.n	800e2ce <xQueueGenericCreateStatic+0x8a>
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d10b      	bne.n	800e2ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d6:	f383 8811 	msr	BASEPRI, r3
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	f3bf 8f4f 	dsb	sy
 800e2e2:	61fb      	str	r3, [r7, #28]
}
 800e2e4:	bf00      	nop
 800e2e6:	bf00      	nop
 800e2e8:	e7fd      	b.n	800e2e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e2ea:	2350      	movs	r3, #80	@ 0x50
 800e2ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	2b50      	cmp	r3, #80	@ 0x50
 800e2f2:	d00b      	beq.n	800e30c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	61bb      	str	r3, [r7, #24]
}
 800e306:	bf00      	nop
 800e308:	bf00      	nop
 800e30a:	e7fd      	b.n	800e308 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e30c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e314:	2b00      	cmp	r3, #0
 800e316:	d00d      	beq.n	800e334 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e320:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e326:	9300      	str	r3, [sp, #0]
 800e328:	4613      	mov	r3, r2
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	68b9      	ldr	r1, [r7, #8]
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f000 f840 	bl	800e3b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e336:	4618      	mov	r0, r3
 800e338:	3730      	adds	r7, #48	@ 0x30
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e33e:	b580      	push	{r7, lr}
 800e340:	b08a      	sub	sp, #40	@ 0x28
 800e342:	af02      	add	r7, sp, #8
 800e344:	60f8      	str	r0, [r7, #12]
 800e346:	60b9      	str	r1, [r7, #8]
 800e348:	4613      	mov	r3, r2
 800e34a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d10b      	bne.n	800e36a <xQueueGenericCreate+0x2c>
	__asm volatile
 800e352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e356:	f383 8811 	msr	BASEPRI, r3
 800e35a:	f3bf 8f6f 	isb	sy
 800e35e:	f3bf 8f4f 	dsb	sy
 800e362:	613b      	str	r3, [r7, #16]
}
 800e364:	bf00      	nop
 800e366:	bf00      	nop
 800e368:	e7fd      	b.n	800e366 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	fb02 f303 	mul.w	r3, r2, r3
 800e372:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	3350      	adds	r3, #80	@ 0x50
 800e378:	4618      	mov	r0, r3
 800e37a:	f002 fe37 	bl	8010fec <pvPortMalloc>
 800e37e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d011      	beq.n	800e3aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e386:	69bb      	ldr	r3, [r7, #24]
 800e388:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	3350      	adds	r3, #80	@ 0x50
 800e38e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	2200      	movs	r2, #0
 800e394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e398:	79fa      	ldrb	r2, [r7, #7]
 800e39a:	69bb      	ldr	r3, [r7, #24]
 800e39c:	9300      	str	r3, [sp, #0]
 800e39e:	4613      	mov	r3, r2
 800e3a0:	697a      	ldr	r2, [r7, #20]
 800e3a2:	68b9      	ldr	r1, [r7, #8]
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f000 f805 	bl	800e3b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3aa:	69bb      	ldr	r3, [r7, #24]
	}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3720      	adds	r7, #32
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	60b9      	str	r1, [r7, #8]
 800e3be:	607a      	str	r2, [r7, #4]
 800e3c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d103      	bne.n	800e3d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	69ba      	ldr	r2, [r7, #24]
 800e3cc:	601a      	str	r2, [r3, #0]
 800e3ce:	e002      	b.n	800e3d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	68ba      	ldr	r2, [r7, #8]
 800e3e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e3e2:	2101      	movs	r1, #1
 800e3e4:	69b8      	ldr	r0, [r7, #24]
 800e3e6:	f7ff fec3 	bl	800e170 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e3ea:	69bb      	ldr	r3, [r7, #24]
 800e3ec:	78fa      	ldrb	r2, [r7, #3]
 800e3ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e3f2:	bf00      	nop
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b082      	sub	sp, #8
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00e      	beq.n	800e426 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2200      	movs	r2, #0
 800e412:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2200      	movs	r2, #0
 800e418:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e41a:	2300      	movs	r3, #0
 800e41c:	2200      	movs	r2, #0
 800e41e:	2100      	movs	r1, #0
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 f8a3 	bl	800e56c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e426:	bf00      	nop
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b086      	sub	sp, #24
 800e432:	af00      	add	r7, sp, #0
 800e434:	4603      	mov	r3, r0
 800e436:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e438:	2301      	movs	r3, #1
 800e43a:	617b      	str	r3, [r7, #20]
 800e43c:	2300      	movs	r3, #0
 800e43e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e440:	79fb      	ldrb	r3, [r7, #7]
 800e442:	461a      	mov	r2, r3
 800e444:	6939      	ldr	r1, [r7, #16]
 800e446:	6978      	ldr	r0, [r7, #20]
 800e448:	f7ff ff79 	bl	800e33e <xQueueGenericCreate>
 800e44c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f7ff ffd3 	bl	800e3fa <prvInitialiseMutex>

		return xNewQueue;
 800e454:	68fb      	ldr	r3, [r7, #12]
	}
 800e456:	4618      	mov	r0, r3
 800e458:	3718      	adds	r7, #24
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e45e:	b580      	push	{r7, lr}
 800e460:	b088      	sub	sp, #32
 800e462:	af02      	add	r7, sp, #8
 800e464:	4603      	mov	r3, r0
 800e466:	6039      	str	r1, [r7, #0]
 800e468:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e46a:	2301      	movs	r3, #1
 800e46c:	617b      	str	r3, [r7, #20]
 800e46e:	2300      	movs	r3, #0
 800e470:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e472:	79fb      	ldrb	r3, [r7, #7]
 800e474:	9300      	str	r3, [sp, #0]
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	2200      	movs	r2, #0
 800e47a:	6939      	ldr	r1, [r7, #16]
 800e47c:	6978      	ldr	r0, [r7, #20]
 800e47e:	f7ff fee1 	bl	800e244 <xQueueGenericCreateStatic>
 800e482:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f7ff ffb8 	bl	800e3fa <prvInitialiseMutex>

		return xNewQueue;
 800e48a:	68fb      	ldr	r3, [r7, #12]
	}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3718      	adds	r7, #24
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e494:	b590      	push	{r4, r7, lr}
 800e496:	b087      	sub	sp, #28
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10b      	bne.n	800e4be <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4aa:	f383 8811 	msr	BASEPRI, r3
 800e4ae:	f3bf 8f6f 	isb	sy
 800e4b2:	f3bf 8f4f 	dsb	sy
 800e4b6:	60fb      	str	r3, [r7, #12]
}
 800e4b8:	bf00      	nop
 800e4ba:	bf00      	nop
 800e4bc:	e7fd      	b.n	800e4ba <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	689c      	ldr	r4, [r3, #8]
 800e4c2:	f001 fbeb 	bl	800fc9c <xTaskGetCurrentTaskHandle>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	429c      	cmp	r4, r3
 800e4ca:	d111      	bne.n	800e4f0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	1e5a      	subs	r2, r3, #1
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d105      	bne.n	800e4ea <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e4de:	2300      	movs	r3, #0
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	2100      	movs	r1, #0
 800e4e4:	6938      	ldr	r0, [r7, #16]
 800e4e6:	f000 f841 	bl	800e56c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	617b      	str	r3, [r7, #20]
 800e4ee:	e001      	b.n	800e4f4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e4f4:	697b      	ldr	r3, [r7, #20]
	}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	371c      	adds	r7, #28
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd90      	pop	{r4, r7, pc}

0800e4fe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e4fe:	b590      	push	{r4, r7, lr}
 800e500:	b087      	sub	sp, #28
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
 800e506:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d10b      	bne.n	800e52a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800e512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	60fb      	str	r3, [r7, #12]
}
 800e524:	bf00      	nop
 800e526:	bf00      	nop
 800e528:	e7fd      	b.n	800e526 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	689c      	ldr	r4, [r3, #8]
 800e52e:	f001 fbb5 	bl	800fc9c <xTaskGetCurrentTaskHandle>
 800e532:	4603      	mov	r3, r0
 800e534:	429c      	cmp	r4, r3
 800e536:	d107      	bne.n	800e548 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	1c5a      	adds	r2, r3, #1
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e542:	2301      	movs	r3, #1
 800e544:	617b      	str	r3, [r7, #20]
 800e546:	e00c      	b.n	800e562 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e548:	6839      	ldr	r1, [r7, #0]
 800e54a:	6938      	ldr	r0, [r7, #16]
 800e54c:	f000 fa90 	bl	800ea70 <xQueueSemaphoreTake>
 800e550:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d004      	beq.n	800e562 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	1c5a      	adds	r2, r3, #1
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e562:	697b      	ldr	r3, [r7, #20]
	}
 800e564:	4618      	mov	r0, r3
 800e566:	371c      	adds	r7, #28
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd90      	pop	{r4, r7, pc}

0800e56c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b08e      	sub	sp, #56	@ 0x38
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
 800e578:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e57a:	2300      	movs	r3, #0
 800e57c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e584:	2b00      	cmp	r3, #0
 800e586:	d10b      	bne.n	800e5a0 <xQueueGenericSend+0x34>
	__asm volatile
 800e588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58c:	f383 8811 	msr	BASEPRI, r3
 800e590:	f3bf 8f6f 	isb	sy
 800e594:	f3bf 8f4f 	dsb	sy
 800e598:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e59a:	bf00      	nop
 800e59c:	bf00      	nop
 800e59e:	e7fd      	b.n	800e59c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d103      	bne.n	800e5ae <xQueueGenericSend+0x42>
 800e5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d101      	bne.n	800e5b2 <xQueueGenericSend+0x46>
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e000      	b.n	800e5b4 <xQueueGenericSend+0x48>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d10b      	bne.n	800e5d0 <xQueueGenericSend+0x64>
	__asm volatile
 800e5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5bc:	f383 8811 	msr	BASEPRI, r3
 800e5c0:	f3bf 8f6f 	isb	sy
 800e5c4:	f3bf 8f4f 	dsb	sy
 800e5c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e5ca:	bf00      	nop
 800e5cc:	bf00      	nop
 800e5ce:	e7fd      	b.n	800e5cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	2b02      	cmp	r3, #2
 800e5d4:	d103      	bne.n	800e5de <xQueueGenericSend+0x72>
 800e5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d101      	bne.n	800e5e2 <xQueueGenericSend+0x76>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e000      	b.n	800e5e4 <xQueueGenericSend+0x78>
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d10b      	bne.n	800e600 <xQueueGenericSend+0x94>
	__asm volatile
 800e5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ec:	f383 8811 	msr	BASEPRI, r3
 800e5f0:	f3bf 8f6f 	isb	sy
 800e5f4:	f3bf 8f4f 	dsb	sy
 800e5f8:	623b      	str	r3, [r7, #32]
}
 800e5fa:	bf00      	nop
 800e5fc:	bf00      	nop
 800e5fe:	e7fd      	b.n	800e5fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e600:	f001 fb5c 	bl	800fcbc <xTaskGetSchedulerState>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d102      	bne.n	800e610 <xQueueGenericSend+0xa4>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d101      	bne.n	800e614 <xQueueGenericSend+0xa8>
 800e610:	2301      	movs	r3, #1
 800e612:	e000      	b.n	800e616 <xQueueGenericSend+0xaa>
 800e614:	2300      	movs	r3, #0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10b      	bne.n	800e632 <xQueueGenericSend+0xc6>
	__asm volatile
 800e61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61e:	f383 8811 	msr	BASEPRI, r3
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	61fb      	str	r3, [r7, #28]
}
 800e62c:	bf00      	nop
 800e62e:	bf00      	nop
 800e630:	e7fd      	b.n	800e62e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e632:	f002 fbb9 	bl	8010da8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e63e:	429a      	cmp	r2, r3
 800e640:	d302      	bcc.n	800e648 <xQueueGenericSend+0xdc>
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	2b02      	cmp	r3, #2
 800e646:	d129      	bne.n	800e69c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e648:	683a      	ldr	r2, [r7, #0]
 800e64a:	68b9      	ldr	r1, [r7, #8]
 800e64c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e64e:	f000 fb37 	bl	800ecc0 <prvCopyDataToQueue>
 800e652:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d010      	beq.n	800e67e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e65e:	3324      	adds	r3, #36	@ 0x24
 800e660:	4618      	mov	r0, r3
 800e662:	f001 f92d 	bl	800f8c0 <xTaskRemoveFromEventList>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d013      	beq.n	800e694 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e66c:	4b3f      	ldr	r3, [pc, #252]	@ (800e76c <xQueueGenericSend+0x200>)
 800e66e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e672:	601a      	str	r2, [r3, #0]
 800e674:	f3bf 8f4f 	dsb	sy
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	e00a      	b.n	800e694 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e680:	2b00      	cmp	r3, #0
 800e682:	d007      	beq.n	800e694 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e684:	4b39      	ldr	r3, [pc, #228]	@ (800e76c <xQueueGenericSend+0x200>)
 800e686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e68a:	601a      	str	r2, [r3, #0]
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e694:	f002 fbba 	bl	8010e0c <vPortExitCritical>
				return pdPASS;
 800e698:	2301      	movs	r3, #1
 800e69a:	e063      	b.n	800e764 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d103      	bne.n	800e6aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6a2:	f002 fbb3 	bl	8010e0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	e05c      	b.n	800e764 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d106      	bne.n	800e6be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6b0:	f107 0314 	add.w	r3, r7, #20
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f001 f98f 	bl	800f9d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e6be:	f002 fba5 	bl	8010e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e6c2:	f000 fecf 	bl	800f464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6c6:	f002 fb6f 	bl	8010da8 <vPortEnterCritical>
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e6d0:	b25b      	sxtb	r3, r3
 800e6d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e6d6:	d103      	bne.n	800e6e0 <xQueueGenericSend+0x174>
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e6e6:	b25b      	sxtb	r3, r3
 800e6e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e6ec:	d103      	bne.n	800e6f6 <xQueueGenericSend+0x18a>
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e6f6:	f002 fb89 	bl	8010e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6fa:	1d3a      	adds	r2, r7, #4
 800e6fc:	f107 0314 	add.w	r3, r7, #20
 800e700:	4611      	mov	r1, r2
 800e702:	4618      	mov	r0, r3
 800e704:	f001 f97e 	bl	800fa04 <xTaskCheckForTimeOut>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d124      	bne.n	800e758 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e70e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e710:	f000 fbce 	bl	800eeb0 <prvIsQueueFull>
 800e714:	4603      	mov	r3, r0
 800e716:	2b00      	cmp	r3, #0
 800e718:	d018      	beq.n	800e74c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e71c:	3310      	adds	r3, #16
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	4611      	mov	r1, r2
 800e722:	4618      	mov	r0, r3
 800e724:	f001 f87a 	bl	800f81c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e728:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e72a:	f000 fb59 	bl	800ede0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e72e:	f000 fea7 	bl	800f480 <xTaskResumeAll>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	f47f af7c 	bne.w	800e632 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e73a:	4b0c      	ldr	r3, [pc, #48]	@ (800e76c <xQueueGenericSend+0x200>)
 800e73c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e740:	601a      	str	r2, [r3, #0]
 800e742:	f3bf 8f4f 	dsb	sy
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	e772      	b.n	800e632 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e74c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e74e:	f000 fb47 	bl	800ede0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e752:	f000 fe95 	bl	800f480 <xTaskResumeAll>
 800e756:	e76c      	b.n	800e632 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e758:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e75a:	f000 fb41 	bl	800ede0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e75e:	f000 fe8f 	bl	800f480 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e762:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e764:	4618      	mov	r0, r3
 800e766:	3738      	adds	r7, #56	@ 0x38
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	e000ed04 	.word	0xe000ed04

0800e770 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b090      	sub	sp, #64	@ 0x40
 800e774:	af00      	add	r7, sp, #0
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	60b9      	str	r1, [r7, #8]
 800e77a:	607a      	str	r2, [r7, #4]
 800e77c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e784:	2b00      	cmp	r3, #0
 800e786:	d10b      	bne.n	800e7a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e78c:	f383 8811 	msr	BASEPRI, r3
 800e790:	f3bf 8f6f 	isb	sy
 800e794:	f3bf 8f4f 	dsb	sy
 800e798:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e79a:	bf00      	nop
 800e79c:	bf00      	nop
 800e79e:	e7fd      	b.n	800e79c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d103      	bne.n	800e7ae <xQueueGenericSendFromISR+0x3e>
 800e7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d101      	bne.n	800e7b2 <xQueueGenericSendFromISR+0x42>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e000      	b.n	800e7b4 <xQueueGenericSendFromISR+0x44>
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d10b      	bne.n	800e7d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7bc:	f383 8811 	msr	BASEPRI, r3
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e7ca:	bf00      	nop
 800e7cc:	bf00      	nop
 800e7ce:	e7fd      	b.n	800e7cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d103      	bne.n	800e7de <xQueueGenericSendFromISR+0x6e>
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d101      	bne.n	800e7e2 <xQueueGenericSendFromISR+0x72>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e000      	b.n	800e7e4 <xQueueGenericSendFromISR+0x74>
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10b      	bne.n	800e800 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ec:	f383 8811 	msr	BASEPRI, r3
 800e7f0:	f3bf 8f6f 	isb	sy
 800e7f4:	f3bf 8f4f 	dsb	sy
 800e7f8:	623b      	str	r3, [r7, #32]
}
 800e7fa:	bf00      	nop
 800e7fc:	bf00      	nop
 800e7fe:	e7fd      	b.n	800e7fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e800:	f002 fbb2 	bl	8010f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e804:	f3ef 8211 	mrs	r2, BASEPRI
 800e808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80c:	f383 8811 	msr	BASEPRI, r3
 800e810:	f3bf 8f6f 	isb	sy
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	61fa      	str	r2, [r7, #28]
 800e81a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e81c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e81e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e822:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e828:	429a      	cmp	r2, r3
 800e82a:	d302      	bcc.n	800e832 <xQueueGenericSendFromISR+0xc2>
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	2b02      	cmp	r3, #2
 800e830:	d12f      	bne.n	800e892 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e834:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e838:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e83e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e840:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e842:	683a      	ldr	r2, [r7, #0]
 800e844:	68b9      	ldr	r1, [r7, #8]
 800e846:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e848:	f000 fa3a 	bl	800ecc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e84c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e850:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e854:	d112      	bne.n	800e87c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d016      	beq.n	800e88c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e860:	3324      	adds	r3, #36	@ 0x24
 800e862:	4618      	mov	r0, r3
 800e864:	f001 f82c 	bl	800f8c0 <xTaskRemoveFromEventList>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00e      	beq.n	800e88c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00b      	beq.n	800e88c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2201      	movs	r2, #1
 800e878:	601a      	str	r2, [r3, #0]
 800e87a:	e007      	b.n	800e88c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e87c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e880:	3301      	adds	r3, #1
 800e882:	b2db      	uxtb	r3, r3
 800e884:	b25a      	sxtb	r2, r3
 800e886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e88c:	2301      	movs	r3, #1
 800e88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e890:	e001      	b.n	800e896 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e892:	2300      	movs	r3, #0
 800e894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e898:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e8a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e8a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3740      	adds	r7, #64	@ 0x40
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b08c      	sub	sp, #48	@ 0x30
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d10b      	bne.n	800e8de <xQueueReceive+0x32>
	__asm volatile
 800e8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ca:	f383 8811 	msr	BASEPRI, r3
 800e8ce:	f3bf 8f6f 	isb	sy
 800e8d2:	f3bf 8f4f 	dsb	sy
 800e8d6:	623b      	str	r3, [r7, #32]
}
 800e8d8:	bf00      	nop
 800e8da:	bf00      	nop
 800e8dc:	e7fd      	b.n	800e8da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d103      	bne.n	800e8ec <xQueueReceive+0x40>
 800e8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d101      	bne.n	800e8f0 <xQueueReceive+0x44>
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	e000      	b.n	800e8f2 <xQueueReceive+0x46>
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d10b      	bne.n	800e90e <xQueueReceive+0x62>
	__asm volatile
 800e8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8fa:	f383 8811 	msr	BASEPRI, r3
 800e8fe:	f3bf 8f6f 	isb	sy
 800e902:	f3bf 8f4f 	dsb	sy
 800e906:	61fb      	str	r3, [r7, #28]
}
 800e908:	bf00      	nop
 800e90a:	bf00      	nop
 800e90c:	e7fd      	b.n	800e90a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e90e:	f001 f9d5 	bl	800fcbc <xTaskGetSchedulerState>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d102      	bne.n	800e91e <xQueueReceive+0x72>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d101      	bne.n	800e922 <xQueueReceive+0x76>
 800e91e:	2301      	movs	r3, #1
 800e920:	e000      	b.n	800e924 <xQueueReceive+0x78>
 800e922:	2300      	movs	r3, #0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d10b      	bne.n	800e940 <xQueueReceive+0x94>
	__asm volatile
 800e928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e92c:	f383 8811 	msr	BASEPRI, r3
 800e930:	f3bf 8f6f 	isb	sy
 800e934:	f3bf 8f4f 	dsb	sy
 800e938:	61bb      	str	r3, [r7, #24]
}
 800e93a:	bf00      	nop
 800e93c:	bf00      	nop
 800e93e:	e7fd      	b.n	800e93c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e940:	f002 fa32 	bl	8010da8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e948:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d01f      	beq.n	800e990 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e950:	68b9      	ldr	r1, [r7, #8]
 800e952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e954:	f000 fa1e 	bl	800ed94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95a:	1e5a      	subs	r2, r3, #1
 800e95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e95e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e962:	691b      	ldr	r3, [r3, #16]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00f      	beq.n	800e988 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e96a:	3310      	adds	r3, #16
 800e96c:	4618      	mov	r0, r3
 800e96e:	f000 ffa7 	bl	800f8c0 <xTaskRemoveFromEventList>
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d007      	beq.n	800e988 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e978:	4b3c      	ldr	r3, [pc, #240]	@ (800ea6c <xQueueReceive+0x1c0>)
 800e97a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e97e:	601a      	str	r2, [r3, #0]
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e988:	f002 fa40 	bl	8010e0c <vPortExitCritical>
				return pdPASS;
 800e98c:	2301      	movs	r3, #1
 800e98e:	e069      	b.n	800ea64 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d103      	bne.n	800e99e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e996:	f002 fa39 	bl	8010e0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e99a:	2300      	movs	r3, #0
 800e99c:	e062      	b.n	800ea64 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d106      	bne.n	800e9b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e9a4:	f107 0310 	add.w	r3, r7, #16
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f001 f815 	bl	800f9d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e9b2:	f002 fa2b 	bl	8010e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e9b6:	f000 fd55 	bl	800f464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9ba:	f002 f9f5 	bl	8010da8 <vPortEnterCritical>
 800e9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e9c4:	b25b      	sxtb	r3, r3
 800e9c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9ca:	d103      	bne.n	800e9d4 <xQueueReceive+0x128>
 800e9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e9da:	b25b      	sxtb	r3, r3
 800e9dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9e0:	d103      	bne.n	800e9ea <xQueueReceive+0x13e>
 800e9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9ea:	f002 fa0f 	bl	8010e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9ee:	1d3a      	adds	r2, r7, #4
 800e9f0:	f107 0310 	add.w	r3, r7, #16
 800e9f4:	4611      	mov	r1, r2
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f001 f804 	bl	800fa04 <xTaskCheckForTimeOut>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d123      	bne.n	800ea4a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea04:	f000 fa3e 	bl	800ee84 <prvIsQueueEmpty>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d017      	beq.n	800ea3e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea10:	3324      	adds	r3, #36	@ 0x24
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	4611      	mov	r1, r2
 800ea16:	4618      	mov	r0, r3
 800ea18:	f000 ff00 	bl	800f81c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea1e:	f000 f9df 	bl	800ede0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea22:	f000 fd2d 	bl	800f480 <xTaskResumeAll>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d189      	bne.n	800e940 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ea2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ea6c <xQueueReceive+0x1c0>)
 800ea2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea32:	601a      	str	r2, [r3, #0]
 800ea34:	f3bf 8f4f 	dsb	sy
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	e780      	b.n	800e940 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ea3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea40:	f000 f9ce 	bl	800ede0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea44:	f000 fd1c 	bl	800f480 <xTaskResumeAll>
 800ea48:	e77a      	b.n	800e940 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea4c:	f000 f9c8 	bl	800ede0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea50:	f000 fd16 	bl	800f480 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea56:	f000 fa15 	bl	800ee84 <prvIsQueueEmpty>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f43f af6f 	beq.w	800e940 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3730      	adds	r7, #48	@ 0x30
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	e000ed04 	.word	0xe000ed04

0800ea70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b08e      	sub	sp, #56	@ 0x38
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ea82:	2300      	movs	r3, #0
 800ea84:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d10b      	bne.n	800eaa4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ea8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea90:	f383 8811 	msr	BASEPRI, r3
 800ea94:	f3bf 8f6f 	isb	sy
 800ea98:	f3bf 8f4f 	dsb	sy
 800ea9c:	623b      	str	r3, [r7, #32]
}
 800ea9e:	bf00      	nop
 800eaa0:	bf00      	nop
 800eaa2:	e7fd      	b.n	800eaa0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eaa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d00b      	beq.n	800eac4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	61fb      	str	r3, [r7, #28]
}
 800eabe:	bf00      	nop
 800eac0:	bf00      	nop
 800eac2:	e7fd      	b.n	800eac0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eac4:	f001 f8fa 	bl	800fcbc <xTaskGetSchedulerState>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d102      	bne.n	800ead4 <xQueueSemaphoreTake+0x64>
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <xQueueSemaphoreTake+0x68>
 800ead4:	2301      	movs	r3, #1
 800ead6:	e000      	b.n	800eada <xQueueSemaphoreTake+0x6a>
 800ead8:	2300      	movs	r3, #0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d10b      	bne.n	800eaf6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800eade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae2:	f383 8811 	msr	BASEPRI, r3
 800eae6:	f3bf 8f6f 	isb	sy
 800eaea:	f3bf 8f4f 	dsb	sy
 800eaee:	61bb      	str	r3, [r7, #24]
}
 800eaf0:	bf00      	nop
 800eaf2:	bf00      	nop
 800eaf4:	e7fd      	b.n	800eaf2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eaf6:	f002 f957 	bl	8010da8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eafe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d024      	beq.n	800eb50 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb08:	1e5a      	subs	r2, r3, #1
 800eb0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb0c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d104      	bne.n	800eb20 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800eb16:	f001 fa4b 	bl	800ffb0 <pvTaskIncrementMutexHeldCount>
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb22:	691b      	ldr	r3, [r3, #16]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00f      	beq.n	800eb48 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2a:	3310      	adds	r3, #16
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f000 fec7 	bl	800f8c0 <xTaskRemoveFromEventList>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d007      	beq.n	800eb48 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb38:	4b54      	ldr	r3, [pc, #336]	@ (800ec8c <xQueueSemaphoreTake+0x21c>)
 800eb3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb3e:	601a      	str	r2, [r3, #0]
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb48:	f002 f960 	bl	8010e0c <vPortExitCritical>
				return pdPASS;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e098      	b.n	800ec82 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d112      	bne.n	800eb7c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00b      	beq.n	800eb74 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800eb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb60:	f383 8811 	msr	BASEPRI, r3
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	617b      	str	r3, [r7, #20]
}
 800eb6e:	bf00      	nop
 800eb70:	bf00      	nop
 800eb72:	e7fd      	b.n	800eb70 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eb74:	f002 f94a 	bl	8010e0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	e082      	b.n	800ec82 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d106      	bne.n	800eb90 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb82:	f107 030c 	add.w	r3, r7, #12
 800eb86:	4618      	mov	r0, r3
 800eb88:	f000 ff26 	bl	800f9d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb90:	f002 f93c 	bl	8010e0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb94:	f000 fc66 	bl	800f464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb98:	f002 f906 	bl	8010da8 <vPortEnterCritical>
 800eb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eba2:	b25b      	sxtb	r3, r3
 800eba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eba8:	d103      	bne.n	800ebb2 <xQueueSemaphoreTake+0x142>
 800ebaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebac:	2200      	movs	r2, #0
 800ebae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ebb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ebb8:	b25b      	sxtb	r3, r3
 800ebba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ebbe:	d103      	bne.n	800ebc8 <xQueueSemaphoreTake+0x158>
 800ebc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ebc8:	f002 f920 	bl	8010e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebcc:	463a      	mov	r2, r7
 800ebce:	f107 030c 	add.w	r3, r7, #12
 800ebd2:	4611      	mov	r1, r2
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f000 ff15 	bl	800fa04 <xTaskCheckForTimeOut>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d132      	bne.n	800ec46 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebe0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebe2:	f000 f94f 	bl	800ee84 <prvIsQueueEmpty>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d026      	beq.n	800ec3a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d109      	bne.n	800ec08 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ebf4:	f002 f8d8 	bl	8010da8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ebf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebfa:	689b      	ldr	r3, [r3, #8]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f001 f87b 	bl	800fcf8 <xTaskPriorityInherit>
 800ec02:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ec04:	f002 f902 	bl	8010e0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec0a:	3324      	adds	r3, #36	@ 0x24
 800ec0c:	683a      	ldr	r2, [r7, #0]
 800ec0e:	4611      	mov	r1, r2
 800ec10:	4618      	mov	r0, r3
 800ec12:	f000 fe03 	bl	800f81c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec18:	f000 f8e2 	bl	800ede0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec1c:	f000 fc30 	bl	800f480 <xTaskResumeAll>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	f47f af67 	bne.w	800eaf6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ec28:	4b18      	ldr	r3, [pc, #96]	@ (800ec8c <xQueueSemaphoreTake+0x21c>)
 800ec2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec2e:	601a      	str	r2, [r3, #0]
 800ec30:	f3bf 8f4f 	dsb	sy
 800ec34:	f3bf 8f6f 	isb	sy
 800ec38:	e75d      	b.n	800eaf6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ec3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec3c:	f000 f8d0 	bl	800ede0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec40:	f000 fc1e 	bl	800f480 <xTaskResumeAll>
 800ec44:	e757      	b.n	800eaf6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ec46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec48:	f000 f8ca 	bl	800ede0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec4c:	f000 fc18 	bl	800f480 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec52:	f000 f917 	bl	800ee84 <prvIsQueueEmpty>
 800ec56:	4603      	mov	r3, r0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f43f af4c 	beq.w	800eaf6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ec5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d00d      	beq.n	800ec80 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ec64:	f002 f8a0 	bl	8010da8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ec68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec6a:	f000 f811 	bl	800ec90 <prvGetDisinheritPriorityAfterTimeout>
 800ec6e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ec70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec76:	4618      	mov	r0, r3
 800ec78:	f001 f916 	bl	800fea8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ec7c:	f002 f8c6 	bl	8010e0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3738      	adds	r7, #56	@ 0x38
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	e000ed04 	.word	0xe000ed04

0800ec90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ec90:	b480      	push	{r7}
 800ec92:	b085      	sub	sp, #20
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d006      	beq.n	800ecae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ecaa:	60fb      	str	r3, [r7, #12]
 800ecac:	e001      	b.n	800ecb2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
	}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3714      	adds	r7, #20
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eccc:	2300      	movs	r3, #0
 800ecce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d10d      	bne.n	800ecfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d14d      	bne.n	800ed82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	689b      	ldr	r3, [r3, #8]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f001 f86c 	bl	800fdc8 <xTaskPriorityDisinherit>
 800ecf0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	609a      	str	r2, [r3, #8]
 800ecf8:	e043      	b.n	800ed82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d119      	bne.n	800ed34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	6858      	ldr	r0, [r3, #4]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed08:	461a      	mov	r2, r3
 800ed0a:	68b9      	ldr	r1, [r7, #8]
 800ed0c:	f012 fa75 	bl	80211fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	685a      	ldr	r2, [r3, #4]
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed18:	441a      	add	r2, r3
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	685a      	ldr	r2, [r3, #4]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d32b      	bcc.n	800ed82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	605a      	str	r2, [r3, #4]
 800ed32:	e026      	b.n	800ed82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	68d8      	ldr	r0, [r3, #12]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	68b9      	ldr	r1, [r7, #8]
 800ed40:	f012 fa5b 	bl	80211fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	68da      	ldr	r2, [r3, #12]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed4c:	425b      	negs	r3, r3
 800ed4e:	441a      	add	r2, r3
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	68da      	ldr	r2, [r3, #12]
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d207      	bcs.n	800ed70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	689a      	ldr	r2, [r3, #8]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed68:	425b      	negs	r3, r3
 800ed6a:	441a      	add	r2, r3
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2b02      	cmp	r3, #2
 800ed74:	d105      	bne.n	800ed82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d002      	beq.n	800ed82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	1c5a      	adds	r2, r3, #1
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ed8a:	697b      	ldr	r3, [r7, #20]
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3718      	adds	r7, #24
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d018      	beq.n	800edd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	68da      	ldr	r2, [r3, #12]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edae:	441a      	add	r2, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	68da      	ldr	r2, [r3, #12]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	689b      	ldr	r3, [r3, #8]
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d303      	bcc.n	800edc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	68d9      	ldr	r1, [r3, #12]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edd0:	461a      	mov	r2, r3
 800edd2:	6838      	ldr	r0, [r7, #0]
 800edd4:	f012 fa11 	bl	80211fa <memcpy>
	}
}
 800edd8:	bf00      	nop
 800edda:	3708      	adds	r7, #8
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ede8:	f001 ffde 	bl	8010da8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800edf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800edf4:	e011      	b.n	800ee1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d012      	beq.n	800ee24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	3324      	adds	r3, #36	@ 0x24
 800ee02:	4618      	mov	r0, r3
 800ee04:	f000 fd5c 	bl	800f8c0 <xTaskRemoveFromEventList>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d001      	beq.n	800ee12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ee0e:	f000 fe5d 	bl	800facc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
 800ee14:	3b01      	subs	r3, #1
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	dce9      	bgt.n	800edf6 <prvUnlockQueue+0x16>
 800ee22:	e000      	b.n	800ee26 <prvUnlockQueue+0x46>
					break;
 800ee24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	22ff      	movs	r2, #255	@ 0xff
 800ee2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ee2e:	f001 ffed 	bl	8010e0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ee32:	f001 ffb9 	bl	8010da8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ee3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee3e:	e011      	b.n	800ee64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	691b      	ldr	r3, [r3, #16]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d012      	beq.n	800ee6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	3310      	adds	r3, #16
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f000 fd37 	bl	800f8c0 <xTaskRemoveFromEventList>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d001      	beq.n	800ee5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ee58:	f000 fe38 	bl	800facc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ee5c:	7bbb      	ldrb	r3, [r7, #14]
 800ee5e:	3b01      	subs	r3, #1
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	dce9      	bgt.n	800ee40 <prvUnlockQueue+0x60>
 800ee6c:	e000      	b.n	800ee70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ee6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	22ff      	movs	r2, #255	@ 0xff
 800ee74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ee78:	f001 ffc8 	bl	8010e0c <vPortExitCritical>
}
 800ee7c:	bf00      	nop
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee8c:	f001 ff8c 	bl	8010da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d102      	bne.n	800ee9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	60fb      	str	r3, [r7, #12]
 800ee9c:	e001      	b.n	800eea2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eea2:	f001 ffb3 	bl	8010e0c <vPortExitCritical>

	return xReturn;
 800eea6:	68fb      	ldr	r3, [r7, #12]
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3710      	adds	r7, #16
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eeb8:	f001 ff76 	bl	8010da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d102      	bne.n	800eece <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eec8:	2301      	movs	r3, #1
 800eeca:	60fb      	str	r3, [r7, #12]
 800eecc:	e001      	b.n	800eed2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eece:	2300      	movs	r3, #0
 800eed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eed2:	f001 ff9b 	bl	8010e0c <vPortExitCritical>

	return xReturn;
 800eed6:	68fb      	ldr	r3, [r7, #12]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3710      	adds	r7, #16
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eee0:	b480      	push	{r7}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eeea:	2300      	movs	r3, #0
 800eeec:	60fb      	str	r3, [r7, #12]
 800eeee:	e014      	b.n	800ef1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eef0:	4a0f      	ldr	r2, [pc, #60]	@ (800ef30 <vQueueAddToRegistry+0x50>)
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d10b      	bne.n	800ef14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eefc:	490c      	ldr	r1, [pc, #48]	@ (800ef30 <vQueueAddToRegistry+0x50>)
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	683a      	ldr	r2, [r7, #0]
 800ef02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ef06:	4a0a      	ldr	r2, [pc, #40]	@ (800ef30 <vQueueAddToRegistry+0x50>)
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	00db      	lsls	r3, r3, #3
 800ef0c:	4413      	add	r3, r2
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ef12:	e006      	b.n	800ef22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	3301      	adds	r3, #1
 800ef18:	60fb      	str	r3, [r7, #12]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2b07      	cmp	r3, #7
 800ef1e:	d9e7      	bls.n	800eef0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ef20:	bf00      	nop
 800ef22:	bf00      	nop
 800ef24:	3714      	adds	r7, #20
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr
 800ef2e:	bf00      	nop
 800ef30:	24033538 	.word	0x24033538

0800ef34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b086      	sub	sp, #24
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ef44:	f001 ff30 	bl	8010da8 <vPortEnterCritical>
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef4e:	b25b      	sxtb	r3, r3
 800ef50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef54:	d103      	bne.n	800ef5e <vQueueWaitForMessageRestricted+0x2a>
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ef64:	b25b      	sxtb	r3, r3
 800ef66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef6a:	d103      	bne.n	800ef74 <vQueueWaitForMessageRestricted+0x40>
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ef74:	f001 ff4a 	bl	8010e0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d106      	bne.n	800ef8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	3324      	adds	r3, #36	@ 0x24
 800ef84:	687a      	ldr	r2, [r7, #4]
 800ef86:	68b9      	ldr	r1, [r7, #8]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f000 fc6d 	bl	800f868 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ef8e:	6978      	ldr	r0, [r7, #20]
 800ef90:	f7ff ff26 	bl	800ede0 <prvUnlockQueue>
	}
 800ef94:	bf00      	nop
 800ef96:	3718      	adds	r7, #24
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b08e      	sub	sp, #56	@ 0x38
 800efa0:	af04      	add	r7, sp, #16
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	607a      	str	r2, [r7, #4]
 800efa8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800efaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efac:	2b00      	cmp	r3, #0
 800efae:	d10b      	bne.n	800efc8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800efb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efb4:	f383 8811 	msr	BASEPRI, r3
 800efb8:	f3bf 8f6f 	isb	sy
 800efbc:	f3bf 8f4f 	dsb	sy
 800efc0:	623b      	str	r3, [r7, #32]
}
 800efc2:	bf00      	nop
 800efc4:	bf00      	nop
 800efc6:	e7fd      	b.n	800efc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800efc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d10b      	bne.n	800efe6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800efce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	61fb      	str	r3, [r7, #28]
}
 800efe0:	bf00      	nop
 800efe2:	bf00      	nop
 800efe4:	e7fd      	b.n	800efe2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800efe6:	23a8      	movs	r3, #168	@ 0xa8
 800efe8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	2ba8      	cmp	r3, #168	@ 0xa8
 800efee:	d00b      	beq.n	800f008 <xTaskCreateStatic+0x6c>
	__asm volatile
 800eff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eff4:	f383 8811 	msr	BASEPRI, r3
 800eff8:	f3bf 8f6f 	isb	sy
 800effc:	f3bf 8f4f 	dsb	sy
 800f000:	61bb      	str	r3, [r7, #24]
}
 800f002:	bf00      	nop
 800f004:	bf00      	nop
 800f006:	e7fd      	b.n	800f004 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f008:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d01e      	beq.n	800f04e <xTaskCreateStatic+0xb2>
 800f010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f012:	2b00      	cmp	r3, #0
 800f014:	d01b      	beq.n	800f04e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f018:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f01c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f01e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f022:	2202      	movs	r2, #2
 800f024:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f028:	2300      	movs	r3, #0
 800f02a:	9303      	str	r3, [sp, #12]
 800f02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f02e:	9302      	str	r3, [sp, #8]
 800f030:	f107 0314 	add.w	r3, r7, #20
 800f034:	9301      	str	r3, [sp, #4]
 800f036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	68b9      	ldr	r1, [r7, #8]
 800f040:	68f8      	ldr	r0, [r7, #12]
 800f042:	f000 f851 	bl	800f0e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f046:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f048:	f000 f8f6 	bl	800f238 <prvAddNewTaskToReadyList>
 800f04c:	e001      	b.n	800f052 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f04e:	2300      	movs	r3, #0
 800f050:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f052:	697b      	ldr	r3, [r7, #20]
	}
 800f054:	4618      	mov	r0, r3
 800f056:	3728      	adds	r7, #40	@ 0x28
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b08c      	sub	sp, #48	@ 0x30
 800f060:	af04      	add	r7, sp, #16
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	603b      	str	r3, [r7, #0]
 800f068:	4613      	mov	r3, r2
 800f06a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f06c:	88fb      	ldrh	r3, [r7, #6]
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	4618      	mov	r0, r3
 800f072:	f001 ffbb 	bl	8010fec <pvPortMalloc>
 800f076:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00e      	beq.n	800f09c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f07e:	20a8      	movs	r0, #168	@ 0xa8
 800f080:	f001 ffb4 	bl	8010fec <pvPortMalloc>
 800f084:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d003      	beq.n	800f094 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	697a      	ldr	r2, [r7, #20]
 800f090:	631a      	str	r2, [r3, #48]	@ 0x30
 800f092:	e005      	b.n	800f0a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f094:	6978      	ldr	r0, [r7, #20]
 800f096:	f002 f877 	bl	8011188 <vPortFree>
 800f09a:	e001      	b.n	800f0a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f09c:	2300      	movs	r3, #0
 800f09e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d017      	beq.n	800f0d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f0ae:	88fa      	ldrh	r2, [r7, #6]
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	9303      	str	r3, [sp, #12]
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	9302      	str	r3, [sp, #8]
 800f0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ba:	9301      	str	r3, [sp, #4]
 800f0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	68b9      	ldr	r1, [r7, #8]
 800f0c4:	68f8      	ldr	r0, [r7, #12]
 800f0c6:	f000 f80f 	bl	800f0e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f0ca:	69f8      	ldr	r0, [r7, #28]
 800f0cc:	f000 f8b4 	bl	800f238 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	61bb      	str	r3, [r7, #24]
 800f0d4:	e002      	b.n	800f0dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f0d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f0da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f0dc:	69bb      	ldr	r3, [r7, #24]
	}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3720      	adds	r7, #32
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
	...

0800f0e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b088      	sub	sp, #32
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	60b9      	str	r1, [r7, #8]
 800f0f2:	607a      	str	r2, [r7, #4]
 800f0f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	461a      	mov	r2, r3
 800f100:	21a5      	movs	r1, #165	@ 0xa5
 800f102:	f011 ff5b 	bl	8020fbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f10a:	6879      	ldr	r1, [r7, #4]
 800f10c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f110:	440b      	add	r3, r1
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	4413      	add	r3, r2
 800f116:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	f023 0307 	bic.w	r3, r3, #7
 800f11e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	f003 0307 	and.w	r3, r3, #7
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00b      	beq.n	800f142 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f12e:	f383 8811 	msr	BASEPRI, r3
 800f132:	f3bf 8f6f 	isb	sy
 800f136:	f3bf 8f4f 	dsb	sy
 800f13a:	617b      	str	r3, [r7, #20]
}
 800f13c:	bf00      	nop
 800f13e:	bf00      	nop
 800f140:	e7fd      	b.n	800f13e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d01f      	beq.n	800f188 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f148:	2300      	movs	r3, #0
 800f14a:	61fb      	str	r3, [r7, #28]
 800f14c:	e012      	b.n	800f174 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f14e:	68ba      	ldr	r2, [r7, #8]
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	4413      	add	r3, r2
 800f154:	7819      	ldrb	r1, [r3, #0]
 800f156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	4413      	add	r3, r2
 800f15c:	3334      	adds	r3, #52	@ 0x34
 800f15e:	460a      	mov	r2, r1
 800f160:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f162:	68ba      	ldr	r2, [r7, #8]
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	4413      	add	r3, r2
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d006      	beq.n	800f17c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	3301      	adds	r3, #1
 800f172:	61fb      	str	r3, [r7, #28]
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	2b0f      	cmp	r3, #15
 800f178:	d9e9      	bls.n	800f14e <prvInitialiseNewTask+0x66>
 800f17a:	e000      	b.n	800f17e <prvInitialiseNewTask+0x96>
			{
				break;
 800f17c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f180:	2200      	movs	r2, #0
 800f182:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f186:	e003      	b.n	800f190 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f18a:	2200      	movs	r2, #0
 800f18c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f192:	2b37      	cmp	r3, #55	@ 0x37
 800f194:	d901      	bls.n	800f19a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f196:	2337      	movs	r3, #55	@ 0x37
 800f198:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f19c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f19e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ae:	3304      	adds	r3, #4
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7fe ff49 	bl	800e048 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1b8:	3318      	adds	r3, #24
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fe ff44 	bl	800e048 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d8:	2200      	movs	r2, #0
 800f1da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e8:	3354      	adds	r3, #84	@ 0x54
 800f1ea:	224c      	movs	r2, #76	@ 0x4c
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f011 fee4 	bl	8020fbc <memset>
 800f1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f6:	4a0d      	ldr	r2, [pc, #52]	@ (800f22c <prvInitialiseNewTask+0x144>)
 800f1f8:	659a      	str	r2, [r3, #88]	@ 0x58
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fc:	4a0c      	ldr	r2, [pc, #48]	@ (800f230 <prvInitialiseNewTask+0x148>)
 800f1fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f202:	4a0c      	ldr	r2, [pc, #48]	@ (800f234 <prvInitialiseNewTask+0x14c>)
 800f204:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f206:	683a      	ldr	r2, [r7, #0]
 800f208:	68f9      	ldr	r1, [r7, #12]
 800f20a:	69b8      	ldr	r0, [r7, #24]
 800f20c:	f001 fc9a 	bl	8010b44 <pxPortInitialiseStack>
 800f210:	4602      	mov	r2, r0
 800f212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f214:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d002      	beq.n	800f222 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f21e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f220:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f222:	bf00      	nop
 800f224:	3720      	adds	r7, #32
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	24069634 	.word	0x24069634
 800f230:	2406969c 	.word	0x2406969c
 800f234:	24069704 	.word	0x24069704

0800f238 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f240:	f001 fdb2 	bl	8010da8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f244:	4b2d      	ldr	r3, [pc, #180]	@ (800f2fc <prvAddNewTaskToReadyList+0xc4>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	3301      	adds	r3, #1
 800f24a:	4a2c      	ldr	r2, [pc, #176]	@ (800f2fc <prvAddNewTaskToReadyList+0xc4>)
 800f24c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f24e:	4b2c      	ldr	r3, [pc, #176]	@ (800f300 <prvAddNewTaskToReadyList+0xc8>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d109      	bne.n	800f26a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f256:	4a2a      	ldr	r2, [pc, #168]	@ (800f300 <prvAddNewTaskToReadyList+0xc8>)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f25c:	4b27      	ldr	r3, [pc, #156]	@ (800f2fc <prvAddNewTaskToReadyList+0xc4>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2b01      	cmp	r3, #1
 800f262:	d110      	bne.n	800f286 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f264:	f000 fc56 	bl	800fb14 <prvInitialiseTaskLists>
 800f268:	e00d      	b.n	800f286 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f26a:	4b26      	ldr	r3, [pc, #152]	@ (800f304 <prvAddNewTaskToReadyList+0xcc>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d109      	bne.n	800f286 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f272:	4b23      	ldr	r3, [pc, #140]	@ (800f300 <prvAddNewTaskToReadyList+0xc8>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d802      	bhi.n	800f286 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f280:	4a1f      	ldr	r2, [pc, #124]	@ (800f300 <prvAddNewTaskToReadyList+0xc8>)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f286:	4b20      	ldr	r3, [pc, #128]	@ (800f308 <prvAddNewTaskToReadyList+0xd0>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	3301      	adds	r3, #1
 800f28c:	4a1e      	ldr	r2, [pc, #120]	@ (800f308 <prvAddNewTaskToReadyList+0xd0>)
 800f28e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f290:	4b1d      	ldr	r3, [pc, #116]	@ (800f308 <prvAddNewTaskToReadyList+0xd0>)
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f29c:	4b1b      	ldr	r3, [pc, #108]	@ (800f30c <prvAddNewTaskToReadyList+0xd4>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d903      	bls.n	800f2ac <prvAddNewTaskToReadyList+0x74>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2a8:	4a18      	ldr	r2, [pc, #96]	@ (800f30c <prvAddNewTaskToReadyList+0xd4>)
 800f2aa:	6013      	str	r3, [r2, #0]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2b0:	4613      	mov	r3, r2
 800f2b2:	009b      	lsls	r3, r3, #2
 800f2b4:	4413      	add	r3, r2
 800f2b6:	009b      	lsls	r3, r3, #2
 800f2b8:	4a15      	ldr	r2, [pc, #84]	@ (800f310 <prvAddNewTaskToReadyList+0xd8>)
 800f2ba:	441a      	add	r2, r3
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	3304      	adds	r3, #4
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	4610      	mov	r0, r2
 800f2c4:	f7fe fecd 	bl	800e062 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f2c8:	f001 fda0 	bl	8010e0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f2cc:	4b0d      	ldr	r3, [pc, #52]	@ (800f304 <prvAddNewTaskToReadyList+0xcc>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d00e      	beq.n	800f2f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f2d4:	4b0a      	ldr	r3, [pc, #40]	@ (800f300 <prvAddNewTaskToReadyList+0xc8>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d207      	bcs.n	800f2f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800f314 <prvAddNewTaskToReadyList+0xdc>)
 800f2e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2e8:	601a      	str	r2, [r3, #0]
 800f2ea:	f3bf 8f4f 	dsb	sy
 800f2ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f2f2:	bf00      	nop
 800f2f4:	3708      	adds	r7, #8
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	24033a4c 	.word	0x24033a4c
 800f300:	24033578 	.word	0x24033578
 800f304:	24033a58 	.word	0x24033a58
 800f308:	24033a68 	.word	0x24033a68
 800f30c:	24033a54 	.word	0x24033a54
 800f310:	2403357c 	.word	0x2403357c
 800f314:	e000ed04 	.word	0xe000ed04

0800f318 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f320:	2300      	movs	r3, #0
 800f322:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d018      	beq.n	800f35c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f32a:	4b14      	ldr	r3, [pc, #80]	@ (800f37c <vTaskDelay+0x64>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00b      	beq.n	800f34a <vTaskDelay+0x32>
	__asm volatile
 800f332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f336:	f383 8811 	msr	BASEPRI, r3
 800f33a:	f3bf 8f6f 	isb	sy
 800f33e:	f3bf 8f4f 	dsb	sy
 800f342:	60bb      	str	r3, [r7, #8]
}
 800f344:	bf00      	nop
 800f346:	bf00      	nop
 800f348:	e7fd      	b.n	800f346 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f34a:	f000 f88b 	bl	800f464 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f34e:	2100      	movs	r1, #0
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f001 f849 	bl	80103e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f356:	f000 f893 	bl	800f480 <xTaskResumeAll>
 800f35a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d107      	bne.n	800f372 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f362:	4b07      	ldr	r3, [pc, #28]	@ (800f380 <vTaskDelay+0x68>)
 800f364:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f368:	601a      	str	r2, [r3, #0]
 800f36a:	f3bf 8f4f 	dsb	sy
 800f36e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f372:	bf00      	nop
 800f374:	3710      	adds	r7, #16
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	24033a74 	.word	0x24033a74
 800f380:	e000ed04 	.word	0xe000ed04

0800f384 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b08a      	sub	sp, #40	@ 0x28
 800f388:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f38a:	2300      	movs	r3, #0
 800f38c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f38e:	2300      	movs	r3, #0
 800f390:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f392:	463a      	mov	r2, r7
 800f394:	1d39      	adds	r1, r7, #4
 800f396:	f107 0308 	add.w	r3, r7, #8
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fe fe00 	bl	800dfa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f3a0:	6839      	ldr	r1, [r7, #0]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	68ba      	ldr	r2, [r7, #8]
 800f3a6:	9202      	str	r2, [sp, #8]
 800f3a8:	9301      	str	r3, [sp, #4]
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	9300      	str	r3, [sp, #0]
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	460a      	mov	r2, r1
 800f3b2:	4924      	ldr	r1, [pc, #144]	@ (800f444 <vTaskStartScheduler+0xc0>)
 800f3b4:	4824      	ldr	r0, [pc, #144]	@ (800f448 <vTaskStartScheduler+0xc4>)
 800f3b6:	f7ff fdf1 	bl	800ef9c <xTaskCreateStatic>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	4a23      	ldr	r2, [pc, #140]	@ (800f44c <vTaskStartScheduler+0xc8>)
 800f3be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f3c0:	4b22      	ldr	r3, [pc, #136]	@ (800f44c <vTaskStartScheduler+0xc8>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d002      	beq.n	800f3ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	617b      	str	r3, [r7, #20]
 800f3cc:	e001      	b.n	800f3d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d102      	bne.n	800f3de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f3d8:	f001 f85a 	bl	8010490 <xTimerCreateTimerTask>
 800f3dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d11b      	bne.n	800f41c <vTaskStartScheduler+0x98>
	__asm volatile
 800f3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3e8:	f383 8811 	msr	BASEPRI, r3
 800f3ec:	f3bf 8f6f 	isb	sy
 800f3f0:	f3bf 8f4f 	dsb	sy
 800f3f4:	613b      	str	r3, [r7, #16]
}
 800f3f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f3f8:	4b15      	ldr	r3, [pc, #84]	@ (800f450 <vTaskStartScheduler+0xcc>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	3354      	adds	r3, #84	@ 0x54
 800f3fe:	4a15      	ldr	r2, [pc, #84]	@ (800f454 <vTaskStartScheduler+0xd0>)
 800f400:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f402:	4b15      	ldr	r3, [pc, #84]	@ (800f458 <vTaskStartScheduler+0xd4>)
 800f404:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f408:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f40a:	4b14      	ldr	r3, [pc, #80]	@ (800f45c <vTaskStartScheduler+0xd8>)
 800f40c:	2201      	movs	r2, #1
 800f40e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f410:	4b13      	ldr	r3, [pc, #76]	@ (800f460 <vTaskStartScheduler+0xdc>)
 800f412:	2200      	movs	r2, #0
 800f414:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f416:	f001 fc23 	bl	8010c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f41a:	e00f      	b.n	800f43c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f422:	d10b      	bne.n	800f43c <vTaskStartScheduler+0xb8>
	__asm volatile
 800f424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f428:	f383 8811 	msr	BASEPRI, r3
 800f42c:	f3bf 8f6f 	isb	sy
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	60fb      	str	r3, [r7, #12]
}
 800f436:	bf00      	nop
 800f438:	bf00      	nop
 800f43a:	e7fd      	b.n	800f438 <vTaskStartScheduler+0xb4>
}
 800f43c:	bf00      	nop
 800f43e:	3718      	adds	r7, #24
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	08022128 	.word	0x08022128
 800f448:	0800fae5 	.word	0x0800fae5
 800f44c:	24033a70 	.word	0x24033a70
 800f450:	24033578 	.word	0x24033578
 800f454:	240013a0 	.word	0x240013a0
 800f458:	24033a6c 	.word	0x24033a6c
 800f45c:	24033a58 	.word	0x24033a58
 800f460:	24033a50 	.word	0x24033a50

0800f464 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f464:	b480      	push	{r7}
 800f466:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f468:	4b04      	ldr	r3, [pc, #16]	@ (800f47c <vTaskSuspendAll+0x18>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	3301      	adds	r3, #1
 800f46e:	4a03      	ldr	r2, [pc, #12]	@ (800f47c <vTaskSuspendAll+0x18>)
 800f470:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f472:	bf00      	nop
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr
 800f47c:	24033a74 	.word	0x24033a74

0800f480 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f486:	2300      	movs	r3, #0
 800f488:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f48a:	2300      	movs	r3, #0
 800f48c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f48e:	4b42      	ldr	r3, [pc, #264]	@ (800f598 <xTaskResumeAll+0x118>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d10b      	bne.n	800f4ae <xTaskResumeAll+0x2e>
	__asm volatile
 800f496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f49a:	f383 8811 	msr	BASEPRI, r3
 800f49e:	f3bf 8f6f 	isb	sy
 800f4a2:	f3bf 8f4f 	dsb	sy
 800f4a6:	603b      	str	r3, [r7, #0]
}
 800f4a8:	bf00      	nop
 800f4aa:	bf00      	nop
 800f4ac:	e7fd      	b.n	800f4aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f4ae:	f001 fc7b 	bl	8010da8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f4b2:	4b39      	ldr	r3, [pc, #228]	@ (800f598 <xTaskResumeAll+0x118>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	4a37      	ldr	r2, [pc, #220]	@ (800f598 <xTaskResumeAll+0x118>)
 800f4ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4bc:	4b36      	ldr	r3, [pc, #216]	@ (800f598 <xTaskResumeAll+0x118>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d162      	bne.n	800f58a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f4c4:	4b35      	ldr	r3, [pc, #212]	@ (800f59c <xTaskResumeAll+0x11c>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d05e      	beq.n	800f58a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f4cc:	e02f      	b.n	800f52e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4ce:	4b34      	ldr	r3, [pc, #208]	@ (800f5a0 <xTaskResumeAll+0x120>)
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	68db      	ldr	r3, [r3, #12]
 800f4d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	3318      	adds	r3, #24
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fe fe1e 	bl	800e11c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	3304      	adds	r3, #4
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fe fe19 	bl	800e11c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4ee:	4b2d      	ldr	r3, [pc, #180]	@ (800f5a4 <xTaskResumeAll+0x124>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d903      	bls.n	800f4fe <xTaskResumeAll+0x7e>
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4fa:	4a2a      	ldr	r2, [pc, #168]	@ (800f5a4 <xTaskResumeAll+0x124>)
 800f4fc:	6013      	str	r3, [r2, #0]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f502:	4613      	mov	r3, r2
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	4413      	add	r3, r2
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	4a27      	ldr	r2, [pc, #156]	@ (800f5a8 <xTaskResumeAll+0x128>)
 800f50c:	441a      	add	r2, r3
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	3304      	adds	r3, #4
 800f512:	4619      	mov	r1, r3
 800f514:	4610      	mov	r0, r2
 800f516:	f7fe fda4 	bl	800e062 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f51e:	4b23      	ldr	r3, [pc, #140]	@ (800f5ac <xTaskResumeAll+0x12c>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f524:	429a      	cmp	r2, r3
 800f526:	d302      	bcc.n	800f52e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f528:	4b21      	ldr	r3, [pc, #132]	@ (800f5b0 <xTaskResumeAll+0x130>)
 800f52a:	2201      	movs	r2, #1
 800f52c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f52e:	4b1c      	ldr	r3, [pc, #112]	@ (800f5a0 <xTaskResumeAll+0x120>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d1cb      	bne.n	800f4ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d001      	beq.n	800f540 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f53c:	f000 fb8e 	bl	800fc5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f540:	4b1c      	ldr	r3, [pc, #112]	@ (800f5b4 <xTaskResumeAll+0x134>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d010      	beq.n	800f56e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f54c:	f000 f846 	bl	800f5dc <xTaskIncrementTick>
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	d002      	beq.n	800f55c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f556:	4b16      	ldr	r3, [pc, #88]	@ (800f5b0 <xTaskResumeAll+0x130>)
 800f558:	2201      	movs	r2, #1
 800f55a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	3b01      	subs	r3, #1
 800f560:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d1f1      	bne.n	800f54c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f568:	4b12      	ldr	r3, [pc, #72]	@ (800f5b4 <xTaskResumeAll+0x134>)
 800f56a:	2200      	movs	r2, #0
 800f56c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f56e:	4b10      	ldr	r3, [pc, #64]	@ (800f5b0 <xTaskResumeAll+0x130>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d009      	beq.n	800f58a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f576:	2301      	movs	r3, #1
 800f578:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f57a:	4b0f      	ldr	r3, [pc, #60]	@ (800f5b8 <xTaskResumeAll+0x138>)
 800f57c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f580:	601a      	str	r2, [r3, #0]
 800f582:	f3bf 8f4f 	dsb	sy
 800f586:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f58a:	f001 fc3f 	bl	8010e0c <vPortExitCritical>

	return xAlreadyYielded;
 800f58e:	68bb      	ldr	r3, [r7, #8]
}
 800f590:	4618      	mov	r0, r3
 800f592:	3710      	adds	r7, #16
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	24033a74 	.word	0x24033a74
 800f59c:	24033a4c 	.word	0x24033a4c
 800f5a0:	24033a0c 	.word	0x24033a0c
 800f5a4:	24033a54 	.word	0x24033a54
 800f5a8:	2403357c 	.word	0x2403357c
 800f5ac:	24033578 	.word	0x24033578
 800f5b0:	24033a60 	.word	0x24033a60
 800f5b4:	24033a5c 	.word	0x24033a5c
 800f5b8:	e000ed04 	.word	0xe000ed04

0800f5bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b083      	sub	sp, #12
 800f5c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f5c2:	4b05      	ldr	r3, [pc, #20]	@ (800f5d8 <xTaskGetTickCount+0x1c>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f5c8:	687b      	ldr	r3, [r7, #4]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	370c      	adds	r7, #12
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr
 800f5d6:	bf00      	nop
 800f5d8:	24033a50 	.word	0x24033a50

0800f5dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b086      	sub	sp, #24
 800f5e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f5e6:	4b4f      	ldr	r3, [pc, #316]	@ (800f724 <xTaskIncrementTick+0x148>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	f040 8090 	bne.w	800f710 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f5f0:	4b4d      	ldr	r3, [pc, #308]	@ (800f728 <xTaskIncrementTick+0x14c>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f5f8:	4a4b      	ldr	r2, [pc, #300]	@ (800f728 <xTaskIncrementTick+0x14c>)
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d121      	bne.n	800f648 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f604:	4b49      	ldr	r3, [pc, #292]	@ (800f72c <xTaskIncrementTick+0x150>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00b      	beq.n	800f626 <xTaskIncrementTick+0x4a>
	__asm volatile
 800f60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f612:	f383 8811 	msr	BASEPRI, r3
 800f616:	f3bf 8f6f 	isb	sy
 800f61a:	f3bf 8f4f 	dsb	sy
 800f61e:	603b      	str	r3, [r7, #0]
}
 800f620:	bf00      	nop
 800f622:	bf00      	nop
 800f624:	e7fd      	b.n	800f622 <xTaskIncrementTick+0x46>
 800f626:	4b41      	ldr	r3, [pc, #260]	@ (800f72c <xTaskIncrementTick+0x150>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	60fb      	str	r3, [r7, #12]
 800f62c:	4b40      	ldr	r3, [pc, #256]	@ (800f730 <xTaskIncrementTick+0x154>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	4a3e      	ldr	r2, [pc, #248]	@ (800f72c <xTaskIncrementTick+0x150>)
 800f632:	6013      	str	r3, [r2, #0]
 800f634:	4a3e      	ldr	r2, [pc, #248]	@ (800f730 <xTaskIncrementTick+0x154>)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6013      	str	r3, [r2, #0]
 800f63a:	4b3e      	ldr	r3, [pc, #248]	@ (800f734 <xTaskIncrementTick+0x158>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	3301      	adds	r3, #1
 800f640:	4a3c      	ldr	r2, [pc, #240]	@ (800f734 <xTaskIncrementTick+0x158>)
 800f642:	6013      	str	r3, [r2, #0]
 800f644:	f000 fb0a 	bl	800fc5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f648:	4b3b      	ldr	r3, [pc, #236]	@ (800f738 <xTaskIncrementTick+0x15c>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	693a      	ldr	r2, [r7, #16]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d349      	bcc.n	800f6e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f652:	4b36      	ldr	r3, [pc, #216]	@ (800f72c <xTaskIncrementTick+0x150>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d104      	bne.n	800f666 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f65c:	4b36      	ldr	r3, [pc, #216]	@ (800f738 <xTaskIncrementTick+0x15c>)
 800f65e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f662:	601a      	str	r2, [r3, #0]
					break;
 800f664:	e03f      	b.n	800f6e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f666:	4b31      	ldr	r3, [pc, #196]	@ (800f72c <xTaskIncrementTick+0x150>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f676:	693a      	ldr	r2, [r7, #16]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d203      	bcs.n	800f686 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f67e:	4a2e      	ldr	r2, [pc, #184]	@ (800f738 <xTaskIncrementTick+0x15c>)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f684:	e02f      	b.n	800f6e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	3304      	adds	r3, #4
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fe fd46 	bl	800e11c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f694:	2b00      	cmp	r3, #0
 800f696:	d004      	beq.n	800f6a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	3318      	adds	r3, #24
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7fe fd3d 	bl	800e11c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6a6:	4b25      	ldr	r3, [pc, #148]	@ (800f73c <xTaskIncrementTick+0x160>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d903      	bls.n	800f6b6 <xTaskIncrementTick+0xda>
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6b2:	4a22      	ldr	r2, [pc, #136]	@ (800f73c <xTaskIncrementTick+0x160>)
 800f6b4:	6013      	str	r3, [r2, #0]
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6ba:	4613      	mov	r3, r2
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	4413      	add	r3, r2
 800f6c0:	009b      	lsls	r3, r3, #2
 800f6c2:	4a1f      	ldr	r2, [pc, #124]	@ (800f740 <xTaskIncrementTick+0x164>)
 800f6c4:	441a      	add	r2, r3
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	3304      	adds	r3, #4
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	4610      	mov	r0, r2
 800f6ce:	f7fe fcc8 	bl	800e062 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6d6:	4b1b      	ldr	r3, [pc, #108]	@ (800f744 <xTaskIncrementTick+0x168>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d3b8      	bcc.n	800f652 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6e4:	e7b5      	b.n	800f652 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f6e6:	4b17      	ldr	r3, [pc, #92]	@ (800f744 <xTaskIncrementTick+0x168>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6ec:	4914      	ldr	r1, [pc, #80]	@ (800f740 <xTaskIncrementTick+0x164>)
 800f6ee:	4613      	mov	r3, r2
 800f6f0:	009b      	lsls	r3, r3, #2
 800f6f2:	4413      	add	r3, r2
 800f6f4:	009b      	lsls	r3, r3, #2
 800f6f6:	440b      	add	r3, r1
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d901      	bls.n	800f702 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f6fe:	2301      	movs	r3, #1
 800f700:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f702:	4b11      	ldr	r3, [pc, #68]	@ (800f748 <xTaskIncrementTick+0x16c>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d007      	beq.n	800f71a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f70a:	2301      	movs	r3, #1
 800f70c:	617b      	str	r3, [r7, #20]
 800f70e:	e004      	b.n	800f71a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f710:	4b0e      	ldr	r3, [pc, #56]	@ (800f74c <xTaskIncrementTick+0x170>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	3301      	adds	r3, #1
 800f716:	4a0d      	ldr	r2, [pc, #52]	@ (800f74c <xTaskIncrementTick+0x170>)
 800f718:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f71a:	697b      	ldr	r3, [r7, #20]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3718      	adds	r7, #24
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	24033a74 	.word	0x24033a74
 800f728:	24033a50 	.word	0x24033a50
 800f72c:	24033a04 	.word	0x24033a04
 800f730:	24033a08 	.word	0x24033a08
 800f734:	24033a64 	.word	0x24033a64
 800f738:	24033a6c 	.word	0x24033a6c
 800f73c:	24033a54 	.word	0x24033a54
 800f740:	2403357c 	.word	0x2403357c
 800f744:	24033578 	.word	0x24033578
 800f748:	24033a60 	.word	0x24033a60
 800f74c:	24033a5c 	.word	0x24033a5c

0800f750 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f750:	b480      	push	{r7}
 800f752:	b085      	sub	sp, #20
 800f754:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f756:	4b2b      	ldr	r3, [pc, #172]	@ (800f804 <vTaskSwitchContext+0xb4>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d003      	beq.n	800f766 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f75e:	4b2a      	ldr	r3, [pc, #168]	@ (800f808 <vTaskSwitchContext+0xb8>)
 800f760:	2201      	movs	r2, #1
 800f762:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f764:	e047      	b.n	800f7f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f766:	4b28      	ldr	r3, [pc, #160]	@ (800f808 <vTaskSwitchContext+0xb8>)
 800f768:	2200      	movs	r2, #0
 800f76a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f76c:	4b27      	ldr	r3, [pc, #156]	@ (800f80c <vTaskSwitchContext+0xbc>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	60fb      	str	r3, [r7, #12]
 800f772:	e011      	b.n	800f798 <vTaskSwitchContext+0x48>
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d10b      	bne.n	800f792 <vTaskSwitchContext+0x42>
	__asm volatile
 800f77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f77e:	f383 8811 	msr	BASEPRI, r3
 800f782:	f3bf 8f6f 	isb	sy
 800f786:	f3bf 8f4f 	dsb	sy
 800f78a:	607b      	str	r3, [r7, #4]
}
 800f78c:	bf00      	nop
 800f78e:	bf00      	nop
 800f790:	e7fd      	b.n	800f78e <vTaskSwitchContext+0x3e>
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	3b01      	subs	r3, #1
 800f796:	60fb      	str	r3, [r7, #12]
 800f798:	491d      	ldr	r1, [pc, #116]	@ (800f810 <vTaskSwitchContext+0xc0>)
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	4613      	mov	r3, r2
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	4413      	add	r3, r2
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	440b      	add	r3, r1
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d0e3      	beq.n	800f774 <vTaskSwitchContext+0x24>
 800f7ac:	68fa      	ldr	r2, [r7, #12]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	009b      	lsls	r3, r3, #2
 800f7b2:	4413      	add	r3, r2
 800f7b4:	009b      	lsls	r3, r3, #2
 800f7b6:	4a16      	ldr	r2, [pc, #88]	@ (800f810 <vTaskSwitchContext+0xc0>)
 800f7b8:	4413      	add	r3, r2
 800f7ba:	60bb      	str	r3, [r7, #8]
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	685a      	ldr	r2, [r3, #4]
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	605a      	str	r2, [r3, #4]
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	685a      	ldr	r2, [r3, #4]
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	3308      	adds	r3, #8
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d104      	bne.n	800f7dc <vTaskSwitchContext+0x8c>
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	685a      	ldr	r2, [r3, #4]
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	605a      	str	r2, [r3, #4]
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	68db      	ldr	r3, [r3, #12]
 800f7e2:	4a0c      	ldr	r2, [pc, #48]	@ (800f814 <vTaskSwitchContext+0xc4>)
 800f7e4:	6013      	str	r3, [r2, #0]
 800f7e6:	4a09      	ldr	r2, [pc, #36]	@ (800f80c <vTaskSwitchContext+0xbc>)
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f7ec:	4b09      	ldr	r3, [pc, #36]	@ (800f814 <vTaskSwitchContext+0xc4>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	3354      	adds	r3, #84	@ 0x54
 800f7f2:	4a09      	ldr	r2, [pc, #36]	@ (800f818 <vTaskSwitchContext+0xc8>)
 800f7f4:	6013      	str	r3, [r2, #0]
}
 800f7f6:	bf00      	nop
 800f7f8:	3714      	adds	r7, #20
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	24033a74 	.word	0x24033a74
 800f808:	24033a60 	.word	0x24033a60
 800f80c:	24033a54 	.word	0x24033a54
 800f810:	2403357c 	.word	0x2403357c
 800f814:	24033578 	.word	0x24033578
 800f818:	240013a0 	.word	0x240013a0

0800f81c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10b      	bne.n	800f844 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f830:	f383 8811 	msr	BASEPRI, r3
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	f3bf 8f4f 	dsb	sy
 800f83c:	60fb      	str	r3, [r7, #12]
}
 800f83e:	bf00      	nop
 800f840:	bf00      	nop
 800f842:	e7fd      	b.n	800f840 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f844:	4b07      	ldr	r3, [pc, #28]	@ (800f864 <vTaskPlaceOnEventList+0x48>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	3318      	adds	r3, #24
 800f84a:	4619      	mov	r1, r3
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7fe fc2c 	bl	800e0aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f852:	2101      	movs	r1, #1
 800f854:	6838      	ldr	r0, [r7, #0]
 800f856:	f000 fdc7 	bl	80103e8 <prvAddCurrentTaskToDelayedList>
}
 800f85a:	bf00      	nop
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	24033578 	.word	0x24033578

0800f868 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b086      	sub	sp, #24
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d10b      	bne.n	800f892 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f87e:	f383 8811 	msr	BASEPRI, r3
 800f882:	f3bf 8f6f 	isb	sy
 800f886:	f3bf 8f4f 	dsb	sy
 800f88a:	617b      	str	r3, [r7, #20]
}
 800f88c:	bf00      	nop
 800f88e:	bf00      	nop
 800f890:	e7fd      	b.n	800f88e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f892:	4b0a      	ldr	r3, [pc, #40]	@ (800f8bc <vTaskPlaceOnEventListRestricted+0x54>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	3318      	adds	r3, #24
 800f898:	4619      	mov	r1, r3
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f7fe fbe1 	bl	800e062 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d002      	beq.n	800f8ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f8a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f8aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f8ac:	6879      	ldr	r1, [r7, #4]
 800f8ae:	68b8      	ldr	r0, [r7, #8]
 800f8b0:	f000 fd9a 	bl	80103e8 <prvAddCurrentTaskToDelayedList>
	}
 800f8b4:	bf00      	nop
 800f8b6:	3718      	adds	r7, #24
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	24033578 	.word	0x24033578

0800f8c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b086      	sub	sp, #24
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	68db      	ldr	r3, [r3, #12]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d10b      	bne.n	800f8ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8da:	f383 8811 	msr	BASEPRI, r3
 800f8de:	f3bf 8f6f 	isb	sy
 800f8e2:	f3bf 8f4f 	dsb	sy
 800f8e6:	60fb      	str	r3, [r7, #12]
}
 800f8e8:	bf00      	nop
 800f8ea:	bf00      	nop
 800f8ec:	e7fd      	b.n	800f8ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	3318      	adds	r3, #24
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fe fc12 	bl	800e11c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8f8:	4b1d      	ldr	r3, [pc, #116]	@ (800f970 <xTaskRemoveFromEventList+0xb0>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d11d      	bne.n	800f93c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	3304      	adds	r3, #4
 800f904:	4618      	mov	r0, r3
 800f906:	f7fe fc09 	bl	800e11c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f90e:	4b19      	ldr	r3, [pc, #100]	@ (800f974 <xTaskRemoveFromEventList+0xb4>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	429a      	cmp	r2, r3
 800f914:	d903      	bls.n	800f91e <xTaskRemoveFromEventList+0x5e>
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f91a:	4a16      	ldr	r2, [pc, #88]	@ (800f974 <xTaskRemoveFromEventList+0xb4>)
 800f91c:	6013      	str	r3, [r2, #0]
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f922:	4613      	mov	r3, r2
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	4413      	add	r3, r2
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	4a13      	ldr	r2, [pc, #76]	@ (800f978 <xTaskRemoveFromEventList+0xb8>)
 800f92c:	441a      	add	r2, r3
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	3304      	adds	r3, #4
 800f932:	4619      	mov	r1, r3
 800f934:	4610      	mov	r0, r2
 800f936:	f7fe fb94 	bl	800e062 <vListInsertEnd>
 800f93a:	e005      	b.n	800f948 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	3318      	adds	r3, #24
 800f940:	4619      	mov	r1, r3
 800f942:	480e      	ldr	r0, [pc, #56]	@ (800f97c <xTaskRemoveFromEventList+0xbc>)
 800f944:	f7fe fb8d 	bl	800e062 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f94c:	4b0c      	ldr	r3, [pc, #48]	@ (800f980 <xTaskRemoveFromEventList+0xc0>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f952:	429a      	cmp	r2, r3
 800f954:	d905      	bls.n	800f962 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f956:	2301      	movs	r3, #1
 800f958:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f95a:	4b0a      	ldr	r3, [pc, #40]	@ (800f984 <xTaskRemoveFromEventList+0xc4>)
 800f95c:	2201      	movs	r2, #1
 800f95e:	601a      	str	r2, [r3, #0]
 800f960:	e001      	b.n	800f966 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f962:	2300      	movs	r3, #0
 800f964:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f966:	697b      	ldr	r3, [r7, #20]
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3718      	adds	r7, #24
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	24033a74 	.word	0x24033a74
 800f974:	24033a54 	.word	0x24033a54
 800f978:	2403357c 	.word	0x2403357c
 800f97c:	24033a0c 	.word	0x24033a0c
 800f980:	24033578 	.word	0x24033578
 800f984:	24033a60 	.word	0x24033a60

0800f988 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d10b      	bne.n	800f9ae <vTaskSetTimeOutState+0x26>
	__asm volatile
 800f996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f99a:	f383 8811 	msr	BASEPRI, r3
 800f99e:	f3bf 8f6f 	isb	sy
 800f9a2:	f3bf 8f4f 	dsb	sy
 800f9a6:	60fb      	str	r3, [r7, #12]
}
 800f9a8:	bf00      	nop
 800f9aa:	bf00      	nop
 800f9ac:	e7fd      	b.n	800f9aa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800f9ae:	f001 f9fb 	bl	8010da8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f9b2:	4b07      	ldr	r3, [pc, #28]	@ (800f9d0 <vTaskSetTimeOutState+0x48>)
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f9ba:	4b06      	ldr	r3, [pc, #24]	@ (800f9d4 <vTaskSetTimeOutState+0x4c>)
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f9c2:	f001 fa23 	bl	8010e0c <vPortExitCritical>
}
 800f9c6:	bf00      	nop
 800f9c8:	3710      	adds	r7, #16
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	24033a64 	.word	0x24033a64
 800f9d4:	24033a50 	.word	0x24033a50

0800f9d8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f9e0:	4b06      	ldr	r3, [pc, #24]	@ (800f9fc <vTaskInternalSetTimeOutState+0x24>)
 800f9e2:	681a      	ldr	r2, [r3, #0]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f9e8:	4b05      	ldr	r3, [pc, #20]	@ (800fa00 <vTaskInternalSetTimeOutState+0x28>)
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	605a      	str	r2, [r3, #4]
}
 800f9f0:	bf00      	nop
 800f9f2:	370c      	adds	r7, #12
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr
 800f9fc:	24033a64 	.word	0x24033a64
 800fa00:	24033a50 	.word	0x24033a50

0800fa04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b088      	sub	sp, #32
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d10b      	bne.n	800fa2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800fa14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa18:	f383 8811 	msr	BASEPRI, r3
 800fa1c:	f3bf 8f6f 	isb	sy
 800fa20:	f3bf 8f4f 	dsb	sy
 800fa24:	613b      	str	r3, [r7, #16]
}
 800fa26:	bf00      	nop
 800fa28:	bf00      	nop
 800fa2a:	e7fd      	b.n	800fa28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d10b      	bne.n	800fa4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800fa32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa36:	f383 8811 	msr	BASEPRI, r3
 800fa3a:	f3bf 8f6f 	isb	sy
 800fa3e:	f3bf 8f4f 	dsb	sy
 800fa42:	60fb      	str	r3, [r7, #12]
}
 800fa44:	bf00      	nop
 800fa46:	bf00      	nop
 800fa48:	e7fd      	b.n	800fa46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800fa4a:	f001 f9ad 	bl	8010da8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fa4e:	4b1d      	ldr	r3, [pc, #116]	@ (800fac4 <xTaskCheckForTimeOut+0xc0>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	69ba      	ldr	r2, [r7, #24]
 800fa5a:	1ad3      	subs	r3, r2, r3
 800fa5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa66:	d102      	bne.n	800fa6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	61fb      	str	r3, [r7, #28]
 800fa6c:	e023      	b.n	800fab6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	4b15      	ldr	r3, [pc, #84]	@ (800fac8 <xTaskCheckForTimeOut+0xc4>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d007      	beq.n	800fa8a <xTaskCheckForTimeOut+0x86>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	69ba      	ldr	r2, [r7, #24]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d302      	bcc.n	800fa8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fa84:	2301      	movs	r3, #1
 800fa86:	61fb      	str	r3, [r7, #28]
 800fa88:	e015      	b.n	800fab6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	697a      	ldr	r2, [r7, #20]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d20b      	bcs.n	800faac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	1ad2      	subs	r2, r2, r3
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7ff ff99 	bl	800f9d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800faa6:	2300      	movs	r3, #0
 800faa8:	61fb      	str	r3, [r7, #28]
 800faaa:	e004      	b.n	800fab6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	2200      	movs	r2, #0
 800fab0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fab2:	2301      	movs	r3, #1
 800fab4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fab6:	f001 f9a9 	bl	8010e0c <vPortExitCritical>

	return xReturn;
 800faba:	69fb      	ldr	r3, [r7, #28]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3720      	adds	r7, #32
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	24033a50 	.word	0x24033a50
 800fac8:	24033a64 	.word	0x24033a64

0800facc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800facc:	b480      	push	{r7}
 800face:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fad0:	4b03      	ldr	r3, [pc, #12]	@ (800fae0 <vTaskMissedYield+0x14>)
 800fad2:	2201      	movs	r2, #1
 800fad4:	601a      	str	r2, [r3, #0]
}
 800fad6:	bf00      	nop
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr
 800fae0:	24033a60 	.word	0x24033a60

0800fae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800faec:	f000 f852 	bl	800fb94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800faf0:	4b06      	ldr	r3, [pc, #24]	@ (800fb0c <prvIdleTask+0x28>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d9f9      	bls.n	800faec <prvIdleTask+0x8>
			{
				taskYIELD();
 800faf8:	4b05      	ldr	r3, [pc, #20]	@ (800fb10 <prvIdleTask+0x2c>)
 800fafa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fafe:	601a      	str	r2, [r3, #0]
 800fb00:	f3bf 8f4f 	dsb	sy
 800fb04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fb08:	e7f0      	b.n	800faec <prvIdleTask+0x8>
 800fb0a:	bf00      	nop
 800fb0c:	2403357c 	.word	0x2403357c
 800fb10:	e000ed04 	.word	0xe000ed04

0800fb14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	607b      	str	r3, [r7, #4]
 800fb1e:	e00c      	b.n	800fb3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fb20:	687a      	ldr	r2, [r7, #4]
 800fb22:	4613      	mov	r3, r2
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	4413      	add	r3, r2
 800fb28:	009b      	lsls	r3, r3, #2
 800fb2a:	4a12      	ldr	r2, [pc, #72]	@ (800fb74 <prvInitialiseTaskLists+0x60>)
 800fb2c:	4413      	add	r3, r2
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fe fa6a 	bl	800e008 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	3301      	adds	r3, #1
 800fb38:	607b      	str	r3, [r7, #4]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2b37      	cmp	r3, #55	@ 0x37
 800fb3e:	d9ef      	bls.n	800fb20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fb40:	480d      	ldr	r0, [pc, #52]	@ (800fb78 <prvInitialiseTaskLists+0x64>)
 800fb42:	f7fe fa61 	bl	800e008 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fb46:	480d      	ldr	r0, [pc, #52]	@ (800fb7c <prvInitialiseTaskLists+0x68>)
 800fb48:	f7fe fa5e 	bl	800e008 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fb4c:	480c      	ldr	r0, [pc, #48]	@ (800fb80 <prvInitialiseTaskLists+0x6c>)
 800fb4e:	f7fe fa5b 	bl	800e008 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fb52:	480c      	ldr	r0, [pc, #48]	@ (800fb84 <prvInitialiseTaskLists+0x70>)
 800fb54:	f7fe fa58 	bl	800e008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fb58:	480b      	ldr	r0, [pc, #44]	@ (800fb88 <prvInitialiseTaskLists+0x74>)
 800fb5a:	f7fe fa55 	bl	800e008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fb5e:	4b0b      	ldr	r3, [pc, #44]	@ (800fb8c <prvInitialiseTaskLists+0x78>)
 800fb60:	4a05      	ldr	r2, [pc, #20]	@ (800fb78 <prvInitialiseTaskLists+0x64>)
 800fb62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fb64:	4b0a      	ldr	r3, [pc, #40]	@ (800fb90 <prvInitialiseTaskLists+0x7c>)
 800fb66:	4a05      	ldr	r2, [pc, #20]	@ (800fb7c <prvInitialiseTaskLists+0x68>)
 800fb68:	601a      	str	r2, [r3, #0]
}
 800fb6a:	bf00      	nop
 800fb6c:	3708      	adds	r7, #8
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}
 800fb72:	bf00      	nop
 800fb74:	2403357c 	.word	0x2403357c
 800fb78:	240339dc 	.word	0x240339dc
 800fb7c:	240339f0 	.word	0x240339f0
 800fb80:	24033a0c 	.word	0x24033a0c
 800fb84:	24033a20 	.word	0x24033a20
 800fb88:	24033a38 	.word	0x24033a38
 800fb8c:	24033a04 	.word	0x24033a04
 800fb90:	24033a08 	.word	0x24033a08

0800fb94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb9a:	e019      	b.n	800fbd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb9c:	f001 f904 	bl	8010da8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fba0:	4b10      	ldr	r3, [pc, #64]	@ (800fbe4 <prvCheckTasksWaitingTermination+0x50>)
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	3304      	adds	r3, #4
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fe fab5 	bl	800e11c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fbb2:	4b0d      	ldr	r3, [pc, #52]	@ (800fbe8 <prvCheckTasksWaitingTermination+0x54>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	4a0b      	ldr	r2, [pc, #44]	@ (800fbe8 <prvCheckTasksWaitingTermination+0x54>)
 800fbba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fbbc:	4b0b      	ldr	r3, [pc, #44]	@ (800fbec <prvCheckTasksWaitingTermination+0x58>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	3b01      	subs	r3, #1
 800fbc2:	4a0a      	ldr	r2, [pc, #40]	@ (800fbec <prvCheckTasksWaitingTermination+0x58>)
 800fbc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fbc6:	f001 f921 	bl	8010e0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 f810 	bl	800fbf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fbd0:	4b06      	ldr	r3, [pc, #24]	@ (800fbec <prvCheckTasksWaitingTermination+0x58>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d1e1      	bne.n	800fb9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fbd8:	bf00      	nop
 800fbda:	bf00      	nop
 800fbdc:	3708      	adds	r7, #8
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	24033a20 	.word	0x24033a20
 800fbe8:	24033a4c 	.word	0x24033a4c
 800fbec:	24033a34 	.word	0x24033a34

0800fbf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b084      	sub	sp, #16
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	3354      	adds	r3, #84	@ 0x54
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f011 fa2b 	bl	8021058 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d108      	bne.n	800fc1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc10:	4618      	mov	r0, r3
 800fc12:	f001 fab9 	bl	8011188 <vPortFree>
				vPortFree( pxTCB );
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f001 fab6 	bl	8011188 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fc1c:	e019      	b.n	800fc52 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d103      	bne.n	800fc30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f001 faad 	bl	8011188 <vPortFree>
	}
 800fc2e:	e010      	b.n	800fc52 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fc36:	2b02      	cmp	r3, #2
 800fc38:	d00b      	beq.n	800fc52 <prvDeleteTCB+0x62>
	__asm volatile
 800fc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc3e:	f383 8811 	msr	BASEPRI, r3
 800fc42:	f3bf 8f6f 	isb	sy
 800fc46:	f3bf 8f4f 	dsb	sy
 800fc4a:	60fb      	str	r3, [r7, #12]
}
 800fc4c:	bf00      	nop
 800fc4e:	bf00      	nop
 800fc50:	e7fd      	b.n	800fc4e <prvDeleteTCB+0x5e>
	}
 800fc52:	bf00      	nop
 800fc54:	3710      	adds	r7, #16
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
	...

0800fc5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b083      	sub	sp, #12
 800fc60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc62:	4b0c      	ldr	r3, [pc, #48]	@ (800fc94 <prvResetNextTaskUnblockTime+0x38>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d104      	bne.n	800fc76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fc6c:	4b0a      	ldr	r3, [pc, #40]	@ (800fc98 <prvResetNextTaskUnblockTime+0x3c>)
 800fc6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fc72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fc74:	e008      	b.n	800fc88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc76:	4b07      	ldr	r3, [pc, #28]	@ (800fc94 <prvResetNextTaskUnblockTime+0x38>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	68db      	ldr	r3, [r3, #12]
 800fc7c:	68db      	ldr	r3, [r3, #12]
 800fc7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	4a04      	ldr	r2, [pc, #16]	@ (800fc98 <prvResetNextTaskUnblockTime+0x3c>)
 800fc86:	6013      	str	r3, [r2, #0]
}
 800fc88:	bf00      	nop
 800fc8a:	370c      	adds	r7, #12
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr
 800fc94:	24033a04 	.word	0x24033a04
 800fc98:	24033a6c 	.word	0x24033a6c

0800fc9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fca2:	4b05      	ldr	r3, [pc, #20]	@ (800fcb8 <xTaskGetCurrentTaskHandle+0x1c>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fca8:	687b      	ldr	r3, [r7, #4]
	}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	370c      	adds	r7, #12
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb4:	4770      	bx	lr
 800fcb6:	bf00      	nop
 800fcb8:	24033578 	.word	0x24033578

0800fcbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b083      	sub	sp, #12
 800fcc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fcc2:	4b0b      	ldr	r3, [pc, #44]	@ (800fcf0 <xTaskGetSchedulerState+0x34>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d102      	bne.n	800fcd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fcca:	2301      	movs	r3, #1
 800fccc:	607b      	str	r3, [r7, #4]
 800fcce:	e008      	b.n	800fce2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcd0:	4b08      	ldr	r3, [pc, #32]	@ (800fcf4 <xTaskGetSchedulerState+0x38>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d102      	bne.n	800fcde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fcd8:	2302      	movs	r3, #2
 800fcda:	607b      	str	r3, [r7, #4]
 800fcdc:	e001      	b.n	800fce2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fcde:	2300      	movs	r3, #0
 800fce0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fce2:	687b      	ldr	r3, [r7, #4]
	}
 800fce4:	4618      	mov	r0, r3
 800fce6:	370c      	adds	r7, #12
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr
 800fcf0:	24033a58 	.word	0x24033a58
 800fcf4:	24033a74 	.word	0x24033a74

0800fcf8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fd04:	2300      	movs	r3, #0
 800fd06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d051      	beq.n	800fdb2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd12:	4b2a      	ldr	r3, [pc, #168]	@ (800fdbc <xTaskPriorityInherit+0xc4>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d241      	bcs.n	800fda0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	699b      	ldr	r3, [r3, #24]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	db06      	blt.n	800fd32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd24:	4b25      	ldr	r3, [pc, #148]	@ (800fdbc <xTaskPriorityInherit+0xc4>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd2a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	6959      	ldr	r1, [r3, #20]
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	009b      	lsls	r3, r3, #2
 800fd3e:	4413      	add	r3, r2
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	4a1f      	ldr	r2, [pc, #124]	@ (800fdc0 <xTaskPriorityInherit+0xc8>)
 800fd44:	4413      	add	r3, r2
 800fd46:	4299      	cmp	r1, r3
 800fd48:	d122      	bne.n	800fd90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	3304      	adds	r3, #4
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fe f9e4 	bl	800e11c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fd54:	4b19      	ldr	r3, [pc, #100]	@ (800fdbc <xTaskPriorityInherit+0xc4>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd62:	4b18      	ldr	r3, [pc, #96]	@ (800fdc4 <xTaskPriorityInherit+0xcc>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d903      	bls.n	800fd72 <xTaskPriorityInherit+0x7a>
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd6e:	4a15      	ldr	r2, [pc, #84]	@ (800fdc4 <xTaskPriorityInherit+0xcc>)
 800fd70:	6013      	str	r3, [r2, #0]
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd76:	4613      	mov	r3, r2
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	4413      	add	r3, r2
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	4a10      	ldr	r2, [pc, #64]	@ (800fdc0 <xTaskPriorityInherit+0xc8>)
 800fd80:	441a      	add	r2, r3
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	3304      	adds	r3, #4
 800fd86:	4619      	mov	r1, r3
 800fd88:	4610      	mov	r0, r2
 800fd8a:	f7fe f96a 	bl	800e062 <vListInsertEnd>
 800fd8e:	e004      	b.n	800fd9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fd90:	4b0a      	ldr	r3, [pc, #40]	@ (800fdbc <xTaskPriorityInherit+0xc4>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	60fb      	str	r3, [r7, #12]
 800fd9e:	e008      	b.n	800fdb2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fda4:	4b05      	ldr	r3, [pc, #20]	@ (800fdbc <xTaskPriorityInherit+0xc4>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d201      	bcs.n	800fdb2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
	}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	24033578 	.word	0x24033578
 800fdc0:	2403357c 	.word	0x2403357c
 800fdc4:	24033a54 	.word	0x24033a54

0800fdc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b086      	sub	sp, #24
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d058      	beq.n	800fe90 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fdde:	4b2f      	ldr	r3, [pc, #188]	@ (800fe9c <xTaskPriorityDisinherit+0xd4>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	693a      	ldr	r2, [r7, #16]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d00b      	beq.n	800fe00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdec:	f383 8811 	msr	BASEPRI, r3
 800fdf0:	f3bf 8f6f 	isb	sy
 800fdf4:	f3bf 8f4f 	dsb	sy
 800fdf8:	60fb      	str	r3, [r7, #12]
}
 800fdfa:	bf00      	nop
 800fdfc:	bf00      	nop
 800fdfe:	e7fd      	b.n	800fdfc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d10b      	bne.n	800fe20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fe08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe0c:	f383 8811 	msr	BASEPRI, r3
 800fe10:	f3bf 8f6f 	isb	sy
 800fe14:	f3bf 8f4f 	dsb	sy
 800fe18:	60bb      	str	r3, [r7, #8]
}
 800fe1a:	bf00      	nop
 800fe1c:	bf00      	nop
 800fe1e:	e7fd      	b.n	800fe1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe24:	1e5a      	subs	r2, r3, #1
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe2e:	693b      	ldr	r3, [r7, #16]
 800fe30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d02c      	beq.n	800fe90 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d128      	bne.n	800fe90 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	3304      	adds	r3, #4
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7fe f96a 	bl	800e11c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe60:	4b0f      	ldr	r3, [pc, #60]	@ (800fea0 <xTaskPriorityDisinherit+0xd8>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d903      	bls.n	800fe70 <xTaskPriorityDisinherit+0xa8>
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe6c:	4a0c      	ldr	r2, [pc, #48]	@ (800fea0 <xTaskPriorityDisinherit+0xd8>)
 800fe6e:	6013      	str	r3, [r2, #0]
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe74:	4613      	mov	r3, r2
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	4413      	add	r3, r2
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	4a09      	ldr	r2, [pc, #36]	@ (800fea4 <xTaskPriorityDisinherit+0xdc>)
 800fe7e:	441a      	add	r2, r3
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	3304      	adds	r3, #4
 800fe84:	4619      	mov	r1, r3
 800fe86:	4610      	mov	r0, r2
 800fe88:	f7fe f8eb 	bl	800e062 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fe90:	697b      	ldr	r3, [r7, #20]
	}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3718      	adds	r7, #24
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	24033578 	.word	0x24033578
 800fea0:	24033a54 	.word	0x24033a54
 800fea4:	2403357c 	.word	0x2403357c

0800fea8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b088      	sub	sp, #32
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800feb6:	2301      	movs	r3, #1
 800feb8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d06c      	beq.n	800ff9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fec0:	69bb      	ldr	r3, [r7, #24]
 800fec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d10b      	bne.n	800fee0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800fec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fecc:	f383 8811 	msr	BASEPRI, r3
 800fed0:	f3bf 8f6f 	isb	sy
 800fed4:	f3bf 8f4f 	dsb	sy
 800fed8:	60fb      	str	r3, [r7, #12]
}
 800feda:	bf00      	nop
 800fedc:	bf00      	nop
 800fede:	e7fd      	b.n	800fedc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fee4:	683a      	ldr	r2, [r7, #0]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d902      	bls.n	800fef0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	61fb      	str	r3, [r7, #28]
 800feee:	e002      	b.n	800fef6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fef0:	69bb      	ldr	r3, [r7, #24]
 800fef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fef4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fefa:	69fa      	ldr	r2, [r7, #28]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d04c      	beq.n	800ff9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ff00:	69bb      	ldr	r3, [r7, #24]
 800ff02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff04:	697a      	ldr	r2, [r7, #20]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d147      	bne.n	800ff9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ff0a:	4b26      	ldr	r3, [pc, #152]	@ (800ffa4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	69ba      	ldr	r2, [r7, #24]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d10b      	bne.n	800ff2c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ff14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff18:	f383 8811 	msr	BASEPRI, r3
 800ff1c:	f3bf 8f6f 	isb	sy
 800ff20:	f3bf 8f4f 	dsb	sy
 800ff24:	60bb      	str	r3, [r7, #8]
}
 800ff26:	bf00      	nop
 800ff28:	bf00      	nop
 800ff2a:	e7fd      	b.n	800ff28 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ff32:	69bb      	ldr	r3, [r7, #24]
 800ff34:	69fa      	ldr	r2, [r7, #28]
 800ff36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff38:	69bb      	ldr	r3, [r7, #24]
 800ff3a:	699b      	ldr	r3, [r3, #24]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	db04      	blt.n	800ff4a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ff46:	69bb      	ldr	r3, [r7, #24]
 800ff48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	6959      	ldr	r1, [r3, #20]
 800ff4e:	693a      	ldr	r2, [r7, #16]
 800ff50:	4613      	mov	r3, r2
 800ff52:	009b      	lsls	r3, r3, #2
 800ff54:	4413      	add	r3, r2
 800ff56:	009b      	lsls	r3, r3, #2
 800ff58:	4a13      	ldr	r2, [pc, #76]	@ (800ffa8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ff5a:	4413      	add	r3, r2
 800ff5c:	4299      	cmp	r1, r3
 800ff5e:	d11c      	bne.n	800ff9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff60:	69bb      	ldr	r3, [r7, #24]
 800ff62:	3304      	adds	r3, #4
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7fe f8d9 	bl	800e11c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ff6a:	69bb      	ldr	r3, [r7, #24]
 800ff6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff6e:	4b0f      	ldr	r3, [pc, #60]	@ (800ffac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d903      	bls.n	800ff7e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ff76:	69bb      	ldr	r3, [r7, #24]
 800ff78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff7a:	4a0c      	ldr	r2, [pc, #48]	@ (800ffac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ff7c:	6013      	str	r3, [r2, #0]
 800ff7e:	69bb      	ldr	r3, [r7, #24]
 800ff80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff82:	4613      	mov	r3, r2
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	4413      	add	r3, r2
 800ff88:	009b      	lsls	r3, r3, #2
 800ff8a:	4a07      	ldr	r2, [pc, #28]	@ (800ffa8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ff8c:	441a      	add	r2, r3
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	3304      	adds	r3, #4
 800ff92:	4619      	mov	r1, r3
 800ff94:	4610      	mov	r0, r2
 800ff96:	f7fe f864 	bl	800e062 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff9a:	bf00      	nop
 800ff9c:	3720      	adds	r7, #32
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	24033578 	.word	0x24033578
 800ffa8:	2403357c 	.word	0x2403357c
 800ffac:	24033a54 	.word	0x24033a54

0800ffb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ffb0:	b480      	push	{r7}
 800ffb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ffb4:	4b07      	ldr	r3, [pc, #28]	@ (800ffd4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d004      	beq.n	800ffc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ffbc:	4b05      	ldr	r3, [pc, #20]	@ (800ffd4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ffc2:	3201      	adds	r2, #1
 800ffc4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ffc6:	4b03      	ldr	r3, [pc, #12]	@ (800ffd4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
	}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr
 800ffd4:	24033578 	.word	0x24033578

0800ffd8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b086      	sub	sp, #24
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]
 800ffe4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ffe6:	f000 fedf 	bl	8010da8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ffea:	4b29      	ldr	r3, [pc, #164]	@ (8010090 <xTaskNotifyWait+0xb8>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	2b02      	cmp	r3, #2
 800fff6:	d01c      	beq.n	8010032 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800fff8:	4b25      	ldr	r3, [pc, #148]	@ (8010090 <xTaskNotifyWait+0xb8>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	43d2      	mvns	r2, r2
 8010004:	400a      	ands	r2, r1
 8010006:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801000a:	4b21      	ldr	r3, [pc, #132]	@ (8010090 <xTaskNotifyWait+0xb8>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2201      	movs	r2, #1
 8010010:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d00b      	beq.n	8010032 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801001a:	2101      	movs	r1, #1
 801001c:	6838      	ldr	r0, [r7, #0]
 801001e:	f000 f9e3 	bl	80103e8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010022:	4b1c      	ldr	r3, [pc, #112]	@ (8010094 <xTaskNotifyWait+0xbc>)
 8010024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010028:	601a      	str	r2, [r3, #0]
 801002a:	f3bf 8f4f 	dsb	sy
 801002e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010032:	f000 feeb 	bl	8010e0c <vPortExitCritical>

		taskENTER_CRITICAL();
 8010036:	f000 feb7 	bl	8010da8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d005      	beq.n	801004c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010040:	4b13      	ldr	r3, [pc, #76]	@ (8010090 <xTaskNotifyWait+0xb8>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801004c:	4b10      	ldr	r3, [pc, #64]	@ (8010090 <xTaskNotifyWait+0xb8>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010054:	b2db      	uxtb	r3, r3
 8010056:	2b02      	cmp	r3, #2
 8010058:	d002      	beq.n	8010060 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801005a:	2300      	movs	r3, #0
 801005c:	617b      	str	r3, [r7, #20]
 801005e:	e00a      	b.n	8010076 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010060:	4b0b      	ldr	r3, [pc, #44]	@ (8010090 <xTaskNotifyWait+0xb8>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8010068:	68ba      	ldr	r2, [r7, #8]
 801006a:	43d2      	mvns	r2, r2
 801006c:	400a      	ands	r2, r1
 801006e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8010072:	2301      	movs	r3, #1
 8010074:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010076:	4b06      	ldr	r3, [pc, #24]	@ (8010090 <xTaskNotifyWait+0xb8>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	2200      	movs	r2, #0
 801007c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8010080:	f000 fec4 	bl	8010e0c <vPortExitCritical>

		return xReturn;
 8010084:	697b      	ldr	r3, [r7, #20]
	}
 8010086:	4618      	mov	r0, r3
 8010088:	3718      	adds	r7, #24
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	24033578 	.word	0x24033578
 8010094:	e000ed04 	.word	0xe000ed04

08010098 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010098:	b580      	push	{r7, lr}
 801009a:	b08a      	sub	sp, #40	@ 0x28
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	603b      	str	r3, [r7, #0]
 80100a4:	4613      	mov	r3, r2
 80100a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80100a8:	2301      	movs	r3, #1
 80100aa:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d10b      	bne.n	80100ca <xTaskGenericNotify+0x32>
	__asm volatile
 80100b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100b6:	f383 8811 	msr	BASEPRI, r3
 80100ba:	f3bf 8f6f 	isb	sy
 80100be:	f3bf 8f4f 	dsb	sy
 80100c2:	61bb      	str	r3, [r7, #24]
}
 80100c4:	bf00      	nop
 80100c6:	bf00      	nop
 80100c8:	e7fd      	b.n	80100c6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80100ce:	f000 fe6b 	bl	8010da8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d004      	beq.n	80100e2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80100d8:	6a3b      	ldr	r3, [r7, #32]
 80100da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80100e2:	6a3b      	ldr	r3, [r7, #32]
 80100e4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80100e8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80100ea:	6a3b      	ldr	r3, [r7, #32]
 80100ec:	2202      	movs	r2, #2
 80100ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80100f2:	79fb      	ldrb	r3, [r7, #7]
 80100f4:	2b04      	cmp	r3, #4
 80100f6:	d82e      	bhi.n	8010156 <xTaskGenericNotify+0xbe>
 80100f8:	a201      	add	r2, pc, #4	@ (adr r2, 8010100 <xTaskGenericNotify+0x68>)
 80100fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100fe:	bf00      	nop
 8010100:	0801017b 	.word	0x0801017b
 8010104:	08010115 	.word	0x08010115
 8010108:	08010127 	.word	0x08010127
 801010c:	08010137 	.word	0x08010137
 8010110:	08010141 	.word	0x08010141
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010114:	6a3b      	ldr	r3, [r7, #32]
 8010116:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	431a      	orrs	r2, r3
 801011e:	6a3b      	ldr	r3, [r7, #32]
 8010120:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010124:	e02c      	b.n	8010180 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010126:	6a3b      	ldr	r3, [r7, #32]
 8010128:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801012c:	1c5a      	adds	r2, r3, #1
 801012e:	6a3b      	ldr	r3, [r7, #32]
 8010130:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010134:	e024      	b.n	8010180 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010136:	6a3b      	ldr	r3, [r7, #32]
 8010138:	68ba      	ldr	r2, [r7, #8]
 801013a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801013e:	e01f      	b.n	8010180 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010140:	7ffb      	ldrb	r3, [r7, #31]
 8010142:	2b02      	cmp	r3, #2
 8010144:	d004      	beq.n	8010150 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010146:	6a3b      	ldr	r3, [r7, #32]
 8010148:	68ba      	ldr	r2, [r7, #8]
 801014a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801014e:	e017      	b.n	8010180 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8010150:	2300      	movs	r3, #0
 8010152:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8010154:	e014      	b.n	8010180 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010156:	6a3b      	ldr	r3, [r7, #32]
 8010158:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801015c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010160:	d00d      	beq.n	801017e <xTaskGenericNotify+0xe6>
	__asm volatile
 8010162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010166:	f383 8811 	msr	BASEPRI, r3
 801016a:	f3bf 8f6f 	isb	sy
 801016e:	f3bf 8f4f 	dsb	sy
 8010172:	617b      	str	r3, [r7, #20]
}
 8010174:	bf00      	nop
 8010176:	bf00      	nop
 8010178:	e7fd      	b.n	8010176 <xTaskGenericNotify+0xde>
					break;
 801017a:	bf00      	nop
 801017c:	e000      	b.n	8010180 <xTaskGenericNotify+0xe8>

					break;
 801017e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010180:	7ffb      	ldrb	r3, [r7, #31]
 8010182:	2b01      	cmp	r3, #1
 8010184:	d13b      	bne.n	80101fe <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010186:	6a3b      	ldr	r3, [r7, #32]
 8010188:	3304      	adds	r3, #4
 801018a:	4618      	mov	r0, r3
 801018c:	f7fd ffc6 	bl	800e11c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010190:	6a3b      	ldr	r3, [r7, #32]
 8010192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010194:	4b1d      	ldr	r3, [pc, #116]	@ (801020c <xTaskGenericNotify+0x174>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	429a      	cmp	r2, r3
 801019a:	d903      	bls.n	80101a4 <xTaskGenericNotify+0x10c>
 801019c:	6a3b      	ldr	r3, [r7, #32]
 801019e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101a0:	4a1a      	ldr	r2, [pc, #104]	@ (801020c <xTaskGenericNotify+0x174>)
 80101a2:	6013      	str	r3, [r2, #0]
 80101a4:	6a3b      	ldr	r3, [r7, #32]
 80101a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101a8:	4613      	mov	r3, r2
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	4413      	add	r3, r2
 80101ae:	009b      	lsls	r3, r3, #2
 80101b0:	4a17      	ldr	r2, [pc, #92]	@ (8010210 <xTaskGenericNotify+0x178>)
 80101b2:	441a      	add	r2, r3
 80101b4:	6a3b      	ldr	r3, [r7, #32]
 80101b6:	3304      	adds	r3, #4
 80101b8:	4619      	mov	r1, r3
 80101ba:	4610      	mov	r0, r2
 80101bc:	f7fd ff51 	bl	800e062 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80101c0:	6a3b      	ldr	r3, [r7, #32]
 80101c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d00b      	beq.n	80101e0 <xTaskGenericNotify+0x148>
	__asm volatile
 80101c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101cc:	f383 8811 	msr	BASEPRI, r3
 80101d0:	f3bf 8f6f 	isb	sy
 80101d4:	f3bf 8f4f 	dsb	sy
 80101d8:	613b      	str	r3, [r7, #16]
}
 80101da:	bf00      	nop
 80101dc:	bf00      	nop
 80101de:	e7fd      	b.n	80101dc <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80101e0:	6a3b      	ldr	r3, [r7, #32]
 80101e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101e4:	4b0b      	ldr	r3, [pc, #44]	@ (8010214 <xTaskGenericNotify+0x17c>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d907      	bls.n	80101fe <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80101ee:	4b0a      	ldr	r3, [pc, #40]	@ (8010218 <xTaskGenericNotify+0x180>)
 80101f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101f4:	601a      	str	r2, [r3, #0]
 80101f6:	f3bf 8f4f 	dsb	sy
 80101fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80101fe:	f000 fe05 	bl	8010e0c <vPortExitCritical>

		return xReturn;
 8010202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010204:	4618      	mov	r0, r3
 8010206:	3728      	adds	r7, #40	@ 0x28
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}
 801020c:	24033a54 	.word	0x24033a54
 8010210:	2403357c 	.word	0x2403357c
 8010214:	24033578 	.word	0x24033578
 8010218:	e000ed04 	.word	0xe000ed04

0801021c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801021c:	b580      	push	{r7, lr}
 801021e:	b08e      	sub	sp, #56	@ 0x38
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	603b      	str	r3, [r7, #0]
 8010228:	4613      	mov	r3, r2
 801022a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801022c:	2301      	movs	r3, #1
 801022e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d10b      	bne.n	801024e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8010236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801023a:	f383 8811 	msr	BASEPRI, r3
 801023e:	f3bf 8f6f 	isb	sy
 8010242:	f3bf 8f4f 	dsb	sy
 8010246:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010248:	bf00      	nop
 801024a:	bf00      	nop
 801024c:	e7fd      	b.n	801024a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801024e:	f000 fe8b 	bl	8010f68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8010256:	f3ef 8211 	mrs	r2, BASEPRI
 801025a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801025e:	f383 8811 	msr	BASEPRI, r3
 8010262:	f3bf 8f6f 	isb	sy
 8010266:	f3bf 8f4f 	dsb	sy
 801026a:	623a      	str	r2, [r7, #32]
 801026c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801026e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010270:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d004      	beq.n	8010282 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801027a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010284:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010288:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801028c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801028e:	2202      	movs	r2, #2
 8010290:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8010294:	79fb      	ldrb	r3, [r7, #7]
 8010296:	2b04      	cmp	r3, #4
 8010298:	d82e      	bhi.n	80102f8 <xTaskGenericNotifyFromISR+0xdc>
 801029a:	a201      	add	r2, pc, #4	@ (adr r2, 80102a0 <xTaskGenericNotifyFromISR+0x84>)
 801029c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102a0:	0801031d 	.word	0x0801031d
 80102a4:	080102b5 	.word	0x080102b5
 80102a8:	080102c7 	.word	0x080102c7
 80102ac:	080102d7 	.word	0x080102d7
 80102b0:	080102e1 	.word	0x080102e1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80102b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	431a      	orrs	r2, r3
 80102be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80102c4:	e02d      	b.n	8010322 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80102c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80102cc:	1c5a      	adds	r2, r3, #1
 80102ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80102d4:	e025      	b.n	8010322 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80102d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102d8:	68ba      	ldr	r2, [r7, #8]
 80102da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80102de:	e020      	b.n	8010322 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80102e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80102e4:	2b02      	cmp	r3, #2
 80102e6:	d004      	beq.n	80102f2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80102e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102ea:	68ba      	ldr	r2, [r7, #8]
 80102ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80102f0:	e017      	b.n	8010322 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80102f2:	2300      	movs	r3, #0
 80102f4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80102f6:	e014      	b.n	8010322 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80102f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80102fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010302:	d00d      	beq.n	8010320 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8010304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	61bb      	str	r3, [r7, #24]
}
 8010316:	bf00      	nop
 8010318:	bf00      	nop
 801031a:	e7fd      	b.n	8010318 <xTaskGenericNotifyFromISR+0xfc>
					break;
 801031c:	bf00      	nop
 801031e:	e000      	b.n	8010322 <xTaskGenericNotifyFromISR+0x106>
					break;
 8010320:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010322:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010326:	2b01      	cmp	r3, #1
 8010328:	d147      	bne.n	80103ba <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801032a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801032c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801032e:	2b00      	cmp	r3, #0
 8010330:	d00b      	beq.n	801034a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8010332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010336:	f383 8811 	msr	BASEPRI, r3
 801033a:	f3bf 8f6f 	isb	sy
 801033e:	f3bf 8f4f 	dsb	sy
 8010342:	617b      	str	r3, [r7, #20]
}
 8010344:	bf00      	nop
 8010346:	bf00      	nop
 8010348:	e7fd      	b.n	8010346 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801034a:	4b21      	ldr	r3, [pc, #132]	@ (80103d0 <xTaskGenericNotifyFromISR+0x1b4>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d11d      	bne.n	801038e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010354:	3304      	adds	r3, #4
 8010356:	4618      	mov	r0, r3
 8010358:	f7fd fee0 	bl	800e11c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801035c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801035e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010360:	4b1c      	ldr	r3, [pc, #112]	@ (80103d4 <xTaskGenericNotifyFromISR+0x1b8>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	429a      	cmp	r2, r3
 8010366:	d903      	bls.n	8010370 <xTaskGenericNotifyFromISR+0x154>
 8010368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801036a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801036c:	4a19      	ldr	r2, [pc, #100]	@ (80103d4 <xTaskGenericNotifyFromISR+0x1b8>)
 801036e:	6013      	str	r3, [r2, #0]
 8010370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010374:	4613      	mov	r3, r2
 8010376:	009b      	lsls	r3, r3, #2
 8010378:	4413      	add	r3, r2
 801037a:	009b      	lsls	r3, r3, #2
 801037c:	4a16      	ldr	r2, [pc, #88]	@ (80103d8 <xTaskGenericNotifyFromISR+0x1bc>)
 801037e:	441a      	add	r2, r3
 8010380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010382:	3304      	adds	r3, #4
 8010384:	4619      	mov	r1, r3
 8010386:	4610      	mov	r0, r2
 8010388:	f7fd fe6b 	bl	800e062 <vListInsertEnd>
 801038c:	e005      	b.n	801039a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801038e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010390:	3318      	adds	r3, #24
 8010392:	4619      	mov	r1, r3
 8010394:	4811      	ldr	r0, [pc, #68]	@ (80103dc <xTaskGenericNotifyFromISR+0x1c0>)
 8010396:	f7fd fe64 	bl	800e062 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801039a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801039c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801039e:	4b10      	ldr	r3, [pc, #64]	@ (80103e0 <xTaskGenericNotifyFromISR+0x1c4>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103a4:	429a      	cmp	r2, r3
 80103a6:	d908      	bls.n	80103ba <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80103a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d002      	beq.n	80103b4 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80103ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103b0:	2201      	movs	r2, #1
 80103b2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80103b4:	4b0b      	ldr	r3, [pc, #44]	@ (80103e4 <xTaskGenericNotifyFromISR+0x1c8>)
 80103b6:	2201      	movs	r2, #1
 80103b8:	601a      	str	r2, [r3, #0]
 80103ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	f383 8811 	msr	BASEPRI, r3
}
 80103c4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80103c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3738      	adds	r7, #56	@ 0x38
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	24033a74 	.word	0x24033a74
 80103d4:	24033a54 	.word	0x24033a54
 80103d8:	2403357c 	.word	0x2403357c
 80103dc:	24033a0c 	.word	0x24033a0c
 80103e0:	24033578 	.word	0x24033578
 80103e4:	24033a60 	.word	0x24033a60

080103e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b084      	sub	sp, #16
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80103f2:	4b21      	ldr	r3, [pc, #132]	@ (8010478 <prvAddCurrentTaskToDelayedList+0x90>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103f8:	4b20      	ldr	r3, [pc, #128]	@ (801047c <prvAddCurrentTaskToDelayedList+0x94>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	3304      	adds	r3, #4
 80103fe:	4618      	mov	r0, r3
 8010400:	f7fd fe8c 	bl	800e11c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801040a:	d10a      	bne.n	8010422 <prvAddCurrentTaskToDelayedList+0x3a>
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d007      	beq.n	8010422 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010412:	4b1a      	ldr	r3, [pc, #104]	@ (801047c <prvAddCurrentTaskToDelayedList+0x94>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	3304      	adds	r3, #4
 8010418:	4619      	mov	r1, r3
 801041a:	4819      	ldr	r0, [pc, #100]	@ (8010480 <prvAddCurrentTaskToDelayedList+0x98>)
 801041c:	f7fd fe21 	bl	800e062 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010420:	e026      	b.n	8010470 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010422:	68fa      	ldr	r2, [r7, #12]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	4413      	add	r3, r2
 8010428:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801042a:	4b14      	ldr	r3, [pc, #80]	@ (801047c <prvAddCurrentTaskToDelayedList+0x94>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	68ba      	ldr	r2, [r7, #8]
 8010430:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010432:	68ba      	ldr	r2, [r7, #8]
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	429a      	cmp	r2, r3
 8010438:	d209      	bcs.n	801044e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801043a:	4b12      	ldr	r3, [pc, #72]	@ (8010484 <prvAddCurrentTaskToDelayedList+0x9c>)
 801043c:	681a      	ldr	r2, [r3, #0]
 801043e:	4b0f      	ldr	r3, [pc, #60]	@ (801047c <prvAddCurrentTaskToDelayedList+0x94>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	3304      	adds	r3, #4
 8010444:	4619      	mov	r1, r3
 8010446:	4610      	mov	r0, r2
 8010448:	f7fd fe2f 	bl	800e0aa <vListInsert>
}
 801044c:	e010      	b.n	8010470 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801044e:	4b0e      	ldr	r3, [pc, #56]	@ (8010488 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	4b0a      	ldr	r3, [pc, #40]	@ (801047c <prvAddCurrentTaskToDelayedList+0x94>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	3304      	adds	r3, #4
 8010458:	4619      	mov	r1, r3
 801045a:	4610      	mov	r0, r2
 801045c:	f7fd fe25 	bl	800e0aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010460:	4b0a      	ldr	r3, [pc, #40]	@ (801048c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	68ba      	ldr	r2, [r7, #8]
 8010466:	429a      	cmp	r2, r3
 8010468:	d202      	bcs.n	8010470 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801046a:	4a08      	ldr	r2, [pc, #32]	@ (801048c <prvAddCurrentTaskToDelayedList+0xa4>)
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	6013      	str	r3, [r2, #0]
}
 8010470:	bf00      	nop
 8010472:	3710      	adds	r7, #16
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}
 8010478:	24033a50 	.word	0x24033a50
 801047c:	24033578 	.word	0x24033578
 8010480:	24033a38 	.word	0x24033a38
 8010484:	24033a08 	.word	0x24033a08
 8010488:	24033a04 	.word	0x24033a04
 801048c:	24033a6c 	.word	0x24033a6c

08010490 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b08a      	sub	sp, #40	@ 0x28
 8010494:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010496:	2300      	movs	r3, #0
 8010498:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801049a:	f000 fb13 	bl	8010ac4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801049e:	4b1d      	ldr	r3, [pc, #116]	@ (8010514 <xTimerCreateTimerTask+0x84>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d021      	beq.n	80104ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80104a6:	2300      	movs	r3, #0
 80104a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80104aa:	2300      	movs	r3, #0
 80104ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80104ae:	1d3a      	adds	r2, r7, #4
 80104b0:	f107 0108 	add.w	r1, r7, #8
 80104b4:	f107 030c 	add.w	r3, r7, #12
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7fd fd8b 	bl	800dfd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80104be:	6879      	ldr	r1, [r7, #4]
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	68fa      	ldr	r2, [r7, #12]
 80104c4:	9202      	str	r2, [sp, #8]
 80104c6:	9301      	str	r3, [sp, #4]
 80104c8:	2302      	movs	r3, #2
 80104ca:	9300      	str	r3, [sp, #0]
 80104cc:	2300      	movs	r3, #0
 80104ce:	460a      	mov	r2, r1
 80104d0:	4911      	ldr	r1, [pc, #68]	@ (8010518 <xTimerCreateTimerTask+0x88>)
 80104d2:	4812      	ldr	r0, [pc, #72]	@ (801051c <xTimerCreateTimerTask+0x8c>)
 80104d4:	f7fe fd62 	bl	800ef9c <xTaskCreateStatic>
 80104d8:	4603      	mov	r3, r0
 80104da:	4a11      	ldr	r2, [pc, #68]	@ (8010520 <xTimerCreateTimerTask+0x90>)
 80104dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80104de:	4b10      	ldr	r3, [pc, #64]	@ (8010520 <xTimerCreateTimerTask+0x90>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d001      	beq.n	80104ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80104e6:	2301      	movs	r3, #1
 80104e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d10b      	bne.n	8010508 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80104f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104f4:	f383 8811 	msr	BASEPRI, r3
 80104f8:	f3bf 8f6f 	isb	sy
 80104fc:	f3bf 8f4f 	dsb	sy
 8010500:	613b      	str	r3, [r7, #16]
}
 8010502:	bf00      	nop
 8010504:	bf00      	nop
 8010506:	e7fd      	b.n	8010504 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010508:	697b      	ldr	r3, [r7, #20]
}
 801050a:	4618      	mov	r0, r3
 801050c:	3718      	adds	r7, #24
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	24033aa8 	.word	0x24033aa8
 8010518:	08022130 	.word	0x08022130
 801051c:	0801065d 	.word	0x0801065d
 8010520:	24033aac 	.word	0x24033aac

08010524 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b08a      	sub	sp, #40	@ 0x28
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	60b9      	str	r1, [r7, #8]
 801052e:	607a      	str	r2, [r7, #4]
 8010530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010532:	2300      	movs	r3, #0
 8010534:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d10b      	bne.n	8010554 <xTimerGenericCommand+0x30>
	__asm volatile
 801053c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010540:	f383 8811 	msr	BASEPRI, r3
 8010544:	f3bf 8f6f 	isb	sy
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	623b      	str	r3, [r7, #32]
}
 801054e:	bf00      	nop
 8010550:	bf00      	nop
 8010552:	e7fd      	b.n	8010550 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010554:	4b19      	ldr	r3, [pc, #100]	@ (80105bc <xTimerGenericCommand+0x98>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d02a      	beq.n	80105b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	2b05      	cmp	r3, #5
 801056c:	dc18      	bgt.n	80105a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801056e:	f7ff fba5 	bl	800fcbc <xTaskGetSchedulerState>
 8010572:	4603      	mov	r3, r0
 8010574:	2b02      	cmp	r3, #2
 8010576:	d109      	bne.n	801058c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010578:	4b10      	ldr	r3, [pc, #64]	@ (80105bc <xTimerGenericCommand+0x98>)
 801057a:	6818      	ldr	r0, [r3, #0]
 801057c:	f107 0110 	add.w	r1, r7, #16
 8010580:	2300      	movs	r3, #0
 8010582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010584:	f7fd fff2 	bl	800e56c <xQueueGenericSend>
 8010588:	6278      	str	r0, [r7, #36]	@ 0x24
 801058a:	e012      	b.n	80105b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801058c:	4b0b      	ldr	r3, [pc, #44]	@ (80105bc <xTimerGenericCommand+0x98>)
 801058e:	6818      	ldr	r0, [r3, #0]
 8010590:	f107 0110 	add.w	r1, r7, #16
 8010594:	2300      	movs	r3, #0
 8010596:	2200      	movs	r2, #0
 8010598:	f7fd ffe8 	bl	800e56c <xQueueGenericSend>
 801059c:	6278      	str	r0, [r7, #36]	@ 0x24
 801059e:	e008      	b.n	80105b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80105a0:	4b06      	ldr	r3, [pc, #24]	@ (80105bc <xTimerGenericCommand+0x98>)
 80105a2:	6818      	ldr	r0, [r3, #0]
 80105a4:	f107 0110 	add.w	r1, r7, #16
 80105a8:	2300      	movs	r3, #0
 80105aa:	683a      	ldr	r2, [r7, #0]
 80105ac:	f7fe f8e0 	bl	800e770 <xQueueGenericSendFromISR>
 80105b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80105b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3728      	adds	r7, #40	@ 0x28
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	24033aa8 	.word	0x24033aa8

080105c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b088      	sub	sp, #32
 80105c4:	af02      	add	r7, sp, #8
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105ca:	4b23      	ldr	r3, [pc, #140]	@ (8010658 <prvProcessExpiredTimer+0x98>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	68db      	ldr	r3, [r3, #12]
 80105d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	3304      	adds	r3, #4
 80105d8:	4618      	mov	r0, r3
 80105da:	f7fd fd9f 	bl	800e11c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105e4:	f003 0304 	and.w	r3, r3, #4
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d023      	beq.n	8010634 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	699a      	ldr	r2, [r3, #24]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	18d1      	adds	r1, r2, r3
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	683a      	ldr	r2, [r7, #0]
 80105f8:	6978      	ldr	r0, [r7, #20]
 80105fa:	f000 f8d5 	bl	80107a8 <prvInsertTimerInActiveList>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	d020      	beq.n	8010646 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010604:	2300      	movs	r3, #0
 8010606:	9300      	str	r3, [sp, #0]
 8010608:	2300      	movs	r3, #0
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	2100      	movs	r1, #0
 801060e:	6978      	ldr	r0, [r7, #20]
 8010610:	f7ff ff88 	bl	8010524 <xTimerGenericCommand>
 8010614:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d114      	bne.n	8010646 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801061c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010620:	f383 8811 	msr	BASEPRI, r3
 8010624:	f3bf 8f6f 	isb	sy
 8010628:	f3bf 8f4f 	dsb	sy
 801062c:	60fb      	str	r3, [r7, #12]
}
 801062e:	bf00      	nop
 8010630:	bf00      	nop
 8010632:	e7fd      	b.n	8010630 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801063a:	f023 0301 	bic.w	r3, r3, #1
 801063e:	b2da      	uxtb	r2, r3
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	6a1b      	ldr	r3, [r3, #32]
 801064a:	6978      	ldr	r0, [r7, #20]
 801064c:	4798      	blx	r3
}
 801064e:	bf00      	nop
 8010650:	3718      	adds	r7, #24
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
 8010656:	bf00      	nop
 8010658:	24033aa0 	.word	0x24033aa0

0801065c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b084      	sub	sp, #16
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010664:	f107 0308 	add.w	r3, r7, #8
 8010668:	4618      	mov	r0, r3
 801066a:	f000 f859 	bl	8010720 <prvGetNextExpireTime>
 801066e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	4619      	mov	r1, r3
 8010674:	68f8      	ldr	r0, [r7, #12]
 8010676:	f000 f805 	bl	8010684 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801067a:	f000 f8d7 	bl	801082c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801067e:	bf00      	nop
 8010680:	e7f0      	b.n	8010664 <prvTimerTask+0x8>
	...

08010684 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b084      	sub	sp, #16
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801068e:	f7fe fee9 	bl	800f464 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010692:	f107 0308 	add.w	r3, r7, #8
 8010696:	4618      	mov	r0, r3
 8010698:	f000 f866 	bl	8010768 <prvSampleTimeNow>
 801069c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d130      	bne.n	8010706 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d10a      	bne.n	80106c0 <prvProcessTimerOrBlockTask+0x3c>
 80106aa:	687a      	ldr	r2, [r7, #4]
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d806      	bhi.n	80106c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80106b2:	f7fe fee5 	bl	800f480 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80106b6:	68f9      	ldr	r1, [r7, #12]
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f7ff ff81 	bl	80105c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80106be:	e024      	b.n	801070a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d008      	beq.n	80106d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80106c6:	4b13      	ldr	r3, [pc, #76]	@ (8010714 <prvProcessTimerOrBlockTask+0x90>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d101      	bne.n	80106d4 <prvProcessTimerOrBlockTask+0x50>
 80106d0:	2301      	movs	r3, #1
 80106d2:	e000      	b.n	80106d6 <prvProcessTimerOrBlockTask+0x52>
 80106d4:	2300      	movs	r3, #0
 80106d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80106d8:	4b0f      	ldr	r3, [pc, #60]	@ (8010718 <prvProcessTimerOrBlockTask+0x94>)
 80106da:	6818      	ldr	r0, [r3, #0]
 80106dc:	687a      	ldr	r2, [r7, #4]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	683a      	ldr	r2, [r7, #0]
 80106e4:	4619      	mov	r1, r3
 80106e6:	f7fe fc25 	bl	800ef34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80106ea:	f7fe fec9 	bl	800f480 <xTaskResumeAll>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d10a      	bne.n	801070a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80106f4:	4b09      	ldr	r3, [pc, #36]	@ (801071c <prvProcessTimerOrBlockTask+0x98>)
 80106f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106fa:	601a      	str	r2, [r3, #0]
 80106fc:	f3bf 8f4f 	dsb	sy
 8010700:	f3bf 8f6f 	isb	sy
}
 8010704:	e001      	b.n	801070a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010706:	f7fe febb 	bl	800f480 <xTaskResumeAll>
}
 801070a:	bf00      	nop
 801070c:	3710      	adds	r7, #16
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
 8010712:	bf00      	nop
 8010714:	24033aa4 	.word	0x24033aa4
 8010718:	24033aa8 	.word	0x24033aa8
 801071c:	e000ed04 	.word	0xe000ed04

08010720 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010720:	b480      	push	{r7}
 8010722:	b085      	sub	sp, #20
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010728:	4b0e      	ldr	r3, [pc, #56]	@ (8010764 <prvGetNextExpireTime+0x44>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d101      	bne.n	8010736 <prvGetNextExpireTime+0x16>
 8010732:	2201      	movs	r2, #1
 8010734:	e000      	b.n	8010738 <prvGetNextExpireTime+0x18>
 8010736:	2200      	movs	r2, #0
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d105      	bne.n	8010750 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010744:	4b07      	ldr	r3, [pc, #28]	@ (8010764 <prvGetNextExpireTime+0x44>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	60fb      	str	r3, [r7, #12]
 801074e:	e001      	b.n	8010754 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010750:	2300      	movs	r3, #0
 8010752:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010754:	68fb      	ldr	r3, [r7, #12]
}
 8010756:	4618      	mov	r0, r3
 8010758:	3714      	adds	r7, #20
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop
 8010764:	24033aa0 	.word	0x24033aa0

08010768 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010770:	f7fe ff24 	bl	800f5bc <xTaskGetTickCount>
 8010774:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010776:	4b0b      	ldr	r3, [pc, #44]	@ (80107a4 <prvSampleTimeNow+0x3c>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	68fa      	ldr	r2, [r7, #12]
 801077c:	429a      	cmp	r2, r3
 801077e:	d205      	bcs.n	801078c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010780:	f000 f93a 	bl	80109f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2201      	movs	r2, #1
 8010788:	601a      	str	r2, [r3, #0]
 801078a:	e002      	b.n	8010792 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2200      	movs	r2, #0
 8010790:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010792:	4a04      	ldr	r2, [pc, #16]	@ (80107a4 <prvSampleTimeNow+0x3c>)
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010798:	68fb      	ldr	r3, [r7, #12]
}
 801079a:	4618      	mov	r0, r3
 801079c:	3710      	adds	r7, #16
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	24033ab0 	.word	0x24033ab0

080107a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b086      	sub	sp, #24
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80107b6:	2300      	movs	r3, #0
 80107b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	68ba      	ldr	r2, [r7, #8]
 80107be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	68fa      	ldr	r2, [r7, #12]
 80107c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80107c6:	68ba      	ldr	r2, [r7, #8]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d812      	bhi.n	80107f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	1ad2      	subs	r2, r2, r3
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	699b      	ldr	r3, [r3, #24]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d302      	bcc.n	80107e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80107dc:	2301      	movs	r3, #1
 80107de:	617b      	str	r3, [r7, #20]
 80107e0:	e01b      	b.n	801081a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80107e2:	4b10      	ldr	r3, [pc, #64]	@ (8010824 <prvInsertTimerInActiveList+0x7c>)
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	3304      	adds	r3, #4
 80107ea:	4619      	mov	r1, r3
 80107ec:	4610      	mov	r0, r2
 80107ee:	f7fd fc5c 	bl	800e0aa <vListInsert>
 80107f2:	e012      	b.n	801081a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d206      	bcs.n	801080a <prvInsertTimerInActiveList+0x62>
 80107fc:	68ba      	ldr	r2, [r7, #8]
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	429a      	cmp	r2, r3
 8010802:	d302      	bcc.n	801080a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010804:	2301      	movs	r3, #1
 8010806:	617b      	str	r3, [r7, #20]
 8010808:	e007      	b.n	801081a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801080a:	4b07      	ldr	r3, [pc, #28]	@ (8010828 <prvInsertTimerInActiveList+0x80>)
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	3304      	adds	r3, #4
 8010812:	4619      	mov	r1, r3
 8010814:	4610      	mov	r0, r2
 8010816:	f7fd fc48 	bl	800e0aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 801081a:	697b      	ldr	r3, [r7, #20]
}
 801081c:	4618      	mov	r0, r3
 801081e:	3718      	adds	r7, #24
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	24033aa4 	.word	0x24033aa4
 8010828:	24033aa0 	.word	0x24033aa0

0801082c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b08e      	sub	sp, #56	@ 0x38
 8010830:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010832:	e0ce      	b.n	80109d2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	da19      	bge.n	801086e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801083a:	1d3b      	adds	r3, r7, #4
 801083c:	3304      	adds	r3, #4
 801083e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010842:	2b00      	cmp	r3, #0
 8010844:	d10b      	bne.n	801085e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801084a:	f383 8811 	msr	BASEPRI, r3
 801084e:	f3bf 8f6f 	isb	sy
 8010852:	f3bf 8f4f 	dsb	sy
 8010856:	61fb      	str	r3, [r7, #28]
}
 8010858:	bf00      	nop
 801085a:	bf00      	nop
 801085c:	e7fd      	b.n	801085a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801085e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010864:	6850      	ldr	r0, [r2, #4]
 8010866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010868:	6892      	ldr	r2, [r2, #8]
 801086a:	4611      	mov	r1, r2
 801086c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2b00      	cmp	r3, #0
 8010872:	f2c0 80ae 	blt.w	80109d2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801087a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801087c:	695b      	ldr	r3, [r3, #20]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d004      	beq.n	801088c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010884:	3304      	adds	r3, #4
 8010886:	4618      	mov	r0, r3
 8010888:	f7fd fc48 	bl	800e11c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801088c:	463b      	mov	r3, r7
 801088e:	4618      	mov	r0, r3
 8010890:	f7ff ff6a 	bl	8010768 <prvSampleTimeNow>
 8010894:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2b09      	cmp	r3, #9
 801089a:	f200 8097 	bhi.w	80109cc <prvProcessReceivedCommands+0x1a0>
 801089e:	a201      	add	r2, pc, #4	@ (adr r2, 80108a4 <prvProcessReceivedCommands+0x78>)
 80108a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a4:	080108cd 	.word	0x080108cd
 80108a8:	080108cd 	.word	0x080108cd
 80108ac:	080108cd 	.word	0x080108cd
 80108b0:	08010943 	.word	0x08010943
 80108b4:	08010957 	.word	0x08010957
 80108b8:	080109a3 	.word	0x080109a3
 80108bc:	080108cd 	.word	0x080108cd
 80108c0:	080108cd 	.word	0x080108cd
 80108c4:	08010943 	.word	0x08010943
 80108c8:	08010957 	.word	0x08010957
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80108cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108d2:	f043 0301 	orr.w	r3, r3, #1
 80108d6:	b2da      	uxtb	r2, r3
 80108d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80108de:	68ba      	ldr	r2, [r7, #8]
 80108e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e2:	699b      	ldr	r3, [r3, #24]
 80108e4:	18d1      	adds	r1, r2, r3
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80108ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108ec:	f7ff ff5c 	bl	80107a8 <prvInsertTimerInActiveList>
 80108f0:	4603      	mov	r3, r0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d06c      	beq.n	80109d0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80108f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f8:	6a1b      	ldr	r3, [r3, #32]
 80108fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80108fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010900:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010904:	f003 0304 	and.w	r3, r3, #4
 8010908:	2b00      	cmp	r3, #0
 801090a:	d061      	beq.n	80109d0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801090c:	68ba      	ldr	r2, [r7, #8]
 801090e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010910:	699b      	ldr	r3, [r3, #24]
 8010912:	441a      	add	r2, r3
 8010914:	2300      	movs	r3, #0
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	2300      	movs	r3, #0
 801091a:	2100      	movs	r1, #0
 801091c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801091e:	f7ff fe01 	bl	8010524 <xTimerGenericCommand>
 8010922:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010924:	6a3b      	ldr	r3, [r7, #32]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d152      	bne.n	80109d0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801092a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801092e:	f383 8811 	msr	BASEPRI, r3
 8010932:	f3bf 8f6f 	isb	sy
 8010936:	f3bf 8f4f 	dsb	sy
 801093a:	61bb      	str	r3, [r7, #24]
}
 801093c:	bf00      	nop
 801093e:	bf00      	nop
 8010940:	e7fd      	b.n	801093e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010948:	f023 0301 	bic.w	r3, r3, #1
 801094c:	b2da      	uxtb	r2, r3
 801094e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010950:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010954:	e03d      	b.n	80109d2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010958:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801095c:	f043 0301 	orr.w	r3, r3, #1
 8010960:	b2da      	uxtb	r2, r3
 8010962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010964:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010968:	68ba      	ldr	r2, [r7, #8]
 801096a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801096c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801096e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010970:	699b      	ldr	r3, [r3, #24]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d10b      	bne.n	801098e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801097a:	f383 8811 	msr	BASEPRI, r3
 801097e:	f3bf 8f6f 	isb	sy
 8010982:	f3bf 8f4f 	dsb	sy
 8010986:	617b      	str	r3, [r7, #20]
}
 8010988:	bf00      	nop
 801098a:	bf00      	nop
 801098c:	e7fd      	b.n	801098a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801098e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010990:	699a      	ldr	r2, [r3, #24]
 8010992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010994:	18d1      	adds	r1, r2, r3
 8010996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801099a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801099c:	f7ff ff04 	bl	80107a8 <prvInsertTimerInActiveList>
					break;
 80109a0:	e017      	b.n	80109d2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80109a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80109a8:	f003 0302 	and.w	r3, r3, #2
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d103      	bne.n	80109b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80109b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109b2:	f000 fbe9 	bl	8011188 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80109b6:	e00c      	b.n	80109d2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80109be:	f023 0301 	bic.w	r3, r3, #1
 80109c2:	b2da      	uxtb	r2, r3
 80109c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80109ca:	e002      	b.n	80109d2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80109cc:	bf00      	nop
 80109ce:	e000      	b.n	80109d2 <prvProcessReceivedCommands+0x1a6>
					break;
 80109d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80109d2:	4b08      	ldr	r3, [pc, #32]	@ (80109f4 <prvProcessReceivedCommands+0x1c8>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	1d39      	adds	r1, r7, #4
 80109d8:	2200      	movs	r2, #0
 80109da:	4618      	mov	r0, r3
 80109dc:	f7fd ff66 	bl	800e8ac <xQueueReceive>
 80109e0:	4603      	mov	r3, r0
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	f47f af26 	bne.w	8010834 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80109e8:	bf00      	nop
 80109ea:	bf00      	nop
 80109ec:	3730      	adds	r7, #48	@ 0x30
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	24033aa8 	.word	0x24033aa8

080109f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b088      	sub	sp, #32
 80109fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80109fe:	e049      	b.n	8010a94 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a00:	4b2e      	ldr	r3, [pc, #184]	@ (8010abc <prvSwitchTimerLists+0xc4>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8010abc <prvSwitchTimerLists+0xc4>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	68db      	ldr	r3, [r3, #12]
 8010a12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	3304      	adds	r3, #4
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7fd fb7f 	bl	800e11c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	6a1b      	ldr	r3, [r3, #32]
 8010a22:	68f8      	ldr	r0, [r7, #12]
 8010a24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010a2c:	f003 0304 	and.w	r3, r3, #4
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d02f      	beq.n	8010a94 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	699b      	ldr	r3, [r3, #24]
 8010a38:	693a      	ldr	r2, [r7, #16]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010a3e:	68ba      	ldr	r2, [r7, #8]
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d90e      	bls.n	8010a64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	68ba      	ldr	r2, [r7, #8]
 8010a4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	68fa      	ldr	r2, [r7, #12]
 8010a50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a52:	4b1a      	ldr	r3, [pc, #104]	@ (8010abc <prvSwitchTimerLists+0xc4>)
 8010a54:	681a      	ldr	r2, [r3, #0]
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	3304      	adds	r3, #4
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	4610      	mov	r0, r2
 8010a5e:	f7fd fb24 	bl	800e0aa <vListInsert>
 8010a62:	e017      	b.n	8010a94 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a64:	2300      	movs	r3, #0
 8010a66:	9300      	str	r3, [sp, #0]
 8010a68:	2300      	movs	r3, #0
 8010a6a:	693a      	ldr	r2, [r7, #16]
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	68f8      	ldr	r0, [r7, #12]
 8010a70:	f7ff fd58 	bl	8010524 <xTimerGenericCommand>
 8010a74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d10b      	bne.n	8010a94 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a80:	f383 8811 	msr	BASEPRI, r3
 8010a84:	f3bf 8f6f 	isb	sy
 8010a88:	f3bf 8f4f 	dsb	sy
 8010a8c:	603b      	str	r3, [r7, #0]
}
 8010a8e:	bf00      	nop
 8010a90:	bf00      	nop
 8010a92:	e7fd      	b.n	8010a90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a94:	4b09      	ldr	r3, [pc, #36]	@ (8010abc <prvSwitchTimerLists+0xc4>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d1b0      	bne.n	8010a00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010a9e:	4b07      	ldr	r3, [pc, #28]	@ (8010abc <prvSwitchTimerLists+0xc4>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010aa4:	4b06      	ldr	r3, [pc, #24]	@ (8010ac0 <prvSwitchTimerLists+0xc8>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	4a04      	ldr	r2, [pc, #16]	@ (8010abc <prvSwitchTimerLists+0xc4>)
 8010aaa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010aac:	4a04      	ldr	r2, [pc, #16]	@ (8010ac0 <prvSwitchTimerLists+0xc8>)
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	6013      	str	r3, [r2, #0]
}
 8010ab2:	bf00      	nop
 8010ab4:	3718      	adds	r7, #24
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop
 8010abc:	24033aa0 	.word	0x24033aa0
 8010ac0:	24033aa4 	.word	0x24033aa4

08010ac4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010aca:	f000 f96d 	bl	8010da8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010ace:	4b15      	ldr	r3, [pc, #84]	@ (8010b24 <prvCheckForValidListAndQueue+0x60>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d120      	bne.n	8010b18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010ad6:	4814      	ldr	r0, [pc, #80]	@ (8010b28 <prvCheckForValidListAndQueue+0x64>)
 8010ad8:	f7fd fa96 	bl	800e008 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010adc:	4813      	ldr	r0, [pc, #76]	@ (8010b2c <prvCheckForValidListAndQueue+0x68>)
 8010ade:	f7fd fa93 	bl	800e008 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010ae2:	4b13      	ldr	r3, [pc, #76]	@ (8010b30 <prvCheckForValidListAndQueue+0x6c>)
 8010ae4:	4a10      	ldr	r2, [pc, #64]	@ (8010b28 <prvCheckForValidListAndQueue+0x64>)
 8010ae6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010ae8:	4b12      	ldr	r3, [pc, #72]	@ (8010b34 <prvCheckForValidListAndQueue+0x70>)
 8010aea:	4a10      	ldr	r2, [pc, #64]	@ (8010b2c <prvCheckForValidListAndQueue+0x68>)
 8010aec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010aee:	2300      	movs	r3, #0
 8010af0:	9300      	str	r3, [sp, #0]
 8010af2:	4b11      	ldr	r3, [pc, #68]	@ (8010b38 <prvCheckForValidListAndQueue+0x74>)
 8010af4:	4a11      	ldr	r2, [pc, #68]	@ (8010b3c <prvCheckForValidListAndQueue+0x78>)
 8010af6:	2110      	movs	r1, #16
 8010af8:	200a      	movs	r0, #10
 8010afa:	f7fd fba3 	bl	800e244 <xQueueGenericCreateStatic>
 8010afe:	4603      	mov	r3, r0
 8010b00:	4a08      	ldr	r2, [pc, #32]	@ (8010b24 <prvCheckForValidListAndQueue+0x60>)
 8010b02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010b04:	4b07      	ldr	r3, [pc, #28]	@ (8010b24 <prvCheckForValidListAndQueue+0x60>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d005      	beq.n	8010b18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010b0c:	4b05      	ldr	r3, [pc, #20]	@ (8010b24 <prvCheckForValidListAndQueue+0x60>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	490b      	ldr	r1, [pc, #44]	@ (8010b40 <prvCheckForValidListAndQueue+0x7c>)
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fe f9e4 	bl	800eee0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b18:	f000 f978 	bl	8010e0c <vPortExitCritical>
}
 8010b1c:	bf00      	nop
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	24033aa8 	.word	0x24033aa8
 8010b28:	24033a78 	.word	0x24033a78
 8010b2c:	24033a8c 	.word	0x24033a8c
 8010b30:	24033aa0 	.word	0x24033aa0
 8010b34:	24033aa4 	.word	0x24033aa4
 8010b38:	24033b54 	.word	0x24033b54
 8010b3c:	24033ab4 	.word	0x24033ab4
 8010b40:	08022138 	.word	0x08022138

08010b44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b44:	b480      	push	{r7}
 8010b46:	b085      	sub	sp, #20
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	3b04      	subs	r3, #4
 8010b54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	3b04      	subs	r3, #4
 8010b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	f023 0201 	bic.w	r2, r3, #1
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	3b04      	subs	r3, #4
 8010b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010b74:	4a0c      	ldr	r2, [pc, #48]	@ (8010ba8 <pxPortInitialiseStack+0x64>)
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	3b14      	subs	r3, #20
 8010b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010b80:	687a      	ldr	r2, [r7, #4]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	3b04      	subs	r3, #4
 8010b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	f06f 0202 	mvn.w	r2, #2
 8010b92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	3b20      	subs	r3, #32
 8010b98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3714      	adds	r7, #20
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr
 8010ba8:	08010bad 	.word	0x08010bad

08010bac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010bac:	b480      	push	{r7}
 8010bae:	b085      	sub	sp, #20
 8010bb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010bb6:	4b13      	ldr	r3, [pc, #76]	@ (8010c04 <prvTaskExitError+0x58>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010bbe:	d00b      	beq.n	8010bd8 <prvTaskExitError+0x2c>
	__asm volatile
 8010bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bc4:	f383 8811 	msr	BASEPRI, r3
 8010bc8:	f3bf 8f6f 	isb	sy
 8010bcc:	f3bf 8f4f 	dsb	sy
 8010bd0:	60fb      	str	r3, [r7, #12]
}
 8010bd2:	bf00      	nop
 8010bd4:	bf00      	nop
 8010bd6:	e7fd      	b.n	8010bd4 <prvTaskExitError+0x28>
	__asm volatile
 8010bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bdc:	f383 8811 	msr	BASEPRI, r3
 8010be0:	f3bf 8f6f 	isb	sy
 8010be4:	f3bf 8f4f 	dsb	sy
 8010be8:	60bb      	str	r3, [r7, #8]
}
 8010bea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010bec:	bf00      	nop
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d0fc      	beq.n	8010bee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010bf4:	bf00      	nop
 8010bf6:	bf00      	nop
 8010bf8:	3714      	adds	r7, #20
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	24000014 	.word	0x24000014
	...

08010c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c10:	4b07      	ldr	r3, [pc, #28]	@ (8010c30 <pxCurrentTCBConst2>)
 8010c12:	6819      	ldr	r1, [r3, #0]
 8010c14:	6808      	ldr	r0, [r1, #0]
 8010c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1a:	f380 8809 	msr	PSP, r0
 8010c1e:	f3bf 8f6f 	isb	sy
 8010c22:	f04f 0000 	mov.w	r0, #0
 8010c26:	f380 8811 	msr	BASEPRI, r0
 8010c2a:	4770      	bx	lr
 8010c2c:	f3af 8000 	nop.w

08010c30 <pxCurrentTCBConst2>:
 8010c30:	24033578 	.word	0x24033578
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010c34:	bf00      	nop
 8010c36:	bf00      	nop

08010c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010c38:	4808      	ldr	r0, [pc, #32]	@ (8010c5c <prvPortStartFirstTask+0x24>)
 8010c3a:	6800      	ldr	r0, [r0, #0]
 8010c3c:	6800      	ldr	r0, [r0, #0]
 8010c3e:	f380 8808 	msr	MSP, r0
 8010c42:	f04f 0000 	mov.w	r0, #0
 8010c46:	f380 8814 	msr	CONTROL, r0
 8010c4a:	b662      	cpsie	i
 8010c4c:	b661      	cpsie	f
 8010c4e:	f3bf 8f4f 	dsb	sy
 8010c52:	f3bf 8f6f 	isb	sy
 8010c56:	df00      	svc	0
 8010c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010c5a:	bf00      	nop
 8010c5c:	e000ed08 	.word	0xe000ed08

08010c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b086      	sub	sp, #24
 8010c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010c66:	4b47      	ldr	r3, [pc, #284]	@ (8010d84 <xPortStartScheduler+0x124>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	4a47      	ldr	r2, [pc, #284]	@ (8010d88 <xPortStartScheduler+0x128>)
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	d10b      	bne.n	8010c88 <xPortStartScheduler+0x28>
	__asm volatile
 8010c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c74:	f383 8811 	msr	BASEPRI, r3
 8010c78:	f3bf 8f6f 	isb	sy
 8010c7c:	f3bf 8f4f 	dsb	sy
 8010c80:	613b      	str	r3, [r7, #16]
}
 8010c82:	bf00      	nop
 8010c84:	bf00      	nop
 8010c86:	e7fd      	b.n	8010c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010c88:	4b3e      	ldr	r3, [pc, #248]	@ (8010d84 <xPortStartScheduler+0x124>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a3f      	ldr	r2, [pc, #252]	@ (8010d8c <xPortStartScheduler+0x12c>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d10b      	bne.n	8010caa <xPortStartScheduler+0x4a>
	__asm volatile
 8010c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c96:	f383 8811 	msr	BASEPRI, r3
 8010c9a:	f3bf 8f6f 	isb	sy
 8010c9e:	f3bf 8f4f 	dsb	sy
 8010ca2:	60fb      	str	r3, [r7, #12]
}
 8010ca4:	bf00      	nop
 8010ca6:	bf00      	nop
 8010ca8:	e7fd      	b.n	8010ca6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010caa:	4b39      	ldr	r3, [pc, #228]	@ (8010d90 <xPortStartScheduler+0x130>)
 8010cac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	22ff      	movs	r2, #255	@ 0xff
 8010cba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010cc4:	78fb      	ldrb	r3, [r7, #3]
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010ccc:	b2da      	uxtb	r2, r3
 8010cce:	4b31      	ldr	r3, [pc, #196]	@ (8010d94 <xPortStartScheduler+0x134>)
 8010cd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010cd2:	4b31      	ldr	r3, [pc, #196]	@ (8010d98 <xPortStartScheduler+0x138>)
 8010cd4:	2207      	movs	r2, #7
 8010cd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010cd8:	e009      	b.n	8010cee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8010cda:	4b2f      	ldr	r3, [pc, #188]	@ (8010d98 <xPortStartScheduler+0x138>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	3b01      	subs	r3, #1
 8010ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8010d98 <xPortStartScheduler+0x138>)
 8010ce2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010ce4:	78fb      	ldrb	r3, [r7, #3]
 8010ce6:	b2db      	uxtb	r3, r3
 8010ce8:	005b      	lsls	r3, r3, #1
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010cee:	78fb      	ldrb	r3, [r7, #3]
 8010cf0:	b2db      	uxtb	r3, r3
 8010cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010cf6:	2b80      	cmp	r3, #128	@ 0x80
 8010cf8:	d0ef      	beq.n	8010cda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010cfa:	4b27      	ldr	r3, [pc, #156]	@ (8010d98 <xPortStartScheduler+0x138>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	f1c3 0307 	rsb	r3, r3, #7
 8010d02:	2b04      	cmp	r3, #4
 8010d04:	d00b      	beq.n	8010d1e <xPortStartScheduler+0xbe>
	__asm volatile
 8010d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d0a:	f383 8811 	msr	BASEPRI, r3
 8010d0e:	f3bf 8f6f 	isb	sy
 8010d12:	f3bf 8f4f 	dsb	sy
 8010d16:	60bb      	str	r3, [r7, #8]
}
 8010d18:	bf00      	nop
 8010d1a:	bf00      	nop
 8010d1c:	e7fd      	b.n	8010d1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8010d98 <xPortStartScheduler+0x138>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	021b      	lsls	r3, r3, #8
 8010d24:	4a1c      	ldr	r2, [pc, #112]	@ (8010d98 <xPortStartScheduler+0x138>)
 8010d26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d28:	4b1b      	ldr	r3, [pc, #108]	@ (8010d98 <xPortStartScheduler+0x138>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010d30:	4a19      	ldr	r2, [pc, #100]	@ (8010d98 <xPortStartScheduler+0x138>)
 8010d32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	b2da      	uxtb	r2, r3
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010d3c:	4b17      	ldr	r3, [pc, #92]	@ (8010d9c <xPortStartScheduler+0x13c>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a16      	ldr	r2, [pc, #88]	@ (8010d9c <xPortStartScheduler+0x13c>)
 8010d42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010d46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d48:	4b14      	ldr	r3, [pc, #80]	@ (8010d9c <xPortStartScheduler+0x13c>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4a13      	ldr	r2, [pc, #76]	@ (8010d9c <xPortStartScheduler+0x13c>)
 8010d4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010d52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d54:	f000 f8da 	bl	8010f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d58:	4b11      	ldr	r3, [pc, #68]	@ (8010da0 <xPortStartScheduler+0x140>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010d5e:	f000 f8f9 	bl	8010f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010d62:	4b10      	ldr	r3, [pc, #64]	@ (8010da4 <xPortStartScheduler+0x144>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	4a0f      	ldr	r2, [pc, #60]	@ (8010da4 <xPortStartScheduler+0x144>)
 8010d68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010d6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d6e:	f7ff ff63 	bl	8010c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010d72:	f7fe fced 	bl	800f750 <vTaskSwitchContext>
	prvTaskExitError();
 8010d76:	f7ff ff19 	bl	8010bac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010d7a:	2300      	movs	r3, #0
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3718      	adds	r7, #24
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	e000ed00 	.word	0xe000ed00
 8010d88:	410fc271 	.word	0x410fc271
 8010d8c:	410fc270 	.word	0x410fc270
 8010d90:	e000e400 	.word	0xe000e400
 8010d94:	24033ba4 	.word	0x24033ba4
 8010d98:	24033ba8 	.word	0x24033ba8
 8010d9c:	e000ed20 	.word	0xe000ed20
 8010da0:	24000014 	.word	0x24000014
 8010da4:	e000ef34 	.word	0xe000ef34

08010da8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010da8:	b480      	push	{r7}
 8010daa:	b083      	sub	sp, #12
 8010dac:	af00      	add	r7, sp, #0
	__asm volatile
 8010dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010db2:	f383 8811 	msr	BASEPRI, r3
 8010db6:	f3bf 8f6f 	isb	sy
 8010dba:	f3bf 8f4f 	dsb	sy
 8010dbe:	607b      	str	r3, [r7, #4]
}
 8010dc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010dc2:	4b10      	ldr	r3, [pc, #64]	@ (8010e04 <vPortEnterCritical+0x5c>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8010e04 <vPortEnterCritical+0x5c>)
 8010dca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8010e04 <vPortEnterCritical+0x5c>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	2b01      	cmp	r3, #1
 8010dd2:	d110      	bne.n	8010df6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8010e08 <vPortEnterCritical+0x60>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	b2db      	uxtb	r3, r3
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d00b      	beq.n	8010df6 <vPortEnterCritical+0x4e>
	__asm volatile
 8010dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010de2:	f383 8811 	msr	BASEPRI, r3
 8010de6:	f3bf 8f6f 	isb	sy
 8010dea:	f3bf 8f4f 	dsb	sy
 8010dee:	603b      	str	r3, [r7, #0]
}
 8010df0:	bf00      	nop
 8010df2:	bf00      	nop
 8010df4:	e7fd      	b.n	8010df2 <vPortEnterCritical+0x4a>
	}
}
 8010df6:	bf00      	nop
 8010df8:	370c      	adds	r7, #12
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop
 8010e04:	24000014 	.word	0x24000014
 8010e08:	e000ed04 	.word	0xe000ed04

08010e0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010e12:	4b12      	ldr	r3, [pc, #72]	@ (8010e5c <vPortExitCritical+0x50>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d10b      	bne.n	8010e32 <vPortExitCritical+0x26>
	__asm volatile
 8010e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e1e:	f383 8811 	msr	BASEPRI, r3
 8010e22:	f3bf 8f6f 	isb	sy
 8010e26:	f3bf 8f4f 	dsb	sy
 8010e2a:	607b      	str	r3, [r7, #4]
}
 8010e2c:	bf00      	nop
 8010e2e:	bf00      	nop
 8010e30:	e7fd      	b.n	8010e2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010e32:	4b0a      	ldr	r3, [pc, #40]	@ (8010e5c <vPortExitCritical+0x50>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	3b01      	subs	r3, #1
 8010e38:	4a08      	ldr	r2, [pc, #32]	@ (8010e5c <vPortExitCritical+0x50>)
 8010e3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010e3c:	4b07      	ldr	r3, [pc, #28]	@ (8010e5c <vPortExitCritical+0x50>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d105      	bne.n	8010e50 <vPortExitCritical+0x44>
 8010e44:	2300      	movs	r3, #0
 8010e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	f383 8811 	msr	BASEPRI, r3
}
 8010e4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010e50:	bf00      	nop
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr
 8010e5c:	24000014 	.word	0x24000014

08010e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e60:	f3ef 8009 	mrs	r0, PSP
 8010e64:	f3bf 8f6f 	isb	sy
 8010e68:	4b15      	ldr	r3, [pc, #84]	@ (8010ec0 <pxCurrentTCBConst>)
 8010e6a:	681a      	ldr	r2, [r3, #0]
 8010e6c:	f01e 0f10 	tst.w	lr, #16
 8010e70:	bf08      	it	eq
 8010e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e7a:	6010      	str	r0, [r2, #0]
 8010e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010e80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010e84:	f380 8811 	msr	BASEPRI, r0
 8010e88:	f3bf 8f4f 	dsb	sy
 8010e8c:	f3bf 8f6f 	isb	sy
 8010e90:	f7fe fc5e 	bl	800f750 <vTaskSwitchContext>
 8010e94:	f04f 0000 	mov.w	r0, #0
 8010e98:	f380 8811 	msr	BASEPRI, r0
 8010e9c:	bc09      	pop	{r0, r3}
 8010e9e:	6819      	ldr	r1, [r3, #0]
 8010ea0:	6808      	ldr	r0, [r1, #0]
 8010ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea6:	f01e 0f10 	tst.w	lr, #16
 8010eaa:	bf08      	it	eq
 8010eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010eb0:	f380 8809 	msr	PSP, r0
 8010eb4:	f3bf 8f6f 	isb	sy
 8010eb8:	4770      	bx	lr
 8010eba:	bf00      	nop
 8010ebc:	f3af 8000 	nop.w

08010ec0 <pxCurrentTCBConst>:
 8010ec0:	24033578 	.word	0x24033578
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ec4:	bf00      	nop
 8010ec6:	bf00      	nop

08010ec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b082      	sub	sp, #8
 8010ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8010ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ed2:	f383 8811 	msr	BASEPRI, r3
 8010ed6:	f3bf 8f6f 	isb	sy
 8010eda:	f3bf 8f4f 	dsb	sy
 8010ede:	607b      	str	r3, [r7, #4]
}
 8010ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010ee2:	f7fe fb7b 	bl	800f5dc <xTaskIncrementTick>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d003      	beq.n	8010ef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010eec:	4b06      	ldr	r3, [pc, #24]	@ (8010f08 <xPortSysTickHandler+0x40>)
 8010eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ef2:	601a      	str	r2, [r3, #0]
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	f383 8811 	msr	BASEPRI, r3
}
 8010efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010f00:	bf00      	nop
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}
 8010f08:	e000ed04 	.word	0xe000ed04

08010f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010f10:	4b0b      	ldr	r3, [pc, #44]	@ (8010f40 <vPortSetupTimerInterrupt+0x34>)
 8010f12:	2200      	movs	r2, #0
 8010f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010f16:	4b0b      	ldr	r3, [pc, #44]	@ (8010f44 <vPortSetupTimerInterrupt+0x38>)
 8010f18:	2200      	movs	r2, #0
 8010f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f48 <vPortSetupTimerInterrupt+0x3c>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	4a0a      	ldr	r2, [pc, #40]	@ (8010f4c <vPortSetupTimerInterrupt+0x40>)
 8010f22:	fba2 2303 	umull	r2, r3, r2, r3
 8010f26:	099b      	lsrs	r3, r3, #6
 8010f28:	4a09      	ldr	r2, [pc, #36]	@ (8010f50 <vPortSetupTimerInterrupt+0x44>)
 8010f2a:	3b01      	subs	r3, #1
 8010f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010f2e:	4b04      	ldr	r3, [pc, #16]	@ (8010f40 <vPortSetupTimerInterrupt+0x34>)
 8010f30:	2207      	movs	r2, #7
 8010f32:	601a      	str	r2, [r3, #0]
}
 8010f34:	bf00      	nop
 8010f36:	46bd      	mov	sp, r7
 8010f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3c:	4770      	bx	lr
 8010f3e:	bf00      	nop
 8010f40:	e000e010 	.word	0xe000e010
 8010f44:	e000e018 	.word	0xe000e018
 8010f48:	24000004 	.word	0x24000004
 8010f4c:	10624dd3 	.word	0x10624dd3
 8010f50:	e000e014 	.word	0xe000e014

08010f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010f54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010f64 <vPortEnableVFP+0x10>
 8010f58:	6801      	ldr	r1, [r0, #0]
 8010f5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010f5e:	6001      	str	r1, [r0, #0]
 8010f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010f62:	bf00      	nop
 8010f64:	e000ed88 	.word	0xe000ed88

08010f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010f68:	b480      	push	{r7}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010f6e:	f3ef 8305 	mrs	r3, IPSR
 8010f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	2b0f      	cmp	r3, #15
 8010f78:	d915      	bls.n	8010fa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010f7a:	4a18      	ldr	r2, [pc, #96]	@ (8010fdc <vPortValidateInterruptPriority+0x74>)
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	4413      	add	r3, r2
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010f84:	4b16      	ldr	r3, [pc, #88]	@ (8010fe0 <vPortValidateInterruptPriority+0x78>)
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	7afa      	ldrb	r2, [r7, #11]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d20b      	bcs.n	8010fa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f92:	f383 8811 	msr	BASEPRI, r3
 8010f96:	f3bf 8f6f 	isb	sy
 8010f9a:	f3bf 8f4f 	dsb	sy
 8010f9e:	607b      	str	r3, [r7, #4]
}
 8010fa0:	bf00      	nop
 8010fa2:	bf00      	nop
 8010fa4:	e7fd      	b.n	8010fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8010fe4 <vPortValidateInterruptPriority+0x7c>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010fae:	4b0e      	ldr	r3, [pc, #56]	@ (8010fe8 <vPortValidateInterruptPriority+0x80>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d90b      	bls.n	8010fce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fba:	f383 8811 	msr	BASEPRI, r3
 8010fbe:	f3bf 8f6f 	isb	sy
 8010fc2:	f3bf 8f4f 	dsb	sy
 8010fc6:	603b      	str	r3, [r7, #0]
}
 8010fc8:	bf00      	nop
 8010fca:	bf00      	nop
 8010fcc:	e7fd      	b.n	8010fca <vPortValidateInterruptPriority+0x62>
	}
 8010fce:	bf00      	nop
 8010fd0:	3714      	adds	r7, #20
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr
 8010fda:	bf00      	nop
 8010fdc:	e000e3f0 	.word	0xe000e3f0
 8010fe0:	24033ba4 	.word	0x24033ba4
 8010fe4:	e000ed0c 	.word	0xe000ed0c
 8010fe8:	24033ba8 	.word	0x24033ba8

08010fec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b08a      	sub	sp, #40	@ 0x28
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010ff8:	f7fe fa34 	bl	800f464 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8011170 <pvPortMalloc+0x184>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d101      	bne.n	8011008 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011004:	f000 f924 	bl	8011250 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011008:	4b5a      	ldr	r3, [pc, #360]	@ (8011174 <pvPortMalloc+0x188>)
 801100a:	681a      	ldr	r2, [r3, #0]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	4013      	ands	r3, r2
 8011010:	2b00      	cmp	r3, #0
 8011012:	f040 8095 	bne.w	8011140 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d01e      	beq.n	801105a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801101c:	2208      	movs	r2, #8
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4413      	add	r3, r2
 8011022:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f003 0307 	and.w	r3, r3, #7
 801102a:	2b00      	cmp	r3, #0
 801102c:	d015      	beq.n	801105a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f023 0307 	bic.w	r3, r3, #7
 8011034:	3308      	adds	r3, #8
 8011036:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f003 0307 	and.w	r3, r3, #7
 801103e:	2b00      	cmp	r3, #0
 8011040:	d00b      	beq.n	801105a <pvPortMalloc+0x6e>
	__asm volatile
 8011042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	f3bf 8f6f 	isb	sy
 801104e:	f3bf 8f4f 	dsb	sy
 8011052:	617b      	str	r3, [r7, #20]
}
 8011054:	bf00      	nop
 8011056:	bf00      	nop
 8011058:	e7fd      	b.n	8011056 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d06f      	beq.n	8011140 <pvPortMalloc+0x154>
 8011060:	4b45      	ldr	r3, [pc, #276]	@ (8011178 <pvPortMalloc+0x18c>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	687a      	ldr	r2, [r7, #4]
 8011066:	429a      	cmp	r2, r3
 8011068:	d86a      	bhi.n	8011140 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801106a:	4b44      	ldr	r3, [pc, #272]	@ (801117c <pvPortMalloc+0x190>)
 801106c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801106e:	4b43      	ldr	r3, [pc, #268]	@ (801117c <pvPortMalloc+0x190>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011074:	e004      	b.n	8011080 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011078:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801107a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	429a      	cmp	r2, r3
 8011088:	d903      	bls.n	8011092 <pvPortMalloc+0xa6>
 801108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d1f1      	bne.n	8011076 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011092:	4b37      	ldr	r3, [pc, #220]	@ (8011170 <pvPortMalloc+0x184>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011098:	429a      	cmp	r2, r3
 801109a:	d051      	beq.n	8011140 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801109c:	6a3b      	ldr	r3, [r7, #32]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2208      	movs	r2, #8
 80110a2:	4413      	add	r3, r2
 80110a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80110a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a8:	681a      	ldr	r2, [r3, #0]
 80110aa:	6a3b      	ldr	r3, [r7, #32]
 80110ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80110ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110b0:	685a      	ldr	r2, [r3, #4]
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	1ad2      	subs	r2, r2, r3
 80110b6:	2308      	movs	r3, #8
 80110b8:	005b      	lsls	r3, r3, #1
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d920      	bls.n	8011100 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80110be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	4413      	add	r3, r2
 80110c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80110c6:	69bb      	ldr	r3, [r7, #24]
 80110c8:	f003 0307 	and.w	r3, r3, #7
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d00b      	beq.n	80110e8 <pvPortMalloc+0xfc>
	__asm volatile
 80110d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110d4:	f383 8811 	msr	BASEPRI, r3
 80110d8:	f3bf 8f6f 	isb	sy
 80110dc:	f3bf 8f4f 	dsb	sy
 80110e0:	613b      	str	r3, [r7, #16]
}
 80110e2:	bf00      	nop
 80110e4:	bf00      	nop
 80110e6:	e7fd      	b.n	80110e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80110e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ea:	685a      	ldr	r2, [r3, #4]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	1ad2      	subs	r2, r2, r3
 80110f0:	69bb      	ldr	r3, [r7, #24]
 80110f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80110f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110f6:	687a      	ldr	r2, [r7, #4]
 80110f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80110fa:	69b8      	ldr	r0, [r7, #24]
 80110fc:	f000 f90c 	bl	8011318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011100:	4b1d      	ldr	r3, [pc, #116]	@ (8011178 <pvPortMalloc+0x18c>)
 8011102:	681a      	ldr	r2, [r3, #0]
 8011104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011106:	685b      	ldr	r3, [r3, #4]
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	4a1b      	ldr	r2, [pc, #108]	@ (8011178 <pvPortMalloc+0x18c>)
 801110c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801110e:	4b1a      	ldr	r3, [pc, #104]	@ (8011178 <pvPortMalloc+0x18c>)
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	4b1b      	ldr	r3, [pc, #108]	@ (8011180 <pvPortMalloc+0x194>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	429a      	cmp	r2, r3
 8011118:	d203      	bcs.n	8011122 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801111a:	4b17      	ldr	r3, [pc, #92]	@ (8011178 <pvPortMalloc+0x18c>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	4a18      	ldr	r2, [pc, #96]	@ (8011180 <pvPortMalloc+0x194>)
 8011120:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011124:	685a      	ldr	r2, [r3, #4]
 8011126:	4b13      	ldr	r3, [pc, #76]	@ (8011174 <pvPortMalloc+0x188>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	431a      	orrs	r2, r3
 801112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801112e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011132:	2200      	movs	r2, #0
 8011134:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011136:	4b13      	ldr	r3, [pc, #76]	@ (8011184 <pvPortMalloc+0x198>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	3301      	adds	r3, #1
 801113c:	4a11      	ldr	r2, [pc, #68]	@ (8011184 <pvPortMalloc+0x198>)
 801113e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011140:	f7fe f99e 	bl	800f480 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	f003 0307 	and.w	r3, r3, #7
 801114a:	2b00      	cmp	r3, #0
 801114c:	d00b      	beq.n	8011166 <pvPortMalloc+0x17a>
	__asm volatile
 801114e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011152:	f383 8811 	msr	BASEPRI, r3
 8011156:	f3bf 8f6f 	isb	sy
 801115a:	f3bf 8f4f 	dsb	sy
 801115e:	60fb      	str	r3, [r7, #12]
}
 8011160:	bf00      	nop
 8011162:	bf00      	nop
 8011164:	e7fd      	b.n	8011162 <pvPortMalloc+0x176>
	return pvReturn;
 8011166:	69fb      	ldr	r3, [r7, #28]
}
 8011168:	4618      	mov	r0, r3
 801116a:	3728      	adds	r7, #40	@ 0x28
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}
 8011170:	240648f4 	.word	0x240648f4
 8011174:	24064908 	.word	0x24064908
 8011178:	240648f8 	.word	0x240648f8
 801117c:	240648ec 	.word	0x240648ec
 8011180:	240648fc 	.word	0x240648fc
 8011184:	24064900 	.word	0x24064900

08011188 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b086      	sub	sp, #24
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d04f      	beq.n	801123a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801119a:	2308      	movs	r3, #8
 801119c:	425b      	negs	r3, r3
 801119e:	697a      	ldr	r2, [r7, #20]
 80111a0:	4413      	add	r3, r2
 80111a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	685a      	ldr	r2, [r3, #4]
 80111ac:	4b25      	ldr	r3, [pc, #148]	@ (8011244 <vPortFree+0xbc>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	4013      	ands	r3, r2
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d10b      	bne.n	80111ce <vPortFree+0x46>
	__asm volatile
 80111b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111ba:	f383 8811 	msr	BASEPRI, r3
 80111be:	f3bf 8f6f 	isb	sy
 80111c2:	f3bf 8f4f 	dsb	sy
 80111c6:	60fb      	str	r3, [r7, #12]
}
 80111c8:	bf00      	nop
 80111ca:	bf00      	nop
 80111cc:	e7fd      	b.n	80111ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d00b      	beq.n	80111ee <vPortFree+0x66>
	__asm volatile
 80111d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111da:	f383 8811 	msr	BASEPRI, r3
 80111de:	f3bf 8f6f 	isb	sy
 80111e2:	f3bf 8f4f 	dsb	sy
 80111e6:	60bb      	str	r3, [r7, #8]
}
 80111e8:	bf00      	nop
 80111ea:	bf00      	nop
 80111ec:	e7fd      	b.n	80111ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	685a      	ldr	r2, [r3, #4]
 80111f2:	4b14      	ldr	r3, [pc, #80]	@ (8011244 <vPortFree+0xbc>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	4013      	ands	r3, r2
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d01e      	beq.n	801123a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d11a      	bne.n	801123a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	685a      	ldr	r2, [r3, #4]
 8011208:	4b0e      	ldr	r3, [pc, #56]	@ (8011244 <vPortFree+0xbc>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	43db      	mvns	r3, r3
 801120e:	401a      	ands	r2, r3
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011214:	f7fe f926 	bl	800f464 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011218:	693b      	ldr	r3, [r7, #16]
 801121a:	685a      	ldr	r2, [r3, #4]
 801121c:	4b0a      	ldr	r3, [pc, #40]	@ (8011248 <vPortFree+0xc0>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	4413      	add	r3, r2
 8011222:	4a09      	ldr	r2, [pc, #36]	@ (8011248 <vPortFree+0xc0>)
 8011224:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011226:	6938      	ldr	r0, [r7, #16]
 8011228:	f000 f876 	bl	8011318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801122c:	4b07      	ldr	r3, [pc, #28]	@ (801124c <vPortFree+0xc4>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	3301      	adds	r3, #1
 8011232:	4a06      	ldr	r2, [pc, #24]	@ (801124c <vPortFree+0xc4>)
 8011234:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011236:	f7fe f923 	bl	800f480 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801123a:	bf00      	nop
 801123c:	3718      	adds	r7, #24
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	24064908 	.word	0x24064908
 8011248:	240648f8 	.word	0x240648f8
 801124c:	24064904 	.word	0x24064904

08011250 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011250:	b480      	push	{r7}
 8011252:	b085      	sub	sp, #20
 8011254:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011256:	4b29      	ldr	r3, [pc, #164]	@ (80112fc <prvHeapInit+0xac>)
 8011258:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801125a:	4b29      	ldr	r3, [pc, #164]	@ (8011300 <prvHeapInit+0xb0>)
 801125c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	f003 0307 	and.w	r3, r3, #7
 8011264:	2b00      	cmp	r3, #0
 8011266:	d00c      	beq.n	8011282 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	3307      	adds	r3, #7
 801126c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f023 0307 	bic.w	r3, r3, #7
 8011274:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011276:	68ba      	ldr	r2, [r7, #8]
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	1ad3      	subs	r3, r2, r3
 801127c:	4a20      	ldr	r2, [pc, #128]	@ (8011300 <prvHeapInit+0xb0>)
 801127e:	4413      	add	r3, r2
 8011280:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011286:	4a1f      	ldr	r2, [pc, #124]	@ (8011304 <prvHeapInit+0xb4>)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801128c:	4b1d      	ldr	r3, [pc, #116]	@ (8011304 <prvHeapInit+0xb4>)
 801128e:	2200      	movs	r2, #0
 8011290:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	68ba      	ldr	r2, [r7, #8]
 8011296:	4413      	add	r3, r2
 8011298:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801129a:	2208      	movs	r2, #8
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	1a9b      	subs	r3, r3, r2
 80112a0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f023 0307 	bic.w	r3, r3, #7
 80112a8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	4a16      	ldr	r2, [pc, #88]	@ (8011308 <prvHeapInit+0xb8>)
 80112ae:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80112b0:	4b15      	ldr	r3, [pc, #84]	@ (8011308 <prvHeapInit+0xb8>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2200      	movs	r2, #0
 80112b6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80112b8:	4b13      	ldr	r3, [pc, #76]	@ (8011308 <prvHeapInit+0xb8>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	2200      	movs	r2, #0
 80112be:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	68fa      	ldr	r2, [r7, #12]
 80112c8:	1ad2      	subs	r2, r2, r3
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80112ce:	4b0e      	ldr	r3, [pc, #56]	@ (8011308 <prvHeapInit+0xb8>)
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	685b      	ldr	r3, [r3, #4]
 80112da:	4a0c      	ldr	r2, [pc, #48]	@ (801130c <prvHeapInit+0xbc>)
 80112dc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	685b      	ldr	r3, [r3, #4]
 80112e2:	4a0b      	ldr	r2, [pc, #44]	@ (8011310 <prvHeapInit+0xc0>)
 80112e4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80112e6:	4b0b      	ldr	r3, [pc, #44]	@ (8011314 <prvHeapInit+0xc4>)
 80112e8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80112ec:	601a      	str	r2, [r3, #0]
}
 80112ee:	bf00      	nop
 80112f0:	3714      	adds	r7, #20
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr
 80112fa:	bf00      	nop
 80112fc:	00030d40 	.word	0x00030d40
 8011300:	24033bac 	.word	0x24033bac
 8011304:	240648ec 	.word	0x240648ec
 8011308:	240648f4 	.word	0x240648f4
 801130c:	240648fc 	.word	0x240648fc
 8011310:	240648f8 	.word	0x240648f8
 8011314:	24064908 	.word	0x24064908

08011318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011318:	b480      	push	{r7}
 801131a:	b085      	sub	sp, #20
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011320:	4b28      	ldr	r3, [pc, #160]	@ (80113c4 <prvInsertBlockIntoFreeList+0xac>)
 8011322:	60fb      	str	r3, [r7, #12]
 8011324:	e002      	b.n	801132c <prvInsertBlockIntoFreeList+0x14>
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	60fb      	str	r3, [r7, #12]
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	687a      	ldr	r2, [r7, #4]
 8011332:	429a      	cmp	r2, r3
 8011334:	d8f7      	bhi.n	8011326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	68ba      	ldr	r2, [r7, #8]
 8011340:	4413      	add	r3, r2
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	429a      	cmp	r2, r3
 8011346:	d108      	bne.n	801135a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	685a      	ldr	r2, [r3, #4]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	441a      	add	r2, r3
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	68ba      	ldr	r2, [r7, #8]
 8011364:	441a      	add	r2, r3
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	429a      	cmp	r2, r3
 801136c:	d118      	bne.n	80113a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	4b15      	ldr	r3, [pc, #84]	@ (80113c8 <prvInsertBlockIntoFreeList+0xb0>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	429a      	cmp	r2, r3
 8011378:	d00d      	beq.n	8011396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	685a      	ldr	r2, [r3, #4]
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	441a      	add	r2, r3
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	681a      	ldr	r2, [r3, #0]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	601a      	str	r2, [r3, #0]
 8011394:	e008      	b.n	80113a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011396:	4b0c      	ldr	r3, [pc, #48]	@ (80113c8 <prvInsertBlockIntoFreeList+0xb0>)
 8011398:	681a      	ldr	r2, [r3, #0]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	601a      	str	r2, [r3, #0]
 801139e:	e003      	b.n	80113a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681a      	ldr	r2, [r3, #0]
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80113a8:	68fa      	ldr	r2, [r7, #12]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	429a      	cmp	r2, r3
 80113ae:	d002      	beq.n	80113b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	687a      	ldr	r2, [r7, #4]
 80113b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113b6:	bf00      	nop
 80113b8:	3714      	adds	r7, #20
 80113ba:	46bd      	mov	sp, r7
 80113bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c0:	4770      	bx	lr
 80113c2:	bf00      	nop
 80113c4:	240648ec 	.word	0x240648ec
 80113c8:	240648f4 	.word	0x240648f4

080113cc <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 80113cc:	4b04      	ldr	r3, [pc, #16]	@ (80113e0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	b10a      	cbz	r2, 80113d6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xa>
 80113d2:	4803      	ldr	r0, [pc, #12]	@ (80113e0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 80113d4:	4770      	bx	lr
 80113d6:	4a03      	ldr	r2, [pc, #12]	@ (80113e4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x18>)
 80113d8:	4801      	ldr	r0, [pc, #4]	@ (80113e0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 80113da:	6812      	ldr	r2, [r2, #0]
 80113dc:	601a      	str	r2, [r3, #0]
 80113de:	4770      	bx	lr
 80113e0:	24000020 	.word	0x24000020
 80113e4:	24000e10 	.word	0x24000e10

080113e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 80113e8:	4a02      	ldr	r2, [pc, #8]	@ (80113f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 80113ea:	4b03      	ldr	r3, [pc, #12]	@ (80113f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 80113ec:	6812      	ldr	r2, [r2, #0]
 80113ee:	601a      	str	r2, [r3, #0]
 80113f0:	4770      	bx	lr
 80113f2:	bf00      	nop
 80113f4:	24000e10 	.word	0x24000e10
 80113f8:	24000020 	.word	0x24000020

080113fc <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 80113fc:	f004 b8a2 	b.w	8015544 <autoware_control_msgs__msg__Control__init>

08011400 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 8011400:	f004 b8f6 	b.w	80155f0 <autoware_control_msgs__msg__Control__fini>

08011404 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8011404:	b510      	push	{r4, lr}
 8011406:	4c0c      	ldr	r4, [pc, #48]	@ (8011438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 8011408:	f001 f91e 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801140c:	60e0      	str	r0, [r4, #12]
 801140e:	f001 f91b 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011412:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011414:	f000 f81a 	bl	801144c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 8011418:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801141c:	f000 f832 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8011420:	4b06      	ldr	r3, [pc, #24]	@ (801143c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8011422:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8011426:	681a      	ldr	r2, [r3, #0]
 8011428:	b10a      	cbz	r2, 801142e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 801142a:	4804      	ldr	r0, [pc, #16]	@ (801143c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 801142c:	bd10      	pop	{r4, pc}
 801142e:	4a04      	ldr	r2, [pc, #16]	@ (8011440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 8011430:	4802      	ldr	r0, [pc, #8]	@ (801143c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8011432:	6812      	ldr	r2, [r2, #0]
 8011434:	601a      	str	r2, [r3, #0]
 8011436:	bd10      	pop	{r4, pc}
 8011438:	2400002c 	.word	0x2400002c
 801143c:	2400011c 	.word	0x2400011c
 8011440:	24000e14 	.word	0x24000e14

08011444 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 8011444:	f004 b8e8 	b.w	8015618 <autoware_control_msgs__msg__Lateral__init>

08011448 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 8011448:	f004 b90a 	b.w	8015660 <autoware_control_msgs__msg__Lateral__fini>

0801144c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 801144c:	b510      	push	{r4, lr}
 801144e:	4c08      	ldr	r4, [pc, #32]	@ (8011470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 8011450:	f001 f8fa 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011454:	60e0      	str	r0, [r4, #12]
 8011456:	f001 f8f7 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801145a:	4b06      	ldr	r3, [pc, #24]	@ (8011474 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 801145c:	64a0      	str	r0, [r4, #72]	@ 0x48
 801145e:	681a      	ldr	r2, [r3, #0]
 8011460:	b10a      	cbz	r2, 8011466 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 8011462:	4804      	ldr	r0, [pc, #16]	@ (8011474 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8011464:	bd10      	pop	{r4, pc}
 8011466:	4a04      	ldr	r2, [pc, #16]	@ (8011478 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 8011468:	4802      	ldr	r0, [pc, #8]	@ (8011474 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 801146a:	6812      	ldr	r2, [r2, #0]
 801146c:	601a      	str	r2, [r3, #0]
 801146e:	bd10      	pop	{r4, pc}
 8011470:	24000128 	.word	0x24000128
 8011474:	24000254 	.word	0x24000254
 8011478:	24000e14 	.word	0x24000e14

0801147c <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 801147c:	f004 b8fc 	b.w	8015678 <autoware_control_msgs__msg__Longitudinal__init>

08011480 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 8011480:	f004 b91e 	b.w	80156c0 <autoware_control_msgs__msg__Longitudinal__fini>

08011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8011484:	b510      	push	{r4, lr}
 8011486:	4c08      	ldr	r4, [pc, #32]	@ (80114a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 8011488:	f001 f8de 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801148c:	60e0      	str	r0, [r4, #12]
 801148e:	f001 f8db 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011492:	4b06      	ldr	r3, [pc, #24]	@ (80114ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8011494:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011496:	681a      	ldr	r2, [r3, #0]
 8011498:	b10a      	cbz	r2, 801149e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 801149a:	4804      	ldr	r0, [pc, #16]	@ (80114ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 801149c:	bd10      	pop	{r4, pc}
 801149e:	4a04      	ldr	r2, [pc, #16]	@ (80114b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 80114a0:	4802      	ldr	r0, [pc, #8]	@ (80114ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 80114a2:	6812      	ldr	r2, [r2, #0]
 80114a4:	601a      	str	r2, [r3, #0]
 80114a6:	bd10      	pop	{r4, pc}
 80114a8:	24000260 	.word	0x24000260
 80114ac:	24000404 	.word	0x24000404
 80114b0:	24000e14 	.word	0x24000e14

080114b4 <get_serialized_size_autoware_control_msgs__msg__Control>:
 80114b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114b6:	4604      	mov	r4, r0
 80114b8:	b1c8      	cbz	r0, 80114ee <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 80114ba:	460f      	mov	r7, r1
 80114bc:	f001 f8d2 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80114c0:	4606      	mov	r6, r0
 80114c2:	f104 0008 	add.w	r0, r4, #8
 80114c6:	443e      	add	r6, r7
 80114c8:	4631      	mov	r1, r6
 80114ca:	f001 f8cb 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80114ce:	4605      	mov	r5, r0
 80114d0:	f104 0010 	add.w	r0, r4, #16
 80114d4:	4435      	add	r5, r6
 80114d6:	4629      	mov	r1, r5
 80114d8:	f000 f8a2 	bl	8011620 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 80114dc:	4601      	mov	r1, r0
 80114de:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80114e2:	440d      	add	r5, r1
 80114e4:	4629      	mov	r1, r5
 80114e6:	f000 f9a7 	bl	8011838 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 80114ea:	1bc0      	subs	r0, r0, r7
 80114ec:	4428      	add	r0, r5
 80114ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080114f0 <_Control__cdr_deserialize>:
 80114f0:	b570      	push	{r4, r5, r6, lr}
 80114f2:	460c      	mov	r4, r1
 80114f4:	b329      	cbz	r1, 8011542 <_Control__cdr_deserialize+0x52>
 80114f6:	4605      	mov	r5, r0
 80114f8:	f001 f918 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80114fc:	4603      	mov	r3, r0
 80114fe:	4621      	mov	r1, r4
 8011500:	4628      	mov	r0, r5
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	68db      	ldr	r3, [r3, #12]
 8011506:	4798      	blx	r3
 8011508:	f001 f910 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801150c:	4603      	mov	r3, r0
 801150e:	f104 0108 	add.w	r1, r4, #8
 8011512:	4628      	mov	r0, r5
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	68db      	ldr	r3, [r3, #12]
 8011518:	4798      	blx	r3
 801151a:	f000 f95b 	bl	80117d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 801151e:	4603      	mov	r3, r0
 8011520:	f104 0110 	add.w	r1, r4, #16
 8011524:	4628      	mov	r0, r5
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	68db      	ldr	r3, [r3, #12]
 801152a:	4798      	blx	r3
 801152c:	f000 fa28 	bl	8011980 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8011530:	4603      	mov	r3, r0
 8011532:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 8011536:	4628      	mov	r0, r5
 8011538:	685b      	ldr	r3, [r3, #4]
 801153a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	4718      	bx	r3
 8011542:	4608      	mov	r0, r1
 8011544:	bd70      	pop	{r4, r5, r6, pc}
 8011546:	bf00      	nop

08011548 <_Control__cdr_serialize>:
 8011548:	b338      	cbz	r0, 801159a <_Control__cdr_serialize+0x52>
 801154a:	b570      	push	{r4, r5, r6, lr}
 801154c:	4604      	mov	r4, r0
 801154e:	460d      	mov	r5, r1
 8011550:	f001 f8ec 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011554:	4603      	mov	r3, r0
 8011556:	4629      	mov	r1, r5
 8011558:	4620      	mov	r0, r4
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	689b      	ldr	r3, [r3, #8]
 801155e:	4798      	blx	r3
 8011560:	f001 f8e4 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011564:	4603      	mov	r3, r0
 8011566:	4629      	mov	r1, r5
 8011568:	f104 0008 	add.w	r0, r4, #8
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	689b      	ldr	r3, [r3, #8]
 8011570:	4798      	blx	r3
 8011572:	f000 f92f 	bl	80117d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 8011576:	4603      	mov	r3, r0
 8011578:	4629      	mov	r1, r5
 801157a:	f104 0010 	add.w	r0, r4, #16
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	689b      	ldr	r3, [r3, #8]
 8011582:	4798      	blx	r3
 8011584:	f000 f9fc 	bl	8011980 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8011588:	4603      	mov	r3, r0
 801158a:	4629      	mov	r1, r5
 801158c:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011596:	689b      	ldr	r3, [r3, #8]
 8011598:	4718      	bx	r3
 801159a:	4770      	bx	lr

0801159c <_Control__get_serialized_size>:
 801159c:	b538      	push	{r3, r4, r5, lr}
 801159e:	4604      	mov	r4, r0
 80115a0:	b1b8      	cbz	r0, 80115d2 <_Control__get_serialized_size+0x36>
 80115a2:	2100      	movs	r1, #0
 80115a4:	f001 f85e 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80115a8:	4605      	mov	r5, r0
 80115aa:	f104 0008 	add.w	r0, r4, #8
 80115ae:	4629      	mov	r1, r5
 80115b0:	f001 f858 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80115b4:	4601      	mov	r1, r0
 80115b6:	f104 0010 	add.w	r0, r4, #16
 80115ba:	440d      	add	r5, r1
 80115bc:	4629      	mov	r1, r5
 80115be:	f000 f82f 	bl	8011620 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 80115c2:	4601      	mov	r1, r0
 80115c4:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80115c8:	440d      	add	r5, r1
 80115ca:	4629      	mov	r1, r5
 80115cc:	f000 f934 	bl	8011838 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 80115d0:	4428      	add	r0, r5
 80115d2:	bd38      	pop	{r3, r4, r5, pc}

080115d4 <_Control__max_serialized_size>:
 80115d4:	b530      	push	{r4, r5, lr}
 80115d6:	b083      	sub	sp, #12
 80115d8:	2301      	movs	r3, #1
 80115da:	2100      	movs	r1, #0
 80115dc:	f10d 0007 	add.w	r0, sp, #7
 80115e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80115e4:	f001 f88e 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 80115e8:	4604      	mov	r4, r0
 80115ea:	f10d 0007 	add.w	r0, sp, #7
 80115ee:	4621      	mov	r1, r4
 80115f0:	f001 f888 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 80115f4:	4605      	mov	r5, r0
 80115f6:	f10d 0007 	add.w	r0, sp, #7
 80115fa:	4425      	add	r5, r4
 80115fc:	4629      	mov	r1, r5
 80115fe:	f000 f8c7 	bl	8011790 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 8011602:	4604      	mov	r4, r0
 8011604:	f10d 0007 	add.w	r0, sp, #7
 8011608:	442c      	add	r4, r5
 801160a:	4621      	mov	r1, r4
 801160c:	f000 f980 	bl	8011910 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8011610:	4420      	add	r0, r4
 8011612:	b003      	add	sp, #12
 8011614:	bd30      	pop	{r4, r5, pc}
 8011616:	bf00      	nop

08011618 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8011618:	4800      	ldr	r0, [pc, #0]	@ (801161c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 801161a:	4770      	bx	lr
 801161c:	24000410 	.word	0x24000410

08011620 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 8011620:	b5b0      	push	{r4, r5, r7, lr}
 8011622:	4604      	mov	r4, r0
 8011624:	b1f0      	cbz	r0, 8011664 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 8011626:	460d      	mov	r5, r1
 8011628:	f001 f81c 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 801162c:	4607      	mov	r7, r0
 801162e:	f104 0008 	add.w	r0, r4, #8
 8011632:	442f      	add	r7, r5
 8011634:	f1c5 0501 	rsb	r5, r5, #1
 8011638:	4639      	mov	r1, r7
 801163a:	f001 f813 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 801163e:	4407      	add	r7, r0
 8011640:	2104      	movs	r1, #4
 8011642:	4638      	mov	r0, r7
 8011644:	f002 fb12 	bl	8013c6c <ucdr_alignment>
 8011648:	2104      	movs	r1, #4
 801164a:	1844      	adds	r4, r0, r1
 801164c:	443c      	add	r4, r7
 801164e:	4620      	mov	r0, r4
 8011650:	f002 fb0c 	bl	8013c6c <ucdr_alignment>
 8011654:	3004      	adds	r0, #4
 8011656:	2101      	movs	r1, #1
 8011658:	4404      	add	r4, r0
 801165a:	4620      	mov	r0, r4
 801165c:	f002 fb06 	bl	8013c6c <ucdr_alignment>
 8011660:	4428      	add	r0, r5
 8011662:	4420      	add	r0, r4
 8011664:	bdb0      	pop	{r4, r5, r7, pc}
 8011666:	bf00      	nop

08011668 <_Lateral__cdr_deserialize>:
 8011668:	b538      	push	{r3, r4, r5, lr}
 801166a:	460c      	mov	r4, r1
 801166c:	b311      	cbz	r1, 80116b4 <_Lateral__cdr_deserialize+0x4c>
 801166e:	4605      	mov	r5, r0
 8011670:	f001 f85c 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011674:	4603      	mov	r3, r0
 8011676:	4621      	mov	r1, r4
 8011678:	4628      	mov	r0, r5
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	68db      	ldr	r3, [r3, #12]
 801167e:	4798      	blx	r3
 8011680:	f001 f854 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011684:	4603      	mov	r3, r0
 8011686:	f104 0108 	add.w	r1, r4, #8
 801168a:	4628      	mov	r0, r5
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	68db      	ldr	r3, [r3, #12]
 8011690:	4798      	blx	r3
 8011692:	f104 0110 	add.w	r1, r4, #16
 8011696:	4628      	mov	r0, r5
 8011698:	f002 f86a 	bl	8013770 <ucdr_deserialize_float>
 801169c:	f104 0114 	add.w	r1, r4, #20
 80116a0:	4628      	mov	r0, r5
 80116a2:	f002 f865 	bl	8013770 <ucdr_deserialize_float>
 80116a6:	f104 0118 	add.w	r1, r4, #24
 80116aa:	4628      	mov	r0, r5
 80116ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116b0:	f001 b856 	b.w	8012760 <ucdr_deserialize_bool>
 80116b4:	4608      	mov	r0, r1
 80116b6:	bd38      	pop	{r3, r4, r5, pc}

080116b8 <_Lateral__cdr_serialize>:
 80116b8:	b318      	cbz	r0, 8011702 <_Lateral__cdr_serialize+0x4a>
 80116ba:	b538      	push	{r3, r4, r5, lr}
 80116bc:	4604      	mov	r4, r0
 80116be:	460d      	mov	r5, r1
 80116c0:	f001 f834 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80116c4:	4603      	mov	r3, r0
 80116c6:	4629      	mov	r1, r5
 80116c8:	4620      	mov	r0, r4
 80116ca:	685b      	ldr	r3, [r3, #4]
 80116cc:	689b      	ldr	r3, [r3, #8]
 80116ce:	4798      	blx	r3
 80116d0:	f001 f82c 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80116d4:	4603      	mov	r3, r0
 80116d6:	4629      	mov	r1, r5
 80116d8:	f104 0008 	add.w	r0, r4, #8
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	689b      	ldr	r3, [r3, #8]
 80116e0:	4798      	blx	r3
 80116e2:	ed94 0a04 	vldr	s0, [r4, #16]
 80116e6:	4628      	mov	r0, r5
 80116e8:	f001 ffaa 	bl	8013640 <ucdr_serialize_float>
 80116ec:	ed94 0a05 	vldr	s0, [r4, #20]
 80116f0:	4628      	mov	r0, r5
 80116f2:	f001 ffa5 	bl	8013640 <ucdr_serialize_float>
 80116f6:	7e21      	ldrb	r1, [r4, #24]
 80116f8:	4628      	mov	r0, r5
 80116fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116fe:	f001 b819 	b.w	8012734 <ucdr_serialize_bool>
 8011702:	4770      	bx	lr

08011704 <_Lateral__get_serialized_size>:
 8011704:	b538      	push	{r3, r4, r5, lr}
 8011706:	4604      	mov	r4, r0
 8011708:	b1d8      	cbz	r0, 8011742 <_Lateral__get_serialized_size+0x3e>
 801170a:	2100      	movs	r1, #0
 801170c:	f000 ffaa 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 8011710:	4605      	mov	r5, r0
 8011712:	f104 0008 	add.w	r0, r4, #8
 8011716:	4629      	mov	r1, r5
 8011718:	f000 ffa4 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 801171c:	4405      	add	r5, r0
 801171e:	2104      	movs	r1, #4
 8011720:	4628      	mov	r0, r5
 8011722:	f002 faa3 	bl	8013c6c <ucdr_alignment>
 8011726:	2104      	movs	r1, #4
 8011728:	4408      	add	r0, r1
 801172a:	1944      	adds	r4, r0, r5
 801172c:	4620      	mov	r0, r4
 801172e:	f002 fa9d 	bl	8013c6c <ucdr_alignment>
 8011732:	3004      	adds	r0, #4
 8011734:	2101      	movs	r1, #1
 8011736:	4404      	add	r4, r0
 8011738:	4620      	mov	r0, r4
 801173a:	f002 fa97 	bl	8013c6c <ucdr_alignment>
 801173e:	3001      	adds	r0, #1
 8011740:	4420      	add	r0, r4
 8011742:	bd38      	pop	{r3, r4, r5, pc}

08011744 <_Lateral__max_serialized_size>:
 8011744:	b530      	push	{r4, r5, lr}
 8011746:	b083      	sub	sp, #12
 8011748:	2501      	movs	r5, #1
 801174a:	2100      	movs	r1, #0
 801174c:	f10d 0007 	add.w	r0, sp, #7
 8011750:	f88d 5007 	strb.w	r5, [sp, #7]
 8011754:	f000 ffd6 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 8011758:	4604      	mov	r4, r0
 801175a:	f10d 0007 	add.w	r0, sp, #7
 801175e:	4621      	mov	r1, r4
 8011760:	f000 ffd0 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 8011764:	4404      	add	r4, r0
 8011766:	2104      	movs	r1, #4
 8011768:	4620      	mov	r0, r4
 801176a:	f002 fa7f 	bl	8013c6c <ucdr_alignment>
 801176e:	2104      	movs	r1, #4
 8011770:	4408      	add	r0, r1
 8011772:	4404      	add	r4, r0
 8011774:	4620      	mov	r0, r4
 8011776:	f002 fa79 	bl	8013c6c <ucdr_alignment>
 801177a:	3004      	adds	r0, #4
 801177c:	4629      	mov	r1, r5
 801177e:	4404      	add	r4, r0
 8011780:	4620      	mov	r0, r4
 8011782:	f002 fa73 	bl	8013c6c <ucdr_alignment>
 8011786:	4428      	add	r0, r5
 8011788:	4420      	add	r0, r4
 801178a:	b003      	add	sp, #12
 801178c:	bd30      	pop	{r4, r5, pc}
 801178e:	bf00      	nop

08011790 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 8011790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011792:	2701      	movs	r7, #1
 8011794:	460c      	mov	r4, r1
 8011796:	4606      	mov	r6, r0
 8011798:	7007      	strb	r7, [r0, #0]
 801179a:	f000 ffb3 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 801179e:	4605      	mov	r5, r0
 80117a0:	4630      	mov	r0, r6
 80117a2:	4425      	add	r5, r4
 80117a4:	1b3c      	subs	r4, r7, r4
 80117a6:	4629      	mov	r1, r5
 80117a8:	f000 ffac 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 80117ac:	4405      	add	r5, r0
 80117ae:	2104      	movs	r1, #4
 80117b0:	4628      	mov	r0, r5
 80117b2:	f002 fa5b 	bl	8013c6c <ucdr_alignment>
 80117b6:	2104      	movs	r1, #4
 80117b8:	4408      	add	r0, r1
 80117ba:	4405      	add	r5, r0
 80117bc:	4628      	mov	r0, r5
 80117be:	f002 fa55 	bl	8013c6c <ucdr_alignment>
 80117c2:	3004      	adds	r0, #4
 80117c4:	4639      	mov	r1, r7
 80117c6:	4405      	add	r5, r0
 80117c8:	4628      	mov	r0, r5
 80117ca:	f002 fa4f 	bl	8013c6c <ucdr_alignment>
 80117ce:	4420      	add	r0, r4
 80117d0:	4428      	add	r0, r5
 80117d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080117d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 80117d4:	4800      	ldr	r0, [pc, #0]	@ (80117d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 80117d6:	4770      	bx	lr
 80117d8:	24000438 	.word	0x24000438

080117dc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 80117dc:	b570      	push	{r4, r5, r6, lr}
 80117de:	460c      	mov	r4, r1
 80117e0:	4606      	mov	r6, r0
 80117e2:	f000 ff3f 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80117e6:	4605      	mov	r5, r0
 80117e8:	f106 0008 	add.w	r0, r6, #8
 80117ec:	4425      	add	r5, r4
 80117ee:	f1c4 0401 	rsb	r4, r4, #1
 80117f2:	4629      	mov	r1, r5
 80117f4:	f000 ff36 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80117f8:	4405      	add	r5, r0
 80117fa:	2104      	movs	r1, #4
 80117fc:	4628      	mov	r0, r5
 80117fe:	f002 fa35 	bl	8013c6c <ucdr_alignment>
 8011802:	2104      	movs	r1, #4
 8011804:	4408      	add	r0, r1
 8011806:	4405      	add	r5, r0
 8011808:	4628      	mov	r0, r5
 801180a:	f002 fa2f 	bl	8013c6c <ucdr_alignment>
 801180e:	2104      	movs	r1, #4
 8011810:	4408      	add	r0, r1
 8011812:	1946      	adds	r6, r0, r5
 8011814:	4630      	mov	r0, r6
 8011816:	f002 fa29 	bl	8013c6c <ucdr_alignment>
 801181a:	1d05      	adds	r5, r0, #4
 801181c:	2101      	movs	r1, #1
 801181e:	4435      	add	r5, r6
 8011820:	4628      	mov	r0, r5
 8011822:	f002 fa23 	bl	8013c6c <ucdr_alignment>
 8011826:	2101      	movs	r1, #1
 8011828:	4408      	add	r0, r1
 801182a:	4405      	add	r5, r0
 801182c:	4628      	mov	r0, r5
 801182e:	f002 fa1d 	bl	8013c6c <ucdr_alignment>
 8011832:	4420      	add	r0, r4
 8011834:	4428      	add	r0, r5
 8011836:	bd70      	pop	{r4, r5, r6, pc}

08011838 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 8011838:	b108      	cbz	r0, 801183e <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 801183a:	f7ff bfcf 	b.w	80117dc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 801183e:	4770      	bx	lr

08011840 <_Longitudinal__get_serialized_size>:
 8011840:	b110      	cbz	r0, 8011848 <_Longitudinal__get_serialized_size+0x8>
 8011842:	2100      	movs	r1, #0
 8011844:	f7ff bfca 	b.w	80117dc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop

0801184c <_Longitudinal__cdr_deserialize>:
 801184c:	b538      	push	{r3, r4, r5, lr}
 801184e:	460c      	mov	r4, r1
 8011850:	b361      	cbz	r1, 80118ac <_Longitudinal__cdr_deserialize+0x60>
 8011852:	4605      	mov	r5, r0
 8011854:	f000 ff6a 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011858:	4603      	mov	r3, r0
 801185a:	4621      	mov	r1, r4
 801185c:	4628      	mov	r0, r5
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	4798      	blx	r3
 8011864:	f000 ff62 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011868:	4603      	mov	r3, r0
 801186a:	f104 0108 	add.w	r1, r4, #8
 801186e:	4628      	mov	r0, r5
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	68db      	ldr	r3, [r3, #12]
 8011874:	4798      	blx	r3
 8011876:	f104 0110 	add.w	r1, r4, #16
 801187a:	4628      	mov	r0, r5
 801187c:	f001 ff78 	bl	8013770 <ucdr_deserialize_float>
 8011880:	f104 0114 	add.w	r1, r4, #20
 8011884:	4628      	mov	r0, r5
 8011886:	f001 ff73 	bl	8013770 <ucdr_deserialize_float>
 801188a:	f104 0118 	add.w	r1, r4, #24
 801188e:	4628      	mov	r0, r5
 8011890:	f001 ff6e 	bl	8013770 <ucdr_deserialize_float>
 8011894:	f104 011c 	add.w	r1, r4, #28
 8011898:	4628      	mov	r0, r5
 801189a:	f000 ff61 	bl	8012760 <ucdr_deserialize_bool>
 801189e:	f104 011d 	add.w	r1, r4, #29
 80118a2:	4628      	mov	r0, r5
 80118a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118a8:	f000 bf5a 	b.w	8012760 <ucdr_deserialize_bool>
 80118ac:	4608      	mov	r0, r1
 80118ae:	bd38      	pop	{r3, r4, r5, pc}

080118b0 <_Longitudinal__cdr_serialize>:
 80118b0:	b360      	cbz	r0, 801190c <_Longitudinal__cdr_serialize+0x5c>
 80118b2:	b538      	push	{r3, r4, r5, lr}
 80118b4:	4604      	mov	r4, r0
 80118b6:	460d      	mov	r5, r1
 80118b8:	f000 ff38 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80118bc:	4603      	mov	r3, r0
 80118be:	4629      	mov	r1, r5
 80118c0:	4620      	mov	r0, r4
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	689b      	ldr	r3, [r3, #8]
 80118c6:	4798      	blx	r3
 80118c8:	f000 ff30 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80118cc:	4603      	mov	r3, r0
 80118ce:	4629      	mov	r1, r5
 80118d0:	f104 0008 	add.w	r0, r4, #8
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	689b      	ldr	r3, [r3, #8]
 80118d8:	4798      	blx	r3
 80118da:	ed94 0a04 	vldr	s0, [r4, #16]
 80118de:	4628      	mov	r0, r5
 80118e0:	f001 feae 	bl	8013640 <ucdr_serialize_float>
 80118e4:	ed94 0a05 	vldr	s0, [r4, #20]
 80118e8:	4628      	mov	r0, r5
 80118ea:	f001 fea9 	bl	8013640 <ucdr_serialize_float>
 80118ee:	ed94 0a06 	vldr	s0, [r4, #24]
 80118f2:	4628      	mov	r0, r5
 80118f4:	f001 fea4 	bl	8013640 <ucdr_serialize_float>
 80118f8:	7f21      	ldrb	r1, [r4, #28]
 80118fa:	4628      	mov	r0, r5
 80118fc:	f000 ff1a 	bl	8012734 <ucdr_serialize_bool>
 8011900:	7f61      	ldrb	r1, [r4, #29]
 8011902:	4628      	mov	r0, r5
 8011904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011908:	f000 bf14 	b.w	8012734 <ucdr_serialize_bool>
 801190c:	4770      	bx	lr
 801190e:	bf00      	nop

08011910 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 8011910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011912:	2701      	movs	r7, #1
 8011914:	460c      	mov	r4, r1
 8011916:	4606      	mov	r6, r0
 8011918:	7007      	strb	r7, [r0, #0]
 801191a:	f000 fef3 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 801191e:	4605      	mov	r5, r0
 8011920:	4630      	mov	r0, r6
 8011922:	4425      	add	r5, r4
 8011924:	1b3c      	subs	r4, r7, r4
 8011926:	4629      	mov	r1, r5
 8011928:	f000 feec 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 801192c:	4405      	add	r5, r0
 801192e:	2104      	movs	r1, #4
 8011930:	4628      	mov	r0, r5
 8011932:	f002 f99b 	bl	8013c6c <ucdr_alignment>
 8011936:	2104      	movs	r1, #4
 8011938:	4408      	add	r0, r1
 801193a:	4405      	add	r5, r0
 801193c:	4628      	mov	r0, r5
 801193e:	f002 f995 	bl	8013c6c <ucdr_alignment>
 8011942:	2104      	movs	r1, #4
 8011944:	4408      	add	r0, r1
 8011946:	1946      	adds	r6, r0, r5
 8011948:	4630      	mov	r0, r6
 801194a:	f002 f98f 	bl	8013c6c <ucdr_alignment>
 801194e:	1d05      	adds	r5, r0, #4
 8011950:	4639      	mov	r1, r7
 8011952:	4435      	add	r5, r6
 8011954:	4628      	mov	r0, r5
 8011956:	f002 f989 	bl	8013c6c <ucdr_alignment>
 801195a:	4438      	add	r0, r7
 801195c:	4639      	mov	r1, r7
 801195e:	4405      	add	r5, r0
 8011960:	4628      	mov	r0, r5
 8011962:	f002 f983 	bl	8013c6c <ucdr_alignment>
 8011966:	4420      	add	r0, r4
 8011968:	4428      	add	r0, r5
 801196a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801196c <_Longitudinal__max_serialized_size>:
 801196c:	b500      	push	{lr}
 801196e:	b083      	sub	sp, #12
 8011970:	2100      	movs	r1, #0
 8011972:	f10d 0007 	add.w	r0, sp, #7
 8011976:	f7ff ffcb 	bl	8011910 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 801197a:	b003      	add	sp, #12
 801197c:	f85d fb04 	ldr.w	pc, [sp], #4

08011980 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8011980:	4800      	ldr	r0, [pc, #0]	@ (8011984 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 8011982:	4770      	bx	lr
 8011984:	24000460 	.word	0x24000460

08011988 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8011988:	4b04      	ldr	r3, [pc, #16]	@ (801199c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	b10a      	cbz	r2, 8011992 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xa>
 801198e:	4803      	ldr	r0, [pc, #12]	@ (801199c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011990:	4770      	bx	lr
 8011992:	4a03      	ldr	r2, [pc, #12]	@ (80119a0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x18>)
 8011994:	4801      	ldr	r0, [pc, #4]	@ (801199c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011996:	6812      	ldr	r2, [r2, #0]
 8011998:	601a      	str	r2, [r3, #0]
 801199a:	4770      	bx	lr
 801199c:	24000490 	.word	0x24000490
 80119a0:	24000e10 	.word	0x24000e10

080119a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 80119a4:	4b04      	ldr	r3, [pc, #16]	@ (80119b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 80119a6:	4805      	ldr	r0, [pc, #20]	@ (80119bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4905      	ldr	r1, [pc, #20]	@ (80119c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 80119ac:	4a05      	ldr	r2, [pc, #20]	@ (80119c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80119ae:	6003      	str	r3, [r0, #0]
 80119b0:	600b      	str	r3, [r1, #0]
 80119b2:	6013      	str	r3, [r2, #0]
 80119b4:	4770      	bx	lr
 80119b6:	bf00      	nop
 80119b8:	24000e10 	.word	0x24000e10
 80119bc:	240004ac 	.word	0x240004ac
 80119c0:	240004b8 	.word	0x240004b8
 80119c4:	24000490 	.word	0x24000490

080119c8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 80119c8:	4b04      	ldr	r3, [pc, #16]	@ (80119dc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 80119ca:	681a      	ldr	r2, [r3, #0]
 80119cc:	b10a      	cbz	r2, 80119d2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xa>
 80119ce:	4803      	ldr	r0, [pc, #12]	@ (80119dc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 80119d0:	4770      	bx	lr
 80119d2:	4a03      	ldr	r2, [pc, #12]	@ (80119e0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x18>)
 80119d4:	4801      	ldr	r0, [pc, #4]	@ (80119dc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 80119d6:	6812      	ldr	r2, [r2, #0]
 80119d8:	601a      	str	r2, [r3, #0]
 80119da:	4770      	bx	lr
 80119dc:	240004cc 	.word	0x240004cc
 80119e0:	24000e10 	.word	0x24000e10

080119e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 80119e4:	4a02      	ldr	r2, [pc, #8]	@ (80119f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 80119e6:	4b03      	ldr	r3, [pc, #12]	@ (80119f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 80119e8:	6812      	ldr	r2, [r2, #0]
 80119ea:	601a      	str	r2, [r3, #0]
 80119ec:	4770      	bx	lr
 80119ee:	bf00      	nop
 80119f0:	24000e10 	.word	0x24000e10
 80119f4:	240004cc 	.word	0x240004cc

080119f8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 80119f8:	4b04      	ldr	r3, [pc, #16]	@ (8011a0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 80119fa:	681a      	ldr	r2, [r3, #0]
 80119fc:	b10a      	cbz	r2, 8011a02 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xa>
 80119fe:	4803      	ldr	r0, [pc, #12]	@ (8011a0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 8011a00:	4770      	bx	lr
 8011a02:	4a03      	ldr	r2, [pc, #12]	@ (8011a10 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x18>)
 8011a04:	4801      	ldr	r0, [pc, #4]	@ (8011a0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 8011a06:	6812      	ldr	r2, [r2, #0]
 8011a08:	601a      	str	r2, [r3, #0]
 8011a0a:	4770      	bx	lr
 8011a0c:	240004e0 	.word	0x240004e0
 8011a10:	24000e10 	.word	0x24000e10

08011a14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8011a14:	4a02      	ldr	r2, [pc, #8]	@ (8011a20 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 8011a16:	4b03      	ldr	r3, [pc, #12]	@ (8011a24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 8011a18:	6812      	ldr	r2, [r2, #0]
 8011a1a:	601a      	str	r2, [r3, #0]
 8011a1c:	4770      	bx	lr
 8011a1e:	bf00      	nop
 8011a20:	24000e10 	.word	0x24000e10
 8011a24:	240004e0 	.word	0x240004e0

08011a28 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8011a28:	4b04      	ldr	r3, [pc, #16]	@ (8011a3c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 8011a2a:	681a      	ldr	r2, [r3, #0]
 8011a2c:	b10a      	cbz	r2, 8011a32 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xa>
 8011a2e:	4803      	ldr	r0, [pc, #12]	@ (8011a3c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 8011a30:	4770      	bx	lr
 8011a32:	4a03      	ldr	r2, [pc, #12]	@ (8011a40 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x18>)
 8011a34:	4801      	ldr	r0, [pc, #4]	@ (8011a3c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 8011a36:	6812      	ldr	r2, [r2, #0]
 8011a38:	601a      	str	r2, [r3, #0]
 8011a3a:	4770      	bx	lr
 8011a3c:	240004f4 	.word	0x240004f4
 8011a40:	24000e10 	.word	0x24000e10

08011a44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8011a44:	4a02      	ldr	r2, [pc, #8]	@ (8011a50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 8011a46:	4b03      	ldr	r3, [pc, #12]	@ (8011a54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 8011a48:	6812      	ldr	r2, [r2, #0]
 8011a4a:	601a      	str	r2, [r3, #0]
 8011a4c:	4770      	bx	lr
 8011a4e:	bf00      	nop
 8011a50:	24000e10 	.word	0x24000e10
 8011a54:	240004f4 	.word	0x240004f4

08011a58 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8011a58:	4b04      	ldr	r3, [pc, #16]	@ (8011a6c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011a5a:	681a      	ldr	r2, [r3, #0]
 8011a5c:	b10a      	cbz	r2, 8011a62 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xa>
 8011a5e:	4803      	ldr	r0, [pc, #12]	@ (8011a6c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011a60:	4770      	bx	lr
 8011a62:	4a03      	ldr	r2, [pc, #12]	@ (8011a70 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 8011a64:	4801      	ldr	r0, [pc, #4]	@ (8011a6c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011a66:	6812      	ldr	r2, [r2, #0]
 8011a68:	601a      	str	r2, [r3, #0]
 8011a6a:	4770      	bx	lr
 8011a6c:	24000508 	.word	0x24000508
 8011a70:	24000e10 	.word	0x24000e10

08011a74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8011a74:	4a02      	ldr	r2, [pc, #8]	@ (8011a80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 8011a76:	4b03      	ldr	r3, [pc, #12]	@ (8011a84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 8011a78:	6812      	ldr	r2, [r2, #0]
 8011a7a:	601a      	str	r2, [r3, #0]
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop
 8011a80:	24000e10 	.word	0x24000e10
 8011a84:	24000508 	.word	0x24000508

08011a88 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011a88:	4b04      	ldr	r3, [pc, #16]	@ (8011a9c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011a8a:	681a      	ldr	r2, [r3, #0]
 8011a8c:	b10a      	cbz	r2, 8011a92 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xa>
 8011a8e:	4803      	ldr	r0, [pc, #12]	@ (8011a9c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011a90:	4770      	bx	lr
 8011a92:	4a03      	ldr	r2, [pc, #12]	@ (8011aa0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x18>)
 8011a94:	4801      	ldr	r0, [pc, #4]	@ (8011a9c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011a96:	6812      	ldr	r2, [r2, #0]
 8011a98:	601a      	str	r2, [r3, #0]
 8011a9a:	4770      	bx	lr
 8011a9c:	2400051c 	.word	0x2400051c
 8011aa0:	24000e10 	.word	0x24000e10

08011aa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011aa4:	4a02      	ldr	r2, [pc, #8]	@ (8011ab0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8011aa6:	4b03      	ldr	r3, [pc, #12]	@ (8011ab4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8011aa8:	6812      	ldr	r2, [r2, #0]
 8011aaa:	601a      	str	r2, [r3, #0]
 8011aac:	4770      	bx	lr
 8011aae:	bf00      	nop
 8011ab0:	24000e10 	.word	0x24000e10
 8011ab4:	2400051c 	.word	0x2400051c

08011ab8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8011ab8:	4b04      	ldr	r3, [pc, #16]	@ (8011acc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	b10a      	cbz	r2, 8011ac2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xa>
 8011abe:	4803      	ldr	r0, [pc, #12]	@ (8011acc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 8011ac0:	4770      	bx	lr
 8011ac2:	4a03      	ldr	r2, [pc, #12]	@ (8011ad0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x18>)
 8011ac4:	4801      	ldr	r0, [pc, #4]	@ (8011acc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 8011ac6:	6812      	ldr	r2, [r2, #0]
 8011ac8:	601a      	str	r2, [r3, #0]
 8011aca:	4770      	bx	lr
 8011acc:	24000530 	.word	0x24000530
 8011ad0:	24000e10 	.word	0x24000e10

08011ad4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8011ad4:	4a02      	ldr	r2, [pc, #8]	@ (8011ae0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 8011ad6:	4b03      	ldr	r3, [pc, #12]	@ (8011ae4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 8011ad8:	6812      	ldr	r2, [r2, #0]
 8011ada:	601a      	str	r2, [r3, #0]
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop
 8011ae0:	24000e10 	.word	0x24000e10
 8011ae4:	24000530 	.word	0x24000530

08011ae8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8011ae8:	4b04      	ldr	r3, [pc, #16]	@ (8011afc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8011aea:	681a      	ldr	r2, [r3, #0]
 8011aec:	b10a      	cbz	r2, 8011af2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 8011aee:	4803      	ldr	r0, [pc, #12]	@ (8011afc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8011af0:	4770      	bx	lr
 8011af2:	4a03      	ldr	r2, [pc, #12]	@ (8011b00 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 8011af4:	4801      	ldr	r0, [pc, #4]	@ (8011afc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8011af6:	6812      	ldr	r2, [r2, #0]
 8011af8:	601a      	str	r2, [r3, #0]
 8011afa:	4770      	bx	lr
 8011afc:	24000544 	.word	0x24000544
 8011b00:	24000e10 	.word	0x24000e10

08011b04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8011b04:	4a02      	ldr	r2, [pc, #8]	@ (8011b10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 8011b06:	4b03      	ldr	r3, [pc, #12]	@ (8011b14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 8011b08:	6812      	ldr	r2, [r2, #0]
 8011b0a:	601a      	str	r2, [r3, #0]
 8011b0c:	4770      	bx	lr
 8011b0e:	bf00      	nop
 8011b10:	24000e10 	.word	0x24000e10
 8011b14:	24000544 	.word	0x24000544

08011b18 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011b18:	4b04      	ldr	r3, [pc, #16]	@ (8011b2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8011b1a:	681a      	ldr	r2, [r3, #0]
 8011b1c:	b10a      	cbz	r2, 8011b22 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 8011b1e:	4803      	ldr	r0, [pc, #12]	@ (8011b2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8011b20:	4770      	bx	lr
 8011b22:	4a03      	ldr	r2, [pc, #12]	@ (8011b30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 8011b24:	4801      	ldr	r0, [pc, #4]	@ (8011b2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8011b26:	6812      	ldr	r2, [r2, #0]
 8011b28:	601a      	str	r2, [r3, #0]
 8011b2a:	4770      	bx	lr
 8011b2c:	24000558 	.word	0x24000558
 8011b30:	24000e10 	.word	0x24000e10

08011b34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011b34:	4a02      	ldr	r2, [pc, #8]	@ (8011b40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 8011b36:	4b03      	ldr	r3, [pc, #12]	@ (8011b44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 8011b38:	6812      	ldr	r2, [r2, #0]
 8011b3a:	601a      	str	r2, [r3, #0]
 8011b3c:	4770      	bx	lr
 8011b3e:	bf00      	nop
 8011b40:	24000e10 	.word	0x24000e10
 8011b44:	24000558 	.word	0x24000558

08011b48 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8011b48:	4b04      	ldr	r3, [pc, #16]	@ (8011b5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	b10a      	cbz	r2, 8011b52 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xa>
 8011b4e:	4803      	ldr	r0, [pc, #12]	@ (8011b5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 8011b50:	4770      	bx	lr
 8011b52:	4a03      	ldr	r2, [pc, #12]	@ (8011b60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x18>)
 8011b54:	4801      	ldr	r0, [pc, #4]	@ (8011b5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 8011b56:	6812      	ldr	r2, [r2, #0]
 8011b58:	601a      	str	r2, [r3, #0]
 8011b5a:	4770      	bx	lr
 8011b5c:	2400056c 	.word	0x2400056c
 8011b60:	24000e10 	.word	0x24000e10

08011b64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8011b64:	4a02      	ldr	r2, [pc, #8]	@ (8011b70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 8011b66:	4b03      	ldr	r3, [pc, #12]	@ (8011b74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 8011b68:	6812      	ldr	r2, [r2, #0]
 8011b6a:	601a      	str	r2, [r3, #0]
 8011b6c:	4770      	bx	lr
 8011b6e:	bf00      	nop
 8011b70:	24000e10 	.word	0x24000e10
 8011b74:	2400056c 	.word	0x2400056c

08011b78 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 8011b78:	f003 bdae 	b.w	80156d8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

08011b7c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 8011b7c:	f003 bdbe 	b.w	80156fc <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

08011b80 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 8011b80:	f003 bdc0 	b.w	8015704 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

08011b84 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 8011b84:	f003 bdc2 	b.w	801570c <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

08011b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011b88:	b508      	push	{r3, lr}
 8011b8a:	f000 fd5d 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b8e:	4b06      	ldr	r3, [pc, #24]	@ (8011ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011b90:	4906      	ldr	r1, [pc, #24]	@ (8011bac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 8011b92:	681a      	ldr	r2, [r3, #0]
 8011b94:	60c8      	str	r0, [r1, #12]
 8011b96:	b10a      	cbz	r2, 8011b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 8011b98:	4803      	ldr	r0, [pc, #12]	@ (8011ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011b9a:	bd08      	pop	{r3, pc}
 8011b9c:	4a04      	ldr	r2, [pc, #16]	@ (8011bb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 8011b9e:	4802      	ldr	r0, [pc, #8]	@ (8011ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011ba0:	6812      	ldr	r2, [r2, #0]
 8011ba2:	601a      	str	r2, [r3, #0]
 8011ba4:	bd08      	pop	{r3, pc}
 8011ba6:	bf00      	nop
 8011ba8:	240005f0 	.word	0x240005f0
 8011bac:	24000578 	.word	0x24000578
 8011bb0:	24000e14 	.word	0x24000e14

08011bb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8011bb4:	4b04      	ldr	r3, [pc, #16]	@ (8011bc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8011bb6:	681a      	ldr	r2, [r3, #0]
 8011bb8:	b10a      	cbz	r2, 8011bbe <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 8011bba:	4803      	ldr	r0, [pc, #12]	@ (8011bc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8011bbc:	4770      	bx	lr
 8011bbe:	4a03      	ldr	r2, [pc, #12]	@ (8011bcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 8011bc0:	4801      	ldr	r0, [pc, #4]	@ (8011bc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8011bc2:	6812      	ldr	r2, [r2, #0]
 8011bc4:	601a      	str	r2, [r3, #0]
 8011bc6:	4770      	bx	lr
 8011bc8:	24000638 	.word	0x24000638
 8011bcc:	24000e14 	.word	0x24000e14

08011bd0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8011bd0:	4b16      	ldr	r3, [pc, #88]	@ (8011c2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	b510      	push	{r4, lr}
 8011bd6:	b132      	cbz	r2, 8011be6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 8011bd8:	685c      	ldr	r4, [r3, #4]
 8011bda:	68a3      	ldr	r3, [r4, #8]
 8011bdc:	b153      	cbz	r3, 8011bf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 8011bde:	68e3      	ldr	r3, [r4, #12]
 8011be0:	b1a3      	cbz	r3, 8011c0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 8011be2:	4812      	ldr	r0, [pc, #72]	@ (8011c2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8011be4:	bd10      	pop	{r4, pc}
 8011be6:	4a12      	ldr	r2, [pc, #72]	@ (8011c30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8011be8:	685c      	ldr	r4, [r3, #4]
 8011bea:	6812      	ldr	r2, [r2, #0]
 8011bec:	601a      	str	r2, [r3, #0]
 8011bee:	68a3      	ldr	r3, [r4, #8]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d1f4      	bne.n	8011bde <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 8011bf4:	f000 fd28 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8011c34 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 8011bfa:	490f      	ldr	r1, [pc, #60]	@ (8011c38 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 8011bfc:	681a      	ldr	r2, [r3, #0]
 8011bfe:	60c8      	str	r0, [r1, #12]
 8011c00:	b17a      	cbz	r2, 8011c22 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	60a3      	str	r3, [r4, #8]
 8011c06:	68e3      	ldr	r3, [r4, #12]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d1ea      	bne.n	8011be2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 8011c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8011c3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 8011c0e:	681a      	ldr	r2, [r3, #0]
 8011c10:	b11a      	cbz	r2, 8011c1a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 8011c12:	685b      	ldr	r3, [r3, #4]
 8011c14:	4805      	ldr	r0, [pc, #20]	@ (8011c2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8011c16:	60e3      	str	r3, [r4, #12]
 8011c18:	bd10      	pop	{r4, pc}
 8011c1a:	4a05      	ldr	r2, [pc, #20]	@ (8011c30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8011c1c:	6812      	ldr	r2, [r2, #0]
 8011c1e:	601a      	str	r2, [r3, #0]
 8011c20:	e7f7      	b.n	8011c12 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 8011c22:	4a03      	ldr	r2, [pc, #12]	@ (8011c30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8011c24:	6812      	ldr	r2, [r2, #0]
 8011c26:	601a      	str	r2, [r3, #0]
 8011c28:	e7eb      	b.n	8011c02 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 8011c2a:	bf00      	nop
 8011c2c:	24000654 	.word	0x24000654
 8011c30:	24000e14 	.word	0x24000e14
 8011c34:	240005f0 	.word	0x240005f0
 8011c38:	24000578 	.word	0x24000578
 8011c3c:	24000638 	.word	0x24000638

08011c40 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 8011c40:	f003 bd66 	b.w	8015710 <autoware_vehicle_msgs__msg__ControlModeReport__init>

08011c44 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 8011c44:	f003 bd76 	b.w	8015734 <autoware_vehicle_msgs__msg__ControlModeReport__fini>

08011c48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8011c48:	b508      	push	{r3, lr}
 8011c4a:	f000 fcfd 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011c4e:	4b06      	ldr	r3, [pc, #24]	@ (8011c68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8011c50:	4906      	ldr	r1, [pc, #24]	@ (8011c6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 8011c52:	681a      	ldr	r2, [r3, #0]
 8011c54:	60c8      	str	r0, [r1, #12]
 8011c56:	b10a      	cbz	r2, 8011c5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 8011c58:	4803      	ldr	r0, [pc, #12]	@ (8011c68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8011c5a:	bd08      	pop	{r3, pc}
 8011c5c:	4a04      	ldr	r2, [pc, #16]	@ (8011c70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 8011c5e:	4802      	ldr	r0, [pc, #8]	@ (8011c68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8011c60:	6812      	ldr	r2, [r2, #0]
 8011c62:	601a      	str	r2, [r3, #0]
 8011c64:	bd08      	pop	{r3, pc}
 8011c66:	bf00      	nop
 8011c68:	240006d8 	.word	0x240006d8
 8011c6c:	24000660 	.word	0x24000660
 8011c70:	24000e14 	.word	0x24000e14

08011c74 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 8011c74:	f003 bd62 	b.w	801573c <autoware_vehicle_msgs__msg__GearCommand__init>

08011c78 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 8011c78:	f003 bd72 	b.w	8015760 <autoware_vehicle_msgs__msg__GearCommand__fini>

08011c7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8011c7c:	b508      	push	{r3, lr}
 8011c7e:	f000 fce3 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011c82:	4b06      	ldr	r3, [pc, #24]	@ (8011c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8011c84:	4906      	ldr	r1, [pc, #24]	@ (8011ca0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 8011c86:	681a      	ldr	r2, [r3, #0]
 8011c88:	60c8      	str	r0, [r1, #12]
 8011c8a:	b10a      	cbz	r2, 8011c90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 8011c8c:	4803      	ldr	r0, [pc, #12]	@ (8011c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8011c8e:	bd08      	pop	{r3, pc}
 8011c90:	4a04      	ldr	r2, [pc, #16]	@ (8011ca4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 8011c92:	4802      	ldr	r0, [pc, #8]	@ (8011c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8011c94:	6812      	ldr	r2, [r2, #0]
 8011c96:	601a      	str	r2, [r3, #0]
 8011c98:	bd08      	pop	{r3, pc}
 8011c9a:	bf00      	nop
 8011c9c:	2400075c 	.word	0x2400075c
 8011ca0:	240006e4 	.word	0x240006e4
 8011ca4:	24000e14 	.word	0x24000e14

08011ca8 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 8011ca8:	f003 bd5e 	b.w	8015768 <autoware_vehicle_msgs__msg__GearReport__init>

08011cac <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 8011cac:	f003 bd6e 	b.w	801578c <autoware_vehicle_msgs__msg__GearReport__fini>

08011cb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8011cb0:	b508      	push	{r3, lr}
 8011cb2:	f000 fcc9 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011cb6:	4b06      	ldr	r3, [pc, #24]	@ (8011cd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8011cb8:	4906      	ldr	r1, [pc, #24]	@ (8011cd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 8011cba:	681a      	ldr	r2, [r3, #0]
 8011cbc:	60c8      	str	r0, [r1, #12]
 8011cbe:	b10a      	cbz	r2, 8011cc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 8011cc0:	4803      	ldr	r0, [pc, #12]	@ (8011cd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8011cc2:	bd08      	pop	{r3, pc}
 8011cc4:	4a04      	ldr	r2, [pc, #16]	@ (8011cd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 8011cc6:	4802      	ldr	r0, [pc, #8]	@ (8011cd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8011cc8:	6812      	ldr	r2, [r2, #0]
 8011cca:	601a      	str	r2, [r3, #0]
 8011ccc:	bd08      	pop	{r3, pc}
 8011cce:	bf00      	nop
 8011cd0:	240007e0 	.word	0x240007e0
 8011cd4:	24000768 	.word	0x24000768
 8011cd8:	24000e14 	.word	0x24000e14

08011cdc <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 8011cdc:	f003 bd5a 	b.w	8015794 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

08011ce0 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 8011ce0:	f003 bd6a 	b.w	80157b8 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

08011ce4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8011ce4:	b508      	push	{r3, lr}
 8011ce6:	f000 fcaf 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011cea:	4b06      	ldr	r3, [pc, #24]	@ (8011d04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8011cec:	4906      	ldr	r1, [pc, #24]	@ (8011d08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	60c8      	str	r0, [r1, #12]
 8011cf2:	b10a      	cbz	r2, 8011cf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8011cf4:	4803      	ldr	r0, [pc, #12]	@ (8011d04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8011cf6:	bd08      	pop	{r3, pc}
 8011cf8:	4a04      	ldr	r2, [pc, #16]	@ (8011d0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 8011cfa:	4802      	ldr	r0, [pc, #8]	@ (8011d04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8011cfc:	6812      	ldr	r2, [r2, #0]
 8011cfe:	601a      	str	r2, [r3, #0]
 8011d00:	bd08      	pop	{r3, pc}
 8011d02:	bf00      	nop
 8011d04:	24000864 	.word	0x24000864
 8011d08:	240007ec 	.word	0x240007ec
 8011d0c:	24000e14 	.word	0x24000e14

08011d10 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8011d10:	f003 bd56 	b.w	80157c0 <autoware_vehicle_msgs__msg__HazardLightsReport__init>

08011d14 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8011d14:	f003 bd66 	b.w	80157e4 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

08011d18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011d18:	b508      	push	{r3, lr}
 8011d1a:	f000 fc95 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011d1e:	4b06      	ldr	r3, [pc, #24]	@ (8011d38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8011d20:	4906      	ldr	r1, [pc, #24]	@ (8011d3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	60c8      	str	r0, [r1, #12]
 8011d26:	b10a      	cbz	r2, 8011d2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 8011d28:	4803      	ldr	r0, [pc, #12]	@ (8011d38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8011d2a:	bd08      	pop	{r3, pc}
 8011d2c:	4a04      	ldr	r2, [pc, #16]	@ (8011d40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 8011d2e:	4802      	ldr	r0, [pc, #8]	@ (8011d38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8011d30:	6812      	ldr	r2, [r2, #0]
 8011d32:	601a      	str	r2, [r3, #0]
 8011d34:	bd08      	pop	{r3, pc}
 8011d36:	bf00      	nop
 8011d38:	240008e8 	.word	0x240008e8
 8011d3c:	24000870 	.word	0x24000870
 8011d40:	24000e14 	.word	0x24000e14

08011d44 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8011d44:	f003 bd52 	b.w	80157ec <autoware_vehicle_msgs__msg__SteeringReport__init>

08011d48 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 8011d48:	f003 bd62 	b.w	8015810 <autoware_vehicle_msgs__msg__SteeringReport__fini>

08011d4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8011d4c:	b508      	push	{r3, lr}
 8011d4e:	f000 fc7b 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011d52:	4b06      	ldr	r3, [pc, #24]	@ (8011d6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8011d54:	4906      	ldr	r1, [pc, #24]	@ (8011d70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 8011d56:	681a      	ldr	r2, [r3, #0]
 8011d58:	60c8      	str	r0, [r1, #12]
 8011d5a:	b10a      	cbz	r2, 8011d60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 8011d5c:	4803      	ldr	r0, [pc, #12]	@ (8011d6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8011d5e:	bd08      	pop	{r3, pc}
 8011d60:	4a04      	ldr	r2, [pc, #16]	@ (8011d74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 8011d62:	4802      	ldr	r0, [pc, #8]	@ (8011d6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8011d64:	6812      	ldr	r2, [r2, #0]
 8011d66:	601a      	str	r2, [r3, #0]
 8011d68:	bd08      	pop	{r3, pc}
 8011d6a:	bf00      	nop
 8011d6c:	2400096c 	.word	0x2400096c
 8011d70:	240008f4 	.word	0x240008f4
 8011d74:	24000e14 	.word	0x24000e14

08011d78 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 8011d78:	f003 bd4e 	b.w	8015818 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

08011d7c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 8011d7c:	f003 bd5e 	b.w	801583c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

08011d80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8011d80:	b508      	push	{r3, lr}
 8011d82:	f000 fc61 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011d86:	4b06      	ldr	r3, [pc, #24]	@ (8011da0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8011d88:	4906      	ldr	r1, [pc, #24]	@ (8011da4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 8011d8a:	681a      	ldr	r2, [r3, #0]
 8011d8c:	60c8      	str	r0, [r1, #12]
 8011d8e:	b10a      	cbz	r2, 8011d94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 8011d90:	4803      	ldr	r0, [pc, #12]	@ (8011da0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8011d92:	bd08      	pop	{r3, pc}
 8011d94:	4a04      	ldr	r2, [pc, #16]	@ (8011da8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 8011d96:	4802      	ldr	r0, [pc, #8]	@ (8011da0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8011d98:	6812      	ldr	r2, [r2, #0]
 8011d9a:	601a      	str	r2, [r3, #0]
 8011d9c:	bd08      	pop	{r3, pc}
 8011d9e:	bf00      	nop
 8011da0:	240009f0 	.word	0x240009f0
 8011da4:	24000978 	.word	0x24000978
 8011da8:	24000e14 	.word	0x24000e14

08011dac <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 8011dac:	f003 bd4a 	b.w	8015844 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

08011db0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 8011db0:	f003 bd5a 	b.w	8015868 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

08011db4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011db4:	b508      	push	{r3, lr}
 8011db6:	f000 fc47 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011dba:	4b06      	ldr	r3, [pc, #24]	@ (8011dd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8011dbc:	4906      	ldr	r1, [pc, #24]	@ (8011dd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 8011dbe:	681a      	ldr	r2, [r3, #0]
 8011dc0:	60c8      	str	r0, [r1, #12]
 8011dc2:	b10a      	cbz	r2, 8011dc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 8011dc4:	4803      	ldr	r0, [pc, #12]	@ (8011dd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8011dc6:	bd08      	pop	{r3, pc}
 8011dc8:	4a04      	ldr	r2, [pc, #16]	@ (8011ddc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 8011dca:	4802      	ldr	r0, [pc, #8]	@ (8011dd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8011dcc:	6812      	ldr	r2, [r2, #0]
 8011dce:	601a      	str	r2, [r3, #0]
 8011dd0:	bd08      	pop	{r3, pc}
 8011dd2:	bf00      	nop
 8011dd4:	24000a74 	.word	0x24000a74
 8011dd8:	240009fc 	.word	0x240009fc
 8011ddc:	24000e14 	.word	0x24000e14

08011de0 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 8011de0:	f003 bd46 	b.w	8015870 <autoware_vehicle_msgs__msg__VelocityReport__init>

08011de4 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8011de4:	f003 bd56 	b.w	8015894 <autoware_vehicle_msgs__msg__VelocityReport__fini>

08011de8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8011de8:	b508      	push	{r3, lr}
 8011dea:	f003 f89f 	bl	8014f2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011dee:	4b06      	ldr	r3, [pc, #24]	@ (8011e08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8011df0:	4906      	ldr	r1, [pc, #24]	@ (8011e0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	60c8      	str	r0, [r1, #12]
 8011df6:	b10a      	cbz	r2, 8011dfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 8011df8:	4803      	ldr	r0, [pc, #12]	@ (8011e08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8011dfa:	bd08      	pop	{r3, pc}
 8011dfc:	4a04      	ldr	r2, [pc, #16]	@ (8011e10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 8011dfe:	4802      	ldr	r0, [pc, #8]	@ (8011e08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8011e00:	6812      	ldr	r2, [r2, #0]
 8011e02:	601a      	str	r2, [r3, #0]
 8011e04:	bd08      	pop	{r3, pc}
 8011e06:	bf00      	nop
 8011e08:	24000b70 	.word	0x24000b70
 8011e0c:	24000a80 	.word	0x24000a80
 8011e10:	24000e14 	.word	0x24000e14

08011e14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011e14:	4800      	ldr	r0, [pc, #0]	@ (8011e18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 8011e16:	4770      	bx	lr
 8011e18:	24000b98 	.word	0x24000b98

08011e1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8011e1c:	4800      	ldr	r0, [pc, #0]	@ (8011e20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 8011e1e:	4770      	bx	lr
 8011e20:	24000ba4 	.word	0x24000ba4

08011e24 <_ControlModeCommand_Response__max_serialized_size>:
 8011e24:	2101      	movs	r1, #1
 8011e26:	2000      	movs	r0, #0
 8011e28:	b508      	push	{r3, lr}
 8011e2a:	f001 ff1f 	bl	8013c6c <ucdr_alignment>
 8011e2e:	3001      	adds	r0, #1
 8011e30:	bd08      	pop	{r3, pc}
 8011e32:	bf00      	nop

08011e34 <_ControlModeCommand_Response__cdr_deserialize>:
 8011e34:	b109      	cbz	r1, 8011e3a <_ControlModeCommand_Response__cdr_deserialize+0x6>
 8011e36:	f000 bc93 	b.w	8012760 <ucdr_deserialize_bool>
 8011e3a:	4608      	mov	r0, r1
 8011e3c:	4770      	bx	lr
 8011e3e:	bf00      	nop

08011e40 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011e40:	b538      	push	{r3, r4, r5, lr}
 8011e42:	b158      	cbz	r0, 8011e5c <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8011e44:	460d      	mov	r5, r1
 8011e46:	f000 fc0d 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 8011e4a:	2101      	movs	r1, #1
 8011e4c:	182c      	adds	r4, r5, r0
 8011e4e:	f1c5 0501 	rsb	r5, r5, #1
 8011e52:	4620      	mov	r0, r4
 8011e54:	f001 ff0a 	bl	8013c6c <ucdr_alignment>
 8011e58:	4428      	add	r0, r5
 8011e5a:	4420      	add	r0, r4
 8011e5c:	bd38      	pop	{r3, r4, r5, pc}
 8011e5e:	bf00      	nop

08011e60 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8011e60:	b138      	cbz	r0, 8011e72 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 8011e62:	b508      	push	{r3, lr}
 8011e64:	460b      	mov	r3, r1
 8011e66:	2101      	movs	r1, #1
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f001 feff 	bl	8013c6c <ucdr_alignment>
 8011e6e:	3001      	adds	r0, #1
 8011e70:	bd08      	pop	{r3, pc}
 8011e72:	4770      	bx	lr

08011e74 <_ControlModeCommand_Request__cdr_deserialize>:
 8011e74:	b538      	push	{r3, r4, r5, lr}
 8011e76:	460c      	mov	r4, r1
 8011e78:	b179      	cbz	r1, 8011e9a <_ControlModeCommand_Request__cdr_deserialize+0x26>
 8011e7a:	4605      	mov	r5, r0
 8011e7c:	f000 fc56 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011e80:	4603      	mov	r3, r0
 8011e82:	4621      	mov	r1, r4
 8011e84:	4628      	mov	r0, r5
 8011e86:	685b      	ldr	r3, [r3, #4]
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	4798      	blx	r3
 8011e8c:	f104 0108 	add.w	r1, r4, #8
 8011e90:	4628      	mov	r0, r5
 8011e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e96:	f000 bc91 	b.w	80127bc <ucdr_deserialize_uint8_t>
 8011e9a:	4608      	mov	r0, r1
 8011e9c:	bd38      	pop	{r3, r4, r5, pc}
 8011e9e:	bf00      	nop

08011ea0 <_ControlModeCommand_Request__cdr_serialize>:
 8011ea0:	b180      	cbz	r0, 8011ec4 <_ControlModeCommand_Request__cdr_serialize+0x24>
 8011ea2:	b538      	push	{r3, r4, r5, lr}
 8011ea4:	4604      	mov	r4, r0
 8011ea6:	460d      	mov	r5, r1
 8011ea8:	f000 fc40 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011eac:	4603      	mov	r3, r0
 8011eae:	4629      	mov	r1, r5
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	4798      	blx	r3
 8011eb8:	7a21      	ldrb	r1, [r4, #8]
 8011eba:	4628      	mov	r0, r5
 8011ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ec0:	f000 bc66 	b.w	8012790 <ucdr_serialize_uint8_t>
 8011ec4:	4770      	bx	lr
 8011ec6:	bf00      	nop

08011ec8 <_ControlModeCommand_Response__cdr_serialize>:
 8011ec8:	460a      	mov	r2, r1
 8011eca:	b118      	cbz	r0, 8011ed4 <_ControlModeCommand_Response__cdr_serialize+0xc>
 8011ecc:	7801      	ldrb	r1, [r0, #0]
 8011ece:	4610      	mov	r0, r2
 8011ed0:	f000 bc30 	b.w	8012734 <ucdr_serialize_bool>
 8011ed4:	4770      	bx	lr
 8011ed6:	bf00      	nop

08011ed8 <_ControlModeCommand_Response__get_serialized_size>:
 8011ed8:	b130      	cbz	r0, 8011ee8 <_ControlModeCommand_Response__get_serialized_size+0x10>
 8011eda:	2101      	movs	r1, #1
 8011edc:	2000      	movs	r0, #0
 8011ede:	b508      	push	{r3, lr}
 8011ee0:	f001 fec4 	bl	8013c6c <ucdr_alignment>
 8011ee4:	3001      	adds	r0, #1
 8011ee6:	bd08      	pop	{r3, pc}
 8011ee8:	4770      	bx	lr
 8011eea:	bf00      	nop

08011eec <_ControlModeCommand_Request__get_serialized_size>:
 8011eec:	b150      	cbz	r0, 8011f04 <_ControlModeCommand_Request__get_serialized_size+0x18>
 8011eee:	2100      	movs	r1, #0
 8011ef0:	b510      	push	{r4, lr}
 8011ef2:	f000 fbb7 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 8011ef6:	4604      	mov	r4, r0
 8011ef8:	2101      	movs	r1, #1
 8011efa:	f001 feb7 	bl	8013c6c <ucdr_alignment>
 8011efe:	4420      	add	r0, r4
 8011f00:	3001      	adds	r0, #1
 8011f02:	bd10      	pop	{r4, pc}
 8011f04:	4770      	bx	lr
 8011f06:	bf00      	nop

08011f08 <_ControlModeCommand_Request__max_serialized_size>:
 8011f08:	b510      	push	{r4, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	2401      	movs	r4, #1
 8011f0e:	2100      	movs	r1, #0
 8011f10:	f10d 0007 	add.w	r0, sp, #7
 8011f14:	f88d 4007 	strb.w	r4, [sp, #7]
 8011f18:	f000 fbf4 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 8011f1c:	4621      	mov	r1, r4
 8011f1e:	4604      	mov	r4, r0
 8011f20:	f001 fea4 	bl	8013c6c <ucdr_alignment>
 8011f24:	4420      	add	r0, r4
 8011f26:	3001      	adds	r0, #1
 8011f28:	b002      	add	sp, #8
 8011f2a:	bd10      	pop	{r4, pc}

08011f2c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8011f2c:	4800      	ldr	r0, [pc, #0]	@ (8011f30 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 8011f2e:	4770      	bx	lr
 8011f30:	24000b8c 	.word	0x24000b8c

08011f34 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 8011f34:	b538      	push	{r3, r4, r5, lr}
 8011f36:	b158      	cbz	r0, 8011f50 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 8011f38:	460d      	mov	r5, r1
 8011f3a:	f000 fb93 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 8011f3e:	2101      	movs	r1, #1
 8011f40:	182c      	adds	r4, r5, r0
 8011f42:	f1c5 0501 	rsb	r5, r5, #1
 8011f46:	4620      	mov	r0, r4
 8011f48:	f001 fe90 	bl	8013c6c <ucdr_alignment>
 8011f4c:	4428      	add	r0, r5
 8011f4e:	4420      	add	r0, r4
 8011f50:	bd38      	pop	{r3, r4, r5, pc}
 8011f52:	bf00      	nop

08011f54 <_ControlModeReport__cdr_deserialize>:
 8011f54:	b538      	push	{r3, r4, r5, lr}
 8011f56:	460c      	mov	r4, r1
 8011f58:	b179      	cbz	r1, 8011f7a <_ControlModeReport__cdr_deserialize+0x26>
 8011f5a:	4605      	mov	r5, r0
 8011f5c:	f000 fbe6 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011f60:	4603      	mov	r3, r0
 8011f62:	4621      	mov	r1, r4
 8011f64:	4628      	mov	r0, r5
 8011f66:	685b      	ldr	r3, [r3, #4]
 8011f68:	68db      	ldr	r3, [r3, #12]
 8011f6a:	4798      	blx	r3
 8011f6c:	f104 0108 	add.w	r1, r4, #8
 8011f70:	4628      	mov	r0, r5
 8011f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f76:	f000 bc21 	b.w	80127bc <ucdr_deserialize_uint8_t>
 8011f7a:	4608      	mov	r0, r1
 8011f7c:	bd38      	pop	{r3, r4, r5, pc}
 8011f7e:	bf00      	nop

08011f80 <_ControlModeReport__cdr_serialize>:
 8011f80:	b180      	cbz	r0, 8011fa4 <_ControlModeReport__cdr_serialize+0x24>
 8011f82:	b538      	push	{r3, r4, r5, lr}
 8011f84:	4604      	mov	r4, r0
 8011f86:	460d      	mov	r5, r1
 8011f88:	f000 fbd0 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	4629      	mov	r1, r5
 8011f90:	4620      	mov	r0, r4
 8011f92:	685b      	ldr	r3, [r3, #4]
 8011f94:	689b      	ldr	r3, [r3, #8]
 8011f96:	4798      	blx	r3
 8011f98:	7a21      	ldrb	r1, [r4, #8]
 8011f9a:	4628      	mov	r0, r5
 8011f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fa0:	f000 bbf6 	b.w	8012790 <ucdr_serialize_uint8_t>
 8011fa4:	4770      	bx	lr
 8011fa6:	bf00      	nop

08011fa8 <_ControlModeReport__get_serialized_size>:
 8011fa8:	b150      	cbz	r0, 8011fc0 <_ControlModeReport__get_serialized_size+0x18>
 8011faa:	2100      	movs	r1, #0
 8011fac:	b510      	push	{r4, lr}
 8011fae:	f000 fb59 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 8011fb2:	4604      	mov	r4, r0
 8011fb4:	2101      	movs	r1, #1
 8011fb6:	f001 fe59 	bl	8013c6c <ucdr_alignment>
 8011fba:	4420      	add	r0, r4
 8011fbc:	3001      	adds	r0, #1
 8011fbe:	bd10      	pop	{r4, pc}
 8011fc0:	4770      	bx	lr
 8011fc2:	bf00      	nop

08011fc4 <_ControlModeReport__max_serialized_size>:
 8011fc4:	b510      	push	{r4, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	2401      	movs	r4, #1
 8011fca:	2100      	movs	r1, #0
 8011fcc:	f10d 0007 	add.w	r0, sp, #7
 8011fd0:	f88d 4007 	strb.w	r4, [sp, #7]
 8011fd4:	f000 fb96 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 8011fd8:	4621      	mov	r1, r4
 8011fda:	4604      	mov	r4, r0
 8011fdc:	f001 fe46 	bl	8013c6c <ucdr_alignment>
 8011fe0:	4420      	add	r0, r4
 8011fe2:	3001      	adds	r0, #1
 8011fe4:	b002      	add	sp, #8
 8011fe6:	bd10      	pop	{r4, pc}

08011fe8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8011fe8:	4800      	ldr	r0, [pc, #0]	@ (8011fec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 8011fea:	4770      	bx	lr
 8011fec:	24000be8 	.word	0x24000be8

08011ff0 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 8011ff0:	b538      	push	{r3, r4, r5, lr}
 8011ff2:	b158      	cbz	r0, 801200c <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 8011ff4:	460d      	mov	r5, r1
 8011ff6:	f000 fb35 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 8011ffa:	2101      	movs	r1, #1
 8011ffc:	182c      	adds	r4, r5, r0
 8011ffe:	f1c5 0501 	rsb	r5, r5, #1
 8012002:	4620      	mov	r0, r4
 8012004:	f001 fe32 	bl	8013c6c <ucdr_alignment>
 8012008:	4428      	add	r0, r5
 801200a:	4420      	add	r0, r4
 801200c:	bd38      	pop	{r3, r4, r5, pc}
 801200e:	bf00      	nop

08012010 <_GearCommand__cdr_deserialize>:
 8012010:	b538      	push	{r3, r4, r5, lr}
 8012012:	460c      	mov	r4, r1
 8012014:	b179      	cbz	r1, 8012036 <_GearCommand__cdr_deserialize+0x26>
 8012016:	4605      	mov	r5, r0
 8012018:	f000 fb88 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801201c:	4603      	mov	r3, r0
 801201e:	4621      	mov	r1, r4
 8012020:	4628      	mov	r0, r5
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	4798      	blx	r3
 8012028:	f104 0108 	add.w	r1, r4, #8
 801202c:	4628      	mov	r0, r5
 801202e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012032:	f000 bbc3 	b.w	80127bc <ucdr_deserialize_uint8_t>
 8012036:	4608      	mov	r0, r1
 8012038:	bd38      	pop	{r3, r4, r5, pc}
 801203a:	bf00      	nop

0801203c <_GearCommand__cdr_serialize>:
 801203c:	b180      	cbz	r0, 8012060 <_GearCommand__cdr_serialize+0x24>
 801203e:	b538      	push	{r3, r4, r5, lr}
 8012040:	4604      	mov	r4, r0
 8012042:	460d      	mov	r5, r1
 8012044:	f000 fb72 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012048:	4603      	mov	r3, r0
 801204a:	4629      	mov	r1, r5
 801204c:	4620      	mov	r0, r4
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	689b      	ldr	r3, [r3, #8]
 8012052:	4798      	blx	r3
 8012054:	7a21      	ldrb	r1, [r4, #8]
 8012056:	4628      	mov	r0, r5
 8012058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801205c:	f000 bb98 	b.w	8012790 <ucdr_serialize_uint8_t>
 8012060:	4770      	bx	lr
 8012062:	bf00      	nop

08012064 <_GearCommand__get_serialized_size>:
 8012064:	b150      	cbz	r0, 801207c <_GearCommand__get_serialized_size+0x18>
 8012066:	2100      	movs	r1, #0
 8012068:	b510      	push	{r4, lr}
 801206a:	f000 fafb 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 801206e:	4604      	mov	r4, r0
 8012070:	2101      	movs	r1, #1
 8012072:	f001 fdfb 	bl	8013c6c <ucdr_alignment>
 8012076:	4420      	add	r0, r4
 8012078:	3001      	adds	r0, #1
 801207a:	bd10      	pop	{r4, pc}
 801207c:	4770      	bx	lr
 801207e:	bf00      	nop

08012080 <_GearCommand__max_serialized_size>:
 8012080:	b510      	push	{r4, lr}
 8012082:	b082      	sub	sp, #8
 8012084:	2401      	movs	r4, #1
 8012086:	2100      	movs	r1, #0
 8012088:	f10d 0007 	add.w	r0, sp, #7
 801208c:	f88d 4007 	strb.w	r4, [sp, #7]
 8012090:	f000 fb38 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 8012094:	4621      	mov	r1, r4
 8012096:	4604      	mov	r4, r0
 8012098:	f001 fde8 	bl	8013c6c <ucdr_alignment>
 801209c:	4420      	add	r0, r4
 801209e:	3001      	adds	r0, #1
 80120a0:	b002      	add	sp, #8
 80120a2:	bd10      	pop	{r4, pc}

080120a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 80120a4:	4800      	ldr	r0, [pc, #0]	@ (80120a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 80120a6:	4770      	bx	lr
 80120a8:	24000c10 	.word	0x24000c10

080120ac <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 80120ac:	b538      	push	{r3, r4, r5, lr}
 80120ae:	b158      	cbz	r0, 80120c8 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 80120b0:	460d      	mov	r5, r1
 80120b2:	f000 fad7 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80120b6:	2101      	movs	r1, #1
 80120b8:	182c      	adds	r4, r5, r0
 80120ba:	f1c5 0501 	rsb	r5, r5, #1
 80120be:	4620      	mov	r0, r4
 80120c0:	f001 fdd4 	bl	8013c6c <ucdr_alignment>
 80120c4:	4428      	add	r0, r5
 80120c6:	4420      	add	r0, r4
 80120c8:	bd38      	pop	{r3, r4, r5, pc}
 80120ca:	bf00      	nop

080120cc <_GearReport__cdr_deserialize>:
 80120cc:	b538      	push	{r3, r4, r5, lr}
 80120ce:	460c      	mov	r4, r1
 80120d0:	b179      	cbz	r1, 80120f2 <_GearReport__cdr_deserialize+0x26>
 80120d2:	4605      	mov	r5, r0
 80120d4:	f000 fb2a 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80120d8:	4603      	mov	r3, r0
 80120da:	4621      	mov	r1, r4
 80120dc:	4628      	mov	r0, r5
 80120de:	685b      	ldr	r3, [r3, #4]
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	4798      	blx	r3
 80120e4:	f104 0108 	add.w	r1, r4, #8
 80120e8:	4628      	mov	r0, r5
 80120ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120ee:	f000 bb65 	b.w	80127bc <ucdr_deserialize_uint8_t>
 80120f2:	4608      	mov	r0, r1
 80120f4:	bd38      	pop	{r3, r4, r5, pc}
 80120f6:	bf00      	nop

080120f8 <_GearReport__cdr_serialize>:
 80120f8:	b180      	cbz	r0, 801211c <_GearReport__cdr_serialize+0x24>
 80120fa:	b538      	push	{r3, r4, r5, lr}
 80120fc:	4604      	mov	r4, r0
 80120fe:	460d      	mov	r5, r1
 8012100:	f000 fb14 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012104:	4603      	mov	r3, r0
 8012106:	4629      	mov	r1, r5
 8012108:	4620      	mov	r0, r4
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	689b      	ldr	r3, [r3, #8]
 801210e:	4798      	blx	r3
 8012110:	7a21      	ldrb	r1, [r4, #8]
 8012112:	4628      	mov	r0, r5
 8012114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012118:	f000 bb3a 	b.w	8012790 <ucdr_serialize_uint8_t>
 801211c:	4770      	bx	lr
 801211e:	bf00      	nop

08012120 <_GearReport__get_serialized_size>:
 8012120:	b150      	cbz	r0, 8012138 <_GearReport__get_serialized_size+0x18>
 8012122:	2100      	movs	r1, #0
 8012124:	b510      	push	{r4, lr}
 8012126:	f000 fa9d 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 801212a:	4604      	mov	r4, r0
 801212c:	2101      	movs	r1, #1
 801212e:	f001 fd9d 	bl	8013c6c <ucdr_alignment>
 8012132:	4420      	add	r0, r4
 8012134:	3001      	adds	r0, #1
 8012136:	bd10      	pop	{r4, pc}
 8012138:	4770      	bx	lr
 801213a:	bf00      	nop

0801213c <_GearReport__max_serialized_size>:
 801213c:	b510      	push	{r4, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	2401      	movs	r4, #1
 8012142:	2100      	movs	r1, #0
 8012144:	f10d 0007 	add.w	r0, sp, #7
 8012148:	f88d 4007 	strb.w	r4, [sp, #7]
 801214c:	f000 fada 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 8012150:	4621      	mov	r1, r4
 8012152:	4604      	mov	r4, r0
 8012154:	f001 fd8a 	bl	8013c6c <ucdr_alignment>
 8012158:	4420      	add	r0, r4
 801215a:	3001      	adds	r0, #1
 801215c:	b002      	add	sp, #8
 801215e:	bd10      	pop	{r4, pc}

08012160 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8012160:	4800      	ldr	r0, [pc, #0]	@ (8012164 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 8012162:	4770      	bx	lr
 8012164:	24000c38 	.word	0x24000c38

08012168 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8012168:	b538      	push	{r3, r4, r5, lr}
 801216a:	b158      	cbz	r0, 8012184 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 801216c:	460d      	mov	r5, r1
 801216e:	f000 fa79 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 8012172:	2101      	movs	r1, #1
 8012174:	182c      	adds	r4, r5, r0
 8012176:	f1c5 0501 	rsb	r5, r5, #1
 801217a:	4620      	mov	r0, r4
 801217c:	f001 fd76 	bl	8013c6c <ucdr_alignment>
 8012180:	4428      	add	r0, r5
 8012182:	4420      	add	r0, r4
 8012184:	bd38      	pop	{r3, r4, r5, pc}
 8012186:	bf00      	nop

08012188 <_HazardLightsCommand__cdr_deserialize>:
 8012188:	b538      	push	{r3, r4, r5, lr}
 801218a:	460c      	mov	r4, r1
 801218c:	b179      	cbz	r1, 80121ae <_HazardLightsCommand__cdr_deserialize+0x26>
 801218e:	4605      	mov	r5, r0
 8012190:	f000 facc 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012194:	4603      	mov	r3, r0
 8012196:	4621      	mov	r1, r4
 8012198:	4628      	mov	r0, r5
 801219a:	685b      	ldr	r3, [r3, #4]
 801219c:	68db      	ldr	r3, [r3, #12]
 801219e:	4798      	blx	r3
 80121a0:	f104 0108 	add.w	r1, r4, #8
 80121a4:	4628      	mov	r0, r5
 80121a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121aa:	f000 bb07 	b.w	80127bc <ucdr_deserialize_uint8_t>
 80121ae:	4608      	mov	r0, r1
 80121b0:	bd38      	pop	{r3, r4, r5, pc}
 80121b2:	bf00      	nop

080121b4 <_HazardLightsCommand__cdr_serialize>:
 80121b4:	b180      	cbz	r0, 80121d8 <_HazardLightsCommand__cdr_serialize+0x24>
 80121b6:	b538      	push	{r3, r4, r5, lr}
 80121b8:	4604      	mov	r4, r0
 80121ba:	460d      	mov	r5, r1
 80121bc:	f000 fab6 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121c0:	4603      	mov	r3, r0
 80121c2:	4629      	mov	r1, r5
 80121c4:	4620      	mov	r0, r4
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	689b      	ldr	r3, [r3, #8]
 80121ca:	4798      	blx	r3
 80121cc:	7a21      	ldrb	r1, [r4, #8]
 80121ce:	4628      	mov	r0, r5
 80121d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121d4:	f000 badc 	b.w	8012790 <ucdr_serialize_uint8_t>
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop

080121dc <_HazardLightsCommand__get_serialized_size>:
 80121dc:	b150      	cbz	r0, 80121f4 <_HazardLightsCommand__get_serialized_size+0x18>
 80121de:	2100      	movs	r1, #0
 80121e0:	b510      	push	{r4, lr}
 80121e2:	f000 fa3f 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80121e6:	4604      	mov	r4, r0
 80121e8:	2101      	movs	r1, #1
 80121ea:	f001 fd3f 	bl	8013c6c <ucdr_alignment>
 80121ee:	4420      	add	r0, r4
 80121f0:	3001      	adds	r0, #1
 80121f2:	bd10      	pop	{r4, pc}
 80121f4:	4770      	bx	lr
 80121f6:	bf00      	nop

080121f8 <_HazardLightsCommand__max_serialized_size>:
 80121f8:	b510      	push	{r4, lr}
 80121fa:	b082      	sub	sp, #8
 80121fc:	2401      	movs	r4, #1
 80121fe:	2100      	movs	r1, #0
 8012200:	f10d 0007 	add.w	r0, sp, #7
 8012204:	f88d 4007 	strb.w	r4, [sp, #7]
 8012208:	f000 fa7c 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 801220c:	4621      	mov	r1, r4
 801220e:	4604      	mov	r4, r0
 8012210:	f001 fd2c 	bl	8013c6c <ucdr_alignment>
 8012214:	4420      	add	r0, r4
 8012216:	3001      	adds	r0, #1
 8012218:	b002      	add	sp, #8
 801221a:	bd10      	pop	{r4, pc}

0801221c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 801221c:	4800      	ldr	r0, [pc, #0]	@ (8012220 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 801221e:	4770      	bx	lr
 8012220:	24000c60 	.word	0x24000c60

08012224 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 8012224:	b538      	push	{r3, r4, r5, lr}
 8012226:	b158      	cbz	r0, 8012240 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 8012228:	460d      	mov	r5, r1
 801222a:	f000 fa1b 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 801222e:	2101      	movs	r1, #1
 8012230:	182c      	adds	r4, r5, r0
 8012232:	f1c5 0501 	rsb	r5, r5, #1
 8012236:	4620      	mov	r0, r4
 8012238:	f001 fd18 	bl	8013c6c <ucdr_alignment>
 801223c:	4428      	add	r0, r5
 801223e:	4420      	add	r0, r4
 8012240:	bd38      	pop	{r3, r4, r5, pc}
 8012242:	bf00      	nop

08012244 <_HazardLightsReport__cdr_deserialize>:
 8012244:	b538      	push	{r3, r4, r5, lr}
 8012246:	460c      	mov	r4, r1
 8012248:	b179      	cbz	r1, 801226a <_HazardLightsReport__cdr_deserialize+0x26>
 801224a:	4605      	mov	r5, r0
 801224c:	f000 fa6e 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012250:	4603      	mov	r3, r0
 8012252:	4621      	mov	r1, r4
 8012254:	4628      	mov	r0, r5
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	68db      	ldr	r3, [r3, #12]
 801225a:	4798      	blx	r3
 801225c:	f104 0108 	add.w	r1, r4, #8
 8012260:	4628      	mov	r0, r5
 8012262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012266:	f000 baa9 	b.w	80127bc <ucdr_deserialize_uint8_t>
 801226a:	4608      	mov	r0, r1
 801226c:	bd38      	pop	{r3, r4, r5, pc}
 801226e:	bf00      	nop

08012270 <_HazardLightsReport__cdr_serialize>:
 8012270:	b180      	cbz	r0, 8012294 <_HazardLightsReport__cdr_serialize+0x24>
 8012272:	b538      	push	{r3, r4, r5, lr}
 8012274:	4604      	mov	r4, r0
 8012276:	460d      	mov	r5, r1
 8012278:	f000 fa58 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801227c:	4603      	mov	r3, r0
 801227e:	4629      	mov	r1, r5
 8012280:	4620      	mov	r0, r4
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	689b      	ldr	r3, [r3, #8]
 8012286:	4798      	blx	r3
 8012288:	7a21      	ldrb	r1, [r4, #8]
 801228a:	4628      	mov	r0, r5
 801228c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012290:	f000 ba7e 	b.w	8012790 <ucdr_serialize_uint8_t>
 8012294:	4770      	bx	lr
 8012296:	bf00      	nop

08012298 <_HazardLightsReport__get_serialized_size>:
 8012298:	b150      	cbz	r0, 80122b0 <_HazardLightsReport__get_serialized_size+0x18>
 801229a:	2100      	movs	r1, #0
 801229c:	b510      	push	{r4, lr}
 801229e:	f000 f9e1 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80122a2:	4604      	mov	r4, r0
 80122a4:	2101      	movs	r1, #1
 80122a6:	f001 fce1 	bl	8013c6c <ucdr_alignment>
 80122aa:	4420      	add	r0, r4
 80122ac:	3001      	adds	r0, #1
 80122ae:	bd10      	pop	{r4, pc}
 80122b0:	4770      	bx	lr
 80122b2:	bf00      	nop

080122b4 <_HazardLightsReport__max_serialized_size>:
 80122b4:	b510      	push	{r4, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	2401      	movs	r4, #1
 80122ba:	2100      	movs	r1, #0
 80122bc:	f10d 0007 	add.w	r0, sp, #7
 80122c0:	f88d 4007 	strb.w	r4, [sp, #7]
 80122c4:	f000 fa1e 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 80122c8:	4621      	mov	r1, r4
 80122ca:	4604      	mov	r4, r0
 80122cc:	f001 fcce 	bl	8013c6c <ucdr_alignment>
 80122d0:	4420      	add	r0, r4
 80122d2:	3001      	adds	r0, #1
 80122d4:	b002      	add	sp, #8
 80122d6:	bd10      	pop	{r4, pc}

080122d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 80122d8:	4800      	ldr	r0, [pc, #0]	@ (80122dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 80122da:	4770      	bx	lr
 80122dc:	24000c88 	.word	0x24000c88

080122e0 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 80122e0:	b538      	push	{r3, r4, r5, lr}
 80122e2:	b158      	cbz	r0, 80122fc <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 80122e4:	460d      	mov	r5, r1
 80122e6:	f000 f9bd 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80122ea:	2104      	movs	r1, #4
 80122ec:	182c      	adds	r4, r5, r0
 80122ee:	f1c5 0504 	rsb	r5, r5, #4
 80122f2:	4620      	mov	r0, r4
 80122f4:	f001 fcba 	bl	8013c6c <ucdr_alignment>
 80122f8:	4428      	add	r0, r5
 80122fa:	4420      	add	r0, r4
 80122fc:	bd38      	pop	{r3, r4, r5, pc}
 80122fe:	bf00      	nop

08012300 <_SteeringReport__cdr_deserialize>:
 8012300:	b538      	push	{r3, r4, r5, lr}
 8012302:	460c      	mov	r4, r1
 8012304:	b179      	cbz	r1, 8012326 <_SteeringReport__cdr_deserialize+0x26>
 8012306:	4605      	mov	r5, r0
 8012308:	f000 fa10 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801230c:	4603      	mov	r3, r0
 801230e:	4621      	mov	r1, r4
 8012310:	4628      	mov	r0, r5
 8012312:	685b      	ldr	r3, [r3, #4]
 8012314:	68db      	ldr	r3, [r3, #12]
 8012316:	4798      	blx	r3
 8012318:	f104 0108 	add.w	r1, r4, #8
 801231c:	4628      	mov	r0, r5
 801231e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012322:	f001 ba25 	b.w	8013770 <ucdr_deserialize_float>
 8012326:	4608      	mov	r0, r1
 8012328:	bd38      	pop	{r3, r4, r5, pc}
 801232a:	bf00      	nop

0801232c <_SteeringReport__cdr_serialize>:
 801232c:	b188      	cbz	r0, 8012352 <_SteeringReport__cdr_serialize+0x26>
 801232e:	b538      	push	{r3, r4, r5, lr}
 8012330:	4604      	mov	r4, r0
 8012332:	460d      	mov	r5, r1
 8012334:	f000 f9fa 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012338:	4603      	mov	r3, r0
 801233a:	4629      	mov	r1, r5
 801233c:	4620      	mov	r0, r4
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	689b      	ldr	r3, [r3, #8]
 8012342:	4798      	blx	r3
 8012344:	ed94 0a02 	vldr	s0, [r4, #8]
 8012348:	4628      	mov	r0, r5
 801234a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801234e:	f001 b977 	b.w	8013640 <ucdr_serialize_float>
 8012352:	4770      	bx	lr

08012354 <_SteeringReport__get_serialized_size>:
 8012354:	b150      	cbz	r0, 801236c <_SteeringReport__get_serialized_size+0x18>
 8012356:	2100      	movs	r1, #0
 8012358:	b510      	push	{r4, lr}
 801235a:	f000 f983 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 801235e:	4604      	mov	r4, r0
 8012360:	2104      	movs	r1, #4
 8012362:	f001 fc83 	bl	8013c6c <ucdr_alignment>
 8012366:	4420      	add	r0, r4
 8012368:	3004      	adds	r0, #4
 801236a:	bd10      	pop	{r4, pc}
 801236c:	4770      	bx	lr
 801236e:	bf00      	nop

08012370 <_SteeringReport__max_serialized_size>:
 8012370:	b510      	push	{r4, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	2301      	movs	r3, #1
 8012376:	2100      	movs	r1, #0
 8012378:	f10d 0007 	add.w	r0, sp, #7
 801237c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012380:	f000 f9c0 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 8012384:	4604      	mov	r4, r0
 8012386:	2104      	movs	r1, #4
 8012388:	f001 fc70 	bl	8013c6c <ucdr_alignment>
 801238c:	4420      	add	r0, r4
 801238e:	3004      	adds	r0, #4
 8012390:	b002      	add	sp, #8
 8012392:	bd10      	pop	{r4, pc}

08012394 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8012394:	4800      	ldr	r0, [pc, #0]	@ (8012398 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 8012396:	4770      	bx	lr
 8012398:	24000cb0 	.word	0x24000cb0

0801239c <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 801239c:	b538      	push	{r3, r4, r5, lr}
 801239e:	b158      	cbz	r0, 80123b8 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 80123a0:	460d      	mov	r5, r1
 80123a2:	f000 f95f 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80123a6:	2101      	movs	r1, #1
 80123a8:	182c      	adds	r4, r5, r0
 80123aa:	f1c5 0501 	rsb	r5, r5, #1
 80123ae:	4620      	mov	r0, r4
 80123b0:	f001 fc5c 	bl	8013c6c <ucdr_alignment>
 80123b4:	4428      	add	r0, r5
 80123b6:	4420      	add	r0, r4
 80123b8:	bd38      	pop	{r3, r4, r5, pc}
 80123ba:	bf00      	nop

080123bc <_TurnIndicatorsCommand__cdr_deserialize>:
 80123bc:	b538      	push	{r3, r4, r5, lr}
 80123be:	460c      	mov	r4, r1
 80123c0:	b179      	cbz	r1, 80123e2 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 80123c2:	4605      	mov	r5, r0
 80123c4:	f000 f9b2 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80123c8:	4603      	mov	r3, r0
 80123ca:	4621      	mov	r1, r4
 80123cc:	4628      	mov	r0, r5
 80123ce:	685b      	ldr	r3, [r3, #4]
 80123d0:	68db      	ldr	r3, [r3, #12]
 80123d2:	4798      	blx	r3
 80123d4:	f104 0108 	add.w	r1, r4, #8
 80123d8:	4628      	mov	r0, r5
 80123da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123de:	f000 b9ed 	b.w	80127bc <ucdr_deserialize_uint8_t>
 80123e2:	4608      	mov	r0, r1
 80123e4:	bd38      	pop	{r3, r4, r5, pc}
 80123e6:	bf00      	nop

080123e8 <_TurnIndicatorsCommand__cdr_serialize>:
 80123e8:	b180      	cbz	r0, 801240c <_TurnIndicatorsCommand__cdr_serialize+0x24>
 80123ea:	b538      	push	{r3, r4, r5, lr}
 80123ec:	4604      	mov	r4, r0
 80123ee:	460d      	mov	r5, r1
 80123f0:	f000 f99c 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80123f4:	4603      	mov	r3, r0
 80123f6:	4629      	mov	r1, r5
 80123f8:	4620      	mov	r0, r4
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	689b      	ldr	r3, [r3, #8]
 80123fe:	4798      	blx	r3
 8012400:	7a21      	ldrb	r1, [r4, #8]
 8012402:	4628      	mov	r0, r5
 8012404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012408:	f000 b9c2 	b.w	8012790 <ucdr_serialize_uint8_t>
 801240c:	4770      	bx	lr
 801240e:	bf00      	nop

08012410 <_TurnIndicatorsCommand__get_serialized_size>:
 8012410:	b150      	cbz	r0, 8012428 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 8012412:	2100      	movs	r1, #0
 8012414:	b510      	push	{r4, lr}
 8012416:	f000 f925 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 801241a:	4604      	mov	r4, r0
 801241c:	2101      	movs	r1, #1
 801241e:	f001 fc25 	bl	8013c6c <ucdr_alignment>
 8012422:	4420      	add	r0, r4
 8012424:	3001      	adds	r0, #1
 8012426:	bd10      	pop	{r4, pc}
 8012428:	4770      	bx	lr
 801242a:	bf00      	nop

0801242c <_TurnIndicatorsCommand__max_serialized_size>:
 801242c:	b510      	push	{r4, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	2401      	movs	r4, #1
 8012432:	2100      	movs	r1, #0
 8012434:	f10d 0007 	add.w	r0, sp, #7
 8012438:	f88d 4007 	strb.w	r4, [sp, #7]
 801243c:	f000 f962 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 8012440:	4621      	mov	r1, r4
 8012442:	4604      	mov	r4, r0
 8012444:	f001 fc12 	bl	8013c6c <ucdr_alignment>
 8012448:	4420      	add	r0, r4
 801244a:	3001      	adds	r0, #1
 801244c:	b002      	add	sp, #8
 801244e:	bd10      	pop	{r4, pc}

08012450 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012450:	4800      	ldr	r0, [pc, #0]	@ (8012454 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 8012452:	4770      	bx	lr
 8012454:	24000cd8 	.word	0x24000cd8

08012458 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012458:	b538      	push	{r3, r4, r5, lr}
 801245a:	b158      	cbz	r0, 8012474 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 801245c:	460d      	mov	r5, r1
 801245e:	f000 f901 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 8012462:	2101      	movs	r1, #1
 8012464:	182c      	adds	r4, r5, r0
 8012466:	f1c5 0501 	rsb	r5, r5, #1
 801246a:	4620      	mov	r0, r4
 801246c:	f001 fbfe 	bl	8013c6c <ucdr_alignment>
 8012470:	4428      	add	r0, r5
 8012472:	4420      	add	r0, r4
 8012474:	bd38      	pop	{r3, r4, r5, pc}
 8012476:	bf00      	nop

08012478 <_TurnIndicatorsReport__cdr_deserialize>:
 8012478:	b538      	push	{r3, r4, r5, lr}
 801247a:	460c      	mov	r4, r1
 801247c:	b179      	cbz	r1, 801249e <_TurnIndicatorsReport__cdr_deserialize+0x26>
 801247e:	4605      	mov	r5, r0
 8012480:	f000 f954 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012484:	4603      	mov	r3, r0
 8012486:	4621      	mov	r1, r4
 8012488:	4628      	mov	r0, r5
 801248a:	685b      	ldr	r3, [r3, #4]
 801248c:	68db      	ldr	r3, [r3, #12]
 801248e:	4798      	blx	r3
 8012490:	f104 0108 	add.w	r1, r4, #8
 8012494:	4628      	mov	r0, r5
 8012496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801249a:	f000 b98f 	b.w	80127bc <ucdr_deserialize_uint8_t>
 801249e:	4608      	mov	r0, r1
 80124a0:	bd38      	pop	{r3, r4, r5, pc}
 80124a2:	bf00      	nop

080124a4 <_TurnIndicatorsReport__cdr_serialize>:
 80124a4:	b180      	cbz	r0, 80124c8 <_TurnIndicatorsReport__cdr_serialize+0x24>
 80124a6:	b538      	push	{r3, r4, r5, lr}
 80124a8:	4604      	mov	r4, r0
 80124aa:	460d      	mov	r5, r1
 80124ac:	f000 f93e 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80124b0:	4603      	mov	r3, r0
 80124b2:	4629      	mov	r1, r5
 80124b4:	4620      	mov	r0, r4
 80124b6:	685b      	ldr	r3, [r3, #4]
 80124b8:	689b      	ldr	r3, [r3, #8]
 80124ba:	4798      	blx	r3
 80124bc:	7a21      	ldrb	r1, [r4, #8]
 80124be:	4628      	mov	r0, r5
 80124c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124c4:	f000 b964 	b.w	8012790 <ucdr_serialize_uint8_t>
 80124c8:	4770      	bx	lr
 80124ca:	bf00      	nop

080124cc <_TurnIndicatorsReport__get_serialized_size>:
 80124cc:	b150      	cbz	r0, 80124e4 <_TurnIndicatorsReport__get_serialized_size+0x18>
 80124ce:	2100      	movs	r1, #0
 80124d0:	b510      	push	{r4, lr}
 80124d2:	f000 f8c7 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80124d6:	4604      	mov	r4, r0
 80124d8:	2101      	movs	r1, #1
 80124da:	f001 fbc7 	bl	8013c6c <ucdr_alignment>
 80124de:	4420      	add	r0, r4
 80124e0:	3001      	adds	r0, #1
 80124e2:	bd10      	pop	{r4, pc}
 80124e4:	4770      	bx	lr
 80124e6:	bf00      	nop

080124e8 <_TurnIndicatorsReport__max_serialized_size>:
 80124e8:	b510      	push	{r4, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	2401      	movs	r4, #1
 80124ee:	2100      	movs	r1, #0
 80124f0:	f10d 0007 	add.w	r0, sp, #7
 80124f4:	f88d 4007 	strb.w	r4, [sp, #7]
 80124f8:	f000 f904 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 80124fc:	4621      	mov	r1, r4
 80124fe:	4604      	mov	r4, r0
 8012500:	f001 fbb4 	bl	8013c6c <ucdr_alignment>
 8012504:	4420      	add	r0, r4
 8012506:	3001      	adds	r0, #1
 8012508:	b002      	add	sp, #8
 801250a:	bd10      	pop	{r4, pc}

0801250c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 801250c:	4800      	ldr	r0, [pc, #0]	@ (8012510 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 801250e:	4770      	bx	lr
 8012510:	24000d00 	.word	0x24000d00

08012514 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 8012514:	b1c8      	cbz	r0, 801254a <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 8012516:	b570      	push	{r4, r5, r6, lr}
 8012518:	460d      	mov	r5, r1
 801251a:	f002 fd2b 	bl	8014f74 <get_serialized_size_std_msgs__msg__Header>
 801251e:	2104      	movs	r1, #4
 8012520:	182e      	adds	r6, r5, r0
 8012522:	f1c5 0504 	rsb	r5, r5, #4
 8012526:	4630      	mov	r0, r6
 8012528:	f001 fba0 	bl	8013c6c <ucdr_alignment>
 801252c:	2104      	movs	r1, #4
 801252e:	1844      	adds	r4, r0, r1
 8012530:	4434      	add	r4, r6
 8012532:	4620      	mov	r0, r4
 8012534:	f001 fb9a 	bl	8013c6c <ucdr_alignment>
 8012538:	2104      	movs	r1, #4
 801253a:	4408      	add	r0, r1
 801253c:	4404      	add	r4, r0
 801253e:	4620      	mov	r0, r4
 8012540:	f001 fb94 	bl	8013c6c <ucdr_alignment>
 8012544:	4428      	add	r0, r5
 8012546:	4420      	add	r0, r4
 8012548:	bd70      	pop	{r4, r5, r6, pc}
 801254a:	4770      	bx	lr

0801254c <_VelocityReport__cdr_deserialize>:
 801254c:	b538      	push	{r3, r4, r5, lr}
 801254e:	460c      	mov	r4, r1
 8012550:	b1c9      	cbz	r1, 8012586 <_VelocityReport__cdr_deserialize+0x3a>
 8012552:	4605      	mov	r5, r0
 8012554:	f002 fd92 	bl	801507c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012558:	4603      	mov	r3, r0
 801255a:	4621      	mov	r1, r4
 801255c:	4628      	mov	r0, r5
 801255e:	685b      	ldr	r3, [r3, #4]
 8012560:	68db      	ldr	r3, [r3, #12]
 8012562:	4798      	blx	r3
 8012564:	f104 0114 	add.w	r1, r4, #20
 8012568:	4628      	mov	r0, r5
 801256a:	f001 f901 	bl	8013770 <ucdr_deserialize_float>
 801256e:	f104 0118 	add.w	r1, r4, #24
 8012572:	4628      	mov	r0, r5
 8012574:	f001 f8fc 	bl	8013770 <ucdr_deserialize_float>
 8012578:	f104 011c 	add.w	r1, r4, #28
 801257c:	4628      	mov	r0, r5
 801257e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012582:	f001 b8f5 	b.w	8013770 <ucdr_deserialize_float>
 8012586:	4608      	mov	r0, r1
 8012588:	bd38      	pop	{r3, r4, r5, pc}
 801258a:	bf00      	nop

0801258c <_VelocityReport__cdr_serialize>:
 801258c:	b1d8      	cbz	r0, 80125c6 <_VelocityReport__cdr_serialize+0x3a>
 801258e:	b538      	push	{r3, r4, r5, lr}
 8012590:	4604      	mov	r4, r0
 8012592:	460d      	mov	r5, r1
 8012594:	f002 fd72 	bl	801507c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012598:	4603      	mov	r3, r0
 801259a:	4629      	mov	r1, r5
 801259c:	4620      	mov	r0, r4
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	689b      	ldr	r3, [r3, #8]
 80125a2:	4798      	blx	r3
 80125a4:	ed94 0a05 	vldr	s0, [r4, #20]
 80125a8:	4628      	mov	r0, r5
 80125aa:	f001 f849 	bl	8013640 <ucdr_serialize_float>
 80125ae:	ed94 0a06 	vldr	s0, [r4, #24]
 80125b2:	4628      	mov	r0, r5
 80125b4:	f001 f844 	bl	8013640 <ucdr_serialize_float>
 80125b8:	ed94 0a07 	vldr	s0, [r4, #28]
 80125bc:	4628      	mov	r0, r5
 80125be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125c2:	f001 b83d 	b.w	8013640 <ucdr_serialize_float>
 80125c6:	4770      	bx	lr

080125c8 <_VelocityReport__get_serialized_size>:
 80125c8:	b1b0      	cbz	r0, 80125f8 <_VelocityReport__get_serialized_size+0x30>
 80125ca:	2100      	movs	r1, #0
 80125cc:	b510      	push	{r4, lr}
 80125ce:	f002 fcd1 	bl	8014f74 <get_serialized_size_std_msgs__msg__Header>
 80125d2:	4604      	mov	r4, r0
 80125d4:	2104      	movs	r1, #4
 80125d6:	f001 fb49 	bl	8013c6c <ucdr_alignment>
 80125da:	2104      	movs	r1, #4
 80125dc:	4420      	add	r0, r4
 80125de:	1844      	adds	r4, r0, r1
 80125e0:	4620      	mov	r0, r4
 80125e2:	f001 fb43 	bl	8013c6c <ucdr_alignment>
 80125e6:	2104      	movs	r1, #4
 80125e8:	4408      	add	r0, r1
 80125ea:	4404      	add	r4, r0
 80125ec:	4620      	mov	r0, r4
 80125ee:	f001 fb3d 	bl	8013c6c <ucdr_alignment>
 80125f2:	3004      	adds	r0, #4
 80125f4:	4420      	add	r0, r4
 80125f6:	bd10      	pop	{r4, pc}
 80125f8:	4770      	bx	lr
 80125fa:	bf00      	nop

080125fc <_VelocityReport__max_serialized_size>:
 80125fc:	b510      	push	{r4, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	2301      	movs	r3, #1
 8012602:	2100      	movs	r1, #0
 8012604:	f10d 0007 	add.w	r0, sp, #7
 8012608:	f88d 3007 	strb.w	r3, [sp, #7]
 801260c:	f002 fd2c 	bl	8015068 <max_serialized_size_std_msgs__msg__Header>
 8012610:	4604      	mov	r4, r0
 8012612:	2104      	movs	r1, #4
 8012614:	f001 fb2a 	bl	8013c6c <ucdr_alignment>
 8012618:	2104      	movs	r1, #4
 801261a:	4420      	add	r0, r4
 801261c:	1844      	adds	r4, r0, r1
 801261e:	4620      	mov	r0, r4
 8012620:	f001 fb24 	bl	8013c6c <ucdr_alignment>
 8012624:	2104      	movs	r1, #4
 8012626:	4408      	add	r0, r1
 8012628:	4404      	add	r4, r0
 801262a:	4620      	mov	r0, r4
 801262c:	f001 fb1e 	bl	8013c6c <ucdr_alignment>
 8012630:	3004      	adds	r0, #4
 8012632:	4420      	add	r0, r4
 8012634:	b002      	add	sp, #8
 8012636:	bd10      	pop	{r4, pc}

08012638 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8012638:	4800      	ldr	r0, [pc, #0]	@ (801263c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 801263a:	4770      	bx	lr
 801263c:	24000d28 	.word	0x24000d28

08012640 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012640:	f003 b92c 	b.w	801589c <builtin_interfaces__msg__Time__init>

08012644 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8012644:	f003 b92e 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>

08012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012648:	4b04      	ldr	r3, [pc, #16]	@ (801265c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801264a:	681a      	ldr	r2, [r3, #0]
 801264c:	b10a      	cbz	r2, 8012652 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801264e:	4803      	ldr	r0, [pc, #12]	@ (801265c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012650:	4770      	bx	lr
 8012652:	4a03      	ldr	r2, [pc, #12]	@ (8012660 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8012654:	4801      	ldr	r0, [pc, #4]	@ (801265c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012656:	6812      	ldr	r2, [r2, #0]
 8012658:	601a      	str	r2, [r3, #0]
 801265a:	4770      	bx	lr
 801265c:	24000dc8 	.word	0x24000dc8
 8012660:	24000e14 	.word	0x24000e14

08012664 <get_serialized_size_builtin_interfaces__msg__Time>:
 8012664:	b180      	cbz	r0, 8012688 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8012666:	b538      	push	{r3, r4, r5, lr}
 8012668:	460d      	mov	r5, r1
 801266a:	2104      	movs	r1, #4
 801266c:	4628      	mov	r0, r5
 801266e:	f001 fafd 	bl	8013c6c <ucdr_alignment>
 8012672:	1d2b      	adds	r3, r5, #4
 8012674:	f1c5 0504 	rsb	r5, r5, #4
 8012678:	2104      	movs	r1, #4
 801267a:	181c      	adds	r4, r3, r0
 801267c:	4620      	mov	r0, r4
 801267e:	f001 faf5 	bl	8013c6c <ucdr_alignment>
 8012682:	4428      	add	r0, r5
 8012684:	4420      	add	r0, r4
 8012686:	bd38      	pop	{r3, r4, r5, pc}
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop

0801268c <_Time__cdr_deserialize>:
 801268c:	b538      	push	{r3, r4, r5, lr}
 801268e:	460c      	mov	r4, r1
 8012690:	b141      	cbz	r1, 80126a4 <_Time__cdr_deserialize+0x18>
 8012692:	4605      	mov	r5, r0
 8012694:	f000 ff44 	bl	8013520 <ucdr_deserialize_int32_t>
 8012698:	1d21      	adds	r1, r4, #4
 801269a:	4628      	mov	r0, r5
 801269c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126a0:	f000 bbbc 	b.w	8012e1c <ucdr_deserialize_uint32_t>
 80126a4:	4608      	mov	r0, r1
 80126a6:	bd38      	pop	{r3, r4, r5, pc}

080126a8 <_Time__cdr_serialize>:
 80126a8:	b160      	cbz	r0, 80126c4 <_Time__cdr_serialize+0x1c>
 80126aa:	b538      	push	{r3, r4, r5, lr}
 80126ac:	460d      	mov	r5, r1
 80126ae:	4604      	mov	r4, r0
 80126b0:	6801      	ldr	r1, [r0, #0]
 80126b2:	4628      	mov	r0, r5
 80126b4:	f000 fe9c 	bl	80133f0 <ucdr_serialize_int32_t>
 80126b8:	6861      	ldr	r1, [r4, #4]
 80126ba:	4628      	mov	r0, r5
 80126bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126c0:	f000 ba7c 	b.w	8012bbc <ucdr_serialize_uint32_t>
 80126c4:	4770      	bx	lr
 80126c6:	bf00      	nop

080126c8 <_Time__get_serialized_size>:
 80126c8:	b160      	cbz	r0, 80126e4 <_Time__get_serialized_size+0x1c>
 80126ca:	2104      	movs	r1, #4
 80126cc:	2000      	movs	r0, #0
 80126ce:	b510      	push	{r4, lr}
 80126d0:	f001 facc 	bl	8013c6c <ucdr_alignment>
 80126d4:	2104      	movs	r1, #4
 80126d6:	1844      	adds	r4, r0, r1
 80126d8:	4620      	mov	r0, r4
 80126da:	f001 fac7 	bl	8013c6c <ucdr_alignment>
 80126de:	3004      	adds	r0, #4
 80126e0:	4420      	add	r0, r4
 80126e2:	bd10      	pop	{r4, pc}
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop

080126e8 <_Time__max_serialized_size>:
 80126e8:	b510      	push	{r4, lr}
 80126ea:	2104      	movs	r1, #4
 80126ec:	2000      	movs	r0, #0
 80126ee:	f001 fabd 	bl	8013c6c <ucdr_alignment>
 80126f2:	2104      	movs	r1, #4
 80126f4:	1844      	adds	r4, r0, r1
 80126f6:	4620      	mov	r0, r4
 80126f8:	f001 fab8 	bl	8013c6c <ucdr_alignment>
 80126fc:	3004      	adds	r0, #4
 80126fe:	4420      	add	r0, r4
 8012700:	bd10      	pop	{r4, pc}
 8012702:	bf00      	nop

08012704 <max_serialized_size_builtin_interfaces__msg__Time>:
 8012704:	b538      	push	{r3, r4, r5, lr}
 8012706:	460c      	mov	r4, r1
 8012708:	2301      	movs	r3, #1
 801270a:	2104      	movs	r1, #4
 801270c:	1d25      	adds	r5, r4, #4
 801270e:	7003      	strb	r3, [r0, #0]
 8012710:	4620      	mov	r0, r4
 8012712:	f1c4 0404 	rsb	r4, r4, #4
 8012716:	f001 faa9 	bl	8013c6c <ucdr_alignment>
 801271a:	4405      	add	r5, r0
 801271c:	2104      	movs	r1, #4
 801271e:	4628      	mov	r0, r5
 8012720:	f001 faa4 	bl	8013c6c <ucdr_alignment>
 8012724:	4420      	add	r0, r4
 8012726:	4428      	add	r0, r5
 8012728:	bd38      	pop	{r3, r4, r5, pc}
 801272a:	bf00      	nop

0801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801272c:	4800      	ldr	r0, [pc, #0]	@ (8012730 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801272e:	4770      	bx	lr
 8012730:	24000dd4 	.word	0x24000dd4

08012734 <ucdr_serialize_bool>:
 8012734:	b538      	push	{r3, r4, r5, lr}
 8012736:	460d      	mov	r5, r1
 8012738:	2101      	movs	r1, #1
 801273a:	4604      	mov	r4, r0
 801273c:	f001 fa4a 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012740:	b148      	cbz	r0, 8012756 <ucdr_serialize_bool+0x22>
 8012742:	68a3      	ldr	r3, [r4, #8]
 8012744:	2101      	movs	r1, #1
 8012746:	701d      	strb	r5, [r3, #0]
 8012748:	68a2      	ldr	r2, [r4, #8]
 801274a:	6923      	ldr	r3, [r4, #16]
 801274c:	440a      	add	r2, r1
 801274e:	7561      	strb	r1, [r4, #21]
 8012750:	440b      	add	r3, r1
 8012752:	60a2      	str	r2, [r4, #8]
 8012754:	6123      	str	r3, [r4, #16]
 8012756:	7da0      	ldrb	r0, [r4, #22]
 8012758:	f080 0001 	eor.w	r0, r0, #1
 801275c:	bd38      	pop	{r3, r4, r5, pc}
 801275e:	bf00      	nop

08012760 <ucdr_deserialize_bool>:
 8012760:	b538      	push	{r3, r4, r5, lr}
 8012762:	460d      	mov	r5, r1
 8012764:	2101      	movs	r1, #1
 8012766:	4604      	mov	r4, r0
 8012768:	f001 fa34 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 801276c:	b160      	cbz	r0, 8012788 <ucdr_deserialize_bool+0x28>
 801276e:	68a2      	ldr	r2, [r4, #8]
 8012770:	2101      	movs	r1, #1
 8012772:	6923      	ldr	r3, [r4, #16]
 8012774:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012778:	440b      	add	r3, r1
 801277a:	3800      	subs	r0, #0
 801277c:	bf18      	it	ne
 801277e:	2001      	movne	r0, #1
 8012780:	7028      	strb	r0, [r5, #0]
 8012782:	60a2      	str	r2, [r4, #8]
 8012784:	6123      	str	r3, [r4, #16]
 8012786:	7561      	strb	r1, [r4, #21]
 8012788:	7da0      	ldrb	r0, [r4, #22]
 801278a:	f080 0001 	eor.w	r0, r0, #1
 801278e:	bd38      	pop	{r3, r4, r5, pc}

08012790 <ucdr_serialize_uint8_t>:
 8012790:	b538      	push	{r3, r4, r5, lr}
 8012792:	460d      	mov	r5, r1
 8012794:	2101      	movs	r1, #1
 8012796:	4604      	mov	r4, r0
 8012798:	f001 fa1c 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 801279c:	b148      	cbz	r0, 80127b2 <ucdr_serialize_uint8_t+0x22>
 801279e:	68a3      	ldr	r3, [r4, #8]
 80127a0:	2101      	movs	r1, #1
 80127a2:	701d      	strb	r5, [r3, #0]
 80127a4:	68a2      	ldr	r2, [r4, #8]
 80127a6:	6923      	ldr	r3, [r4, #16]
 80127a8:	440a      	add	r2, r1
 80127aa:	7561      	strb	r1, [r4, #21]
 80127ac:	440b      	add	r3, r1
 80127ae:	60a2      	str	r2, [r4, #8]
 80127b0:	6123      	str	r3, [r4, #16]
 80127b2:	7da0      	ldrb	r0, [r4, #22]
 80127b4:	f080 0001 	eor.w	r0, r0, #1
 80127b8:	bd38      	pop	{r3, r4, r5, pc}
 80127ba:	bf00      	nop

080127bc <ucdr_deserialize_uint8_t>:
 80127bc:	b538      	push	{r3, r4, r5, lr}
 80127be:	460d      	mov	r5, r1
 80127c0:	2101      	movs	r1, #1
 80127c2:	4604      	mov	r4, r0
 80127c4:	f001 fa06 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 80127c8:	b150      	cbz	r0, 80127e0 <ucdr_deserialize_uint8_t+0x24>
 80127ca:	68a3      	ldr	r3, [r4, #8]
 80127cc:	2101      	movs	r1, #1
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	702b      	strb	r3, [r5, #0]
 80127d2:	68a2      	ldr	r2, [r4, #8]
 80127d4:	6923      	ldr	r3, [r4, #16]
 80127d6:	440a      	add	r2, r1
 80127d8:	7561      	strb	r1, [r4, #21]
 80127da:	440b      	add	r3, r1
 80127dc:	60a2      	str	r2, [r4, #8]
 80127de:	6123      	str	r3, [r4, #16]
 80127e0:	7da0      	ldrb	r0, [r4, #22]
 80127e2:	f080 0001 	eor.w	r0, r0, #1
 80127e6:	bd38      	pop	{r3, r4, r5, pc}

080127e8 <ucdr_serialize_uint16_t>:
 80127e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127ec:	460b      	mov	r3, r1
 80127ee:	b082      	sub	sp, #8
 80127f0:	4604      	mov	r4, r0
 80127f2:	2102      	movs	r1, #2
 80127f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80127f8:	f001 fa40 	bl	8013c7c <ucdr_buffer_alignment>
 80127fc:	4601      	mov	r1, r0
 80127fe:	4620      	mov	r0, r4
 8012800:	7d67      	ldrb	r7, [r4, #21]
 8012802:	f001 fa83 	bl	8013d0c <ucdr_advance_buffer>
 8012806:	2102      	movs	r1, #2
 8012808:	4620      	mov	r0, r4
 801280a:	f001 f9d7 	bl	8013bbc <ucdr_check_buffer_available_for>
 801280e:	bb78      	cbnz	r0, 8012870 <ucdr_serialize_uint16_t+0x88>
 8012810:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012814:	42ab      	cmp	r3, r5
 8012816:	d926      	bls.n	8012866 <ucdr_serialize_uint16_t+0x7e>
 8012818:	1b5e      	subs	r6, r3, r5
 801281a:	60a3      	str	r3, [r4, #8]
 801281c:	6923      	ldr	r3, [r4, #16]
 801281e:	4620      	mov	r0, r4
 8012820:	f1c6 0802 	rsb	r8, r6, #2
 8012824:	4433      	add	r3, r6
 8012826:	4641      	mov	r1, r8
 8012828:	6123      	str	r3, [r4, #16]
 801282a:	f001 f9d3 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 801282e:	2800      	cmp	r0, #0
 8012830:	d03b      	beq.n	80128aa <ucdr_serialize_uint16_t+0xc2>
 8012832:	7d23      	ldrb	r3, [r4, #20]
 8012834:	2b01      	cmp	r3, #1
 8012836:	d04a      	beq.n	80128ce <ucdr_serialize_uint16_t+0xe6>
 8012838:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801283c:	702b      	strb	r3, [r5, #0]
 801283e:	2e00      	cmp	r6, #0
 8012840:	d040      	beq.n	80128c4 <ucdr_serialize_uint16_t+0xdc>
 8012842:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012846:	706b      	strb	r3, [r5, #1]
 8012848:	6923      	ldr	r3, [r4, #16]
 801284a:	2102      	movs	r1, #2
 801284c:	68a2      	ldr	r2, [r4, #8]
 801284e:	3302      	adds	r3, #2
 8012850:	7da0      	ldrb	r0, [r4, #22]
 8012852:	4442      	add	r2, r8
 8012854:	7561      	strb	r1, [r4, #21]
 8012856:	1b9e      	subs	r6, r3, r6
 8012858:	f080 0001 	eor.w	r0, r0, #1
 801285c:	60a2      	str	r2, [r4, #8]
 801285e:	6126      	str	r6, [r4, #16]
 8012860:	b002      	add	sp, #8
 8012862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012866:	2102      	movs	r1, #2
 8012868:	4620      	mov	r0, r4
 801286a:	f001 f9b3 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 801286e:	b190      	cbz	r0, 8012896 <ucdr_serialize_uint16_t+0xae>
 8012870:	7d23      	ldrb	r3, [r4, #20]
 8012872:	2b01      	cmp	r3, #1
 8012874:	68a3      	ldr	r3, [r4, #8]
 8012876:	d014      	beq.n	80128a2 <ucdr_serialize_uint16_t+0xba>
 8012878:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801287c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012880:	7019      	strb	r1, [r3, #0]
 8012882:	68a3      	ldr	r3, [r4, #8]
 8012884:	705a      	strb	r2, [r3, #1]
 8012886:	2102      	movs	r1, #2
 8012888:	68a2      	ldr	r2, [r4, #8]
 801288a:	6923      	ldr	r3, [r4, #16]
 801288c:	440a      	add	r2, r1
 801288e:	7561      	strb	r1, [r4, #21]
 8012890:	440b      	add	r3, r1
 8012892:	60a2      	str	r2, [r4, #8]
 8012894:	6123      	str	r3, [r4, #16]
 8012896:	7da0      	ldrb	r0, [r4, #22]
 8012898:	f080 0001 	eor.w	r0, r0, #1
 801289c:	b002      	add	sp, #8
 801289e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80128a6:	801a      	strh	r2, [r3, #0]
 80128a8:	e7ed      	b.n	8012886 <ucdr_serialize_uint16_t+0x9e>
 80128aa:	68a2      	ldr	r2, [r4, #8]
 80128ac:	6923      	ldr	r3, [r4, #16]
 80128ae:	7da0      	ldrb	r0, [r4, #22]
 80128b0:	1b92      	subs	r2, r2, r6
 80128b2:	1b9b      	subs	r3, r3, r6
 80128b4:	7567      	strb	r7, [r4, #21]
 80128b6:	f080 0001 	eor.w	r0, r0, #1
 80128ba:	60a2      	str	r2, [r4, #8]
 80128bc:	6123      	str	r3, [r4, #16]
 80128be:	b002      	add	sp, #8
 80128c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128c4:	68a3      	ldr	r3, [r4, #8]
 80128c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80128ca:	701a      	strb	r2, [r3, #0]
 80128cc:	e7bc      	b.n	8012848 <ucdr_serialize_uint16_t+0x60>
 80128ce:	4628      	mov	r0, r5
 80128d0:	f10d 0506 	add.w	r5, sp, #6
 80128d4:	4632      	mov	r2, r6
 80128d6:	4629      	mov	r1, r5
 80128d8:	f00e fc8f 	bl	80211fa <memcpy>
 80128dc:	4642      	mov	r2, r8
 80128de:	19a9      	adds	r1, r5, r6
 80128e0:	68a0      	ldr	r0, [r4, #8]
 80128e2:	f00e fc8a 	bl	80211fa <memcpy>
 80128e6:	e7af      	b.n	8012848 <ucdr_serialize_uint16_t+0x60>

080128e8 <ucdr_serialize_endian_uint16_t>:
 80128e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128ec:	4604      	mov	r4, r0
 80128ee:	b083      	sub	sp, #12
 80128f0:	460d      	mov	r5, r1
 80128f2:	2102      	movs	r1, #2
 80128f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80128f8:	f001 f9c0 	bl	8013c7c <ucdr_buffer_alignment>
 80128fc:	4601      	mov	r1, r0
 80128fe:	4620      	mov	r0, r4
 8012900:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012904:	f001 fa02 	bl	8013d0c <ucdr_advance_buffer>
 8012908:	2102      	movs	r1, #2
 801290a:	4620      	mov	r0, r4
 801290c:	f001 f956 	bl	8013bbc <ucdr_check_buffer_available_for>
 8012910:	bb70      	cbnz	r0, 8012970 <ucdr_serialize_endian_uint16_t+0x88>
 8012912:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012916:	42be      	cmp	r6, r7
 8012918:	d925      	bls.n	8012966 <ucdr_serialize_endian_uint16_t+0x7e>
 801291a:	6923      	ldr	r3, [r4, #16]
 801291c:	4620      	mov	r0, r4
 801291e:	60a6      	str	r6, [r4, #8]
 8012920:	1bf6      	subs	r6, r6, r7
 8012922:	4433      	add	r3, r6
 8012924:	f1c6 0902 	rsb	r9, r6, #2
 8012928:	6123      	str	r3, [r4, #16]
 801292a:	4649      	mov	r1, r9
 801292c:	f001 f952 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012930:	2800      	cmp	r0, #0
 8012932:	d039      	beq.n	80129a8 <ucdr_serialize_endian_uint16_t+0xc0>
 8012934:	2d01      	cmp	r5, #1
 8012936:	d04a      	beq.n	80129ce <ucdr_serialize_endian_uint16_t+0xe6>
 8012938:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801293c:	703b      	strb	r3, [r7, #0]
 801293e:	2e00      	cmp	r6, #0
 8012940:	d040      	beq.n	80129c4 <ucdr_serialize_endian_uint16_t+0xdc>
 8012942:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012946:	707b      	strb	r3, [r7, #1]
 8012948:	6923      	ldr	r3, [r4, #16]
 801294a:	2102      	movs	r1, #2
 801294c:	68a2      	ldr	r2, [r4, #8]
 801294e:	7da0      	ldrb	r0, [r4, #22]
 8012950:	3302      	adds	r3, #2
 8012952:	444a      	add	r2, r9
 8012954:	7561      	strb	r1, [r4, #21]
 8012956:	1b9b      	subs	r3, r3, r6
 8012958:	f080 0001 	eor.w	r0, r0, #1
 801295c:	60a2      	str	r2, [r4, #8]
 801295e:	6123      	str	r3, [r4, #16]
 8012960:	b003      	add	sp, #12
 8012962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012966:	2102      	movs	r1, #2
 8012968:	4620      	mov	r0, r4
 801296a:	f001 f933 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 801296e:	b188      	cbz	r0, 8012994 <ucdr_serialize_endian_uint16_t+0xac>
 8012970:	2d01      	cmp	r5, #1
 8012972:	68a3      	ldr	r3, [r4, #8]
 8012974:	d014      	beq.n	80129a0 <ucdr_serialize_endian_uint16_t+0xb8>
 8012976:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801297a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801297e:	7019      	strb	r1, [r3, #0]
 8012980:	68a3      	ldr	r3, [r4, #8]
 8012982:	705a      	strb	r2, [r3, #1]
 8012984:	2102      	movs	r1, #2
 8012986:	68a2      	ldr	r2, [r4, #8]
 8012988:	6923      	ldr	r3, [r4, #16]
 801298a:	440a      	add	r2, r1
 801298c:	7561      	strb	r1, [r4, #21]
 801298e:	440b      	add	r3, r1
 8012990:	60a2      	str	r2, [r4, #8]
 8012992:	6123      	str	r3, [r4, #16]
 8012994:	7da0      	ldrb	r0, [r4, #22]
 8012996:	f080 0001 	eor.w	r0, r0, #1
 801299a:	b003      	add	sp, #12
 801299c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80129a4:	801a      	strh	r2, [r3, #0]
 80129a6:	e7ed      	b.n	8012984 <ucdr_serialize_endian_uint16_t+0x9c>
 80129a8:	68a2      	ldr	r2, [r4, #8]
 80129aa:	6923      	ldr	r3, [r4, #16]
 80129ac:	7da0      	ldrb	r0, [r4, #22]
 80129ae:	1b92      	subs	r2, r2, r6
 80129b0:	1b9b      	subs	r3, r3, r6
 80129b2:	f884 8015 	strb.w	r8, [r4, #21]
 80129b6:	f080 0001 	eor.w	r0, r0, #1
 80129ba:	60a2      	str	r2, [r4, #8]
 80129bc:	6123      	str	r3, [r4, #16]
 80129be:	b003      	add	sp, #12
 80129c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129c4:	68a3      	ldr	r3, [r4, #8]
 80129c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80129ca:	701a      	strb	r2, [r3, #0]
 80129cc:	e7bc      	b.n	8012948 <ucdr_serialize_endian_uint16_t+0x60>
 80129ce:	f10d 0506 	add.w	r5, sp, #6
 80129d2:	4632      	mov	r2, r6
 80129d4:	4638      	mov	r0, r7
 80129d6:	4629      	mov	r1, r5
 80129d8:	f00e fc0f 	bl	80211fa <memcpy>
 80129dc:	464a      	mov	r2, r9
 80129de:	19a9      	adds	r1, r5, r6
 80129e0:	68a0      	ldr	r0, [r4, #8]
 80129e2:	f00e fc0a 	bl	80211fa <memcpy>
 80129e6:	e7af      	b.n	8012948 <ucdr_serialize_endian_uint16_t+0x60>

080129e8 <ucdr_deserialize_uint16_t>:
 80129e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129ec:	4604      	mov	r4, r0
 80129ee:	460d      	mov	r5, r1
 80129f0:	2102      	movs	r1, #2
 80129f2:	f001 f943 	bl	8013c7c <ucdr_buffer_alignment>
 80129f6:	4601      	mov	r1, r0
 80129f8:	4620      	mov	r0, r4
 80129fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80129fe:	f001 f985 	bl	8013d0c <ucdr_advance_buffer>
 8012a02:	2102      	movs	r1, #2
 8012a04:	4620      	mov	r0, r4
 8012a06:	f001 f8d9 	bl	8013bbc <ucdr_check_buffer_available_for>
 8012a0a:	bb60      	cbnz	r0, 8012a66 <ucdr_deserialize_uint16_t+0x7e>
 8012a0c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012a10:	42be      	cmp	r6, r7
 8012a12:	d923      	bls.n	8012a5c <ucdr_deserialize_uint16_t+0x74>
 8012a14:	6923      	ldr	r3, [r4, #16]
 8012a16:	4620      	mov	r0, r4
 8012a18:	60a6      	str	r6, [r4, #8]
 8012a1a:	1bf6      	subs	r6, r6, r7
 8012a1c:	4433      	add	r3, r6
 8012a1e:	f1c6 0902 	rsb	r9, r6, #2
 8012a22:	6123      	str	r3, [r4, #16]
 8012a24:	4649      	mov	r1, r9
 8012a26:	f001 f8d5 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	d034      	beq.n	8012a98 <ucdr_deserialize_uint16_t+0xb0>
 8012a2e:	7d23      	ldrb	r3, [r4, #20]
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	d042      	beq.n	8012aba <ucdr_deserialize_uint16_t+0xd2>
 8012a34:	787b      	ldrb	r3, [r7, #1]
 8012a36:	702b      	strb	r3, [r5, #0]
 8012a38:	2e00      	cmp	r6, #0
 8012a3a:	d03a      	beq.n	8012ab2 <ucdr_deserialize_uint16_t+0xca>
 8012a3c:	783b      	ldrb	r3, [r7, #0]
 8012a3e:	706b      	strb	r3, [r5, #1]
 8012a40:	6923      	ldr	r3, [r4, #16]
 8012a42:	2102      	movs	r1, #2
 8012a44:	68a2      	ldr	r2, [r4, #8]
 8012a46:	3302      	adds	r3, #2
 8012a48:	7da0      	ldrb	r0, [r4, #22]
 8012a4a:	444a      	add	r2, r9
 8012a4c:	7561      	strb	r1, [r4, #21]
 8012a4e:	1b9b      	subs	r3, r3, r6
 8012a50:	f080 0001 	eor.w	r0, r0, #1
 8012a54:	60a2      	str	r2, [r4, #8]
 8012a56:	6123      	str	r3, [r4, #16]
 8012a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a5c:	2102      	movs	r1, #2
 8012a5e:	4620      	mov	r0, r4
 8012a60:	f001 f8b8 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012a64:	b180      	cbz	r0, 8012a88 <ucdr_deserialize_uint16_t+0xa0>
 8012a66:	7d23      	ldrb	r3, [r4, #20]
 8012a68:	2b01      	cmp	r3, #1
 8012a6a:	68a3      	ldr	r3, [r4, #8]
 8012a6c:	d011      	beq.n	8012a92 <ucdr_deserialize_uint16_t+0xaa>
 8012a6e:	785b      	ldrb	r3, [r3, #1]
 8012a70:	702b      	strb	r3, [r5, #0]
 8012a72:	68a3      	ldr	r3, [r4, #8]
 8012a74:	781b      	ldrb	r3, [r3, #0]
 8012a76:	706b      	strb	r3, [r5, #1]
 8012a78:	2102      	movs	r1, #2
 8012a7a:	68a2      	ldr	r2, [r4, #8]
 8012a7c:	6923      	ldr	r3, [r4, #16]
 8012a7e:	440a      	add	r2, r1
 8012a80:	7561      	strb	r1, [r4, #21]
 8012a82:	440b      	add	r3, r1
 8012a84:	60a2      	str	r2, [r4, #8]
 8012a86:	6123      	str	r3, [r4, #16]
 8012a88:	7da0      	ldrb	r0, [r4, #22]
 8012a8a:	f080 0001 	eor.w	r0, r0, #1
 8012a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a92:	881b      	ldrh	r3, [r3, #0]
 8012a94:	802b      	strh	r3, [r5, #0]
 8012a96:	e7ef      	b.n	8012a78 <ucdr_deserialize_uint16_t+0x90>
 8012a98:	68a2      	ldr	r2, [r4, #8]
 8012a9a:	6923      	ldr	r3, [r4, #16]
 8012a9c:	1b92      	subs	r2, r2, r6
 8012a9e:	7da0      	ldrb	r0, [r4, #22]
 8012aa0:	1b9b      	subs	r3, r3, r6
 8012aa2:	f884 8015 	strb.w	r8, [r4, #21]
 8012aa6:	f080 0001 	eor.w	r0, r0, #1
 8012aaa:	60a2      	str	r2, [r4, #8]
 8012aac:	6123      	str	r3, [r4, #16]
 8012aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ab2:	68a3      	ldr	r3, [r4, #8]
 8012ab4:	781b      	ldrb	r3, [r3, #0]
 8012ab6:	706b      	strb	r3, [r5, #1]
 8012ab8:	e7c2      	b.n	8012a40 <ucdr_deserialize_uint16_t+0x58>
 8012aba:	4639      	mov	r1, r7
 8012abc:	4632      	mov	r2, r6
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f00e fb9b 	bl	80211fa <memcpy>
 8012ac4:	464a      	mov	r2, r9
 8012ac6:	19a8      	adds	r0, r5, r6
 8012ac8:	68a1      	ldr	r1, [r4, #8]
 8012aca:	f00e fb96 	bl	80211fa <memcpy>
 8012ace:	e7b7      	b.n	8012a40 <ucdr_deserialize_uint16_t+0x58>

08012ad0 <ucdr_deserialize_endian_uint16_t>:
 8012ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	460e      	mov	r6, r1
 8012ad8:	2102      	movs	r1, #2
 8012ada:	4615      	mov	r5, r2
 8012adc:	f001 f8ce 	bl	8013c7c <ucdr_buffer_alignment>
 8012ae0:	4601      	mov	r1, r0
 8012ae2:	4620      	mov	r0, r4
 8012ae4:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012ae8:	f001 f910 	bl	8013d0c <ucdr_advance_buffer>
 8012aec:	2102      	movs	r1, #2
 8012aee:	4620      	mov	r0, r4
 8012af0:	f001 f864 	bl	8013bbc <ucdr_check_buffer_available_for>
 8012af4:	bb70      	cbnz	r0, 8012b54 <ucdr_deserialize_endian_uint16_t+0x84>
 8012af6:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8012afa:	454f      	cmp	r7, r9
 8012afc:	d925      	bls.n	8012b4a <ucdr_deserialize_endian_uint16_t+0x7a>
 8012afe:	6923      	ldr	r3, [r4, #16]
 8012b00:	4620      	mov	r0, r4
 8012b02:	60a7      	str	r7, [r4, #8]
 8012b04:	eba7 0709 	sub.w	r7, r7, r9
 8012b08:	443b      	add	r3, r7
 8012b0a:	f1c7 0a02 	rsb	sl, r7, #2
 8012b0e:	6123      	str	r3, [r4, #16]
 8012b10:	4651      	mov	r1, sl
 8012b12:	f001 f85f 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012b16:	2800      	cmp	r0, #0
 8012b18:	d034      	beq.n	8012b84 <ucdr_deserialize_endian_uint16_t+0xb4>
 8012b1a:	2e01      	cmp	r6, #1
 8012b1c:	d043      	beq.n	8012ba6 <ucdr_deserialize_endian_uint16_t+0xd6>
 8012b1e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8012b22:	702b      	strb	r3, [r5, #0]
 8012b24:	2f00      	cmp	r7, #0
 8012b26:	d03a      	beq.n	8012b9e <ucdr_deserialize_endian_uint16_t+0xce>
 8012b28:	f899 3000 	ldrb.w	r3, [r9]
 8012b2c:	706b      	strb	r3, [r5, #1]
 8012b2e:	6923      	ldr	r3, [r4, #16]
 8012b30:	2102      	movs	r1, #2
 8012b32:	68a2      	ldr	r2, [r4, #8]
 8012b34:	3302      	adds	r3, #2
 8012b36:	7da0      	ldrb	r0, [r4, #22]
 8012b38:	4452      	add	r2, sl
 8012b3a:	7561      	strb	r1, [r4, #21]
 8012b3c:	1bdb      	subs	r3, r3, r7
 8012b3e:	f080 0001 	eor.w	r0, r0, #1
 8012b42:	60a2      	str	r2, [r4, #8]
 8012b44:	6123      	str	r3, [r4, #16]
 8012b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b4a:	2102      	movs	r1, #2
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	f001 f841 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012b52:	b178      	cbz	r0, 8012b74 <ucdr_deserialize_endian_uint16_t+0xa4>
 8012b54:	2e01      	cmp	r6, #1
 8012b56:	68a3      	ldr	r3, [r4, #8]
 8012b58:	d011      	beq.n	8012b7e <ucdr_deserialize_endian_uint16_t+0xae>
 8012b5a:	785b      	ldrb	r3, [r3, #1]
 8012b5c:	702b      	strb	r3, [r5, #0]
 8012b5e:	68a3      	ldr	r3, [r4, #8]
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	706b      	strb	r3, [r5, #1]
 8012b64:	2102      	movs	r1, #2
 8012b66:	68a2      	ldr	r2, [r4, #8]
 8012b68:	6923      	ldr	r3, [r4, #16]
 8012b6a:	440a      	add	r2, r1
 8012b6c:	7561      	strb	r1, [r4, #21]
 8012b6e:	440b      	add	r3, r1
 8012b70:	60a2      	str	r2, [r4, #8]
 8012b72:	6123      	str	r3, [r4, #16]
 8012b74:	7da0      	ldrb	r0, [r4, #22]
 8012b76:	f080 0001 	eor.w	r0, r0, #1
 8012b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b7e:	881b      	ldrh	r3, [r3, #0]
 8012b80:	802b      	strh	r3, [r5, #0]
 8012b82:	e7ef      	b.n	8012b64 <ucdr_deserialize_endian_uint16_t+0x94>
 8012b84:	68a2      	ldr	r2, [r4, #8]
 8012b86:	6923      	ldr	r3, [r4, #16]
 8012b88:	1bd2      	subs	r2, r2, r7
 8012b8a:	7da0      	ldrb	r0, [r4, #22]
 8012b8c:	1bdb      	subs	r3, r3, r7
 8012b8e:	f884 8015 	strb.w	r8, [r4, #21]
 8012b92:	f080 0001 	eor.w	r0, r0, #1
 8012b96:	60a2      	str	r2, [r4, #8]
 8012b98:	6123      	str	r3, [r4, #16]
 8012b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b9e:	68a3      	ldr	r3, [r4, #8]
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	706b      	strb	r3, [r5, #1]
 8012ba4:	e7c3      	b.n	8012b2e <ucdr_deserialize_endian_uint16_t+0x5e>
 8012ba6:	4649      	mov	r1, r9
 8012ba8:	463a      	mov	r2, r7
 8012baa:	4628      	mov	r0, r5
 8012bac:	f00e fb25 	bl	80211fa <memcpy>
 8012bb0:	4652      	mov	r2, sl
 8012bb2:	19e8      	adds	r0, r5, r7
 8012bb4:	68a1      	ldr	r1, [r4, #8]
 8012bb6:	f00e fb20 	bl	80211fa <memcpy>
 8012bba:	e7b8      	b.n	8012b2e <ucdr_deserialize_endian_uint16_t+0x5e>

08012bbc <ucdr_serialize_uint32_t>:
 8012bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bc0:	b082      	sub	sp, #8
 8012bc2:	4604      	mov	r4, r0
 8012bc4:	9101      	str	r1, [sp, #4]
 8012bc6:	2104      	movs	r1, #4
 8012bc8:	f001 f858 	bl	8013c7c <ucdr_buffer_alignment>
 8012bcc:	4601      	mov	r1, r0
 8012bce:	4620      	mov	r0, r4
 8012bd0:	7d67      	ldrb	r7, [r4, #21]
 8012bd2:	f001 f89b 	bl	8013d0c <ucdr_advance_buffer>
 8012bd6:	2104      	movs	r1, #4
 8012bd8:	4620      	mov	r0, r4
 8012bda:	f000 ffef 	bl	8013bbc <ucdr_check_buffer_available_for>
 8012bde:	2800      	cmp	r0, #0
 8012be0:	d139      	bne.n	8012c56 <ucdr_serialize_uint32_t+0x9a>
 8012be2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012be6:	42ab      	cmp	r3, r5
 8012be8:	d930      	bls.n	8012c4c <ucdr_serialize_uint32_t+0x90>
 8012bea:	1b5e      	subs	r6, r3, r5
 8012bec:	60a3      	str	r3, [r4, #8]
 8012bee:	6923      	ldr	r3, [r4, #16]
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	f1c6 0804 	rsb	r8, r6, #4
 8012bf6:	4433      	add	r3, r6
 8012bf8:	4641      	mov	r1, r8
 8012bfa:	6123      	str	r3, [r4, #16]
 8012bfc:	f000 ffea 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012c00:	2800      	cmp	r0, #0
 8012c02:	d04c      	beq.n	8012c9e <ucdr_serialize_uint32_t+0xe2>
 8012c04:	7d23      	ldrb	r3, [r4, #20]
 8012c06:	2b01      	cmp	r3, #1
 8012c08:	d063      	beq.n	8012cd2 <ucdr_serialize_uint32_t+0x116>
 8012c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c0e:	702b      	strb	r3, [r5, #0]
 8012c10:	2e00      	cmp	r6, #0
 8012c12:	d051      	beq.n	8012cb8 <ucdr_serialize_uint32_t+0xfc>
 8012c14:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012c18:	2e01      	cmp	r6, #1
 8012c1a:	706b      	strb	r3, [r5, #1]
 8012c1c:	d050      	beq.n	8012cc0 <ucdr_serialize_uint32_t+0x104>
 8012c1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012c22:	2e02      	cmp	r6, #2
 8012c24:	70ab      	strb	r3, [r5, #2]
 8012c26:	d04f      	beq.n	8012cc8 <ucdr_serialize_uint32_t+0x10c>
 8012c28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012c2c:	70eb      	strb	r3, [r5, #3]
 8012c2e:	6923      	ldr	r3, [r4, #16]
 8012c30:	2104      	movs	r1, #4
 8012c32:	68a2      	ldr	r2, [r4, #8]
 8012c34:	3304      	adds	r3, #4
 8012c36:	7da0      	ldrb	r0, [r4, #22]
 8012c38:	4442      	add	r2, r8
 8012c3a:	7561      	strb	r1, [r4, #21]
 8012c3c:	1b9e      	subs	r6, r3, r6
 8012c3e:	f080 0001 	eor.w	r0, r0, #1
 8012c42:	60a2      	str	r2, [r4, #8]
 8012c44:	6126      	str	r6, [r4, #16]
 8012c46:	b002      	add	sp, #8
 8012c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c4c:	2104      	movs	r1, #4
 8012c4e:	4620      	mov	r0, r4
 8012c50:	f000 ffc0 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012c54:	b1d0      	cbz	r0, 8012c8c <ucdr_serialize_uint32_t+0xd0>
 8012c56:	7d23      	ldrb	r3, [r4, #20]
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	68a3      	ldr	r3, [r4, #8]
 8012c5c:	d01c      	beq.n	8012c98 <ucdr_serialize_uint32_t+0xdc>
 8012c5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012c62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012c66:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012c6a:	7018      	strb	r0, [r3, #0]
 8012c6c:	68a3      	ldr	r3, [r4, #8]
 8012c6e:	705a      	strb	r2, [r3, #1]
 8012c70:	68a3      	ldr	r3, [r4, #8]
 8012c72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012c76:	7099      	strb	r1, [r3, #2]
 8012c78:	68a3      	ldr	r3, [r4, #8]
 8012c7a:	70da      	strb	r2, [r3, #3]
 8012c7c:	2104      	movs	r1, #4
 8012c7e:	68a2      	ldr	r2, [r4, #8]
 8012c80:	6923      	ldr	r3, [r4, #16]
 8012c82:	440a      	add	r2, r1
 8012c84:	7561      	strb	r1, [r4, #21]
 8012c86:	440b      	add	r3, r1
 8012c88:	60a2      	str	r2, [r4, #8]
 8012c8a:	6123      	str	r3, [r4, #16]
 8012c8c:	7da0      	ldrb	r0, [r4, #22]
 8012c8e:	f080 0001 	eor.w	r0, r0, #1
 8012c92:	b002      	add	sp, #8
 8012c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c98:	9a01      	ldr	r2, [sp, #4]
 8012c9a:	601a      	str	r2, [r3, #0]
 8012c9c:	e7ee      	b.n	8012c7c <ucdr_serialize_uint32_t+0xc0>
 8012c9e:	68a2      	ldr	r2, [r4, #8]
 8012ca0:	6923      	ldr	r3, [r4, #16]
 8012ca2:	7da0      	ldrb	r0, [r4, #22]
 8012ca4:	1b92      	subs	r2, r2, r6
 8012ca6:	1b9b      	subs	r3, r3, r6
 8012ca8:	7567      	strb	r7, [r4, #21]
 8012caa:	f080 0001 	eor.w	r0, r0, #1
 8012cae:	60a2      	str	r2, [r4, #8]
 8012cb0:	6123      	str	r3, [r4, #16]
 8012cb2:	b002      	add	sp, #8
 8012cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cb8:	68a3      	ldr	r3, [r4, #8]
 8012cba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012cbe:	701a      	strb	r2, [r3, #0]
 8012cc0:	68a3      	ldr	r3, [r4, #8]
 8012cc2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012cc6:	701a      	strb	r2, [r3, #0]
 8012cc8:	68a3      	ldr	r3, [r4, #8]
 8012cca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012cce:	701a      	strb	r2, [r3, #0]
 8012cd0:	e7ad      	b.n	8012c2e <ucdr_serialize_uint32_t+0x72>
 8012cd2:	4628      	mov	r0, r5
 8012cd4:	ad01      	add	r5, sp, #4
 8012cd6:	4632      	mov	r2, r6
 8012cd8:	4629      	mov	r1, r5
 8012cda:	f00e fa8e 	bl	80211fa <memcpy>
 8012cde:	4642      	mov	r2, r8
 8012ce0:	19a9      	adds	r1, r5, r6
 8012ce2:	68a0      	ldr	r0, [r4, #8]
 8012ce4:	f00e fa89 	bl	80211fa <memcpy>
 8012ce8:	e7a1      	b.n	8012c2e <ucdr_serialize_uint32_t+0x72>
 8012cea:	bf00      	nop

08012cec <ucdr_serialize_endian_uint32_t>:
 8012cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012cf0:	4604      	mov	r4, r0
 8012cf2:	b083      	sub	sp, #12
 8012cf4:	460d      	mov	r5, r1
 8012cf6:	2104      	movs	r1, #4
 8012cf8:	9201      	str	r2, [sp, #4]
 8012cfa:	f000 ffbf 	bl	8013c7c <ucdr_buffer_alignment>
 8012cfe:	4601      	mov	r1, r0
 8012d00:	4620      	mov	r0, r4
 8012d02:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012d06:	f001 f801 	bl	8013d0c <ucdr_advance_buffer>
 8012d0a:	2104      	movs	r1, #4
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f000 ff55 	bl	8013bbc <ucdr_check_buffer_available_for>
 8012d12:	2800      	cmp	r0, #0
 8012d14:	d138      	bne.n	8012d88 <ucdr_serialize_endian_uint32_t+0x9c>
 8012d16:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012d1a:	42b7      	cmp	r7, r6
 8012d1c:	d92f      	bls.n	8012d7e <ucdr_serialize_endian_uint32_t+0x92>
 8012d1e:	6923      	ldr	r3, [r4, #16]
 8012d20:	4620      	mov	r0, r4
 8012d22:	60a7      	str	r7, [r4, #8]
 8012d24:	1bbf      	subs	r7, r7, r6
 8012d26:	443b      	add	r3, r7
 8012d28:	f1c7 0904 	rsb	r9, r7, #4
 8012d2c:	6123      	str	r3, [r4, #16]
 8012d2e:	4649      	mov	r1, r9
 8012d30:	f000 ff50 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012d34:	2800      	cmp	r0, #0
 8012d36:	d04a      	beq.n	8012dce <ucdr_serialize_endian_uint32_t+0xe2>
 8012d38:	2d01      	cmp	r5, #1
 8012d3a:	d063      	beq.n	8012e04 <ucdr_serialize_endian_uint32_t+0x118>
 8012d3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d40:	7033      	strb	r3, [r6, #0]
 8012d42:	2f00      	cmp	r7, #0
 8012d44:	d051      	beq.n	8012dea <ucdr_serialize_endian_uint32_t+0xfe>
 8012d46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d4a:	2f01      	cmp	r7, #1
 8012d4c:	7073      	strb	r3, [r6, #1]
 8012d4e:	d050      	beq.n	8012df2 <ucdr_serialize_endian_uint32_t+0x106>
 8012d50:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012d54:	2f02      	cmp	r7, #2
 8012d56:	70b3      	strb	r3, [r6, #2]
 8012d58:	d04f      	beq.n	8012dfa <ucdr_serialize_endian_uint32_t+0x10e>
 8012d5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012d5e:	70f3      	strb	r3, [r6, #3]
 8012d60:	6923      	ldr	r3, [r4, #16]
 8012d62:	2104      	movs	r1, #4
 8012d64:	68a2      	ldr	r2, [r4, #8]
 8012d66:	7da0      	ldrb	r0, [r4, #22]
 8012d68:	3304      	adds	r3, #4
 8012d6a:	444a      	add	r2, r9
 8012d6c:	7561      	strb	r1, [r4, #21]
 8012d6e:	1bdb      	subs	r3, r3, r7
 8012d70:	f080 0001 	eor.w	r0, r0, #1
 8012d74:	60a2      	str	r2, [r4, #8]
 8012d76:	6123      	str	r3, [r4, #16]
 8012d78:	b003      	add	sp, #12
 8012d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d7e:	2104      	movs	r1, #4
 8012d80:	4620      	mov	r0, r4
 8012d82:	f000 ff27 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012d86:	b1c8      	cbz	r0, 8012dbc <ucdr_serialize_endian_uint32_t+0xd0>
 8012d88:	2d01      	cmp	r5, #1
 8012d8a:	68a3      	ldr	r3, [r4, #8]
 8012d8c:	d01c      	beq.n	8012dc8 <ucdr_serialize_endian_uint32_t+0xdc>
 8012d8e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012d92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d96:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012d9a:	7018      	strb	r0, [r3, #0]
 8012d9c:	68a3      	ldr	r3, [r4, #8]
 8012d9e:	705a      	strb	r2, [r3, #1]
 8012da0:	68a3      	ldr	r3, [r4, #8]
 8012da2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012da6:	7099      	strb	r1, [r3, #2]
 8012da8:	68a3      	ldr	r3, [r4, #8]
 8012daa:	70da      	strb	r2, [r3, #3]
 8012dac:	2104      	movs	r1, #4
 8012dae:	68a2      	ldr	r2, [r4, #8]
 8012db0:	6923      	ldr	r3, [r4, #16]
 8012db2:	440a      	add	r2, r1
 8012db4:	7561      	strb	r1, [r4, #21]
 8012db6:	440b      	add	r3, r1
 8012db8:	60a2      	str	r2, [r4, #8]
 8012dba:	6123      	str	r3, [r4, #16]
 8012dbc:	7da0      	ldrb	r0, [r4, #22]
 8012dbe:	f080 0001 	eor.w	r0, r0, #1
 8012dc2:	b003      	add	sp, #12
 8012dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dc8:	9a01      	ldr	r2, [sp, #4]
 8012dca:	601a      	str	r2, [r3, #0]
 8012dcc:	e7ee      	b.n	8012dac <ucdr_serialize_endian_uint32_t+0xc0>
 8012dce:	68a2      	ldr	r2, [r4, #8]
 8012dd0:	6923      	ldr	r3, [r4, #16]
 8012dd2:	7da0      	ldrb	r0, [r4, #22]
 8012dd4:	1bd2      	subs	r2, r2, r7
 8012dd6:	1bdb      	subs	r3, r3, r7
 8012dd8:	f884 8015 	strb.w	r8, [r4, #21]
 8012ddc:	f080 0001 	eor.w	r0, r0, #1
 8012de0:	60a2      	str	r2, [r4, #8]
 8012de2:	6123      	str	r3, [r4, #16]
 8012de4:	b003      	add	sp, #12
 8012de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dea:	68a3      	ldr	r3, [r4, #8]
 8012dec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012df0:	701a      	strb	r2, [r3, #0]
 8012df2:	68a3      	ldr	r3, [r4, #8]
 8012df4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012df8:	701a      	strb	r2, [r3, #0]
 8012dfa:	68a3      	ldr	r3, [r4, #8]
 8012dfc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012e00:	701a      	strb	r2, [r3, #0]
 8012e02:	e7ad      	b.n	8012d60 <ucdr_serialize_endian_uint32_t+0x74>
 8012e04:	ad01      	add	r5, sp, #4
 8012e06:	463a      	mov	r2, r7
 8012e08:	4630      	mov	r0, r6
 8012e0a:	4629      	mov	r1, r5
 8012e0c:	f00e f9f5 	bl	80211fa <memcpy>
 8012e10:	464a      	mov	r2, r9
 8012e12:	19e9      	adds	r1, r5, r7
 8012e14:	68a0      	ldr	r0, [r4, #8]
 8012e16:	f00e f9f0 	bl	80211fa <memcpy>
 8012e1a:	e7a1      	b.n	8012d60 <ucdr_serialize_endian_uint32_t+0x74>

08012e1c <ucdr_deserialize_uint32_t>:
 8012e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e20:	4604      	mov	r4, r0
 8012e22:	460d      	mov	r5, r1
 8012e24:	2104      	movs	r1, #4
 8012e26:	f000 ff29 	bl	8013c7c <ucdr_buffer_alignment>
 8012e2a:	4601      	mov	r1, r0
 8012e2c:	4620      	mov	r0, r4
 8012e2e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012e32:	f000 ff6b 	bl	8013d0c <ucdr_advance_buffer>
 8012e36:	2104      	movs	r1, #4
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f000 febf 	bl	8013bbc <ucdr_check_buffer_available_for>
 8012e3e:	2800      	cmp	r0, #0
 8012e40:	d138      	bne.n	8012eb4 <ucdr_deserialize_uint32_t+0x98>
 8012e42:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012e46:	42b7      	cmp	r7, r6
 8012e48:	d92f      	bls.n	8012eaa <ucdr_deserialize_uint32_t+0x8e>
 8012e4a:	6923      	ldr	r3, [r4, #16]
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	60a7      	str	r7, [r4, #8]
 8012e50:	1bbf      	subs	r7, r7, r6
 8012e52:	443b      	add	r3, r7
 8012e54:	f1c7 0904 	rsb	r9, r7, #4
 8012e58:	6123      	str	r3, [r4, #16]
 8012e5a:	4649      	mov	r1, r9
 8012e5c:	f000 feba 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012e60:	2800      	cmp	r0, #0
 8012e62:	d046      	beq.n	8012ef2 <ucdr_deserialize_uint32_t+0xd6>
 8012e64:	7d23      	ldrb	r3, [r4, #20]
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d05c      	beq.n	8012f24 <ucdr_deserialize_uint32_t+0x108>
 8012e6a:	78f3      	ldrb	r3, [r6, #3]
 8012e6c:	702b      	strb	r3, [r5, #0]
 8012e6e:	2f00      	cmp	r7, #0
 8012e70:	d04c      	beq.n	8012f0c <ucdr_deserialize_uint32_t+0xf0>
 8012e72:	78b3      	ldrb	r3, [r6, #2]
 8012e74:	2f01      	cmp	r7, #1
 8012e76:	706b      	strb	r3, [r5, #1]
 8012e78:	f105 0302 	add.w	r3, r5, #2
 8012e7c:	d04a      	beq.n	8012f14 <ucdr_deserialize_uint32_t+0xf8>
 8012e7e:	7873      	ldrb	r3, [r6, #1]
 8012e80:	2f02      	cmp	r7, #2
 8012e82:	70ab      	strb	r3, [r5, #2]
 8012e84:	f105 0303 	add.w	r3, r5, #3
 8012e88:	d048      	beq.n	8012f1c <ucdr_deserialize_uint32_t+0x100>
 8012e8a:	7833      	ldrb	r3, [r6, #0]
 8012e8c:	70eb      	strb	r3, [r5, #3]
 8012e8e:	6923      	ldr	r3, [r4, #16]
 8012e90:	2104      	movs	r1, #4
 8012e92:	68a2      	ldr	r2, [r4, #8]
 8012e94:	3304      	adds	r3, #4
 8012e96:	7da0      	ldrb	r0, [r4, #22]
 8012e98:	444a      	add	r2, r9
 8012e9a:	7561      	strb	r1, [r4, #21]
 8012e9c:	1bdb      	subs	r3, r3, r7
 8012e9e:	f080 0001 	eor.w	r0, r0, #1
 8012ea2:	60a2      	str	r2, [r4, #8]
 8012ea4:	6123      	str	r3, [r4, #16]
 8012ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eaa:	2104      	movs	r1, #4
 8012eac:	4620      	mov	r0, r4
 8012eae:	f000 fe91 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012eb2:	b1b0      	cbz	r0, 8012ee2 <ucdr_deserialize_uint32_t+0xc6>
 8012eb4:	7d23      	ldrb	r3, [r4, #20]
 8012eb6:	2b01      	cmp	r3, #1
 8012eb8:	68a3      	ldr	r3, [r4, #8]
 8012eba:	d017      	beq.n	8012eec <ucdr_deserialize_uint32_t+0xd0>
 8012ebc:	78db      	ldrb	r3, [r3, #3]
 8012ebe:	702b      	strb	r3, [r5, #0]
 8012ec0:	68a3      	ldr	r3, [r4, #8]
 8012ec2:	789b      	ldrb	r3, [r3, #2]
 8012ec4:	706b      	strb	r3, [r5, #1]
 8012ec6:	68a3      	ldr	r3, [r4, #8]
 8012ec8:	785b      	ldrb	r3, [r3, #1]
 8012eca:	70ab      	strb	r3, [r5, #2]
 8012ecc:	68a3      	ldr	r3, [r4, #8]
 8012ece:	781b      	ldrb	r3, [r3, #0]
 8012ed0:	70eb      	strb	r3, [r5, #3]
 8012ed2:	2104      	movs	r1, #4
 8012ed4:	68a2      	ldr	r2, [r4, #8]
 8012ed6:	6923      	ldr	r3, [r4, #16]
 8012ed8:	440a      	add	r2, r1
 8012eda:	7561      	strb	r1, [r4, #21]
 8012edc:	440b      	add	r3, r1
 8012ede:	60a2      	str	r2, [r4, #8]
 8012ee0:	6123      	str	r3, [r4, #16]
 8012ee2:	7da0      	ldrb	r0, [r4, #22]
 8012ee4:	f080 0001 	eor.w	r0, r0, #1
 8012ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	602b      	str	r3, [r5, #0]
 8012ef0:	e7ef      	b.n	8012ed2 <ucdr_deserialize_uint32_t+0xb6>
 8012ef2:	68a2      	ldr	r2, [r4, #8]
 8012ef4:	6923      	ldr	r3, [r4, #16]
 8012ef6:	1bd2      	subs	r2, r2, r7
 8012ef8:	7da0      	ldrb	r0, [r4, #22]
 8012efa:	1bdb      	subs	r3, r3, r7
 8012efc:	f884 8015 	strb.w	r8, [r4, #21]
 8012f00:	f080 0001 	eor.w	r0, r0, #1
 8012f04:	60a2      	str	r2, [r4, #8]
 8012f06:	6123      	str	r3, [r4, #16]
 8012f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f0c:	68a3      	ldr	r3, [r4, #8]
 8012f0e:	789b      	ldrb	r3, [r3, #2]
 8012f10:	706b      	strb	r3, [r5, #1]
 8012f12:	1cab      	adds	r3, r5, #2
 8012f14:	68a2      	ldr	r2, [r4, #8]
 8012f16:	7852      	ldrb	r2, [r2, #1]
 8012f18:	f803 2b01 	strb.w	r2, [r3], #1
 8012f1c:	68a2      	ldr	r2, [r4, #8]
 8012f1e:	7812      	ldrb	r2, [r2, #0]
 8012f20:	701a      	strb	r2, [r3, #0]
 8012f22:	e7b4      	b.n	8012e8e <ucdr_deserialize_uint32_t+0x72>
 8012f24:	4631      	mov	r1, r6
 8012f26:	463a      	mov	r2, r7
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f00e f966 	bl	80211fa <memcpy>
 8012f2e:	464a      	mov	r2, r9
 8012f30:	19e8      	adds	r0, r5, r7
 8012f32:	68a1      	ldr	r1, [r4, #8]
 8012f34:	f00e f961 	bl	80211fa <memcpy>
 8012f38:	e7a9      	b.n	8012e8e <ucdr_deserialize_uint32_t+0x72>
 8012f3a:	bf00      	nop

08012f3c <ucdr_deserialize_endian_uint32_t>:
 8012f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f40:	4604      	mov	r4, r0
 8012f42:	460e      	mov	r6, r1
 8012f44:	2104      	movs	r1, #4
 8012f46:	4615      	mov	r5, r2
 8012f48:	f000 fe98 	bl	8013c7c <ucdr_buffer_alignment>
 8012f4c:	4601      	mov	r1, r0
 8012f4e:	4620      	mov	r0, r4
 8012f50:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012f54:	f000 feda 	bl	8013d0c <ucdr_advance_buffer>
 8012f58:	2104      	movs	r1, #4
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	f000 fe2e 	bl	8013bbc <ucdr_check_buffer_available_for>
 8012f60:	2800      	cmp	r0, #0
 8012f62:	d13c      	bne.n	8012fde <ucdr_deserialize_endian_uint32_t+0xa2>
 8012f64:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012f68:	42bb      	cmp	r3, r7
 8012f6a:	d933      	bls.n	8012fd4 <ucdr_deserialize_endian_uint32_t+0x98>
 8012f6c:	eba3 0907 	sub.w	r9, r3, r7
 8012f70:	60a3      	str	r3, [r4, #8]
 8012f72:	6923      	ldr	r3, [r4, #16]
 8012f74:	4620      	mov	r0, r4
 8012f76:	f1c9 0a04 	rsb	sl, r9, #4
 8012f7a:	444b      	add	r3, r9
 8012f7c:	4651      	mov	r1, sl
 8012f7e:	6123      	str	r3, [r4, #16]
 8012f80:	f000 fe28 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012f84:	2800      	cmp	r0, #0
 8012f86:	d048      	beq.n	801301a <ucdr_deserialize_endian_uint32_t+0xde>
 8012f88:	2e01      	cmp	r6, #1
 8012f8a:	d061      	beq.n	8013050 <ucdr_deserialize_endian_uint32_t+0x114>
 8012f8c:	78fb      	ldrb	r3, [r7, #3]
 8012f8e:	702b      	strb	r3, [r5, #0]
 8012f90:	f1b9 0f00 	cmp.w	r9, #0
 8012f94:	d050      	beq.n	8013038 <ucdr_deserialize_endian_uint32_t+0xfc>
 8012f96:	78bb      	ldrb	r3, [r7, #2]
 8012f98:	f1b9 0f01 	cmp.w	r9, #1
 8012f9c:	706b      	strb	r3, [r5, #1]
 8012f9e:	f105 0302 	add.w	r3, r5, #2
 8012fa2:	d04d      	beq.n	8013040 <ucdr_deserialize_endian_uint32_t+0x104>
 8012fa4:	787b      	ldrb	r3, [r7, #1]
 8012fa6:	f1b9 0f02 	cmp.w	r9, #2
 8012faa:	70ab      	strb	r3, [r5, #2]
 8012fac:	f105 0303 	add.w	r3, r5, #3
 8012fb0:	d04a      	beq.n	8013048 <ucdr_deserialize_endian_uint32_t+0x10c>
 8012fb2:	783b      	ldrb	r3, [r7, #0]
 8012fb4:	70eb      	strb	r3, [r5, #3]
 8012fb6:	6923      	ldr	r3, [r4, #16]
 8012fb8:	2104      	movs	r1, #4
 8012fba:	68a2      	ldr	r2, [r4, #8]
 8012fbc:	3304      	adds	r3, #4
 8012fbe:	7da0      	ldrb	r0, [r4, #22]
 8012fc0:	4452      	add	r2, sl
 8012fc2:	7561      	strb	r1, [r4, #21]
 8012fc4:	eba3 0309 	sub.w	r3, r3, r9
 8012fc8:	f080 0001 	eor.w	r0, r0, #1
 8012fcc:	60a2      	str	r2, [r4, #8]
 8012fce:	6123      	str	r3, [r4, #16]
 8012fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fd4:	2104      	movs	r1, #4
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	f000 fdfc 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8012fdc:	b1a8      	cbz	r0, 801300a <ucdr_deserialize_endian_uint32_t+0xce>
 8012fde:	2e01      	cmp	r6, #1
 8012fe0:	68a3      	ldr	r3, [r4, #8]
 8012fe2:	d017      	beq.n	8013014 <ucdr_deserialize_endian_uint32_t+0xd8>
 8012fe4:	78db      	ldrb	r3, [r3, #3]
 8012fe6:	702b      	strb	r3, [r5, #0]
 8012fe8:	68a3      	ldr	r3, [r4, #8]
 8012fea:	789b      	ldrb	r3, [r3, #2]
 8012fec:	706b      	strb	r3, [r5, #1]
 8012fee:	68a3      	ldr	r3, [r4, #8]
 8012ff0:	785b      	ldrb	r3, [r3, #1]
 8012ff2:	70ab      	strb	r3, [r5, #2]
 8012ff4:	68a3      	ldr	r3, [r4, #8]
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	70eb      	strb	r3, [r5, #3]
 8012ffa:	2104      	movs	r1, #4
 8012ffc:	68a2      	ldr	r2, [r4, #8]
 8012ffe:	6923      	ldr	r3, [r4, #16]
 8013000:	440a      	add	r2, r1
 8013002:	7561      	strb	r1, [r4, #21]
 8013004:	440b      	add	r3, r1
 8013006:	60a2      	str	r2, [r4, #8]
 8013008:	6123      	str	r3, [r4, #16]
 801300a:	7da0      	ldrb	r0, [r4, #22]
 801300c:	f080 0001 	eor.w	r0, r0, #1
 8013010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	602b      	str	r3, [r5, #0]
 8013018:	e7ef      	b.n	8012ffa <ucdr_deserialize_endian_uint32_t+0xbe>
 801301a:	68a2      	ldr	r2, [r4, #8]
 801301c:	6923      	ldr	r3, [r4, #16]
 801301e:	eba2 0209 	sub.w	r2, r2, r9
 8013022:	7da0      	ldrb	r0, [r4, #22]
 8013024:	eba3 0309 	sub.w	r3, r3, r9
 8013028:	f884 8015 	strb.w	r8, [r4, #21]
 801302c:	f080 0001 	eor.w	r0, r0, #1
 8013030:	60a2      	str	r2, [r4, #8]
 8013032:	6123      	str	r3, [r4, #16]
 8013034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013038:	68a3      	ldr	r3, [r4, #8]
 801303a:	789b      	ldrb	r3, [r3, #2]
 801303c:	706b      	strb	r3, [r5, #1]
 801303e:	1cab      	adds	r3, r5, #2
 8013040:	68a2      	ldr	r2, [r4, #8]
 8013042:	7852      	ldrb	r2, [r2, #1]
 8013044:	f803 2b01 	strb.w	r2, [r3], #1
 8013048:	68a2      	ldr	r2, [r4, #8]
 801304a:	7812      	ldrb	r2, [r2, #0]
 801304c:	701a      	strb	r2, [r3, #0]
 801304e:	e7b2      	b.n	8012fb6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8013050:	4639      	mov	r1, r7
 8013052:	464a      	mov	r2, r9
 8013054:	4628      	mov	r0, r5
 8013056:	f00e f8d0 	bl	80211fa <memcpy>
 801305a:	4652      	mov	r2, sl
 801305c:	eb05 0009 	add.w	r0, r5, r9
 8013060:	68a1      	ldr	r1, [r4, #8]
 8013062:	f00e f8ca 	bl	80211fa <memcpy>
 8013066:	e7a6      	b.n	8012fb6 <ucdr_deserialize_endian_uint32_t+0x7a>

08013068 <ucdr_serialize_uint64_t>:
 8013068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801306c:	4604      	mov	r4, r0
 801306e:	b082      	sub	sp, #8
 8013070:	2108      	movs	r1, #8
 8013072:	e9cd 2300 	strd	r2, r3, [sp]
 8013076:	f000 fe01 	bl	8013c7c <ucdr_buffer_alignment>
 801307a:	4601      	mov	r1, r0
 801307c:	4620      	mov	r0, r4
 801307e:	7d67      	ldrb	r7, [r4, #21]
 8013080:	f000 fe44 	bl	8013d0c <ucdr_advance_buffer>
 8013084:	2108      	movs	r1, #8
 8013086:	4620      	mov	r0, r4
 8013088:	f000 fd98 	bl	8013bbc <ucdr_check_buffer_available_for>
 801308c:	2800      	cmp	r0, #0
 801308e:	d14e      	bne.n	801312e <ucdr_serialize_uint64_t+0xc6>
 8013090:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013094:	42ab      	cmp	r3, r5
 8013096:	d945      	bls.n	8013124 <ucdr_serialize_uint64_t+0xbc>
 8013098:	1b5e      	subs	r6, r3, r5
 801309a:	60a3      	str	r3, [r4, #8]
 801309c:	6923      	ldr	r3, [r4, #16]
 801309e:	4620      	mov	r0, r4
 80130a0:	f1c6 0808 	rsb	r8, r6, #8
 80130a4:	4433      	add	r3, r6
 80130a6:	4641      	mov	r1, r8
 80130a8:	6123      	str	r3, [r4, #16]
 80130aa:	f000 fd93 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 80130ae:	2800      	cmp	r0, #0
 80130b0:	d074      	beq.n	801319c <ucdr_serialize_uint64_t+0x134>
 80130b2:	7d23      	ldrb	r3, [r4, #20]
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	f000 809b 	beq.w	80131f0 <ucdr_serialize_uint64_t+0x188>
 80130ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80130be:	702b      	strb	r3, [r5, #0]
 80130c0:	2e00      	cmp	r6, #0
 80130c2:	d078      	beq.n	80131b6 <ucdr_serialize_uint64_t+0x14e>
 80130c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80130c8:	2e01      	cmp	r6, #1
 80130ca:	706b      	strb	r3, [r5, #1]
 80130cc:	d077      	beq.n	80131be <ucdr_serialize_uint64_t+0x156>
 80130ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80130d2:	2e02      	cmp	r6, #2
 80130d4:	70ab      	strb	r3, [r5, #2]
 80130d6:	d076      	beq.n	80131c6 <ucdr_serialize_uint64_t+0x15e>
 80130d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80130dc:	2e03      	cmp	r6, #3
 80130de:	70eb      	strb	r3, [r5, #3]
 80130e0:	d075      	beq.n	80131ce <ucdr_serialize_uint64_t+0x166>
 80130e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80130e6:	2e04      	cmp	r6, #4
 80130e8:	712b      	strb	r3, [r5, #4]
 80130ea:	d074      	beq.n	80131d6 <ucdr_serialize_uint64_t+0x16e>
 80130ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80130f0:	2e05      	cmp	r6, #5
 80130f2:	716b      	strb	r3, [r5, #5]
 80130f4:	d073      	beq.n	80131de <ucdr_serialize_uint64_t+0x176>
 80130f6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80130fa:	2e06      	cmp	r6, #6
 80130fc:	71ab      	strb	r3, [r5, #6]
 80130fe:	d072      	beq.n	80131e6 <ucdr_serialize_uint64_t+0x17e>
 8013100:	f89d 3000 	ldrb.w	r3, [sp]
 8013104:	71eb      	strb	r3, [r5, #7]
 8013106:	6923      	ldr	r3, [r4, #16]
 8013108:	2108      	movs	r1, #8
 801310a:	68a2      	ldr	r2, [r4, #8]
 801310c:	3308      	adds	r3, #8
 801310e:	7da0      	ldrb	r0, [r4, #22]
 8013110:	4442      	add	r2, r8
 8013112:	7561      	strb	r1, [r4, #21]
 8013114:	1b9e      	subs	r6, r3, r6
 8013116:	f080 0001 	eor.w	r0, r0, #1
 801311a:	60a2      	str	r2, [r4, #8]
 801311c:	6126      	str	r6, [r4, #16]
 801311e:	b002      	add	sp, #8
 8013120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013124:	2108      	movs	r1, #8
 8013126:	4620      	mov	r0, r4
 8013128:	f000 fd54 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 801312c:	b350      	cbz	r0, 8013184 <ucdr_serialize_uint64_t+0x11c>
 801312e:	7d23      	ldrb	r3, [r4, #20]
 8013130:	2b01      	cmp	r3, #1
 8013132:	d02d      	beq.n	8013190 <ucdr_serialize_uint64_t+0x128>
 8013134:	68a3      	ldr	r3, [r4, #8]
 8013136:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801313a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801313e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013142:	7018      	strb	r0, [r3, #0]
 8013144:	68a3      	ldr	r3, [r4, #8]
 8013146:	705a      	strb	r2, [r3, #1]
 8013148:	68a3      	ldr	r3, [r4, #8]
 801314a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801314e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013152:	7099      	strb	r1, [r3, #2]
 8013154:	68a3      	ldr	r3, [r4, #8]
 8013156:	70da      	strb	r2, [r3, #3]
 8013158:	68a3      	ldr	r3, [r4, #8]
 801315a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801315e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013162:	7118      	strb	r0, [r3, #4]
 8013164:	68a3      	ldr	r3, [r4, #8]
 8013166:	715a      	strb	r2, [r3, #5]
 8013168:	68a3      	ldr	r3, [r4, #8]
 801316a:	f89d 2000 	ldrb.w	r2, [sp]
 801316e:	7199      	strb	r1, [r3, #6]
 8013170:	68a3      	ldr	r3, [r4, #8]
 8013172:	71da      	strb	r2, [r3, #7]
 8013174:	2108      	movs	r1, #8
 8013176:	68a2      	ldr	r2, [r4, #8]
 8013178:	6923      	ldr	r3, [r4, #16]
 801317a:	440a      	add	r2, r1
 801317c:	7561      	strb	r1, [r4, #21]
 801317e:	440b      	add	r3, r1
 8013180:	60a2      	str	r2, [r4, #8]
 8013182:	6123      	str	r3, [r4, #16]
 8013184:	7da0      	ldrb	r0, [r4, #22]
 8013186:	f080 0001 	eor.w	r0, r0, #1
 801318a:	b002      	add	sp, #8
 801318c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013190:	466b      	mov	r3, sp
 8013192:	68a2      	ldr	r2, [r4, #8]
 8013194:	cb03      	ldmia	r3!, {r0, r1}
 8013196:	6010      	str	r0, [r2, #0]
 8013198:	6051      	str	r1, [r2, #4]
 801319a:	e7eb      	b.n	8013174 <ucdr_serialize_uint64_t+0x10c>
 801319c:	68a2      	ldr	r2, [r4, #8]
 801319e:	6923      	ldr	r3, [r4, #16]
 80131a0:	7da0      	ldrb	r0, [r4, #22]
 80131a2:	1b92      	subs	r2, r2, r6
 80131a4:	1b9b      	subs	r3, r3, r6
 80131a6:	7567      	strb	r7, [r4, #21]
 80131a8:	f080 0001 	eor.w	r0, r0, #1
 80131ac:	60a2      	str	r2, [r4, #8]
 80131ae:	6123      	str	r3, [r4, #16]
 80131b0:	b002      	add	sp, #8
 80131b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b6:	68a3      	ldr	r3, [r4, #8]
 80131b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80131bc:	701a      	strb	r2, [r3, #0]
 80131be:	68a3      	ldr	r3, [r4, #8]
 80131c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80131c4:	701a      	strb	r2, [r3, #0]
 80131c6:	68a3      	ldr	r3, [r4, #8]
 80131c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80131cc:	701a      	strb	r2, [r3, #0]
 80131ce:	68a3      	ldr	r3, [r4, #8]
 80131d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80131d4:	701a      	strb	r2, [r3, #0]
 80131d6:	68a3      	ldr	r3, [r4, #8]
 80131d8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80131dc:	701a      	strb	r2, [r3, #0]
 80131de:	68a3      	ldr	r3, [r4, #8]
 80131e0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80131e4:	701a      	strb	r2, [r3, #0]
 80131e6:	68a3      	ldr	r3, [r4, #8]
 80131e8:	f89d 2000 	ldrb.w	r2, [sp]
 80131ec:	701a      	strb	r2, [r3, #0]
 80131ee:	e78a      	b.n	8013106 <ucdr_serialize_uint64_t+0x9e>
 80131f0:	4628      	mov	r0, r5
 80131f2:	466d      	mov	r5, sp
 80131f4:	4632      	mov	r2, r6
 80131f6:	4629      	mov	r1, r5
 80131f8:	f00d ffff 	bl	80211fa <memcpy>
 80131fc:	4642      	mov	r2, r8
 80131fe:	19a9      	adds	r1, r5, r6
 8013200:	68a0      	ldr	r0, [r4, #8]
 8013202:	f00d fffa 	bl	80211fa <memcpy>
 8013206:	e77e      	b.n	8013106 <ucdr_serialize_uint64_t+0x9e>

08013208 <ucdr_serialize_int16_t>:
 8013208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801320c:	460b      	mov	r3, r1
 801320e:	b082      	sub	sp, #8
 8013210:	4604      	mov	r4, r0
 8013212:	2102      	movs	r1, #2
 8013214:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013218:	f000 fd30 	bl	8013c7c <ucdr_buffer_alignment>
 801321c:	4601      	mov	r1, r0
 801321e:	4620      	mov	r0, r4
 8013220:	7d67      	ldrb	r7, [r4, #21]
 8013222:	f000 fd73 	bl	8013d0c <ucdr_advance_buffer>
 8013226:	2102      	movs	r1, #2
 8013228:	4620      	mov	r0, r4
 801322a:	f000 fcc7 	bl	8013bbc <ucdr_check_buffer_available_for>
 801322e:	bb78      	cbnz	r0, 8013290 <ucdr_serialize_int16_t+0x88>
 8013230:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013234:	42ab      	cmp	r3, r5
 8013236:	d926      	bls.n	8013286 <ucdr_serialize_int16_t+0x7e>
 8013238:	1b5e      	subs	r6, r3, r5
 801323a:	60a3      	str	r3, [r4, #8]
 801323c:	6923      	ldr	r3, [r4, #16]
 801323e:	4620      	mov	r0, r4
 8013240:	f1c6 0802 	rsb	r8, r6, #2
 8013244:	4433      	add	r3, r6
 8013246:	4641      	mov	r1, r8
 8013248:	6123      	str	r3, [r4, #16]
 801324a:	f000 fcc3 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 801324e:	2800      	cmp	r0, #0
 8013250:	d03b      	beq.n	80132ca <ucdr_serialize_int16_t+0xc2>
 8013252:	7d23      	ldrb	r3, [r4, #20]
 8013254:	2b01      	cmp	r3, #1
 8013256:	d04a      	beq.n	80132ee <ucdr_serialize_int16_t+0xe6>
 8013258:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801325c:	702b      	strb	r3, [r5, #0]
 801325e:	2e00      	cmp	r6, #0
 8013260:	d040      	beq.n	80132e4 <ucdr_serialize_int16_t+0xdc>
 8013262:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013266:	706b      	strb	r3, [r5, #1]
 8013268:	6923      	ldr	r3, [r4, #16]
 801326a:	2102      	movs	r1, #2
 801326c:	68a2      	ldr	r2, [r4, #8]
 801326e:	3302      	adds	r3, #2
 8013270:	7da0      	ldrb	r0, [r4, #22]
 8013272:	4442      	add	r2, r8
 8013274:	7561      	strb	r1, [r4, #21]
 8013276:	1b9e      	subs	r6, r3, r6
 8013278:	f080 0001 	eor.w	r0, r0, #1
 801327c:	60a2      	str	r2, [r4, #8]
 801327e:	6126      	str	r6, [r4, #16]
 8013280:	b002      	add	sp, #8
 8013282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013286:	2102      	movs	r1, #2
 8013288:	4620      	mov	r0, r4
 801328a:	f000 fca3 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 801328e:	b190      	cbz	r0, 80132b6 <ucdr_serialize_int16_t+0xae>
 8013290:	7d23      	ldrb	r3, [r4, #20]
 8013292:	2b01      	cmp	r3, #1
 8013294:	68a3      	ldr	r3, [r4, #8]
 8013296:	d014      	beq.n	80132c2 <ucdr_serialize_int16_t+0xba>
 8013298:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801329c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80132a0:	7019      	strb	r1, [r3, #0]
 80132a2:	68a3      	ldr	r3, [r4, #8]
 80132a4:	705a      	strb	r2, [r3, #1]
 80132a6:	2102      	movs	r1, #2
 80132a8:	68a2      	ldr	r2, [r4, #8]
 80132aa:	6923      	ldr	r3, [r4, #16]
 80132ac:	440a      	add	r2, r1
 80132ae:	7561      	strb	r1, [r4, #21]
 80132b0:	440b      	add	r3, r1
 80132b2:	60a2      	str	r2, [r4, #8]
 80132b4:	6123      	str	r3, [r4, #16]
 80132b6:	7da0      	ldrb	r0, [r4, #22]
 80132b8:	f080 0001 	eor.w	r0, r0, #1
 80132bc:	b002      	add	sp, #8
 80132be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80132c6:	801a      	strh	r2, [r3, #0]
 80132c8:	e7ed      	b.n	80132a6 <ucdr_serialize_int16_t+0x9e>
 80132ca:	68a2      	ldr	r2, [r4, #8]
 80132cc:	6923      	ldr	r3, [r4, #16]
 80132ce:	7da0      	ldrb	r0, [r4, #22]
 80132d0:	1b92      	subs	r2, r2, r6
 80132d2:	1b9b      	subs	r3, r3, r6
 80132d4:	7567      	strb	r7, [r4, #21]
 80132d6:	f080 0001 	eor.w	r0, r0, #1
 80132da:	60a2      	str	r2, [r4, #8]
 80132dc:	6123      	str	r3, [r4, #16]
 80132de:	b002      	add	sp, #8
 80132e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132e4:	68a3      	ldr	r3, [r4, #8]
 80132e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80132ea:	701a      	strb	r2, [r3, #0]
 80132ec:	e7bc      	b.n	8013268 <ucdr_serialize_int16_t+0x60>
 80132ee:	4628      	mov	r0, r5
 80132f0:	f10d 0506 	add.w	r5, sp, #6
 80132f4:	4632      	mov	r2, r6
 80132f6:	4629      	mov	r1, r5
 80132f8:	f00d ff7f 	bl	80211fa <memcpy>
 80132fc:	4642      	mov	r2, r8
 80132fe:	19a9      	adds	r1, r5, r6
 8013300:	68a0      	ldr	r0, [r4, #8]
 8013302:	f00d ff7a 	bl	80211fa <memcpy>
 8013306:	e7af      	b.n	8013268 <ucdr_serialize_int16_t+0x60>

08013308 <ucdr_deserialize_int16_t>:
 8013308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801330c:	4604      	mov	r4, r0
 801330e:	460d      	mov	r5, r1
 8013310:	2102      	movs	r1, #2
 8013312:	f000 fcb3 	bl	8013c7c <ucdr_buffer_alignment>
 8013316:	4601      	mov	r1, r0
 8013318:	4620      	mov	r0, r4
 801331a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801331e:	f000 fcf5 	bl	8013d0c <ucdr_advance_buffer>
 8013322:	2102      	movs	r1, #2
 8013324:	4620      	mov	r0, r4
 8013326:	f000 fc49 	bl	8013bbc <ucdr_check_buffer_available_for>
 801332a:	bb60      	cbnz	r0, 8013386 <ucdr_deserialize_int16_t+0x7e>
 801332c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013330:	42be      	cmp	r6, r7
 8013332:	d923      	bls.n	801337c <ucdr_deserialize_int16_t+0x74>
 8013334:	6923      	ldr	r3, [r4, #16]
 8013336:	4620      	mov	r0, r4
 8013338:	60a6      	str	r6, [r4, #8]
 801333a:	1bf6      	subs	r6, r6, r7
 801333c:	4433      	add	r3, r6
 801333e:	f1c6 0902 	rsb	r9, r6, #2
 8013342:	6123      	str	r3, [r4, #16]
 8013344:	4649      	mov	r1, r9
 8013346:	f000 fc45 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 801334a:	2800      	cmp	r0, #0
 801334c:	d034      	beq.n	80133b8 <ucdr_deserialize_int16_t+0xb0>
 801334e:	7d23      	ldrb	r3, [r4, #20]
 8013350:	2b01      	cmp	r3, #1
 8013352:	d042      	beq.n	80133da <ucdr_deserialize_int16_t+0xd2>
 8013354:	787b      	ldrb	r3, [r7, #1]
 8013356:	702b      	strb	r3, [r5, #0]
 8013358:	2e00      	cmp	r6, #0
 801335a:	d03a      	beq.n	80133d2 <ucdr_deserialize_int16_t+0xca>
 801335c:	783b      	ldrb	r3, [r7, #0]
 801335e:	706b      	strb	r3, [r5, #1]
 8013360:	6923      	ldr	r3, [r4, #16]
 8013362:	2102      	movs	r1, #2
 8013364:	68a2      	ldr	r2, [r4, #8]
 8013366:	3302      	adds	r3, #2
 8013368:	7da0      	ldrb	r0, [r4, #22]
 801336a:	444a      	add	r2, r9
 801336c:	7561      	strb	r1, [r4, #21]
 801336e:	1b9b      	subs	r3, r3, r6
 8013370:	f080 0001 	eor.w	r0, r0, #1
 8013374:	60a2      	str	r2, [r4, #8]
 8013376:	6123      	str	r3, [r4, #16]
 8013378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801337c:	2102      	movs	r1, #2
 801337e:	4620      	mov	r0, r4
 8013380:	f000 fc28 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8013384:	b180      	cbz	r0, 80133a8 <ucdr_deserialize_int16_t+0xa0>
 8013386:	7d23      	ldrb	r3, [r4, #20]
 8013388:	2b01      	cmp	r3, #1
 801338a:	68a3      	ldr	r3, [r4, #8]
 801338c:	d011      	beq.n	80133b2 <ucdr_deserialize_int16_t+0xaa>
 801338e:	785b      	ldrb	r3, [r3, #1]
 8013390:	702b      	strb	r3, [r5, #0]
 8013392:	68a3      	ldr	r3, [r4, #8]
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	706b      	strb	r3, [r5, #1]
 8013398:	2102      	movs	r1, #2
 801339a:	68a2      	ldr	r2, [r4, #8]
 801339c:	6923      	ldr	r3, [r4, #16]
 801339e:	440a      	add	r2, r1
 80133a0:	7561      	strb	r1, [r4, #21]
 80133a2:	440b      	add	r3, r1
 80133a4:	60a2      	str	r2, [r4, #8]
 80133a6:	6123      	str	r3, [r4, #16]
 80133a8:	7da0      	ldrb	r0, [r4, #22]
 80133aa:	f080 0001 	eor.w	r0, r0, #1
 80133ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133b2:	881b      	ldrh	r3, [r3, #0]
 80133b4:	802b      	strh	r3, [r5, #0]
 80133b6:	e7ef      	b.n	8013398 <ucdr_deserialize_int16_t+0x90>
 80133b8:	68a2      	ldr	r2, [r4, #8]
 80133ba:	6923      	ldr	r3, [r4, #16]
 80133bc:	1b92      	subs	r2, r2, r6
 80133be:	7da0      	ldrb	r0, [r4, #22]
 80133c0:	1b9b      	subs	r3, r3, r6
 80133c2:	f884 8015 	strb.w	r8, [r4, #21]
 80133c6:	f080 0001 	eor.w	r0, r0, #1
 80133ca:	60a2      	str	r2, [r4, #8]
 80133cc:	6123      	str	r3, [r4, #16]
 80133ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133d2:	68a3      	ldr	r3, [r4, #8]
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	706b      	strb	r3, [r5, #1]
 80133d8:	e7c2      	b.n	8013360 <ucdr_deserialize_int16_t+0x58>
 80133da:	4639      	mov	r1, r7
 80133dc:	4632      	mov	r2, r6
 80133de:	4628      	mov	r0, r5
 80133e0:	f00d ff0b 	bl	80211fa <memcpy>
 80133e4:	464a      	mov	r2, r9
 80133e6:	19a8      	adds	r0, r5, r6
 80133e8:	68a1      	ldr	r1, [r4, #8]
 80133ea:	f00d ff06 	bl	80211fa <memcpy>
 80133ee:	e7b7      	b.n	8013360 <ucdr_deserialize_int16_t+0x58>

080133f0 <ucdr_serialize_int32_t>:
 80133f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133f4:	b082      	sub	sp, #8
 80133f6:	4604      	mov	r4, r0
 80133f8:	9101      	str	r1, [sp, #4]
 80133fa:	2104      	movs	r1, #4
 80133fc:	f000 fc3e 	bl	8013c7c <ucdr_buffer_alignment>
 8013400:	4601      	mov	r1, r0
 8013402:	4620      	mov	r0, r4
 8013404:	7d67      	ldrb	r7, [r4, #21]
 8013406:	f000 fc81 	bl	8013d0c <ucdr_advance_buffer>
 801340a:	2104      	movs	r1, #4
 801340c:	4620      	mov	r0, r4
 801340e:	f000 fbd5 	bl	8013bbc <ucdr_check_buffer_available_for>
 8013412:	2800      	cmp	r0, #0
 8013414:	d139      	bne.n	801348a <ucdr_serialize_int32_t+0x9a>
 8013416:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801341a:	42ab      	cmp	r3, r5
 801341c:	d930      	bls.n	8013480 <ucdr_serialize_int32_t+0x90>
 801341e:	1b5e      	subs	r6, r3, r5
 8013420:	60a3      	str	r3, [r4, #8]
 8013422:	6923      	ldr	r3, [r4, #16]
 8013424:	4620      	mov	r0, r4
 8013426:	f1c6 0804 	rsb	r8, r6, #4
 801342a:	4433      	add	r3, r6
 801342c:	4641      	mov	r1, r8
 801342e:	6123      	str	r3, [r4, #16]
 8013430:	f000 fbd0 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8013434:	2800      	cmp	r0, #0
 8013436:	d04c      	beq.n	80134d2 <ucdr_serialize_int32_t+0xe2>
 8013438:	7d23      	ldrb	r3, [r4, #20]
 801343a:	2b01      	cmp	r3, #1
 801343c:	d063      	beq.n	8013506 <ucdr_serialize_int32_t+0x116>
 801343e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013442:	702b      	strb	r3, [r5, #0]
 8013444:	2e00      	cmp	r6, #0
 8013446:	d051      	beq.n	80134ec <ucdr_serialize_int32_t+0xfc>
 8013448:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801344c:	2e01      	cmp	r6, #1
 801344e:	706b      	strb	r3, [r5, #1]
 8013450:	d050      	beq.n	80134f4 <ucdr_serialize_int32_t+0x104>
 8013452:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013456:	2e02      	cmp	r6, #2
 8013458:	70ab      	strb	r3, [r5, #2]
 801345a:	d04f      	beq.n	80134fc <ucdr_serialize_int32_t+0x10c>
 801345c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013460:	70eb      	strb	r3, [r5, #3]
 8013462:	6923      	ldr	r3, [r4, #16]
 8013464:	2104      	movs	r1, #4
 8013466:	68a2      	ldr	r2, [r4, #8]
 8013468:	3304      	adds	r3, #4
 801346a:	7da0      	ldrb	r0, [r4, #22]
 801346c:	4442      	add	r2, r8
 801346e:	7561      	strb	r1, [r4, #21]
 8013470:	1b9e      	subs	r6, r3, r6
 8013472:	f080 0001 	eor.w	r0, r0, #1
 8013476:	60a2      	str	r2, [r4, #8]
 8013478:	6126      	str	r6, [r4, #16]
 801347a:	b002      	add	sp, #8
 801347c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013480:	2104      	movs	r1, #4
 8013482:	4620      	mov	r0, r4
 8013484:	f000 fba6 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8013488:	b1d0      	cbz	r0, 80134c0 <ucdr_serialize_int32_t+0xd0>
 801348a:	7d23      	ldrb	r3, [r4, #20]
 801348c:	2b01      	cmp	r3, #1
 801348e:	68a3      	ldr	r3, [r4, #8]
 8013490:	d01c      	beq.n	80134cc <ucdr_serialize_int32_t+0xdc>
 8013492:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013496:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801349a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801349e:	7018      	strb	r0, [r3, #0]
 80134a0:	68a3      	ldr	r3, [r4, #8]
 80134a2:	705a      	strb	r2, [r3, #1]
 80134a4:	68a3      	ldr	r3, [r4, #8]
 80134a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80134aa:	7099      	strb	r1, [r3, #2]
 80134ac:	68a3      	ldr	r3, [r4, #8]
 80134ae:	70da      	strb	r2, [r3, #3]
 80134b0:	2104      	movs	r1, #4
 80134b2:	68a2      	ldr	r2, [r4, #8]
 80134b4:	6923      	ldr	r3, [r4, #16]
 80134b6:	440a      	add	r2, r1
 80134b8:	7561      	strb	r1, [r4, #21]
 80134ba:	440b      	add	r3, r1
 80134bc:	60a2      	str	r2, [r4, #8]
 80134be:	6123      	str	r3, [r4, #16]
 80134c0:	7da0      	ldrb	r0, [r4, #22]
 80134c2:	f080 0001 	eor.w	r0, r0, #1
 80134c6:	b002      	add	sp, #8
 80134c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134cc:	9a01      	ldr	r2, [sp, #4]
 80134ce:	601a      	str	r2, [r3, #0]
 80134d0:	e7ee      	b.n	80134b0 <ucdr_serialize_int32_t+0xc0>
 80134d2:	68a2      	ldr	r2, [r4, #8]
 80134d4:	6923      	ldr	r3, [r4, #16]
 80134d6:	7da0      	ldrb	r0, [r4, #22]
 80134d8:	1b92      	subs	r2, r2, r6
 80134da:	1b9b      	subs	r3, r3, r6
 80134dc:	7567      	strb	r7, [r4, #21]
 80134de:	f080 0001 	eor.w	r0, r0, #1
 80134e2:	60a2      	str	r2, [r4, #8]
 80134e4:	6123      	str	r3, [r4, #16]
 80134e6:	b002      	add	sp, #8
 80134e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134ec:	68a3      	ldr	r3, [r4, #8]
 80134ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80134f2:	701a      	strb	r2, [r3, #0]
 80134f4:	68a3      	ldr	r3, [r4, #8]
 80134f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80134fa:	701a      	strb	r2, [r3, #0]
 80134fc:	68a3      	ldr	r3, [r4, #8]
 80134fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013502:	701a      	strb	r2, [r3, #0]
 8013504:	e7ad      	b.n	8013462 <ucdr_serialize_int32_t+0x72>
 8013506:	4628      	mov	r0, r5
 8013508:	ad01      	add	r5, sp, #4
 801350a:	4632      	mov	r2, r6
 801350c:	4629      	mov	r1, r5
 801350e:	f00d fe74 	bl	80211fa <memcpy>
 8013512:	4642      	mov	r2, r8
 8013514:	19a9      	adds	r1, r5, r6
 8013516:	68a0      	ldr	r0, [r4, #8]
 8013518:	f00d fe6f 	bl	80211fa <memcpy>
 801351c:	e7a1      	b.n	8013462 <ucdr_serialize_int32_t+0x72>
 801351e:	bf00      	nop

08013520 <ucdr_deserialize_int32_t>:
 8013520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013524:	4604      	mov	r4, r0
 8013526:	460d      	mov	r5, r1
 8013528:	2104      	movs	r1, #4
 801352a:	f000 fba7 	bl	8013c7c <ucdr_buffer_alignment>
 801352e:	4601      	mov	r1, r0
 8013530:	4620      	mov	r0, r4
 8013532:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013536:	f000 fbe9 	bl	8013d0c <ucdr_advance_buffer>
 801353a:	2104      	movs	r1, #4
 801353c:	4620      	mov	r0, r4
 801353e:	f000 fb3d 	bl	8013bbc <ucdr_check_buffer_available_for>
 8013542:	2800      	cmp	r0, #0
 8013544:	d138      	bne.n	80135b8 <ucdr_deserialize_int32_t+0x98>
 8013546:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801354a:	42b7      	cmp	r7, r6
 801354c:	d92f      	bls.n	80135ae <ucdr_deserialize_int32_t+0x8e>
 801354e:	6923      	ldr	r3, [r4, #16]
 8013550:	4620      	mov	r0, r4
 8013552:	60a7      	str	r7, [r4, #8]
 8013554:	1bbf      	subs	r7, r7, r6
 8013556:	443b      	add	r3, r7
 8013558:	f1c7 0904 	rsb	r9, r7, #4
 801355c:	6123      	str	r3, [r4, #16]
 801355e:	4649      	mov	r1, r9
 8013560:	f000 fb38 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8013564:	2800      	cmp	r0, #0
 8013566:	d046      	beq.n	80135f6 <ucdr_deserialize_int32_t+0xd6>
 8013568:	7d23      	ldrb	r3, [r4, #20]
 801356a:	2b01      	cmp	r3, #1
 801356c:	d05c      	beq.n	8013628 <ucdr_deserialize_int32_t+0x108>
 801356e:	78f3      	ldrb	r3, [r6, #3]
 8013570:	702b      	strb	r3, [r5, #0]
 8013572:	2f00      	cmp	r7, #0
 8013574:	d04c      	beq.n	8013610 <ucdr_deserialize_int32_t+0xf0>
 8013576:	78b3      	ldrb	r3, [r6, #2]
 8013578:	2f01      	cmp	r7, #1
 801357a:	706b      	strb	r3, [r5, #1]
 801357c:	f105 0302 	add.w	r3, r5, #2
 8013580:	d04a      	beq.n	8013618 <ucdr_deserialize_int32_t+0xf8>
 8013582:	7873      	ldrb	r3, [r6, #1]
 8013584:	2f02      	cmp	r7, #2
 8013586:	70ab      	strb	r3, [r5, #2]
 8013588:	f105 0303 	add.w	r3, r5, #3
 801358c:	d048      	beq.n	8013620 <ucdr_deserialize_int32_t+0x100>
 801358e:	7833      	ldrb	r3, [r6, #0]
 8013590:	70eb      	strb	r3, [r5, #3]
 8013592:	6923      	ldr	r3, [r4, #16]
 8013594:	2104      	movs	r1, #4
 8013596:	68a2      	ldr	r2, [r4, #8]
 8013598:	3304      	adds	r3, #4
 801359a:	7da0      	ldrb	r0, [r4, #22]
 801359c:	444a      	add	r2, r9
 801359e:	7561      	strb	r1, [r4, #21]
 80135a0:	1bdb      	subs	r3, r3, r7
 80135a2:	f080 0001 	eor.w	r0, r0, #1
 80135a6:	60a2      	str	r2, [r4, #8]
 80135a8:	6123      	str	r3, [r4, #16]
 80135aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135ae:	2104      	movs	r1, #4
 80135b0:	4620      	mov	r0, r4
 80135b2:	f000 fb0f 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 80135b6:	b1b0      	cbz	r0, 80135e6 <ucdr_deserialize_int32_t+0xc6>
 80135b8:	7d23      	ldrb	r3, [r4, #20]
 80135ba:	2b01      	cmp	r3, #1
 80135bc:	68a3      	ldr	r3, [r4, #8]
 80135be:	d017      	beq.n	80135f0 <ucdr_deserialize_int32_t+0xd0>
 80135c0:	78db      	ldrb	r3, [r3, #3]
 80135c2:	702b      	strb	r3, [r5, #0]
 80135c4:	68a3      	ldr	r3, [r4, #8]
 80135c6:	789b      	ldrb	r3, [r3, #2]
 80135c8:	706b      	strb	r3, [r5, #1]
 80135ca:	68a3      	ldr	r3, [r4, #8]
 80135cc:	785b      	ldrb	r3, [r3, #1]
 80135ce:	70ab      	strb	r3, [r5, #2]
 80135d0:	68a3      	ldr	r3, [r4, #8]
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	70eb      	strb	r3, [r5, #3]
 80135d6:	2104      	movs	r1, #4
 80135d8:	68a2      	ldr	r2, [r4, #8]
 80135da:	6923      	ldr	r3, [r4, #16]
 80135dc:	440a      	add	r2, r1
 80135de:	7561      	strb	r1, [r4, #21]
 80135e0:	440b      	add	r3, r1
 80135e2:	60a2      	str	r2, [r4, #8]
 80135e4:	6123      	str	r3, [r4, #16]
 80135e6:	7da0      	ldrb	r0, [r4, #22]
 80135e8:	f080 0001 	eor.w	r0, r0, #1
 80135ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	602b      	str	r3, [r5, #0]
 80135f4:	e7ef      	b.n	80135d6 <ucdr_deserialize_int32_t+0xb6>
 80135f6:	68a2      	ldr	r2, [r4, #8]
 80135f8:	6923      	ldr	r3, [r4, #16]
 80135fa:	1bd2      	subs	r2, r2, r7
 80135fc:	7da0      	ldrb	r0, [r4, #22]
 80135fe:	1bdb      	subs	r3, r3, r7
 8013600:	f884 8015 	strb.w	r8, [r4, #21]
 8013604:	f080 0001 	eor.w	r0, r0, #1
 8013608:	60a2      	str	r2, [r4, #8]
 801360a:	6123      	str	r3, [r4, #16]
 801360c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013610:	68a3      	ldr	r3, [r4, #8]
 8013612:	789b      	ldrb	r3, [r3, #2]
 8013614:	706b      	strb	r3, [r5, #1]
 8013616:	1cab      	adds	r3, r5, #2
 8013618:	68a2      	ldr	r2, [r4, #8]
 801361a:	7852      	ldrb	r2, [r2, #1]
 801361c:	f803 2b01 	strb.w	r2, [r3], #1
 8013620:	68a2      	ldr	r2, [r4, #8]
 8013622:	7812      	ldrb	r2, [r2, #0]
 8013624:	701a      	strb	r2, [r3, #0]
 8013626:	e7b4      	b.n	8013592 <ucdr_deserialize_int32_t+0x72>
 8013628:	4631      	mov	r1, r6
 801362a:	463a      	mov	r2, r7
 801362c:	4628      	mov	r0, r5
 801362e:	f00d fde4 	bl	80211fa <memcpy>
 8013632:	464a      	mov	r2, r9
 8013634:	19e8      	adds	r0, r5, r7
 8013636:	68a1      	ldr	r1, [r4, #8]
 8013638:	f00d fddf 	bl	80211fa <memcpy>
 801363c:	e7a9      	b.n	8013592 <ucdr_deserialize_int32_t+0x72>
 801363e:	bf00      	nop

08013640 <ucdr_serialize_float>:
 8013640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013644:	4604      	mov	r4, r0
 8013646:	b082      	sub	sp, #8
 8013648:	2104      	movs	r1, #4
 801364a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801364e:	f000 fb15 	bl	8013c7c <ucdr_buffer_alignment>
 8013652:	4601      	mov	r1, r0
 8013654:	4620      	mov	r0, r4
 8013656:	7d67      	ldrb	r7, [r4, #21]
 8013658:	f000 fb58 	bl	8013d0c <ucdr_advance_buffer>
 801365c:	2104      	movs	r1, #4
 801365e:	4620      	mov	r0, r4
 8013660:	f000 faac 	bl	8013bbc <ucdr_check_buffer_available_for>
 8013664:	2800      	cmp	r0, #0
 8013666:	d139      	bne.n	80136dc <ucdr_serialize_float+0x9c>
 8013668:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801366c:	42ab      	cmp	r3, r5
 801366e:	d930      	bls.n	80136d2 <ucdr_serialize_float+0x92>
 8013670:	1b5e      	subs	r6, r3, r5
 8013672:	60a3      	str	r3, [r4, #8]
 8013674:	6923      	ldr	r3, [r4, #16]
 8013676:	4620      	mov	r0, r4
 8013678:	f1c6 0804 	rsb	r8, r6, #4
 801367c:	4433      	add	r3, r6
 801367e:	4641      	mov	r1, r8
 8013680:	6123      	str	r3, [r4, #16]
 8013682:	f000 faa7 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8013686:	2800      	cmp	r0, #0
 8013688:	d04c      	beq.n	8013724 <ucdr_serialize_float+0xe4>
 801368a:	7d23      	ldrb	r3, [r4, #20]
 801368c:	2b01      	cmp	r3, #1
 801368e:	d063      	beq.n	8013758 <ucdr_serialize_float+0x118>
 8013690:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013694:	702b      	strb	r3, [r5, #0]
 8013696:	2e00      	cmp	r6, #0
 8013698:	d051      	beq.n	801373e <ucdr_serialize_float+0xfe>
 801369a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801369e:	2e01      	cmp	r6, #1
 80136a0:	706b      	strb	r3, [r5, #1]
 80136a2:	d050      	beq.n	8013746 <ucdr_serialize_float+0x106>
 80136a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80136a8:	2e02      	cmp	r6, #2
 80136aa:	70ab      	strb	r3, [r5, #2]
 80136ac:	d04f      	beq.n	801374e <ucdr_serialize_float+0x10e>
 80136ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80136b2:	70eb      	strb	r3, [r5, #3]
 80136b4:	6923      	ldr	r3, [r4, #16]
 80136b6:	2104      	movs	r1, #4
 80136b8:	68a2      	ldr	r2, [r4, #8]
 80136ba:	3304      	adds	r3, #4
 80136bc:	7da0      	ldrb	r0, [r4, #22]
 80136be:	4442      	add	r2, r8
 80136c0:	7561      	strb	r1, [r4, #21]
 80136c2:	1b9e      	subs	r6, r3, r6
 80136c4:	f080 0001 	eor.w	r0, r0, #1
 80136c8:	60a2      	str	r2, [r4, #8]
 80136ca:	6126      	str	r6, [r4, #16]
 80136cc:	b002      	add	sp, #8
 80136ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136d2:	2104      	movs	r1, #4
 80136d4:	4620      	mov	r0, r4
 80136d6:	f000 fa7d 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 80136da:	b1d0      	cbz	r0, 8013712 <ucdr_serialize_float+0xd2>
 80136dc:	7d23      	ldrb	r3, [r4, #20]
 80136de:	2b01      	cmp	r3, #1
 80136e0:	68a3      	ldr	r3, [r4, #8]
 80136e2:	d01c      	beq.n	801371e <ucdr_serialize_float+0xde>
 80136e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80136e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80136ec:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80136f0:	7018      	strb	r0, [r3, #0]
 80136f2:	68a3      	ldr	r3, [r4, #8]
 80136f4:	705a      	strb	r2, [r3, #1]
 80136f6:	68a3      	ldr	r3, [r4, #8]
 80136f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80136fc:	7099      	strb	r1, [r3, #2]
 80136fe:	68a3      	ldr	r3, [r4, #8]
 8013700:	70da      	strb	r2, [r3, #3]
 8013702:	2104      	movs	r1, #4
 8013704:	68a2      	ldr	r2, [r4, #8]
 8013706:	6923      	ldr	r3, [r4, #16]
 8013708:	440a      	add	r2, r1
 801370a:	7561      	strb	r1, [r4, #21]
 801370c:	440b      	add	r3, r1
 801370e:	60a2      	str	r2, [r4, #8]
 8013710:	6123      	str	r3, [r4, #16]
 8013712:	7da0      	ldrb	r0, [r4, #22]
 8013714:	f080 0001 	eor.w	r0, r0, #1
 8013718:	b002      	add	sp, #8
 801371a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801371e:	9a01      	ldr	r2, [sp, #4]
 8013720:	601a      	str	r2, [r3, #0]
 8013722:	e7ee      	b.n	8013702 <ucdr_serialize_float+0xc2>
 8013724:	68a2      	ldr	r2, [r4, #8]
 8013726:	6923      	ldr	r3, [r4, #16]
 8013728:	7da0      	ldrb	r0, [r4, #22]
 801372a:	1b92      	subs	r2, r2, r6
 801372c:	1b9b      	subs	r3, r3, r6
 801372e:	7567      	strb	r7, [r4, #21]
 8013730:	f080 0001 	eor.w	r0, r0, #1
 8013734:	60a2      	str	r2, [r4, #8]
 8013736:	6123      	str	r3, [r4, #16]
 8013738:	b002      	add	sp, #8
 801373a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801373e:	68a3      	ldr	r3, [r4, #8]
 8013740:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013744:	701a      	strb	r2, [r3, #0]
 8013746:	68a3      	ldr	r3, [r4, #8]
 8013748:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801374c:	701a      	strb	r2, [r3, #0]
 801374e:	68a3      	ldr	r3, [r4, #8]
 8013750:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013754:	701a      	strb	r2, [r3, #0]
 8013756:	e7ad      	b.n	80136b4 <ucdr_serialize_float+0x74>
 8013758:	4628      	mov	r0, r5
 801375a:	ad01      	add	r5, sp, #4
 801375c:	4632      	mov	r2, r6
 801375e:	4629      	mov	r1, r5
 8013760:	f00d fd4b 	bl	80211fa <memcpy>
 8013764:	4642      	mov	r2, r8
 8013766:	19a9      	adds	r1, r5, r6
 8013768:	68a0      	ldr	r0, [r4, #8]
 801376a:	f00d fd46 	bl	80211fa <memcpy>
 801376e:	e7a1      	b.n	80136b4 <ucdr_serialize_float+0x74>

08013770 <ucdr_deserialize_float>:
 8013770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013774:	4604      	mov	r4, r0
 8013776:	460d      	mov	r5, r1
 8013778:	2104      	movs	r1, #4
 801377a:	f000 fa7f 	bl	8013c7c <ucdr_buffer_alignment>
 801377e:	4601      	mov	r1, r0
 8013780:	4620      	mov	r0, r4
 8013782:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013786:	f000 fac1 	bl	8013d0c <ucdr_advance_buffer>
 801378a:	2104      	movs	r1, #4
 801378c:	4620      	mov	r0, r4
 801378e:	f000 fa15 	bl	8013bbc <ucdr_check_buffer_available_for>
 8013792:	2800      	cmp	r0, #0
 8013794:	d138      	bne.n	8013808 <ucdr_deserialize_float+0x98>
 8013796:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801379a:	42b7      	cmp	r7, r6
 801379c:	d92f      	bls.n	80137fe <ucdr_deserialize_float+0x8e>
 801379e:	6923      	ldr	r3, [r4, #16]
 80137a0:	4620      	mov	r0, r4
 80137a2:	60a7      	str	r7, [r4, #8]
 80137a4:	1bbf      	subs	r7, r7, r6
 80137a6:	443b      	add	r3, r7
 80137a8:	f1c7 0904 	rsb	r9, r7, #4
 80137ac:	6123      	str	r3, [r4, #16]
 80137ae:	4649      	mov	r1, r9
 80137b0:	f000 fa10 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 80137b4:	2800      	cmp	r0, #0
 80137b6:	d046      	beq.n	8013846 <ucdr_deserialize_float+0xd6>
 80137b8:	7d23      	ldrb	r3, [r4, #20]
 80137ba:	2b01      	cmp	r3, #1
 80137bc:	d05c      	beq.n	8013878 <ucdr_deserialize_float+0x108>
 80137be:	78f3      	ldrb	r3, [r6, #3]
 80137c0:	702b      	strb	r3, [r5, #0]
 80137c2:	2f00      	cmp	r7, #0
 80137c4:	d04c      	beq.n	8013860 <ucdr_deserialize_float+0xf0>
 80137c6:	78b3      	ldrb	r3, [r6, #2]
 80137c8:	2f01      	cmp	r7, #1
 80137ca:	706b      	strb	r3, [r5, #1]
 80137cc:	f105 0302 	add.w	r3, r5, #2
 80137d0:	d04a      	beq.n	8013868 <ucdr_deserialize_float+0xf8>
 80137d2:	7873      	ldrb	r3, [r6, #1]
 80137d4:	2f02      	cmp	r7, #2
 80137d6:	70ab      	strb	r3, [r5, #2]
 80137d8:	f105 0303 	add.w	r3, r5, #3
 80137dc:	d048      	beq.n	8013870 <ucdr_deserialize_float+0x100>
 80137de:	7833      	ldrb	r3, [r6, #0]
 80137e0:	70eb      	strb	r3, [r5, #3]
 80137e2:	6923      	ldr	r3, [r4, #16]
 80137e4:	2104      	movs	r1, #4
 80137e6:	68a2      	ldr	r2, [r4, #8]
 80137e8:	3304      	adds	r3, #4
 80137ea:	7da0      	ldrb	r0, [r4, #22]
 80137ec:	444a      	add	r2, r9
 80137ee:	7561      	strb	r1, [r4, #21]
 80137f0:	1bdb      	subs	r3, r3, r7
 80137f2:	f080 0001 	eor.w	r0, r0, #1
 80137f6:	60a2      	str	r2, [r4, #8]
 80137f8:	6123      	str	r3, [r4, #16]
 80137fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137fe:	2104      	movs	r1, #4
 8013800:	4620      	mov	r0, r4
 8013802:	f000 f9e7 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8013806:	b1b0      	cbz	r0, 8013836 <ucdr_deserialize_float+0xc6>
 8013808:	7d23      	ldrb	r3, [r4, #20]
 801380a:	2b01      	cmp	r3, #1
 801380c:	68a3      	ldr	r3, [r4, #8]
 801380e:	d017      	beq.n	8013840 <ucdr_deserialize_float+0xd0>
 8013810:	78db      	ldrb	r3, [r3, #3]
 8013812:	702b      	strb	r3, [r5, #0]
 8013814:	68a3      	ldr	r3, [r4, #8]
 8013816:	789b      	ldrb	r3, [r3, #2]
 8013818:	706b      	strb	r3, [r5, #1]
 801381a:	68a3      	ldr	r3, [r4, #8]
 801381c:	785b      	ldrb	r3, [r3, #1]
 801381e:	70ab      	strb	r3, [r5, #2]
 8013820:	68a3      	ldr	r3, [r4, #8]
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	70eb      	strb	r3, [r5, #3]
 8013826:	2104      	movs	r1, #4
 8013828:	68a2      	ldr	r2, [r4, #8]
 801382a:	6923      	ldr	r3, [r4, #16]
 801382c:	440a      	add	r2, r1
 801382e:	7561      	strb	r1, [r4, #21]
 8013830:	440b      	add	r3, r1
 8013832:	60a2      	str	r2, [r4, #8]
 8013834:	6123      	str	r3, [r4, #16]
 8013836:	7da0      	ldrb	r0, [r4, #22]
 8013838:	f080 0001 	eor.w	r0, r0, #1
 801383c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	602b      	str	r3, [r5, #0]
 8013844:	e7ef      	b.n	8013826 <ucdr_deserialize_float+0xb6>
 8013846:	68a2      	ldr	r2, [r4, #8]
 8013848:	6923      	ldr	r3, [r4, #16]
 801384a:	1bd2      	subs	r2, r2, r7
 801384c:	7da0      	ldrb	r0, [r4, #22]
 801384e:	1bdb      	subs	r3, r3, r7
 8013850:	f884 8015 	strb.w	r8, [r4, #21]
 8013854:	f080 0001 	eor.w	r0, r0, #1
 8013858:	60a2      	str	r2, [r4, #8]
 801385a:	6123      	str	r3, [r4, #16]
 801385c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013860:	68a3      	ldr	r3, [r4, #8]
 8013862:	789b      	ldrb	r3, [r3, #2]
 8013864:	706b      	strb	r3, [r5, #1]
 8013866:	1cab      	adds	r3, r5, #2
 8013868:	68a2      	ldr	r2, [r4, #8]
 801386a:	7852      	ldrb	r2, [r2, #1]
 801386c:	f803 2b01 	strb.w	r2, [r3], #1
 8013870:	68a2      	ldr	r2, [r4, #8]
 8013872:	7812      	ldrb	r2, [r2, #0]
 8013874:	701a      	strb	r2, [r3, #0]
 8013876:	e7b4      	b.n	80137e2 <ucdr_deserialize_float+0x72>
 8013878:	4631      	mov	r1, r6
 801387a:	463a      	mov	r2, r7
 801387c:	4628      	mov	r0, r5
 801387e:	f00d fcbc 	bl	80211fa <memcpy>
 8013882:	464a      	mov	r2, r9
 8013884:	19e8      	adds	r0, r5, r7
 8013886:	68a1      	ldr	r1, [r4, #8]
 8013888:	f00d fcb7 	bl	80211fa <memcpy>
 801388c:	e7a9      	b.n	80137e2 <ucdr_deserialize_float+0x72>
 801388e:	bf00      	nop

08013890 <ucdr_serialize_double>:
 8013890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013894:	4604      	mov	r4, r0
 8013896:	b082      	sub	sp, #8
 8013898:	2108      	movs	r1, #8
 801389a:	ed8d 0b00 	vstr	d0, [sp]
 801389e:	f000 f9ed 	bl	8013c7c <ucdr_buffer_alignment>
 80138a2:	4601      	mov	r1, r0
 80138a4:	4620      	mov	r0, r4
 80138a6:	7d67      	ldrb	r7, [r4, #21]
 80138a8:	f000 fa30 	bl	8013d0c <ucdr_advance_buffer>
 80138ac:	2108      	movs	r1, #8
 80138ae:	4620      	mov	r0, r4
 80138b0:	f000 f984 	bl	8013bbc <ucdr_check_buffer_available_for>
 80138b4:	2800      	cmp	r0, #0
 80138b6:	d14e      	bne.n	8013956 <ucdr_serialize_double+0xc6>
 80138b8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80138bc:	42ab      	cmp	r3, r5
 80138be:	d945      	bls.n	801394c <ucdr_serialize_double+0xbc>
 80138c0:	1b5e      	subs	r6, r3, r5
 80138c2:	60a3      	str	r3, [r4, #8]
 80138c4:	6923      	ldr	r3, [r4, #16]
 80138c6:	4620      	mov	r0, r4
 80138c8:	f1c6 0808 	rsb	r8, r6, #8
 80138cc:	4433      	add	r3, r6
 80138ce:	4641      	mov	r1, r8
 80138d0:	6123      	str	r3, [r4, #16]
 80138d2:	f000 f97f 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 80138d6:	2800      	cmp	r0, #0
 80138d8:	d074      	beq.n	80139c4 <ucdr_serialize_double+0x134>
 80138da:	7d23      	ldrb	r3, [r4, #20]
 80138dc:	2b01      	cmp	r3, #1
 80138de:	f000 809b 	beq.w	8013a18 <ucdr_serialize_double+0x188>
 80138e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80138e6:	702b      	strb	r3, [r5, #0]
 80138e8:	2e00      	cmp	r6, #0
 80138ea:	d078      	beq.n	80139de <ucdr_serialize_double+0x14e>
 80138ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80138f0:	2e01      	cmp	r6, #1
 80138f2:	706b      	strb	r3, [r5, #1]
 80138f4:	d077      	beq.n	80139e6 <ucdr_serialize_double+0x156>
 80138f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80138fa:	2e02      	cmp	r6, #2
 80138fc:	70ab      	strb	r3, [r5, #2]
 80138fe:	d076      	beq.n	80139ee <ucdr_serialize_double+0x15e>
 8013900:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013904:	2e03      	cmp	r6, #3
 8013906:	70eb      	strb	r3, [r5, #3]
 8013908:	d075      	beq.n	80139f6 <ucdr_serialize_double+0x166>
 801390a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801390e:	2e04      	cmp	r6, #4
 8013910:	712b      	strb	r3, [r5, #4]
 8013912:	d074      	beq.n	80139fe <ucdr_serialize_double+0x16e>
 8013914:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013918:	2e05      	cmp	r6, #5
 801391a:	716b      	strb	r3, [r5, #5]
 801391c:	d073      	beq.n	8013a06 <ucdr_serialize_double+0x176>
 801391e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013922:	2e06      	cmp	r6, #6
 8013924:	71ab      	strb	r3, [r5, #6]
 8013926:	d072      	beq.n	8013a0e <ucdr_serialize_double+0x17e>
 8013928:	f89d 3000 	ldrb.w	r3, [sp]
 801392c:	71eb      	strb	r3, [r5, #7]
 801392e:	6923      	ldr	r3, [r4, #16]
 8013930:	2108      	movs	r1, #8
 8013932:	68a2      	ldr	r2, [r4, #8]
 8013934:	3308      	adds	r3, #8
 8013936:	7da0      	ldrb	r0, [r4, #22]
 8013938:	4442      	add	r2, r8
 801393a:	7561      	strb	r1, [r4, #21]
 801393c:	1b9e      	subs	r6, r3, r6
 801393e:	f080 0001 	eor.w	r0, r0, #1
 8013942:	60a2      	str	r2, [r4, #8]
 8013944:	6126      	str	r6, [r4, #16]
 8013946:	b002      	add	sp, #8
 8013948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801394c:	2108      	movs	r1, #8
 801394e:	4620      	mov	r0, r4
 8013950:	f000 f940 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8013954:	b350      	cbz	r0, 80139ac <ucdr_serialize_double+0x11c>
 8013956:	7d23      	ldrb	r3, [r4, #20]
 8013958:	2b01      	cmp	r3, #1
 801395a:	d02d      	beq.n	80139b8 <ucdr_serialize_double+0x128>
 801395c:	68a3      	ldr	r3, [r4, #8]
 801395e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013962:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013966:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801396a:	7018      	strb	r0, [r3, #0]
 801396c:	68a3      	ldr	r3, [r4, #8]
 801396e:	705a      	strb	r2, [r3, #1]
 8013970:	68a3      	ldr	r3, [r4, #8]
 8013972:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013976:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801397a:	7099      	strb	r1, [r3, #2]
 801397c:	68a3      	ldr	r3, [r4, #8]
 801397e:	70da      	strb	r2, [r3, #3]
 8013980:	68a3      	ldr	r3, [r4, #8]
 8013982:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013986:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801398a:	7118      	strb	r0, [r3, #4]
 801398c:	68a3      	ldr	r3, [r4, #8]
 801398e:	715a      	strb	r2, [r3, #5]
 8013990:	68a3      	ldr	r3, [r4, #8]
 8013992:	f89d 2000 	ldrb.w	r2, [sp]
 8013996:	7199      	strb	r1, [r3, #6]
 8013998:	68a3      	ldr	r3, [r4, #8]
 801399a:	71da      	strb	r2, [r3, #7]
 801399c:	2108      	movs	r1, #8
 801399e:	68a2      	ldr	r2, [r4, #8]
 80139a0:	6923      	ldr	r3, [r4, #16]
 80139a2:	440a      	add	r2, r1
 80139a4:	7561      	strb	r1, [r4, #21]
 80139a6:	440b      	add	r3, r1
 80139a8:	60a2      	str	r2, [r4, #8]
 80139aa:	6123      	str	r3, [r4, #16]
 80139ac:	7da0      	ldrb	r0, [r4, #22]
 80139ae:	f080 0001 	eor.w	r0, r0, #1
 80139b2:	b002      	add	sp, #8
 80139b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139b8:	466b      	mov	r3, sp
 80139ba:	68a2      	ldr	r2, [r4, #8]
 80139bc:	cb03      	ldmia	r3!, {r0, r1}
 80139be:	6010      	str	r0, [r2, #0]
 80139c0:	6051      	str	r1, [r2, #4]
 80139c2:	e7eb      	b.n	801399c <ucdr_serialize_double+0x10c>
 80139c4:	68a2      	ldr	r2, [r4, #8]
 80139c6:	6923      	ldr	r3, [r4, #16]
 80139c8:	7da0      	ldrb	r0, [r4, #22]
 80139ca:	1b92      	subs	r2, r2, r6
 80139cc:	1b9b      	subs	r3, r3, r6
 80139ce:	7567      	strb	r7, [r4, #21]
 80139d0:	f080 0001 	eor.w	r0, r0, #1
 80139d4:	60a2      	str	r2, [r4, #8]
 80139d6:	6123      	str	r3, [r4, #16]
 80139d8:	b002      	add	sp, #8
 80139da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139de:	68a3      	ldr	r3, [r4, #8]
 80139e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80139e4:	701a      	strb	r2, [r3, #0]
 80139e6:	68a3      	ldr	r3, [r4, #8]
 80139e8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80139ec:	701a      	strb	r2, [r3, #0]
 80139ee:	68a3      	ldr	r3, [r4, #8]
 80139f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80139f4:	701a      	strb	r2, [r3, #0]
 80139f6:	68a3      	ldr	r3, [r4, #8]
 80139f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80139fc:	701a      	strb	r2, [r3, #0]
 80139fe:	68a3      	ldr	r3, [r4, #8]
 8013a00:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013a04:	701a      	strb	r2, [r3, #0]
 8013a06:	68a3      	ldr	r3, [r4, #8]
 8013a08:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013a0c:	701a      	strb	r2, [r3, #0]
 8013a0e:	68a3      	ldr	r3, [r4, #8]
 8013a10:	f89d 2000 	ldrb.w	r2, [sp]
 8013a14:	701a      	strb	r2, [r3, #0]
 8013a16:	e78a      	b.n	801392e <ucdr_serialize_double+0x9e>
 8013a18:	4628      	mov	r0, r5
 8013a1a:	466d      	mov	r5, sp
 8013a1c:	4632      	mov	r2, r6
 8013a1e:	4629      	mov	r1, r5
 8013a20:	f00d fbeb 	bl	80211fa <memcpy>
 8013a24:	4642      	mov	r2, r8
 8013a26:	19a9      	adds	r1, r5, r6
 8013a28:	68a0      	ldr	r0, [r4, #8]
 8013a2a:	f00d fbe6 	bl	80211fa <memcpy>
 8013a2e:	e77e      	b.n	801392e <ucdr_serialize_double+0x9e>

08013a30 <ucdr_deserialize_double>:
 8013a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a34:	4604      	mov	r4, r0
 8013a36:	460d      	mov	r5, r1
 8013a38:	2108      	movs	r1, #8
 8013a3a:	f000 f91f 	bl	8013c7c <ucdr_buffer_alignment>
 8013a3e:	4601      	mov	r1, r0
 8013a40:	4620      	mov	r0, r4
 8013a42:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013a46:	f000 f961 	bl	8013d0c <ucdr_advance_buffer>
 8013a4a:	2108      	movs	r1, #8
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f000 f8b5 	bl	8013bbc <ucdr_check_buffer_available_for>
 8013a52:	2800      	cmp	r0, #0
 8013a54:	d151      	bne.n	8013afa <ucdr_deserialize_double+0xca>
 8013a56:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013a5a:	42be      	cmp	r6, r7
 8013a5c:	d948      	bls.n	8013af0 <ucdr_deserialize_double+0xc0>
 8013a5e:	6923      	ldr	r3, [r4, #16]
 8013a60:	4620      	mov	r0, r4
 8013a62:	60a6      	str	r6, [r4, #8]
 8013a64:	1bf6      	subs	r6, r6, r7
 8013a66:	4433      	add	r3, r6
 8013a68:	f1c6 0908 	rsb	r9, r6, #8
 8013a6c:	6123      	str	r3, [r4, #16]
 8013a6e:	4649      	mov	r1, r9
 8013a70:	f000 f8b0 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8013a74:	2800      	cmp	r0, #0
 8013a76:	d06d      	beq.n	8013b54 <ucdr_deserialize_double+0x124>
 8013a78:	7d23      	ldrb	r3, [r4, #20]
 8013a7a:	2b01      	cmp	r3, #1
 8013a7c:	f000 8093 	beq.w	8013ba6 <ucdr_deserialize_double+0x176>
 8013a80:	79fb      	ldrb	r3, [r7, #7]
 8013a82:	702b      	strb	r3, [r5, #0]
 8013a84:	2e00      	cmp	r6, #0
 8013a86:	d072      	beq.n	8013b6e <ucdr_deserialize_double+0x13e>
 8013a88:	79bb      	ldrb	r3, [r7, #6]
 8013a8a:	2e01      	cmp	r6, #1
 8013a8c:	706b      	strb	r3, [r5, #1]
 8013a8e:	f105 0302 	add.w	r3, r5, #2
 8013a92:	d070      	beq.n	8013b76 <ucdr_deserialize_double+0x146>
 8013a94:	797b      	ldrb	r3, [r7, #5]
 8013a96:	2e02      	cmp	r6, #2
 8013a98:	70ab      	strb	r3, [r5, #2]
 8013a9a:	f105 0303 	add.w	r3, r5, #3
 8013a9e:	d06e      	beq.n	8013b7e <ucdr_deserialize_double+0x14e>
 8013aa0:	793b      	ldrb	r3, [r7, #4]
 8013aa2:	2e03      	cmp	r6, #3
 8013aa4:	70eb      	strb	r3, [r5, #3]
 8013aa6:	f105 0304 	add.w	r3, r5, #4
 8013aaa:	d06c      	beq.n	8013b86 <ucdr_deserialize_double+0x156>
 8013aac:	78fb      	ldrb	r3, [r7, #3]
 8013aae:	2e04      	cmp	r6, #4
 8013ab0:	712b      	strb	r3, [r5, #4]
 8013ab2:	f105 0305 	add.w	r3, r5, #5
 8013ab6:	d06a      	beq.n	8013b8e <ucdr_deserialize_double+0x15e>
 8013ab8:	78bb      	ldrb	r3, [r7, #2]
 8013aba:	2e05      	cmp	r6, #5
 8013abc:	716b      	strb	r3, [r5, #5]
 8013abe:	f105 0306 	add.w	r3, r5, #6
 8013ac2:	d068      	beq.n	8013b96 <ucdr_deserialize_double+0x166>
 8013ac4:	787b      	ldrb	r3, [r7, #1]
 8013ac6:	2e06      	cmp	r6, #6
 8013ac8:	71ab      	strb	r3, [r5, #6]
 8013aca:	f105 0307 	add.w	r3, r5, #7
 8013ace:	d066      	beq.n	8013b9e <ucdr_deserialize_double+0x16e>
 8013ad0:	783b      	ldrb	r3, [r7, #0]
 8013ad2:	71eb      	strb	r3, [r5, #7]
 8013ad4:	6923      	ldr	r3, [r4, #16]
 8013ad6:	2108      	movs	r1, #8
 8013ad8:	68a2      	ldr	r2, [r4, #8]
 8013ada:	3308      	adds	r3, #8
 8013adc:	7da0      	ldrb	r0, [r4, #22]
 8013ade:	444a      	add	r2, r9
 8013ae0:	7561      	strb	r1, [r4, #21]
 8013ae2:	1b9e      	subs	r6, r3, r6
 8013ae4:	f080 0001 	eor.w	r0, r0, #1
 8013ae8:	60a2      	str	r2, [r4, #8]
 8013aea:	6126      	str	r6, [r4, #16]
 8013aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013af0:	2108      	movs	r1, #8
 8013af2:	4620      	mov	r0, r4
 8013af4:	f000 f86e 	bl	8013bd4 <ucdr_check_final_buffer_behavior>
 8013af8:	b310      	cbz	r0, 8013b40 <ucdr_deserialize_double+0x110>
 8013afa:	7d23      	ldrb	r3, [r4, #20]
 8013afc:	2b01      	cmp	r3, #1
 8013afe:	68a3      	ldr	r3, [r4, #8]
 8013b00:	d023      	beq.n	8013b4a <ucdr_deserialize_double+0x11a>
 8013b02:	79db      	ldrb	r3, [r3, #7]
 8013b04:	702b      	strb	r3, [r5, #0]
 8013b06:	68a3      	ldr	r3, [r4, #8]
 8013b08:	799b      	ldrb	r3, [r3, #6]
 8013b0a:	706b      	strb	r3, [r5, #1]
 8013b0c:	68a3      	ldr	r3, [r4, #8]
 8013b0e:	795b      	ldrb	r3, [r3, #5]
 8013b10:	70ab      	strb	r3, [r5, #2]
 8013b12:	68a3      	ldr	r3, [r4, #8]
 8013b14:	791b      	ldrb	r3, [r3, #4]
 8013b16:	70eb      	strb	r3, [r5, #3]
 8013b18:	68a3      	ldr	r3, [r4, #8]
 8013b1a:	78db      	ldrb	r3, [r3, #3]
 8013b1c:	712b      	strb	r3, [r5, #4]
 8013b1e:	68a3      	ldr	r3, [r4, #8]
 8013b20:	789b      	ldrb	r3, [r3, #2]
 8013b22:	716b      	strb	r3, [r5, #5]
 8013b24:	68a3      	ldr	r3, [r4, #8]
 8013b26:	785b      	ldrb	r3, [r3, #1]
 8013b28:	71ab      	strb	r3, [r5, #6]
 8013b2a:	68a3      	ldr	r3, [r4, #8]
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	71eb      	strb	r3, [r5, #7]
 8013b30:	2108      	movs	r1, #8
 8013b32:	68a2      	ldr	r2, [r4, #8]
 8013b34:	6923      	ldr	r3, [r4, #16]
 8013b36:	440a      	add	r2, r1
 8013b38:	7561      	strb	r1, [r4, #21]
 8013b3a:	440b      	add	r3, r1
 8013b3c:	60a2      	str	r2, [r4, #8]
 8013b3e:	6123      	str	r3, [r4, #16]
 8013b40:	7da0      	ldrb	r0, [r4, #22]
 8013b42:	f080 0001 	eor.w	r0, r0, #1
 8013b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b4a:	681a      	ldr	r2, [r3, #0]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	602a      	str	r2, [r5, #0]
 8013b50:	606b      	str	r3, [r5, #4]
 8013b52:	e7ed      	b.n	8013b30 <ucdr_deserialize_double+0x100>
 8013b54:	68a2      	ldr	r2, [r4, #8]
 8013b56:	6923      	ldr	r3, [r4, #16]
 8013b58:	1b92      	subs	r2, r2, r6
 8013b5a:	7da0      	ldrb	r0, [r4, #22]
 8013b5c:	1b9b      	subs	r3, r3, r6
 8013b5e:	f884 8015 	strb.w	r8, [r4, #21]
 8013b62:	f080 0001 	eor.w	r0, r0, #1
 8013b66:	60a2      	str	r2, [r4, #8]
 8013b68:	6123      	str	r3, [r4, #16]
 8013b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b6e:	68a3      	ldr	r3, [r4, #8]
 8013b70:	799b      	ldrb	r3, [r3, #6]
 8013b72:	706b      	strb	r3, [r5, #1]
 8013b74:	1cab      	adds	r3, r5, #2
 8013b76:	68a2      	ldr	r2, [r4, #8]
 8013b78:	7952      	ldrb	r2, [r2, #5]
 8013b7a:	f803 2b01 	strb.w	r2, [r3], #1
 8013b7e:	68a2      	ldr	r2, [r4, #8]
 8013b80:	7912      	ldrb	r2, [r2, #4]
 8013b82:	f803 2b01 	strb.w	r2, [r3], #1
 8013b86:	68a2      	ldr	r2, [r4, #8]
 8013b88:	78d2      	ldrb	r2, [r2, #3]
 8013b8a:	f803 2b01 	strb.w	r2, [r3], #1
 8013b8e:	68a2      	ldr	r2, [r4, #8]
 8013b90:	7892      	ldrb	r2, [r2, #2]
 8013b92:	f803 2b01 	strb.w	r2, [r3], #1
 8013b96:	68a2      	ldr	r2, [r4, #8]
 8013b98:	7852      	ldrb	r2, [r2, #1]
 8013b9a:	f803 2b01 	strb.w	r2, [r3], #1
 8013b9e:	68a2      	ldr	r2, [r4, #8]
 8013ba0:	7812      	ldrb	r2, [r2, #0]
 8013ba2:	701a      	strb	r2, [r3, #0]
 8013ba4:	e796      	b.n	8013ad4 <ucdr_deserialize_double+0xa4>
 8013ba6:	4639      	mov	r1, r7
 8013ba8:	4632      	mov	r2, r6
 8013baa:	4628      	mov	r0, r5
 8013bac:	f00d fb25 	bl	80211fa <memcpy>
 8013bb0:	464a      	mov	r2, r9
 8013bb2:	19a8      	adds	r0, r5, r6
 8013bb4:	68a1      	ldr	r1, [r4, #8]
 8013bb6:	f00d fb20 	bl	80211fa <memcpy>
 8013bba:	e78b      	b.n	8013ad4 <ucdr_deserialize_double+0xa4>

08013bbc <ucdr_check_buffer_available_for>:
 8013bbc:	7d83      	ldrb	r3, [r0, #22]
 8013bbe:	b93b      	cbnz	r3, 8013bd0 <ucdr_check_buffer_available_for+0x14>
 8013bc0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8013bc4:	4419      	add	r1, r3
 8013bc6:	4288      	cmp	r0, r1
 8013bc8:	bf34      	ite	cc
 8013bca:	2000      	movcc	r0, #0
 8013bcc:	2001      	movcs	r0, #1
 8013bce:	4770      	bx	lr
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	4770      	bx	lr

08013bd4 <ucdr_check_final_buffer_behavior>:
 8013bd4:	7d83      	ldrb	r3, [r0, #22]
 8013bd6:	b943      	cbnz	r3, 8013bea <ucdr_check_final_buffer_behavior+0x16>
 8013bd8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8013bdc:	b510      	push	{r4, lr}
 8013bde:	4291      	cmp	r1, r2
 8013be0:	4604      	mov	r4, r0
 8013be2:	d205      	bcs.n	8013bf0 <ucdr_check_final_buffer_behavior+0x1c>
 8013be4:	2301      	movs	r3, #1
 8013be6:	4618      	mov	r0, r3
 8013be8:	bd10      	pop	{r4, pc}
 8013bea:	2300      	movs	r3, #0
 8013bec:	4618      	mov	r0, r3
 8013bee:	4770      	bx	lr
 8013bf0:	6982      	ldr	r2, [r0, #24]
 8013bf2:	b13a      	cbz	r2, 8013c04 <ucdr_check_final_buffer_behavior+0x30>
 8013bf4:	69c1      	ldr	r1, [r0, #28]
 8013bf6:	4790      	blx	r2
 8013bf8:	f080 0301 	eor.w	r3, r0, #1
 8013bfc:	75a0      	strb	r0, [r4, #22]
 8013bfe:	b2db      	uxtb	r3, r3
 8013c00:	4618      	mov	r0, r3
 8013c02:	bd10      	pop	{r4, pc}
 8013c04:	2001      	movs	r0, #1
 8013c06:	75a0      	strb	r0, [r4, #22]
 8013c08:	e7fa      	b.n	8013c00 <ucdr_check_final_buffer_behavior+0x2c>
 8013c0a:	bf00      	nop

08013c0c <ucdr_set_on_full_buffer_callback>:
 8013c0c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8013c10:	4770      	bx	lr
 8013c12:	bf00      	nop

08013c14 <ucdr_init_buffer_origin_offset_endian>:
 8013c14:	b410      	push	{r4}
 8013c16:	9c01      	ldr	r4, [sp, #4]
 8013c18:	440a      	add	r2, r1
 8013c1a:	6001      	str	r1, [r0, #0]
 8013c1c:	6042      	str	r2, [r0, #4]
 8013c1e:	190a      	adds	r2, r1, r4
 8013c20:	441c      	add	r4, r3
 8013c22:	6082      	str	r2, [r0, #8]
 8013c24:	2200      	movs	r2, #0
 8013c26:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8013c2a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013c2e:	7542      	strb	r2, [r0, #21]
 8013c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c34:	7582      	strb	r2, [r0, #22]
 8013c36:	7503      	strb	r3, [r0, #20]
 8013c38:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013c3c:	4770      	bx	lr
 8013c3e:	bf00      	nop

08013c40 <ucdr_init_buffer_origin_offset>:
 8013c40:	b510      	push	{r4, lr}
 8013c42:	b082      	sub	sp, #8
 8013c44:	9c04      	ldr	r4, [sp, #16]
 8013c46:	9400      	str	r4, [sp, #0]
 8013c48:	2401      	movs	r4, #1
 8013c4a:	9401      	str	r4, [sp, #4]
 8013c4c:	f7ff ffe2 	bl	8013c14 <ucdr_init_buffer_origin_offset_endian>
 8013c50:	b002      	add	sp, #8
 8013c52:	bd10      	pop	{r4, pc}

08013c54 <ucdr_init_buffer_origin>:
 8013c54:	b510      	push	{r4, lr}
 8013c56:	2400      	movs	r4, #0
 8013c58:	b082      	sub	sp, #8
 8013c5a:	9400      	str	r4, [sp, #0]
 8013c5c:	f7ff fff0 	bl	8013c40 <ucdr_init_buffer_origin_offset>
 8013c60:	b002      	add	sp, #8
 8013c62:	bd10      	pop	{r4, pc}

08013c64 <ucdr_init_buffer>:
 8013c64:	2300      	movs	r3, #0
 8013c66:	f7ff bff5 	b.w	8013c54 <ucdr_init_buffer_origin>
 8013c6a:	bf00      	nop

08013c6c <ucdr_alignment>:
 8013c6c:	fbb0 f2f1 	udiv	r2, r0, r1
 8013c70:	fb02 0011 	mls	r0, r2, r1, r0
 8013c74:	1e4b      	subs	r3, r1, #1
 8013c76:	1a08      	subs	r0, r1, r0
 8013c78:	4018      	ands	r0, r3
 8013c7a:	4770      	bx	lr

08013c7c <ucdr_buffer_alignment>:
 8013c7c:	7d43      	ldrb	r3, [r0, #21]
 8013c7e:	428b      	cmp	r3, r1
 8013c80:	d209      	bcs.n	8013c96 <ucdr_buffer_alignment+0x1a>
 8013c82:	6903      	ldr	r3, [r0, #16]
 8013c84:	1e4a      	subs	r2, r1, #1
 8013c86:	fbb3 f0f1 	udiv	r0, r3, r1
 8013c8a:	fb01 3010 	mls	r0, r1, r0, r3
 8013c8e:	1a09      	subs	r1, r1, r0
 8013c90:	ea01 0002 	and.w	r0, r1, r2
 8013c94:	4770      	bx	lr
 8013c96:	2000      	movs	r0, #0
 8013c98:	4770      	bx	lr
 8013c9a:	bf00      	nop

08013c9c <ucdr_align_to>:
 8013c9c:	b538      	push	{r3, r4, r5, lr}
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	460d      	mov	r5, r1
 8013ca2:	f7ff ffeb 	bl	8013c7c <ucdr_buffer_alignment>
 8013ca6:	68a3      	ldr	r3, [r4, #8]
 8013ca8:	7565      	strb	r5, [r4, #21]
 8013caa:	181a      	adds	r2, r3, r0
 8013cac:	6923      	ldr	r3, [r4, #16]
 8013cae:	4418      	add	r0, r3
 8013cb0:	6863      	ldr	r3, [r4, #4]
 8013cb2:	4293      	cmp	r3, r2
 8013cb4:	6120      	str	r0, [r4, #16]
 8013cb6:	bf28      	it	cs
 8013cb8:	4613      	movcs	r3, r2
 8013cba:	60a3      	str	r3, [r4, #8]
 8013cbc:	bd38      	pop	{r3, r4, r5, pc}
 8013cbe:	bf00      	nop

08013cc0 <ucdr_buffer_length>:
 8013cc0:	6882      	ldr	r2, [r0, #8]
 8013cc2:	6800      	ldr	r0, [r0, #0]
 8013cc4:	1a10      	subs	r0, r2, r0
 8013cc6:	4770      	bx	lr

08013cc8 <ucdr_buffer_remaining>:
 8013cc8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8013ccc:	1a10      	subs	r0, r2, r0
 8013cce:	4770      	bx	lr

08013cd0 <ucdr_check_final_buffer_behavior_array>:
 8013cd0:	b538      	push	{r3, r4, r5, lr}
 8013cd2:	7d83      	ldrb	r3, [r0, #22]
 8013cd4:	b9a3      	cbnz	r3, 8013d00 <ucdr_check_final_buffer_behavior_array+0x30>
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	460d      	mov	r5, r1
 8013cda:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d300      	bcc.n	8013ce4 <ucdr_check_final_buffer_behavior_array+0x14>
 8013ce2:	b931      	cbnz	r1, 8013cf2 <ucdr_check_final_buffer_behavior_array+0x22>
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	f7ff ffef 	bl	8013cc8 <ucdr_buffer_remaining>
 8013cea:	42a8      	cmp	r0, r5
 8013cec:	bf28      	it	cs
 8013cee:	4628      	movcs	r0, r5
 8013cf0:	bd38      	pop	{r3, r4, r5, pc}
 8013cf2:	6983      	ldr	r3, [r0, #24]
 8013cf4:	b133      	cbz	r3, 8013d04 <ucdr_check_final_buffer_behavior_array+0x34>
 8013cf6:	69c1      	ldr	r1, [r0, #28]
 8013cf8:	4798      	blx	r3
 8013cfa:	75a0      	strb	r0, [r4, #22]
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	d0f1      	beq.n	8013ce4 <ucdr_check_final_buffer_behavior_array+0x14>
 8013d00:	2000      	movs	r0, #0
 8013d02:	bd38      	pop	{r3, r4, r5, pc}
 8013d04:	2301      	movs	r3, #1
 8013d06:	7583      	strb	r3, [r0, #22]
 8013d08:	e7fa      	b.n	8013d00 <ucdr_check_final_buffer_behavior_array+0x30>
 8013d0a:	bf00      	nop

08013d0c <ucdr_advance_buffer>:
 8013d0c:	b538      	push	{r3, r4, r5, lr}
 8013d0e:	4604      	mov	r4, r0
 8013d10:	460d      	mov	r5, r1
 8013d12:	f7ff ff53 	bl	8013bbc <ucdr_check_buffer_available_for>
 8013d16:	b178      	cbz	r0, 8013d38 <ucdr_advance_buffer+0x2c>
 8013d18:	6923      	ldr	r3, [r4, #16]
 8013d1a:	68a2      	ldr	r2, [r4, #8]
 8013d1c:	442b      	add	r3, r5
 8013d1e:	442a      	add	r2, r5
 8013d20:	6123      	str	r3, [r4, #16]
 8013d22:	2301      	movs	r3, #1
 8013d24:	60a2      	str	r2, [r4, #8]
 8013d26:	7563      	strb	r3, [r4, #21]
 8013d28:	bd38      	pop	{r3, r4, r5, pc}
 8013d2a:	68a2      	ldr	r2, [r4, #8]
 8013d2c:	1a2d      	subs	r5, r5, r0
 8013d2e:	6923      	ldr	r3, [r4, #16]
 8013d30:	4402      	add	r2, r0
 8013d32:	4418      	add	r0, r3
 8013d34:	60a2      	str	r2, [r4, #8]
 8013d36:	6120      	str	r0, [r4, #16]
 8013d38:	4629      	mov	r1, r5
 8013d3a:	2201      	movs	r2, #1
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	f7ff ffc7 	bl	8013cd0 <ucdr_check_final_buffer_behavior_array>
 8013d42:	2800      	cmp	r0, #0
 8013d44:	d1f1      	bne.n	8013d2a <ucdr_advance_buffer+0x1e>
 8013d46:	2301      	movs	r3, #1
 8013d48:	7563      	strb	r3, [r4, #21]
 8013d4a:	bd38      	pop	{r3, r4, r5, pc}

08013d4c <_rclc_check_for_new_data>:
 8013d4c:	2800      	cmp	r0, #0
 8013d4e:	d046      	beq.n	8013dde <_rclc_check_for_new_data+0x92>
 8013d50:	4603      	mov	r3, r0
 8013d52:	b530      	push	{r4, r5, lr}
 8013d54:	7802      	ldrb	r2, [r0, #0]
 8013d56:	b085      	sub	sp, #20
 8013d58:	2a0a      	cmp	r2, #10
 8013d5a:	d842      	bhi.n	8013de2 <_rclc_check_for_new_data+0x96>
 8013d5c:	e8df f002 	tbb	[pc, r2]
 8013d60:	14181212 	.word	0x14181212
 8013d64:	06060614 	.word	0x06060614
 8013d68:	2e1a      	.short	0x2e1a
 8013d6a:	16          	.byte	0x16
 8013d6b:	00          	.byte	0x00
 8013d6c:	6a0a      	ldr	r2, [r1, #32]
 8013d6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8013d70:	2000      	movs	r0, #0
 8013d72:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8013d76:	1a12      	subs	r2, r2, r0
 8013d78:	bf18      	it	ne
 8013d7a:	2201      	movne	r2, #1
 8013d7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8013d80:	b005      	add	sp, #20
 8013d82:	bd30      	pop	{r4, r5, pc}
 8013d84:	680a      	ldr	r2, [r1, #0]
 8013d86:	e7f2      	b.n	8013d6e <_rclc_check_for_new_data+0x22>
 8013d88:	698a      	ldr	r2, [r1, #24]
 8013d8a:	e7f0      	b.n	8013d6e <_rclc_check_for_new_data+0x22>
 8013d8c:	688a      	ldr	r2, [r1, #8]
 8013d8e:	e7ee      	b.n	8013d6e <_rclc_check_for_new_data+0x22>
 8013d90:	690a      	ldr	r2, [r1, #16]
 8013d92:	e7ec      	b.n	8013d6e <_rclc_check_for_new_data+0x22>
 8013d94:	685c      	ldr	r4, [r3, #4]
 8013d96:	4608      	mov	r0, r1
 8013d98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013d9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013da0:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 8013da4:	f104 0110 	add.w	r1, r4, #16
 8013da8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8013dac:	9500      	str	r5, [sp, #0]
 8013dae:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8013db2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8013db6:	f004 f96b 	bl	8018090 <rcl_action_client_wait_set_get_entities_ready>
 8013dba:	e7e1      	b.n	8013d80 <_rclc_check_for_new_data+0x34>
 8013dbc:	685c      	ldr	r4, [r3, #4]
 8013dbe:	4608      	mov	r0, r1
 8013dc0:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 8013dc4:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 8013dc8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8013dcc:	e9cd 2100 	strd	r2, r1, [sp]
 8013dd0:	f104 0220 	add.w	r2, r4, #32
 8013dd4:	f104 0110 	add.w	r1, r4, #16
 8013dd8:	f004 fb74 	bl	80184c4 <rcl_action_server_wait_set_get_entities_ready>
 8013ddc:	e7d0      	b.n	8013d80 <_rclc_check_for_new_data+0x34>
 8013dde:	200b      	movs	r0, #11
 8013de0:	4770      	bx	lr
 8013de2:	2001      	movs	r0, #1
 8013de4:	e7cc      	b.n	8013d80 <_rclc_check_for_new_data+0x34>
 8013de6:	bf00      	nop

08013de8 <_rclc_take_new_data>:
 8013de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dea:	b09b      	sub	sp, #108	@ 0x6c
 8013dec:	2800      	cmp	r0, #0
 8013dee:	f000 8088 	beq.w	8013f02 <_rclc_take_new_data+0x11a>
 8013df2:	7803      	ldrb	r3, [r0, #0]
 8013df4:	4604      	mov	r4, r0
 8013df6:	2b0a      	cmp	r3, #10
 8013df8:	f200 8167 	bhi.w	80140ca <_rclc_take_new_data+0x2e2>
 8013dfc:	e8df f003 	tbb	[pc, r3]
 8013e00:	44152d2d 	.word	0x44152d2d
 8013e04:	19191944 	.word	0x19191944
 8013e08:	065a      	.short	0x065a
 8013e0a:	15          	.byte	0x15
 8013e0b:	00          	.byte	0x00
 8013e0c:	6840      	ldr	r0, [r0, #4]
 8013e0e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	f040 80b2 	bne.w	8013f7c <_rclc_take_new_data+0x194>
 8013e18:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	f040 80e4 	bne.w	8013fea <_rclc_take_new_data+0x202>
 8013e22:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d16f      	bne.n	8013f0a <_rclc_take_new_data+0x122>
 8013e2a:	2500      	movs	r5, #0
 8013e2c:	4628      	mov	r0, r5
 8013e2e:	b01b      	add	sp, #108	@ 0x6c
 8013e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e32:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8013e34:	6a0b      	ldr	r3, [r1, #32]
 8013e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d0f5      	beq.n	8013e2a <_rclc_take_new_data+0x42>
 8013e3e:	6882      	ldr	r2, [r0, #8]
 8013e40:	f100 0110 	add.w	r1, r0, #16
 8013e44:	6840      	ldr	r0, [r0, #4]
 8013e46:	f002 fde1 	bl	8016a0c <rcl_take_request>
 8013e4a:	4605      	mov	r5, r0
 8013e4c:	2800      	cmp	r0, #0
 8013e4e:	d0ec      	beq.n	8013e2a <_rclc_take_new_data+0x42>
 8013e50:	f240 2359 	movw	r3, #601	@ 0x259
 8013e54:	4298      	cmp	r0, r3
 8013e56:	d013      	beq.n	8013e80 <_rclc_take_new_data+0x98>
 8013e58:	e029      	b.n	8013eae <_rclc_take_new_data+0xc6>
 8013e5a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8013e5c:	680b      	ldr	r3, [r1, #0]
 8013e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d0e1      	beq.n	8013e2a <_rclc_take_new_data+0x42>
 8013e66:	2300      	movs	r3, #0
 8013e68:	aa0a      	add	r2, sp, #40	@ 0x28
 8013e6a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8013e6e:	f002 ff11 	bl	8016c94 <rcl_take>
 8013e72:	4605      	mov	r5, r0
 8013e74:	2800      	cmp	r0, #0
 8013e76:	d0d9      	beq.n	8013e2c <_rclc_take_new_data+0x44>
 8013e78:	f240 1391 	movw	r3, #401	@ 0x191
 8013e7c:	4298      	cmp	r0, r3
 8013e7e:	d116      	bne.n	8013eae <_rclc_take_new_data+0xc6>
 8013e80:	2300      	movs	r3, #0
 8013e82:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8013e86:	e7d1      	b.n	8013e2c <_rclc_take_new_data+0x44>
 8013e88:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8013e8a:	698b      	ldr	r3, [r1, #24]
 8013e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d0ca      	beq.n	8013e2a <_rclc_take_new_data+0x42>
 8013e94:	6882      	ldr	r2, [r0, #8]
 8013e96:	f100 0110 	add.w	r1, r0, #16
 8013e9a:	6840      	ldr	r0, [r0, #4]
 8013e9c:	f001 fd9c 	bl	80159d8 <rcl_take_response>
 8013ea0:	4605      	mov	r5, r0
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	d0c1      	beq.n	8013e2a <_rclc_take_new_data+0x42>
 8013ea6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8013eaa:	4298      	cmp	r0, r3
 8013eac:	d0be      	beq.n	8013e2c <_rclc_take_new_data+0x44>
 8013eae:	f000 ff47 	bl	8014d40 <rcutils_reset_error>
 8013eb2:	e7bb      	b.n	8013e2c <_rclc_take_new_data+0x44>
 8013eb4:	6840      	ldr	r0, [r0, #4]
 8013eb6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d17d      	bne.n	8013fba <_rclc_take_new_data+0x1d2>
 8013ebe:	69c3      	ldr	r3, [r0, #28]
 8013ec0:	b11b      	cbz	r3, 8013eca <_rclc_take_new_data+0xe2>
 8013ec2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d144      	bne.n	8013f54 <_rclc_take_new_data+0x16c>
 8013eca:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	f040 80ac 	bne.w	801402c <_rclc_take_new_data+0x244>
 8013ed4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d0a6      	beq.n	8013e2a <_rclc_take_new_data+0x42>
 8013edc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8013ede:	a90a      	add	r1, sp, #40	@ 0x28
 8013ee0:	3010      	adds	r0, #16
 8013ee2:	f003 ffad 	bl	8017e40 <rcl_action_take_result_response>
 8013ee6:	4605      	mov	r5, r0
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	d1e0      	bne.n	8013eae <_rclc_take_new_data+0xc6>
 8013eec:	6860      	ldr	r0, [r4, #4]
 8013eee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013ef2:	f004 fc17 	bl	8018724 <rclc_action_find_handle_by_result_request_sequence_number>
 8013ef6:	2800      	cmp	r0, #0
 8013ef8:	d098      	beq.n	8013e2c <_rclc_take_new_data+0x44>
 8013efa:	2301      	movs	r3, #1
 8013efc:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8013f00:	e794      	b.n	8013e2c <_rclc_take_new_data+0x44>
 8013f02:	250b      	movs	r5, #11
 8013f04:	4628      	mov	r0, r5
 8013f06:	b01b      	add	sp, #108	@ 0x6c
 8013f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f0a:	ae04      	add	r6, sp, #16
 8013f0c:	3010      	adds	r0, #16
 8013f0e:	aa0a      	add	r2, sp, #40	@ 0x28
 8013f10:	4631      	mov	r1, r6
 8013f12:	f004 fa0b 	bl	801832c <rcl_action_take_cancel_request>
 8013f16:	4605      	mov	r5, r0
 8013f18:	2800      	cmp	r0, #0
 8013f1a:	d1c8      	bne.n	8013eae <_rclc_take_new_data+0xc6>
 8013f1c:	a90a      	add	r1, sp, #40	@ 0x28
 8013f1e:	6860      	ldr	r0, [r4, #4]
 8013f20:	f004 fbc0 	bl	80186a4 <rclc_action_find_goal_handle_by_uuid>
 8013f24:	4607      	mov	r7, r0
 8013f26:	2800      	cmp	r0, #0
 8013f28:	f000 80bb 	beq.w	80140a2 <_rclc_take_new_data+0x2ba>
 8013f2c:	2101      	movs	r1, #1
 8013f2e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8013f32:	f004 fb41 	bl	80185b8 <rcl_action_transition_goal_state>
 8013f36:	2803      	cmp	r0, #3
 8013f38:	4684      	mov	ip, r0
 8013f3a:	f040 80a7 	bne.w	801408c <_rclc_take_new_data+0x2a4>
 8013f3e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8013f42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f46:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013f4a:	e884 0003 	stmia.w	r4, {r0, r1}
 8013f4e:	f887 c008 	strb.w	ip, [r7, #8]
 8013f52:	e76b      	b.n	8013e2c <_rclc_take_new_data+0x44>
 8013f54:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8013f56:	3010      	adds	r0, #16
 8013f58:	f003 fff2 	bl	8017f40 <rcl_action_take_feedback>
 8013f5c:	4605      	mov	r5, r0
 8013f5e:	2800      	cmp	r0, #0
 8013f60:	d1a5      	bne.n	8013eae <_rclc_take_new_data+0xc6>
 8013f62:	6860      	ldr	r0, [r4, #4]
 8013f64:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8013f66:	f004 fb9d 	bl	80186a4 <rclc_action_find_goal_handle_by_uuid>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	2800      	cmp	r0, #0
 8013f6e:	f000 80a3 	beq.w	80140b8 <_rclc_take_new_data+0x2d0>
 8013f72:	2201      	movs	r2, #1
 8013f74:	6860      	ldr	r0, [r4, #4]
 8013f76:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8013f7a:	e7a6      	b.n	8013eca <_rclc_take_new_data+0xe2>
 8013f7c:	f004 fb6c 	bl	8018658 <rclc_action_take_goal_handle>
 8013f80:	4606      	mov	r6, r0
 8013f82:	6860      	ldr	r0, [r4, #4]
 8013f84:	2e00      	cmp	r6, #0
 8013f86:	f43f af47 	beq.w	8013e18 <_rclc_take_new_data+0x30>
 8013f8a:	6070      	str	r0, [r6, #4]
 8013f8c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8013f90:	69f2      	ldr	r2, [r6, #28]
 8013f92:	3010      	adds	r0, #16
 8013f94:	f004 f912 	bl	80181bc <rcl_action_take_goal_request>
 8013f98:	4605      	mov	r5, r0
 8013f9a:	2800      	cmp	r0, #0
 8013f9c:	f040 808e 	bne.w	80140bc <_rclc_take_new_data+0x2d4>
 8013fa0:	69f7      	ldr	r7, [r6, #28]
 8013fa2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013fa4:	7235      	strb	r5, [r6, #8]
 8013fa6:	f8c6 0009 	str.w	r0, [r6, #9]
 8013faa:	f8c6 100d 	str.w	r1, [r6, #13]
 8013fae:	6860      	ldr	r0, [r4, #4]
 8013fb0:	f8c6 2011 	str.w	r2, [r6, #17]
 8013fb4:	f8c6 3015 	str.w	r3, [r6, #21]
 8013fb8:	e72e      	b.n	8013e18 <_rclc_take_new_data+0x30>
 8013fba:	aa04      	add	r2, sp, #16
 8013fbc:	a90a      	add	r1, sp, #40	@ 0x28
 8013fbe:	3010      	adds	r0, #16
 8013fc0:	f003 fec6 	bl	8017d50 <rcl_action_take_goal_response>
 8013fc4:	4605      	mov	r5, r0
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	f47f af71 	bne.w	8013eae <_rclc_take_new_data+0xc6>
 8013fcc:	6860      	ldr	r0, [r4, #4]
 8013fce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013fd2:	f004 fb95 	bl	8018700 <rclc_action_find_handle_by_goal_request_sequence_number>
 8013fd6:	b130      	cbz	r0, 8013fe6 <_rclc_take_new_data+0x1fe>
 8013fd8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013fdc:	2201      	movs	r2, #1
 8013fde:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8013fe2:	f880 2020 	strb.w	r2, [r0, #32]
 8013fe6:	6860      	ldr	r0, [r4, #4]
 8013fe8:	e769      	b.n	8013ebe <_rclc_take_new_data+0xd6>
 8013fea:	3010      	adds	r0, #16
 8013fec:	aa04      	add	r2, sp, #16
 8013fee:	a90a      	add	r1, sp, #40	@ 0x28
 8013ff0:	f004 f95c 	bl	80182ac <rcl_action_take_result_request>
 8013ff4:	4605      	mov	r5, r0
 8013ff6:	2800      	cmp	r0, #0
 8013ff8:	f47f af59 	bne.w	8013eae <_rclc_take_new_data+0xc6>
 8013ffc:	a904      	add	r1, sp, #16
 8013ffe:	6860      	ldr	r0, [r4, #4]
 8014000:	f004 fb50 	bl	80186a4 <rclc_action_find_goal_handle_by_uuid>
 8014004:	4607      	mov	r7, r0
 8014006:	b160      	cbz	r0, 8014022 <_rclc_take_new_data+0x23a>
 8014008:	ad0a      	add	r5, sp, #40	@ 0x28
 801400a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 801400e:	f04f 0c02 	mov.w	ip, #2
 8014012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014014:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014016:	e895 0003 	ldmia.w	r5, {r0, r1}
 801401a:	e886 0003 	stmia.w	r6, {r0, r1}
 801401e:	f887 c008 	strb.w	ip, [r7, #8]
 8014022:	6860      	ldr	r0, [r4, #4]
 8014024:	2300      	movs	r3, #0
 8014026:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 801402a:	e6fa      	b.n	8013e22 <_rclc_take_new_data+0x3a>
 801402c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8014030:	a90a      	add	r1, sp, #40	@ 0x28
 8014032:	3010      	adds	r0, #16
 8014034:	f003 ff44 	bl	8017ec0 <rcl_action_take_cancel_response>
 8014038:	4605      	mov	r5, r0
 801403a:	2800      	cmp	r0, #0
 801403c:	f47f af37 	bne.w	8013eae <_rclc_take_new_data+0xc6>
 8014040:	6860      	ldr	r0, [r4, #4]
 8014042:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014046:	f004 fb7f 	bl	8018748 <rclc_action_find_handle_by_cancel_request_sequence_number>
 801404a:	4606      	mov	r6, r0
 801404c:	6860      	ldr	r0, [r4, #4]
 801404e:	2e00      	cmp	r6, #0
 8014050:	f43f af40 	beq.w	8013ed4 <_rclc_take_new_data+0xec>
 8014054:	2701      	movs	r7, #1
 8014056:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8014058:	84b7      	strh	r7, [r6, #36]	@ 0x24
 801405a:	2b00      	cmp	r3, #0
 801405c:	f43f af3a 	beq.w	8013ed4 <_rclc_take_new_data+0xec>
 8014060:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014062:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8014066:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801406a:	f004 fb1b 	bl	80186a4 <rclc_action_find_goal_handle_by_uuid>
 801406e:	b138      	cbz	r0, 8014080 <_rclc_take_new_data+0x298>
 8014070:	6860      	ldr	r0, [r4, #4]
 8014072:	3501      	adds	r5, #1
 8014074:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8014078:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801407a:	42ab      	cmp	r3, r5
 801407c:	d8f0      	bhi.n	8014060 <_rclc_take_new_data+0x278>
 801407e:	e729      	b.n	8013ed4 <_rclc_take_new_data+0xec>
 8014080:	6860      	ldr	r0, [r4, #4]
 8014082:	3501      	adds	r5, #1
 8014084:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8014086:	42ab      	cmp	r3, r5
 8014088:	d8ea      	bhi.n	8014060 <_rclc_take_new_data+0x278>
 801408a:	e723      	b.n	8013ed4 <_rclc_take_new_data+0xec>
 801408c:	ab06      	add	r3, sp, #24
 801408e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014090:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014094:	2103      	movs	r1, #3
 8014096:	6860      	ldr	r0, [r4, #4]
 8014098:	e896 000c 	ldmia.w	r6, {r2, r3}
 801409c:	f004 fbc8 	bl	8018830 <rclc_action_server_goal_cancel_reject>
 80140a0:	e6c4      	b.n	8013e2c <_rclc_take_new_data+0x44>
 80140a2:	ab06      	add	r3, sp, #24
 80140a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80140a6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80140aa:	2102      	movs	r1, #2
 80140ac:	6860      	ldr	r0, [r4, #4]
 80140ae:	e896 000c 	ldmia.w	r6, {r2, r3}
 80140b2:	f004 fbbd 	bl	8018830 <rclc_action_server_goal_cancel_reject>
 80140b6:	e6b9      	b.n	8013e2c <_rclc_take_new_data+0x44>
 80140b8:	6860      	ldr	r0, [r4, #4]
 80140ba:	e706      	b.n	8013eca <_rclc_take_new_data+0xe2>
 80140bc:	4631      	mov	r1, r6
 80140be:	6860      	ldr	r0, [r4, #4]
 80140c0:	f004 fada 	bl	8018678 <rclc_action_remove_used_goal_handle>
 80140c4:	f000 fe3c 	bl	8014d40 <rcutils_reset_error>
 80140c8:	e6b0      	b.n	8013e2c <_rclc_take_new_data+0x44>
 80140ca:	2501      	movs	r5, #1
 80140cc:	e6ae      	b.n	8013e2c <_rclc_take_new_data+0x44>
 80140ce:	bf00      	nop

080140d0 <_rclc_execute.part.0>:
 80140d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140d2:	7803      	ldrb	r3, [r0, #0]
 80140d4:	b085      	sub	sp, #20
 80140d6:	4604      	mov	r4, r0
 80140d8:	2b0a      	cmp	r3, #10
 80140da:	f200 8139 	bhi.w	8014350 <_rclc_execute.part.0+0x280>
 80140de:	e8df f003 	tbb	[pc, r3]
 80140e2:	4268      	.short	0x4268
 80140e4:	06a75b4d 	.word	0x06a75b4d
 80140e8:	721d0606 	.word	0x721d0606
 80140ec:	62          	.byte	0x62
 80140ed:	00          	.byte	0x00
 80140ee:	2b06      	cmp	r3, #6
 80140f0:	f000 8126 	beq.w	8014340 <_rclc_execute.part.0+0x270>
 80140f4:	2b07      	cmp	r3, #7
 80140f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80140f8:	f040 811c 	bne.w	8014334 <_rclc_execute.part.0+0x264>
 80140fc:	f104 0510 	add.w	r5, r4, #16
 8014100:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8014104:	6880      	ldr	r0, [r0, #8]
 8014106:	4798      	blx	r3
 8014108:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801410a:	4629      	mov	r1, r5
 801410c:	6860      	ldr	r0, [r4, #4]
 801410e:	f002 fcbd 	bl	8016a8c <rcl_send_response>
 8014112:	4604      	mov	r4, r0
 8014114:	b378      	cbz	r0, 8014176 <_rclc_execute.part.0+0xa6>
 8014116:	f000 fe13 	bl	8014d40 <rcutils_reset_error>
 801411a:	e02c      	b.n	8014176 <_rclc_execute.part.0+0xa6>
 801411c:	6840      	ldr	r0, [r0, #4]
 801411e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8014122:	2b00      	cmp	r3, #0
 8014124:	f000 808e 	beq.w	8014244 <_rclc_execute.part.0+0x174>
 8014128:	2600      	movs	r6, #0
 801412a:	2701      	movs	r7, #1
 801412c:	e004      	b.n	8014138 <_rclc_execute.part.0+0x68>
 801412e:	f004 fa6d 	bl	801860c <rclc_action_send_result_request>
 8014132:	b998      	cbnz	r0, 801415c <_rclc_execute.part.0+0x8c>
 8014134:	722f      	strb	r7, [r5, #8]
 8014136:	6860      	ldr	r0, [r4, #4]
 8014138:	f004 fb18 	bl	801876c <rclc_action_find_first_handle_with_goal_response>
 801413c:	4605      	mov	r5, r0
 801413e:	2800      	cmp	r0, #0
 8014140:	d07f      	beq.n	8014242 <_rclc_execute.part.0+0x172>
 8014142:	6863      	ldr	r3, [r4, #4]
 8014144:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014146:	699b      	ldr	r3, [r3, #24]
 8014148:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 801414c:	f885 6020 	strb.w	r6, [r5, #32]
 8014150:	4798      	blx	r3
 8014152:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8014156:	4628      	mov	r0, r5
 8014158:	2b00      	cmp	r3, #0
 801415a:	d1e8      	bne.n	801412e <_rclc_execute.part.0+0x5e>
 801415c:	6860      	ldr	r0, [r4, #4]
 801415e:	4629      	mov	r1, r5
 8014160:	f004 fa8a 	bl	8018678 <rclc_action_remove_used_goal_handle>
 8014164:	e7e7      	b.n	8014136 <_rclc_execute.part.0+0x66>
 8014166:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801416a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 801416e:	b100      	cbz	r0, 8014172 <_rclc_execute.part.0+0xa2>
 8014170:	68a0      	ldr	r0, [r4, #8]
 8014172:	2400      	movs	r4, #0
 8014174:	4798      	blx	r3
 8014176:	4620      	mov	r0, r4
 8014178:	b005      	add	sp, #20
 801417a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801417c:	6840      	ldr	r0, [r0, #4]
 801417e:	f002 fe9d 	bl	8016ebc <rcl_timer_call>
 8014182:	f240 3321 	movw	r3, #801	@ 0x321
 8014186:	4604      	mov	r4, r0
 8014188:	4298      	cmp	r0, r3
 801418a:	d001      	beq.n	8014190 <_rclc_execute.part.0+0xc0>
 801418c:	2800      	cmp	r0, #0
 801418e:	d1c2      	bne.n	8014116 <_rclc_execute.part.0+0x46>
 8014190:	2400      	movs	r4, #0
 8014192:	4620      	mov	r0, r4
 8014194:	b005      	add	sp, #20
 8014196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014198:	2400      	movs	r4, #0
 801419a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801419c:	6880      	ldr	r0, [r0, #8]
 801419e:	4798      	blx	r3
 80141a0:	4620      	mov	r0, r4
 80141a2:	b005      	add	sp, #20
 80141a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141a6:	2400      	movs	r4, #0
 80141a8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80141aa:	4798      	blx	r3
 80141ac:	4620      	mov	r0, r4
 80141ae:	b005      	add	sp, #20
 80141b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141b2:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80141b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80141b8:	b100      	cbz	r0, 80141bc <_rclc_execute.part.0+0xec>
 80141ba:	68a0      	ldr	r0, [r4, #8]
 80141bc:	2400      	movs	r4, #0
 80141be:	4798      	blx	r3
 80141c0:	4620      	mov	r0, r4
 80141c2:	b005      	add	sp, #20
 80141c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141c6:	6840      	ldr	r0, [r0, #4]
 80141c8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80141cc:	bb3b      	cbnz	r3, 801421e <_rclc_execute.part.0+0x14e>
 80141ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d07d      	beq.n	80142d2 <_rclc_execute.part.0+0x202>
 80141d6:	f640 0634 	movw	r6, #2100	@ 0x834
 80141da:	2701      	movs	r7, #1
 80141dc:	e007      	b.n	80141ee <_rclc_execute.part.0+0x11e>
 80141de:	4628      	mov	r0, r5
 80141e0:	f004 fadc 	bl	801879c <rclc_action_server_response_goal_request>
 80141e4:	4629      	mov	r1, r5
 80141e6:	6860      	ldr	r0, [r4, #4]
 80141e8:	f004 fa46 	bl	8018678 <rclc_action_remove_used_goal_handle>
 80141ec:	6860      	ldr	r0, [r4, #4]
 80141ee:	2100      	movs	r1, #0
 80141f0:	f004 fa6e 	bl	80186d0 <rclc_action_find_first_handle_by_status>
 80141f4:	4605      	mov	r5, r0
 80141f6:	2800      	cmp	r0, #0
 80141f8:	d068      	beq.n	80142cc <_rclc_execute.part.0+0x1fc>
 80141fa:	6863      	ldr	r3, [r4, #4]
 80141fc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80141fe:	699b      	ldr	r3, [r3, #24]
 8014200:	4798      	blx	r3
 8014202:	42b0      	cmp	r0, r6
 8014204:	f04f 0100 	mov.w	r1, #0
 8014208:	d1e9      	bne.n	80141de <_rclc_execute.part.0+0x10e>
 801420a:	2101      	movs	r1, #1
 801420c:	4628      	mov	r0, r5
 801420e:	f004 fac5 	bl	801879c <rclc_action_server_response_goal_request>
 8014212:	722f      	strb	r7, [r5, #8]
 8014214:	e7ea      	b.n	80141ec <_rclc_execute.part.0+0x11c>
 8014216:	6848      	ldr	r0, [r1, #4]
 8014218:	f004 fa2e 	bl	8018678 <rclc_action_remove_used_goal_handle>
 801421c:	6860      	ldr	r0, [r4, #4]
 801421e:	f004 fa63 	bl	80186e8 <rclc_action_find_first_terminated_handle>
 8014222:	4601      	mov	r1, r0
 8014224:	2800      	cmp	r0, #0
 8014226:	d1f6      	bne.n	8014216 <_rclc_execute.part.0+0x146>
 8014228:	6860      	ldr	r0, [r4, #4]
 801422a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 801422e:	e7ce      	b.n	80141ce <_rclc_execute.part.0+0xfe>
 8014230:	2400      	movs	r4, #0
 8014232:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014234:	f100 0110 	add.w	r1, r0, #16
 8014238:	6880      	ldr	r0, [r0, #8]
 801423a:	4798      	blx	r3
 801423c:	4620      	mov	r0, r4
 801423e:	b005      	add	sp, #20
 8014240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014242:	6860      	ldr	r0, [r4, #4]
 8014244:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014248:	b18b      	cbz	r3, 801426e <_rclc_execute.part.0+0x19e>
 801424a:	68c5      	ldr	r5, [r0, #12]
 801424c:	b32d      	cbz	r5, 801429a <_rclc_execute.part.0+0x1ca>
 801424e:	2600      	movs	r6, #0
 8014250:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8014254:	b143      	cbz	r3, 8014268 <_rclc_execute.part.0+0x198>
 8014256:	69c3      	ldr	r3, [r0, #28]
 8014258:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 801425c:	b123      	cbz	r3, 8014268 <_rclc_execute.part.0+0x198>
 801425e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014260:	4628      	mov	r0, r5
 8014262:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014264:	4798      	blx	r3
 8014266:	6860      	ldr	r0, [r4, #4]
 8014268:	682d      	ldr	r5, [r5, #0]
 801426a:	2d00      	cmp	r5, #0
 801426c:	d1f0      	bne.n	8014250 <_rclc_execute.part.0+0x180>
 801426e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8014272:	b193      	cbz	r3, 801429a <_rclc_execute.part.0+0x1ca>
 8014274:	68c5      	ldr	r5, [r0, #12]
 8014276:	b185      	cbz	r5, 801429a <_rclc_execute.part.0+0x1ca>
 8014278:	2600      	movs	r6, #0
 801427a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 801427e:	b14b      	cbz	r3, 8014294 <_rclc_execute.part.0+0x1c4>
 8014280:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014282:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8014286:	b12b      	cbz	r3, 8014294 <_rclc_execute.part.0+0x1c4>
 8014288:	4628      	mov	r0, r5
 801428a:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801428e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014290:	4798      	blx	r3
 8014292:	6860      	ldr	r0, [r4, #4]
 8014294:	682d      	ldr	r5, [r5, #0]
 8014296:	2d00      	cmp	r5, #0
 8014298:	d1ef      	bne.n	801427a <_rclc_execute.part.0+0x1aa>
 801429a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 801429e:	2b00      	cmp	r3, #0
 80142a0:	f43f af76 	beq.w	8014190 <_rclc_execute.part.0+0xc0>
 80142a4:	2700      	movs	r7, #0
 80142a6:	e00b      	b.n	80142c0 <_rclc_execute.part.0+0x1f0>
 80142a8:	6863      	ldr	r3, [r4, #4]
 80142aa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80142ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80142ae:	6a1e      	ldr	r6, [r3, #32]
 80142b0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 80142b4:	47b0      	blx	r6
 80142b6:	6860      	ldr	r0, [r4, #4]
 80142b8:	4629      	mov	r1, r5
 80142ba:	f004 f9dd 	bl	8018678 <rclc_action_remove_used_goal_handle>
 80142be:	6860      	ldr	r0, [r4, #4]
 80142c0:	f004 fa60 	bl	8018784 <rclc_action_find_first_handle_with_result_response>
 80142c4:	4605      	mov	r5, r0
 80142c6:	2800      	cmp	r0, #0
 80142c8:	d1ee      	bne.n	80142a8 <_rclc_execute.part.0+0x1d8>
 80142ca:	e761      	b.n	8014190 <_rclc_execute.part.0+0xc0>
 80142cc:	6860      	ldr	r0, [r4, #4]
 80142ce:	f880 5020 	strb.w	r5, [r0, #32]
 80142d2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	f43f af5a 	beq.w	8014190 <_rclc_execute.part.0+0xc0>
 80142dc:	68c5      	ldr	r5, [r0, #12]
 80142de:	b1b5      	cbz	r5, 801430e <_rclc_execute.part.0+0x23e>
 80142e0:	2602      	movs	r6, #2
 80142e2:	e001      	b.n	80142e8 <_rclc_execute.part.0+0x218>
 80142e4:	682d      	ldr	r5, [r5, #0]
 80142e6:	b195      	cbz	r5, 801430e <_rclc_execute.part.0+0x23e>
 80142e8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80142ec:	2b03      	cmp	r3, #3
 80142ee:	d1f9      	bne.n	80142e4 <_rclc_execute.part.0+0x214>
 80142f0:	69c3      	ldr	r3, [r0, #28]
 80142f2:	4628      	mov	r0, r5
 80142f4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80142f6:	4798      	blx	r3
 80142f8:	4603      	mov	r3, r0
 80142fa:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 80142fe:	4628      	mov	r0, r5
 8014300:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8014304:	b143      	cbz	r3, 8014318 <_rclc_execute.part.0+0x248>
 8014306:	f004 fa67 	bl	80187d8 <rclc_action_server_goal_cancel_accept>
 801430a:	6860      	ldr	r0, [r4, #4]
 801430c:	e7ea      	b.n	80142e4 <_rclc_execute.part.0+0x214>
 801430e:	2300      	movs	r3, #0
 8014310:	461c      	mov	r4, r3
 8014312:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8014316:	e72e      	b.n	8014176 <_rclc_execute.part.0+0xa6>
 8014318:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801431a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 801431e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014322:	2101      	movs	r1, #1
 8014324:	6860      	ldr	r0, [r4, #4]
 8014326:	e9d7 2300 	ldrd	r2, r3, [r7]
 801432a:	f004 fa81 	bl	8018830 <rclc_action_server_goal_cancel_reject>
 801432e:	722e      	strb	r6, [r5, #8]
 8014330:	6860      	ldr	r0, [r4, #4]
 8014332:	e7d7      	b.n	80142e4 <_rclc_execute.part.0+0x214>
 8014334:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014336:	f104 0510 	add.w	r5, r4, #16
 801433a:	6880      	ldr	r0, [r0, #8]
 801433c:	4798      	blx	r3
 801433e:	e6e3      	b.n	8014108 <_rclc_execute.part.0+0x38>
 8014340:	f100 0510 	add.w	r5, r0, #16
 8014344:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014346:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8014348:	4629      	mov	r1, r5
 801434a:	6880      	ldr	r0, [r0, #8]
 801434c:	4798      	blx	r3
 801434e:	e6db      	b.n	8014108 <_rclc_execute.part.0+0x38>
 8014350:	2401      	movs	r4, #1
 8014352:	e710      	b.n	8014176 <_rclc_execute.part.0+0xa6>

08014354 <rclc_executor_trigger_any>:
 8014354:	2800      	cmp	r0, #0
 8014356:	d03d      	beq.n	80143d4 <rclc_executor_trigger_any+0x80>
 8014358:	2900      	cmp	r1, #0
 801435a:	d03c      	beq.n	80143d6 <rclc_executor_trigger_any+0x82>
 801435c:	4603      	mov	r3, r0
 801435e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8014362:	2200      	movs	r2, #0
 8014364:	2800      	cmp	r0, #0
 8014366:	d035      	beq.n	80143d4 <rclc_executor_trigger_any+0x80>
 8014368:	b430      	push	{r4, r5}
 801436a:	f893 c000 	ldrb.w	ip, [r3]
 801436e:	f1bc 0f08 	cmp.w	ip, #8
 8014372:	d11d      	bne.n	80143b0 <rclc_executor_trigger_any+0x5c>
 8014374:	685c      	ldr	r4, [r3, #4]
 8014376:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8014378:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 801437c:	d105      	bne.n	801438a <rclc_executor_trigger_any+0x36>
 801437e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8014382:	b910      	cbnz	r0, 801438a <rclc_executor_trigger_any+0x36>
 8014384:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8014388:	b128      	cbz	r0, 8014396 <rclc_executor_trigger_any+0x42>
 801438a:	bc30      	pop	{r4, r5}
 801438c:	4770      	bx	lr
 801438e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8014392:	2800      	cmp	r0, #0
 8014394:	d1f9      	bne.n	801438a <rclc_executor_trigger_any+0x36>
 8014396:	3201      	adds	r2, #1
 8014398:	3340      	adds	r3, #64	@ 0x40
 801439a:	4291      	cmp	r1, r2
 801439c:	d017      	beq.n	80143ce <rclc_executor_trigger_any+0x7a>
 801439e:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 80143a2:	2800      	cmp	r0, #0
 80143a4:	d0f1      	beq.n	801438a <rclc_executor_trigger_any+0x36>
 80143a6:	f893 c000 	ldrb.w	ip, [r3]
 80143aa:	f1bc 0f08 	cmp.w	ip, #8
 80143ae:	d0e1      	beq.n	8014374 <rclc_executor_trigger_any+0x20>
 80143b0:	f1bc 0f09 	cmp.w	ip, #9
 80143b4:	d1eb      	bne.n	801438e <rclc_executor_trigger_any+0x3a>
 80143b6:	685c      	ldr	r4, [r3, #4]
 80143b8:	6a25      	ldr	r5, [r4, #32]
 80143ba:	2d00      	cmp	r5, #0
 80143bc:	d1e5      	bne.n	801438a <rclc_executor_trigger_any+0x36>
 80143be:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 80143c2:	2800      	cmp	r0, #0
 80143c4:	d1e1      	bne.n	801438a <rclc_executor_trigger_any+0x36>
 80143c6:	3201      	adds	r2, #1
 80143c8:	3340      	adds	r3, #64	@ 0x40
 80143ca:	4291      	cmp	r1, r2
 80143cc:	d1e7      	bne.n	801439e <rclc_executor_trigger_any+0x4a>
 80143ce:	2000      	movs	r0, #0
 80143d0:	bc30      	pop	{r4, r5}
 80143d2:	4770      	bx	lr
 80143d4:	4770      	bx	lr
 80143d6:	4608      	mov	r0, r1
 80143d8:	4770      	bx	lr
 80143da:	bf00      	nop

080143dc <rclc_executor_get_zero_initialized_executor>:
 80143dc:	b510      	push	{r4, lr}
 80143de:	4604      	mov	r4, r0
 80143e0:	2288      	movs	r2, #136	@ 0x88
 80143e2:	4902      	ldr	r1, [pc, #8]	@ (80143ec <rclc_executor_get_zero_initialized_executor+0x10>)
 80143e4:	f00c ff09 	bl	80211fa <memcpy>
 80143e8:	4620      	mov	r0, r4
 80143ea:	bd10      	pop	{r4, pc}
 80143ec:	080233e0 	.word	0x080233e0

080143f0 <rclc_executor_init>:
 80143f0:	2900      	cmp	r1, #0
 80143f2:	d06a      	beq.n	80144ca <rclc_executor_init+0xda>
 80143f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143f8:	4605      	mov	r5, r0
 80143fa:	b0b0      	sub	sp, #192	@ 0xc0
 80143fc:	2800      	cmp	r0, #0
 80143fe:	d05c      	beq.n	80144ba <rclc_executor_init+0xca>
 8014400:	4616      	mov	r6, r2
 8014402:	4618      	mov	r0, r3
 8014404:	4688      	mov	r8, r1
 8014406:	461f      	mov	r7, r3
 8014408:	f000 fc74 	bl	8014cf4 <rcutils_allocator_is_valid>
 801440c:	2e00      	cmp	r6, #0
 801440e:	d054      	beq.n	80144ba <rclc_executor_init+0xca>
 8014410:	f080 0401 	eor.w	r4, r0, #1
 8014414:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8014418:	d14f      	bne.n	80144ba <rclc_executor_init+0xca>
 801441a:	2288      	movs	r2, #136	@ 0x88
 801441c:	4930      	ldr	r1, [pc, #192]	@ (80144e0 <rclc_executor_init+0xf0>)
 801441e:	a80e      	add	r0, sp, #56	@ 0x38
 8014420:	f00c feeb 	bl	80211fa <memcpy>
 8014424:	a90e      	add	r1, sp, #56	@ 0x38
 8014426:	2288      	movs	r2, #136	@ 0x88
 8014428:	4628      	mov	r0, r5
 801442a:	f00c fee6 	bl	80211fa <memcpy>
 801442e:	4668      	mov	r0, sp
 8014430:	f8c5 8000 	str.w	r8, [r5]
 8014434:	60ae      	str	r6, [r5, #8]
 8014436:	f002 feb7 	bl	80171a8 <rcl_get_zero_initialized_wait_set>
 801443a:	46ec      	mov	ip, sp
 801443c:	f105 0e14 	add.w	lr, r5, #20
 8014440:	f8d7 8000 	ldr.w	r8, [r7]
 8014444:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014448:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801444c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014450:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014454:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014458:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 80144d8 <rclc_executor_init+0xe8>
 801445c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014460:	f8dc 3000 	ldr.w	r3, [ip]
 8014464:	01b0      	lsls	r0, r6, #6
 8014466:	6939      	ldr	r1, [r7, #16]
 8014468:	f8ce 3000 	str.w	r3, [lr]
 801446c:	612f      	str	r7, [r5, #16]
 801446e:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8014472:	47c0      	blx	r8
 8014474:	6068      	str	r0, [r5, #4]
 8014476:	b908      	cbnz	r0, 801447c <rclc_executor_init+0x8c>
 8014478:	e029      	b.n	80144ce <rclc_executor_init+0xde>
 801447a:	6868      	ldr	r0, [r5, #4]
 801447c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014480:	3401      	adds	r4, #1
 8014482:	4631      	mov	r1, r6
 8014484:	f000 fac0 	bl	8014a08 <rclc_executor_handle_init>
 8014488:	42a6      	cmp	r6, r4
 801448a:	d8f6      	bhi.n	801447a <rclc_executor_init+0x8a>
 801448c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8014490:	f000 faae 	bl	80149f0 <rclc_executor_handle_counters_zero_init>
 8014494:	4a13      	ldr	r2, [pc, #76]	@ (80144e4 <rclc_executor_init+0xf4>)
 8014496:	2300      	movs	r3, #0
 8014498:	6868      	ldr	r0, [r5, #4]
 801449a:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 801449e:	b168      	cbz	r0, 80144bc <rclc_executor_init+0xcc>
 80144a0:	68ab      	ldr	r3, [r5, #8]
 80144a2:	b173      	cbz	r3, 80144c2 <rclc_executor_init+0xd2>
 80144a4:	692a      	ldr	r2, [r5, #16]
 80144a6:	fab2 f382 	clz	r3, r2
 80144aa:	095b      	lsrs	r3, r3, #5
 80144ac:	b14a      	cbz	r2, 80144c2 <rclc_executor_init+0xd2>
 80144ae:	4618      	mov	r0, r3
 80144b0:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 80144b4:	b030      	add	sp, #192	@ 0xc0
 80144b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144ba:	200b      	movs	r0, #11
 80144bc:	b030      	add	sp, #192	@ 0xc0
 80144be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144c2:	2000      	movs	r0, #0
 80144c4:	b030      	add	sp, #192	@ 0xc0
 80144c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144ca:	200b      	movs	r0, #11
 80144cc:	4770      	bx	lr
 80144ce:	200a      	movs	r0, #10
 80144d0:	e7f4      	b.n	80144bc <rclc_executor_init+0xcc>
 80144d2:	bf00      	nop
 80144d4:	f3af 8000 	nop.w
 80144d8:	3b9aca00 	.word	0x3b9aca00
 80144dc:	00000000 	.word	0x00000000
 80144e0:	080233e0 	.word	0x080233e0
 80144e4:	08014355 	.word	0x08014355

080144e8 <rclc_executor_add_subscription>:
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	bf18      	it	ne
 80144ec:	2a00      	cmpne	r2, #0
 80144ee:	b570      	push	{r4, r5, r6, lr}
 80144f0:	4604      	mov	r4, r0
 80144f2:	bf0c      	ite	eq
 80144f4:	2001      	moveq	r0, #1
 80144f6:	2000      	movne	r0, #0
 80144f8:	f89d c010 	ldrb.w	ip, [sp, #16]
 80144fc:	2900      	cmp	r1, #0
 80144fe:	bf08      	it	eq
 8014500:	f040 0001 	orreq.w	r0, r0, #1
 8014504:	bb28      	cbnz	r0, 8014552 <rclc_executor_add_subscription+0x6a>
 8014506:	fab4 f584 	clz	r5, r4
 801450a:	096d      	lsrs	r5, r5, #5
 801450c:	b30c      	cbz	r4, 8014552 <rclc_executor_add_subscription+0x6a>
 801450e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8014512:	4286      	cmp	r6, r0
 8014514:	d301      	bcc.n	801451a <rclc_executor_add_subscription+0x32>
 8014516:	2001      	movs	r0, #1
 8014518:	bd70      	pop	{r4, r5, r6, pc}
 801451a:	6860      	ldr	r0, [r4, #4]
 801451c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014520:	f800 500e 	strb.w	r5, [r0, lr]
 8014524:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014528:	3601      	adds	r6, #1
 801452a:	6303      	str	r3, [r0, #48]	@ 0x30
 801452c:	2301      	movs	r3, #1
 801452e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8014530:	f104 0514 	add.w	r5, r4, #20
 8014534:	f880 c001 	strb.w	ip, [r0, #1]
 8014538:	8703      	strh	r3, [r0, #56]	@ 0x38
 801453a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801453e:	4628      	mov	r0, r5
 8014540:	60e6      	str	r6, [r4, #12]
 8014542:	f002 fe45 	bl	80171d0 <rcl_wait_set_is_valid>
 8014546:	b930      	cbnz	r0, 8014556 <rclc_executor_add_subscription+0x6e>
 8014548:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 801454a:	2000      	movs	r0, #0
 801454c:	3301      	adds	r3, #1
 801454e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8014550:	bd70      	pop	{r4, r5, r6, pc}
 8014552:	200b      	movs	r0, #11
 8014554:	bd70      	pop	{r4, r5, r6, pc}
 8014556:	4628      	mov	r0, r5
 8014558:	f002 fe40 	bl	80171dc <rcl_wait_set_fini>
 801455c:	2800      	cmp	r0, #0
 801455e:	d0f3      	beq.n	8014548 <rclc_executor_add_subscription+0x60>
 8014560:	bd70      	pop	{r4, r5, r6, pc}
 8014562:	bf00      	nop

08014564 <rclc_executor_add_service>:
 8014564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014566:	9d06      	ldr	r5, [sp, #24]
 8014568:	4604      	mov	r4, r0
 801456a:	2b00      	cmp	r3, #0
 801456c:	bf18      	it	ne
 801456e:	2d00      	cmpne	r5, #0
 8014570:	bf0c      	ite	eq
 8014572:	2001      	moveq	r0, #1
 8014574:	2000      	movne	r0, #0
 8014576:	2a00      	cmp	r2, #0
 8014578:	bf08      	it	eq
 801457a:	f040 0001 	orreq.w	r0, r0, #1
 801457e:	2900      	cmp	r1, #0
 8014580:	bf08      	it	eq
 8014582:	f040 0001 	orreq.w	r0, r0, #1
 8014586:	bb40      	cbnz	r0, 80145da <rclc_executor_add_service+0x76>
 8014588:	fab4 f684 	clz	r6, r4
 801458c:	0976      	lsrs	r6, r6, #5
 801458e:	b324      	cbz	r4, 80145da <rclc_executor_add_service+0x76>
 8014590:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8014594:	42b8      	cmp	r0, r7
 8014596:	d301      	bcc.n	801459c <rclc_executor_add_service+0x38>
 8014598:	2001      	movs	r0, #1
 801459a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801459c:	6867      	ldr	r7, [r4, #4]
 801459e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 80145a2:	f100 0c01 	add.w	ip, r0, #1
 80145a6:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 80145aa:	6283      	str	r3, [r0, #40]	@ 0x28
 80145ac:	2305      	movs	r3, #5
 80145ae:	6305      	str	r5, [r0, #48]	@ 0x30
 80145b0:	f104 0514 	add.w	r5, r4, #20
 80145b4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80145b8:	f827 300e 	strh.w	r3, [r7, lr]
 80145bc:	2301      	movs	r3, #1
 80145be:	62c6      	str	r6, [r0, #44]	@ 0x2c
 80145c0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80145c4:	4628      	mov	r0, r5
 80145c6:	f8c4 c00c 	str.w	ip, [r4, #12]
 80145ca:	f002 fe01 	bl	80171d0 <rcl_wait_set_is_valid>
 80145ce:	b930      	cbnz	r0, 80145de <rclc_executor_add_service+0x7a>
 80145d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80145d2:	2000      	movs	r0, #0
 80145d4:	3301      	adds	r3, #1
 80145d6:	6563      	str	r3, [r4, #84]	@ 0x54
 80145d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145da:	200b      	movs	r0, #11
 80145dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145de:	4628      	mov	r0, r5
 80145e0:	f002 fdfc 	bl	80171dc <rcl_wait_set_fini>
 80145e4:	2800      	cmp	r0, #0
 80145e6:	d0f3      	beq.n	80145d0 <rclc_executor_add_service+0x6c>
 80145e8:	e7d7      	b.n	801459a <rclc_executor_add_service+0x36>
 80145ea:	bf00      	nop

080145ec <rclc_executor_prepare>:
 80145ec:	2800      	cmp	r0, #0
 80145ee:	d044      	beq.n	801467a <rclc_executor_prepare+0x8e>
 80145f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145f2:	f100 0514 	add.w	r5, r0, #20
 80145f6:	b09b      	sub	sp, #108	@ 0x6c
 80145f8:	4604      	mov	r4, r0
 80145fa:	4628      	mov	r0, r5
 80145fc:	f002 fde8 	bl	80171d0 <rcl_wait_set_is_valid>
 8014600:	b110      	cbz	r0, 8014608 <rclc_executor_prepare+0x1c>
 8014602:	2000      	movs	r0, #0
 8014604:	b01b      	add	sp, #108	@ 0x6c
 8014606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014608:	4628      	mov	r0, r5
 801460a:	f002 fde7 	bl	80171dc <rcl_wait_set_fini>
 801460e:	2800      	cmp	r0, #0
 8014610:	d130      	bne.n	8014674 <rclc_executor_prepare+0x88>
 8014612:	a80c      	add	r0, sp, #48	@ 0x30
 8014614:	ae04      	add	r6, sp, #16
 8014616:	f002 fdc7 	bl	80171a8 <rcl_get_zero_initialized_wait_set>
 801461a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801461e:	46ae      	mov	lr, r5
 8014620:	6927      	ldr	r7, [r4, #16]
 8014622:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014626:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801462a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801462e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014632:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014636:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801463a:	f8dc 3000 	ldr.w	r3, [ip]
 801463e:	f8ce 3000 	str.w	r3, [lr]
 8014642:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014644:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	4628      	mov	r0, r5
 801464a:	6822      	ldr	r2, [r4, #0]
 801464c:	6033      	str	r3, [r6, #0]
 801464e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014650:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8014652:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014656:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 801465a:	e9cd 2100 	strd	r2, r1, [sp]
 801465e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8014660:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014662:	f003 f8bb 	bl	80177dc <rcl_wait_set_init>
 8014666:	2800      	cmp	r0, #0
 8014668:	d0cc      	beq.n	8014604 <rclc_executor_prepare+0x18>
 801466a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801466c:	f000 fb68 	bl	8014d40 <rcutils_reset_error>
 8014670:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014672:	e7c7      	b.n	8014604 <rclc_executor_prepare+0x18>
 8014674:	f000 fb64 	bl	8014d40 <rcutils_reset_error>
 8014678:	e7cb      	b.n	8014612 <rclc_executor_prepare+0x26>
 801467a:	200b      	movs	r0, #11
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop

08014680 <rclc_executor_spin_some.part.0>:
 8014680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014684:	4605      	mov	r5, r0
 8014686:	4691      	mov	r9, r2
 8014688:	4698      	mov	r8, r3
 801468a:	f7ff ffaf 	bl	80145ec <rclc_executor_prepare>
 801468e:	f105 0614 	add.w	r6, r5, #20
 8014692:	4630      	mov	r0, r6
 8014694:	f002 fe6e 	bl	8017374 <rcl_wait_set_clear>
 8014698:	4607      	mov	r7, r0
 801469a:	2800      	cmp	r0, #0
 801469c:	f040 80a8 	bne.w	80147f0 <rclc_executor_spin_some.part.0+0x170>
 80146a0:	68ab      	ldr	r3, [r5, #8]
 80146a2:	b30b      	cbz	r3, 80146e8 <rclc_executor_spin_some.part.0+0x68>
 80146a4:	4604      	mov	r4, r0
 80146a6:	6869      	ldr	r1, [r5, #4]
 80146a8:	01a2      	lsls	r2, r4, #6
 80146aa:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 80146ae:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 80146b2:	b1cb      	cbz	r3, 80146e8 <rclc_executor_spin_some.part.0+0x68>
 80146b4:	5c8b      	ldrb	r3, [r1, r2]
 80146b6:	2b0a      	cmp	r3, #10
 80146b8:	f200 80de 	bhi.w	8014878 <rclc_executor_spin_some.part.0+0x1f8>
 80146bc:	e8df f003 	tbb	[pc, r3]
 80146c0:	8da99d9d 	.word	0x8da99d9d
 80146c4:	0606068d 	.word	0x0606068d
 80146c8:	c1ce      	.short	0xc1ce
 80146ca:	b5          	.byte	0xb5
 80146cb:	00          	.byte	0x00
 80146cc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80146d0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80146d4:	4630      	mov	r0, r6
 80146d6:	f003 f99d 	bl	8017a14 <rcl_wait_set_add_service>
 80146da:	2800      	cmp	r0, #0
 80146dc:	f040 8087 	bne.w	80147ee <rclc_executor_spin_some.part.0+0x16e>
 80146e0:	3401      	adds	r4, #1
 80146e2:	68ab      	ldr	r3, [r5, #8]
 80146e4:	429c      	cmp	r4, r3
 80146e6:	d3de      	bcc.n	80146a6 <rclc_executor_spin_some.part.0+0x26>
 80146e8:	4643      	mov	r3, r8
 80146ea:	464a      	mov	r2, r9
 80146ec:	4630      	mov	r0, r6
 80146ee:	f003 f9bf 	bl	8017a70 <rcl_wait>
 80146f2:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	f000 80c6 	beq.w	8014888 <rclc_executor_spin_some.part.0+0x208>
 80146fc:	2b01      	cmp	r3, #1
 80146fe:	f040 80bb 	bne.w	8014878 <rclc_executor_spin_some.part.0+0x1f8>
 8014702:	68ab      	ldr	r3, [r5, #8]
 8014704:	2b00      	cmp	r3, #0
 8014706:	f000 8159 	beq.w	80149bc <rclc_executor_spin_some.part.0+0x33c>
 801470a:	2400      	movs	r4, #0
 801470c:	f240 1991 	movw	r9, #401	@ 0x191
 8014710:	46a0      	mov	r8, r4
 8014712:	e00a      	b.n	801472a <rclc_executor_spin_some.part.0+0xaa>
 8014714:	f7ff fb1a 	bl	8013d4c <_rclc_check_for_new_data>
 8014718:	4604      	mov	r4, r0
 801471a:	b110      	cbz	r0, 8014722 <rclc_executor_spin_some.part.0+0xa2>
 801471c:	4548      	cmp	r0, r9
 801471e:	f040 80b1 	bne.w	8014884 <rclc_executor_spin_some.part.0+0x204>
 8014722:	68ab      	ldr	r3, [r5, #8]
 8014724:	4598      	cmp	r8, r3
 8014726:	f080 8126 	bcs.w	8014976 <rclc_executor_spin_some.part.0+0x2f6>
 801472a:	686a      	ldr	r2, [r5, #4]
 801472c:	4631      	mov	r1, r6
 801472e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014732:	f108 0801 	add.w	r8, r8, #1
 8014736:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801473a:	f1bc 0f00 	cmp.w	ip, #0
 801473e:	d1e9      	bne.n	8014714 <rclc_executor_spin_some.part.0+0x94>
 8014740:	4619      	mov	r1, r3
 8014742:	4610      	mov	r0, r2
 8014744:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8014748:	4798      	blx	r3
 801474a:	2800      	cmp	r0, #0
 801474c:	f000 809a 	beq.w	8014884 <rclc_executor_spin_some.part.0+0x204>
 8014750:	68ab      	ldr	r3, [r5, #8]
 8014752:	2b00      	cmp	r3, #0
 8014754:	f000 8096 	beq.w	8014884 <rclc_executor_spin_some.part.0+0x204>
 8014758:	f04f 0800 	mov.w	r8, #0
 801475c:	f240 1991 	movw	r9, #401	@ 0x191
 8014760:	e009      	b.n	8014776 <rclc_executor_spin_some.part.0+0xf6>
 8014762:	f7ff fb41 	bl	8013de8 <_rclc_take_new_data>
 8014766:	4604      	mov	r4, r0
 8014768:	b110      	cbz	r0, 8014770 <rclc_executor_spin_some.part.0+0xf0>
 801476a:	4548      	cmp	r0, r9
 801476c:	f040 808a 	bne.w	8014884 <rclc_executor_spin_some.part.0+0x204>
 8014770:	68ab      	ldr	r3, [r5, #8]
 8014772:	4598      	cmp	r8, r3
 8014774:	d209      	bcs.n	801478a <rclc_executor_spin_some.part.0+0x10a>
 8014776:	6868      	ldr	r0, [r5, #4]
 8014778:	4631      	mov	r1, r6
 801477a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 801477e:	f108 0801 	add.w	r8, r8, #1
 8014782:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8014786:	2a00      	cmp	r2, #0
 8014788:	d1eb      	bne.n	8014762 <rclc_executor_spin_some.part.0+0xe2>
 801478a:	2b00      	cmp	r3, #0
 801478c:	d07a      	beq.n	8014884 <rclc_executor_spin_some.part.0+0x204>
 801478e:	2600      	movs	r6, #0
 8014790:	e00e      	b.n	80147b0 <rclc_executor_spin_some.part.0+0x130>
 8014792:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014796:	2a08      	cmp	r2, #8
 8014798:	f000 80fc 	beq.w	8014994 <rclc_executor_spin_some.part.0+0x314>
 801479c:	2a09      	cmp	r2, #9
 801479e:	f000 80ee 	beq.w	801497e <rclc_executor_spin_some.part.0+0x2fe>
 80147a2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 80147a6:	b98a      	cbnz	r2, 80147cc <rclc_executor_spin_some.part.0+0x14c>
 80147a8:	3601      	adds	r6, #1
 80147aa:	429e      	cmp	r6, r3
 80147ac:	d267      	bcs.n	801487e <rclc_executor_spin_some.part.0+0x1fe>
 80147ae:	2400      	movs	r4, #0
 80147b0:	686a      	ldr	r2, [r5, #4]
 80147b2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 80147b6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 80147ba:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 80147be:	2900      	cmp	r1, #0
 80147c0:	d060      	beq.n	8014884 <rclc_executor_spin_some.part.0+0x204>
 80147c2:	7841      	ldrb	r1, [r0, #1]
 80147c4:	2900      	cmp	r1, #0
 80147c6:	d0e4      	beq.n	8014792 <rclc_executor_spin_some.part.0+0x112>
 80147c8:	2901      	cmp	r1, #1
 80147ca:	d1ed      	bne.n	80147a8 <rclc_executor_spin_some.part.0+0x128>
 80147cc:	f7ff fc80 	bl	80140d0 <_rclc_execute.part.0>
 80147d0:	2800      	cmp	r0, #0
 80147d2:	f040 80b5 	bne.w	8014940 <rclc_executor_spin_some.part.0+0x2c0>
 80147d6:	68ab      	ldr	r3, [r5, #8]
 80147d8:	e7e6      	b.n	80147a8 <rclc_executor_spin_some.part.0+0x128>
 80147da:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80147de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80147e2:	4630      	mov	r0, r6
 80147e4:	f003 f8ea 	bl	80179bc <rcl_wait_set_add_client>
 80147e8:	2800      	cmp	r0, #0
 80147ea:	f43f af79 	beq.w	80146e0 <rclc_executor_spin_some.part.0+0x60>
 80147ee:	4607      	mov	r7, r0
 80147f0:	f000 faa6 	bl	8014d40 <rcutils_reset_error>
 80147f4:	4638      	mov	r0, r7
 80147f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147fa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80147fe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014802:	4630      	mov	r0, r6
 8014804:	f002 fd8a 	bl	801731c <rcl_wait_set_add_subscription>
 8014808:	2800      	cmp	r0, #0
 801480a:	f43f af69 	beq.w	80146e0 <rclc_executor_spin_some.part.0+0x60>
 801480e:	4607      	mov	r7, r0
 8014810:	e7ee      	b.n	80147f0 <rclc_executor_spin_some.part.0+0x170>
 8014812:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014816:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801481a:	4630      	mov	r0, r6
 801481c:	f003 f89e 	bl	801795c <rcl_wait_set_add_timer>
 8014820:	2800      	cmp	r0, #0
 8014822:	f43f af5d 	beq.w	80146e0 <rclc_executor_spin_some.part.0+0x60>
 8014826:	4607      	mov	r7, r0
 8014828:	e7e2      	b.n	80147f0 <rclc_executor_spin_some.part.0+0x170>
 801482a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801482e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014832:	4630      	mov	r0, r6
 8014834:	f003 f866 	bl	8017904 <rcl_wait_set_add_guard_condition>
 8014838:	2800      	cmp	r0, #0
 801483a:	f43f af51 	beq.w	80146e0 <rclc_executor_spin_some.part.0+0x60>
 801483e:	4607      	mov	r7, r0
 8014840:	e7d6      	b.n	80147f0 <rclc_executor_spin_some.part.0+0x170>
 8014842:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014846:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801484a:	4630      	mov	r0, r6
 801484c:	3110      	adds	r1, #16
 801484e:	f003 fde5 	bl	801841c <rcl_action_wait_set_add_action_server>
 8014852:	2800      	cmp	r0, #0
 8014854:	f43f af44 	beq.w	80146e0 <rclc_executor_spin_some.part.0+0x60>
 8014858:	4607      	mov	r7, r0
 801485a:	e7c9      	b.n	80147f0 <rclc_executor_spin_some.part.0+0x170>
 801485c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014860:	2300      	movs	r3, #0
 8014862:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014866:	4630      	mov	r0, r6
 8014868:	3110      	adds	r1, #16
 801486a:	f003 fbad 	bl	8017fc8 <rcl_action_wait_set_add_action_client>
 801486e:	2800      	cmp	r0, #0
 8014870:	f43f af36 	beq.w	80146e0 <rclc_executor_spin_some.part.0+0x60>
 8014874:	4607      	mov	r7, r0
 8014876:	e7bb      	b.n	80147f0 <rclc_executor_spin_some.part.0+0x170>
 8014878:	2701      	movs	r7, #1
 801487a:	f000 fa61 	bl	8014d40 <rcutils_reset_error>
 801487e:	4638      	mov	r0, r7
 8014880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014884:	4627      	mov	r7, r4
 8014886:	e7fa      	b.n	801487e <rclc_executor_spin_some.part.0+0x1fe>
 8014888:	68ab      	ldr	r3, [r5, #8]
 801488a:	2b00      	cmp	r3, #0
 801488c:	f000 8093 	beq.w	80149b6 <rclc_executor_spin_some.part.0+0x336>
 8014890:	2400      	movs	r4, #0
 8014892:	f240 1991 	movw	r9, #401	@ 0x191
 8014896:	46a0      	mov	r8, r4
 8014898:	e008      	b.n	80148ac <rclc_executor_spin_some.part.0+0x22c>
 801489a:	f7ff fa57 	bl	8013d4c <_rclc_check_for_new_data>
 801489e:	4604      	mov	r4, r0
 80148a0:	b108      	cbz	r0, 80148a6 <rclc_executor_spin_some.part.0+0x226>
 80148a2:	4548      	cmp	r0, r9
 80148a4:	d1ee      	bne.n	8014884 <rclc_executor_spin_some.part.0+0x204>
 80148a6:	68ab      	ldr	r3, [r5, #8]
 80148a8:	4598      	cmp	r8, r3
 80148aa:	d266      	bcs.n	801497a <rclc_executor_spin_some.part.0+0x2fa>
 80148ac:	686a      	ldr	r2, [r5, #4]
 80148ae:	4631      	mov	r1, r6
 80148b0:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80148b4:	f108 0801 	add.w	r8, r8, #1
 80148b8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80148bc:	f1bc 0f00 	cmp.w	ip, #0
 80148c0:	d1eb      	bne.n	801489a <rclc_executor_spin_some.part.0+0x21a>
 80148c2:	4619      	mov	r1, r3
 80148c4:	4610      	mov	r0, r2
 80148c6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80148ca:	4798      	blx	r3
 80148cc:	2800      	cmp	r0, #0
 80148ce:	d0d9      	beq.n	8014884 <rclc_executor_spin_some.part.0+0x204>
 80148d0:	68ab      	ldr	r3, [r5, #8]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d0d6      	beq.n	8014884 <rclc_executor_spin_some.part.0+0x204>
 80148d6:	f04f 0a00 	mov.w	sl, #0
 80148da:	f240 1891 	movw	r8, #401	@ 0x191
 80148de:	f240 2959 	movw	r9, #601	@ 0x259
 80148e2:	e00e      	b.n	8014902 <rclc_executor_spin_some.part.0+0x282>
 80148e4:	f813 300b 	ldrb.w	r3, [r3, fp]
 80148e8:	2b08      	cmp	r3, #8
 80148ea:	d034      	beq.n	8014956 <rclc_executor_spin_some.part.0+0x2d6>
 80148ec:	2b09      	cmp	r3, #9
 80148ee:	d029      	beq.n	8014944 <rclc_executor_spin_some.part.0+0x2c4>
 80148f0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80148f4:	bb03      	cbnz	r3, 8014938 <rclc_executor_spin_some.part.0+0x2b8>
 80148f6:	f10a 0a01 	add.w	sl, sl, #1
 80148fa:	68ab      	ldr	r3, [r5, #8]
 80148fc:	459a      	cmp	sl, r3
 80148fe:	d2be      	bcs.n	801487e <rclc_executor_spin_some.part.0+0x1fe>
 8014900:	2400      	movs	r4, #0
 8014902:	6868      	ldr	r0, [r5, #4]
 8014904:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8014908:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 801490c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8014910:	2b00      	cmp	r3, #0
 8014912:	d0b7      	beq.n	8014884 <rclc_executor_spin_some.part.0+0x204>
 8014914:	4631      	mov	r1, r6
 8014916:	f7ff fa67 	bl	8013de8 <_rclc_take_new_data>
 801491a:	2800      	cmp	r0, #0
 801491c:	bf18      	it	ne
 801491e:	4540      	cmpne	r0, r8
 8014920:	d001      	beq.n	8014926 <rclc_executor_spin_some.part.0+0x2a6>
 8014922:	4548      	cmp	r0, r9
 8014924:	d10c      	bne.n	8014940 <rclc_executor_spin_some.part.0+0x2c0>
 8014926:	686b      	ldr	r3, [r5, #4]
 8014928:	eb13 000b 	adds.w	r0, r3, fp
 801492c:	d021      	beq.n	8014972 <rclc_executor_spin_some.part.0+0x2f2>
 801492e:	7842      	ldrb	r2, [r0, #1]
 8014930:	2a00      	cmp	r2, #0
 8014932:	d0d7      	beq.n	80148e4 <rclc_executor_spin_some.part.0+0x264>
 8014934:	2a01      	cmp	r2, #1
 8014936:	d1de      	bne.n	80148f6 <rclc_executor_spin_some.part.0+0x276>
 8014938:	f7ff fbca 	bl	80140d0 <_rclc_execute.part.0>
 801493c:	2800      	cmp	r0, #0
 801493e:	d0da      	beq.n	80148f6 <rclc_executor_spin_some.part.0+0x276>
 8014940:	4607      	mov	r7, r0
 8014942:	e79c      	b.n	801487e <rclc_executor_spin_some.part.0+0x1fe>
 8014944:	6843      	ldr	r3, [r0, #4]
 8014946:	6a1a      	ldr	r2, [r3, #32]
 8014948:	2a00      	cmp	r2, #0
 801494a:	d1f5      	bne.n	8014938 <rclc_executor_spin_some.part.0+0x2b8>
 801494c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8014950:	2b00      	cmp	r3, #0
 8014952:	d0d0      	beq.n	80148f6 <rclc_executor_spin_some.part.0+0x276>
 8014954:	e7f0      	b.n	8014938 <rclc_executor_spin_some.part.0+0x2b8>
 8014956:	6843      	ldr	r3, [r0, #4]
 8014958:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801495a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801495e:	d1eb      	bne.n	8014938 <rclc_executor_spin_some.part.0+0x2b8>
 8014960:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8014964:	2a00      	cmp	r2, #0
 8014966:	d1e7      	bne.n	8014938 <rclc_executor_spin_some.part.0+0x2b8>
 8014968:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801496c:	2b00      	cmp	r3, #0
 801496e:	d0c2      	beq.n	80148f6 <rclc_executor_spin_some.part.0+0x276>
 8014970:	e7e2      	b.n	8014938 <rclc_executor_spin_some.part.0+0x2b8>
 8014972:	270b      	movs	r7, #11
 8014974:	e783      	b.n	801487e <rclc_executor_spin_some.part.0+0x1fe>
 8014976:	686a      	ldr	r2, [r5, #4]
 8014978:	e6e2      	b.n	8014740 <rclc_executor_spin_some.part.0+0xc0>
 801497a:	686a      	ldr	r2, [r5, #4]
 801497c:	e7a1      	b.n	80148c2 <rclc_executor_spin_some.part.0+0x242>
 801497e:	6842      	ldr	r2, [r0, #4]
 8014980:	6a11      	ldr	r1, [r2, #32]
 8014982:	2900      	cmp	r1, #0
 8014984:	f47f af22 	bne.w	80147cc <rclc_executor_spin_some.part.0+0x14c>
 8014988:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 801498c:	2a00      	cmp	r2, #0
 801498e:	f43f af0b 	beq.w	80147a8 <rclc_executor_spin_some.part.0+0x128>
 8014992:	e71b      	b.n	80147cc <rclc_executor_spin_some.part.0+0x14c>
 8014994:	6842      	ldr	r2, [r0, #4]
 8014996:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8014998:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 801499c:	f47f af16 	bne.w	80147cc <rclc_executor_spin_some.part.0+0x14c>
 80149a0:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 80149a4:	2900      	cmp	r1, #0
 80149a6:	f47f af11 	bne.w	80147cc <rclc_executor_spin_some.part.0+0x14c>
 80149aa:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 80149ae:	2a00      	cmp	r2, #0
 80149b0:	f43f aefa 	beq.w	80147a8 <rclc_executor_spin_some.part.0+0x128>
 80149b4:	e70a      	b.n	80147cc <rclc_executor_spin_some.part.0+0x14c>
 80149b6:	686a      	ldr	r2, [r5, #4]
 80149b8:	461c      	mov	r4, r3
 80149ba:	e782      	b.n	80148c2 <rclc_executor_spin_some.part.0+0x242>
 80149bc:	686a      	ldr	r2, [r5, #4]
 80149be:	461c      	mov	r4, r3
 80149c0:	e6be      	b.n	8014740 <rclc_executor_spin_some.part.0+0xc0>
 80149c2:	bf00      	nop

080149c4 <rclc_executor_spin_some>:
 80149c4:	b190      	cbz	r0, 80149ec <rclc_executor_spin_some+0x28>
 80149c6:	b570      	push	{r4, r5, r6, lr}
 80149c8:	4604      	mov	r4, r0
 80149ca:	6800      	ldr	r0, [r0, #0]
 80149cc:	4616      	mov	r6, r2
 80149ce:	461d      	mov	r5, r3
 80149d0:	f001 f85e 	bl	8015a90 <rcl_context_is_valid>
 80149d4:	b130      	cbz	r0, 80149e4 <rclc_executor_spin_some+0x20>
 80149d6:	4632      	mov	r2, r6
 80149d8:	462b      	mov	r3, r5
 80149da:	4620      	mov	r0, r4
 80149dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80149e0:	f7ff be4e 	b.w	8014680 <rclc_executor_spin_some.part.0>
 80149e4:	f000 f9ac 	bl	8014d40 <rcutils_reset_error>
 80149e8:	2001      	movs	r0, #1
 80149ea:	bd70      	pop	{r4, r5, r6, pc}
 80149ec:	200b      	movs	r0, #11
 80149ee:	4770      	bx	lr

080149f0 <rclc_executor_handle_counters_zero_init>:
 80149f0:	b130      	cbz	r0, 8014a00 <rclc_executor_handle_counters_zero_init+0x10>
 80149f2:	2220      	movs	r2, #32
 80149f4:	2100      	movs	r1, #0
 80149f6:	b508      	push	{r3, lr}
 80149f8:	f00c fae0 	bl	8020fbc <memset>
 80149fc:	2000      	movs	r0, #0
 80149fe:	bd08      	pop	{r3, pc}
 8014a00:	200b      	movs	r0, #11
 8014a02:	4770      	bx	lr
 8014a04:	0000      	movs	r0, r0
	...

08014a08 <rclc_executor_handle_init>:
 8014a08:	4603      	mov	r3, r0
 8014a0a:	b178      	cbz	r0, 8014a2c <rclc_executor_handle_init+0x24>
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	f04f 0c0b 	mov.w	ip, #11
 8014a12:	6341      	str	r1, [r0, #52]	@ 0x34
 8014a14:	4610      	mov	r0, r2
 8014a16:	f8a3 c000 	strh.w	ip, [r3]
 8014a1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8014a1c:	871a      	strh	r2, [r3, #56]	@ 0x38
 8014a1e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8014a30 <rclc_executor_handle_init+0x28>
 8014a22:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8014a26:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 8014a2a:	4770      	bx	lr
 8014a2c:	200b      	movs	r0, #11
 8014a2e:	4770      	bx	lr
	...

08014a38 <rclc_support_init>:
 8014a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a3c:	b086      	sub	sp, #24
 8014a3e:	b3bb      	cbz	r3, 8014ab0 <rclc_support_init+0x78>
 8014a40:	4606      	mov	r6, r0
 8014a42:	b3a8      	cbz	r0, 8014ab0 <rclc_support_init+0x78>
 8014a44:	461c      	mov	r4, r3
 8014a46:	460f      	mov	r7, r1
 8014a48:	4690      	mov	r8, r2
 8014a4a:	f001 f98d 	bl	8015d68 <rcl_get_zero_initialized_init_options>
 8014a4e:	f104 050c 	add.w	r5, r4, #12
 8014a52:	9005      	str	r0, [sp, #20]
 8014a54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014a58:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014a5c:	a805      	add	r0, sp, #20
 8014a5e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014a62:	f001 f983 	bl	8015d6c <rcl_init_options_init>
 8014a66:	4605      	mov	r5, r0
 8014a68:	b9e0      	cbnz	r0, 8014aa4 <rclc_support_init+0x6c>
 8014a6a:	ad02      	add	r5, sp, #8
 8014a6c:	4628      	mov	r0, r5
 8014a6e:	f001 f805 	bl	8015a7c <rcl_get_zero_initialized_context>
 8014a72:	4633      	mov	r3, r6
 8014a74:	aa05      	add	r2, sp, #20
 8014a76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014a7a:	e886 0003 	stmia.w	r6, {r0, r1}
 8014a7e:	4641      	mov	r1, r8
 8014a80:	4638      	mov	r0, r7
 8014a82:	f001 f86b 	bl	8015b5c <rcl_init>
 8014a86:	4605      	mov	r5, r0
 8014a88:	b9b8      	cbnz	r0, 8014aba <rclc_support_init+0x82>
 8014a8a:	4622      	mov	r2, r4
 8014a8c:	f106 010c 	add.w	r1, r6, #12
 8014a90:	2003      	movs	r0, #3
 8014a92:	60b4      	str	r4, [r6, #8]
 8014a94:	f002 f97e 	bl	8016d94 <rcl_clock_init>
 8014a98:	4605      	mov	r5, r0
 8014a9a:	b970      	cbnz	r0, 8014aba <rclc_support_init+0x82>
 8014a9c:	a805      	add	r0, sp, #20
 8014a9e:	f001 f9cb 	bl	8015e38 <rcl_init_options_fini>
 8014aa2:	b108      	cbz	r0, 8014aa8 <rclc_support_init+0x70>
 8014aa4:	f000 f94c 	bl	8014d40 <rcutils_reset_error>
 8014aa8:	4628      	mov	r0, r5
 8014aaa:	b006      	add	sp, #24
 8014aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ab0:	250b      	movs	r5, #11
 8014ab2:	4628      	mov	r0, r5
 8014ab4:	b006      	add	sp, #24
 8014ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aba:	f000 f941 	bl	8014d40 <rcutils_reset_error>
 8014abe:	a805      	add	r0, sp, #20
 8014ac0:	f001 f9ba 	bl	8015e38 <rcl_init_options_fini>
 8014ac4:	2800      	cmp	r0, #0
 8014ac6:	d0ef      	beq.n	8014aa8 <rclc_support_init+0x70>
 8014ac8:	e7ec      	b.n	8014aa4 <rclc_support_init+0x6c>
 8014aca:	bf00      	nop

08014acc <rclc_node_init_default>:
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	bf18      	it	ne
 8014ad0:	2a00      	cmpne	r2, #0
 8014ad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ad6:	4616      	mov	r6, r2
 8014ad8:	bf0c      	ite	eq
 8014ada:	2201      	moveq	r2, #1
 8014adc:	2200      	movne	r2, #0
 8014ade:	b0a1      	sub	sp, #132	@ 0x84
 8014ae0:	2900      	cmp	r1, #0
 8014ae2:	bf08      	it	eq
 8014ae4:	f042 0201 	orreq.w	r2, r2, #1
 8014ae8:	bb22      	cbnz	r2, 8014b34 <rclc_node_init_default+0x68>
 8014aea:	4604      	mov	r4, r0
 8014aec:	b310      	cbz	r0, 8014b34 <rclc_node_init_default+0x68>
 8014aee:	f10d 0810 	add.w	r8, sp, #16
 8014af2:	461f      	mov	r7, r3
 8014af4:	460d      	mov	r5, r1
 8014af6:	f10d 0918 	add.w	r9, sp, #24
 8014afa:	4640      	mov	r0, r8
 8014afc:	f001 fa56 	bl	8015fac <rcl_get_zero_initialized_node>
 8014b00:	e898 0003 	ldmia.w	r8, {r0, r1}
 8014b04:	e884 0003 	stmia.w	r4, {r0, r1}
 8014b08:	4648      	mov	r0, r9
 8014b0a:	f001 fbc9 	bl	80162a0 <rcl_node_get_default_options>
 8014b0e:	4640      	mov	r0, r8
 8014b10:	f001 fa4c 	bl	8015fac <rcl_get_zero_initialized_node>
 8014b14:	f8cd 9000 	str.w	r9, [sp]
 8014b18:	463b      	mov	r3, r7
 8014b1a:	4632      	mov	r2, r6
 8014b1c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8014b20:	e884 0003 	stmia.w	r4, {r0, r1}
 8014b24:	4629      	mov	r1, r5
 8014b26:	4620      	mov	r0, r4
 8014b28:	f001 fa4a 	bl	8015fc0 <rcl_node_init>
 8014b2c:	b930      	cbnz	r0, 8014b3c <rclc_node_init_default+0x70>
 8014b2e:	b021      	add	sp, #132	@ 0x84
 8014b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b34:	200b      	movs	r0, #11
 8014b36:	b021      	add	sp, #132	@ 0x84
 8014b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b3c:	9003      	str	r0, [sp, #12]
 8014b3e:	f000 f8ff 	bl	8014d40 <rcutils_reset_error>
 8014b42:	f000 f8fd 	bl	8014d40 <rcutils_reset_error>
 8014b46:	9803      	ldr	r0, [sp, #12]
 8014b48:	b021      	add	sp, #132	@ 0x84
 8014b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b4e:	bf00      	nop

08014b50 <rclc_publisher_init_default>:
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	bf18      	it	ne
 8014b54:	2a00      	cmpne	r2, #0
 8014b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b5a:	4616      	mov	r6, r2
 8014b5c:	bf0c      	ite	eq
 8014b5e:	2201      	moveq	r2, #1
 8014b60:	2200      	movne	r2, #0
 8014b62:	b0a0      	sub	sp, #128	@ 0x80
 8014b64:	2900      	cmp	r1, #0
 8014b66:	bf08      	it	eq
 8014b68:	f042 0201 	orreq.w	r2, r2, #1
 8014b6c:	bb1a      	cbnz	r2, 8014bb6 <rclc_publisher_init_default+0x66>
 8014b6e:	4604      	mov	r4, r0
 8014b70:	b308      	cbz	r0, 8014bb6 <rclc_publisher_init_default+0x66>
 8014b72:	f10d 0810 	add.w	r8, sp, #16
 8014b76:	461f      	mov	r7, r3
 8014b78:	460d      	mov	r5, r1
 8014b7a:	f001 fc97 	bl	80164ac <rcl_get_zero_initialized_publisher>
 8014b7e:	6020      	str	r0, [r4, #0]
 8014b80:	4640      	mov	r0, r8
 8014b82:	f001 fd33 	bl	80165ec <rcl_publisher_get_default_options>
 8014b86:	2250      	movs	r2, #80	@ 0x50
 8014b88:	490d      	ldr	r1, [pc, #52]	@ (8014bc0 <rclc_publisher_init_default+0x70>)
 8014b8a:	4640      	mov	r0, r8
 8014b8c:	f00c fb35 	bl	80211fa <memcpy>
 8014b90:	463b      	mov	r3, r7
 8014b92:	4632      	mov	r2, r6
 8014b94:	4629      	mov	r1, r5
 8014b96:	4620      	mov	r0, r4
 8014b98:	f8cd 8000 	str.w	r8, [sp]
 8014b9c:	f001 fc8c 	bl	80164b8 <rcl_publisher_init>
 8014ba0:	b910      	cbnz	r0, 8014ba8 <rclc_publisher_init_default+0x58>
 8014ba2:	b020      	add	sp, #128	@ 0x80
 8014ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ba8:	9003      	str	r0, [sp, #12]
 8014baa:	f000 f8c9 	bl	8014d40 <rcutils_reset_error>
 8014bae:	9803      	ldr	r0, [sp, #12]
 8014bb0:	b020      	add	sp, #128	@ 0x80
 8014bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bb6:	200b      	movs	r0, #11
 8014bb8:	b020      	add	sp, #128	@ 0x80
 8014bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bbe:	bf00      	nop
 8014bc0:	08023468 	.word	0x08023468

08014bc4 <rclc_service_init_default>:
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	bf18      	it	ne
 8014bc8:	2a00      	cmpne	r2, #0
 8014bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bce:	4616      	mov	r6, r2
 8014bd0:	bf0c      	ite	eq
 8014bd2:	2201      	moveq	r2, #1
 8014bd4:	2200      	movne	r2, #0
 8014bd6:	b09e      	sub	sp, #120	@ 0x78
 8014bd8:	2900      	cmp	r1, #0
 8014bda:	bf08      	it	eq
 8014bdc:	f042 0201 	orreq.w	r2, r2, #1
 8014be0:	bb1a      	cbnz	r2, 8014c2a <rclc_service_init_default+0x66>
 8014be2:	4604      	mov	r4, r0
 8014be4:	b308      	cbz	r0, 8014c2a <rclc_service_init_default+0x66>
 8014be6:	f10d 0810 	add.w	r8, sp, #16
 8014bea:	461f      	mov	r7, r3
 8014bec:	460d      	mov	r5, r1
 8014bee:	f001 fe4b 	bl	8016888 <rcl_get_zero_initialized_service>
 8014bf2:	6020      	str	r0, [r4, #0]
 8014bf4:	4640      	mov	r0, r8
 8014bf6:	f001 fedf 	bl	80169b8 <rcl_service_get_default_options>
 8014bfa:	2250      	movs	r2, #80	@ 0x50
 8014bfc:	490d      	ldr	r1, [pc, #52]	@ (8014c34 <rclc_service_init_default+0x70>)
 8014bfe:	4640      	mov	r0, r8
 8014c00:	f00c fafb 	bl	80211fa <memcpy>
 8014c04:	463b      	mov	r3, r7
 8014c06:	4632      	mov	r2, r6
 8014c08:	4629      	mov	r1, r5
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	f8cd 8000 	str.w	r8, [sp]
 8014c10:	f001 fe40 	bl	8016894 <rcl_service_init>
 8014c14:	b910      	cbnz	r0, 8014c1c <rclc_service_init_default+0x58>
 8014c16:	b01e      	add	sp, #120	@ 0x78
 8014c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c1c:	9003      	str	r0, [sp, #12]
 8014c1e:	f000 f88f 	bl	8014d40 <rcutils_reset_error>
 8014c22:	9803      	ldr	r0, [sp, #12]
 8014c24:	b01e      	add	sp, #120	@ 0x78
 8014c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c2a:	200b      	movs	r0, #11
 8014c2c:	b01e      	add	sp, #120	@ 0x78
 8014c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c32:	bf00      	nop
 8014c34:	080234b8 	.word	0x080234b8

08014c38 <rclc_subscription_init_default>:
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	bf18      	it	ne
 8014c3c:	2a00      	cmpne	r2, #0
 8014c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c42:	4616      	mov	r6, r2
 8014c44:	bf0c      	ite	eq
 8014c46:	2201      	moveq	r2, #1
 8014c48:	2200      	movne	r2, #0
 8014c4a:	b0a0      	sub	sp, #128	@ 0x80
 8014c4c:	2900      	cmp	r1, #0
 8014c4e:	bf08      	it	eq
 8014c50:	f042 0201 	orreq.w	r2, r2, #1
 8014c54:	bb1a      	cbnz	r2, 8014c9e <rclc_subscription_init_default+0x66>
 8014c56:	4604      	mov	r4, r0
 8014c58:	b308      	cbz	r0, 8014c9e <rclc_subscription_init_default+0x66>
 8014c5a:	f10d 0810 	add.w	r8, sp, #16
 8014c5e:	461f      	mov	r7, r3
 8014c60:	460d      	mov	r5, r1
 8014c62:	f001 ff35 	bl	8016ad0 <rcl_get_zero_initialized_subscription>
 8014c66:	6020      	str	r0, [r4, #0]
 8014c68:	4640      	mov	r0, r8
 8014c6a:	f001 ffe5 	bl	8016c38 <rcl_subscription_get_default_options>
 8014c6e:	2250      	movs	r2, #80	@ 0x50
 8014c70:	490d      	ldr	r1, [pc, #52]	@ (8014ca8 <rclc_subscription_init_default+0x70>)
 8014c72:	4640      	mov	r0, r8
 8014c74:	f00c fac1 	bl	80211fa <memcpy>
 8014c78:	463b      	mov	r3, r7
 8014c7a:	4632      	mov	r2, r6
 8014c7c:	4629      	mov	r1, r5
 8014c7e:	4620      	mov	r0, r4
 8014c80:	f8cd 8000 	str.w	r8, [sp]
 8014c84:	f001 ff2a 	bl	8016adc <rcl_subscription_init>
 8014c88:	b910      	cbnz	r0, 8014c90 <rclc_subscription_init_default+0x58>
 8014c8a:	b020      	add	sp, #128	@ 0x80
 8014c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c90:	9003      	str	r0, [sp, #12]
 8014c92:	f000 f855 	bl	8014d40 <rcutils_reset_error>
 8014c96:	9803      	ldr	r0, [sp, #12]
 8014c98:	b020      	add	sp, #128	@ 0x80
 8014c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c9e:	200b      	movs	r0, #11
 8014ca0:	b020      	add	sp, #128	@ 0x80
 8014ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ca6:	bf00      	nop
 8014ca8:	08023508 	.word	0x08023508

08014cac <__default_zero_allocate>:
 8014cac:	f00b bc8e 	b.w	80205cc <calloc>

08014cb0 <__default_reallocate>:
 8014cb0:	f00b be2c 	b.w	802090c <realloc>

08014cb4 <__default_deallocate>:
 8014cb4:	f00b bd08 	b.w	80206c8 <free>

08014cb8 <__default_allocate>:
 8014cb8:	f00b bcfe 	b.w	80206b8 <malloc>

08014cbc <rcutils_get_zero_initialized_allocator>:
 8014cbc:	b510      	push	{r4, lr}
 8014cbe:	4c05      	ldr	r4, [pc, #20]	@ (8014cd4 <rcutils_get_zero_initialized_allocator+0x18>)
 8014cc0:	4686      	mov	lr, r0
 8014cc2:	4684      	mov	ip, r0
 8014cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cca:	6823      	ldr	r3, [r4, #0]
 8014ccc:	4670      	mov	r0, lr
 8014cce:	f8cc 3000 	str.w	r3, [ip]
 8014cd2:	bd10      	pop	{r4, pc}
 8014cd4:	08023558 	.word	0x08023558

08014cd8 <rcutils_get_default_allocator>:
 8014cd8:	b510      	push	{r4, lr}
 8014cda:	4c05      	ldr	r4, [pc, #20]	@ (8014cf0 <rcutils_get_default_allocator+0x18>)
 8014cdc:	4686      	mov	lr, r0
 8014cde:	4684      	mov	ip, r0
 8014ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ce2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ce6:	6823      	ldr	r3, [r4, #0]
 8014ce8:	4670      	mov	r0, lr
 8014cea:	f8cc 3000 	str.w	r3, [ip]
 8014cee:	bd10      	pop	{r4, pc}
 8014cf0:	24000dfc 	.word	0x24000dfc

08014cf4 <rcutils_allocator_is_valid>:
 8014cf4:	b158      	cbz	r0, 8014d0e <rcutils_allocator_is_valid+0x1a>
 8014cf6:	6803      	ldr	r3, [r0, #0]
 8014cf8:	b143      	cbz	r3, 8014d0c <rcutils_allocator_is_valid+0x18>
 8014cfa:	6843      	ldr	r3, [r0, #4]
 8014cfc:	b133      	cbz	r3, 8014d0c <rcutils_allocator_is_valid+0x18>
 8014cfe:	68c3      	ldr	r3, [r0, #12]
 8014d00:	b123      	cbz	r3, 8014d0c <rcutils_allocator_is_valid+0x18>
 8014d02:	6880      	ldr	r0, [r0, #8]
 8014d04:	3800      	subs	r0, #0
 8014d06:	bf18      	it	ne
 8014d08:	2001      	movne	r0, #1
 8014d0a:	4770      	bx	lr
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	4770      	bx	lr

08014d10 <rcutils_get_error_string>:
 8014d10:	4b06      	ldr	r3, [pc, #24]	@ (8014d2c <rcutils_get_error_string+0x1c>)
 8014d12:	781b      	ldrb	r3, [r3, #0]
 8014d14:	b13b      	cbz	r3, 8014d26 <rcutils_get_error_string+0x16>
 8014d16:	4b06      	ldr	r3, [pc, #24]	@ (8014d30 <rcutils_get_error_string+0x20>)
 8014d18:	781a      	ldrb	r2, [r3, #0]
 8014d1a:	b90a      	cbnz	r2, 8014d20 <rcutils_get_error_string+0x10>
 8014d1c:	2201      	movs	r2, #1
 8014d1e:	701a      	strb	r2, [r3, #0]
 8014d20:	4b04      	ldr	r3, [pc, #16]	@ (8014d34 <rcutils_get_error_string+0x24>)
 8014d22:	7818      	ldrb	r0, [r3, #0]
 8014d24:	4770      	bx	lr
 8014d26:	4b04      	ldr	r3, [pc, #16]	@ (8014d38 <rcutils_get_error_string+0x28>)
 8014d28:	7818      	ldrb	r0, [r3, #0]
 8014d2a:	4770      	bx	lr
 8014d2c:	2406490c 	.word	0x2406490c
 8014d30:	24064921 	.word	0x24064921
 8014d34:	24064920 	.word	0x24064920
 8014d38:	0802356c 	.word	0x0802356c
 8014d3c:	00000000 	.word	0x00000000

08014d40 <rcutils_reset_error>:
 8014d40:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8014d60 <rcutils_reset_error+0x20>
 8014d44:	2300      	movs	r3, #0
 8014d46:	4a08      	ldr	r2, [pc, #32]	@ (8014d68 <rcutils_reset_error+0x28>)
 8014d48:	4808      	ldr	r0, [pc, #32]	@ (8014d6c <rcutils_reset_error+0x2c>)
 8014d4a:	8013      	strh	r3, [r2, #0]
 8014d4c:	4908      	ldr	r1, [pc, #32]	@ (8014d70 <rcutils_reset_error+0x30>)
 8014d4e:	7003      	strb	r3, [r0, #0]
 8014d50:	700b      	strb	r3, [r1, #0]
 8014d52:	ed82 7b02 	vstr	d7, [r2, #8]
 8014d56:	4a07      	ldr	r2, [pc, #28]	@ (8014d74 <rcutils_reset_error+0x34>)
 8014d58:	7013      	strb	r3, [r2, #0]
 8014d5a:	4770      	bx	lr
 8014d5c:	f3af 8000 	nop.w
	...
 8014d68:	24064910 	.word	0x24064910
 8014d6c:	24064921 	.word	0x24064921
 8014d70:	24064920 	.word	0x24064920
 8014d74:	2406490c 	.word	0x2406490c

08014d78 <rcutils_system_time_now>:
 8014d78:	b300      	cbz	r0, 8014dbc <rcutils_system_time_now+0x44>
 8014d7a:	b570      	push	{r4, r5, r6, lr}
 8014d7c:	b084      	sub	sp, #16
 8014d7e:	4604      	mov	r4, r0
 8014d80:	2001      	movs	r0, #1
 8014d82:	4669      	mov	r1, sp
 8014d84:	f7ec fff8 	bl	8001d78 <clock_gettime>
 8014d88:	e9dd 3100 	ldrd	r3, r1, [sp]
 8014d8c:	2900      	cmp	r1, #0
 8014d8e:	db12      	blt.n	8014db6 <rcutils_system_time_now+0x3e>
 8014d90:	ea53 0201 	orrs.w	r2, r3, r1
 8014d94:	9d02      	ldr	r5, [sp, #8]
 8014d96:	d101      	bne.n	8014d9c <rcutils_system_time_now+0x24>
 8014d98:	2d00      	cmp	r5, #0
 8014d9a:	db0c      	blt.n	8014db6 <rcutils_system_time_now+0x3e>
 8014d9c:	4e08      	ldr	r6, [pc, #32]	@ (8014dc0 <rcutils_system_time_now+0x48>)
 8014d9e:	2000      	movs	r0, #0
 8014da0:	fba3 3206 	umull	r3, r2, r3, r6
 8014da4:	195b      	adds	r3, r3, r5
 8014da6:	fb06 2201 	mla	r2, r6, r1, r2
 8014daa:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8014dae:	e9c4 3200 	strd	r3, r2, [r4]
 8014db2:	b004      	add	sp, #16
 8014db4:	bd70      	pop	{r4, r5, r6, pc}
 8014db6:	2002      	movs	r0, #2
 8014db8:	b004      	add	sp, #16
 8014dba:	bd70      	pop	{r4, r5, r6, pc}
 8014dbc:	200b      	movs	r0, #11
 8014dbe:	4770      	bx	lr
 8014dc0:	3b9aca00 	.word	0x3b9aca00

08014dc4 <rcutils_steady_time_now>:
 8014dc4:	b300      	cbz	r0, 8014e08 <rcutils_steady_time_now+0x44>
 8014dc6:	b570      	push	{r4, r5, r6, lr}
 8014dc8:	b084      	sub	sp, #16
 8014dca:	4604      	mov	r4, r0
 8014dcc:	2000      	movs	r0, #0
 8014dce:	4669      	mov	r1, sp
 8014dd0:	f7ec ffd2 	bl	8001d78 <clock_gettime>
 8014dd4:	e9dd 3100 	ldrd	r3, r1, [sp]
 8014dd8:	2900      	cmp	r1, #0
 8014dda:	db12      	blt.n	8014e02 <rcutils_steady_time_now+0x3e>
 8014ddc:	ea53 0201 	orrs.w	r2, r3, r1
 8014de0:	9d02      	ldr	r5, [sp, #8]
 8014de2:	d101      	bne.n	8014de8 <rcutils_steady_time_now+0x24>
 8014de4:	2d00      	cmp	r5, #0
 8014de6:	db0c      	blt.n	8014e02 <rcutils_steady_time_now+0x3e>
 8014de8:	4e08      	ldr	r6, [pc, #32]	@ (8014e0c <rcutils_steady_time_now+0x48>)
 8014dea:	2000      	movs	r0, #0
 8014dec:	fba3 3206 	umull	r3, r2, r3, r6
 8014df0:	195b      	adds	r3, r3, r5
 8014df2:	fb06 2201 	mla	r2, r6, r1, r2
 8014df6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8014dfa:	e9c4 3200 	strd	r3, r2, [r4]
 8014dfe:	b004      	add	sp, #16
 8014e00:	bd70      	pop	{r4, r5, r6, pc}
 8014e02:	2002      	movs	r0, #2
 8014e04:	b004      	add	sp, #16
 8014e06:	bd70      	pop	{r4, r5, r6, pc}
 8014e08:	200b      	movs	r0, #11
 8014e0a:	4770      	bx	lr
 8014e0c:	3b9aca00 	.word	0x3b9aca00

08014e10 <rmw_uros_set_custom_transport>:
 8014e10:	b470      	push	{r4, r5, r6}
 8014e12:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8014e16:	b162      	cbz	r2, 8014e32 <rmw_uros_set_custom_transport+0x22>
 8014e18:	b15b      	cbz	r3, 8014e32 <rmw_uros_set_custom_transport+0x22>
 8014e1a:	b155      	cbz	r5, 8014e32 <rmw_uros_set_custom_transport+0x22>
 8014e1c:	b14e      	cbz	r6, 8014e32 <rmw_uros_set_custom_transport+0x22>
 8014e1e:	4c06      	ldr	r4, [pc, #24]	@ (8014e38 <rmw_uros_set_custom_transport+0x28>)
 8014e20:	7020      	strb	r0, [r4, #0]
 8014e22:	2000      	movs	r0, #0
 8014e24:	6166      	str	r6, [r4, #20]
 8014e26:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8014e2a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014e2e:	bc70      	pop	{r4, r5, r6}
 8014e30:	4770      	bx	lr
 8014e32:	200b      	movs	r0, #11
 8014e34:	bc70      	pop	{r4, r5, r6}
 8014e36:	4770      	bx	lr
 8014e38:	24064924 	.word	0x24064924

08014e3c <get_message_typesupport_handle>:
 8014e3c:	6883      	ldr	r3, [r0, #8]
 8014e3e:	4718      	bx	r3

08014e40 <get_message_typesupport_handle_function>:
 8014e40:	b510      	push	{r4, lr}
 8014e42:	4604      	mov	r4, r0
 8014e44:	6800      	ldr	r0, [r0, #0]
 8014e46:	f7eb fa4b 	bl	80002e0 <strcmp>
 8014e4a:	2800      	cmp	r0, #0
 8014e4c:	bf0c      	ite	eq
 8014e4e:	4620      	moveq	r0, r4
 8014e50:	2000      	movne	r0, #0
 8014e52:	bd10      	pop	{r4, pc}

08014e54 <get_service_typesupport_handle>:
 8014e54:	6883      	ldr	r3, [r0, #8]
 8014e56:	4718      	bx	r3

08014e58 <get_service_typesupport_handle_function>:
 8014e58:	b510      	push	{r4, lr}
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	6800      	ldr	r0, [r0, #0]
 8014e5e:	f7eb fa3f 	bl	80002e0 <strcmp>
 8014e62:	2800      	cmp	r0, #0
 8014e64:	bf0c      	ite	eq
 8014e66:	4620      	moveq	r0, r4
 8014e68:	2000      	movne	r0, #0
 8014e6a:	bd10      	pop	{r4, pc}

08014e6c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e70:	6805      	ldr	r5, [r0, #0]
 8014e72:	4604      	mov	r4, r0
 8014e74:	460e      	mov	r6, r1
 8014e76:	4628      	mov	r0, r5
 8014e78:	f7eb fa32 	bl	80002e0 <strcmp>
 8014e7c:	b1c8      	cbz	r0, 8014eb2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8014e7e:	4b11      	ldr	r3, [pc, #68]	@ (8014ec4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	429d      	cmp	r5, r3
 8014e84:	d112      	bne.n	8014eac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014e86:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014e8a:	f8d8 4000 	ldr.w	r4, [r8]
 8014e8e:	b16c      	cbz	r4, 8014eac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014e90:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014e94:	2700      	movs	r7, #0
 8014e96:	3d04      	subs	r5, #4
 8014e98:	4631      	mov	r1, r6
 8014e9a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014e9e:	f7eb fa1f 	bl	80002e0 <strcmp>
 8014ea2:	00bb      	lsls	r3, r7, #2
 8014ea4:	b140      	cbz	r0, 8014eb8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8014ea6:	3701      	adds	r7, #1
 8014ea8:	42bc      	cmp	r4, r7
 8014eaa:	d1f5      	bne.n	8014e98 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8014eac:	2000      	movs	r0, #0
 8014eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eb8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ec0:	58d3      	ldr	r3, [r2, r3]
 8014ec2:	4718      	bx	r3
 8014ec4:	24000e10 	.word	0x24000e10

08014ec8 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8014ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ecc:	6805      	ldr	r5, [r0, #0]
 8014ece:	4604      	mov	r4, r0
 8014ed0:	460e      	mov	r6, r1
 8014ed2:	4628      	mov	r0, r5
 8014ed4:	f7eb fa04 	bl	80002e0 <strcmp>
 8014ed8:	b1c8      	cbz	r0, 8014f0e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8014eda:	4b11      	ldr	r3, [pc, #68]	@ (8014f20 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	429d      	cmp	r5, r3
 8014ee0:	d112      	bne.n	8014f08 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8014ee2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014ee6:	f8d8 4000 	ldr.w	r4, [r8]
 8014eea:	b16c      	cbz	r4, 8014f08 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8014eec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014ef0:	2700      	movs	r7, #0
 8014ef2:	3d04      	subs	r5, #4
 8014ef4:	4631      	mov	r1, r6
 8014ef6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014efa:	f7eb f9f1 	bl	80002e0 <strcmp>
 8014efe:	00bb      	lsls	r3, r7, #2
 8014f00:	b140      	cbz	r0, 8014f14 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8014f02:	3701      	adds	r7, #1
 8014f04:	42bc      	cmp	r4, r7
 8014f06:	d1f5      	bne.n	8014ef4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8014f08:	2000      	movs	r0, #0
 8014f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f0e:	4620      	mov	r0, r4
 8014f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f14:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f1c:	58d3      	ldr	r3, [r2, r3]
 8014f1e:	4718      	bx	r3
 8014f20:	24000e10 	.word	0x24000e10

08014f24 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8014f24:	f006 b8be 	b.w	801b0a4 <std_msgs__msg__Header__init>

08014f28 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8014f28:	f006 b8e0 	b.w	801b0ec <std_msgs__msg__Header__fini>

08014f2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8014f2c:	b508      	push	{r3, lr}
 8014f2e:	f7fd fb8b 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014f32:	4b06      	ldr	r3, [pc, #24]	@ (8014f4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8014f34:	4906      	ldr	r1, [pc, #24]	@ (8014f50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8014f36:	681a      	ldr	r2, [r3, #0]
 8014f38:	60c8      	str	r0, [r1, #12]
 8014f3a:	b10a      	cbz	r2, 8014f40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8014f3c:	4803      	ldr	r0, [pc, #12]	@ (8014f4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8014f3e:	bd08      	pop	{r3, pc}
 8014f40:	4a04      	ldr	r2, [pc, #16]	@ (8014f54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8014f42:	4802      	ldr	r0, [pc, #8]	@ (8014f4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8014f44:	6812      	ldr	r2, [r2, #0]
 8014f46:	601a      	str	r2, [r3, #0]
 8014f48:	bd08      	pop	{r3, pc}
 8014f4a:	bf00      	nop
 8014f4c:	24000e90 	.word	0x24000e90
 8014f50:	24000e18 	.word	0x24000e18
 8014f54:	24000e14 	.word	0x24000e14

08014f58 <_Header__max_serialized_size>:
 8014f58:	b500      	push	{lr}
 8014f5a:	b083      	sub	sp, #12
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	2100      	movs	r1, #0
 8014f60:	f10d 0007 	add.w	r0, sp, #7
 8014f64:	f88d 3007 	strb.w	r3, [sp, #7]
 8014f68:	f7fd fbcc 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 8014f6c:	b003      	add	sp, #12
 8014f6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f72:	bf00      	nop

08014f74 <get_serialized_size_std_msgs__msg__Header>:
 8014f74:	b570      	push	{r4, r5, r6, lr}
 8014f76:	4605      	mov	r5, r0
 8014f78:	b168      	cbz	r0, 8014f96 <get_serialized_size_std_msgs__msg__Header+0x22>
 8014f7a:	460c      	mov	r4, r1
 8014f7c:	f7fd fb72 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 8014f80:	2104      	movs	r1, #4
 8014f82:	1826      	adds	r6, r4, r0
 8014f84:	f1c4 0405 	rsb	r4, r4, #5
 8014f88:	4630      	mov	r0, r6
 8014f8a:	f7fe fe6f 	bl	8013c6c <ucdr_alignment>
 8014f8e:	68e9      	ldr	r1, [r5, #12]
 8014f90:	440c      	add	r4, r1
 8014f92:	4404      	add	r4, r0
 8014f94:	19a0      	adds	r0, r4, r6
 8014f96:	bd70      	pop	{r4, r5, r6, pc}

08014f98 <_Header__cdr_deserialize>:
 8014f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f9a:	460c      	mov	r4, r1
 8014f9c:	b083      	sub	sp, #12
 8014f9e:	b1e9      	cbz	r1, 8014fdc <_Header__cdr_deserialize+0x44>
 8014fa0:	4606      	mov	r6, r0
 8014fa2:	f7fd fbc3 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	4621      	mov	r1, r4
 8014faa:	4630      	mov	r0, r6
 8014fac:	685b      	ldr	r3, [r3, #4]
 8014fae:	68db      	ldr	r3, [r3, #12]
 8014fb0:	4798      	blx	r3
 8014fb2:	6927      	ldr	r7, [r4, #16]
 8014fb4:	ab01      	add	r3, sp, #4
 8014fb6:	68a1      	ldr	r1, [r4, #8]
 8014fb8:	463a      	mov	r2, r7
 8014fba:	4630      	mov	r0, r6
 8014fbc:	f000 fc86 	bl	80158cc <ucdr_deserialize_sequence_char>
 8014fc0:	9b01      	ldr	r3, [sp, #4]
 8014fc2:	4605      	mov	r5, r0
 8014fc4:	b920      	cbnz	r0, 8014fd0 <_Header__cdr_deserialize+0x38>
 8014fc6:	429f      	cmp	r7, r3
 8014fc8:	d30c      	bcc.n	8014fe4 <_Header__cdr_deserialize+0x4c>
 8014fca:	4628      	mov	r0, r5
 8014fcc:	b003      	add	sp, #12
 8014fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fd0:	b103      	cbz	r3, 8014fd4 <_Header__cdr_deserialize+0x3c>
 8014fd2:	3b01      	subs	r3, #1
 8014fd4:	4628      	mov	r0, r5
 8014fd6:	60e3      	str	r3, [r4, #12]
 8014fd8:	b003      	add	sp, #12
 8014fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fdc:	460d      	mov	r5, r1
 8014fde:	4628      	mov	r0, r5
 8014fe0:	b003      	add	sp, #12
 8014fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fe4:	2101      	movs	r1, #1
 8014fe6:	4630      	mov	r0, r6
 8014fe8:	75b5      	strb	r5, [r6, #22]
 8014fea:	7571      	strb	r1, [r6, #21]
 8014fec:	60e5      	str	r5, [r4, #12]
 8014fee:	f7fe fe55 	bl	8013c9c <ucdr_align_to>
 8014ff2:	4630      	mov	r0, r6
 8014ff4:	9901      	ldr	r1, [sp, #4]
 8014ff6:	f7fe fe89 	bl	8013d0c <ucdr_advance_buffer>
 8014ffa:	4628      	mov	r0, r5
 8014ffc:	b003      	add	sp, #12
 8014ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015000 <_Header__cdr_serialize>:
 8015000:	b308      	cbz	r0, 8015046 <_Header__cdr_serialize+0x46>
 8015002:	b570      	push	{r4, r5, r6, lr}
 8015004:	4604      	mov	r4, r0
 8015006:	460d      	mov	r5, r1
 8015008:	f7fd fb90 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801500c:	4603      	mov	r3, r0
 801500e:	4629      	mov	r1, r5
 8015010:	4620      	mov	r0, r4
 8015012:	685b      	ldr	r3, [r3, #4]
 8015014:	689b      	ldr	r3, [r3, #8]
 8015016:	4798      	blx	r3
 8015018:	68a6      	ldr	r6, [r4, #8]
 801501a:	b15e      	cbz	r6, 8015034 <_Header__cdr_serialize+0x34>
 801501c:	4630      	mov	r0, r6
 801501e:	f7eb f969 	bl	80002f4 <strlen>
 8015022:	4603      	mov	r3, r0
 8015024:	1c42      	adds	r2, r0, #1
 8015026:	4631      	mov	r1, r6
 8015028:	4628      	mov	r0, r5
 801502a:	60e3      	str	r3, [r4, #12]
 801502c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015030:	f000 bc3a 	b.w	80158a8 <ucdr_serialize_sequence_char>
 8015034:	4633      	mov	r3, r6
 8015036:	4632      	mov	r2, r6
 8015038:	4631      	mov	r1, r6
 801503a:	4628      	mov	r0, r5
 801503c:	60e3      	str	r3, [r4, #12]
 801503e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015042:	f000 bc31 	b.w	80158a8 <ucdr_serialize_sequence_char>
 8015046:	4770      	bx	lr

08015048 <_Header__get_serialized_size>:
 8015048:	b538      	push	{r3, r4, r5, lr}
 801504a:	4604      	mov	r4, r0
 801504c:	b150      	cbz	r0, 8015064 <_Header__get_serialized_size+0x1c>
 801504e:	2100      	movs	r1, #0
 8015050:	f7fd fb08 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 8015054:	2104      	movs	r1, #4
 8015056:	4605      	mov	r5, r0
 8015058:	f7fe fe08 	bl	8013c6c <ucdr_alignment>
 801505c:	68e2      	ldr	r2, [r4, #12]
 801505e:	3205      	adds	r2, #5
 8015060:	1953      	adds	r3, r2, r5
 8015062:	4418      	add	r0, r3
 8015064:	bd38      	pop	{r3, r4, r5, pc}
 8015066:	bf00      	nop

08015068 <max_serialized_size_std_msgs__msg__Header>:
 8015068:	2301      	movs	r3, #1
 801506a:	b510      	push	{r4, lr}
 801506c:	7003      	strb	r3, [r0, #0]
 801506e:	4604      	mov	r4, r0
 8015070:	f7fd fb48 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 8015074:	2300      	movs	r3, #0
 8015076:	7023      	strb	r3, [r4, #0]
 8015078:	bd10      	pop	{r4, pc}
 801507a:	bf00      	nop

0801507c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801507c:	4800      	ldr	r0, [pc, #0]	@ (8015080 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801507e:	4770      	bx	lr
 8015080:	24000e9c 	.word	0x24000e9c

08015084 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8015084:	4b04      	ldr	r3, [pc, #16]	@ (8015098 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8015086:	681a      	ldr	r2, [r3, #0]
 8015088:	b10a      	cbz	r2, 801508e <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 801508a:	4803      	ldr	r0, [pc, #12]	@ (8015098 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 801508c:	4770      	bx	lr
 801508e:	4a03      	ldr	r2, [pc, #12]	@ (801509c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 8015090:	4801      	ldr	r0, [pc, #4]	@ (8015098 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8015092:	6812      	ldr	r2, [r2, #0]
 8015094:	601a      	str	r2, [r3, #0]
 8015096:	4770      	bx	lr
 8015098:	24000ecc 	.word	0x24000ecc
 801509c:	24000e10 	.word	0x24000e10

080150a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80150a0:	4a02      	ldr	r2, [pc, #8]	@ (80150ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 80150a2:	4b03      	ldr	r3, [pc, #12]	@ (80150b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 80150a4:	6812      	ldr	r2, [r2, #0]
 80150a6:	601a      	str	r2, [r3, #0]
 80150a8:	4770      	bx	lr
 80150aa:	bf00      	nop
 80150ac:	24000e10 	.word	0x24000e10
 80150b0:	24000ecc 	.word	0x24000ecc

080150b4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80150b4:	4b04      	ldr	r3, [pc, #16]	@ (80150c8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80150b6:	681a      	ldr	r2, [r3, #0]
 80150b8:	b10a      	cbz	r2, 80150be <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 80150ba:	4803      	ldr	r0, [pc, #12]	@ (80150c8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80150bc:	4770      	bx	lr
 80150be:	4a03      	ldr	r2, [pc, #12]	@ (80150cc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 80150c0:	4801      	ldr	r0, [pc, #4]	@ (80150c8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80150c2:	6812      	ldr	r2, [r2, #0]
 80150c4:	601a      	str	r2, [r3, #0]
 80150c6:	4770      	bx	lr
 80150c8:	24000ee0 	.word	0x24000ee0
 80150cc:	24000e10 	.word	0x24000e10

080150d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80150d0:	4a02      	ldr	r2, [pc, #8]	@ (80150dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 80150d2:	4b03      	ldr	r3, [pc, #12]	@ (80150e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 80150d4:	6812      	ldr	r2, [r2, #0]
 80150d6:	601a      	str	r2, [r3, #0]
 80150d8:	4770      	bx	lr
 80150da:	bf00      	nop
 80150dc:	24000e10 	.word	0x24000e10
 80150e0:	24000ee0 	.word	0x24000ee0

080150e4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80150e4:	4b04      	ldr	r3, [pc, #16]	@ (80150f8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80150e6:	681a      	ldr	r2, [r3, #0]
 80150e8:	b10a      	cbz	r2, 80150ee <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 80150ea:	4803      	ldr	r0, [pc, #12]	@ (80150f8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80150ec:	4770      	bx	lr
 80150ee:	4a03      	ldr	r2, [pc, #12]	@ (80150fc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 80150f0:	4801      	ldr	r0, [pc, #4]	@ (80150f8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80150f2:	6812      	ldr	r2, [r2, #0]
 80150f4:	601a      	str	r2, [r3, #0]
 80150f6:	4770      	bx	lr
 80150f8:	24000ef4 	.word	0x24000ef4
 80150fc:	24000e10 	.word	0x24000e10

08015100 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8015100:	4a02      	ldr	r2, [pc, #8]	@ (801510c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 8015102:	4b03      	ldr	r3, [pc, #12]	@ (8015110 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8015104:	6812      	ldr	r2, [r2, #0]
 8015106:	601a      	str	r2, [r3, #0]
 8015108:	4770      	bx	lr
 801510a:	bf00      	nop
 801510c:	24000e10 	.word	0x24000e10
 8015110:	24000ef4 	.word	0x24000ef4

08015114 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8015114:	4b04      	ldr	r3, [pc, #16]	@ (8015128 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8015116:	681a      	ldr	r2, [r3, #0]
 8015118:	b10a      	cbz	r2, 801511e <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 801511a:	4803      	ldr	r0, [pc, #12]	@ (8015128 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 801511c:	4770      	bx	lr
 801511e:	4a03      	ldr	r2, [pc, #12]	@ (801512c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 8015120:	4801      	ldr	r0, [pc, #4]	@ (8015128 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8015122:	6812      	ldr	r2, [r2, #0]
 8015124:	601a      	str	r2, [r3, #0]
 8015126:	4770      	bx	lr
 8015128:	24000f08 	.word	0x24000f08
 801512c:	24000e10 	.word	0x24000e10

08015130 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8015130:	4a02      	ldr	r2, [pc, #8]	@ (801513c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8015132:	4b03      	ldr	r3, [pc, #12]	@ (8015140 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8015134:	6812      	ldr	r2, [r2, #0]
 8015136:	601a      	str	r2, [r3, #0]
 8015138:	4770      	bx	lr
 801513a:	bf00      	nop
 801513c:	24000e10 	.word	0x24000e10
 8015140:	24000f08 	.word	0x24000f08

08015144 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8015144:	f005 bfde 	b.w	801b104 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

08015148 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 8015148:	f006 b800 	b.w	801b14c <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

0801514c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 801514c:	b510      	push	{r4, lr}
 801514e:	4c08      	ldr	r4, [pc, #32]	@ (8015170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8015150:	f7ff feec 	bl	8014f2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8015154:	60e0      	str	r0, [r4, #12]
 8015156:	f006 f865 	bl	801b224 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801515a:	4b06      	ldr	r3, [pc, #24]	@ (8015174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 801515c:	64a0      	str	r0, [r4, #72]	@ 0x48
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	b10a      	cbz	r2, 8015166 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 8015162:	4804      	ldr	r0, [pc, #16]	@ (8015174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8015164:	bd10      	pop	{r4, pc}
 8015166:	4a04      	ldr	r2, [pc, #16]	@ (8015178 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 8015168:	4802      	ldr	r0, [pc, #8]	@ (8015174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 801516a:	6812      	ldr	r2, [r2, #0]
 801516c:	601a      	str	r2, [r3, #0]
 801516e:	bd10      	pop	{r4, pc}
 8015170:	24000f14 	.word	0x24000f14
 8015174:	24000f8c 	.word	0x24000f8c
 8015178:	24000e14 	.word	0x24000e14

0801517c <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 801517c:	f005 bff2 	b.w	801b164 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

08015180 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 8015180:	f006 b814 	b.w	801b1ac <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08015184 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8015184:	b510      	push	{r4, lr}
 8015186:	4c08      	ldr	r4, [pc, #32]	@ (80151a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 8015188:	f7ff fed0 	bl	8014f2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 801518c:	60e0      	str	r0, [r4, #12]
 801518e:	f006 f85b 	bl	801b248 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8015192:	4b06      	ldr	r3, [pc, #24]	@ (80151ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8015194:	64a0      	str	r0, [r4, #72]	@ 0x48
 8015196:	681a      	ldr	r2, [r3, #0]
 8015198:	b10a      	cbz	r2, 801519e <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 801519a:	4804      	ldr	r0, [pc, #16]	@ (80151ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 801519c:	bd10      	pop	{r4, pc}
 801519e:	4a04      	ldr	r2, [pc, #16]	@ (80151b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 80151a0:	4802      	ldr	r0, [pc, #8]	@ (80151ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80151a2:	6812      	ldr	r2, [r2, #0]
 80151a4:	601a      	str	r2, [r3, #0]
 80151a6:	bd10      	pop	{r4, pc}
 80151a8:	24000f98 	.word	0x24000f98
 80151ac:	24001010 	.word	0x24001010
 80151b0:	24000e14 	.word	0x24000e14

080151b4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 80151b4:	f006 b806 	b.w	801b1c4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

080151b8 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 80151b8:	f006 b816 	b.w	801b1e8 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

080151bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80151bc:	b508      	push	{r3, lr}
 80151be:	f7fd fa43 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80151c2:	4b06      	ldr	r3, [pc, #24]	@ (80151dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80151c4:	4906      	ldr	r1, [pc, #24]	@ (80151e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	60c8      	str	r0, [r1, #12]
 80151ca:	b10a      	cbz	r2, 80151d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 80151cc:	4803      	ldr	r0, [pc, #12]	@ (80151dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80151ce:	bd08      	pop	{r3, pc}
 80151d0:	4a04      	ldr	r2, [pc, #16]	@ (80151e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 80151d2:	4802      	ldr	r0, [pc, #8]	@ (80151dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80151d4:	6812      	ldr	r2, [r2, #0]
 80151d6:	601a      	str	r2, [r3, #0]
 80151d8:	bd08      	pop	{r3, pc}
 80151da:	bf00      	nop
 80151dc:	24001094 	.word	0x24001094
 80151e0:	2400101c 	.word	0x2400101c
 80151e4:	24000e14 	.word	0x24000e14

080151e8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 80151e8:	f006 b802 	b.w	801b1f0 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

080151ec <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 80151ec:	f006 b812 	b.w	801b214 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

080151f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80151f0:	b508      	push	{r3, lr}
 80151f2:	f7fd fa29 	bl	8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80151f6:	4b06      	ldr	r3, [pc, #24]	@ (8015210 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 80151f8:	4906      	ldr	r1, [pc, #24]	@ (8015214 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 80151fa:	681a      	ldr	r2, [r3, #0]
 80151fc:	60c8      	str	r0, [r1, #12]
 80151fe:	b10a      	cbz	r2, 8015204 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8015200:	4803      	ldr	r0, [pc, #12]	@ (8015210 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8015202:	bd08      	pop	{r3, pc}
 8015204:	4a04      	ldr	r2, [pc, #16]	@ (8015218 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 8015206:	4802      	ldr	r0, [pc, #8]	@ (8015210 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8015208:	6812      	ldr	r2, [r2, #0]
 801520a:	601a      	str	r2, [r3, #0]
 801520c:	bd08      	pop	{r3, pc}
 801520e:	bf00      	nop
 8015210:	24001118 	.word	0x24001118
 8015214:	240010a0 	.word	0x240010a0
 8015218:	24000e14 	.word	0x24000e14

0801521c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 801521c:	b538      	push	{r3, r4, r5, lr}
 801521e:	4604      	mov	r4, r0
 8015220:	b150      	cbz	r0, 8015238 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8015222:	460d      	mov	r5, r1
 8015224:	f7ff fea6 	bl	8014f74 <get_serialized_size_std_msgs__msg__Header>
 8015228:	4603      	mov	r3, r0
 801522a:	f104 0018 	add.w	r0, r4, #24
 801522e:	461c      	mov	r4, r3
 8015230:	18e9      	adds	r1, r5, r3
 8015232:	f006 f817 	bl	801b264 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8015236:	4420      	add	r0, r4
 8015238:	bd38      	pop	{r3, r4, r5, pc}
 801523a:	bf00      	nop

0801523c <_ActuationCommandStamped__cdr_deserialize>:
 801523c:	b570      	push	{r4, r5, r6, lr}
 801523e:	460c      	mov	r4, r1
 8015240:	b199      	cbz	r1, 801526a <_ActuationCommandStamped__cdr_deserialize+0x2e>
 8015242:	4605      	mov	r5, r0
 8015244:	f7ff ff1a 	bl	801507c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8015248:	4603      	mov	r3, r0
 801524a:	4621      	mov	r1, r4
 801524c:	4628      	mov	r0, r5
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	68db      	ldr	r3, [r3, #12]
 8015252:	4798      	blx	r3
 8015254:	f006 f88e 	bl	801b374 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8015258:	4603      	mov	r3, r0
 801525a:	f104 0118 	add.w	r1, r4, #24
 801525e:	4628      	mov	r0, r5
 8015260:	685b      	ldr	r3, [r3, #4]
 8015262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015266:	68db      	ldr	r3, [r3, #12]
 8015268:	4718      	bx	r3
 801526a:	4608      	mov	r0, r1
 801526c:	bd70      	pop	{r4, r5, r6, pc}
 801526e:	bf00      	nop

08015270 <_ActuationCommandStamped__cdr_serialize>:
 8015270:	b510      	push	{r4, lr}
 8015272:	b082      	sub	sp, #8
 8015274:	9101      	str	r1, [sp, #4]
 8015276:	b1a0      	cbz	r0, 80152a2 <_ActuationCommandStamped__cdr_serialize+0x32>
 8015278:	4604      	mov	r4, r0
 801527a:	f7ff feff 	bl	801507c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801527e:	4603      	mov	r3, r0
 8015280:	9901      	ldr	r1, [sp, #4]
 8015282:	4620      	mov	r0, r4
 8015284:	685b      	ldr	r3, [r3, #4]
 8015286:	689b      	ldr	r3, [r3, #8]
 8015288:	4798      	blx	r3
 801528a:	f006 f873 	bl	801b374 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801528e:	4603      	mov	r3, r0
 8015290:	9901      	ldr	r1, [sp, #4]
 8015292:	f104 0018 	add.w	r0, r4, #24
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	689b      	ldr	r3, [r3, #8]
 801529a:	b002      	add	sp, #8
 801529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152a0:	4718      	bx	r3
 80152a2:	b002      	add	sp, #8
 80152a4:	bd10      	pop	{r4, pc}
 80152a6:	bf00      	nop

080152a8 <_ActuationCommandStamped__get_serialized_size>:
 80152a8:	b510      	push	{r4, lr}
 80152aa:	4604      	mov	r4, r0
 80152ac:	b148      	cbz	r0, 80152c2 <_ActuationCommandStamped__get_serialized_size+0x1a>
 80152ae:	2100      	movs	r1, #0
 80152b0:	f7ff fe60 	bl	8014f74 <get_serialized_size_std_msgs__msg__Header>
 80152b4:	4601      	mov	r1, r0
 80152b6:	f104 0018 	add.w	r0, r4, #24
 80152ba:	460c      	mov	r4, r1
 80152bc:	f005 ffd2 	bl	801b264 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80152c0:	4420      	add	r0, r4
 80152c2:	bd10      	pop	{r4, pc}

080152c4 <_ActuationCommandStamped__max_serialized_size>:
 80152c4:	b510      	push	{r4, lr}
 80152c6:	b082      	sub	sp, #8
 80152c8:	2301      	movs	r3, #1
 80152ca:	2100      	movs	r1, #0
 80152cc:	f10d 0007 	add.w	r0, sp, #7
 80152d0:	f88d 3007 	strb.w	r3, [sp, #7]
 80152d4:	f7ff fec8 	bl	8015068 <max_serialized_size_std_msgs__msg__Header>
 80152d8:	4604      	mov	r4, r0
 80152da:	f10d 0007 	add.w	r0, sp, #7
 80152de:	4621      	mov	r1, r4
 80152e0:	f006 f82e 	bl	801b340 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80152e4:	4420      	add	r0, r4
 80152e6:	b002      	add	sp, #8
 80152e8:	bd10      	pop	{r4, pc}
 80152ea:	bf00      	nop

080152ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80152ec:	4800      	ldr	r0, [pc, #0]	@ (80152f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 80152ee:	4770      	bx	lr
 80152f0:	24001124 	.word	0x24001124

080152f4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80152f4:	b538      	push	{r3, r4, r5, lr}
 80152f6:	4604      	mov	r4, r0
 80152f8:	b150      	cbz	r0, 8015310 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 80152fa:	460d      	mov	r5, r1
 80152fc:	f7ff fe3a 	bl	8014f74 <get_serialized_size_std_msgs__msg__Header>
 8015300:	4603      	mov	r3, r0
 8015302:	f104 0018 	add.w	r0, r4, #24
 8015306:	461c      	mov	r4, r3
 8015308:	18e9      	adds	r1, r5, r3
 801530a:	f006 f837 	bl	801b37c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 801530e:	4420      	add	r0, r4
 8015310:	bd38      	pop	{r3, r4, r5, pc}
 8015312:	bf00      	nop

08015314 <_ActuationStatusStamped__cdr_deserialize>:
 8015314:	b570      	push	{r4, r5, r6, lr}
 8015316:	460c      	mov	r4, r1
 8015318:	b199      	cbz	r1, 8015342 <_ActuationStatusStamped__cdr_deserialize+0x2e>
 801531a:	4605      	mov	r5, r0
 801531c:	f7ff feae 	bl	801507c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8015320:	4603      	mov	r3, r0
 8015322:	4621      	mov	r1, r4
 8015324:	4628      	mov	r0, r5
 8015326:	685b      	ldr	r3, [r3, #4]
 8015328:	68db      	ldr	r3, [r3, #12]
 801532a:	4798      	blx	r3
 801532c:	f006 f8ae 	bl	801b48c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8015330:	4603      	mov	r3, r0
 8015332:	f104 0118 	add.w	r1, r4, #24
 8015336:	4628      	mov	r0, r5
 8015338:	685b      	ldr	r3, [r3, #4]
 801533a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801533e:	68db      	ldr	r3, [r3, #12]
 8015340:	4718      	bx	r3
 8015342:	4608      	mov	r0, r1
 8015344:	bd70      	pop	{r4, r5, r6, pc}
 8015346:	bf00      	nop

08015348 <_ActuationStatusStamped__cdr_serialize>:
 8015348:	b510      	push	{r4, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	9101      	str	r1, [sp, #4]
 801534e:	b1a0      	cbz	r0, 801537a <_ActuationStatusStamped__cdr_serialize+0x32>
 8015350:	4604      	mov	r4, r0
 8015352:	f7ff fe93 	bl	801507c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8015356:	4603      	mov	r3, r0
 8015358:	9901      	ldr	r1, [sp, #4]
 801535a:	4620      	mov	r0, r4
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	689b      	ldr	r3, [r3, #8]
 8015360:	4798      	blx	r3
 8015362:	f006 f893 	bl	801b48c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8015366:	4603      	mov	r3, r0
 8015368:	9901      	ldr	r1, [sp, #4]
 801536a:	f104 0018 	add.w	r0, r4, #24
 801536e:	685b      	ldr	r3, [r3, #4]
 8015370:	689b      	ldr	r3, [r3, #8]
 8015372:	b002      	add	sp, #8
 8015374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015378:	4718      	bx	r3
 801537a:	b002      	add	sp, #8
 801537c:	bd10      	pop	{r4, pc}
 801537e:	bf00      	nop

08015380 <_ActuationStatusStamped__get_serialized_size>:
 8015380:	b510      	push	{r4, lr}
 8015382:	4604      	mov	r4, r0
 8015384:	b148      	cbz	r0, 801539a <_ActuationStatusStamped__get_serialized_size+0x1a>
 8015386:	2100      	movs	r1, #0
 8015388:	f7ff fdf4 	bl	8014f74 <get_serialized_size_std_msgs__msg__Header>
 801538c:	4601      	mov	r1, r0
 801538e:	f104 0018 	add.w	r0, r4, #24
 8015392:	460c      	mov	r4, r1
 8015394:	f005 fff2 	bl	801b37c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8015398:	4420      	add	r0, r4
 801539a:	bd10      	pop	{r4, pc}

0801539c <_ActuationStatusStamped__max_serialized_size>:
 801539c:	b510      	push	{r4, lr}
 801539e:	b082      	sub	sp, #8
 80153a0:	2301      	movs	r3, #1
 80153a2:	2100      	movs	r1, #0
 80153a4:	f10d 0007 	add.w	r0, sp, #7
 80153a8:	f88d 3007 	strb.w	r3, [sp, #7]
 80153ac:	f7ff fe5c 	bl	8015068 <max_serialized_size_std_msgs__msg__Header>
 80153b0:	4604      	mov	r4, r0
 80153b2:	f10d 0007 	add.w	r0, sp, #7
 80153b6:	4621      	mov	r1, r4
 80153b8:	f006 f84e 	bl	801b458 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80153bc:	4420      	add	r0, r4
 80153be:	b002      	add	sp, #8
 80153c0:	bd10      	pop	{r4, pc}
 80153c2:	bf00      	nop

080153c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80153c4:	4800      	ldr	r0, [pc, #0]	@ (80153c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 80153c6:	4770      	bx	lr
 80153c8:	2400114c 	.word	0x2400114c

080153cc <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80153cc:	b538      	push	{r3, r4, r5, lr}
 80153ce:	b158      	cbz	r0, 80153e8 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 80153d0:	460d      	mov	r5, r1
 80153d2:	f7fd f947 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 80153d6:	2104      	movs	r1, #4
 80153d8:	182c      	adds	r4, r5, r0
 80153da:	f1c5 0504 	rsb	r5, r5, #4
 80153de:	4620      	mov	r0, r4
 80153e0:	f7fe fc44 	bl	8013c6c <ucdr_alignment>
 80153e4:	4428      	add	r0, r5
 80153e6:	4420      	add	r0, r4
 80153e8:	bd38      	pop	{r3, r4, r5, pc}
 80153ea:	bf00      	nop

080153ec <_SteeringWheelStatusStamped__cdr_deserialize>:
 80153ec:	b538      	push	{r3, r4, r5, lr}
 80153ee:	460c      	mov	r4, r1
 80153f0:	b179      	cbz	r1, 8015412 <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 80153f2:	4605      	mov	r5, r0
 80153f4:	f7fd f99a 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80153f8:	4603      	mov	r3, r0
 80153fa:	4621      	mov	r1, r4
 80153fc:	4628      	mov	r0, r5
 80153fe:	685b      	ldr	r3, [r3, #4]
 8015400:	68db      	ldr	r3, [r3, #12]
 8015402:	4798      	blx	r3
 8015404:	f104 0108 	add.w	r1, r4, #8
 8015408:	4628      	mov	r0, r5
 801540a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801540e:	f7fe b9af 	b.w	8013770 <ucdr_deserialize_float>
 8015412:	4608      	mov	r0, r1
 8015414:	bd38      	pop	{r3, r4, r5, pc}
 8015416:	bf00      	nop

08015418 <_SteeringWheelStatusStamped__cdr_serialize>:
 8015418:	b188      	cbz	r0, 801543e <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 801541a:	b538      	push	{r3, r4, r5, lr}
 801541c:	4604      	mov	r4, r0
 801541e:	460d      	mov	r5, r1
 8015420:	f7fd f984 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8015424:	4603      	mov	r3, r0
 8015426:	4629      	mov	r1, r5
 8015428:	4620      	mov	r0, r4
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	689b      	ldr	r3, [r3, #8]
 801542e:	4798      	blx	r3
 8015430:	ed94 0a02 	vldr	s0, [r4, #8]
 8015434:	4628      	mov	r0, r5
 8015436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801543a:	f7fe b901 	b.w	8013640 <ucdr_serialize_float>
 801543e:	4770      	bx	lr

08015440 <_SteeringWheelStatusStamped__get_serialized_size>:
 8015440:	b150      	cbz	r0, 8015458 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 8015442:	2100      	movs	r1, #0
 8015444:	b510      	push	{r4, lr}
 8015446:	f7fd f90d 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 801544a:	4604      	mov	r4, r0
 801544c:	2104      	movs	r1, #4
 801544e:	f7fe fc0d 	bl	8013c6c <ucdr_alignment>
 8015452:	4420      	add	r0, r4
 8015454:	3004      	adds	r0, #4
 8015456:	bd10      	pop	{r4, pc}
 8015458:	4770      	bx	lr
 801545a:	bf00      	nop

0801545c <_SteeringWheelStatusStamped__max_serialized_size>:
 801545c:	b510      	push	{r4, lr}
 801545e:	b082      	sub	sp, #8
 8015460:	2301      	movs	r3, #1
 8015462:	2100      	movs	r1, #0
 8015464:	f10d 0007 	add.w	r0, sp, #7
 8015468:	f88d 3007 	strb.w	r3, [sp, #7]
 801546c:	f7fd f94a 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 8015470:	4604      	mov	r4, r0
 8015472:	2104      	movs	r1, #4
 8015474:	f7fe fbfa 	bl	8013c6c <ucdr_alignment>
 8015478:	4420      	add	r0, r4
 801547a:	3004      	adds	r0, #4
 801547c:	b002      	add	sp, #8
 801547e:	bd10      	pop	{r4, pc}

08015480 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8015480:	4800      	ldr	r0, [pc, #0]	@ (8015484 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 8015482:	4770      	bx	lr
 8015484:	24001174 	.word	0x24001174

08015488 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8015488:	b538      	push	{r3, r4, r5, lr}
 801548a:	b158      	cbz	r0, 80154a4 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 801548c:	460d      	mov	r5, r1
 801548e:	f7fd f8e9 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 8015492:	2101      	movs	r1, #1
 8015494:	182c      	adds	r4, r5, r0
 8015496:	f1c5 0501 	rsb	r5, r5, #1
 801549a:	4620      	mov	r0, r4
 801549c:	f7fe fbe6 	bl	8013c6c <ucdr_alignment>
 80154a0:	4428      	add	r0, r5
 80154a2:	4420      	add	r0, r4
 80154a4:	bd38      	pop	{r3, r4, r5, pc}
 80154a6:	bf00      	nop

080154a8 <_VehicleEmergencyStamped__cdr_deserialize>:
 80154a8:	b538      	push	{r3, r4, r5, lr}
 80154aa:	460c      	mov	r4, r1
 80154ac:	b179      	cbz	r1, 80154ce <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 80154ae:	4605      	mov	r5, r0
 80154b0:	f7fd f93c 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80154b4:	4603      	mov	r3, r0
 80154b6:	4621      	mov	r1, r4
 80154b8:	4628      	mov	r0, r5
 80154ba:	685b      	ldr	r3, [r3, #4]
 80154bc:	68db      	ldr	r3, [r3, #12]
 80154be:	4798      	blx	r3
 80154c0:	f104 0108 	add.w	r1, r4, #8
 80154c4:	4628      	mov	r0, r5
 80154c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154ca:	f7fd b949 	b.w	8012760 <ucdr_deserialize_bool>
 80154ce:	4608      	mov	r0, r1
 80154d0:	bd38      	pop	{r3, r4, r5, pc}
 80154d2:	bf00      	nop

080154d4 <_VehicleEmergencyStamped__cdr_serialize>:
 80154d4:	b180      	cbz	r0, 80154f8 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 80154d6:	b538      	push	{r3, r4, r5, lr}
 80154d8:	4604      	mov	r4, r0
 80154da:	460d      	mov	r5, r1
 80154dc:	f7fd f926 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80154e0:	4603      	mov	r3, r0
 80154e2:	4629      	mov	r1, r5
 80154e4:	4620      	mov	r0, r4
 80154e6:	685b      	ldr	r3, [r3, #4]
 80154e8:	689b      	ldr	r3, [r3, #8]
 80154ea:	4798      	blx	r3
 80154ec:	7a21      	ldrb	r1, [r4, #8]
 80154ee:	4628      	mov	r0, r5
 80154f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154f4:	f7fd b91e 	b.w	8012734 <ucdr_serialize_bool>
 80154f8:	4770      	bx	lr
 80154fa:	bf00      	nop

080154fc <_VehicleEmergencyStamped__get_serialized_size>:
 80154fc:	b150      	cbz	r0, 8015514 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 80154fe:	2100      	movs	r1, #0
 8015500:	b510      	push	{r4, lr}
 8015502:	f7fd f8af 	bl	8012664 <get_serialized_size_builtin_interfaces__msg__Time>
 8015506:	4604      	mov	r4, r0
 8015508:	2101      	movs	r1, #1
 801550a:	f7fe fbaf 	bl	8013c6c <ucdr_alignment>
 801550e:	4420      	add	r0, r4
 8015510:	3001      	adds	r0, #1
 8015512:	bd10      	pop	{r4, pc}
 8015514:	4770      	bx	lr
 8015516:	bf00      	nop

08015518 <_VehicleEmergencyStamped__max_serialized_size>:
 8015518:	b510      	push	{r4, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	2401      	movs	r4, #1
 801551e:	2100      	movs	r1, #0
 8015520:	f10d 0007 	add.w	r0, sp, #7
 8015524:	f88d 4007 	strb.w	r4, [sp, #7]
 8015528:	f7fd f8ec 	bl	8012704 <max_serialized_size_builtin_interfaces__msg__Time>
 801552c:	4621      	mov	r1, r4
 801552e:	4604      	mov	r4, r0
 8015530:	f7fe fb9c 	bl	8013c6c <ucdr_alignment>
 8015534:	4420      	add	r0, r4
 8015536:	3001      	adds	r0, #1
 8015538:	b002      	add	sp, #8
 801553a:	bd10      	pop	{r4, pc}

0801553c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801553c:	4800      	ldr	r0, [pc, #0]	@ (8015540 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 801553e:	4770      	bx	lr
 8015540:	2400119c 	.word	0x2400119c

08015544 <autoware_control_msgs__msg__Control__init>:
 8015544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015548:	4605      	mov	r5, r0
 801554a:	b3c0      	cbz	r0, 80155be <autoware_control_msgs__msg__Control__init+0x7a>
 801554c:	f000 f9a6 	bl	801589c <builtin_interfaces__msg__Time__init>
 8015550:	4604      	mov	r4, r0
 8015552:	b310      	cbz	r0, 801559a <autoware_control_msgs__msg__Control__init+0x56>
 8015554:	f105 0608 	add.w	r6, r5, #8
 8015558:	4630      	mov	r0, r6
 801555a:	f000 f99f 	bl	801589c <builtin_interfaces__msg__Time__init>
 801555e:	4604      	mov	r4, r0
 8015560:	2800      	cmp	r0, #0
 8015562:	d040      	beq.n	80155e6 <autoware_control_msgs__msg__Control__init+0xa2>
 8015564:	f105 0710 	add.w	r7, r5, #16
 8015568:	4638      	mov	r0, r7
 801556a:	f000 f855 	bl	8015618 <autoware_control_msgs__msg__Lateral__init>
 801556e:	4604      	mov	r4, r0
 8015570:	b348      	cbz	r0, 80155c6 <autoware_control_msgs__msg__Control__init+0x82>
 8015572:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 8015576:	4640      	mov	r0, r8
 8015578:	f000 f87e 	bl	8015678 <autoware_control_msgs__msg__Longitudinal__init>
 801557c:	4604      	mov	r4, r0
 801557e:	b9d8      	cbnz	r0, 80155b8 <autoware_control_msgs__msg__Control__init+0x74>
 8015580:	4628      	mov	r0, r5
 8015582:	f000 f98f 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 8015586:	4630      	mov	r0, r6
 8015588:	f000 f98c 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801558c:	4638      	mov	r0, r7
 801558e:	f000 f867 	bl	8015660 <autoware_control_msgs__msg__Lateral__fini>
 8015592:	4640      	mov	r0, r8
 8015594:	f000 f894 	bl	80156c0 <autoware_control_msgs__msg__Longitudinal__fini>
 8015598:	e00e      	b.n	80155b8 <autoware_control_msgs__msg__Control__init+0x74>
 801559a:	4628      	mov	r0, r5
 801559c:	f000 f982 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80155a0:	f105 0008 	add.w	r0, r5, #8
 80155a4:	f000 f97e 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80155a8:	f105 0010 	add.w	r0, r5, #16
 80155ac:	f000 f858 	bl	8015660 <autoware_control_msgs__msg__Lateral__fini>
 80155b0:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 80155b4:	f000 f884 	bl	80156c0 <autoware_control_msgs__msg__Longitudinal__fini>
 80155b8:	4620      	mov	r0, r4
 80155ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155be:	4604      	mov	r4, r0
 80155c0:	4620      	mov	r0, r4
 80155c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155c6:	4628      	mov	r0, r5
 80155c8:	f000 f96c 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80155cc:	4630      	mov	r0, r6
 80155ce:	f000 f969 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80155d2:	4638      	mov	r0, r7
 80155d4:	f000 f844 	bl	8015660 <autoware_control_msgs__msg__Lateral__fini>
 80155d8:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 80155dc:	f000 f870 	bl	80156c0 <autoware_control_msgs__msg__Longitudinal__fini>
 80155e0:	4620      	mov	r0, r4
 80155e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155e6:	4628      	mov	r0, r5
 80155e8:	f000 f95c 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80155ec:	4630      	mov	r0, r6
 80155ee:	e7d9      	b.n	80155a4 <autoware_control_msgs__msg__Control__init+0x60>

080155f0 <autoware_control_msgs__msg__Control__fini>:
 80155f0:	b188      	cbz	r0, 8015616 <autoware_control_msgs__msg__Control__fini+0x26>
 80155f2:	b510      	push	{r4, lr}
 80155f4:	4604      	mov	r4, r0
 80155f6:	f000 f955 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80155fa:	f104 0008 	add.w	r0, r4, #8
 80155fe:	f000 f951 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 8015602:	f104 0010 	add.w	r0, r4, #16
 8015606:	f000 f82b 	bl	8015660 <autoware_control_msgs__msg__Lateral__fini>
 801560a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 801560e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015612:	f000 b855 	b.w	80156c0 <autoware_control_msgs__msg__Longitudinal__fini>
 8015616:	4770      	bx	lr

08015618 <autoware_control_msgs__msg__Lateral__init>:
 8015618:	b570      	push	{r4, r5, r6, lr}
 801561a:	4605      	mov	r5, r0
 801561c:	b1a8      	cbz	r0, 801564a <autoware_control_msgs__msg__Lateral__init+0x32>
 801561e:	f000 f93d 	bl	801589c <builtin_interfaces__msg__Time__init>
 8015622:	4604      	mov	r4, r0
 8015624:	b140      	cbz	r0, 8015638 <autoware_control_msgs__msg__Lateral__init+0x20>
 8015626:	f105 0608 	add.w	r6, r5, #8
 801562a:	4630      	mov	r0, r6
 801562c:	f000 f936 	bl	801589c <builtin_interfaces__msg__Time__init>
 8015630:	4604      	mov	r4, r0
 8015632:	b168      	cbz	r0, 8015650 <autoware_control_msgs__msg__Lateral__init+0x38>
 8015634:	4620      	mov	r0, r4
 8015636:	bd70      	pop	{r4, r5, r6, pc}
 8015638:	4628      	mov	r0, r5
 801563a:	f000 f933 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801563e:	f105 0008 	add.w	r0, r5, #8
 8015642:	f000 f92f 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 8015646:	4620      	mov	r0, r4
 8015648:	bd70      	pop	{r4, r5, r6, pc}
 801564a:	4604      	mov	r4, r0
 801564c:	4620      	mov	r0, r4
 801564e:	bd70      	pop	{r4, r5, r6, pc}
 8015650:	4628      	mov	r0, r5
 8015652:	f000 f927 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 8015656:	4630      	mov	r0, r6
 8015658:	f000 f924 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801565c:	e7ea      	b.n	8015634 <autoware_control_msgs__msg__Lateral__init+0x1c>
 801565e:	bf00      	nop

08015660 <autoware_control_msgs__msg__Lateral__fini>:
 8015660:	b148      	cbz	r0, 8015676 <autoware_control_msgs__msg__Lateral__fini+0x16>
 8015662:	b510      	push	{r4, lr}
 8015664:	4604      	mov	r4, r0
 8015666:	f000 f91d 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801566a:	f104 0008 	add.w	r0, r4, #8
 801566e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015672:	f000 b917 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 8015676:	4770      	bx	lr

08015678 <autoware_control_msgs__msg__Longitudinal__init>:
 8015678:	b570      	push	{r4, r5, r6, lr}
 801567a:	4605      	mov	r5, r0
 801567c:	b1a8      	cbz	r0, 80156aa <autoware_control_msgs__msg__Longitudinal__init+0x32>
 801567e:	f000 f90d 	bl	801589c <builtin_interfaces__msg__Time__init>
 8015682:	4604      	mov	r4, r0
 8015684:	b140      	cbz	r0, 8015698 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 8015686:	f105 0608 	add.w	r6, r5, #8
 801568a:	4630      	mov	r0, r6
 801568c:	f000 f906 	bl	801589c <builtin_interfaces__msg__Time__init>
 8015690:	4604      	mov	r4, r0
 8015692:	b168      	cbz	r0, 80156b0 <autoware_control_msgs__msg__Longitudinal__init+0x38>
 8015694:	4620      	mov	r0, r4
 8015696:	bd70      	pop	{r4, r5, r6, pc}
 8015698:	4628      	mov	r0, r5
 801569a:	f000 f903 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801569e:	f105 0008 	add.w	r0, r5, #8
 80156a2:	f000 f8ff 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80156a6:	4620      	mov	r0, r4
 80156a8:	bd70      	pop	{r4, r5, r6, pc}
 80156aa:	4604      	mov	r4, r0
 80156ac:	4620      	mov	r0, r4
 80156ae:	bd70      	pop	{r4, r5, r6, pc}
 80156b0:	4628      	mov	r0, r5
 80156b2:	f000 f8f7 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80156b6:	4630      	mov	r0, r6
 80156b8:	f000 f8f4 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80156bc:	e7ea      	b.n	8015694 <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 80156be:	bf00      	nop

080156c0 <autoware_control_msgs__msg__Longitudinal__fini>:
 80156c0:	b148      	cbz	r0, 80156d6 <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 80156c2:	b510      	push	{r4, lr}
 80156c4:	4604      	mov	r4, r0
 80156c6:	f000 f8ed 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80156ca:	f104 0008 	add.w	r0, r4, #8
 80156ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156d2:	f000 b8e7 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 80156d6:	4770      	bx	lr

080156d8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 80156d8:	b538      	push	{r3, r4, r5, lr}
 80156da:	4604      	mov	r4, r0
 80156dc:	b128      	cbz	r0, 80156ea <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 80156de:	f000 f8dd 	bl	801589c <builtin_interfaces__msg__Time__init>
 80156e2:	4605      	mov	r5, r0
 80156e4:	b120      	cbz	r0, 80156f0 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 80156e6:	4628      	mov	r0, r5
 80156e8:	bd38      	pop	{r3, r4, r5, pc}
 80156ea:	4605      	mov	r5, r0
 80156ec:	4628      	mov	r0, r5
 80156ee:	bd38      	pop	{r3, r4, r5, pc}
 80156f0:	4620      	mov	r0, r4
 80156f2:	f000 f8d7 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80156f6:	4628      	mov	r0, r5
 80156f8:	bd38      	pop	{r3, r4, r5, pc}
 80156fa:	bf00      	nop

080156fc <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 80156fc:	b108      	cbz	r0, 8015702 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 80156fe:	f000 b8d1 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 8015702:	4770      	bx	lr

08015704 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8015704:	3800      	subs	r0, #0
 8015706:	bf18      	it	ne
 8015708:	2001      	movne	r0, #1
 801570a:	4770      	bx	lr

0801570c <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 801570c:	4770      	bx	lr
 801570e:	bf00      	nop

08015710 <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 8015710:	b538      	push	{r3, r4, r5, lr}
 8015712:	4604      	mov	r4, r0
 8015714:	b128      	cbz	r0, 8015722 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 8015716:	f000 f8c1 	bl	801589c <builtin_interfaces__msg__Time__init>
 801571a:	4605      	mov	r5, r0
 801571c:	b120      	cbz	r0, 8015728 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 801571e:	4628      	mov	r0, r5
 8015720:	bd38      	pop	{r3, r4, r5, pc}
 8015722:	4605      	mov	r5, r0
 8015724:	4628      	mov	r0, r5
 8015726:	bd38      	pop	{r3, r4, r5, pc}
 8015728:	4620      	mov	r0, r4
 801572a:	f000 f8bb 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801572e:	4628      	mov	r0, r5
 8015730:	bd38      	pop	{r3, r4, r5, pc}
 8015732:	bf00      	nop

08015734 <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 8015734:	b108      	cbz	r0, 801573a <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8015736:	f000 b8b5 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 801573a:	4770      	bx	lr

0801573c <autoware_vehicle_msgs__msg__GearCommand__init>:
 801573c:	b538      	push	{r3, r4, r5, lr}
 801573e:	4604      	mov	r4, r0
 8015740:	b128      	cbz	r0, 801574e <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 8015742:	f000 f8ab 	bl	801589c <builtin_interfaces__msg__Time__init>
 8015746:	4605      	mov	r5, r0
 8015748:	b120      	cbz	r0, 8015754 <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 801574a:	4628      	mov	r0, r5
 801574c:	bd38      	pop	{r3, r4, r5, pc}
 801574e:	4605      	mov	r5, r0
 8015750:	4628      	mov	r0, r5
 8015752:	bd38      	pop	{r3, r4, r5, pc}
 8015754:	4620      	mov	r0, r4
 8015756:	f000 f8a5 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801575a:	4628      	mov	r0, r5
 801575c:	bd38      	pop	{r3, r4, r5, pc}
 801575e:	bf00      	nop

08015760 <autoware_vehicle_msgs__msg__GearCommand__fini>:
 8015760:	b108      	cbz	r0, 8015766 <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 8015762:	f000 b89f 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 8015766:	4770      	bx	lr

08015768 <autoware_vehicle_msgs__msg__GearReport__init>:
 8015768:	b538      	push	{r3, r4, r5, lr}
 801576a:	4604      	mov	r4, r0
 801576c:	b128      	cbz	r0, 801577a <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 801576e:	f000 f895 	bl	801589c <builtin_interfaces__msg__Time__init>
 8015772:	4605      	mov	r5, r0
 8015774:	b120      	cbz	r0, 8015780 <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 8015776:	4628      	mov	r0, r5
 8015778:	bd38      	pop	{r3, r4, r5, pc}
 801577a:	4605      	mov	r5, r0
 801577c:	4628      	mov	r0, r5
 801577e:	bd38      	pop	{r3, r4, r5, pc}
 8015780:	4620      	mov	r0, r4
 8015782:	f000 f88f 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 8015786:	4628      	mov	r0, r5
 8015788:	bd38      	pop	{r3, r4, r5, pc}
 801578a:	bf00      	nop

0801578c <autoware_vehicle_msgs__msg__GearReport__fini>:
 801578c:	b108      	cbz	r0, 8015792 <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 801578e:	f000 b889 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 8015792:	4770      	bx	lr

08015794 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 8015794:	b538      	push	{r3, r4, r5, lr}
 8015796:	4604      	mov	r4, r0
 8015798:	b128      	cbz	r0, 80157a6 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 801579a:	f000 f87f 	bl	801589c <builtin_interfaces__msg__Time__init>
 801579e:	4605      	mov	r5, r0
 80157a0:	b120      	cbz	r0, 80157ac <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 80157a2:	4628      	mov	r0, r5
 80157a4:	bd38      	pop	{r3, r4, r5, pc}
 80157a6:	4605      	mov	r5, r0
 80157a8:	4628      	mov	r0, r5
 80157aa:	bd38      	pop	{r3, r4, r5, pc}
 80157ac:	4620      	mov	r0, r4
 80157ae:	f000 f879 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80157b2:	4628      	mov	r0, r5
 80157b4:	bd38      	pop	{r3, r4, r5, pc}
 80157b6:	bf00      	nop

080157b8 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 80157b8:	b108      	cbz	r0, 80157be <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 80157ba:	f000 b873 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 80157be:	4770      	bx	lr

080157c0 <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 80157c0:	b538      	push	{r3, r4, r5, lr}
 80157c2:	4604      	mov	r4, r0
 80157c4:	b128      	cbz	r0, 80157d2 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 80157c6:	f000 f869 	bl	801589c <builtin_interfaces__msg__Time__init>
 80157ca:	4605      	mov	r5, r0
 80157cc:	b120      	cbz	r0, 80157d8 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 80157ce:	4628      	mov	r0, r5
 80157d0:	bd38      	pop	{r3, r4, r5, pc}
 80157d2:	4605      	mov	r5, r0
 80157d4:	4628      	mov	r0, r5
 80157d6:	bd38      	pop	{r3, r4, r5, pc}
 80157d8:	4620      	mov	r0, r4
 80157da:	f000 f863 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 80157de:	4628      	mov	r0, r5
 80157e0:	bd38      	pop	{r3, r4, r5, pc}
 80157e2:	bf00      	nop

080157e4 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 80157e4:	b108      	cbz	r0, 80157ea <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 80157e6:	f000 b85d 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 80157ea:	4770      	bx	lr

080157ec <autoware_vehicle_msgs__msg__SteeringReport__init>:
 80157ec:	b538      	push	{r3, r4, r5, lr}
 80157ee:	4604      	mov	r4, r0
 80157f0:	b128      	cbz	r0, 80157fe <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 80157f2:	f000 f853 	bl	801589c <builtin_interfaces__msg__Time__init>
 80157f6:	4605      	mov	r5, r0
 80157f8:	b120      	cbz	r0, 8015804 <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 80157fa:	4628      	mov	r0, r5
 80157fc:	bd38      	pop	{r3, r4, r5, pc}
 80157fe:	4605      	mov	r5, r0
 8015800:	4628      	mov	r0, r5
 8015802:	bd38      	pop	{r3, r4, r5, pc}
 8015804:	4620      	mov	r0, r4
 8015806:	f000 f84d 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801580a:	4628      	mov	r0, r5
 801580c:	bd38      	pop	{r3, r4, r5, pc}
 801580e:	bf00      	nop

08015810 <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 8015810:	b108      	cbz	r0, 8015816 <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8015812:	f000 b847 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 8015816:	4770      	bx	lr

08015818 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8015818:	b538      	push	{r3, r4, r5, lr}
 801581a:	4604      	mov	r4, r0
 801581c:	b128      	cbz	r0, 801582a <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 801581e:	f000 f83d 	bl	801589c <builtin_interfaces__msg__Time__init>
 8015822:	4605      	mov	r5, r0
 8015824:	b120      	cbz	r0, 8015830 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 8015826:	4628      	mov	r0, r5
 8015828:	bd38      	pop	{r3, r4, r5, pc}
 801582a:	4605      	mov	r5, r0
 801582c:	4628      	mov	r0, r5
 801582e:	bd38      	pop	{r3, r4, r5, pc}
 8015830:	4620      	mov	r0, r4
 8015832:	f000 f837 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 8015836:	4628      	mov	r0, r5
 8015838:	bd38      	pop	{r3, r4, r5, pc}
 801583a:	bf00      	nop

0801583c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 801583c:	b108      	cbz	r0, 8015842 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 801583e:	f000 b831 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 8015842:	4770      	bx	lr

08015844 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8015844:	b538      	push	{r3, r4, r5, lr}
 8015846:	4604      	mov	r4, r0
 8015848:	b128      	cbz	r0, 8015856 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 801584a:	f000 f827 	bl	801589c <builtin_interfaces__msg__Time__init>
 801584e:	4605      	mov	r5, r0
 8015850:	b120      	cbz	r0, 801585c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 8015852:	4628      	mov	r0, r5
 8015854:	bd38      	pop	{r3, r4, r5, pc}
 8015856:	4605      	mov	r5, r0
 8015858:	4628      	mov	r0, r5
 801585a:	bd38      	pop	{r3, r4, r5, pc}
 801585c:	4620      	mov	r0, r4
 801585e:	f000 f821 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 8015862:	4628      	mov	r0, r5
 8015864:	bd38      	pop	{r3, r4, r5, pc}
 8015866:	bf00      	nop

08015868 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8015868:	b108      	cbz	r0, 801586e <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 801586a:	f000 b81b 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 801586e:	4770      	bx	lr

08015870 <autoware_vehicle_msgs__msg__VelocityReport__init>:
 8015870:	b538      	push	{r3, r4, r5, lr}
 8015872:	4604      	mov	r4, r0
 8015874:	b128      	cbz	r0, 8015882 <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 8015876:	f005 fc15 	bl	801b0a4 <std_msgs__msg__Header__init>
 801587a:	4605      	mov	r5, r0
 801587c:	b120      	cbz	r0, 8015888 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 801587e:	4628      	mov	r0, r5
 8015880:	bd38      	pop	{r3, r4, r5, pc}
 8015882:	4605      	mov	r5, r0
 8015884:	4628      	mov	r0, r5
 8015886:	bd38      	pop	{r3, r4, r5, pc}
 8015888:	4620      	mov	r0, r4
 801588a:	f005 fc2f 	bl	801b0ec <std_msgs__msg__Header__fini>
 801588e:	4628      	mov	r0, r5
 8015890:	bd38      	pop	{r3, r4, r5, pc}
 8015892:	bf00      	nop

08015894 <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 8015894:	b108      	cbz	r0, 801589a <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8015896:	f005 bc29 	b.w	801b0ec <std_msgs__msg__Header__fini>
 801589a:	4770      	bx	lr

0801589c <builtin_interfaces__msg__Time__init>:
 801589c:	3800      	subs	r0, #0
 801589e:	bf18      	it	ne
 80158a0:	2001      	movne	r0, #1
 80158a2:	4770      	bx	lr

080158a4 <builtin_interfaces__msg__Time__fini>:
 80158a4:	4770      	bx	lr
 80158a6:	bf00      	nop

080158a8 <ucdr_serialize_sequence_char>:
 80158a8:	b570      	push	{r4, r5, r6, lr}
 80158aa:	4615      	mov	r5, r2
 80158ac:	460e      	mov	r6, r1
 80158ae:	7d01      	ldrb	r1, [r0, #20]
 80158b0:	4604      	mov	r4, r0
 80158b2:	f7fd fa1b 	bl	8012cec <ucdr_serialize_endian_uint32_t>
 80158b6:	b90d      	cbnz	r5, 80158bc <ucdr_serialize_sequence_char+0x14>
 80158b8:	2001      	movs	r0, #1
 80158ba:	bd70      	pop	{r4, r5, r6, pc}
 80158bc:	462b      	mov	r3, r5
 80158be:	4632      	mov	r2, r6
 80158c0:	7d21      	ldrb	r1, [r4, #20]
 80158c2:	4620      	mov	r0, r4
 80158c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158c8:	f005 bde4 	b.w	801b494 <ucdr_serialize_endian_array_char>

080158cc <ucdr_deserialize_sequence_char>:
 80158cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158d0:	461d      	mov	r5, r3
 80158d2:	4616      	mov	r6, r2
 80158d4:	460f      	mov	r7, r1
 80158d6:	461a      	mov	r2, r3
 80158d8:	7d01      	ldrb	r1, [r0, #20]
 80158da:	4604      	mov	r4, r0
 80158dc:	f7fd fb2e 	bl	8012f3c <ucdr_deserialize_endian_uint32_t>
 80158e0:	682b      	ldr	r3, [r5, #0]
 80158e2:	429e      	cmp	r6, r3
 80158e4:	d201      	bcs.n	80158ea <ucdr_deserialize_sequence_char+0x1e>
 80158e6:	2201      	movs	r2, #1
 80158e8:	75a2      	strb	r2, [r4, #22]
 80158ea:	b913      	cbnz	r3, 80158f2 <ucdr_deserialize_sequence_char+0x26>
 80158ec:	2001      	movs	r0, #1
 80158ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158f2:	463a      	mov	r2, r7
 80158f4:	7d21      	ldrb	r1, [r4, #20]
 80158f6:	4620      	mov	r0, r4
 80158f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158fc:	f005 bdfc 	b.w	801b4f8 <ucdr_deserialize_endian_array_char>

08015900 <ucdr_serialize_sequence_uint8_t>:
 8015900:	b570      	push	{r4, r5, r6, lr}
 8015902:	4615      	mov	r5, r2
 8015904:	460e      	mov	r6, r1
 8015906:	7d01      	ldrb	r1, [r0, #20]
 8015908:	4604      	mov	r4, r0
 801590a:	f7fd f9ef 	bl	8012cec <ucdr_serialize_endian_uint32_t>
 801590e:	b90d      	cbnz	r5, 8015914 <ucdr_serialize_sequence_uint8_t+0x14>
 8015910:	2001      	movs	r0, #1
 8015912:	bd70      	pop	{r4, r5, r6, pc}
 8015914:	462b      	mov	r3, r5
 8015916:	4632      	mov	r2, r6
 8015918:	7d21      	ldrb	r1, [r4, #20]
 801591a:	4620      	mov	r0, r4
 801591c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015920:	f005 be50 	b.w	801b5c4 <ucdr_serialize_endian_array_uint8_t>

08015924 <ucdr_deserialize_sequence_uint8_t>:
 8015924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015928:	461d      	mov	r5, r3
 801592a:	4616      	mov	r6, r2
 801592c:	460f      	mov	r7, r1
 801592e:	461a      	mov	r2, r3
 8015930:	7d01      	ldrb	r1, [r0, #20]
 8015932:	4604      	mov	r4, r0
 8015934:	f7fd fb02 	bl	8012f3c <ucdr_deserialize_endian_uint32_t>
 8015938:	682b      	ldr	r3, [r5, #0]
 801593a:	429e      	cmp	r6, r3
 801593c:	d201      	bcs.n	8015942 <ucdr_deserialize_sequence_uint8_t+0x1e>
 801593e:	2201      	movs	r2, #1
 8015940:	75a2      	strb	r2, [r4, #22]
 8015942:	b913      	cbnz	r3, 801594a <ucdr_deserialize_sequence_uint8_t+0x26>
 8015944:	2001      	movs	r0, #1
 8015946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801594a:	463a      	mov	r2, r7
 801594c:	7d21      	ldrb	r1, [r4, #20]
 801594e:	4620      	mov	r0, r4
 8015950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015954:	f005 be9c 	b.w	801b690 <ucdr_deserialize_endian_array_uint8_t>

08015958 <rcl_client_get_rmw_handle>:
 8015958:	b118      	cbz	r0, 8015962 <rcl_client_get_rmw_handle+0xa>
 801595a:	6800      	ldr	r0, [r0, #0]
 801595c:	b108      	cbz	r0, 8015962 <rcl_client_get_rmw_handle+0xa>
 801595e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015962:	4770      	bx	lr

08015964 <rcl_send_request>:
 8015964:	b570      	push	{r4, r5, r6, lr}
 8015966:	b082      	sub	sp, #8
 8015968:	b1f8      	cbz	r0, 80159aa <rcl_send_request+0x46>
 801596a:	4604      	mov	r4, r0
 801596c:	6800      	ldr	r0, [r0, #0]
 801596e:	b1e0      	cbz	r0, 80159aa <rcl_send_request+0x46>
 8015970:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8015974:	b1cb      	cbz	r3, 80159aa <rcl_send_request+0x46>
 8015976:	460e      	mov	r6, r1
 8015978:	b1e1      	cbz	r1, 80159b4 <rcl_send_request+0x50>
 801597a:	4615      	mov	r5, r2
 801597c:	b1d2      	cbz	r2, 80159b4 <rcl_send_request+0x50>
 801597e:	2105      	movs	r1, #5
 8015980:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015984:	f002 ff74 	bl	8018870 <__atomic_load_8>
 8015988:	4602      	mov	r2, r0
 801598a:	460b      	mov	r3, r1
 801598c:	4631      	mov	r1, r6
 801598e:	e9c5 2300 	strd	r2, r3, [r5]
 8015992:	6823      	ldr	r3, [r4, #0]
 8015994:	462a      	mov	r2, r5
 8015996:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801599a:	f004 f991 	bl	8019cc0 <rmw_send_request>
 801599e:	4606      	mov	r6, r0
 80159a0:	b160      	cbz	r0, 80159bc <rcl_send_request+0x58>
 80159a2:	2601      	movs	r6, #1
 80159a4:	4630      	mov	r0, r6
 80159a6:	b002      	add	sp, #8
 80159a8:	bd70      	pop	{r4, r5, r6, pc}
 80159aa:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80159ae:	4630      	mov	r0, r6
 80159b0:	b002      	add	sp, #8
 80159b2:	bd70      	pop	{r4, r5, r6, pc}
 80159b4:	260b      	movs	r6, #11
 80159b6:	4630      	mov	r0, r6
 80159b8:	b002      	add	sp, #8
 80159ba:	bd70      	pop	{r4, r5, r6, pc}
 80159bc:	6820      	ldr	r0, [r4, #0]
 80159be:	2105      	movs	r1, #5
 80159c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80159c4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80159c8:	9100      	str	r1, [sp, #0]
 80159ca:	f002 ffbd 	bl	8018948 <__atomic_exchange_8>
 80159ce:	4630      	mov	r0, r6
 80159d0:	b002      	add	sp, #8
 80159d2:	bd70      	pop	{r4, r5, r6, pc}
 80159d4:	0000      	movs	r0, r0
	...

080159d8 <rcl_take_response>:
 80159d8:	b570      	push	{r4, r5, r6, lr}
 80159da:	468e      	mov	lr, r1
 80159dc:	b08c      	sub	sp, #48	@ 0x30
 80159de:	460c      	mov	r4, r1
 80159e0:	4616      	mov	r6, r2
 80159e2:	f10d 0c18 	add.w	ip, sp, #24
 80159e6:	4605      	mov	r5, r0
 80159e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159f0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80159f4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80159f8:	b35d      	cbz	r5, 8015a52 <rcl_take_response+0x7a>
 80159fa:	682b      	ldr	r3, [r5, #0]
 80159fc:	b34b      	cbz	r3, 8015a52 <rcl_take_response+0x7a>
 80159fe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015a02:	b330      	cbz	r0, 8015a52 <rcl_take_response+0x7a>
 8015a04:	b346      	cbz	r6, 8015a58 <rcl_take_response+0x80>
 8015a06:	2300      	movs	r3, #0
 8015a08:	4632      	mov	r2, r6
 8015a0a:	a902      	add	r1, sp, #8
 8015a0c:	f88d 3007 	strb.w	r3, [sp, #7]
 8015a10:	f10d 0307 	add.w	r3, sp, #7
 8015a14:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8015a60 <rcl_take_response+0x88>
 8015a18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015a1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015a20:	f004 fa56 	bl	8019ed0 <rmw_take_response>
 8015a24:	4605      	mov	r5, r0
 8015a26:	b9c8      	cbnz	r0, 8015a5c <rcl_take_response+0x84>
 8015a28:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015a2c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8015a30:	2a00      	cmp	r2, #0
 8015a32:	bf08      	it	eq
 8015a34:	461d      	moveq	r5, r3
 8015a36:	f10d 0e18 	add.w	lr, sp, #24
 8015a3a:	46a4      	mov	ip, r4
 8015a3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a44:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015a48:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015a4c:	4628      	mov	r0, r5
 8015a4e:	b00c      	add	sp, #48	@ 0x30
 8015a50:	bd70      	pop	{r4, r5, r6, pc}
 8015a52:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8015a56:	e7ee      	b.n	8015a36 <rcl_take_response+0x5e>
 8015a58:	250b      	movs	r5, #11
 8015a5a:	e7ec      	b.n	8015a36 <rcl_take_response+0x5e>
 8015a5c:	2501      	movs	r5, #1
 8015a5e:	e7ea      	b.n	8015a36 <rcl_take_response+0x5e>
	...

08015a68 <rcl_client_is_valid>:
 8015a68:	b130      	cbz	r0, 8015a78 <rcl_client_is_valid+0x10>
 8015a6a:	6800      	ldr	r0, [r0, #0]
 8015a6c:	b120      	cbz	r0, 8015a78 <rcl_client_is_valid+0x10>
 8015a6e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015a72:	3800      	subs	r0, #0
 8015a74:	bf18      	it	ne
 8015a76:	2001      	movne	r0, #1
 8015a78:	4770      	bx	lr
 8015a7a:	bf00      	nop

08015a7c <rcl_get_zero_initialized_context>:
 8015a7c:	4a03      	ldr	r2, [pc, #12]	@ (8015a8c <rcl_get_zero_initialized_context+0x10>)
 8015a7e:	4603      	mov	r3, r0
 8015a80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015a84:	e883 0003 	stmia.w	r3, {r0, r1}
 8015a88:	4618      	mov	r0, r3
 8015a8a:	4770      	bx	lr
 8015a8c:	08023b68 	.word	0x08023b68

08015a90 <rcl_context_is_valid>:
 8015a90:	b118      	cbz	r0, 8015a9a <rcl_context_is_valid+0xa>
 8015a92:	6840      	ldr	r0, [r0, #4]
 8015a94:	3800      	subs	r0, #0
 8015a96:	bf18      	it	ne
 8015a98:	2001      	movne	r0, #1
 8015a9a:	4770      	bx	lr

08015a9c <__cleanup_context>:
 8015a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015aa0:	4606      	mov	r6, r0
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	6800      	ldr	r0, [r0, #0]
 8015aa6:	6073      	str	r3, [r6, #4]
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	d049      	beq.n	8015b40 <__cleanup_context+0xa4>
 8015aac:	6947      	ldr	r7, [r0, #20]
 8015aae:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015ab2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015ab6:	b137      	cbz	r7, 8015ac6 <__cleanup_context+0x2a>
 8015ab8:	3014      	adds	r0, #20
 8015aba:	f000 f9bd 	bl	8015e38 <rcl_init_options_fini>
 8015abe:	4607      	mov	r7, r0
 8015ac0:	2800      	cmp	r0, #0
 8015ac2:	d144      	bne.n	8015b4e <__cleanup_context+0xb2>
 8015ac4:	6830      	ldr	r0, [r6, #0]
 8015ac6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015ac8:	b143      	cbz	r3, 8015adc <__cleanup_context+0x40>
 8015aca:	3028      	adds	r0, #40	@ 0x28
 8015acc:	f003 fe64 	bl	8019798 <rmw_context_fini>
 8015ad0:	b118      	cbz	r0, 8015ada <__cleanup_context+0x3e>
 8015ad2:	2f00      	cmp	r7, #0
 8015ad4:	d03e      	beq.n	8015b54 <__cleanup_context+0xb8>
 8015ad6:	f7ff f933 	bl	8014d40 <rcutils_reset_error>
 8015ada:	6830      	ldr	r0, [r6, #0]
 8015adc:	6a03      	ldr	r3, [r0, #32]
 8015ade:	b1db      	cbz	r3, 8015b18 <__cleanup_context+0x7c>
 8015ae0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015ae4:	2a01      	cmp	r2, #1
 8015ae6:	f17c 0100 	sbcs.w	r1, ip, #0
 8015aea:	db11      	blt.n	8015b10 <__cleanup_context+0x74>
 8015aec:	2400      	movs	r4, #0
 8015aee:	4625      	mov	r5, r4
 8015af0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015af4:	4649      	mov	r1, r9
 8015af6:	b1b8      	cbz	r0, 8015b28 <__cleanup_context+0x8c>
 8015af8:	47c0      	blx	r8
 8015afa:	6833      	ldr	r3, [r6, #0]
 8015afc:	3401      	adds	r4, #1
 8015afe:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8015b02:	f145 0500 	adc.w	r5, r5, #0
 8015b06:	6a1b      	ldr	r3, [r3, #32]
 8015b08:	4294      	cmp	r4, r2
 8015b0a:	eb75 010c 	sbcs.w	r1, r5, ip
 8015b0e:	dbef      	blt.n	8015af0 <__cleanup_context+0x54>
 8015b10:	4618      	mov	r0, r3
 8015b12:	4649      	mov	r1, r9
 8015b14:	47c0      	blx	r8
 8015b16:	6830      	ldr	r0, [r6, #0]
 8015b18:	4649      	mov	r1, r9
 8015b1a:	47c0      	blx	r8
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	4638      	mov	r0, r7
 8015b20:	e9c6 3300 	strd	r3, r3, [r6]
 8015b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b28:	3401      	adds	r4, #1
 8015b2a:	f145 0500 	adc.w	r5, r5, #0
 8015b2e:	4294      	cmp	r4, r2
 8015b30:	eb75 010c 	sbcs.w	r1, r5, ip
 8015b34:	dbdc      	blt.n	8015af0 <__cleanup_context+0x54>
 8015b36:	4618      	mov	r0, r3
 8015b38:	4649      	mov	r1, r9
 8015b3a:	47c0      	blx	r8
 8015b3c:	6830      	ldr	r0, [r6, #0]
 8015b3e:	e7eb      	b.n	8015b18 <__cleanup_context+0x7c>
 8015b40:	4607      	mov	r7, r0
 8015b42:	2300      	movs	r3, #0
 8015b44:	4638      	mov	r0, r7
 8015b46:	e9c6 3300 	strd	r3, r3, [r6]
 8015b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b4e:	f7ff f8f7 	bl	8014d40 <rcutils_reset_error>
 8015b52:	e7b7      	b.n	8015ac4 <__cleanup_context+0x28>
 8015b54:	f009 f9e6 	bl	801ef24 <rcl_convert_rmw_ret_to_rcl_ret>
 8015b58:	4607      	mov	r7, r0
 8015b5a:	e7bc      	b.n	8015ad6 <__cleanup_context+0x3a>

08015b5c <rcl_init>:
 8015b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b60:	1e05      	subs	r5, r0, #0
 8015b62:	b09e      	sub	sp, #120	@ 0x78
 8015b64:	460e      	mov	r6, r1
 8015b66:	4690      	mov	r8, r2
 8015b68:	461f      	mov	r7, r3
 8015b6a:	f340 809f 	ble.w	8015cac <rcl_init+0x150>
 8015b6e:	2900      	cmp	r1, #0
 8015b70:	f000 809f 	beq.w	8015cb2 <rcl_init+0x156>
 8015b74:	f1a1 0e04 	sub.w	lr, r1, #4
 8015b78:	f04f 0c00 	mov.w	ip, #0
 8015b7c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015b80:	f10c 0c01 	add.w	ip, ip, #1
 8015b84:	2c00      	cmp	r4, #0
 8015b86:	f000 8094 	beq.w	8015cb2 <rcl_init+0x156>
 8015b8a:	4565      	cmp	r5, ip
 8015b8c:	d1f6      	bne.n	8015b7c <rcl_init+0x20>
 8015b8e:	f1b8 0f00 	cmp.w	r8, #0
 8015b92:	f000 808e 	beq.w	8015cb2 <rcl_init+0x156>
 8015b96:	f8d8 4000 	ldr.w	r4, [r8]
 8015b9a:	2c00      	cmp	r4, #0
 8015b9c:	f000 8089 	beq.w	8015cb2 <rcl_init+0x156>
 8015ba0:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8015ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015ba6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015baa:	6823      	ldr	r3, [r4, #0]
 8015bac:	a819      	add	r0, sp, #100	@ 0x64
 8015bae:	f8cc 3000 	str.w	r3, [ip]
 8015bb2:	f7ff f89f 	bl	8014cf4 <rcutils_allocator_is_valid>
 8015bb6:	f080 0001 	eor.w	r0, r0, #1
 8015bba:	b2c0      	uxtb	r0, r0
 8015bbc:	2800      	cmp	r0, #0
 8015bbe:	d178      	bne.n	8015cb2 <rcl_init+0x156>
 8015bc0:	2f00      	cmp	r7, #0
 8015bc2:	d076      	beq.n	8015cb2 <rcl_init+0x156>
 8015bc4:	683b      	ldr	r3, [r7, #0]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d178      	bne.n	8015cbc <rcl_init+0x160>
 8015bca:	2178      	movs	r1, #120	@ 0x78
 8015bcc:	2001      	movs	r0, #1
 8015bce:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8015bd2:	4798      	blx	r3
 8015bd4:	4604      	mov	r4, r0
 8015bd6:	6038      	str	r0, [r7, #0]
 8015bd8:	2800      	cmp	r0, #0
 8015bda:	f000 80b6 	beq.w	8015d4a <rcl_init+0x1ee>
 8015bde:	a802      	add	r0, sp, #8
 8015be0:	f003 f9ba 	bl	8018f58 <rmw_get_zero_initialized_context>
 8015be4:	a902      	add	r1, sp, #8
 8015be6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015bea:	2250      	movs	r2, #80	@ 0x50
 8015bec:	f00b fb05 	bl	80211fa <memcpy>
 8015bf0:	ac19      	add	r4, sp, #100	@ 0x64
 8015bf2:	f8d7 e000 	ldr.w	lr, [r7]
 8015bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015bf8:	46f4      	mov	ip, lr
 8015bfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015bfe:	6823      	ldr	r3, [r4, #0]
 8015c00:	f10e 0114 	add.w	r1, lr, #20
 8015c04:	4640      	mov	r0, r8
 8015c06:	f8cc 3000 	str.w	r3, [ip]
 8015c0a:	f000 f93f 	bl	8015e8c <rcl_init_options_copy>
 8015c0e:	4604      	mov	r4, r0
 8015c10:	2800      	cmp	r0, #0
 8015c12:	d144      	bne.n	8015c9e <rcl_init+0x142>
 8015c14:	f8d7 9000 	ldr.w	r9, [r7]
 8015c18:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015c1c:	f8c9 0020 	str.w	r0, [r9, #32]
 8015c20:	f8c9 5018 	str.w	r5, [r9, #24]
 8015c24:	f8c9 801c 	str.w	r8, [r9, #28]
 8015c28:	2d00      	cmp	r5, #0
 8015c2a:	d04e      	beq.n	8015cca <rcl_init+0x16e>
 8015c2c:	2e00      	cmp	r6, #0
 8015c2e:	d04c      	beq.n	8015cca <rcl_init+0x16e>
 8015c30:	2104      	movs	r1, #4
 8015c32:	4628      	mov	r0, r5
 8015c34:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8015c38:	4798      	blx	r3
 8015c3a:	f8c9 0020 	str.w	r0, [r9, #32]
 8015c3e:	f8d7 9000 	ldr.w	r9, [r7]
 8015c42:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015c46:	46ca      	mov	sl, r9
 8015c48:	b343      	cbz	r3, 8015c9c <rcl_init+0x140>
 8015c4a:	2d01      	cmp	r5, #1
 8015c4c:	f178 0300 	sbcs.w	r3, r8, #0
 8015c50:	db3b      	blt.n	8015cca <rcl_init+0x16e>
 8015c52:	2400      	movs	r4, #0
 8015c54:	3e04      	subs	r6, #4
 8015c56:	46a1      	mov	r9, r4
 8015c58:	e00b      	b.n	8015c72 <rcl_init+0x116>
 8015c5a:	6831      	ldr	r1, [r6, #0]
 8015c5c:	f00b facd 	bl	80211fa <memcpy>
 8015c60:	3401      	adds	r4, #1
 8015c62:	f149 0900 	adc.w	r9, r9, #0
 8015c66:	45c8      	cmp	r8, r9
 8015c68:	bf08      	it	eq
 8015c6a:	42a5      	cmpeq	r5, r4
 8015c6c:	d02b      	beq.n	8015cc6 <rcl_init+0x16a>
 8015c6e:	f8d7 a000 	ldr.w	sl, [r7]
 8015c72:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015c76:	f7ea fb3d 	bl	80002f4 <strlen>
 8015c7a:	1c42      	adds	r2, r0, #1
 8015c7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015c7e:	4610      	mov	r0, r2
 8015c80:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8015c82:	f8da a020 	ldr.w	sl, [sl, #32]
 8015c86:	9201      	str	r2, [sp, #4]
 8015c88:	4798      	blx	r3
 8015c8a:	683b      	ldr	r3, [r7, #0]
 8015c8c:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8015c90:	6a1b      	ldr	r3, [r3, #32]
 8015c92:	9a01      	ldr	r2, [sp, #4]
 8015c94:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c98:	2800      	cmp	r0, #0
 8015c9a:	d1de      	bne.n	8015c5a <rcl_init+0xfe>
 8015c9c:	240a      	movs	r4, #10
 8015c9e:	4638      	mov	r0, r7
 8015ca0:	f7ff fefc 	bl	8015a9c <__cleanup_context>
 8015ca4:	4620      	mov	r0, r4
 8015ca6:	b01e      	add	sp, #120	@ 0x78
 8015ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cac:	2900      	cmp	r1, #0
 8015cae:	f43f af6e 	beq.w	8015b8e <rcl_init+0x32>
 8015cb2:	240b      	movs	r4, #11
 8015cb4:	4620      	mov	r0, r4
 8015cb6:	b01e      	add	sp, #120	@ 0x78
 8015cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cbc:	2464      	movs	r4, #100	@ 0x64
 8015cbe:	4620      	mov	r0, r4
 8015cc0:	b01e      	add	sp, #120	@ 0x78
 8015cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cc6:	f8d7 9000 	ldr.w	r9, [r7]
 8015cca:	4926      	ldr	r1, [pc, #152]	@ (8015d64 <rcl_init+0x208>)
 8015ccc:	680b      	ldr	r3, [r1, #0]
 8015cce:	3301      	adds	r3, #1
 8015cd0:	d036      	beq.n	8015d40 <rcl_init+0x1e4>
 8015cd2:	461a      	mov	r2, r3
 8015cd4:	2400      	movs	r4, #0
 8015cd6:	600b      	str	r3, [r1, #0]
 8015cd8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015cdc:	607b      	str	r3, [r7, #4]
 8015cde:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015ce0:	3301      	adds	r3, #1
 8015ce2:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8015ce6:	d034      	beq.n	8015d52 <rcl_init+0x1f6>
 8015ce8:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8015cec:	b93b      	cbnz	r3, 8015cfe <rcl_init+0x1a2>
 8015cee:	3030      	adds	r0, #48	@ 0x30
 8015cf0:	f000 f93a 	bl	8015f68 <rcl_get_localhost_only>
 8015cf4:	4604      	mov	r4, r0
 8015cf6:	2800      	cmp	r0, #0
 8015cf8:	d1d1      	bne.n	8015c9e <rcl_init+0x142>
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	6958      	ldr	r0, [r3, #20]
 8015cfe:	aa18      	add	r2, sp, #96	@ 0x60
 8015d00:	a917      	add	r1, sp, #92	@ 0x5c
 8015d02:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8015d04:	f001 fa3e 	bl	8017184 <rcl_validate_enclave_name>
 8015d08:	4604      	mov	r4, r0
 8015d0a:	2800      	cmp	r0, #0
 8015d0c:	d1c7      	bne.n	8015c9e <rcl_init+0x142>
 8015d0e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015d10:	b9eb      	cbnz	r3, 8015d4e <rcl_init+0x1f2>
 8015d12:	6839      	ldr	r1, [r7, #0]
 8015d14:	694b      	ldr	r3, [r1, #20]
 8015d16:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015d1a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8015d1c:	f000 fd62 	bl	80167e4 <rcl_get_security_options_from_environment>
 8015d20:	4604      	mov	r4, r0
 8015d22:	2800      	cmp	r0, #0
 8015d24:	d1bb      	bne.n	8015c9e <rcl_init+0x142>
 8015d26:	6839      	ldr	r1, [r7, #0]
 8015d28:	6948      	ldr	r0, [r1, #20]
 8015d2a:	3128      	adds	r1, #40	@ 0x28
 8015d2c:	3018      	adds	r0, #24
 8015d2e:	f003 fbfd 	bl	801952c <rmw_init>
 8015d32:	4604      	mov	r4, r0
 8015d34:	2800      	cmp	r0, #0
 8015d36:	d0bd      	beq.n	8015cb4 <rcl_init+0x158>
 8015d38:	f009 f8f4 	bl	801ef24 <rcl_convert_rmw_ret_to_rcl_ret>
 8015d3c:	4604      	mov	r4, r0
 8015d3e:	e7ae      	b.n	8015c9e <rcl_init+0x142>
 8015d40:	2201      	movs	r2, #1
 8015d42:	461c      	mov	r4, r3
 8015d44:	600a      	str	r2, [r1, #0]
 8015d46:	4613      	mov	r3, r2
 8015d48:	e7c6      	b.n	8015cd8 <rcl_init+0x17c>
 8015d4a:	240a      	movs	r4, #10
 8015d4c:	e7b2      	b.n	8015cb4 <rcl_init+0x158>
 8015d4e:	2401      	movs	r4, #1
 8015d50:	e7a5      	b.n	8015c9e <rcl_init+0x142>
 8015d52:	3024      	adds	r0, #36	@ 0x24
 8015d54:	f009 f8fa 	bl	801ef4c <rcl_get_default_domain_id>
 8015d58:	4604      	mov	r4, r0
 8015d5a:	2800      	cmp	r0, #0
 8015d5c:	d19f      	bne.n	8015c9e <rcl_init+0x142>
 8015d5e:	683b      	ldr	r3, [r7, #0]
 8015d60:	6958      	ldr	r0, [r3, #20]
 8015d62:	e7c1      	b.n	8015ce8 <rcl_init+0x18c>
 8015d64:	24064940 	.word	0x24064940

08015d68 <rcl_get_zero_initialized_init_options>:
 8015d68:	2000      	movs	r0, #0
 8015d6a:	4770      	bx	lr

08015d6c <rcl_init_options_init>:
 8015d6c:	b084      	sub	sp, #16
 8015d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d70:	b097      	sub	sp, #92	@ 0x5c
 8015d72:	ae1d      	add	r6, sp, #116	@ 0x74
 8015d74:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8015d78:	2800      	cmp	r0, #0
 8015d7a:	d058      	beq.n	8015e2e <rcl_init_options_init+0xc2>
 8015d7c:	6803      	ldr	r3, [r0, #0]
 8015d7e:	4605      	mov	r5, r0
 8015d80:	b133      	cbz	r3, 8015d90 <rcl_init_options_init+0x24>
 8015d82:	2464      	movs	r4, #100	@ 0x64
 8015d84:	4620      	mov	r0, r4
 8015d86:	b017      	add	sp, #92	@ 0x5c
 8015d88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015d8c:	b004      	add	sp, #16
 8015d8e:	4770      	bx	lr
 8015d90:	4630      	mov	r0, r6
 8015d92:	f7fe ffaf 	bl	8014cf4 <rcutils_allocator_is_valid>
 8015d96:	2800      	cmp	r0, #0
 8015d98:	d049      	beq.n	8015e2e <rcl_init_options_init+0xc2>
 8015d9a:	46b4      	mov	ip, r6
 8015d9c:	ac11      	add	r4, sp, #68	@ 0x44
 8015d9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015da4:	f8dc 3000 	ldr.w	r3, [ip]
 8015da8:	2050      	movs	r0, #80	@ 0x50
 8015daa:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8015dac:	6023      	str	r3, [r4, #0]
 8015dae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015db0:	4798      	blx	r3
 8015db2:	4604      	mov	r4, r0
 8015db4:	6028      	str	r0, [r5, #0]
 8015db6:	2800      	cmp	r0, #0
 8015db8:	d03b      	beq.n	8015e32 <rcl_init_options_init+0xc6>
 8015dba:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8015dbe:	4686      	mov	lr, r0
 8015dc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015dc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015dc8:	f8dc 3000 	ldr.w	r3, [ip]
 8015dcc:	a802      	add	r0, sp, #8
 8015dce:	f8ce 3000 	str.w	r3, [lr]
 8015dd2:	f003 f8d5 	bl	8018f80 <rmw_get_zero_initialized_init_options>
 8015dd6:	f10d 0e08 	add.w	lr, sp, #8
 8015dda:	f104 0c18 	add.w	ip, r4, #24
 8015dde:	682f      	ldr	r7, [r5, #0]
 8015de0:	ac20      	add	r4, sp, #128	@ 0x80
 8015de2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015de6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015dea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015dee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015df2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015df6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015dfa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015dfe:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015e02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015e06:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015e0a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8015e0e:	f107 0018 	add.w	r0, r7, #24
 8015e12:	f003 fa8d 	bl	8019330 <rmw_init_options_init>
 8015e16:	4604      	mov	r4, r0
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	d0b3      	beq.n	8015d84 <rcl_init_options_init+0x18>
 8015e1c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8015e1e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015e20:	6828      	ldr	r0, [r5, #0]
 8015e22:	4798      	blx	r3
 8015e24:	4620      	mov	r0, r4
 8015e26:	f009 f87d 	bl	801ef24 <rcl_convert_rmw_ret_to_rcl_ret>
 8015e2a:	4604      	mov	r4, r0
 8015e2c:	e7aa      	b.n	8015d84 <rcl_init_options_init+0x18>
 8015e2e:	240b      	movs	r4, #11
 8015e30:	e7a8      	b.n	8015d84 <rcl_init_options_init+0x18>
 8015e32:	240a      	movs	r4, #10
 8015e34:	e7a6      	b.n	8015d84 <rcl_init_options_init+0x18>
 8015e36:	bf00      	nop

08015e38 <rcl_init_options_fini>:
 8015e38:	b530      	push	{r4, r5, lr}
 8015e3a:	b087      	sub	sp, #28
 8015e3c:	b1f0      	cbz	r0, 8015e7c <rcl_init_options_fini+0x44>
 8015e3e:	6803      	ldr	r3, [r0, #0]
 8015e40:	4604      	mov	r4, r0
 8015e42:	b1db      	cbz	r3, 8015e7c <rcl_init_options_fini+0x44>
 8015e44:	469c      	mov	ip, r3
 8015e46:	f10d 0e04 	add.w	lr, sp, #4
 8015e4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e4e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015e52:	f8dc 3000 	ldr.w	r3, [ip]
 8015e56:	a801      	add	r0, sp, #4
 8015e58:	f8ce 3000 	str.w	r3, [lr]
 8015e5c:	f7fe ff4a 	bl	8014cf4 <rcutils_allocator_is_valid>
 8015e60:	b160      	cbz	r0, 8015e7c <rcl_init_options_fini+0x44>
 8015e62:	6820      	ldr	r0, [r4, #0]
 8015e64:	3018      	adds	r0, #24
 8015e66:	f003 fb1d 	bl	80194a4 <rmw_init_options_fini>
 8015e6a:	4605      	mov	r5, r0
 8015e6c:	b950      	cbnz	r0, 8015e84 <rcl_init_options_fini+0x4c>
 8015e6e:	6820      	ldr	r0, [r4, #0]
 8015e70:	9b02      	ldr	r3, [sp, #8]
 8015e72:	9905      	ldr	r1, [sp, #20]
 8015e74:	4798      	blx	r3
 8015e76:	4628      	mov	r0, r5
 8015e78:	b007      	add	sp, #28
 8015e7a:	bd30      	pop	{r4, r5, pc}
 8015e7c:	250b      	movs	r5, #11
 8015e7e:	4628      	mov	r0, r5
 8015e80:	b007      	add	sp, #28
 8015e82:	bd30      	pop	{r4, r5, pc}
 8015e84:	f009 f84e 	bl	801ef24 <rcl_convert_rmw_ret_to_rcl_ret>
 8015e88:	4605      	mov	r5, r0
 8015e8a:	e7f8      	b.n	8015e7e <rcl_init_options_fini+0x46>

08015e8c <rcl_init_options_copy>:
 8015e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e90:	b094      	sub	sp, #80	@ 0x50
 8015e92:	2800      	cmp	r0, #0
 8015e94:	d05b      	beq.n	8015f4e <rcl_init_options_copy+0xc2>
 8015e96:	4604      	mov	r4, r0
 8015e98:	6800      	ldr	r0, [r0, #0]
 8015e9a:	2800      	cmp	r0, #0
 8015e9c:	d057      	beq.n	8015f4e <rcl_init_options_copy+0xc2>
 8015e9e:	460e      	mov	r6, r1
 8015ea0:	f7fe ff28 	bl	8014cf4 <rcutils_allocator_is_valid>
 8015ea4:	2e00      	cmp	r6, #0
 8015ea6:	d052      	beq.n	8015f4e <rcl_init_options_copy+0xc2>
 8015ea8:	f080 0001 	eor.w	r0, r0, #1
 8015eac:	b2c0      	uxtb	r0, r0
 8015eae:	2800      	cmp	r0, #0
 8015eb0:	d14d      	bne.n	8015f4e <rcl_init_options_copy+0xc2>
 8015eb2:	6833      	ldr	r3, [r6, #0]
 8015eb4:	b123      	cbz	r3, 8015ec0 <rcl_init_options_copy+0x34>
 8015eb6:	2464      	movs	r4, #100	@ 0x64
 8015eb8:	4620      	mov	r0, r4
 8015eba:	b014      	add	sp, #80	@ 0x50
 8015ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ec0:	6827      	ldr	r7, [r4, #0]
 8015ec2:	ad0f      	add	r5, sp, #60	@ 0x3c
 8015ec4:	46bc      	mov	ip, r7
 8015ec6:	f8d7 8000 	ldr.w	r8, [r7]
 8015eca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015ed0:	f8dc 3000 	ldr.w	r3, [ip]
 8015ed4:	2050      	movs	r0, #80	@ 0x50
 8015ed6:	4619      	mov	r1, r3
 8015ed8:	602b      	str	r3, [r5, #0]
 8015eda:	47c0      	blx	r8
 8015edc:	4605      	mov	r5, r0
 8015ede:	6030      	str	r0, [r6, #0]
 8015ee0:	b3d0      	cbz	r0, 8015f58 <rcl_init_options_copy+0xcc>
 8015ee2:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8015ee6:	4686      	mov	lr, r0
 8015ee8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015eec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015ef0:	f8dc 3000 	ldr.w	r3, [ip]
 8015ef4:	4668      	mov	r0, sp
 8015ef6:	f8ce 3000 	str.w	r3, [lr]
 8015efa:	f003 f841 	bl	8018f80 <rmw_get_zero_initialized_init_options>
 8015efe:	46ee      	mov	lr, sp
 8015f00:	f105 0c18 	add.w	ip, r5, #24
 8015f04:	6824      	ldr	r4, [r4, #0]
 8015f06:	6835      	ldr	r5, [r6, #0]
 8015f08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015f0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015f14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015f1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f20:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015f24:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015f28:	f104 0018 	add.w	r0, r4, #24
 8015f2c:	f105 0118 	add.w	r1, r5, #24
 8015f30:	f003 fa66 	bl	8019400 <rmw_init_options_copy>
 8015f34:	4604      	mov	r4, r0
 8015f36:	2800      	cmp	r0, #0
 8015f38:	d0be      	beq.n	8015eb8 <rcl_init_options_copy+0x2c>
 8015f3a:	f7fe fee9 	bl	8014d10 <rcutils_get_error_string>
 8015f3e:	f7fe feff 	bl	8014d40 <rcutils_reset_error>
 8015f42:	4630      	mov	r0, r6
 8015f44:	f7ff ff78 	bl	8015e38 <rcl_init_options_fini>
 8015f48:	b140      	cbz	r0, 8015f5c <rcl_init_options_copy+0xd0>
 8015f4a:	4604      	mov	r4, r0
 8015f4c:	e7b4      	b.n	8015eb8 <rcl_init_options_copy+0x2c>
 8015f4e:	240b      	movs	r4, #11
 8015f50:	4620      	mov	r0, r4
 8015f52:	b014      	add	sp, #80	@ 0x50
 8015f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f58:	240a      	movs	r4, #10
 8015f5a:	e7ad      	b.n	8015eb8 <rcl_init_options_copy+0x2c>
 8015f5c:	4620      	mov	r0, r4
 8015f5e:	b014      	add	sp, #80	@ 0x50
 8015f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f64:	f008 bfde 	b.w	801ef24 <rcl_convert_rmw_ret_to_rcl_ret>

08015f68 <rcl_get_localhost_only>:
 8015f68:	b510      	push	{r4, lr}
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	b082      	sub	sp, #8
 8015f6e:	9301      	str	r3, [sp, #4]
 8015f70:	b1b8      	cbz	r0, 8015fa2 <rcl_get_localhost_only+0x3a>
 8015f72:	4604      	mov	r4, r0
 8015f74:	a901      	add	r1, sp, #4
 8015f76:	480c      	ldr	r0, [pc, #48]	@ (8015fa8 <rcl_get_localhost_only+0x40>)
 8015f78:	f002 fd1e 	bl	80189b8 <rcutils_get_env>
 8015f7c:	b110      	cbz	r0, 8015f84 <rcl_get_localhost_only+0x1c>
 8015f7e:	2001      	movs	r0, #1
 8015f80:	b002      	add	sp, #8
 8015f82:	bd10      	pop	{r4, pc}
 8015f84:	9b01      	ldr	r3, [sp, #4]
 8015f86:	b113      	cbz	r3, 8015f8e <rcl_get_localhost_only+0x26>
 8015f88:	781a      	ldrb	r2, [r3, #0]
 8015f8a:	2a31      	cmp	r2, #49	@ 0x31
 8015f8c:	d004      	beq.n	8015f98 <rcl_get_localhost_only+0x30>
 8015f8e:	2302      	movs	r3, #2
 8015f90:	2000      	movs	r0, #0
 8015f92:	7023      	strb	r3, [r4, #0]
 8015f94:	b002      	add	sp, #8
 8015f96:	bd10      	pop	{r4, pc}
 8015f98:	785b      	ldrb	r3, [r3, #1]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d1f7      	bne.n	8015f8e <rcl_get_localhost_only+0x26>
 8015f9e:	2301      	movs	r3, #1
 8015fa0:	e7f6      	b.n	8015f90 <rcl_get_localhost_only+0x28>
 8015fa2:	200b      	movs	r0, #11
 8015fa4:	b002      	add	sp, #8
 8015fa6:	bd10      	pop	{r4, pc}
 8015fa8:	08023b70 	.word	0x08023b70

08015fac <rcl_get_zero_initialized_node>:
 8015fac:	4a03      	ldr	r2, [pc, #12]	@ (8015fbc <rcl_get_zero_initialized_node+0x10>)
 8015fae:	4603      	mov	r3, r0
 8015fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015fb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	4770      	bx	lr
 8015fbc:	08023ba0 	.word	0x08023ba0

08015fc0 <rcl_node_init>:
 8015fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc4:	b0a9      	sub	sp, #164	@ 0xa4
 8015fc6:	4604      	mov	r4, r0
 8015fc8:	460e      	mov	r6, r1
 8015fca:	4615      	mov	r5, r2
 8015fcc:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8015fd0:	a823      	add	r0, sp, #140	@ 0x8c
 8015fd2:	461f      	mov	r7, r3
 8015fd4:	f009 f9e0 	bl	801f398 <rcl_guard_condition_get_default_options>
 8015fd8:	f1b8 0f00 	cmp.w	r8, #0
 8015fdc:	f000 80f3 	beq.w	80161c6 <rcl_node_init+0x206>
 8015fe0:	4640      	mov	r0, r8
 8015fe2:	f7fe fe87 	bl	8014cf4 <rcutils_allocator_is_valid>
 8015fe6:	2d00      	cmp	r5, #0
 8015fe8:	bf18      	it	ne
 8015fea:	2c00      	cmpne	r4, #0
 8015fec:	f080 0001 	eor.w	r0, r0, #1
 8015ff0:	bf0c      	ite	eq
 8015ff2:	f04f 0c01 	moveq.w	ip, #1
 8015ff6:	f04f 0c00 	movne.w	ip, #0
 8015ffa:	2e00      	cmp	r6, #0
 8015ffc:	bf08      	it	eq
 8015ffe:	f04c 0c01 	orreq.w	ip, ip, #1
 8016002:	ea4c 0c00 	orr.w	ip, ip, r0
 8016006:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 801600a:	f040 80dc 	bne.w	80161c6 <rcl_node_init+0x206>
 801600e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8016012:	f1ba 0f00 	cmp.w	sl, #0
 8016016:	f040 80fc 	bne.w	8016212 <rcl_node_init+0x252>
 801601a:	2f00      	cmp	r7, #0
 801601c:	f000 80d3 	beq.w	80161c6 <rcl_node_init+0x206>
 8016020:	4638      	mov	r0, r7
 8016022:	f7ff fd35 	bl	8015a90 <rcl_context_is_valid>
 8016026:	4683      	mov	fp, r0
 8016028:	2800      	cmp	r0, #0
 801602a:	f000 80d2 	beq.w	80161d2 <rcl_node_init+0x212>
 801602e:	4652      	mov	r2, sl
 8016030:	4630      	mov	r0, r6
 8016032:	a922      	add	r1, sp, #136	@ 0x88
 8016034:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8016038:	f003 f8d0 	bl	80191dc <rmw_validate_node_name>
 801603c:	4682      	mov	sl, r0
 801603e:	2800      	cmp	r0, #0
 8016040:	f040 80c3 	bne.w	80161ca <rcl_node_init+0x20a>
 8016044:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8016046:	2800      	cmp	r0, #0
 8016048:	f040 80f1 	bne.w	801622e <rcl_node_init+0x26e>
 801604c:	4628      	mov	r0, r5
 801604e:	f7ea f951 	bl	80002f4 <strlen>
 8016052:	2800      	cmp	r0, #0
 8016054:	f040 80c0 	bne.w	80161d8 <rcl_node_init+0x218>
 8016058:	4d79      	ldr	r5, [pc, #484]	@ (8016240 <rcl_node_init+0x280>)
 801605a:	a922      	add	r1, sp, #136	@ 0x88
 801605c:	2200      	movs	r2, #0
 801605e:	4628      	mov	r0, r5
 8016060:	f003 f89e 	bl	80191a0 <rmw_validate_namespace>
 8016064:	4682      	mov	sl, r0
 8016066:	2800      	cmp	r0, #0
 8016068:	f040 80af 	bne.w	80161ca <rcl_node_init+0x20a>
 801606c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801606e:	2800      	cmp	r0, #0
 8016070:	f040 80d5 	bne.w	801621e <rcl_node_init+0x25e>
 8016074:	f8d8 3000 	ldr.w	r3, [r8]
 8016078:	2078      	movs	r0, #120	@ 0x78
 801607a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801607e:	4798      	blx	r3
 8016080:	4682      	mov	sl, r0
 8016082:	6060      	str	r0, [r4, #4]
 8016084:	2800      	cmp	r0, #0
 8016086:	f000 80cf 	beq.w	8016228 <rcl_node_init+0x268>
 801608a:	2200      	movs	r2, #0
 801608c:	2300      	movs	r3, #0
 801608e:	a808      	add	r0, sp, #32
 8016090:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 8016094:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8016098:	f000 f902 	bl	80162a0 <rcl_node_get_default_options>
 801609c:	a908      	add	r1, sp, #32
 801609e:	4650      	mov	r0, sl
 80160a0:	2268      	movs	r2, #104	@ 0x68
 80160a2:	f00b f8aa 	bl	80211fa <memcpy>
 80160a6:	6861      	ldr	r1, [r4, #4]
 80160a8:	4640      	mov	r0, r8
 80160aa:	6027      	str	r7, [r4, #0]
 80160ac:	f000 f906 	bl	80162bc <rcl_node_options_copy>
 80160b0:	2800      	cmp	r0, #0
 80160b2:	d158      	bne.n	8016166 <rcl_node_init+0x1a6>
 80160b4:	4628      	mov	r0, r5
 80160b6:	f7ea f91d 	bl	80002f4 <strlen>
 80160ba:	4428      	add	r0, r5
 80160bc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80160c0:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80160c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80160c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80160ca:	9300      	str	r3, [sp, #0]
 80160cc:	bf0c      	ite	eq
 80160ce:	4b5d      	ldreq	r3, [pc, #372]	@ (8016244 <rcl_node_init+0x284>)
 80160d0:	4b5d      	ldrne	r3, [pc, #372]	@ (8016248 <rcl_node_init+0x288>)
 80160d2:	9302      	str	r3, [sp, #8]
 80160d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80160d8:	9301      	str	r3, [sp, #4]
 80160da:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80160de:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80160e2:	f002 fc91 	bl	8018a08 <rcutils_format_string_limit>
 80160e6:	6823      	ldr	r3, [r4, #0]
 80160e8:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 80160ec:	4631      	mov	r1, r6
 80160ee:	6818      	ldr	r0, [r3, #0]
 80160f0:	462a      	mov	r2, r5
 80160f2:	6866      	ldr	r6, [r4, #4]
 80160f4:	3028      	adds	r0, #40	@ 0x28
 80160f6:	f003 fc01 	bl	80198fc <rmw_create_node>
 80160fa:	6863      	ldr	r3, [r4, #4]
 80160fc:	66b0      	str	r0, [r6, #104]	@ 0x68
 80160fe:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8016100:	2800      	cmp	r0, #0
 8016102:	d032      	beq.n	801616a <rcl_node_init+0x1aa>
 8016104:	f003 fc8a 	bl	8019a1c <rmw_node_get_graph_guard_condition>
 8016108:	4682      	mov	sl, r0
 801610a:	b360      	cbz	r0, 8016166 <rcl_node_init+0x1a6>
 801610c:	f8d8 3000 	ldr.w	r3, [r8]
 8016110:	2008      	movs	r0, #8
 8016112:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016116:	6866      	ldr	r6, [r4, #4]
 8016118:	4798      	blx	r3
 801611a:	6863      	ldr	r3, [r4, #4]
 801611c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801611e:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8016122:	f1bb 0f00 	cmp.w	fp, #0
 8016126:	d020      	beq.n	801616a <rcl_node_init+0x1aa>
 8016128:	a806      	add	r0, sp, #24
 801612a:	ae23      	add	r6, sp, #140	@ 0x8c
 801612c:	f009 f8a8 	bl	801f280 <rcl_get_zero_initialized_guard_condition>
 8016130:	a806      	add	r0, sp, #24
 8016132:	6863      	ldr	r3, [r4, #4]
 8016134:	46c4      	mov	ip, r8
 8016136:	c803      	ldmia	r0, {r0, r1}
 8016138:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801613c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8016140:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016144:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016146:	f8dc 3000 	ldr.w	r3, [ip]
 801614a:	6033      	str	r3, [r6, #0]
 801614c:	ab28      	add	r3, sp, #160	@ 0xa0
 801614e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8016152:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016156:	4651      	mov	r1, sl
 8016158:	463a      	mov	r2, r7
 801615a:	4670      	mov	r0, lr
 801615c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801615e:	f009 f899 	bl	801f294 <rcl_guard_condition_init_from_rmw>
 8016162:	4682      	mov	sl, r0
 8016164:	b328      	cbz	r0, 80161b2 <rcl_node_init+0x1f2>
 8016166:	6863      	ldr	r3, [r4, #4]
 8016168:	b1f3      	cbz	r3, 80161a8 <rcl_node_init+0x1e8>
 801616a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801616c:	b128      	cbz	r0, 801617a <rcl_node_init+0x1ba>
 801616e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016172:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016176:	4798      	blx	r3
 8016178:	6863      	ldr	r3, [r4, #4]
 801617a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801617c:	b110      	cbz	r0, 8016184 <rcl_node_init+0x1c4>
 801617e:	f003 fbcf 	bl	8019920 <rmw_destroy_node>
 8016182:	6863      	ldr	r3, [r4, #4]
 8016184:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016186:	b148      	cbz	r0, 801619c <rcl_node_init+0x1dc>
 8016188:	f009 f8e0 	bl	801f34c <rcl_guard_condition_fini>
 801618c:	6863      	ldr	r3, [r4, #4]
 801618e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016192:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016194:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016198:	4798      	blx	r3
 801619a:	6863      	ldr	r3, [r4, #4]
 801619c:	4618      	mov	r0, r3
 801619e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80161a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80161a6:	4798      	blx	r3
 80161a8:	2300      	movs	r3, #0
 80161aa:	f04f 0a01 	mov.w	sl, #1
 80161ae:	e9c4 3300 	strd	r3, r3, [r4]
 80161b2:	f1b9 0f00 	cmp.w	r9, #0
 80161b6:	d008      	beq.n	80161ca <rcl_node_init+0x20a>
 80161b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80161bc:	4628      	mov	r0, r5
 80161be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80161c2:	4798      	blx	r3
 80161c4:	e001      	b.n	80161ca <rcl_node_init+0x20a>
 80161c6:	f04f 0a0b 	mov.w	sl, #11
 80161ca:	4650      	mov	r0, sl
 80161cc:	b029      	add	sp, #164	@ 0xa4
 80161ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161d2:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 80161d6:	e7f8      	b.n	80161ca <rcl_node_init+0x20a>
 80161d8:	782b      	ldrb	r3, [r5, #0]
 80161da:	2b2f      	cmp	r3, #47	@ 0x2f
 80161dc:	f43f af3d 	beq.w	801605a <rcl_node_init+0x9a>
 80161e0:	9503      	str	r5, [sp, #12]
 80161e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80161e6:	9300      	str	r3, [sp, #0]
 80161e8:	4b18      	ldr	r3, [pc, #96]	@ (801624c <rcl_node_init+0x28c>)
 80161ea:	9302      	str	r3, [sp, #8]
 80161ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80161f0:	9301      	str	r3, [sp, #4]
 80161f2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80161f6:	f002 fc07 	bl	8018a08 <rcutils_format_string_limit>
 80161fa:	4605      	mov	r5, r0
 80161fc:	b1e0      	cbz	r0, 8016238 <rcl_node_init+0x278>
 80161fe:	2200      	movs	r2, #0
 8016200:	a922      	add	r1, sp, #136	@ 0x88
 8016202:	9222      	str	r2, [sp, #136]	@ 0x88
 8016204:	f002 ffcc 	bl	80191a0 <rmw_validate_namespace>
 8016208:	4682      	mov	sl, r0
 801620a:	2800      	cmp	r0, #0
 801620c:	d1d4      	bne.n	80161b8 <rcl_node_init+0x1f8>
 801620e:	46d9      	mov	r9, fp
 8016210:	e72c      	b.n	801606c <rcl_node_init+0xac>
 8016212:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8016216:	4650      	mov	r0, sl
 8016218:	b029      	add	sp, #164	@ 0xa4
 801621a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801621e:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 8016222:	f002 ffcf 	bl	80191c4 <rmw_namespace_validation_result_string>
 8016226:	e7c4      	b.n	80161b2 <rcl_node_init+0x1f2>
 8016228:	f04f 0a0a 	mov.w	sl, #10
 801622c:	e7c1      	b.n	80161b2 <rcl_node_init+0x1f2>
 801622e:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 8016232:	f003 f827 	bl	8019284 <rmw_node_name_validation_result_string>
 8016236:	e7c8      	b.n	80161ca <rcl_node_init+0x20a>
 8016238:	f04f 0a0a 	mov.w	sl, #10
 801623c:	e7c5      	b.n	80161ca <rcl_node_init+0x20a>
 801623e:	bf00      	nop
 8016240:	08023b88 	.word	0x08023b88
 8016244:	08023b90 	.word	0x08023b90
 8016248:	08023b98 	.word	0x08023b98
 801624c:	08023b8c 	.word	0x08023b8c

08016250 <rcl_node_is_valid>:
 8016250:	b130      	cbz	r0, 8016260 <rcl_node_is_valid+0x10>
 8016252:	6843      	ldr	r3, [r0, #4]
 8016254:	b123      	cbz	r3, 8016260 <rcl_node_is_valid+0x10>
 8016256:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016258:	b113      	cbz	r3, 8016260 <rcl_node_is_valid+0x10>
 801625a:	6800      	ldr	r0, [r0, #0]
 801625c:	f7ff bc18 	b.w	8015a90 <rcl_context_is_valid>
 8016260:	2000      	movs	r0, #0
 8016262:	4770      	bx	lr

08016264 <rcl_node_get_name>:
 8016264:	b120      	cbz	r0, 8016270 <rcl_node_get_name+0xc>
 8016266:	6840      	ldr	r0, [r0, #4]
 8016268:	b110      	cbz	r0, 8016270 <rcl_node_get_name+0xc>
 801626a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801626c:	b100      	cbz	r0, 8016270 <rcl_node_get_name+0xc>
 801626e:	6880      	ldr	r0, [r0, #8]
 8016270:	4770      	bx	lr
 8016272:	bf00      	nop

08016274 <rcl_node_get_namespace>:
 8016274:	b120      	cbz	r0, 8016280 <rcl_node_get_namespace+0xc>
 8016276:	6840      	ldr	r0, [r0, #4]
 8016278:	b110      	cbz	r0, 8016280 <rcl_node_get_namespace+0xc>
 801627a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801627c:	b100      	cbz	r0, 8016280 <rcl_node_get_namespace+0xc>
 801627e:	68c0      	ldr	r0, [r0, #12]
 8016280:	4770      	bx	lr
 8016282:	bf00      	nop

08016284 <rcl_node_get_options>:
 8016284:	b128      	cbz	r0, 8016292 <rcl_node_get_options+0xe>
 8016286:	6840      	ldr	r0, [r0, #4]
 8016288:	b118      	cbz	r0, 8016292 <rcl_node_get_options+0xe>
 801628a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801628c:	2b00      	cmp	r3, #0
 801628e:	bf08      	it	eq
 8016290:	2000      	moveq	r0, #0
 8016292:	4770      	bx	lr

08016294 <rcl_node_get_rmw_handle>:
 8016294:	b110      	cbz	r0, 801629c <rcl_node_get_rmw_handle+0x8>
 8016296:	6840      	ldr	r0, [r0, #4]
 8016298:	b100      	cbz	r0, 801629c <rcl_node_get_rmw_handle+0x8>
 801629a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801629c:	4770      	bx	lr
 801629e:	bf00      	nop

080162a0 <rcl_node_get_default_options>:
 80162a0:	b510      	push	{r4, lr}
 80162a2:	4604      	mov	r4, r0
 80162a4:	2268      	movs	r2, #104	@ 0x68
 80162a6:	2100      	movs	r1, #0
 80162a8:	f00a fe88 	bl	8020fbc <memset>
 80162ac:	4620      	mov	r0, r4
 80162ae:	f7fe fd13 	bl	8014cd8 <rcutils_get_default_allocator>
 80162b2:	2301      	movs	r3, #1
 80162b4:	4620      	mov	r0, r4
 80162b6:	7523      	strb	r3, [r4, #20]
 80162b8:	bd10      	pop	{r4, pc}
 80162ba:	bf00      	nop

080162bc <rcl_node_options_copy>:
 80162bc:	2800      	cmp	r0, #0
 80162be:	bf18      	it	ne
 80162c0:	4288      	cmpne	r0, r1
 80162c2:	d01b      	beq.n	80162fc <rcl_node_options_copy+0x40>
 80162c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162c6:	fab1 f681 	clz	r6, r1
 80162ca:	460c      	mov	r4, r1
 80162cc:	0976      	lsrs	r6, r6, #5
 80162ce:	b199      	cbz	r1, 80162f8 <rcl_node_options_copy+0x3c>
 80162d0:	4605      	mov	r5, r0
 80162d2:	8a87      	ldrh	r7, [r0, #20]
 80162d4:	4684      	mov	ip, r0
 80162d6:	468e      	mov	lr, r1
 80162d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80162da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80162de:	682b      	ldr	r3, [r5, #0]
 80162e0:	2250      	movs	r2, #80	@ 0x50
 80162e2:	f10c 0118 	add.w	r1, ip, #24
 80162e6:	f104 0018 	add.w	r0, r4, #24
 80162ea:	f8ce 3000 	str.w	r3, [lr]
 80162ee:	82a7      	strh	r7, [r4, #20]
 80162f0:	f00a ff83 	bl	80211fa <memcpy>
 80162f4:	4630      	mov	r0, r6
 80162f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162f8:	200b      	movs	r0, #11
 80162fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162fc:	200b      	movs	r0, #11
 80162fe:	4770      	bx	lr

08016300 <rcl_node_resolve_name>:
 8016300:	b082      	sub	sp, #8
 8016302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016306:	b091      	sub	sp, #68	@ 0x44
 8016308:	ac1a      	add	r4, sp, #104	@ 0x68
 801630a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801630e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016312:	2800      	cmp	r0, #0
 8016314:	d03d      	beq.n	8016392 <rcl_node_resolve_name+0x92>
 8016316:	460c      	mov	r4, r1
 8016318:	4605      	mov	r5, r0
 801631a:	f7ff ffb3 	bl	8016284 <rcl_node_get_options>
 801631e:	2800      	cmp	r0, #0
 8016320:	d03a      	beq.n	8016398 <rcl_node_resolve_name+0x98>
 8016322:	4628      	mov	r0, r5
 8016324:	f7ff ff9e 	bl	8016264 <rcl_node_get_name>
 8016328:	4606      	mov	r6, r0
 801632a:	4628      	mov	r0, r5
 801632c:	ad0b      	add	r5, sp, #44	@ 0x2c
 801632e:	f7ff ffa1 	bl	8016274 <rcl_node_get_namespace>
 8016332:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8016336:	4607      	mov	r7, r0
 8016338:	46ac      	mov	ip, r5
 801633a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801633e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016342:	f8de 3000 	ldr.w	r3, [lr]
 8016346:	f8cc 3000 	str.w	r3, [ip]
 801634a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801634c:	b30b      	cbz	r3, 8016392 <rcl_node_resolve_name+0x92>
 801634e:	4689      	mov	r9, r1
 8016350:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8016354:	f002 fcd0 	bl	8018cf8 <rcutils_get_zero_initialized_string_map>
 8016358:	ab10      	add	r3, sp, #64	@ 0x40
 801635a:	9008      	str	r0, [sp, #32]
 801635c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016360:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016364:	2100      	movs	r1, #0
 8016366:	a808      	add	r0, sp, #32
 8016368:	e895 000c 	ldmia.w	r5, {r2, r3}
 801636c:	f002 fd3a 	bl	8018de4 <rcutils_string_map_init>
 8016370:	4683      	mov	fp, r0
 8016372:	b1a0      	cbz	r0, 801639e <rcl_node_resolve_name+0x9e>
 8016374:	f7fe fccc 	bl	8014d10 <rcutils_get_error_string>
 8016378:	f7fe fce2 	bl	8014d40 <rcutils_reset_error>
 801637c:	f1bb 0f0a 	cmp.w	fp, #10
 8016380:	bf18      	it	ne
 8016382:	f04f 0b01 	movne.w	fp, #1
 8016386:	4658      	mov	r0, fp
 8016388:	b011      	add	sp, #68	@ 0x44
 801638a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801638e:	b002      	add	sp, #8
 8016390:	4770      	bx	lr
 8016392:	f04f 0b0b 	mov.w	fp, #11
 8016396:	e7f6      	b.n	8016386 <rcl_node_resolve_name+0x86>
 8016398:	f04f 0b01 	mov.w	fp, #1
 801639c:	e7f3      	b.n	8016386 <rcl_node_resolve_name+0x86>
 801639e:	9009      	str	r0, [sp, #36]	@ 0x24
 80163a0:	9007      	str	r0, [sp, #28]
 80163a2:	a808      	add	r0, sp, #32
 80163a4:	f008 ff66 	bl	801f274 <rcl_get_default_topic_name_substitutions>
 80163a8:	4683      	mov	fp, r0
 80163aa:	b180      	cbz	r0, 80163ce <rcl_node_resolve_name+0xce>
 80163ac:	280a      	cmp	r0, #10
 80163ae:	a808      	add	r0, sp, #32
 80163b0:	bf18      	it	ne
 80163b2:	f04f 0b01 	movne.w	fp, #1
 80163b6:	f002 fd55 	bl	8018e64 <rcutils_string_map_fini>
 80163ba:	4604      	mov	r4, r0
 80163bc:	2800      	cmp	r0, #0
 80163be:	d15b      	bne.n	8016478 <rcl_node_resolve_name+0x178>
 80163c0:	4651      	mov	r1, sl
 80163c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163c4:	47c8      	blx	r9
 80163c6:	4651      	mov	r1, sl
 80163c8:	4620      	mov	r0, r4
 80163ca:	47c8      	blx	r9
 80163cc:	e7db      	b.n	8016386 <rcl_node_resolve_name+0x86>
 80163ce:	ab09      	add	r3, sp, #36	@ 0x24
 80163d0:	46ec      	mov	ip, sp
 80163d2:	9305      	str	r3, [sp, #20]
 80163d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163da:	682b      	ldr	r3, [r5, #0]
 80163dc:	463a      	mov	r2, r7
 80163de:	4631      	mov	r1, r6
 80163e0:	4620      	mov	r0, r4
 80163e2:	f8cc 3000 	str.w	r3, [ip]
 80163e6:	ab08      	add	r3, sp, #32
 80163e8:	f008 fde4 	bl	801efb4 <rcl_expand_topic_name>
 80163ec:	4683      	mov	fp, r0
 80163ee:	b9d8      	cbnz	r0, 8016428 <rcl_node_resolve_name+0x128>
 80163f0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80163f2:	4602      	mov	r2, r0
 80163f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80163f6:	a90a      	add	r1, sp, #40	@ 0x28
 80163f8:	4620      	mov	r0, r4
 80163fa:	f002 fe01 	bl	8019000 <rmw_validate_full_topic_name>
 80163fe:	bb50      	cbnz	r0, 8016456 <rcl_node_resolve_name+0x156>
 8016400:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016402:	2d00      	cmp	r5, #0
 8016404:	d140      	bne.n	8016488 <rcl_node_resolve_name+0x188>
 8016406:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016408:	a808      	add	r0, sp, #32
 801640a:	601c      	str	r4, [r3, #0]
 801640c:	f002 fd2a 	bl	8018e64 <rcutils_string_map_fini>
 8016410:	4683      	mov	fp, r0
 8016412:	2800      	cmp	r0, #0
 8016414:	d043      	beq.n	801649e <rcl_node_resolve_name+0x19e>
 8016416:	f7fe fc7b 	bl	8014d10 <rcutils_get_error_string>
 801641a:	46a8      	mov	r8, r5
 801641c:	f04f 0b01 	mov.w	fp, #1
 8016420:	462c      	mov	r4, r5
 8016422:	f7fe fc8d 	bl	8014d40 <rcutils_reset_error>
 8016426:	e00a      	b.n	801643e <rcl_node_resolve_name+0x13e>
 8016428:	2867      	cmp	r0, #103	@ 0x67
 801642a:	bf14      	ite	ne
 801642c:	f04f 0800 	movne.w	r8, #0
 8016430:	f008 0801 	andeq.w	r8, r8, #1
 8016434:	9c07      	ldr	r4, [sp, #28]
 8016436:	a808      	add	r0, sp, #32
 8016438:	f002 fd14 	bl	8018e64 <rcutils_string_map_fini>
 801643c:	bb50      	cbnz	r0, 8016494 <rcl_node_resolve_name+0x194>
 801643e:	4651      	mov	r1, sl
 8016440:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016442:	47c8      	blx	r9
 8016444:	4651      	mov	r1, sl
 8016446:	4620      	mov	r0, r4
 8016448:	47c8      	blx	r9
 801644a:	f1b8 0f00 	cmp.w	r8, #0
 801644e:	bf18      	it	ne
 8016450:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8016454:	e797      	b.n	8016386 <rcl_node_resolve_name+0x86>
 8016456:	f7fe fc5b 	bl	8014d10 <rcutils_get_error_string>
 801645a:	f7fe fc71 	bl	8014d40 <rcutils_reset_error>
 801645e:	a808      	add	r0, sp, #32
 8016460:	f002 fd00 	bl	8018e64 <rcutils_string_map_fini>
 8016464:	b998      	cbnz	r0, 801648e <rcl_node_resolve_name+0x18e>
 8016466:	4651      	mov	r1, sl
 8016468:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801646a:	47c8      	blx	r9
 801646c:	4651      	mov	r1, sl
 801646e:	4620      	mov	r0, r4
 8016470:	f04f 0b01 	mov.w	fp, #1
 8016474:	47c8      	blx	r9
 8016476:	e786      	b.n	8016386 <rcl_node_resolve_name+0x86>
 8016478:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801647c:	f7fe fc48 	bl	8014d10 <rcutils_get_error_string>
 8016480:	f7fe fc5e 	bl	8014d40 <rcutils_reset_error>
 8016484:	4644      	mov	r4, r8
 8016486:	e7da      	b.n	801643e <rcl_node_resolve_name+0x13e>
 8016488:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 801648c:	e7d3      	b.n	8016436 <rcl_node_resolve_name+0x136>
 801648e:	46d8      	mov	r8, fp
 8016490:	f04f 0b01 	mov.w	fp, #1
 8016494:	f7fe fc3c 	bl	8014d10 <rcutils_get_error_string>
 8016498:	f7fe fc52 	bl	8014d40 <rcutils_reset_error>
 801649c:	e7cf      	b.n	801643e <rcl_node_resolve_name+0x13e>
 801649e:	4651      	mov	r1, sl
 80164a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80164a2:	47c8      	blx	r9
 80164a4:	4651      	mov	r1, sl
 80164a6:	4658      	mov	r0, fp
 80164a8:	47c8      	blx	r9
 80164aa:	e76c      	b.n	8016386 <rcl_node_resolve_name+0x86>

080164ac <rcl_get_zero_initialized_publisher>:
 80164ac:	4b01      	ldr	r3, [pc, #4]	@ (80164b4 <rcl_get_zero_initialized_publisher+0x8>)
 80164ae:	6818      	ldr	r0, [r3, #0]
 80164b0:	4770      	bx	lr
 80164b2:	bf00      	nop
 80164b4:	08023ba8 	.word	0x08023ba8

080164b8 <rcl_publisher_init>:
 80164b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164bc:	b088      	sub	sp, #32
 80164be:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80164c0:	2e00      	cmp	r6, #0
 80164c2:	d06b      	beq.n	801659c <rcl_publisher_init+0xe4>
 80164c4:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 80164c8:	4605      	mov	r5, r0
 80164ca:	460f      	mov	r7, r1
 80164cc:	4690      	mov	r8, r2
 80164ce:	4650      	mov	r0, sl
 80164d0:	4699      	mov	r9, r3
 80164d2:	f7fe fc0f 	bl	8014cf4 <rcutils_allocator_is_valid>
 80164d6:	f080 0401 	eor.w	r4, r0, #1
 80164da:	b2e4      	uxtb	r4, r4
 80164dc:	2c00      	cmp	r4, #0
 80164de:	d15d      	bne.n	801659c <rcl_publisher_init+0xe4>
 80164e0:	2d00      	cmp	r5, #0
 80164e2:	d05b      	beq.n	801659c <rcl_publisher_init+0xe4>
 80164e4:	682b      	ldr	r3, [r5, #0]
 80164e6:	b123      	cbz	r3, 80164f2 <rcl_publisher_init+0x3a>
 80164e8:	2464      	movs	r4, #100	@ 0x64
 80164ea:	4620      	mov	r0, r4
 80164ec:	b008      	add	sp, #32
 80164ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164f2:	4638      	mov	r0, r7
 80164f4:	f7ff feac 	bl	8016250 <rcl_node_is_valid>
 80164f8:	2800      	cmp	r0, #0
 80164fa:	d054      	beq.n	80165a6 <rcl_publisher_init+0xee>
 80164fc:	f1b8 0f00 	cmp.w	r8, #0
 8016500:	d04c      	beq.n	801659c <rcl_publisher_init+0xe4>
 8016502:	fab9 f389 	clz	r3, r9
 8016506:	095b      	lsrs	r3, r3, #5
 8016508:	f1b9 0f00 	cmp.w	r9, #0
 801650c:	d046      	beq.n	801659c <rcl_publisher_init+0xe4>
 801650e:	aa07      	add	r2, sp, #28
 8016510:	9307      	str	r3, [sp, #28]
 8016512:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8016516:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801651a:	9205      	str	r2, [sp, #20]
 801651c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016520:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016524:	4649      	mov	r1, r9
 8016526:	4638      	mov	r0, r7
 8016528:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801652c:	f7ff fee8 	bl	8016300 <rcl_node_resolve_name>
 8016530:	2800      	cmp	r0, #0
 8016532:	d14f      	bne.n	80165d4 <rcl_publisher_init+0x11c>
 8016534:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8016536:	20c8      	movs	r0, #200	@ 0xc8
 8016538:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801653a:	4798      	blx	r3
 801653c:	6028      	str	r0, [r5, #0]
 801653e:	2800      	cmp	r0, #0
 8016540:	d050      	beq.n	80165e4 <rcl_publisher_init+0x12c>
 8016542:	4638      	mov	r0, r7
 8016544:	f7ff fea6 	bl	8016294 <rcl_node_get_rmw_handle>
 8016548:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 801654c:	4641      	mov	r1, r8
 801654e:	9a07      	ldr	r2, [sp, #28]
 8016550:	9300      	str	r3, [sp, #0]
 8016552:	4633      	mov	r3, r6
 8016554:	682c      	ldr	r4, [r5, #0]
 8016556:	f003 fa67 	bl	8019a28 <rmw_create_publisher>
 801655a:	682b      	ldr	r3, [r5, #0]
 801655c:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8016560:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8016564:	b370      	cbz	r0, 80165c4 <rcl_publisher_init+0x10c>
 8016566:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801656a:	f003 fb41 	bl	8019bf0 <rmw_publisher_get_actual_qos>
 801656e:	682b      	ldr	r3, [r5, #0]
 8016570:	4604      	mov	r4, r0
 8016572:	b9d0      	cbnz	r0, 80165aa <rcl_publisher_init+0xf2>
 8016574:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8016578:	4631      	mov	r1, r6
 801657a:	4618      	mov	r0, r3
 801657c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8016580:	2270      	movs	r2, #112	@ 0x70
 8016582:	f00a fe3a 	bl	80211fa <memcpy>
 8016586:	683a      	ldr	r2, [r7, #0]
 8016588:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 801658c:	9807      	ldr	r0, [sp, #28]
 801658e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8016590:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8016592:	4798      	blx	r3
 8016594:	4620      	mov	r0, r4
 8016596:	b008      	add	sp, #32
 8016598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801659c:	240b      	movs	r4, #11
 801659e:	4620      	mov	r0, r4
 80165a0:	b008      	add	sp, #32
 80165a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165a6:	24c8      	movs	r4, #200	@ 0xc8
 80165a8:	e79f      	b.n	80164ea <rcl_publisher_init+0x32>
 80165aa:	b1cb      	cbz	r3, 80165e0 <rcl_publisher_init+0x128>
 80165ac:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80165b0:	b142      	cbz	r2, 80165c4 <rcl_publisher_init+0x10c>
 80165b2:	4638      	mov	r0, r7
 80165b4:	f7ff fe6e 	bl	8016294 <rcl_node_get_rmw_handle>
 80165b8:	682b      	ldr	r3, [r5, #0]
 80165ba:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 80165be:	f003 fb2b 	bl	8019c18 <rmw_destroy_publisher>
 80165c2:	682b      	ldr	r3, [r5, #0]
 80165c4:	4618      	mov	r0, r3
 80165c6:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 80165c8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80165ca:	2401      	movs	r4, #1
 80165cc:	4790      	blx	r2
 80165ce:	2300      	movs	r3, #0
 80165d0:	602b      	str	r3, [r5, #0]
 80165d2:	e7db      	b.n	801658c <rcl_publisher_init+0xd4>
 80165d4:	2867      	cmp	r0, #103	@ 0x67
 80165d6:	d007      	beq.n	80165e8 <rcl_publisher_init+0x130>
 80165d8:	2869      	cmp	r0, #105	@ 0x69
 80165da:	d005      	beq.n	80165e8 <rcl_publisher_init+0x130>
 80165dc:	280a      	cmp	r0, #10
 80165de:	d001      	beq.n	80165e4 <rcl_publisher_init+0x12c>
 80165e0:	2401      	movs	r4, #1
 80165e2:	e7d3      	b.n	801658c <rcl_publisher_init+0xd4>
 80165e4:	240a      	movs	r4, #10
 80165e6:	e7d1      	b.n	801658c <rcl_publisher_init+0xd4>
 80165e8:	2467      	movs	r4, #103	@ 0x67
 80165ea:	e7cf      	b.n	801658c <rcl_publisher_init+0xd4>

080165ec <rcl_publisher_get_default_options>:
 80165ec:	b570      	push	{r4, r5, r6, lr}
 80165ee:	4d14      	ldr	r5, [pc, #80]	@ (8016640 <rcl_publisher_get_default_options+0x54>)
 80165f0:	b088      	sub	sp, #32
 80165f2:	4604      	mov	r4, r0
 80165f4:	2250      	movs	r2, #80	@ 0x50
 80165f6:	4913      	ldr	r1, [pc, #76]	@ (8016644 <rcl_publisher_get_default_options+0x58>)
 80165f8:	4628      	mov	r0, r5
 80165fa:	f00a fdfe 	bl	80211fa <memcpy>
 80165fe:	a802      	add	r0, sp, #8
 8016600:	f7fe fb6a 	bl	8014cd8 <rcutils_get_default_allocator>
 8016604:	f10d 0c08 	add.w	ip, sp, #8
 8016608:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801660c:	466e      	mov	r6, sp
 801660e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016612:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016616:	f8dc 3000 	ldr.w	r3, [ip]
 801661a:	4630      	mov	r0, r6
 801661c:	f8ce 3000 	str.w	r3, [lr]
 8016620:	f002 fcbe 	bl	8018fa0 <rmw_get_default_publisher_options>
 8016624:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8016628:	2270      	movs	r2, #112	@ 0x70
 801662a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801662e:	e883 0003 	stmia.w	r3, {r0, r1}
 8016632:	4629      	mov	r1, r5
 8016634:	4620      	mov	r0, r4
 8016636:	f00a fde0 	bl	80211fa <memcpy>
 801663a:	4620      	mov	r0, r4
 801663c:	b008      	add	sp, #32
 801663e:	bd70      	pop	{r4, r5, r6, pc}
 8016640:	24064948 	.word	0x24064948
 8016644:	08023bb0 	.word	0x08023bb0

08016648 <rcl_publisher_is_valid>:
 8016648:	b1a0      	cbz	r0, 8016674 <rcl_publisher_is_valid+0x2c>
 801664a:	6803      	ldr	r3, [r0, #0]
 801664c:	b510      	push	{r4, lr}
 801664e:	4604      	mov	r4, r0
 8016650:	b173      	cbz	r3, 8016670 <rcl_publisher_is_valid+0x28>
 8016652:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8016656:	b15a      	cbz	r2, 8016670 <rcl_publisher_is_valid+0x28>
 8016658:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 801665c:	f7ff fa18 	bl	8015a90 <rcl_context_is_valid>
 8016660:	b130      	cbz	r0, 8016670 <rcl_publisher_is_valid+0x28>
 8016662:	6823      	ldr	r3, [r4, #0]
 8016664:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8016668:	3800      	subs	r0, #0
 801666a:	bf18      	it	ne
 801666c:	2001      	movne	r0, #1
 801666e:	bd10      	pop	{r4, pc}
 8016670:	2000      	movs	r0, #0
 8016672:	bd10      	pop	{r4, pc}
 8016674:	2000      	movs	r0, #0
 8016676:	4770      	bx	lr

08016678 <rcl_publisher_is_valid_except_context>:
 8016678:	b130      	cbz	r0, 8016688 <rcl_publisher_is_valid_except_context+0x10>
 801667a:	6800      	ldr	r0, [r0, #0]
 801667c:	b120      	cbz	r0, 8016688 <rcl_publisher_is_valid_except_context+0x10>
 801667e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8016682:	3800      	subs	r0, #0
 8016684:	bf18      	it	ne
 8016686:	2001      	movne	r0, #1
 8016688:	4770      	bx	lr
 801668a:	bf00      	nop

0801668c <exact_match_lookup>:
 801668c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801668e:	f102 0708 	add.w	r7, r2, #8
 8016692:	460b      	mov	r3, r1
 8016694:	b085      	sub	sp, #20
 8016696:	4614      	mov	r4, r2
 8016698:	4606      	mov	r6, r0
 801669a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801669e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80166a2:	4618      	mov	r0, r3
 80166a4:	4919      	ldr	r1, [pc, #100]	@ (801670c <exact_match_lookup+0x80>)
 80166a6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80166aa:	f002 f99f 	bl	80189ec <rcutils_join_path>
 80166ae:	7833      	ldrb	r3, [r6, #0]
 80166b0:	4605      	mov	r5, r0
 80166b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80166b4:	d023      	beq.n	80166fe <exact_match_lookup+0x72>
 80166b6:	f104 030c 	add.w	r3, r4, #12
 80166ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80166be:	e88d 0003 	stmia.w	sp, {r0, r1}
 80166c2:	1c70      	adds	r0, r6, #1
 80166c4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80166c8:	f002 f996 	bl	80189f8 <rcutils_to_native_path>
 80166cc:	4606      	mov	r6, r0
 80166ce:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80166d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80166d6:	4631      	mov	r1, r6
 80166d8:	4628      	mov	r0, r5
 80166da:	e894 000c 	ldmia.w	r4, {r2, r3}
 80166de:	f002 f985 	bl	80189ec <rcutils_join_path>
 80166e2:	4603      	mov	r3, r0
 80166e4:	4630      	mov	r0, r6
 80166e6:	6862      	ldr	r2, [r4, #4]
 80166e8:	461e      	mov	r6, r3
 80166ea:	6921      	ldr	r1, [r4, #16]
 80166ec:	4790      	blx	r2
 80166ee:	4628      	mov	r0, r5
 80166f0:	4635      	mov	r5, r6
 80166f2:	6863      	ldr	r3, [r4, #4]
 80166f4:	6921      	ldr	r1, [r4, #16]
 80166f6:	4798      	blx	r3
 80166f8:	4628      	mov	r0, r5
 80166fa:	b005      	add	sp, #20
 80166fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166fe:	7873      	ldrb	r3, [r6, #1]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d1d8      	bne.n	80166b6 <exact_match_lookup+0x2a>
 8016704:	4628      	mov	r0, r5
 8016706:	b005      	add	sp, #20
 8016708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801670a:	bf00      	nop
 801670c:	08023c3c 	.word	0x08023c3c

08016710 <rcl_get_secure_root>:
 8016710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016714:	b085      	sub	sp, #20
 8016716:	b168      	cbz	r0, 8016734 <rcl_get_secure_root+0x24>
 8016718:	4607      	mov	r7, r0
 801671a:	4608      	mov	r0, r1
 801671c:	460c      	mov	r4, r1
 801671e:	f7fe fae9 	bl	8014cf4 <rcutils_allocator_is_valid>
 8016722:	b138      	cbz	r0, 8016734 <rcl_get_secure_root+0x24>
 8016724:	2300      	movs	r3, #0
 8016726:	482d      	ldr	r0, [pc, #180]	@ (80167dc <rcl_get_secure_root+0xcc>)
 8016728:	a903      	add	r1, sp, #12
 801672a:	9303      	str	r3, [sp, #12]
 801672c:	f002 f944 	bl	80189b8 <rcutils_get_env>
 8016730:	4605      	mov	r5, r0
 8016732:	b120      	cbz	r0, 801673e <rcl_get_secure_root+0x2e>
 8016734:	2500      	movs	r5, #0
 8016736:	4628      	mov	r0, r5
 8016738:	b005      	add	sp, #20
 801673a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801673e:	9b03      	ldr	r3, [sp, #12]
 8016740:	781a      	ldrb	r2, [r3, #0]
 8016742:	2a00      	cmp	r2, #0
 8016744:	d0f6      	beq.n	8016734 <rcl_get_secure_root+0x24>
 8016746:	f104 090c 	add.w	r9, r4, #12
 801674a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801674e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016752:	4618      	mov	r0, r3
 8016754:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016758:	f002 fa90 	bl	8018c7c <rcutils_strdup>
 801675c:	4680      	mov	r8, r0
 801675e:	2800      	cmp	r0, #0
 8016760:	d0e8      	beq.n	8016734 <rcl_get_secure_root+0x24>
 8016762:	a903      	add	r1, sp, #12
 8016764:	481e      	ldr	r0, [pc, #120]	@ (80167e0 <rcl_get_secure_root+0xd0>)
 8016766:	9503      	str	r5, [sp, #12]
 8016768:	f002 f926 	bl	80189b8 <rcutils_get_env>
 801676c:	b160      	cbz	r0, 8016788 <rcl_get_secure_root+0x78>
 801676e:	2600      	movs	r6, #0
 8016770:	4630      	mov	r0, r6
 8016772:	6863      	ldr	r3, [r4, #4]
 8016774:	6921      	ldr	r1, [r4, #16]
 8016776:	4798      	blx	r3
 8016778:	4640      	mov	r0, r8
 801677a:	6863      	ldr	r3, [r4, #4]
 801677c:	6921      	ldr	r1, [r4, #16]
 801677e:	4798      	blx	r3
 8016780:	4628      	mov	r0, r5
 8016782:	b005      	add	sp, #20
 8016784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016788:	9b03      	ldr	r3, [sp, #12]
 801678a:	781e      	ldrb	r6, [r3, #0]
 801678c:	b1f6      	cbz	r6, 80167cc <rcl_get_secure_root+0xbc>
 801678e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016792:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016796:	4618      	mov	r0, r3
 8016798:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801679c:	f002 fa6e 	bl	8018c7c <rcutils_strdup>
 80167a0:	4606      	mov	r6, r0
 80167a2:	2800      	cmp	r0, #0
 80167a4:	d0e3      	beq.n	801676e <rcl_get_secure_root+0x5e>
 80167a6:	4622      	mov	r2, r4
 80167a8:	4641      	mov	r1, r8
 80167aa:	f7ff ff6f 	bl	801668c <exact_match_lookup>
 80167ae:	4605      	mov	r5, r0
 80167b0:	2d00      	cmp	r5, #0
 80167b2:	d0dd      	beq.n	8016770 <rcl_get_secure_root+0x60>
 80167b4:	4628      	mov	r0, r5
 80167b6:	f002 f917 	bl	80189e8 <rcutils_is_directory>
 80167ba:	4603      	mov	r3, r0
 80167bc:	2800      	cmp	r0, #0
 80167be:	d1d7      	bne.n	8016770 <rcl_get_secure_root+0x60>
 80167c0:	4628      	mov	r0, r5
 80167c2:	6921      	ldr	r1, [r4, #16]
 80167c4:	461d      	mov	r5, r3
 80167c6:	6863      	ldr	r3, [r4, #4]
 80167c8:	4798      	blx	r3
 80167ca:	e7d1      	b.n	8016770 <rcl_get_secure_root+0x60>
 80167cc:	4622      	mov	r2, r4
 80167ce:	4638      	mov	r0, r7
 80167d0:	4641      	mov	r1, r8
 80167d2:	f7ff ff5b 	bl	801668c <exact_match_lookup>
 80167d6:	4605      	mov	r5, r0
 80167d8:	e7ea      	b.n	80167b0 <rcl_get_secure_root+0xa0>
 80167da:	bf00      	nop
 80167dc:	08023c48 	.word	0x08023c48
 80167e0:	08023c60 	.word	0x08023c60

080167e4 <rcl_get_security_options_from_environment>:
 80167e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167e8:	b082      	sub	sp, #8
 80167ea:	2300      	movs	r3, #0
 80167ec:	4606      	mov	r6, r0
 80167ee:	460f      	mov	r7, r1
 80167f0:	4821      	ldr	r0, [pc, #132]	@ (8016878 <rcl_get_security_options_from_environment+0x94>)
 80167f2:	a901      	add	r1, sp, #4
 80167f4:	4690      	mov	r8, r2
 80167f6:	9301      	str	r3, [sp, #4]
 80167f8:	f002 f8de 	bl	80189b8 <rcutils_get_env>
 80167fc:	b120      	cbz	r0, 8016808 <rcl_get_security_options_from_environment+0x24>
 80167fe:	2501      	movs	r5, #1
 8016800:	4628      	mov	r0, r5
 8016802:	b002      	add	sp, #8
 8016804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016808:	4604      	mov	r4, r0
 801680a:	491c      	ldr	r1, [pc, #112]	@ (801687c <rcl_get_security_options_from_environment+0x98>)
 801680c:	9801      	ldr	r0, [sp, #4]
 801680e:	f7e9 fd67 	bl	80002e0 <strcmp>
 8016812:	4605      	mov	r5, r0
 8016814:	b9f0      	cbnz	r0, 8016854 <rcl_get_security_options_from_environment+0x70>
 8016816:	9001      	str	r0, [sp, #4]
 8016818:	f1b8 0f00 	cmp.w	r8, #0
 801681c:	d021      	beq.n	8016862 <rcl_get_security_options_from_environment+0x7e>
 801681e:	a901      	add	r1, sp, #4
 8016820:	4817      	ldr	r0, [pc, #92]	@ (8016880 <rcl_get_security_options_from_environment+0x9c>)
 8016822:	f002 f8c9 	bl	80189b8 <rcutils_get_env>
 8016826:	2800      	cmp	r0, #0
 8016828:	d1e9      	bne.n	80167fe <rcl_get_security_options_from_environment+0x1a>
 801682a:	4916      	ldr	r1, [pc, #88]	@ (8016884 <rcl_get_security_options_from_environment+0xa0>)
 801682c:	9801      	ldr	r0, [sp, #4]
 801682e:	f7e9 fd57 	bl	80002e0 <strcmp>
 8016832:	4603      	mov	r3, r0
 8016834:	4639      	mov	r1, r7
 8016836:	4630      	mov	r0, r6
 8016838:	fab3 f383 	clz	r3, r3
 801683c:	095b      	lsrs	r3, r3, #5
 801683e:	f888 3000 	strb.w	r3, [r8]
 8016842:	f7ff ff65 	bl	8016710 <rcl_get_secure_root>
 8016846:	b170      	cbz	r0, 8016866 <rcl_get_security_options_from_environment+0x82>
 8016848:	f8c8 0004 	str.w	r0, [r8, #4]
 801684c:	4628      	mov	r0, r5
 801684e:	b002      	add	sp, #8
 8016850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016854:	4625      	mov	r5, r4
 8016856:	f888 4000 	strb.w	r4, [r8]
 801685a:	4628      	mov	r0, r5
 801685c:	b002      	add	sp, #8
 801685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016862:	250b      	movs	r5, #11
 8016864:	e7cc      	b.n	8016800 <rcl_get_security_options_from_environment+0x1c>
 8016866:	f898 5000 	ldrb.w	r5, [r8]
 801686a:	f1a5 0501 	sub.w	r5, r5, #1
 801686e:	fab5 f585 	clz	r5, r5
 8016872:	096d      	lsrs	r5, r5, #5
 8016874:	e7c4      	b.n	8016800 <rcl_get_security_options_from_environment+0x1c>
 8016876:	bf00      	nop
 8016878:	08023c00 	.word	0x08023c00
 801687c:	08023c14 	.word	0x08023c14
 8016880:	08023c1c 	.word	0x08023c1c
 8016884:	08023c34 	.word	0x08023c34

08016888 <rcl_get_zero_initialized_service>:
 8016888:	4b01      	ldr	r3, [pc, #4]	@ (8016890 <rcl_get_zero_initialized_service+0x8>)
 801688a:	6818      	ldr	r0, [r3, #0]
 801688c:	4770      	bx	lr
 801688e:	bf00      	nop
 8016890:	08023c80 	.word	0x08023c80

08016894 <rcl_service_init>:
 8016894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016898:	b088      	sub	sp, #32
 801689a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801689c:	b1ff      	cbz	r7, 80168de <rcl_service_init+0x4a>
 801689e:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 80168a2:	4605      	mov	r5, r0
 80168a4:	460e      	mov	r6, r1
 80168a6:	4691      	mov	r9, r2
 80168a8:	4650      	mov	r0, sl
 80168aa:	4698      	mov	r8, r3
 80168ac:	f7fe fa22 	bl	8014cf4 <rcutils_allocator_is_valid>
 80168b0:	f080 0401 	eor.w	r4, r0, #1
 80168b4:	b2e4      	uxtb	r4, r4
 80168b6:	b994      	cbnz	r4, 80168de <rcl_service_init+0x4a>
 80168b8:	b18d      	cbz	r5, 80168de <rcl_service_init+0x4a>
 80168ba:	4630      	mov	r0, r6
 80168bc:	f7ff fcc8 	bl	8016250 <rcl_node_is_valid>
 80168c0:	2800      	cmp	r0, #0
 80168c2:	d05d      	beq.n	8016980 <rcl_service_init+0xec>
 80168c4:	f1b8 0f00 	cmp.w	r8, #0
 80168c8:	d009      	beq.n	80168de <rcl_service_init+0x4a>
 80168ca:	f1b9 0f00 	cmp.w	r9, #0
 80168ce:	d006      	beq.n	80168de <rcl_service_init+0x4a>
 80168d0:	682b      	ldr	r3, [r5, #0]
 80168d2:	b14b      	cbz	r3, 80168e8 <rcl_service_init+0x54>
 80168d4:	2464      	movs	r4, #100	@ 0x64
 80168d6:	4620      	mov	r0, r4
 80168d8:	b008      	add	sp, #32
 80168da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168de:	240b      	movs	r4, #11
 80168e0:	4620      	mov	r0, r4
 80168e2:	b008      	add	sp, #32
 80168e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168e8:	aa07      	add	r2, sp, #28
 80168ea:	9304      	str	r3, [sp, #16]
 80168ec:	9307      	str	r3, [sp, #28]
 80168ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80168f2:	9205      	str	r2, [sp, #20]
 80168f4:	2201      	movs	r2, #1
 80168f6:	9203      	str	r2, [sp, #12]
 80168f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80168fc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016900:	4641      	mov	r1, r8
 8016902:	4630      	mov	r0, r6
 8016904:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8016908:	f7ff fcfa 	bl	8016300 <rcl_node_resolve_name>
 801690c:	2800      	cmp	r0, #0
 801690e:	d146      	bne.n	801699e <rcl_service_init+0x10a>
 8016910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016912:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8016916:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8016918:	4798      	blx	r3
 801691a:	6028      	str	r0, [r5, #0]
 801691c:	2800      	cmp	r0, #0
 801691e:	d046      	beq.n	80169ae <rcl_service_init+0x11a>
 8016920:	4630      	mov	r0, r6
 8016922:	f7ff fcb7 	bl	8016294 <rcl_node_get_rmw_handle>
 8016926:	463b      	mov	r3, r7
 8016928:	4649      	mov	r1, r9
 801692a:	9a07      	ldr	r2, [sp, #28]
 801692c:	682c      	ldr	r4, [r5, #0]
 801692e:	f003 fb17 	bl	8019f60 <rmw_create_service>
 8016932:	682b      	ldr	r3, [r5, #0]
 8016934:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108
 8016938:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801693c:	b338      	cbz	r0, 801698e <rcl_service_init+0xfa>
 801693e:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8016942:	f003 fc3f 	bl	801a1c4 <rmw_service_request_subscription_get_actual_qos>
 8016946:	bb00      	cbnz	r0, 801698a <rcl_service_init+0xf6>
 8016948:	682b      	ldr	r3, [r5, #0]
 801694a:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 801694e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016952:	f003 fc23 	bl	801a19c <rmw_service_response_publisher_get_actual_qos>
 8016956:	4604      	mov	r4, r0
 8016958:	b9b8      	cbnz	r0, 801698a <rcl_service_init+0xf6>
 801695a:	6828      	ldr	r0, [r5, #0]
 801695c:	2268      	movs	r2, #104	@ 0x68
 801695e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8016962:	4639      	mov	r1, r7
 8016964:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8016968:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 801696c:	f00a fc45 	bl	80211fa <memcpy>
 8016970:	9807      	ldr	r0, [sp, #28]
 8016972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016974:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8016976:	4798      	blx	r3
 8016978:	4620      	mov	r0, r4
 801697a:	b008      	add	sp, #32
 801697c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016980:	24c8      	movs	r4, #200	@ 0xc8
 8016982:	4620      	mov	r0, r4
 8016984:	b008      	add	sp, #32
 8016986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801698a:	682b      	ldr	r3, [r5, #0]
 801698c:	b16b      	cbz	r3, 80169aa <rcl_service_init+0x116>
 801698e:	4618      	mov	r0, r3
 8016990:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016992:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8016994:	2401      	movs	r4, #1
 8016996:	4790      	blx	r2
 8016998:	2300      	movs	r3, #0
 801699a:	602b      	str	r3, [r5, #0]
 801699c:	e7e8      	b.n	8016970 <rcl_service_init+0xdc>
 801699e:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 80169a2:	2b01      	cmp	r3, #1
 80169a4:	d905      	bls.n	80169b2 <rcl_service_init+0x11e>
 80169a6:	280a      	cmp	r0, #10
 80169a8:	d001      	beq.n	80169ae <rcl_service_init+0x11a>
 80169aa:	2401      	movs	r4, #1
 80169ac:	e7e0      	b.n	8016970 <rcl_service_init+0xdc>
 80169ae:	240a      	movs	r4, #10
 80169b0:	e7de      	b.n	8016970 <rcl_service_init+0xdc>
 80169b2:	2468      	movs	r4, #104	@ 0x68
 80169b4:	e7dc      	b.n	8016970 <rcl_service_init+0xdc>
 80169b6:	bf00      	nop

080169b8 <rcl_service_get_default_options>:
 80169b8:	b530      	push	{r4, r5, lr}
 80169ba:	4d0f      	ldr	r5, [pc, #60]	@ (80169f8 <rcl_service_get_default_options+0x40>)
 80169bc:	b087      	sub	sp, #28
 80169be:	4604      	mov	r4, r0
 80169c0:	2250      	movs	r2, #80	@ 0x50
 80169c2:	490e      	ldr	r1, [pc, #56]	@ (80169fc <rcl_service_get_default_options+0x44>)
 80169c4:	4628      	mov	r0, r5
 80169c6:	f00a fc18 	bl	80211fa <memcpy>
 80169ca:	4668      	mov	r0, sp
 80169cc:	f7fe f984 	bl	8014cd8 <rcutils_get_default_allocator>
 80169d0:	46ec      	mov	ip, sp
 80169d2:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80169d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80169da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80169de:	f8dc 3000 	ldr.w	r3, [ip]
 80169e2:	2268      	movs	r2, #104	@ 0x68
 80169e4:	4629      	mov	r1, r5
 80169e6:	4620      	mov	r0, r4
 80169e8:	f8ce 3000 	str.w	r3, [lr]
 80169ec:	f00a fc05 	bl	80211fa <memcpy>
 80169f0:	4620      	mov	r0, r4
 80169f2:	b007      	add	sp, #28
 80169f4:	bd30      	pop	{r4, r5, pc}
 80169f6:	bf00      	nop
 80169f8:	240649b8 	.word	0x240649b8
 80169fc:	08023c88 	.word	0x08023c88

08016a00 <rcl_service_get_rmw_handle>:
 8016a00:	b118      	cbz	r0, 8016a0a <rcl_service_get_rmw_handle+0xa>
 8016a02:	6800      	ldr	r0, [r0, #0]
 8016a04:	b108      	cbz	r0, 8016a0a <rcl_service_get_rmw_handle+0xa>
 8016a06:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016a0a:	4770      	bx	lr

08016a0c <rcl_take_request>:
 8016a0c:	b570      	push	{r4, r5, r6, lr}
 8016a0e:	468e      	mov	lr, r1
 8016a10:	b08c      	sub	sp, #48	@ 0x30
 8016a12:	460c      	mov	r4, r1
 8016a14:	4616      	mov	r6, r2
 8016a16:	f10d 0c18 	add.w	ip, sp, #24
 8016a1a:	4605      	mov	r5, r0
 8016a1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a24:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016a28:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016a2c:	b30d      	cbz	r5, 8016a72 <rcl_take_request+0x66>
 8016a2e:	682b      	ldr	r3, [r5, #0]
 8016a30:	b1fb      	cbz	r3, 8016a72 <rcl_take_request+0x66>
 8016a32:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016a36:	b1e0      	cbz	r0, 8016a72 <rcl_take_request+0x66>
 8016a38:	b336      	cbz	r6, 8016a88 <rcl_take_request+0x7c>
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	4632      	mov	r2, r6
 8016a3e:	a902      	add	r1, sp, #8
 8016a40:	f88d 3007 	strb.w	r3, [sp, #7]
 8016a44:	f10d 0307 	add.w	r3, sp, #7
 8016a48:	f003 f988 	bl	8019d5c <rmw_take_request>
 8016a4c:	4605      	mov	r5, r0
 8016a4e:	b198      	cbz	r0, 8016a78 <rcl_take_request+0x6c>
 8016a50:	280a      	cmp	r0, #10
 8016a52:	bf18      	it	ne
 8016a54:	2501      	movne	r5, #1
 8016a56:	f10d 0e18 	add.w	lr, sp, #24
 8016a5a:	46a4      	mov	ip, r4
 8016a5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a64:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016a68:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016a6c:	4628      	mov	r0, r5
 8016a6e:	b00c      	add	sp, #48	@ 0x30
 8016a70:	bd70      	pop	{r4, r5, r6, pc}
 8016a72:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8016a76:	e7ee      	b.n	8016a56 <rcl_take_request+0x4a>
 8016a78:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016a7c:	f240 2359 	movw	r3, #601	@ 0x259
 8016a80:	2a00      	cmp	r2, #0
 8016a82:	bf08      	it	eq
 8016a84:	461d      	moveq	r5, r3
 8016a86:	e7e6      	b.n	8016a56 <rcl_take_request+0x4a>
 8016a88:	250b      	movs	r5, #11
 8016a8a:	e7e4      	b.n	8016a56 <rcl_take_request+0x4a>

08016a8c <rcl_send_response>:
 8016a8c:	b170      	cbz	r0, 8016aac <rcl_send_response+0x20>
 8016a8e:	6800      	ldr	r0, [r0, #0]
 8016a90:	b160      	cbz	r0, 8016aac <rcl_send_response+0x20>
 8016a92:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016a96:	b148      	cbz	r0, 8016aac <rcl_send_response+0x20>
 8016a98:	b169      	cbz	r1, 8016ab6 <rcl_send_response+0x2a>
 8016a9a:	b510      	push	{r4, lr}
 8016a9c:	b14a      	cbz	r2, 8016ab2 <rcl_send_response+0x26>
 8016a9e:	f003 f9bb 	bl	8019e18 <rmw_send_response>
 8016aa2:	b110      	cbz	r0, 8016aaa <rcl_send_response+0x1e>
 8016aa4:	2802      	cmp	r0, #2
 8016aa6:	bf18      	it	ne
 8016aa8:	2001      	movne	r0, #1
 8016aaa:	bd10      	pop	{r4, pc}
 8016aac:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8016ab0:	4770      	bx	lr
 8016ab2:	200b      	movs	r0, #11
 8016ab4:	bd10      	pop	{r4, pc}
 8016ab6:	200b      	movs	r0, #11
 8016ab8:	4770      	bx	lr
 8016aba:	bf00      	nop

08016abc <rcl_service_is_valid>:
 8016abc:	b130      	cbz	r0, 8016acc <rcl_service_is_valid+0x10>
 8016abe:	6800      	ldr	r0, [r0, #0]
 8016ac0:	b120      	cbz	r0, 8016acc <rcl_service_is_valid+0x10>
 8016ac2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016ac6:	3800      	subs	r0, #0
 8016ac8:	bf18      	it	ne
 8016aca:	2001      	movne	r0, #1
 8016acc:	4770      	bx	lr
 8016ace:	bf00      	nop

08016ad0 <rcl_get_zero_initialized_subscription>:
 8016ad0:	4b01      	ldr	r3, [pc, #4]	@ (8016ad8 <rcl_get_zero_initialized_subscription+0x8>)
 8016ad2:	6818      	ldr	r0, [r3, #0]
 8016ad4:	4770      	bx	lr
 8016ad6:	bf00      	nop
 8016ad8:	08023cd8 	.word	0x08023cd8

08016adc <rcl_subscription_init>:
 8016adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ae0:	b088      	sub	sp, #32
 8016ae2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8016ae4:	b1ff      	cbz	r7, 8016b26 <rcl_subscription_init+0x4a>
 8016ae6:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 8016aea:	4605      	mov	r5, r0
 8016aec:	460e      	mov	r6, r1
 8016aee:	4691      	mov	r9, r2
 8016af0:	4650      	mov	r0, sl
 8016af2:	4698      	mov	r8, r3
 8016af4:	f7fe f8fe 	bl	8014cf4 <rcutils_allocator_is_valid>
 8016af8:	f080 0401 	eor.w	r4, r0, #1
 8016afc:	b2e4      	uxtb	r4, r4
 8016afe:	b994      	cbnz	r4, 8016b26 <rcl_subscription_init+0x4a>
 8016b00:	b18d      	cbz	r5, 8016b26 <rcl_subscription_init+0x4a>
 8016b02:	4630      	mov	r0, r6
 8016b04:	f7ff fba4 	bl	8016250 <rcl_node_is_valid>
 8016b08:	2800      	cmp	r0, #0
 8016b0a:	d055      	beq.n	8016bb8 <rcl_subscription_init+0xdc>
 8016b0c:	f1b9 0f00 	cmp.w	r9, #0
 8016b10:	d009      	beq.n	8016b26 <rcl_subscription_init+0x4a>
 8016b12:	f1b8 0f00 	cmp.w	r8, #0
 8016b16:	d006      	beq.n	8016b26 <rcl_subscription_init+0x4a>
 8016b18:	682b      	ldr	r3, [r5, #0]
 8016b1a:	b14b      	cbz	r3, 8016b30 <rcl_subscription_init+0x54>
 8016b1c:	2464      	movs	r4, #100	@ 0x64
 8016b1e:	4620      	mov	r0, r4
 8016b20:	b008      	add	sp, #32
 8016b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b26:	240b      	movs	r4, #11
 8016b28:	4620      	mov	r0, r4
 8016b2a:	b008      	add	sp, #32
 8016b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b30:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8016b34:	aa07      	add	r2, sp, #28
 8016b36:	9307      	str	r3, [sp, #28]
 8016b38:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8016b3c:	9205      	str	r2, [sp, #20]
 8016b3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016b42:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016b46:	4641      	mov	r1, r8
 8016b48:	4630      	mov	r0, r6
 8016b4a:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8016b4e:	f7ff fbd7 	bl	8016300 <rcl_node_resolve_name>
 8016b52:	2800      	cmp	r0, #0
 8016b54:	d15f      	bne.n	8016c16 <rcl_subscription_init+0x13a>
 8016b56:	21c8      	movs	r1, #200	@ 0xc8
 8016b58:	2001      	movs	r0, #1
 8016b5a:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 8016b5e:	4798      	blx	r3
 8016b60:	6028      	str	r0, [r5, #0]
 8016b62:	2800      	cmp	r0, #0
 8016b64:	d05f      	beq.n	8016c26 <rcl_subscription_init+0x14a>
 8016b66:	4630      	mov	r0, r6
 8016b68:	f7ff fb94 	bl	8016294 <rcl_node_get_rmw_handle>
 8016b6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8016b70:	4649      	mov	r1, r9
 8016b72:	9a07      	ldr	r2, [sp, #28]
 8016b74:	9300      	str	r3, [sp, #0]
 8016b76:	463b      	mov	r3, r7
 8016b78:	682c      	ldr	r4, [r5, #0]
 8016b7a:	f003 fb37 	bl	801a1ec <rmw_create_subscription>
 8016b7e:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8016b82:	682c      	ldr	r4, [r5, #0]
 8016b84:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8016b88:	b348      	cbz	r0, 8016bde <rcl_subscription_init+0x102>
 8016b8a:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 8016b8e:	f003 fc23 	bl	801a3d8 <rmw_subscription_get_actual_qos>
 8016b92:	4604      	mov	r4, r0
 8016b94:	b9a8      	cbnz	r0, 8016bc2 <rcl_subscription_init+0xe6>
 8016b96:	6828      	ldr	r0, [r5, #0]
 8016b98:	2270      	movs	r2, #112	@ 0x70
 8016b9a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8016b9e:	4639      	mov	r1, r7
 8016ba0:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8016ba4:	f00a fb29 	bl	80211fa <memcpy>
 8016ba8:	9807      	ldr	r0, [sp, #28]
 8016baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016bac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8016bae:	4798      	blx	r3
 8016bb0:	4620      	mov	r0, r4
 8016bb2:	b008      	add	sp, #32
 8016bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bb8:	24c8      	movs	r4, #200	@ 0xc8
 8016bba:	4620      	mov	r0, r4
 8016bbc:	b008      	add	sp, #32
 8016bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bc2:	682c      	ldr	r4, [r5, #0]
 8016bc4:	b36c      	cbz	r4, 8016c22 <rcl_subscription_init+0x146>
 8016bc6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8016bca:	b14b      	cbz	r3, 8016be0 <rcl_subscription_init+0x104>
 8016bcc:	4630      	mov	r0, r6
 8016bce:	f7ff fb61 	bl	8016294 <rcl_node_get_rmw_handle>
 8016bd2:	682b      	ldr	r3, [r5, #0]
 8016bd4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8016bd8:	f003 fc12 	bl	801a400 <rmw_destroy_subscription>
 8016bdc:	682c      	ldr	r4, [r5, #0]
 8016bde:	b194      	cbz	r4, 8016c06 <rcl_subscription_init+0x12a>
 8016be0:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 8016be4:	4630      	mov	r0, r6
 8016be6:	f7fe f885 	bl	8014cf4 <rcutils_allocator_is_valid>
 8016bea:	b158      	cbz	r0, 8016c04 <rcl_subscription_init+0x128>
 8016bec:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8016bee:	b148      	cbz	r0, 8016c04 <rcl_subscription_init+0x128>
 8016bf0:	4631      	mov	r1, r6
 8016bf2:	f002 f9dd 	bl	8018fb0 <rmw_subscription_content_filter_options_fini>
 8016bf6:	4606      	mov	r6, r0
 8016bf8:	b9c8      	cbnz	r0, 8016c2e <rcl_subscription_init+0x152>
 8016bfa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016bfc:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8016bfe:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8016c00:	4798      	blx	r3
 8016c02:	66e6      	str	r6, [r4, #108]	@ 0x6c
 8016c04:	682c      	ldr	r4, [r5, #0]
 8016c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c08:	4620      	mov	r0, r4
 8016c0a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8016c0c:	2401      	movs	r4, #1
 8016c0e:	4798      	blx	r3
 8016c10:	2300      	movs	r3, #0
 8016c12:	602b      	str	r3, [r5, #0]
 8016c14:	e7c8      	b.n	8016ba8 <rcl_subscription_init+0xcc>
 8016c16:	2867      	cmp	r0, #103	@ 0x67
 8016c18:	d007      	beq.n	8016c2a <rcl_subscription_init+0x14e>
 8016c1a:	2869      	cmp	r0, #105	@ 0x69
 8016c1c:	d005      	beq.n	8016c2a <rcl_subscription_init+0x14e>
 8016c1e:	280a      	cmp	r0, #10
 8016c20:	d001      	beq.n	8016c26 <rcl_subscription_init+0x14a>
 8016c22:	2401      	movs	r4, #1
 8016c24:	e7c0      	b.n	8016ba8 <rcl_subscription_init+0xcc>
 8016c26:	240a      	movs	r4, #10
 8016c28:	e7be      	b.n	8016ba8 <rcl_subscription_init+0xcc>
 8016c2a:	2467      	movs	r4, #103	@ 0x67
 8016c2c:	e7bc      	b.n	8016ba8 <rcl_subscription_init+0xcc>
 8016c2e:	f008 f979 	bl	801ef24 <rcl_convert_rmw_ret_to_rcl_ret>
 8016c32:	682c      	ldr	r4, [r5, #0]
 8016c34:	e7e7      	b.n	8016c06 <rcl_subscription_init+0x12a>
 8016c36:	bf00      	nop

08016c38 <rcl_subscription_get_default_options>:
 8016c38:	b570      	push	{r4, r5, r6, lr}
 8016c3a:	4d14      	ldr	r5, [pc, #80]	@ (8016c8c <rcl_subscription_get_default_options+0x54>)
 8016c3c:	b08a      	sub	sp, #40	@ 0x28
 8016c3e:	4604      	mov	r4, r0
 8016c40:	2250      	movs	r2, #80	@ 0x50
 8016c42:	4913      	ldr	r1, [pc, #76]	@ (8016c90 <rcl_subscription_get_default_options+0x58>)
 8016c44:	4628      	mov	r0, r5
 8016c46:	f00a fad8 	bl	80211fa <memcpy>
 8016c4a:	a804      	add	r0, sp, #16
 8016c4c:	f7fe f844 	bl	8014cd8 <rcutils_get_default_allocator>
 8016c50:	f10d 0c10 	add.w	ip, sp, #16
 8016c54:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8016c58:	466e      	mov	r6, sp
 8016c5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c62:	f8dc 3000 	ldr.w	r3, [ip]
 8016c66:	4630      	mov	r0, r6
 8016c68:	f8ce 3000 	str.w	r3, [lr]
 8016c6c:	f002 f9ba 	bl	8018fe4 <rmw_get_default_subscription_options>
 8016c70:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8016c74:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016c78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016c7c:	2270      	movs	r2, #112	@ 0x70
 8016c7e:	4629      	mov	r1, r5
 8016c80:	4620      	mov	r0, r4
 8016c82:	f00a faba 	bl	80211fa <memcpy>
 8016c86:	4620      	mov	r0, r4
 8016c88:	b00a      	add	sp, #40	@ 0x28
 8016c8a:	bd70      	pop	{r4, r5, r6, pc}
 8016c8c:	24064a20 	.word	0x24064a20
 8016c90:	08023ce0 	.word	0x08023ce0

08016c94 <rcl_take>:
 8016c94:	2800      	cmp	r0, #0
 8016c96:	d049      	beq.n	8016d2c <rcl_take+0x98>
 8016c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c9c:	4615      	mov	r5, r2
 8016c9e:	6802      	ldr	r2, [r0, #0]
 8016ca0:	b0a4      	sub	sp, #144	@ 0x90
 8016ca2:	4604      	mov	r4, r0
 8016ca4:	2a00      	cmp	r2, #0
 8016ca6:	d039      	beq.n	8016d1c <rcl_take+0x88>
 8016ca8:	461f      	mov	r7, r3
 8016caa:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8016cae:	b3ab      	cbz	r3, 8016d1c <rcl_take+0x88>
 8016cb0:	460e      	mov	r6, r1
 8016cb2:	2900      	cmp	r1, #0
 8016cb4:	d038      	beq.n	8016d28 <rcl_take+0x94>
 8016cb6:	2d00      	cmp	r5, #0
 8016cb8:	d03c      	beq.n	8016d34 <rcl_take+0xa0>
 8016cba:	a802      	add	r0, sp, #8
 8016cbc:	f04f 0800 	mov.w	r8, #0
 8016cc0:	f002 f996 	bl	8018ff0 <rmw_get_zero_initialized_message_info>
 8016cc4:	f10d 0c08 	add.w	ip, sp, #8
 8016cc8:	46ae      	mov	lr, r5
 8016cca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016cce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016cd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016cd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016cda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016cde:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016ce2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8016ce6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8016cea:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8016cee:	462b      	mov	r3, r5
 8016cf0:	6820      	ldr	r0, [r4, #0]
 8016cf2:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8016cf6:	4631      	mov	r1, r6
 8016cf8:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016cfc:	9700      	str	r7, [sp, #0]
 8016cfe:	f003 fbe1 	bl	801a4c4 <rmw_take_with_info>
 8016d02:	4603      	mov	r3, r0
 8016d04:	b9c0      	cbnz	r0, 8016d38 <rcl_take+0xa4>
 8016d06:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8016d0a:	f240 1291 	movw	r2, #401	@ 0x191
 8016d0e:	2900      	cmp	r1, #0
 8016d10:	bf08      	it	eq
 8016d12:	4613      	moveq	r3, r2
 8016d14:	4618      	mov	r0, r3
 8016d16:	b024      	add	sp, #144	@ 0x90
 8016d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d1c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016d20:	4618      	mov	r0, r3
 8016d22:	b024      	add	sp, #144	@ 0x90
 8016d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d28:	230b      	movs	r3, #11
 8016d2a:	e7f3      	b.n	8016d14 <rcl_take+0x80>
 8016d2c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016d30:	4618      	mov	r0, r3
 8016d32:	4770      	bx	lr
 8016d34:	ad14      	add	r5, sp, #80	@ 0x50
 8016d36:	e7c0      	b.n	8016cba <rcl_take+0x26>
 8016d38:	f008 f8f4 	bl	801ef24 <rcl_convert_rmw_ret_to_rcl_ret>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	e7e9      	b.n	8016d14 <rcl_take+0x80>

08016d40 <rcl_subscription_get_rmw_handle>:
 8016d40:	b118      	cbz	r0, 8016d4a <rcl_subscription_get_rmw_handle+0xa>
 8016d42:	6800      	ldr	r0, [r0, #0]
 8016d44:	b108      	cbz	r0, 8016d4a <rcl_subscription_get_rmw_handle+0xa>
 8016d46:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016d4a:	4770      	bx	lr

08016d4c <rcl_subscription_is_valid>:
 8016d4c:	b130      	cbz	r0, 8016d5c <rcl_subscription_is_valid+0x10>
 8016d4e:	6800      	ldr	r0, [r0, #0]
 8016d50:	b120      	cbz	r0, 8016d5c <rcl_subscription_is_valid+0x10>
 8016d52:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016d56:	3800      	subs	r0, #0
 8016d58:	bf18      	it	ne
 8016d5a:	2001      	movne	r0, #1
 8016d5c:	4770      	bx	lr
 8016d5e:	bf00      	nop

08016d60 <rcl_get_system_time>:
 8016d60:	4608      	mov	r0, r1
 8016d62:	f7fe b809 	b.w	8014d78 <rcutils_system_time_now>
 8016d66:	bf00      	nop

08016d68 <rcl_get_steady_time>:
 8016d68:	4608      	mov	r0, r1
 8016d6a:	f7fe b82b 	b.w	8014dc4 <rcutils_steady_time_now>
 8016d6e:	bf00      	nop

08016d70 <rcl_get_ros_time>:
 8016d70:	7a03      	ldrb	r3, [r0, #8]
 8016d72:	b510      	push	{r4, lr}
 8016d74:	460c      	mov	r4, r1
 8016d76:	b143      	cbz	r3, 8016d8a <rcl_get_ros_time+0x1a>
 8016d78:	2105      	movs	r1, #5
 8016d7a:	f001 fd79 	bl	8018870 <__atomic_load_8>
 8016d7e:	4602      	mov	r2, r0
 8016d80:	460b      	mov	r3, r1
 8016d82:	2000      	movs	r0, #0
 8016d84:	e9c4 2300 	strd	r2, r3, [r4]
 8016d88:	bd10      	pop	{r4, pc}
 8016d8a:	4608      	mov	r0, r1
 8016d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d90:	f7fd bff2 	b.w	8014d78 <rcutils_system_time_now>

08016d94 <rcl_clock_init>:
 8016d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d96:	4605      	mov	r5, r0
 8016d98:	4610      	mov	r0, r2
 8016d9a:	4614      	mov	r4, r2
 8016d9c:	460e      	mov	r6, r1
 8016d9e:	f7fd ffa9 	bl	8014cf4 <rcutils_allocator_is_valid>
 8016da2:	b128      	cbz	r0, 8016db0 <rcl_clock_init+0x1c>
 8016da4:	2d03      	cmp	r5, #3
 8016da6:	d803      	bhi.n	8016db0 <rcl_clock_init+0x1c>
 8016da8:	e8df f005 	tbb	[pc, r5]
 8016dac:	0659301f 	.word	0x0659301f
 8016db0:	f04f 0c0b 	mov.w	ip, #11
 8016db4:	4660      	mov	r0, ip
 8016db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016db8:	2c00      	cmp	r4, #0
 8016dba:	d0f9      	beq.n	8016db0 <rcl_clock_init+0x1c>
 8016dbc:	fab6 f386 	clz	r3, r6
 8016dc0:	095b      	lsrs	r3, r3, #5
 8016dc2:	2e00      	cmp	r6, #0
 8016dc4:	d0f4      	beq.n	8016db0 <rcl_clock_init+0x1c>
 8016dc6:	6133      	str	r3, [r6, #16]
 8016dc8:	469c      	mov	ip, r3
 8016dca:	f106 0514 	add.w	r5, r6, #20
 8016dce:	4f32      	ldr	r7, [pc, #200]	@ (8016e98 <rcl_clock_init+0x104>)
 8016dd0:	f04f 0e03 	mov.w	lr, #3
 8016dd4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016ddc:	6823      	ldr	r3, [r4, #0]
 8016dde:	4660      	mov	r0, ip
 8016de0:	602b      	str	r3, [r5, #0]
 8016de2:	60f7      	str	r7, [r6, #12]
 8016de4:	f886 e000 	strb.w	lr, [r6]
 8016de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dea:	2e00      	cmp	r6, #0
 8016dec:	d0e0      	beq.n	8016db0 <rcl_clock_init+0x1c>
 8016dee:	2300      	movs	r3, #0
 8016df0:	f106 0514 	add.w	r5, r6, #20
 8016df4:	7033      	strb	r3, [r6, #0]
 8016df6:	469c      	mov	ip, r3
 8016df8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016dfc:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8016e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016e04:	6823      	ldr	r3, [r4, #0]
 8016e06:	4660      	mov	r0, ip
 8016e08:	602b      	str	r3, [r5, #0]
 8016e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e0c:	2c00      	cmp	r4, #0
 8016e0e:	d0cf      	beq.n	8016db0 <rcl_clock_init+0x1c>
 8016e10:	fab6 f586 	clz	r5, r6
 8016e14:	096d      	lsrs	r5, r5, #5
 8016e16:	2e00      	cmp	r6, #0
 8016e18:	d0ca      	beq.n	8016db0 <rcl_clock_init+0x1c>
 8016e1a:	46a6      	mov	lr, r4
 8016e1c:	7035      	strb	r5, [r6, #0]
 8016e1e:	f106 0c14 	add.w	ip, r6, #20
 8016e22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016e26:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8016e2a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8016e2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e32:	f8de 3000 	ldr.w	r3, [lr]
 8016e36:	2010      	movs	r0, #16
 8016e38:	f8cc 3000 	str.w	r3, [ip]
 8016e3c:	6823      	ldr	r3, [r4, #0]
 8016e3e:	6921      	ldr	r1, [r4, #16]
 8016e40:	4798      	blx	r3
 8016e42:	6130      	str	r0, [r6, #16]
 8016e44:	b320      	cbz	r0, 8016e90 <rcl_clock_init+0xfc>
 8016e46:	2200      	movs	r2, #0
 8016e48:	2300      	movs	r3, #0
 8016e4a:	46ac      	mov	ip, r5
 8016e4c:	7205      	strb	r5, [r0, #8]
 8016e4e:	e9c0 2300 	strd	r2, r3, [r0]
 8016e52:	4a12      	ldr	r2, [pc, #72]	@ (8016e9c <rcl_clock_init+0x108>)
 8016e54:	2301      	movs	r3, #1
 8016e56:	4660      	mov	r0, ip
 8016e58:	60f2      	str	r2, [r6, #12]
 8016e5a:	7033      	strb	r3, [r6, #0]
 8016e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e5e:	2c00      	cmp	r4, #0
 8016e60:	d0a6      	beq.n	8016db0 <rcl_clock_init+0x1c>
 8016e62:	fab6 f386 	clz	r3, r6
 8016e66:	095b      	lsrs	r3, r3, #5
 8016e68:	2e00      	cmp	r6, #0
 8016e6a:	d0a1      	beq.n	8016db0 <rcl_clock_init+0x1c>
 8016e6c:	6133      	str	r3, [r6, #16]
 8016e6e:	469c      	mov	ip, r3
 8016e70:	f106 0514 	add.w	r5, r6, #20
 8016e74:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8016ea0 <rcl_clock_init+0x10c>
 8016e78:	2702      	movs	r7, #2
 8016e7a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016e82:	6823      	ldr	r3, [r4, #0]
 8016e84:	4660      	mov	r0, ip
 8016e86:	602b      	str	r3, [r5, #0]
 8016e88:	f8c6 e00c 	str.w	lr, [r6, #12]
 8016e8c:	7037      	strb	r7, [r6, #0]
 8016e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e90:	f04f 0c0a 	mov.w	ip, #10
 8016e94:	e78e      	b.n	8016db4 <rcl_clock_init+0x20>
 8016e96:	bf00      	nop
 8016e98:	08016d69 	.word	0x08016d69
 8016e9c:	08016d71 	.word	0x08016d71
 8016ea0:	08016d61 	.word	0x08016d61

08016ea4 <rcl_clock_get_now>:
 8016ea4:	b140      	cbz	r0, 8016eb8 <rcl_clock_get_now+0x14>
 8016ea6:	b139      	cbz	r1, 8016eb8 <rcl_clock_get_now+0x14>
 8016ea8:	7803      	ldrb	r3, [r0, #0]
 8016eaa:	b11b      	cbz	r3, 8016eb4 <rcl_clock_get_now+0x10>
 8016eac:	68c3      	ldr	r3, [r0, #12]
 8016eae:	b10b      	cbz	r3, 8016eb4 <rcl_clock_get_now+0x10>
 8016eb0:	6900      	ldr	r0, [r0, #16]
 8016eb2:	4718      	bx	r3
 8016eb4:	2001      	movs	r0, #1
 8016eb6:	4770      	bx	lr
 8016eb8:	200b      	movs	r0, #11
 8016eba:	4770      	bx	lr

08016ebc <rcl_timer_call>:
 8016ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ec0:	b087      	sub	sp, #28
 8016ec2:	2800      	cmp	r0, #0
 8016ec4:	d06c      	beq.n	8016fa0 <rcl_timer_call+0xe4>
 8016ec6:	6803      	ldr	r3, [r0, #0]
 8016ec8:	4604      	mov	r4, r0
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d062      	beq.n	8016f94 <rcl_timer_call+0xd8>
 8016ece:	f3bf 8f5b 	dmb	ish
 8016ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016ed6:	f3bf 8f5b 	dmb	ish
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d14f      	bne.n	8016f7e <rcl_timer_call+0xc2>
 8016ede:	6803      	ldr	r3, [r0, #0]
 8016ee0:	a904      	add	r1, sp, #16
 8016ee2:	6818      	ldr	r0, [r3, #0]
 8016ee4:	f7ff ffde 	bl	8016ea4 <rcl_clock_get_now>
 8016ee8:	4605      	mov	r5, r0
 8016eea:	2800      	cmp	r0, #0
 8016eec:	d149      	bne.n	8016f82 <rcl_timer_call+0xc6>
 8016eee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	db49      	blt.n	8016f8a <rcl_timer_call+0xce>
 8016ef6:	2605      	movs	r6, #5
 8016ef8:	6820      	ldr	r0, [r4, #0]
 8016efa:	9600      	str	r6, [sp, #0]
 8016efc:	3020      	adds	r0, #32
 8016efe:	f001 fd23 	bl	8018948 <__atomic_exchange_8>
 8016f02:	6823      	ldr	r3, [r4, #0]
 8016f04:	4680      	mov	r8, r0
 8016f06:	f3bf 8f5b 	dmb	ish
 8016f0a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8016f0e:	f3bf 8f5b 	dmb	ish
 8016f12:	6820      	ldr	r0, [r4, #0]
 8016f14:	4689      	mov	r9, r1
 8016f16:	4631      	mov	r1, r6
 8016f18:	3028      	adds	r0, #40	@ 0x28
 8016f1a:	f001 fca9 	bl	8018870 <__atomic_load_8>
 8016f1e:	460f      	mov	r7, r1
 8016f20:	4631      	mov	r1, r6
 8016f22:	4606      	mov	r6, r0
 8016f24:	6820      	ldr	r0, [r4, #0]
 8016f26:	3018      	adds	r0, #24
 8016f28:	f001 fca2 	bl	8018870 <__atomic_load_8>
 8016f2c:	4602      	mov	r2, r0
 8016f2e:	9804      	ldr	r0, [sp, #16]
 8016f30:	460b      	mov	r3, r1
 8016f32:	18b6      	adds	r6, r6, r2
 8016f34:	f8dd c014 	ldr.w	ip, [sp, #20]
 8016f38:	4692      	mov	sl, r2
 8016f3a:	eb47 0701 	adc.w	r7, r7, r1
 8016f3e:	4286      	cmp	r6, r0
 8016f40:	eb77 010c 	sbcs.w	r1, r7, ip
 8016f44:	da04      	bge.n	8016f50 <rcl_timer_call+0x94>
 8016f46:	ea53 0102 	orrs.w	r1, r3, r2
 8016f4a:	d12e      	bne.n	8016faa <rcl_timer_call+0xee>
 8016f4c:	4606      	mov	r6, r0
 8016f4e:	4667      	mov	r7, ip
 8016f50:	6820      	ldr	r0, [r4, #0]
 8016f52:	2105      	movs	r1, #5
 8016f54:	4632      	mov	r2, r6
 8016f56:	463b      	mov	r3, r7
 8016f58:	3028      	adds	r0, #40	@ 0x28
 8016f5a:	9100      	str	r1, [sp, #0]
 8016f5c:	f001 fcbe 	bl	80188dc <__atomic_store_8>
 8016f60:	f1bb 0f00 	cmp.w	fp, #0
 8016f64:	d00d      	beq.n	8016f82 <rcl_timer_call+0xc6>
 8016f66:	9a04      	ldr	r2, [sp, #16]
 8016f68:	4620      	mov	r0, r4
 8016f6a:	9b05      	ldr	r3, [sp, #20]
 8016f6c:	ebb2 0208 	subs.w	r2, r2, r8
 8016f70:	eb63 0309 	sbc.w	r3, r3, r9
 8016f74:	47d8      	blx	fp
 8016f76:	4628      	mov	r0, r5
 8016f78:	b007      	add	sp, #28
 8016f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f7e:	f240 3521 	movw	r5, #801	@ 0x321
 8016f82:	4628      	mov	r0, r5
 8016f84:	b007      	add	sp, #28
 8016f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f8a:	2501      	movs	r5, #1
 8016f8c:	4628      	mov	r0, r5
 8016f8e:	b007      	add	sp, #28
 8016f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f94:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8016f98:	4628      	mov	r0, r5
 8016f9a:	b007      	add	sp, #28
 8016f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fa0:	250b      	movs	r5, #11
 8016fa2:	4628      	mov	r0, r5
 8016fa4:	b007      	add	sp, #28
 8016fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016faa:	1b80      	subs	r0, r0, r6
 8016fac:	eb6c 0107 	sbc.w	r1, ip, r7
 8016fb0:	3801      	subs	r0, #1
 8016fb2:	f161 0100 	sbc.w	r1, r1, #0
 8016fb6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8016fba:	f7e9 f9f9 	bl	80003b0 <__aeabi_ldivmod>
 8016fbe:	9b02      	ldr	r3, [sp, #8]
 8016fc0:	3001      	adds	r0, #1
 8016fc2:	f141 0100 	adc.w	r1, r1, #0
 8016fc6:	fb00 f303 	mul.w	r3, r0, r3
 8016fca:	fb01 330a 	mla	r3, r1, sl, r3
 8016fce:	fba0 0a0a 	umull	r0, sl, r0, sl
 8016fd2:	1986      	adds	r6, r0, r6
 8016fd4:	4453      	add	r3, sl
 8016fd6:	eb43 0707 	adc.w	r7, r3, r7
 8016fda:	e7b9      	b.n	8016f50 <rcl_timer_call+0x94>

08016fdc <rcl_timer_is_ready>:
 8016fdc:	b570      	push	{r4, r5, r6, lr}
 8016fde:	b082      	sub	sp, #8
 8016fe0:	b380      	cbz	r0, 8017044 <rcl_timer_is_ready+0x68>
 8016fe2:	6803      	ldr	r3, [r0, #0]
 8016fe4:	4604      	mov	r4, r0
 8016fe6:	b38b      	cbz	r3, 801704c <rcl_timer_is_ready+0x70>
 8016fe8:	460d      	mov	r5, r1
 8016fea:	b359      	cbz	r1, 8017044 <rcl_timer_is_ready+0x68>
 8016fec:	f3bf 8f5b 	dmb	ish
 8016ff0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016ff4:	f3bf 8f5b 	dmb	ish
 8016ff8:	b953      	cbnz	r3, 8017010 <rcl_timer_is_ready+0x34>
 8016ffa:	6803      	ldr	r3, [r0, #0]
 8016ffc:	4669      	mov	r1, sp
 8016ffe:	6818      	ldr	r0, [r3, #0]
 8017000:	f7ff ff50 	bl	8016ea4 <rcl_clock_get_now>
 8017004:	4606      	mov	r6, r0
 8017006:	b148      	cbz	r0, 801701c <rcl_timer_is_ready+0x40>
 8017008:	f240 3321 	movw	r3, #801	@ 0x321
 801700c:	4298      	cmp	r0, r3
 801700e:	d102      	bne.n	8017016 <rcl_timer_is_ready+0x3a>
 8017010:	2300      	movs	r3, #0
 8017012:	461e      	mov	r6, r3
 8017014:	702b      	strb	r3, [r5, #0]
 8017016:	4630      	mov	r0, r6
 8017018:	b002      	add	sp, #8
 801701a:	bd70      	pop	{r4, r5, r6, pc}
 801701c:	6820      	ldr	r0, [r4, #0]
 801701e:	2105      	movs	r1, #5
 8017020:	3028      	adds	r0, #40	@ 0x28
 8017022:	f001 fc25 	bl	8018870 <__atomic_load_8>
 8017026:	9b00      	ldr	r3, [sp, #0]
 8017028:	1ac0      	subs	r0, r0, r3
 801702a:	9b01      	ldr	r3, [sp, #4]
 801702c:	eb61 0103 	sbc.w	r1, r1, r3
 8017030:	2801      	cmp	r0, #1
 8017032:	4630      	mov	r0, r6
 8017034:	f171 0300 	sbcs.w	r3, r1, #0
 8017038:	bfb4      	ite	lt
 801703a:	2301      	movlt	r3, #1
 801703c:	2300      	movge	r3, #0
 801703e:	702b      	strb	r3, [r5, #0]
 8017040:	b002      	add	sp, #8
 8017042:	bd70      	pop	{r4, r5, r6, pc}
 8017044:	260b      	movs	r6, #11
 8017046:	4630      	mov	r0, r6
 8017048:	b002      	add	sp, #8
 801704a:	bd70      	pop	{r4, r5, r6, pc}
 801704c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8017050:	e7e1      	b.n	8017016 <rcl_timer_is_ready+0x3a>
 8017052:	bf00      	nop

08017054 <rcl_timer_get_time_until_next_call>:
 8017054:	b570      	push	{r4, r5, r6, lr}
 8017056:	b082      	sub	sp, #8
 8017058:	b330      	cbz	r0, 80170a8 <rcl_timer_get_time_until_next_call+0x54>
 801705a:	6803      	ldr	r3, [r0, #0]
 801705c:	4604      	mov	r4, r0
 801705e:	b33b      	cbz	r3, 80170b0 <rcl_timer_get_time_until_next_call+0x5c>
 8017060:	460d      	mov	r5, r1
 8017062:	b309      	cbz	r1, 80170a8 <rcl_timer_get_time_until_next_call+0x54>
 8017064:	f3bf 8f5b 	dmb	ish
 8017068:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801706c:	f3bf 8f5b 	dmb	ish
 8017070:	b9ab      	cbnz	r3, 801709e <rcl_timer_get_time_until_next_call+0x4a>
 8017072:	6803      	ldr	r3, [r0, #0]
 8017074:	4669      	mov	r1, sp
 8017076:	6818      	ldr	r0, [r3, #0]
 8017078:	f7ff ff14 	bl	8016ea4 <rcl_clock_get_now>
 801707c:	4606      	mov	r6, r0
 801707e:	b958      	cbnz	r0, 8017098 <rcl_timer_get_time_until_next_call+0x44>
 8017080:	6820      	ldr	r0, [r4, #0]
 8017082:	2105      	movs	r1, #5
 8017084:	3028      	adds	r0, #40	@ 0x28
 8017086:	f001 fbf3 	bl	8018870 <__atomic_load_8>
 801708a:	9b00      	ldr	r3, [sp, #0]
 801708c:	1ac0      	subs	r0, r0, r3
 801708e:	9b01      	ldr	r3, [sp, #4]
 8017090:	eb61 0103 	sbc.w	r1, r1, r3
 8017094:	6028      	str	r0, [r5, #0]
 8017096:	6069      	str	r1, [r5, #4]
 8017098:	4630      	mov	r0, r6
 801709a:	b002      	add	sp, #8
 801709c:	bd70      	pop	{r4, r5, r6, pc}
 801709e:	f240 3621 	movw	r6, #801	@ 0x321
 80170a2:	4630      	mov	r0, r6
 80170a4:	b002      	add	sp, #8
 80170a6:	bd70      	pop	{r4, r5, r6, pc}
 80170a8:	260b      	movs	r6, #11
 80170aa:	4630      	mov	r0, r6
 80170ac:	b002      	add	sp, #8
 80170ae:	bd70      	pop	{r4, r5, r6, pc}
 80170b0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80170b4:	e7f0      	b.n	8017098 <rcl_timer_get_time_until_next_call+0x44>
 80170b6:	bf00      	nop

080170b8 <rcl_timer_get_guard_condition>:
 80170b8:	b130      	cbz	r0, 80170c8 <rcl_timer_get_guard_condition+0x10>
 80170ba:	6800      	ldr	r0, [r0, #0]
 80170bc:	b120      	cbz	r0, 80170c8 <rcl_timer_get_guard_condition+0x10>
 80170be:	68c3      	ldr	r3, [r0, #12]
 80170c0:	b10b      	cbz	r3, 80170c6 <rcl_timer_get_guard_condition+0xe>
 80170c2:	3008      	adds	r0, #8
 80170c4:	4770      	bx	lr
 80170c6:	4618      	mov	r0, r3
 80170c8:	4770      	bx	lr
 80170ca:	bf00      	nop

080170cc <rcl_validate_enclave_name_with_size>:
 80170cc:	2800      	cmp	r0, #0
 80170ce:	d049      	beq.n	8017164 <rcl_validate_enclave_name_with_size+0x98>
 80170d0:	b570      	push	{r4, r5, r6, lr}
 80170d2:	4615      	mov	r5, r2
 80170d4:	b0c2      	sub	sp, #264	@ 0x108
 80170d6:	b19a      	cbz	r2, 8017100 <rcl_validate_enclave_name_with_size+0x34>
 80170d8:	461e      	mov	r6, r3
 80170da:	466a      	mov	r2, sp
 80170dc:	ab01      	add	r3, sp, #4
 80170de:	460c      	mov	r4, r1
 80170e0:	f002 f80a 	bl	80190f8 <rmw_validate_namespace_with_size>
 80170e4:	4684      	mov	ip, r0
 80170e6:	b9b8      	cbnz	r0, 8017118 <rcl_validate_enclave_name_with_size+0x4c>
 80170e8:	9900      	ldr	r1, [sp, #0]
 80170ea:	b171      	cbz	r1, 801710a <rcl_validate_enclave_name_with_size+0x3e>
 80170ec:	2907      	cmp	r1, #7
 80170ee:	d019      	beq.n	8017124 <rcl_validate_enclave_name_with_size+0x58>
 80170f0:	1e4b      	subs	r3, r1, #1
 80170f2:	2b05      	cmp	r3, #5
 80170f4:	d83a      	bhi.n	801716c <rcl_validate_enclave_name_with_size+0xa0>
 80170f6:	e8df f003 	tbb	[pc, r3]
 80170fa:	2926      	.short	0x2926
 80170fc:	1d322f2c 	.word	0x1d322f2c
 8017100:	f04f 0c0b 	mov.w	ip, #11
 8017104:	4660      	mov	r0, ip
 8017106:	b042      	add	sp, #264	@ 0x108
 8017108:	bd70      	pop	{r4, r5, r6, pc}
 801710a:	2907      	cmp	r1, #7
 801710c:	d00a      	beq.n	8017124 <rcl_validate_enclave_name_with_size+0x58>
 801710e:	2300      	movs	r3, #0
 8017110:	4660      	mov	r0, ip
 8017112:	602b      	str	r3, [r5, #0]
 8017114:	b042      	add	sp, #264	@ 0x108
 8017116:	bd70      	pop	{r4, r5, r6, pc}
 8017118:	f007 ff04 	bl	801ef24 <rcl_convert_rmw_ret_to_rcl_ret>
 801711c:	4684      	mov	ip, r0
 801711e:	4660      	mov	r0, ip
 8017120:	b042      	add	sp, #264	@ 0x108
 8017122:	bd70      	pop	{r4, r5, r6, pc}
 8017124:	2cff      	cmp	r4, #255	@ 0xff
 8017126:	d9f2      	bls.n	801710e <rcl_validate_enclave_name_with_size+0x42>
 8017128:	6029      	str	r1, [r5, #0]
 801712a:	2e00      	cmp	r6, #0
 801712c:	d0ea      	beq.n	8017104 <rcl_validate_enclave_name_with_size+0x38>
 801712e:	23fe      	movs	r3, #254	@ 0xfe
 8017130:	6033      	str	r3, [r6, #0]
 8017132:	e7e7      	b.n	8017104 <rcl_validate_enclave_name_with_size+0x38>
 8017134:	2306      	movs	r3, #6
 8017136:	602b      	str	r3, [r5, #0]
 8017138:	2e00      	cmp	r6, #0
 801713a:	d0e3      	beq.n	8017104 <rcl_validate_enclave_name_with_size+0x38>
 801713c:	9b01      	ldr	r3, [sp, #4]
 801713e:	4660      	mov	r0, ip
 8017140:	6033      	str	r3, [r6, #0]
 8017142:	b042      	add	sp, #264	@ 0x108
 8017144:	bd70      	pop	{r4, r5, r6, pc}
 8017146:	2301      	movs	r3, #1
 8017148:	602b      	str	r3, [r5, #0]
 801714a:	e7f5      	b.n	8017138 <rcl_validate_enclave_name_with_size+0x6c>
 801714c:	2302      	movs	r3, #2
 801714e:	602b      	str	r3, [r5, #0]
 8017150:	e7f2      	b.n	8017138 <rcl_validate_enclave_name_with_size+0x6c>
 8017152:	2303      	movs	r3, #3
 8017154:	602b      	str	r3, [r5, #0]
 8017156:	e7ef      	b.n	8017138 <rcl_validate_enclave_name_with_size+0x6c>
 8017158:	2304      	movs	r3, #4
 801715a:	602b      	str	r3, [r5, #0]
 801715c:	e7ec      	b.n	8017138 <rcl_validate_enclave_name_with_size+0x6c>
 801715e:	2305      	movs	r3, #5
 8017160:	602b      	str	r3, [r5, #0]
 8017162:	e7e9      	b.n	8017138 <rcl_validate_enclave_name_with_size+0x6c>
 8017164:	f04f 0c0b 	mov.w	ip, #11
 8017168:	4660      	mov	r0, ip
 801716a:	4770      	bx	lr
 801716c:	460b      	mov	r3, r1
 801716e:	4a04      	ldr	r2, [pc, #16]	@ (8017180 <rcl_validate_enclave_name_with_size+0xb4>)
 8017170:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017174:	a802      	add	r0, sp, #8
 8017176:	f001 fd33 	bl	8018be0 <rcutils_snprintf>
 801717a:	f04f 0c01 	mov.w	ip, #1
 801717e:	e7c1      	b.n	8017104 <rcl_validate_enclave_name_with_size+0x38>
 8017180:	08023d30 	.word	0x08023d30

08017184 <rcl_validate_enclave_name>:
 8017184:	b168      	cbz	r0, 80171a2 <rcl_validate_enclave_name+0x1e>
 8017186:	b570      	push	{r4, r5, r6, lr}
 8017188:	460d      	mov	r5, r1
 801718a:	4616      	mov	r6, r2
 801718c:	4604      	mov	r4, r0
 801718e:	f7e9 f8b1 	bl	80002f4 <strlen>
 8017192:	4633      	mov	r3, r6
 8017194:	4601      	mov	r1, r0
 8017196:	462a      	mov	r2, r5
 8017198:	4620      	mov	r0, r4
 801719a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801719e:	f7ff bf95 	b.w	80170cc <rcl_validate_enclave_name_with_size>
 80171a2:	200b      	movs	r0, #11
 80171a4:	4770      	bx	lr
 80171a6:	bf00      	nop

080171a8 <rcl_get_zero_initialized_wait_set>:
 80171a8:	b510      	push	{r4, lr}
 80171aa:	4c08      	ldr	r4, [pc, #32]	@ (80171cc <rcl_get_zero_initialized_wait_set+0x24>)
 80171ac:	4686      	mov	lr, r0
 80171ae:	4684      	mov	ip, r0
 80171b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80171b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80171b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80171be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171c2:	6823      	ldr	r3, [r4, #0]
 80171c4:	4670      	mov	r0, lr
 80171c6:	f8cc 3000 	str.w	r3, [ip]
 80171ca:	bd10      	pop	{r4, pc}
 80171cc:	08023d90 	.word	0x08023d90

080171d0 <rcl_wait_set_is_valid>:
 80171d0:	b118      	cbz	r0, 80171da <rcl_wait_set_is_valid+0xa>
 80171d2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80171d4:	3800      	subs	r0, #0
 80171d6:	bf18      	it	ne
 80171d8:	2001      	movne	r0, #1
 80171da:	4770      	bx	lr

080171dc <rcl_wait_set_fini>:
 80171dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171e0:	b082      	sub	sp, #8
 80171e2:	2800      	cmp	r0, #0
 80171e4:	f000 8095 	beq.w	8017312 <rcl_wait_set_fini+0x136>
 80171e8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80171ea:	4604      	mov	r4, r0
 80171ec:	2e00      	cmp	r6, #0
 80171ee:	f000 808c 	beq.w	801730a <rcl_wait_set_fini+0x12e>
 80171f2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80171f4:	f003 fb40 	bl	801a878 <rmw_destroy_wait_set>
 80171f8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80171fa:	1e06      	subs	r6, r0, #0
 80171fc:	bf18      	it	ne
 80171fe:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8017202:	2d00      	cmp	r5, #0
 8017204:	f000 8081 	beq.w	801730a <rcl_wait_set_fini+0x12e>
 8017208:	2700      	movs	r7, #0
 801720a:	6820      	ldr	r0, [r4, #0]
 801720c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017210:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017212:	6067      	str	r7, [r4, #4]
 8017214:	602f      	str	r7, [r5, #0]
 8017216:	b120      	cbz	r0, 8017222 <rcl_wait_set_fini+0x46>
 8017218:	9101      	str	r1, [sp, #4]
 801721a:	47c0      	blx	r8
 801721c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801721e:	9901      	ldr	r1, [sp, #4]
 8017220:	6027      	str	r7, [r4, #0]
 8017222:	68a8      	ldr	r0, [r5, #8]
 8017224:	b120      	cbz	r0, 8017230 <rcl_wait_set_fini+0x54>
 8017226:	47c0      	blx	r8
 8017228:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801722a:	2300      	movs	r3, #0
 801722c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8017230:	f04f 0800 	mov.w	r8, #0
 8017234:	68a0      	ldr	r0, [r4, #8]
 8017236:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017238:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801723a:	f8c4 800c 	str.w	r8, [r4, #12]
 801723e:	f8c5 800c 	str.w	r8, [r5, #12]
 8017242:	b128      	cbz	r0, 8017250 <rcl_wait_set_fini+0x74>
 8017244:	47b8      	blx	r7
 8017246:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017248:	f8c4 8008 	str.w	r8, [r4, #8]
 801724c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801724e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017250:	f04f 0800 	mov.w	r8, #0
 8017254:	6968      	ldr	r0, [r5, #20]
 8017256:	f8c5 8010 	str.w	r8, [r5, #16]
 801725a:	b128      	cbz	r0, 8017268 <rcl_wait_set_fini+0x8c>
 801725c:	47b8      	blx	r7
 801725e:	f8c5 8014 	str.w	r8, [r5, #20]
 8017262:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017264:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017266:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017268:	f04f 0800 	mov.w	r8, #0
 801726c:	6920      	ldr	r0, [r4, #16]
 801726e:	f8c4 8014 	str.w	r8, [r4, #20]
 8017272:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8017276:	b128      	cbz	r0, 8017284 <rcl_wait_set_fini+0xa8>
 8017278:	47b8      	blx	r7
 801727a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801727c:	f8c4 8010 	str.w	r8, [r4, #16]
 8017280:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017282:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017284:	f04f 0800 	mov.w	r8, #0
 8017288:	69a0      	ldr	r0, [r4, #24]
 801728a:	f8c4 801c 	str.w	r8, [r4, #28]
 801728e:	f8c5 8018 	str.w	r8, [r5, #24]
 8017292:	b128      	cbz	r0, 80172a0 <rcl_wait_set_fini+0xc4>
 8017294:	9101      	str	r1, [sp, #4]
 8017296:	47b8      	blx	r7
 8017298:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801729a:	9901      	ldr	r1, [sp, #4]
 801729c:	f8c4 8018 	str.w	r8, [r4, #24]
 80172a0:	6a28      	ldr	r0, [r5, #32]
 80172a2:	b120      	cbz	r0, 80172ae <rcl_wait_set_fini+0xd2>
 80172a4:	47b8      	blx	r7
 80172a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80172a8:	2300      	movs	r3, #0
 80172aa:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80172ae:	2700      	movs	r7, #0
 80172b0:	6a20      	ldr	r0, [r4, #32]
 80172b2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80172b6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80172b8:	6267      	str	r7, [r4, #36]	@ 0x24
 80172ba:	626f      	str	r7, [r5, #36]	@ 0x24
 80172bc:	b120      	cbz	r0, 80172c8 <rcl_wait_set_fini+0xec>
 80172be:	9101      	str	r1, [sp, #4]
 80172c0:	47c0      	blx	r8
 80172c2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80172c4:	9901      	ldr	r1, [sp, #4]
 80172c6:	6227      	str	r7, [r4, #32]
 80172c8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80172ca:	b120      	cbz	r0, 80172d6 <rcl_wait_set_fini+0xfa>
 80172cc:	47c0      	blx	r8
 80172ce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80172d0:	2300      	movs	r3, #0
 80172d2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80172d6:	2700      	movs	r7, #0
 80172d8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80172da:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80172de:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80172e0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80172e2:	632f      	str	r7, [r5, #48]	@ 0x30
 80172e4:	b120      	cbz	r0, 80172f0 <rcl_wait_set_fini+0x114>
 80172e6:	9101      	str	r1, [sp, #4]
 80172e8:	47c0      	blx	r8
 80172ea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80172ec:	9901      	ldr	r1, [sp, #4]
 80172ee:	62a7      	str	r7, [r4, #40]	@ 0x28
 80172f0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80172f2:	b120      	cbz	r0, 80172fe <rcl_wait_set_fini+0x122>
 80172f4:	47c0      	blx	r8
 80172f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80172f8:	2300      	movs	r3, #0
 80172fa:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80172fe:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8017300:	4628      	mov	r0, r5
 8017302:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017304:	4798      	blx	r3
 8017306:	2300      	movs	r3, #0
 8017308:	6323      	str	r3, [r4, #48]	@ 0x30
 801730a:	4630      	mov	r0, r6
 801730c:	b002      	add	sp, #8
 801730e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017312:	260b      	movs	r6, #11
 8017314:	4630      	mov	r0, r6
 8017316:	b002      	add	sp, #8
 8017318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801731c <rcl_wait_set_add_subscription>:
 801731c:	b318      	cbz	r0, 8017366 <rcl_wait_set_add_subscription+0x4a>
 801731e:	b538      	push	{r3, r4, r5, lr}
 8017320:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017322:	4604      	mov	r4, r0
 8017324:	b30b      	cbz	r3, 801736a <rcl_wait_set_add_subscription+0x4e>
 8017326:	b319      	cbz	r1, 8017370 <rcl_wait_set_add_subscription+0x54>
 8017328:	681d      	ldr	r5, [r3, #0]
 801732a:	6840      	ldr	r0, [r0, #4]
 801732c:	4285      	cmp	r5, r0
 801732e:	d217      	bcs.n	8017360 <rcl_wait_set_add_subscription+0x44>
 8017330:	1c68      	adds	r0, r5, #1
 8017332:	6018      	str	r0, [r3, #0]
 8017334:	6823      	ldr	r3, [r4, #0]
 8017336:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801733a:	b102      	cbz	r2, 801733e <rcl_wait_set_add_subscription+0x22>
 801733c:	6015      	str	r5, [r2, #0]
 801733e:	4608      	mov	r0, r1
 8017340:	f7ff fcfe 	bl	8016d40 <rcl_subscription_get_rmw_handle>
 8017344:	b150      	cbz	r0, 801735c <rcl_wait_set_add_subscription+0x40>
 8017346:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017348:	6842      	ldr	r2, [r0, #4]
 801734a:	2000      	movs	r0, #0
 801734c:	689b      	ldr	r3, [r3, #8]
 801734e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017352:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017354:	6853      	ldr	r3, [r2, #4]
 8017356:	3301      	adds	r3, #1
 8017358:	6053      	str	r3, [r2, #4]
 801735a:	bd38      	pop	{r3, r4, r5, pc}
 801735c:	2001      	movs	r0, #1
 801735e:	bd38      	pop	{r3, r4, r5, pc}
 8017360:	f240 3086 	movw	r0, #902	@ 0x386
 8017364:	bd38      	pop	{r3, r4, r5, pc}
 8017366:	200b      	movs	r0, #11
 8017368:	4770      	bx	lr
 801736a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801736e:	bd38      	pop	{r3, r4, r5, pc}
 8017370:	200b      	movs	r0, #11
 8017372:	bd38      	pop	{r3, r4, r5, pc}

08017374 <rcl_wait_set_clear>:
 8017374:	2800      	cmp	r0, #0
 8017376:	d074      	beq.n	8017462 <rcl_wait_set_clear+0xee>
 8017378:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801737a:	b510      	push	{r4, lr}
 801737c:	4604      	mov	r4, r0
 801737e:	2b00      	cmp	r3, #0
 8017380:	d071      	beq.n	8017466 <rcl_wait_set_clear+0xf2>
 8017382:	6800      	ldr	r0, [r0, #0]
 8017384:	b138      	cbz	r0, 8017396 <rcl_wait_set_clear+0x22>
 8017386:	6862      	ldr	r2, [r4, #4]
 8017388:	2100      	movs	r1, #0
 801738a:	0092      	lsls	r2, r2, #2
 801738c:	f009 fe16 	bl	8020fbc <memset>
 8017390:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017392:	2200      	movs	r2, #0
 8017394:	601a      	str	r2, [r3, #0]
 8017396:	68a0      	ldr	r0, [r4, #8]
 8017398:	b138      	cbz	r0, 80173aa <rcl_wait_set_clear+0x36>
 801739a:	68e2      	ldr	r2, [r4, #12]
 801739c:	2100      	movs	r1, #0
 801739e:	0092      	lsls	r2, r2, #2
 80173a0:	f009 fe0c 	bl	8020fbc <memset>
 80173a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80173a6:	2200      	movs	r2, #0
 80173a8:	60da      	str	r2, [r3, #12]
 80173aa:	69a0      	ldr	r0, [r4, #24]
 80173ac:	b138      	cbz	r0, 80173be <rcl_wait_set_clear+0x4a>
 80173ae:	69e2      	ldr	r2, [r4, #28]
 80173b0:	2100      	movs	r1, #0
 80173b2:	0092      	lsls	r2, r2, #2
 80173b4:	f009 fe02 	bl	8020fbc <memset>
 80173b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80173ba:	2200      	movs	r2, #0
 80173bc:	619a      	str	r2, [r3, #24]
 80173be:	6a20      	ldr	r0, [r4, #32]
 80173c0:	b138      	cbz	r0, 80173d2 <rcl_wait_set_clear+0x5e>
 80173c2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80173c4:	2100      	movs	r1, #0
 80173c6:	0092      	lsls	r2, r2, #2
 80173c8:	f009 fdf8 	bl	8020fbc <memset>
 80173cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80173ce:	2200      	movs	r2, #0
 80173d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80173d2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80173d4:	b138      	cbz	r0, 80173e6 <rcl_wait_set_clear+0x72>
 80173d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80173d8:	2100      	movs	r1, #0
 80173da:	0092      	lsls	r2, r2, #2
 80173dc:	f009 fdee 	bl	8020fbc <memset>
 80173e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80173e2:	2200      	movs	r2, #0
 80173e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80173e6:	6920      	ldr	r0, [r4, #16]
 80173e8:	b138      	cbz	r0, 80173fa <rcl_wait_set_clear+0x86>
 80173ea:	6962      	ldr	r2, [r4, #20]
 80173ec:	2100      	movs	r1, #0
 80173ee:	0092      	lsls	r2, r2, #2
 80173f0:	f009 fde4 	bl	8020fbc <memset>
 80173f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80173f6:	2200      	movs	r2, #0
 80173f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80173fa:	6898      	ldr	r0, [r3, #8]
 80173fc:	b138      	cbz	r0, 801740e <rcl_wait_set_clear+0x9a>
 80173fe:	685a      	ldr	r2, [r3, #4]
 8017400:	2100      	movs	r1, #0
 8017402:	0092      	lsls	r2, r2, #2
 8017404:	f009 fdda 	bl	8020fbc <memset>
 8017408:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801740a:	2200      	movs	r2, #0
 801740c:	605a      	str	r2, [r3, #4]
 801740e:	6958      	ldr	r0, [r3, #20]
 8017410:	b138      	cbz	r0, 8017422 <rcl_wait_set_clear+0xae>
 8017412:	691a      	ldr	r2, [r3, #16]
 8017414:	2100      	movs	r1, #0
 8017416:	0092      	lsls	r2, r2, #2
 8017418:	f009 fdd0 	bl	8020fbc <memset>
 801741c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801741e:	2200      	movs	r2, #0
 8017420:	611a      	str	r2, [r3, #16]
 8017422:	6a18      	ldr	r0, [r3, #32]
 8017424:	b138      	cbz	r0, 8017436 <rcl_wait_set_clear+0xc2>
 8017426:	69da      	ldr	r2, [r3, #28]
 8017428:	2100      	movs	r1, #0
 801742a:	0092      	lsls	r2, r2, #2
 801742c:	f009 fdc6 	bl	8020fbc <memset>
 8017430:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017432:	2200      	movs	r2, #0
 8017434:	61da      	str	r2, [r3, #28]
 8017436:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8017438:	b138      	cbz	r0, 801744a <rcl_wait_set_clear+0xd6>
 801743a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801743c:	2100      	movs	r1, #0
 801743e:	0092      	lsls	r2, r2, #2
 8017440:	f009 fdbc 	bl	8020fbc <memset>
 8017444:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017446:	2200      	movs	r2, #0
 8017448:	629a      	str	r2, [r3, #40]	@ 0x28
 801744a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801744c:	b140      	cbz	r0, 8017460 <rcl_wait_set_clear+0xec>
 801744e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017450:	2100      	movs	r1, #0
 8017452:	0092      	lsls	r2, r2, #2
 8017454:	f009 fdb2 	bl	8020fbc <memset>
 8017458:	2300      	movs	r3, #0
 801745a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801745c:	4618      	mov	r0, r3
 801745e:	6353      	str	r3, [r2, #52]	@ 0x34
 8017460:	bd10      	pop	{r4, pc}
 8017462:	200b      	movs	r0, #11
 8017464:	4770      	bx	lr
 8017466:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801746a:	bd10      	pop	{r4, pc}

0801746c <rcl_wait_set_resize>:
 801746c:	2800      	cmp	r0, #0
 801746e:	f000 8180 	beq.w	8017772 <rcl_wait_set_resize+0x306>
 8017472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017476:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8017478:	b083      	sub	sp, #12
 801747a:	4605      	mov	r5, r0
 801747c:	2c00      	cmp	r4, #0
 801747e:	f000 817a 	beq.w	8017776 <rcl_wait_set_resize+0x30a>
 8017482:	f04f 0900 	mov.w	r9, #0
 8017486:	461f      	mov	r7, r3
 8017488:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801748c:	4688      	mov	r8, r1
 801748e:	4616      	mov	r6, r2
 8017490:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8017494:	f8c0 9004 	str.w	r9, [r0, #4]
 8017498:	f8c4 9000 	str.w	r9, [r4]
 801749c:	2900      	cmp	r1, #0
 801749e:	f000 80bf 	beq.w	8017620 <rcl_wait_set_resize+0x1b4>
 80174a2:	008c      	lsls	r4, r1, #2
 80174a4:	4652      	mov	r2, sl
 80174a6:	6800      	ldr	r0, [r0, #0]
 80174a8:	4621      	mov	r1, r4
 80174aa:	9301      	str	r3, [sp, #4]
 80174ac:	4798      	blx	r3
 80174ae:	9b01      	ldr	r3, [sp, #4]
 80174b0:	6028      	str	r0, [r5, #0]
 80174b2:	2800      	cmp	r0, #0
 80174b4:	f000 80f6 	beq.w	80176a4 <rcl_wait_set_resize+0x238>
 80174b8:	4622      	mov	r2, r4
 80174ba:	4649      	mov	r1, r9
 80174bc:	9301      	str	r3, [sp, #4]
 80174be:	f009 fd7d 	bl	8020fbc <memset>
 80174c2:	f8c5 8004 	str.w	r8, [r5, #4]
 80174c6:	4652      	mov	r2, sl
 80174c8:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80174cc:	4621      	mov	r1, r4
 80174ce:	9b01      	ldr	r3, [sp, #4]
 80174d0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80174d4:	f8c8 9004 	str.w	r9, [r8, #4]
 80174d8:	4798      	blx	r3
 80174da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80174dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80174e0:	689b      	ldr	r3, [r3, #8]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	f000 814a 	beq.w	801777c <rcl_wait_set_resize+0x310>
 80174e8:	4622      	mov	r2, r4
 80174ea:	4649      	mov	r1, r9
 80174ec:	4618      	mov	r0, r3
 80174ee:	f009 fd65 	bl	8020fbc <memset>
 80174f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80174f4:	f04f 0800 	mov.w	r8, #0
 80174f8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80174fc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8017500:	f8c5 800c 	str.w	r8, [r5, #12]
 8017504:	f8c4 800c 	str.w	r8, [r4, #12]
 8017508:	2e00      	cmp	r6, #0
 801750a:	f040 809b 	bne.w	8017644 <rcl_wait_set_resize+0x1d8>
 801750e:	68a8      	ldr	r0, [r5, #8]
 8017510:	b128      	cbz	r0, 801751e <rcl_wait_set_resize+0xb2>
 8017512:	4649      	mov	r1, r9
 8017514:	4790      	blx	r2
 8017516:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017518:	60ae      	str	r6, [r5, #8]
 801751a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801751e:	f04f 0800 	mov.w	r8, #0
 8017522:	19f6      	adds	r6, r6, r7
 8017524:	f8c4 8010 	str.w	r8, [r4, #16]
 8017528:	f040 80a2 	bne.w	8017670 <rcl_wait_set_resize+0x204>
 801752c:	6960      	ldr	r0, [r4, #20]
 801752e:	b130      	cbz	r0, 801753e <rcl_wait_set_resize+0xd2>
 8017530:	4649      	mov	r1, r9
 8017532:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8017534:	4798      	blx	r3
 8017536:	6166      	str	r6, [r4, #20]
 8017538:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801753a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801753e:	2600      	movs	r6, #0
 8017540:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017544:	616e      	str	r6, [r5, #20]
 8017546:	6426      	str	r6, [r4, #64]	@ 0x40
 8017548:	2f00      	cmp	r7, #0
 801754a:	f040 80af 	bne.w	80176ac <rcl_wait_set_resize+0x240>
 801754e:	6928      	ldr	r0, [r5, #16]
 8017550:	b138      	cbz	r0, 8017562 <rcl_wait_set_resize+0xf6>
 8017552:	4649      	mov	r1, r9
 8017554:	47d0      	blx	sl
 8017556:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017558:	612f      	str	r7, [r5, #16]
 801755a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801755e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017562:	2600      	movs	r6, #0
 8017564:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017566:	61ee      	str	r6, [r5, #28]
 8017568:	61a6      	str	r6, [r4, #24]
 801756a:	2b00      	cmp	r3, #0
 801756c:	f040 8093 	bne.w	8017696 <rcl_wait_set_resize+0x22a>
 8017570:	69a8      	ldr	r0, [r5, #24]
 8017572:	b120      	cbz	r0, 801757e <rcl_wait_set_resize+0x112>
 8017574:	4649      	mov	r1, r9
 8017576:	47d0      	blx	sl
 8017578:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801757a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801757c:	61ab      	str	r3, [r5, #24]
 801757e:	6a20      	ldr	r0, [r4, #32]
 8017580:	b128      	cbz	r0, 801758e <rcl_wait_set_resize+0x122>
 8017582:	4649      	mov	r1, r9
 8017584:	47d0      	blx	sl
 8017586:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017588:	2300      	movs	r3, #0
 801758a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801758e:	2600      	movs	r6, #0
 8017590:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017592:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8017594:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8017598:	626e      	str	r6, [r5, #36]	@ 0x24
 801759a:	6266      	str	r6, [r4, #36]	@ 0x24
 801759c:	2b00      	cmp	r3, #0
 801759e:	f000 8098 	beq.w	80176d2 <rcl_wait_set_resize+0x266>
 80175a2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80175a6:	463a      	mov	r2, r7
 80175a8:	6a28      	ldr	r0, [r5, #32]
 80175aa:	4651      	mov	r1, sl
 80175ac:	47c8      	blx	r9
 80175ae:	6228      	str	r0, [r5, #32]
 80175b0:	2800      	cmp	r0, #0
 80175b2:	d077      	beq.n	80176a4 <rcl_wait_set_resize+0x238>
 80175b4:	4652      	mov	r2, sl
 80175b6:	4631      	mov	r1, r6
 80175b8:	f009 fd00 	bl	8020fbc <memset>
 80175bc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80175be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80175c0:	463a      	mov	r2, r7
 80175c2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80175c4:	4651      	mov	r1, sl
 80175c6:	626b      	str	r3, [r5, #36]	@ 0x24
 80175c8:	62a6      	str	r6, [r4, #40]	@ 0x28
 80175ca:	47c8      	blx	r9
 80175cc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80175ce:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80175d0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80175d2:	2c00      	cmp	r4, #0
 80175d4:	f000 80f2 	beq.w	80177bc <rcl_wait_set_resize+0x350>
 80175d8:	4620      	mov	r0, r4
 80175da:	4652      	mov	r2, sl
 80175dc:	4631      	mov	r1, r6
 80175de:	f009 fced 	bl	8020fbc <memset>
 80175e2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80175e4:	2600      	movs	r6, #0
 80175e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80175e8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80175ea:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80175ee:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80175f0:	6326      	str	r6, [r4, #48]	@ 0x30
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	f040 8097 	bne.w	8017726 <rcl_wait_set_resize+0x2ba>
 80175f8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80175fa:	b120      	cbz	r0, 8017606 <rcl_wait_set_resize+0x19a>
 80175fc:	4639      	mov	r1, r7
 80175fe:	47c0      	blx	r8
 8017600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017602:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017604:	62ab      	str	r3, [r5, #40]	@ 0x28
 8017606:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8017608:	2800      	cmp	r0, #0
 801760a:	d04c      	beq.n	80176a6 <rcl_wait_set_resize+0x23a>
 801760c:	4639      	mov	r1, r7
 801760e:	47c0      	blx	r8
 8017610:	2300      	movs	r3, #0
 8017612:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017614:	4618      	mov	r0, r3
 8017616:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 801761a:	b003      	add	sp, #12
 801761c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017620:	6800      	ldr	r0, [r0, #0]
 8017622:	b120      	cbz	r0, 801762e <rcl_wait_set_resize+0x1c2>
 8017624:	4651      	mov	r1, sl
 8017626:	47d8      	blx	fp
 8017628:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801762a:	f8c5 8000 	str.w	r8, [r5]
 801762e:	68a0      	ldr	r0, [r4, #8]
 8017630:	2800      	cmp	r0, #0
 8017632:	f43f af5f 	beq.w	80174f4 <rcl_wait_set_resize+0x88>
 8017636:	4651      	mov	r1, sl
 8017638:	47d8      	blx	fp
 801763a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801763c:	2300      	movs	r3, #0
 801763e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8017642:	e757      	b.n	80174f4 <rcl_wait_set_resize+0x88>
 8017644:	00b4      	lsls	r4, r6, #2
 8017646:	464a      	mov	r2, r9
 8017648:	68a8      	ldr	r0, [r5, #8]
 801764a:	4621      	mov	r1, r4
 801764c:	4798      	blx	r3
 801764e:	60a8      	str	r0, [r5, #8]
 8017650:	b340      	cbz	r0, 80176a4 <rcl_wait_set_resize+0x238>
 8017652:	4622      	mov	r2, r4
 8017654:	4641      	mov	r1, r8
 8017656:	f009 fcb1 	bl	8020fbc <memset>
 801765a:	f04f 0800 	mov.w	r8, #0
 801765e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017660:	60ee      	str	r6, [r5, #12]
 8017662:	19f6      	adds	r6, r6, r7
 8017664:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017668:	f8c4 8010 	str.w	r8, [r4, #16]
 801766c:	f43f af5e 	beq.w	801752c <rcl_wait_set_resize+0xc0>
 8017670:	00b6      	lsls	r6, r6, #2
 8017672:	464a      	mov	r2, r9
 8017674:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8017676:	6960      	ldr	r0, [r4, #20]
 8017678:	4631      	mov	r1, r6
 801767a:	4798      	blx	r3
 801767c:	4681      	mov	r9, r0
 801767e:	6160      	str	r0, [r4, #20]
 8017680:	2800      	cmp	r0, #0
 8017682:	f000 8084 	beq.w	801778e <rcl_wait_set_resize+0x322>
 8017686:	4632      	mov	r2, r6
 8017688:	4641      	mov	r1, r8
 801768a:	f009 fc97 	bl	8020fbc <memset>
 801768e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017690:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017694:	e753      	b.n	801753e <rcl_wait_set_resize+0xd2>
 8017696:	009c      	lsls	r4, r3, #2
 8017698:	464a      	mov	r2, r9
 801769a:	69a8      	ldr	r0, [r5, #24]
 801769c:	4621      	mov	r1, r4
 801769e:	47c0      	blx	r8
 80176a0:	61a8      	str	r0, [r5, #24]
 80176a2:	bb40      	cbnz	r0, 80176f6 <rcl_wait_set_resize+0x28a>
 80176a4:	200a      	movs	r0, #10
 80176a6:	b003      	add	sp, #12
 80176a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176ac:	00bc      	lsls	r4, r7, #2
 80176ae:	464a      	mov	r2, r9
 80176b0:	6928      	ldr	r0, [r5, #16]
 80176b2:	4621      	mov	r1, r4
 80176b4:	47c0      	blx	r8
 80176b6:	6128      	str	r0, [r5, #16]
 80176b8:	2800      	cmp	r0, #0
 80176ba:	d0f3      	beq.n	80176a4 <rcl_wait_set_resize+0x238>
 80176bc:	4622      	mov	r2, r4
 80176be:	4631      	mov	r1, r6
 80176c0:	f009 fc7c 	bl	8020fbc <memset>
 80176c4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80176c6:	616f      	str	r7, [r5, #20]
 80176c8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80176cc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80176d0:	e747      	b.n	8017562 <rcl_wait_set_resize+0xf6>
 80176d2:	6a28      	ldr	r0, [r5, #32]
 80176d4:	b120      	cbz	r0, 80176e0 <rcl_wait_set_resize+0x274>
 80176d6:	4639      	mov	r1, r7
 80176d8:	47c0      	blx	r8
 80176da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80176dc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80176de:	622b      	str	r3, [r5, #32]
 80176e0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80176e2:	2800      	cmp	r0, #0
 80176e4:	f43f af7e 	beq.w	80175e4 <rcl_wait_set_resize+0x178>
 80176e8:	4639      	mov	r1, r7
 80176ea:	47c0      	blx	r8
 80176ec:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80176ee:	2300      	movs	r3, #0
 80176f0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80176f4:	e776      	b.n	80175e4 <rcl_wait_set_resize+0x178>
 80176f6:	4622      	mov	r2, r4
 80176f8:	4631      	mov	r1, r6
 80176fa:	f009 fc5f 	bl	8020fbc <memset>
 80176fe:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8017700:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017702:	464a      	mov	r2, r9
 8017704:	6a38      	ldr	r0, [r7, #32]
 8017706:	4621      	mov	r1, r4
 8017708:	61eb      	str	r3, [r5, #28]
 801770a:	61fe      	str	r6, [r7, #28]
 801770c:	47c0      	blx	r8
 801770e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017710:	6238      	str	r0, [r7, #32]
 8017712:	6a1f      	ldr	r7, [r3, #32]
 8017714:	2f00      	cmp	r7, #0
 8017716:	d04a      	beq.n	80177ae <rcl_wait_set_resize+0x342>
 8017718:	4622      	mov	r2, r4
 801771a:	4631      	mov	r1, r6
 801771c:	4638      	mov	r0, r7
 801771e:	f009 fc4d 	bl	8020fbc <memset>
 8017722:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017724:	e733      	b.n	801758e <rcl_wait_set_resize+0x122>
 8017726:	009c      	lsls	r4, r3, #2
 8017728:	463a      	mov	r2, r7
 801772a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801772c:	4621      	mov	r1, r4
 801772e:	47c8      	blx	r9
 8017730:	62a8      	str	r0, [r5, #40]	@ 0x28
 8017732:	2800      	cmp	r0, #0
 8017734:	d0b6      	beq.n	80176a4 <rcl_wait_set_resize+0x238>
 8017736:	4622      	mov	r2, r4
 8017738:	4631      	mov	r1, r6
 801773a:	f009 fc3f 	bl	8020fbc <memset>
 801773e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8017742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017744:	463a      	mov	r2, r7
 8017746:	4621      	mov	r1, r4
 8017748:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801774c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801774e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8017752:	47c8      	blx	r9
 8017754:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017756:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801775a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801775c:	2b00      	cmp	r3, #0
 801775e:	d034      	beq.n	80177ca <rcl_wait_set_resize+0x35e>
 8017760:	4622      	mov	r2, r4
 8017762:	4631      	mov	r1, r6
 8017764:	4618      	mov	r0, r3
 8017766:	f009 fc29 	bl	8020fbc <memset>
 801776a:	4630      	mov	r0, r6
 801776c:	b003      	add	sp, #12
 801776e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017772:	200b      	movs	r0, #11
 8017774:	4770      	bx	lr
 8017776:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801777a:	e794      	b.n	80176a6 <rcl_wait_set_resize+0x23a>
 801777c:	6828      	ldr	r0, [r5, #0]
 801777e:	4651      	mov	r1, sl
 8017780:	9301      	str	r3, [sp, #4]
 8017782:	47d8      	blx	fp
 8017784:	9b01      	ldr	r3, [sp, #4]
 8017786:	200a      	movs	r0, #10
 8017788:	e9c5 3300 	strd	r3, r3, [r5]
 801778c:	e78b      	b.n	80176a6 <rcl_wait_set_resize+0x23a>
 801778e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017790:	68a8      	ldr	r0, [r5, #8]
 8017792:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017796:	4798      	blx	r3
 8017798:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801779a:	6928      	ldr	r0, [r5, #16]
 801779c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801779e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80177a0:	e9c5 9902 	strd	r9, r9, [r5, #8]
 80177a4:	4790      	blx	r2
 80177a6:	200a      	movs	r0, #10
 80177a8:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80177ac:	e77b      	b.n	80176a6 <rcl_wait_set_resize+0x23a>
 80177ae:	69a8      	ldr	r0, [r5, #24]
 80177b0:	4649      	mov	r1, r9
 80177b2:	47d0      	blx	sl
 80177b4:	200a      	movs	r0, #10
 80177b6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80177ba:	e774      	b.n	80176a6 <rcl_wait_set_resize+0x23a>
 80177bc:	6a28      	ldr	r0, [r5, #32]
 80177be:	4639      	mov	r1, r7
 80177c0:	47c0      	blx	r8
 80177c2:	200a      	movs	r0, #10
 80177c4:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80177c8:	e76d      	b.n	80176a6 <rcl_wait_set_resize+0x23a>
 80177ca:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80177cc:	4639      	mov	r1, r7
 80177ce:	9301      	str	r3, [sp, #4]
 80177d0:	47c0      	blx	r8
 80177d2:	9b01      	ldr	r3, [sp, #4]
 80177d4:	200a      	movs	r0, #10
 80177d6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80177da:	e764      	b.n	80176a6 <rcl_wait_set_resize+0x23a>

080177dc <rcl_wait_set_init>:
 80177dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177e0:	b085      	sub	sp, #20
 80177e2:	4605      	mov	r5, r0
 80177e4:	460e      	mov	r6, r1
 80177e6:	4617      	mov	r7, r2
 80177e8:	a812      	add	r0, sp, #72	@ 0x48
 80177ea:	4698      	mov	r8, r3
 80177ec:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 80177f0:	f7fd fa80 	bl	8014cf4 <rcutils_allocator_is_valid>
 80177f4:	2d00      	cmp	r5, #0
 80177f6:	d072      	beq.n	80178de <rcl_wait_set_init+0x102>
 80177f8:	f080 0001 	eor.w	r0, r0, #1
 80177fc:	b2c0      	uxtb	r0, r0
 80177fe:	2800      	cmp	r0, #0
 8017800:	d16d      	bne.n	80178de <rcl_wait_set_init+0x102>
 8017802:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8017806:	f1ba 0f00 	cmp.w	sl, #0
 801780a:	d004      	beq.n	8017816 <rcl_wait_set_init+0x3a>
 801780c:	2464      	movs	r4, #100	@ 0x64
 801780e:	4620      	mov	r0, r4
 8017810:	b005      	add	sp, #20
 8017812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017816:	f1b9 0f00 	cmp.w	r9, #0
 801781a:	d060      	beq.n	80178de <rcl_wait_set_init+0x102>
 801781c:	4648      	mov	r0, r9
 801781e:	f7fe f937 	bl	8015a90 <rcl_context_is_valid>
 8017822:	2800      	cmp	r0, #0
 8017824:	d068      	beq.n	80178f8 <rcl_wait_set_init+0x11c>
 8017826:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017828:	205c      	movs	r0, #92	@ 0x5c
 801782a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801782c:	4798      	blx	r3
 801782e:	6328      	str	r0, [r5, #48]	@ 0x30
 8017830:	2800      	cmp	r0, #0
 8017832:	d063      	beq.n	80178fc <rcl_wait_set_init+0x120>
 8017834:	225c      	movs	r2, #92	@ 0x5c
 8017836:	4651      	mov	r1, sl
 8017838:	f009 fbc0 	bl	8020fbc <memset>
 801783c:	ac12      	add	r4, sp, #72	@ 0x48
 801783e:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 8017842:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8017846:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801784a:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801784e:	eb03 0e02 	add.w	lr, r3, r2
 8017852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017854:	f8d9 9000 	ldr.w	r9, [r9]
 8017858:	449e      	add	lr, r3
 801785a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801785c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8017860:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8017864:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8017868:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801786c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 8017870:	44be      	add	lr, r7
 8017872:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017876:	6823      	ldr	r3, [r4, #0]
 8017878:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801787c:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8017880:	f8cc 3000 	str.w	r3, [ip]
 8017884:	f002 ffee 	bl	801a864 <rmw_create_wait_set>
 8017888:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801788a:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 801788e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017890:	b350      	cbz	r0, 80178e8 <rcl_wait_set_init+0x10c>
 8017892:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8017894:	4643      	mov	r3, r8
 8017896:	463a      	mov	r2, r7
 8017898:	4631      	mov	r1, r6
 801789a:	9402      	str	r4, [sp, #8]
 801789c:	4628      	mov	r0, r5
 801789e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80178a0:	9401      	str	r4, [sp, #4]
 80178a2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80178a4:	9400      	str	r4, [sp, #0]
 80178a6:	f7ff fde1 	bl	801746c <rcl_wait_set_resize>
 80178aa:	4604      	mov	r4, r0
 80178ac:	2800      	cmp	r0, #0
 80178ae:	d0ae      	beq.n	801780e <rcl_wait_set_init+0x32>
 80178b0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80178b2:	bb2b      	cbnz	r3, 8017900 <rcl_wait_set_init+0x124>
 80178b4:	2600      	movs	r6, #0
 80178b6:	4628      	mov	r0, r5
 80178b8:	4633      	mov	r3, r6
 80178ba:	4632      	mov	r2, r6
 80178bc:	4631      	mov	r1, r6
 80178be:	9600      	str	r6, [sp, #0]
 80178c0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80178c4:	f7ff fdd2 	bl	801746c <rcl_wait_set_resize>
 80178c8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80178ca:	2800      	cmp	r0, #0
 80178cc:	d09f      	beq.n	801780e <rcl_wait_set_init+0x32>
 80178ce:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80178d0:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80178d2:	4798      	blx	r3
 80178d4:	4620      	mov	r0, r4
 80178d6:	632e      	str	r6, [r5, #48]	@ 0x30
 80178d8:	b005      	add	sp, #20
 80178da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178de:	240b      	movs	r4, #11
 80178e0:	4620      	mov	r0, r4
 80178e2:	b005      	add	sp, #20
 80178e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178e8:	2401      	movs	r4, #1
 80178ea:	f002 ffc5 	bl	801a878 <rmw_destroy_wait_set>
 80178ee:	2800      	cmp	r0, #0
 80178f0:	bf18      	it	ne
 80178f2:	f44f 7461 	movne.w	r4, #900	@ 0x384
 80178f6:	e7dd      	b.n	80178b4 <rcl_wait_set_init+0xd8>
 80178f8:	2465      	movs	r4, #101	@ 0x65
 80178fa:	e788      	b.n	801780e <rcl_wait_set_init+0x32>
 80178fc:	240a      	movs	r4, #10
 80178fe:	e786      	b.n	801780e <rcl_wait_set_init+0x32>
 8017900:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017902:	e7f2      	b.n	80178ea <rcl_wait_set_init+0x10e>

08017904 <rcl_wait_set_add_guard_condition>:
 8017904:	b318      	cbz	r0, 801794e <rcl_wait_set_add_guard_condition+0x4a>
 8017906:	b538      	push	{r3, r4, r5, lr}
 8017908:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801790a:	4604      	mov	r4, r0
 801790c:	b30b      	cbz	r3, 8017952 <rcl_wait_set_add_guard_condition+0x4e>
 801790e:	b319      	cbz	r1, 8017958 <rcl_wait_set_add_guard_condition+0x54>
 8017910:	68dd      	ldr	r5, [r3, #12]
 8017912:	68c0      	ldr	r0, [r0, #12]
 8017914:	4285      	cmp	r5, r0
 8017916:	d217      	bcs.n	8017948 <rcl_wait_set_add_guard_condition+0x44>
 8017918:	1c68      	adds	r0, r5, #1
 801791a:	60d8      	str	r0, [r3, #12]
 801791c:	68a3      	ldr	r3, [r4, #8]
 801791e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017922:	b102      	cbz	r2, 8017926 <rcl_wait_set_add_guard_condition+0x22>
 8017924:	6015      	str	r5, [r2, #0]
 8017926:	4608      	mov	r0, r1
 8017928:	f007 fd52 	bl	801f3d0 <rcl_guard_condition_get_rmw_handle>
 801792c:	b150      	cbz	r0, 8017944 <rcl_wait_set_add_guard_condition+0x40>
 801792e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017930:	6842      	ldr	r2, [r0, #4]
 8017932:	2000      	movs	r0, #0
 8017934:	695b      	ldr	r3, [r3, #20]
 8017936:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801793a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801793c:	6913      	ldr	r3, [r2, #16]
 801793e:	3301      	adds	r3, #1
 8017940:	6113      	str	r3, [r2, #16]
 8017942:	bd38      	pop	{r3, r4, r5, pc}
 8017944:	2001      	movs	r0, #1
 8017946:	bd38      	pop	{r3, r4, r5, pc}
 8017948:	f240 3086 	movw	r0, #902	@ 0x386
 801794c:	bd38      	pop	{r3, r4, r5, pc}
 801794e:	200b      	movs	r0, #11
 8017950:	4770      	bx	lr
 8017952:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017956:	bd38      	pop	{r3, r4, r5, pc}
 8017958:	200b      	movs	r0, #11
 801795a:	bd38      	pop	{r3, r4, r5, pc}

0801795c <rcl_wait_set_add_timer>:
 801795c:	b328      	cbz	r0, 80179aa <rcl_wait_set_add_timer+0x4e>
 801795e:	b538      	push	{r3, r4, r5, lr}
 8017960:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017962:	4604      	mov	r4, r0
 8017964:	b31b      	cbz	r3, 80179ae <rcl_wait_set_add_timer+0x52>
 8017966:	b329      	cbz	r1, 80179b4 <rcl_wait_set_add_timer+0x58>
 8017968:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801796a:	6965      	ldr	r5, [r4, #20]
 801796c:	42a8      	cmp	r0, r5
 801796e:	d219      	bcs.n	80179a4 <rcl_wait_set_add_timer+0x48>
 8017970:	1c45      	adds	r5, r0, #1
 8017972:	641d      	str	r5, [r3, #64]	@ 0x40
 8017974:	6923      	ldr	r3, [r4, #16]
 8017976:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801797a:	b102      	cbz	r2, 801797e <rcl_wait_set_add_timer+0x22>
 801797c:	6010      	str	r0, [r2, #0]
 801797e:	4608      	mov	r0, r1
 8017980:	f7ff fb9a 	bl	80170b8 <rcl_timer_get_guard_condition>
 8017984:	b168      	cbz	r0, 80179a2 <rcl_wait_set_add_timer+0x46>
 8017986:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017988:	68e3      	ldr	r3, [r4, #12]
 801798a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801798c:	3b01      	subs	r3, #1
 801798e:	441d      	add	r5, r3
 8017990:	f007 fd1e 	bl	801f3d0 <rcl_guard_condition_get_rmw_handle>
 8017994:	b180      	cbz	r0, 80179b8 <rcl_wait_set_add_timer+0x5c>
 8017996:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017998:	6842      	ldr	r2, [r0, #4]
 801799a:	2000      	movs	r0, #0
 801799c:	695b      	ldr	r3, [r3, #20]
 801799e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80179a2:	bd38      	pop	{r3, r4, r5, pc}
 80179a4:	f240 3086 	movw	r0, #902	@ 0x386
 80179a8:	bd38      	pop	{r3, r4, r5, pc}
 80179aa:	200b      	movs	r0, #11
 80179ac:	4770      	bx	lr
 80179ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80179b2:	bd38      	pop	{r3, r4, r5, pc}
 80179b4:	200b      	movs	r0, #11
 80179b6:	bd38      	pop	{r3, r4, r5, pc}
 80179b8:	2001      	movs	r0, #1
 80179ba:	bd38      	pop	{r3, r4, r5, pc}

080179bc <rcl_wait_set_add_client>:
 80179bc:	b318      	cbz	r0, 8017a06 <rcl_wait_set_add_client+0x4a>
 80179be:	b538      	push	{r3, r4, r5, lr}
 80179c0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80179c2:	4604      	mov	r4, r0
 80179c4:	b30b      	cbz	r3, 8017a0a <rcl_wait_set_add_client+0x4e>
 80179c6:	b319      	cbz	r1, 8017a10 <rcl_wait_set_add_client+0x54>
 80179c8:	699d      	ldr	r5, [r3, #24]
 80179ca:	69c0      	ldr	r0, [r0, #28]
 80179cc:	4285      	cmp	r5, r0
 80179ce:	d217      	bcs.n	8017a00 <rcl_wait_set_add_client+0x44>
 80179d0:	1c68      	adds	r0, r5, #1
 80179d2:	6198      	str	r0, [r3, #24]
 80179d4:	69a3      	ldr	r3, [r4, #24]
 80179d6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80179da:	b102      	cbz	r2, 80179de <rcl_wait_set_add_client+0x22>
 80179dc:	6015      	str	r5, [r2, #0]
 80179de:	4608      	mov	r0, r1
 80179e0:	f7fd ffba 	bl	8015958 <rcl_client_get_rmw_handle>
 80179e4:	b150      	cbz	r0, 80179fc <rcl_wait_set_add_client+0x40>
 80179e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80179e8:	6842      	ldr	r2, [r0, #4]
 80179ea:	2000      	movs	r0, #0
 80179ec:	6a1b      	ldr	r3, [r3, #32]
 80179ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80179f2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80179f4:	69d3      	ldr	r3, [r2, #28]
 80179f6:	3301      	adds	r3, #1
 80179f8:	61d3      	str	r3, [r2, #28]
 80179fa:	bd38      	pop	{r3, r4, r5, pc}
 80179fc:	2001      	movs	r0, #1
 80179fe:	bd38      	pop	{r3, r4, r5, pc}
 8017a00:	f240 3086 	movw	r0, #902	@ 0x386
 8017a04:	bd38      	pop	{r3, r4, r5, pc}
 8017a06:	200b      	movs	r0, #11
 8017a08:	4770      	bx	lr
 8017a0a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017a0e:	bd38      	pop	{r3, r4, r5, pc}
 8017a10:	200b      	movs	r0, #11
 8017a12:	bd38      	pop	{r3, r4, r5, pc}

08017a14 <rcl_wait_set_add_service>:
 8017a14:	b318      	cbz	r0, 8017a5e <rcl_wait_set_add_service+0x4a>
 8017a16:	b538      	push	{r3, r4, r5, lr}
 8017a18:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017a1a:	4604      	mov	r4, r0
 8017a1c:	b30b      	cbz	r3, 8017a62 <rcl_wait_set_add_service+0x4e>
 8017a1e:	b319      	cbz	r1, 8017a68 <rcl_wait_set_add_service+0x54>
 8017a20:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8017a22:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8017a24:	4285      	cmp	r5, r0
 8017a26:	d217      	bcs.n	8017a58 <rcl_wait_set_add_service+0x44>
 8017a28:	1c68      	adds	r0, r5, #1
 8017a2a:	6258      	str	r0, [r3, #36]	@ 0x24
 8017a2c:	6a23      	ldr	r3, [r4, #32]
 8017a2e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017a32:	b102      	cbz	r2, 8017a36 <rcl_wait_set_add_service+0x22>
 8017a34:	6015      	str	r5, [r2, #0]
 8017a36:	4608      	mov	r0, r1
 8017a38:	f7fe ffe2 	bl	8016a00 <rcl_service_get_rmw_handle>
 8017a3c:	b150      	cbz	r0, 8017a54 <rcl_wait_set_add_service+0x40>
 8017a3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017a40:	6842      	ldr	r2, [r0, #4]
 8017a42:	2000      	movs	r0, #0
 8017a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017a46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017a4a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017a4c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8017a4e:	3301      	adds	r3, #1
 8017a50:	6293      	str	r3, [r2, #40]	@ 0x28
 8017a52:	bd38      	pop	{r3, r4, r5, pc}
 8017a54:	2001      	movs	r0, #1
 8017a56:	bd38      	pop	{r3, r4, r5, pc}
 8017a58:	f240 3086 	movw	r0, #902	@ 0x386
 8017a5c:	bd38      	pop	{r3, r4, r5, pc}
 8017a5e:	200b      	movs	r0, #11
 8017a60:	4770      	bx	lr
 8017a62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017a66:	bd38      	pop	{r3, r4, r5, pc}
 8017a68:	200b      	movs	r0, #11
 8017a6a:	bd38      	pop	{r3, r4, r5, pc}
 8017a6c:	0000      	movs	r0, r0
	...

08017a70 <rcl_wait>:
 8017a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a74:	ed2d 8b02 	vpush	{d8}
 8017a78:	b08d      	sub	sp, #52	@ 0x34
 8017a7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017a7e:	2800      	cmp	r0, #0
 8017a80:	f000 814f 	beq.w	8017d22 <rcl_wait+0x2b2>
 8017a84:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017a86:	4605      	mov	r5, r0
 8017a88:	2e00      	cmp	r6, #0
 8017a8a:	f000 811a 	beq.w	8017cc2 <rcl_wait+0x252>
 8017a8e:	6843      	ldr	r3, [r0, #4]
 8017a90:	b983      	cbnz	r3, 8017ab4 <rcl_wait+0x44>
 8017a92:	68eb      	ldr	r3, [r5, #12]
 8017a94:	b973      	cbnz	r3, 8017ab4 <rcl_wait+0x44>
 8017a96:	696b      	ldr	r3, [r5, #20]
 8017a98:	b963      	cbnz	r3, 8017ab4 <rcl_wait+0x44>
 8017a9a:	69eb      	ldr	r3, [r5, #28]
 8017a9c:	b953      	cbnz	r3, 8017ab4 <rcl_wait+0x44>
 8017a9e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8017aa0:	b943      	cbnz	r3, 8017ab4 <rcl_wait+0x44>
 8017aa2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8017aa4:	b933      	cbnz	r3, 8017ab4 <rcl_wait+0x44>
 8017aa6:	f240 3085 	movw	r0, #901	@ 0x385
 8017aaa:	b00d      	add	sp, #52	@ 0x34
 8017aac:	ecbd 8b02 	vpop	{d8}
 8017ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab4:	9b04      	ldr	r3, [sp, #16]
 8017ab6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8017ab8:	2b01      	cmp	r3, #1
 8017aba:	9b05      	ldr	r3, [sp, #20]
 8017abc:	f173 0300 	sbcs.w	r3, r3, #0
 8017ac0:	f2c0 80f8 	blt.w	8017cb4 <rcl_wait+0x244>
 8017ac4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8017ac8:	2a00      	cmp	r2, #0
 8017aca:	f000 810f 	beq.w	8017cec <rcl_wait+0x27c>
 8017ace:	2400      	movs	r4, #0
 8017ad0:	4613      	mov	r3, r2
 8017ad2:	f240 3921 	movw	r9, #801	@ 0x321
 8017ad6:	4632      	mov	r2, r6
 8017ad8:	46a2      	mov	sl, r4
 8017ada:	46a3      	mov	fp, r4
 8017adc:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8017d40 <rcl_wait+0x2d0>
 8017ae0:	e014      	b.n	8017b0c <rcl_wait+0x9c>
 8017ae2:	2800      	cmp	r0, #0
 8017ae4:	d1e1      	bne.n	8017aaa <rcl_wait+0x3a>
 8017ae6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017aea:	4542      	cmp	r2, r8
 8017aec:	eb73 0107 	sbcs.w	r1, r3, r7
 8017af0:	da03      	bge.n	8017afa <rcl_wait+0x8a>
 8017af2:	4690      	mov	r8, r2
 8017af4:	461f      	mov	r7, r3
 8017af6:	f04f 0b01 	mov.w	fp, #1
 8017afa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017afc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017afe:	3401      	adds	r4, #1
 8017b00:	f14a 0a00 	adc.w	sl, sl, #0
 8017b04:	429c      	cmp	r4, r3
 8017b06:	f17a 0100 	sbcs.w	r1, sl, #0
 8017b0a:	d228      	bcs.n	8017b5e <rcl_wait+0xee>
 8017b0c:	6928      	ldr	r0, [r5, #16]
 8017b0e:	a908      	add	r1, sp, #32
 8017b10:	00a6      	lsls	r6, r4, #2
 8017b12:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8017b16:	2800      	cmp	r0, #0
 8017b18:	d0f1      	beq.n	8017afe <rcl_wait+0x8e>
 8017b1a:	68eb      	ldr	r3, [r5, #12]
 8017b1c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8017b20:	4423      	add	r3, r4
 8017b22:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8017b26:	f1be 0f00 	cmp.w	lr, #0
 8017b2a:	d006      	beq.n	8017b3a <rcl_wait+0xca>
 8017b2c:	6913      	ldr	r3, [r2, #16]
 8017b2e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8017b32:	3301      	adds	r3, #1
 8017b34:	6113      	str	r3, [r2, #16]
 8017b36:	692b      	ldr	r3, [r5, #16]
 8017b38:	5998      	ldr	r0, [r3, r6]
 8017b3a:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017b3e:	f7ff fa89 	bl	8017054 <rcl_timer_get_time_until_next_call>
 8017b42:	4548      	cmp	r0, r9
 8017b44:	d1cd      	bne.n	8017ae2 <rcl_wait+0x72>
 8017b46:	692b      	ldr	r3, [r5, #16]
 8017b48:	2200      	movs	r2, #0
 8017b4a:	3401      	adds	r4, #1
 8017b4c:	519a      	str	r2, [r3, r6]
 8017b4e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017b50:	f14a 0a00 	adc.w	sl, sl, #0
 8017b54:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017b56:	429c      	cmp	r4, r3
 8017b58:	f17a 0100 	sbcs.w	r1, sl, #0
 8017b5c:	d3d6      	bcc.n	8017b0c <rcl_wait+0x9c>
 8017b5e:	4659      	mov	r1, fp
 8017b60:	4616      	mov	r6, r2
 8017b62:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017b66:	4313      	orrs	r3, r2
 8017b68:	f040 80b4 	bne.w	8017cd4 <rcl_wait+0x264>
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	2200      	movs	r2, #0
 8017b70:	460c      	mov	r4, r1
 8017b72:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017b76:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017b7a:	ab08      	add	r3, sp, #32
 8017b7c:	9302      	str	r3, [sp, #8]
 8017b7e:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8017b82:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8017b84:	f106 0110 	add.w	r1, r6, #16
 8017b88:	9300      	str	r3, [sp, #0]
 8017b8a:	1d30      	adds	r0, r6, #4
 8017b8c:	f106 031c 	add.w	r3, r6, #28
 8017b90:	9201      	str	r2, [sp, #4]
 8017b92:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8017b96:	f002 fd01 	bl	801a59c <rmw_wait>
 8017b9a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017b9c:	4680      	mov	r8, r0
 8017b9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017ba0:	b1e2      	cbz	r2, 8017bdc <rcl_wait+0x16c>
 8017ba2:	f04f 0900 	mov.w	r9, #0
 8017ba6:	464f      	mov	r7, r9
 8017ba8:	692a      	ldr	r2, [r5, #16]
 8017baa:	f10d 011f 	add.w	r1, sp, #31
 8017bae:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8017bb2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8017bb6:	b160      	cbz	r0, 8017bd2 <rcl_wait+0x162>
 8017bb8:	f88d 701f 	strb.w	r7, [sp, #31]
 8017bbc:	f7ff fa0e 	bl	8016fdc <rcl_timer_is_ready>
 8017bc0:	2800      	cmp	r0, #0
 8017bc2:	f47f af72 	bne.w	8017aaa <rcl_wait+0x3a>
 8017bc6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8017bca:	b90b      	cbnz	r3, 8017bd0 <rcl_wait+0x160>
 8017bcc:	692a      	ldr	r2, [r5, #16]
 8017bce:	5193      	str	r3, [r2, r6]
 8017bd0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017bd2:	f109 0901 	add.w	r9, r9, #1
 8017bd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017bd8:	454a      	cmp	r2, r9
 8017bda:	d8e5      	bhi.n	8017ba8 <rcl_wait+0x138>
 8017bdc:	f038 0002 	bics.w	r0, r8, #2
 8017be0:	d176      	bne.n	8017cd0 <rcl_wait+0x260>
 8017be2:	686f      	ldr	r7, [r5, #4]
 8017be4:	b17f      	cbz	r7, 8017c06 <rcl_wait+0x196>
 8017be6:	4602      	mov	r2, r0
 8017be8:	e002      	b.n	8017bf0 <rcl_wait+0x180>
 8017bea:	3201      	adds	r2, #1
 8017bec:	42ba      	cmp	r2, r7
 8017bee:	d00a      	beq.n	8017c06 <rcl_wait+0x196>
 8017bf0:	6899      	ldr	r1, [r3, #8]
 8017bf2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017bf6:	2900      	cmp	r1, #0
 8017bf8:	d1f7      	bne.n	8017bea <rcl_wait+0x17a>
 8017bfa:	682e      	ldr	r6, [r5, #0]
 8017bfc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017c00:	3201      	adds	r2, #1
 8017c02:	42ba      	cmp	r2, r7
 8017c04:	d1f4      	bne.n	8017bf0 <rcl_wait+0x180>
 8017c06:	68ef      	ldr	r7, [r5, #12]
 8017c08:	b17f      	cbz	r7, 8017c2a <rcl_wait+0x1ba>
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	e002      	b.n	8017c14 <rcl_wait+0x1a4>
 8017c0e:	3201      	adds	r2, #1
 8017c10:	42ba      	cmp	r2, r7
 8017c12:	d00a      	beq.n	8017c2a <rcl_wait+0x1ba>
 8017c14:	6959      	ldr	r1, [r3, #20]
 8017c16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017c1a:	2900      	cmp	r1, #0
 8017c1c:	d1f7      	bne.n	8017c0e <rcl_wait+0x19e>
 8017c1e:	68ae      	ldr	r6, [r5, #8]
 8017c20:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017c24:	3201      	adds	r2, #1
 8017c26:	42ba      	cmp	r2, r7
 8017c28:	d1f4      	bne.n	8017c14 <rcl_wait+0x1a4>
 8017c2a:	69ef      	ldr	r7, [r5, #28]
 8017c2c:	b17f      	cbz	r7, 8017c4e <rcl_wait+0x1de>
 8017c2e:	2200      	movs	r2, #0
 8017c30:	e002      	b.n	8017c38 <rcl_wait+0x1c8>
 8017c32:	3201      	adds	r2, #1
 8017c34:	42ba      	cmp	r2, r7
 8017c36:	d00a      	beq.n	8017c4e <rcl_wait+0x1de>
 8017c38:	6a19      	ldr	r1, [r3, #32]
 8017c3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017c3e:	2900      	cmp	r1, #0
 8017c40:	d1f7      	bne.n	8017c32 <rcl_wait+0x1c2>
 8017c42:	69ae      	ldr	r6, [r5, #24]
 8017c44:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017c48:	3201      	adds	r2, #1
 8017c4a:	42ba      	cmp	r2, r7
 8017c4c:	d1f4      	bne.n	8017c38 <rcl_wait+0x1c8>
 8017c4e:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8017c50:	b17f      	cbz	r7, 8017c72 <rcl_wait+0x202>
 8017c52:	2200      	movs	r2, #0
 8017c54:	e002      	b.n	8017c5c <rcl_wait+0x1ec>
 8017c56:	3201      	adds	r2, #1
 8017c58:	42ba      	cmp	r2, r7
 8017c5a:	d00a      	beq.n	8017c72 <rcl_wait+0x202>
 8017c5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8017c5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017c62:	2900      	cmp	r1, #0
 8017c64:	d1f7      	bne.n	8017c56 <rcl_wait+0x1e6>
 8017c66:	6a2e      	ldr	r6, [r5, #32]
 8017c68:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017c6c:	3201      	adds	r2, #1
 8017c6e:	42ba      	cmp	r2, r7
 8017c70:	d1f4      	bne.n	8017c5c <rcl_wait+0x1ec>
 8017c72:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 8017c74:	b17f      	cbz	r7, 8017c96 <rcl_wait+0x226>
 8017c76:	2200      	movs	r2, #0
 8017c78:	e002      	b.n	8017c80 <rcl_wait+0x210>
 8017c7a:	3201      	adds	r2, #1
 8017c7c:	42ba      	cmp	r2, r7
 8017c7e:	d00a      	beq.n	8017c96 <rcl_wait+0x226>
 8017c80:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8017c82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017c86:	2900      	cmp	r1, #0
 8017c88:	d1f7      	bne.n	8017c7a <rcl_wait+0x20a>
 8017c8a:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8017c8c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017c90:	3201      	adds	r2, #1
 8017c92:	42ba      	cmp	r2, r7
 8017c94:	d1f4      	bne.n	8017c80 <rcl_wait+0x210>
 8017c96:	f1b8 0f02 	cmp.w	r8, #2
 8017c9a:	f47f af06 	bne.w	8017aaa <rcl_wait+0x3a>
 8017c9e:	f084 0301 	eor.w	r3, r4, #1
 8017ca2:	b2db      	uxtb	r3, r3
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	bf18      	it	ne
 8017ca8:	2002      	movne	r0, #2
 8017caa:	b00d      	add	sp, #52	@ 0x34
 8017cac:	ecbd 8b02 	vpop	{d8}
 8017cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cb4:	2a00      	cmp	r2, #0
 8017cb6:	d03a      	beq.n	8017d2e <rcl_wait+0x2be>
 8017cb8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017cbc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017cc0:	e705      	b.n	8017ace <rcl_wait+0x5e>
 8017cc2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017cc6:	b00d      	add	sp, #52	@ 0x34
 8017cc8:	ecbd 8b02 	vpop	{d8}
 8017ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cd0:	2001      	movs	r0, #1
 8017cd2:	e6ea      	b.n	8017aaa <rcl_wait+0x3a>
 8017cd4:	9b04      	ldr	r3, [sp, #16]
 8017cd6:	460c      	mov	r4, r1
 8017cd8:	2b01      	cmp	r3, #1
 8017cda:	9b05      	ldr	r3, [sp, #20]
 8017cdc:	f173 0300 	sbcs.w	r3, r3, #0
 8017ce0:	bfa8      	it	ge
 8017ce2:	f044 0401 	orrge.w	r4, r4, #1
 8017ce6:	b914      	cbnz	r4, 8017cee <rcl_wait+0x27e>
 8017ce8:	4623      	mov	r3, r4
 8017cea:	e747      	b.n	8017b7c <rcl_wait+0x10c>
 8017cec:	4611      	mov	r1, r2
 8017cee:	2f00      	cmp	r7, #0
 8017cf0:	da02      	bge.n	8017cf8 <rcl_wait+0x288>
 8017cf2:	f04f 0800 	mov.w	r8, #0
 8017cf6:	4647      	mov	r7, r8
 8017cf8:	460c      	mov	r4, r1
 8017cfa:	4640      	mov	r0, r8
 8017cfc:	4639      	mov	r1, r7
 8017cfe:	a312      	add	r3, pc, #72	@ (adr r3, 8017d48 <rcl_wait+0x2d8>)
 8017d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d04:	f7e8 fb54 	bl	80003b0 <__aeabi_ldivmod>
 8017d08:	a30f      	add	r3, pc, #60	@ (adr r3, 8017d48 <rcl_wait+0x2d8>)
 8017d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017d12:	4640      	mov	r0, r8
 8017d14:	4639      	mov	r1, r7
 8017d16:	f7e8 fb4b 	bl	80003b0 <__aeabi_ldivmod>
 8017d1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017d1e:	ab08      	add	r3, sp, #32
 8017d20:	e72c      	b.n	8017b7c <rcl_wait+0x10c>
 8017d22:	200b      	movs	r0, #11
 8017d24:	b00d      	add	sp, #52	@ 0x34
 8017d26:	ecbd 8b02 	vpop	{d8}
 8017d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d2e:	4611      	mov	r1, r2
 8017d30:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017d34:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017d38:	e713      	b.n	8017b62 <rcl_wait+0xf2>
 8017d3a:	bf00      	nop
 8017d3c:	f3af 8000 	nop.w
 8017d40:	ffffffff 	.word	0xffffffff
 8017d44:	7fffffff 	.word	0x7fffffff
 8017d48:	3b9aca00 	.word	0x3b9aca00
 8017d4c:	00000000 	.word	0x00000000

08017d50 <rcl_action_take_goal_response>:
 8017d50:	2800      	cmp	r0, #0
 8017d52:	d039      	beq.n	8017dc8 <rcl_action_take_goal_response+0x78>
 8017d54:	b570      	push	{r4, r5, r6, lr}
 8017d56:	4604      	mov	r4, r0
 8017d58:	6800      	ldr	r0, [r0, #0]
 8017d5a:	b380      	cbz	r0, 8017dbe <rcl_action_take_goal_response+0x6e>
 8017d5c:	460e      	mov	r6, r1
 8017d5e:	4615      	mov	r5, r2
 8017d60:	f7fd fe82 	bl	8015a68 <rcl_client_is_valid>
 8017d64:	b330      	cbz	r0, 8017db4 <rcl_action_take_goal_response+0x64>
 8017d66:	6820      	ldr	r0, [r4, #0]
 8017d68:	3004      	adds	r0, #4
 8017d6a:	f7fd fe7d 	bl	8015a68 <rcl_client_is_valid>
 8017d6e:	b308      	cbz	r0, 8017db4 <rcl_action_take_goal_response+0x64>
 8017d70:	6820      	ldr	r0, [r4, #0]
 8017d72:	3008      	adds	r0, #8
 8017d74:	f7fd fe78 	bl	8015a68 <rcl_client_is_valid>
 8017d78:	b1e0      	cbz	r0, 8017db4 <rcl_action_take_goal_response+0x64>
 8017d7a:	6820      	ldr	r0, [r4, #0]
 8017d7c:	300c      	adds	r0, #12
 8017d7e:	f7fe ffe5 	bl	8016d4c <rcl_subscription_is_valid>
 8017d82:	b1b8      	cbz	r0, 8017db4 <rcl_action_take_goal_response+0x64>
 8017d84:	6820      	ldr	r0, [r4, #0]
 8017d86:	3010      	adds	r0, #16
 8017d88:	f7fe ffe0 	bl	8016d4c <rcl_subscription_is_valid>
 8017d8c:	b190      	cbz	r0, 8017db4 <rcl_action_take_goal_response+0x64>
 8017d8e:	b1cd      	cbz	r5, 8017dc4 <rcl_action_take_goal_response+0x74>
 8017d90:	b1c6      	cbz	r6, 8017dc4 <rcl_action_take_goal_response+0x74>
 8017d92:	462a      	mov	r2, r5
 8017d94:	4631      	mov	r1, r6
 8017d96:	6820      	ldr	r0, [r4, #0]
 8017d98:	f7fd fe1e 	bl	80159d8 <rcl_take_response>
 8017d9c:	b148      	cbz	r0, 8017db2 <rcl_action_take_goal_response+0x62>
 8017d9e:	280a      	cmp	r0, #10
 8017da0:	d007      	beq.n	8017db2 <rcl_action_take_goal_response+0x62>
 8017da2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017da6:	f640 0337 	movw	r3, #2103	@ 0x837
 8017daa:	4290      	cmp	r0, r2
 8017dac:	bf0c      	ite	eq
 8017dae:	4618      	moveq	r0, r3
 8017db0:	2001      	movne	r0, #1
 8017db2:	bd70      	pop	{r4, r5, r6, pc}
 8017db4:	f7fc ffc4 	bl	8014d40 <rcutils_reset_error>
 8017db8:	f640 0036 	movw	r0, #2102	@ 0x836
 8017dbc:	bd70      	pop	{r4, r5, r6, pc}
 8017dbe:	f640 0036 	movw	r0, #2102	@ 0x836
 8017dc2:	bd70      	pop	{r4, r5, r6, pc}
 8017dc4:	200b      	movs	r0, #11
 8017dc6:	bd70      	pop	{r4, r5, r6, pc}
 8017dc8:	f640 0036 	movw	r0, #2102	@ 0x836
 8017dcc:	4770      	bx	lr
 8017dce:	bf00      	nop

08017dd0 <rcl_action_send_result_request>:
 8017dd0:	b390      	cbz	r0, 8017e38 <rcl_action_send_result_request+0x68>
 8017dd2:	b570      	push	{r4, r5, r6, lr}
 8017dd4:	4604      	mov	r4, r0
 8017dd6:	6800      	ldr	r0, [r0, #0]
 8017dd8:	b348      	cbz	r0, 8017e2e <rcl_action_send_result_request+0x5e>
 8017dda:	460e      	mov	r6, r1
 8017ddc:	4615      	mov	r5, r2
 8017dde:	f7fd fe43 	bl	8015a68 <rcl_client_is_valid>
 8017de2:	b1f8      	cbz	r0, 8017e24 <rcl_action_send_result_request+0x54>
 8017de4:	6820      	ldr	r0, [r4, #0]
 8017de6:	3004      	adds	r0, #4
 8017de8:	f7fd fe3e 	bl	8015a68 <rcl_client_is_valid>
 8017dec:	b1d0      	cbz	r0, 8017e24 <rcl_action_send_result_request+0x54>
 8017dee:	6820      	ldr	r0, [r4, #0]
 8017df0:	3008      	adds	r0, #8
 8017df2:	f7fd fe39 	bl	8015a68 <rcl_client_is_valid>
 8017df6:	b1a8      	cbz	r0, 8017e24 <rcl_action_send_result_request+0x54>
 8017df8:	6820      	ldr	r0, [r4, #0]
 8017dfa:	300c      	adds	r0, #12
 8017dfc:	f7fe ffa6 	bl	8016d4c <rcl_subscription_is_valid>
 8017e00:	b180      	cbz	r0, 8017e24 <rcl_action_send_result_request+0x54>
 8017e02:	6820      	ldr	r0, [r4, #0]
 8017e04:	3010      	adds	r0, #16
 8017e06:	f7fe ffa1 	bl	8016d4c <rcl_subscription_is_valid>
 8017e0a:	b158      	cbz	r0, 8017e24 <rcl_action_send_result_request+0x54>
 8017e0c:	b195      	cbz	r5, 8017e34 <rcl_action_send_result_request+0x64>
 8017e0e:	b18e      	cbz	r6, 8017e34 <rcl_action_send_result_request+0x64>
 8017e10:	6820      	ldr	r0, [r4, #0]
 8017e12:	462a      	mov	r2, r5
 8017e14:	4631      	mov	r1, r6
 8017e16:	3008      	adds	r0, #8
 8017e18:	f7fd fda4 	bl	8015964 <rcl_send_request>
 8017e1c:	3800      	subs	r0, #0
 8017e1e:	bf18      	it	ne
 8017e20:	2001      	movne	r0, #1
 8017e22:	bd70      	pop	{r4, r5, r6, pc}
 8017e24:	f7fc ff8c 	bl	8014d40 <rcutils_reset_error>
 8017e28:	f640 0036 	movw	r0, #2102	@ 0x836
 8017e2c:	bd70      	pop	{r4, r5, r6, pc}
 8017e2e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017e32:	bd70      	pop	{r4, r5, r6, pc}
 8017e34:	200b      	movs	r0, #11
 8017e36:	bd70      	pop	{r4, r5, r6, pc}
 8017e38:	f640 0036 	movw	r0, #2102	@ 0x836
 8017e3c:	4770      	bx	lr
 8017e3e:	bf00      	nop

08017e40 <rcl_action_take_result_response>:
 8017e40:	2800      	cmp	r0, #0
 8017e42:	d03a      	beq.n	8017eba <rcl_action_take_result_response+0x7a>
 8017e44:	b570      	push	{r4, r5, r6, lr}
 8017e46:	4604      	mov	r4, r0
 8017e48:	6800      	ldr	r0, [r0, #0]
 8017e4a:	b388      	cbz	r0, 8017eb0 <rcl_action_take_result_response+0x70>
 8017e4c:	460e      	mov	r6, r1
 8017e4e:	4615      	mov	r5, r2
 8017e50:	f7fd fe0a 	bl	8015a68 <rcl_client_is_valid>
 8017e54:	b338      	cbz	r0, 8017ea6 <rcl_action_take_result_response+0x66>
 8017e56:	6820      	ldr	r0, [r4, #0]
 8017e58:	3004      	adds	r0, #4
 8017e5a:	f7fd fe05 	bl	8015a68 <rcl_client_is_valid>
 8017e5e:	b310      	cbz	r0, 8017ea6 <rcl_action_take_result_response+0x66>
 8017e60:	6820      	ldr	r0, [r4, #0]
 8017e62:	3008      	adds	r0, #8
 8017e64:	f7fd fe00 	bl	8015a68 <rcl_client_is_valid>
 8017e68:	b1e8      	cbz	r0, 8017ea6 <rcl_action_take_result_response+0x66>
 8017e6a:	6820      	ldr	r0, [r4, #0]
 8017e6c:	300c      	adds	r0, #12
 8017e6e:	f7fe ff6d 	bl	8016d4c <rcl_subscription_is_valid>
 8017e72:	b1c0      	cbz	r0, 8017ea6 <rcl_action_take_result_response+0x66>
 8017e74:	6820      	ldr	r0, [r4, #0]
 8017e76:	3010      	adds	r0, #16
 8017e78:	f7fe ff68 	bl	8016d4c <rcl_subscription_is_valid>
 8017e7c:	b198      	cbz	r0, 8017ea6 <rcl_action_take_result_response+0x66>
 8017e7e:	b1d5      	cbz	r5, 8017eb6 <rcl_action_take_result_response+0x76>
 8017e80:	b1ce      	cbz	r6, 8017eb6 <rcl_action_take_result_response+0x76>
 8017e82:	6820      	ldr	r0, [r4, #0]
 8017e84:	462a      	mov	r2, r5
 8017e86:	4631      	mov	r1, r6
 8017e88:	3008      	adds	r0, #8
 8017e8a:	f7fd fda5 	bl	80159d8 <rcl_take_response>
 8017e8e:	b148      	cbz	r0, 8017ea4 <rcl_action_take_result_response+0x64>
 8017e90:	280a      	cmp	r0, #10
 8017e92:	d007      	beq.n	8017ea4 <rcl_action_take_result_response+0x64>
 8017e94:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017e98:	f640 0337 	movw	r3, #2103	@ 0x837
 8017e9c:	4290      	cmp	r0, r2
 8017e9e:	bf0c      	ite	eq
 8017ea0:	4618      	moveq	r0, r3
 8017ea2:	2001      	movne	r0, #1
 8017ea4:	bd70      	pop	{r4, r5, r6, pc}
 8017ea6:	f7fc ff4b 	bl	8014d40 <rcutils_reset_error>
 8017eaa:	f640 0036 	movw	r0, #2102	@ 0x836
 8017eae:	bd70      	pop	{r4, r5, r6, pc}
 8017eb0:	f640 0036 	movw	r0, #2102	@ 0x836
 8017eb4:	bd70      	pop	{r4, r5, r6, pc}
 8017eb6:	200b      	movs	r0, #11
 8017eb8:	bd70      	pop	{r4, r5, r6, pc}
 8017eba:	f640 0036 	movw	r0, #2102	@ 0x836
 8017ebe:	4770      	bx	lr

08017ec0 <rcl_action_take_cancel_response>:
 8017ec0:	2800      	cmp	r0, #0
 8017ec2:	d03a      	beq.n	8017f3a <rcl_action_take_cancel_response+0x7a>
 8017ec4:	b570      	push	{r4, r5, r6, lr}
 8017ec6:	4604      	mov	r4, r0
 8017ec8:	6800      	ldr	r0, [r0, #0]
 8017eca:	b388      	cbz	r0, 8017f30 <rcl_action_take_cancel_response+0x70>
 8017ecc:	460e      	mov	r6, r1
 8017ece:	4615      	mov	r5, r2
 8017ed0:	f7fd fdca 	bl	8015a68 <rcl_client_is_valid>
 8017ed4:	b338      	cbz	r0, 8017f26 <rcl_action_take_cancel_response+0x66>
 8017ed6:	6820      	ldr	r0, [r4, #0]
 8017ed8:	3004      	adds	r0, #4
 8017eda:	f7fd fdc5 	bl	8015a68 <rcl_client_is_valid>
 8017ede:	b310      	cbz	r0, 8017f26 <rcl_action_take_cancel_response+0x66>
 8017ee0:	6820      	ldr	r0, [r4, #0]
 8017ee2:	3008      	adds	r0, #8
 8017ee4:	f7fd fdc0 	bl	8015a68 <rcl_client_is_valid>
 8017ee8:	b1e8      	cbz	r0, 8017f26 <rcl_action_take_cancel_response+0x66>
 8017eea:	6820      	ldr	r0, [r4, #0]
 8017eec:	300c      	adds	r0, #12
 8017eee:	f7fe ff2d 	bl	8016d4c <rcl_subscription_is_valid>
 8017ef2:	b1c0      	cbz	r0, 8017f26 <rcl_action_take_cancel_response+0x66>
 8017ef4:	6820      	ldr	r0, [r4, #0]
 8017ef6:	3010      	adds	r0, #16
 8017ef8:	f7fe ff28 	bl	8016d4c <rcl_subscription_is_valid>
 8017efc:	b198      	cbz	r0, 8017f26 <rcl_action_take_cancel_response+0x66>
 8017efe:	b1d5      	cbz	r5, 8017f36 <rcl_action_take_cancel_response+0x76>
 8017f00:	b1ce      	cbz	r6, 8017f36 <rcl_action_take_cancel_response+0x76>
 8017f02:	6820      	ldr	r0, [r4, #0]
 8017f04:	462a      	mov	r2, r5
 8017f06:	4631      	mov	r1, r6
 8017f08:	3004      	adds	r0, #4
 8017f0a:	f7fd fd65 	bl	80159d8 <rcl_take_response>
 8017f0e:	b148      	cbz	r0, 8017f24 <rcl_action_take_cancel_response+0x64>
 8017f10:	280a      	cmp	r0, #10
 8017f12:	d007      	beq.n	8017f24 <rcl_action_take_cancel_response+0x64>
 8017f14:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017f18:	f640 0337 	movw	r3, #2103	@ 0x837
 8017f1c:	4290      	cmp	r0, r2
 8017f1e:	bf0c      	ite	eq
 8017f20:	4618      	moveq	r0, r3
 8017f22:	2001      	movne	r0, #1
 8017f24:	bd70      	pop	{r4, r5, r6, pc}
 8017f26:	f7fc ff0b 	bl	8014d40 <rcutils_reset_error>
 8017f2a:	f640 0036 	movw	r0, #2102	@ 0x836
 8017f2e:	bd70      	pop	{r4, r5, r6, pc}
 8017f30:	f640 0036 	movw	r0, #2102	@ 0x836
 8017f34:	bd70      	pop	{r4, r5, r6, pc}
 8017f36:	200b      	movs	r0, #11
 8017f38:	bd70      	pop	{r4, r5, r6, pc}
 8017f3a:	f640 0036 	movw	r0, #2102	@ 0x836
 8017f3e:	4770      	bx	lr

08017f40 <rcl_action_take_feedback>:
 8017f40:	2800      	cmp	r0, #0
 8017f42:	d038      	beq.n	8017fb6 <rcl_action_take_feedback+0x76>
 8017f44:	b530      	push	{r4, r5, lr}
 8017f46:	4604      	mov	r4, r0
 8017f48:	6800      	ldr	r0, [r0, #0]
 8017f4a:	b091      	sub	sp, #68	@ 0x44
 8017f4c:	b378      	cbz	r0, 8017fae <rcl_action_take_feedback+0x6e>
 8017f4e:	460d      	mov	r5, r1
 8017f50:	f7fd fd8a 	bl	8015a68 <rcl_client_is_valid>
 8017f54:	b328      	cbz	r0, 8017fa2 <rcl_action_take_feedback+0x62>
 8017f56:	6820      	ldr	r0, [r4, #0]
 8017f58:	3004      	adds	r0, #4
 8017f5a:	f7fd fd85 	bl	8015a68 <rcl_client_is_valid>
 8017f5e:	b300      	cbz	r0, 8017fa2 <rcl_action_take_feedback+0x62>
 8017f60:	6820      	ldr	r0, [r4, #0]
 8017f62:	3008      	adds	r0, #8
 8017f64:	f7fd fd80 	bl	8015a68 <rcl_client_is_valid>
 8017f68:	b1d8      	cbz	r0, 8017fa2 <rcl_action_take_feedback+0x62>
 8017f6a:	6820      	ldr	r0, [r4, #0]
 8017f6c:	300c      	adds	r0, #12
 8017f6e:	f7fe feed 	bl	8016d4c <rcl_subscription_is_valid>
 8017f72:	b1b0      	cbz	r0, 8017fa2 <rcl_action_take_feedback+0x62>
 8017f74:	6820      	ldr	r0, [r4, #0]
 8017f76:	3010      	adds	r0, #16
 8017f78:	f7fe fee8 	bl	8016d4c <rcl_subscription_is_valid>
 8017f7c:	b188      	cbz	r0, 8017fa2 <rcl_action_take_feedback+0x62>
 8017f7e:	b1ed      	cbz	r5, 8017fbc <rcl_action_take_feedback+0x7c>
 8017f80:	6820      	ldr	r0, [r4, #0]
 8017f82:	2300      	movs	r3, #0
 8017f84:	466a      	mov	r2, sp
 8017f86:	4629      	mov	r1, r5
 8017f88:	300c      	adds	r0, #12
 8017f8a:	f7fe fe83 	bl	8016c94 <rcl_take>
 8017f8e:	b160      	cbz	r0, 8017faa <rcl_action_take_feedback+0x6a>
 8017f90:	f240 1391 	movw	r3, #401	@ 0x191
 8017f94:	4298      	cmp	r0, r3
 8017f96:	d014      	beq.n	8017fc2 <rcl_action_take_feedback+0x82>
 8017f98:	280a      	cmp	r0, #10
 8017f9a:	bf18      	it	ne
 8017f9c:	2001      	movne	r0, #1
 8017f9e:	b011      	add	sp, #68	@ 0x44
 8017fa0:	bd30      	pop	{r4, r5, pc}
 8017fa2:	f7fc fecd 	bl	8014d40 <rcutils_reset_error>
 8017fa6:	f640 0036 	movw	r0, #2102	@ 0x836
 8017faa:	b011      	add	sp, #68	@ 0x44
 8017fac:	bd30      	pop	{r4, r5, pc}
 8017fae:	f640 0036 	movw	r0, #2102	@ 0x836
 8017fb2:	b011      	add	sp, #68	@ 0x44
 8017fb4:	bd30      	pop	{r4, r5, pc}
 8017fb6:	f640 0036 	movw	r0, #2102	@ 0x836
 8017fba:	4770      	bx	lr
 8017fbc:	200b      	movs	r0, #11
 8017fbe:	b011      	add	sp, #68	@ 0x44
 8017fc0:	bd30      	pop	{r4, r5, pc}
 8017fc2:	f640 0037 	movw	r0, #2103	@ 0x837
 8017fc6:	e7f0      	b.n	8017faa <rcl_action_take_feedback+0x6a>

08017fc8 <rcl_action_wait_set_add_action_client>:
 8017fc8:	2800      	cmp	r0, #0
 8017fca:	d048      	beq.n	801805e <rcl_action_wait_set_add_action_client+0x96>
 8017fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fce:	460c      	mov	r4, r1
 8017fd0:	2900      	cmp	r1, #0
 8017fd2:	d03c      	beq.n	801804e <rcl_action_wait_set_add_action_client+0x86>
 8017fd4:	4605      	mov	r5, r0
 8017fd6:	6808      	ldr	r0, [r1, #0]
 8017fd8:	2800      	cmp	r0, #0
 8017fda:	d038      	beq.n	801804e <rcl_action_wait_set_add_action_client+0x86>
 8017fdc:	4617      	mov	r7, r2
 8017fde:	461e      	mov	r6, r3
 8017fe0:	f7fd fd42 	bl	8015a68 <rcl_client_is_valid>
 8017fe4:	b3b0      	cbz	r0, 8018054 <rcl_action_wait_set_add_action_client+0x8c>
 8017fe6:	6820      	ldr	r0, [r4, #0]
 8017fe8:	3004      	adds	r0, #4
 8017fea:	f7fd fd3d 	bl	8015a68 <rcl_client_is_valid>
 8017fee:	b388      	cbz	r0, 8018054 <rcl_action_wait_set_add_action_client+0x8c>
 8017ff0:	6820      	ldr	r0, [r4, #0]
 8017ff2:	3008      	adds	r0, #8
 8017ff4:	f7fd fd38 	bl	8015a68 <rcl_client_is_valid>
 8017ff8:	b360      	cbz	r0, 8018054 <rcl_action_wait_set_add_action_client+0x8c>
 8017ffa:	6820      	ldr	r0, [r4, #0]
 8017ffc:	300c      	adds	r0, #12
 8017ffe:	f7fe fea5 	bl	8016d4c <rcl_subscription_is_valid>
 8018002:	b338      	cbz	r0, 8018054 <rcl_action_wait_set_add_action_client+0x8c>
 8018004:	6820      	ldr	r0, [r4, #0]
 8018006:	3010      	adds	r0, #16
 8018008:	f7fe fea0 	bl	8016d4c <rcl_subscription_is_valid>
 801800c:	b310      	cbz	r0, 8018054 <rcl_action_wait_set_add_action_client+0x8c>
 801800e:	6821      	ldr	r1, [r4, #0]
 8018010:	4628      	mov	r0, r5
 8018012:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8018016:	f7ff fcd1 	bl	80179bc <rcl_wait_set_add_client>
 801801a:	b9b8      	cbnz	r0, 801804c <rcl_action_wait_set_add_action_client+0x84>
 801801c:	6821      	ldr	r1, [r4, #0]
 801801e:	4628      	mov	r0, r5
 8018020:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8018024:	3104      	adds	r1, #4
 8018026:	f7ff fcc9 	bl	80179bc <rcl_wait_set_add_client>
 801802a:	b978      	cbnz	r0, 801804c <rcl_action_wait_set_add_action_client+0x84>
 801802c:	6821      	ldr	r1, [r4, #0]
 801802e:	4628      	mov	r0, r5
 8018030:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8018034:	3108      	adds	r1, #8
 8018036:	f7ff fcc1 	bl	80179bc <rcl_wait_set_add_client>
 801803a:	b938      	cbnz	r0, 801804c <rcl_action_wait_set_add_action_client+0x84>
 801803c:	6821      	ldr	r1, [r4, #0]
 801803e:	4628      	mov	r0, r5
 8018040:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8018044:	310c      	adds	r1, #12
 8018046:	f7ff f969 	bl	801731c <rcl_wait_set_add_subscription>
 801804a:	b158      	cbz	r0, 8018064 <rcl_action_wait_set_add_action_client+0x9c>
 801804c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801804e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018054:	f7fc fe74 	bl	8014d40 <rcutils_reset_error>
 8018058:	f640 0036 	movw	r0, #2102	@ 0x836
 801805c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801805e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018062:	4770      	bx	lr
 8018064:	6821      	ldr	r1, [r4, #0]
 8018066:	4628      	mov	r0, r5
 8018068:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801806c:	3110      	adds	r1, #16
 801806e:	f7ff f955 	bl	801731c <rcl_wait_set_add_subscription>
 8018072:	2800      	cmp	r0, #0
 8018074:	d1ea      	bne.n	801804c <rcl_action_wait_set_add_action_client+0x84>
 8018076:	b11f      	cbz	r7, 8018080 <rcl_action_wait_set_add_action_client+0xb8>
 8018078:	6823      	ldr	r3, [r4, #0]
 801807a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801807e:	603b      	str	r3, [r7, #0]
 8018080:	2e00      	cmp	r6, #0
 8018082:	d0e3      	beq.n	801804c <rcl_action_wait_set_add_action_client+0x84>
 8018084:	6823      	ldr	r3, [r4, #0]
 8018086:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801808a:	6033      	str	r3, [r6, #0]
 801808c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801808e:	bf00      	nop

08018090 <rcl_action_client_wait_set_get_entities_ready>:
 8018090:	2800      	cmp	r0, #0
 8018092:	d050      	beq.n	8018136 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8018094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018098:	460c      	mov	r4, r1
 801809a:	2900      	cmp	r1, #0
 801809c:	d03e      	beq.n	801811c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801809e:	4605      	mov	r5, r0
 80180a0:	6808      	ldr	r0, [r1, #0]
 80180a2:	2800      	cmp	r0, #0
 80180a4:	d03a      	beq.n	801811c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80180a6:	4616      	mov	r6, r2
 80180a8:	461f      	mov	r7, r3
 80180aa:	f7fd fcdd 	bl	8015a68 <rcl_client_is_valid>
 80180ae:	2800      	cmp	r0, #0
 80180b0:	d038      	beq.n	8018124 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80180b2:	6820      	ldr	r0, [r4, #0]
 80180b4:	3004      	adds	r0, #4
 80180b6:	f7fd fcd7 	bl	8015a68 <rcl_client_is_valid>
 80180ba:	2800      	cmp	r0, #0
 80180bc:	d032      	beq.n	8018124 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80180be:	6820      	ldr	r0, [r4, #0]
 80180c0:	3008      	adds	r0, #8
 80180c2:	f7fd fcd1 	bl	8015a68 <rcl_client_is_valid>
 80180c6:	b368      	cbz	r0, 8018124 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80180c8:	6820      	ldr	r0, [r4, #0]
 80180ca:	300c      	adds	r0, #12
 80180cc:	f7fe fe3e 	bl	8016d4c <rcl_subscription_is_valid>
 80180d0:	b340      	cbz	r0, 8018124 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80180d2:	6820      	ldr	r0, [r4, #0]
 80180d4:	3010      	adds	r0, #16
 80180d6:	f7fe fe39 	bl	8016d4c <rcl_subscription_is_valid>
 80180da:	b318      	cbz	r0, 8018124 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80180dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 80180e0:	2a00      	cmp	r2, #0
 80180e2:	bf18      	it	ne
 80180e4:	2b00      	cmpne	r3, #0
 80180e6:	9b08      	ldr	r3, [sp, #32]
 80180e8:	bf0c      	ite	eq
 80180ea:	2101      	moveq	r1, #1
 80180ec:	2100      	movne	r1, #0
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	bf08      	it	eq
 80180f2:	f041 0101 	orreq.w	r1, r1, #1
 80180f6:	2f00      	cmp	r7, #0
 80180f8:	bf08      	it	eq
 80180fa:	f041 0101 	orreq.w	r1, r1, #1
 80180fe:	b9b9      	cbnz	r1, 8018130 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8018100:	b1b6      	cbz	r6, 8018130 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8018102:	6823      	ldr	r3, [r4, #0]
 8018104:	686c      	ldr	r4, [r5, #4]
 8018106:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 801810a:	428a      	cmp	r2, r1
 801810c:	4610      	mov	r0, r2
 801810e:	bf38      	it	cc
 8018110:	4608      	movcc	r0, r1
 8018112:	4284      	cmp	r4, r0
 8018114:	d812      	bhi.n	801813c <rcl_action_client_wait_set_get_entities_ready+0xac>
 8018116:	2001      	movs	r0, #1
 8018118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801811c:	f640 0036 	movw	r0, #2102	@ 0x836
 8018120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018124:	f7fc fe0c 	bl	8014d40 <rcutils_reset_error>
 8018128:	f640 0036 	movw	r0, #2102	@ 0x836
 801812c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018130:	200b      	movs	r0, #11
 8018132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018136:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801813a:	4770      	bx	lr
 801813c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8018140:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8018144:	45f0      	cmp	r8, lr
 8018146:	4640      	mov	r0, r8
 8018148:	69ec      	ldr	r4, [r5, #28]
 801814a:	bf38      	it	cc
 801814c:	4670      	movcc	r0, lr
 801814e:	4560      	cmp	r0, ip
 8018150:	bf38      	it	cc
 8018152:	4660      	movcc	r0, ip
 8018154:	4284      	cmp	r4, r0
 8018156:	d9de      	bls.n	8018116 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8018158:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801815c:	682d      	ldr	r5, [r5, #0]
 801815e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8018162:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8018166:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801816a:	1a18      	subs	r0, r3, r0
 801816c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8018170:	f103 0c0c 	add.w	ip, r3, #12
 8018174:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8018178:	fab0 f080 	clz	r0, r0
 801817c:	eba5 050c 	sub.w	r5, r5, ip
 8018180:	0940      	lsrs	r0, r0, #5
 8018182:	fab5 f585 	clz	r5, r5
 8018186:	096d      	lsrs	r5, r5, #5
 8018188:	7035      	strb	r5, [r6, #0]
 801818a:	f103 0510 	add.w	r5, r3, #16
 801818e:	1b64      	subs	r4, r4, r5
 8018190:	9d08      	ldr	r5, [sp, #32]
 8018192:	fab4 f484 	clz	r4, r4
 8018196:	0964      	lsrs	r4, r4, #5
 8018198:	703c      	strb	r4, [r7, #0]
 801819a:	1d1c      	adds	r4, r3, #4
 801819c:	3308      	adds	r3, #8
 801819e:	7028      	strb	r0, [r5, #0]
 80181a0:	1b09      	subs	r1, r1, r4
 80181a2:	2000      	movs	r0, #0
 80181a4:	1ad3      	subs	r3, r2, r3
 80181a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80181a8:	fab1 f181 	clz	r1, r1
 80181ac:	fab3 f383 	clz	r3, r3
 80181b0:	0949      	lsrs	r1, r1, #5
 80181b2:	095b      	lsrs	r3, r3, #5
 80181b4:	7011      	strb	r1, [r2, #0]
 80181b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80181b8:	7013      	strb	r3, [r2, #0]
 80181ba:	e7b1      	b.n	8018120 <rcl_action_client_wait_set_get_entities_ready+0x90>

080181bc <rcl_action_take_goal_request>:
 80181bc:	2800      	cmp	r0, #0
 80181be:	d039      	beq.n	8018234 <rcl_action_take_goal_request+0x78>
 80181c0:	b570      	push	{r4, r5, r6, lr}
 80181c2:	4604      	mov	r4, r0
 80181c4:	6800      	ldr	r0, [r0, #0]
 80181c6:	b380      	cbz	r0, 801822a <rcl_action_take_goal_request+0x6e>
 80181c8:	460e      	mov	r6, r1
 80181ca:	4615      	mov	r5, r2
 80181cc:	f7fe fc76 	bl	8016abc <rcl_service_is_valid>
 80181d0:	b330      	cbz	r0, 8018220 <rcl_action_take_goal_request+0x64>
 80181d2:	6820      	ldr	r0, [r4, #0]
 80181d4:	3004      	adds	r0, #4
 80181d6:	f7fe fc71 	bl	8016abc <rcl_service_is_valid>
 80181da:	b308      	cbz	r0, 8018220 <rcl_action_take_goal_request+0x64>
 80181dc:	6820      	ldr	r0, [r4, #0]
 80181de:	3008      	adds	r0, #8
 80181e0:	f7fe fc6c 	bl	8016abc <rcl_service_is_valid>
 80181e4:	b1e0      	cbz	r0, 8018220 <rcl_action_take_goal_request+0x64>
 80181e6:	6820      	ldr	r0, [r4, #0]
 80181e8:	300c      	adds	r0, #12
 80181ea:	f7fe fa2d 	bl	8016648 <rcl_publisher_is_valid>
 80181ee:	b1b8      	cbz	r0, 8018220 <rcl_action_take_goal_request+0x64>
 80181f0:	6820      	ldr	r0, [r4, #0]
 80181f2:	3010      	adds	r0, #16
 80181f4:	f7fe fa28 	bl	8016648 <rcl_publisher_is_valid>
 80181f8:	b190      	cbz	r0, 8018220 <rcl_action_take_goal_request+0x64>
 80181fa:	b1cd      	cbz	r5, 8018230 <rcl_action_take_goal_request+0x74>
 80181fc:	b1c6      	cbz	r6, 8018230 <rcl_action_take_goal_request+0x74>
 80181fe:	462a      	mov	r2, r5
 8018200:	4631      	mov	r1, r6
 8018202:	6820      	ldr	r0, [r4, #0]
 8018204:	f7fe fc02 	bl	8016a0c <rcl_take_request>
 8018208:	b148      	cbz	r0, 801821e <rcl_action_take_goal_request+0x62>
 801820a:	280a      	cmp	r0, #10
 801820c:	d007      	beq.n	801821e <rcl_action_take_goal_request+0x62>
 801820e:	f240 2259 	movw	r2, #601	@ 0x259
 8018212:	f640 0399 	movw	r3, #2201	@ 0x899
 8018216:	4290      	cmp	r0, r2
 8018218:	bf0c      	ite	eq
 801821a:	4618      	moveq	r0, r3
 801821c:	2001      	movne	r0, #1
 801821e:	bd70      	pop	{r4, r5, r6, pc}
 8018220:	f7fc fd8e 	bl	8014d40 <rcutils_reset_error>
 8018224:	f640 0098 	movw	r0, #2200	@ 0x898
 8018228:	bd70      	pop	{r4, r5, r6, pc}
 801822a:	f640 0098 	movw	r0, #2200	@ 0x898
 801822e:	bd70      	pop	{r4, r5, r6, pc}
 8018230:	200b      	movs	r0, #11
 8018232:	bd70      	pop	{r4, r5, r6, pc}
 8018234:	f640 0098 	movw	r0, #2200	@ 0x898
 8018238:	4770      	bx	lr
 801823a:	bf00      	nop

0801823c <rcl_action_send_goal_response>:
 801823c:	b390      	cbz	r0, 80182a4 <rcl_action_send_goal_response+0x68>
 801823e:	b570      	push	{r4, r5, r6, lr}
 8018240:	4604      	mov	r4, r0
 8018242:	6800      	ldr	r0, [r0, #0]
 8018244:	b348      	cbz	r0, 801829a <rcl_action_send_goal_response+0x5e>
 8018246:	460e      	mov	r6, r1
 8018248:	4615      	mov	r5, r2
 801824a:	f7fe fc37 	bl	8016abc <rcl_service_is_valid>
 801824e:	b1f8      	cbz	r0, 8018290 <rcl_action_send_goal_response+0x54>
 8018250:	6820      	ldr	r0, [r4, #0]
 8018252:	3004      	adds	r0, #4
 8018254:	f7fe fc32 	bl	8016abc <rcl_service_is_valid>
 8018258:	b1d0      	cbz	r0, 8018290 <rcl_action_send_goal_response+0x54>
 801825a:	6820      	ldr	r0, [r4, #0]
 801825c:	3008      	adds	r0, #8
 801825e:	f7fe fc2d 	bl	8016abc <rcl_service_is_valid>
 8018262:	b1a8      	cbz	r0, 8018290 <rcl_action_send_goal_response+0x54>
 8018264:	6820      	ldr	r0, [r4, #0]
 8018266:	300c      	adds	r0, #12
 8018268:	f7fe f9ee 	bl	8016648 <rcl_publisher_is_valid>
 801826c:	b180      	cbz	r0, 8018290 <rcl_action_send_goal_response+0x54>
 801826e:	6820      	ldr	r0, [r4, #0]
 8018270:	3010      	adds	r0, #16
 8018272:	f7fe f9e9 	bl	8016648 <rcl_publisher_is_valid>
 8018276:	b158      	cbz	r0, 8018290 <rcl_action_send_goal_response+0x54>
 8018278:	b195      	cbz	r5, 80182a0 <rcl_action_send_goal_response+0x64>
 801827a:	b18e      	cbz	r6, 80182a0 <rcl_action_send_goal_response+0x64>
 801827c:	462a      	mov	r2, r5
 801827e:	4631      	mov	r1, r6
 8018280:	6820      	ldr	r0, [r4, #0]
 8018282:	f7fe fc03 	bl	8016a8c <rcl_send_response>
 8018286:	b110      	cbz	r0, 801828e <rcl_action_send_goal_response+0x52>
 8018288:	2802      	cmp	r0, #2
 801828a:	bf18      	it	ne
 801828c:	2001      	movne	r0, #1
 801828e:	bd70      	pop	{r4, r5, r6, pc}
 8018290:	f7fc fd56 	bl	8014d40 <rcutils_reset_error>
 8018294:	f640 0098 	movw	r0, #2200	@ 0x898
 8018298:	bd70      	pop	{r4, r5, r6, pc}
 801829a:	f640 0098 	movw	r0, #2200	@ 0x898
 801829e:	bd70      	pop	{r4, r5, r6, pc}
 80182a0:	200b      	movs	r0, #11
 80182a2:	bd70      	pop	{r4, r5, r6, pc}
 80182a4:	f640 0098 	movw	r0, #2200	@ 0x898
 80182a8:	4770      	bx	lr
 80182aa:	bf00      	nop

080182ac <rcl_action_take_result_request>:
 80182ac:	2800      	cmp	r0, #0
 80182ae:	d03a      	beq.n	8018326 <rcl_action_take_result_request+0x7a>
 80182b0:	b570      	push	{r4, r5, r6, lr}
 80182b2:	4604      	mov	r4, r0
 80182b4:	6800      	ldr	r0, [r0, #0]
 80182b6:	b388      	cbz	r0, 801831c <rcl_action_take_result_request+0x70>
 80182b8:	460e      	mov	r6, r1
 80182ba:	4615      	mov	r5, r2
 80182bc:	f7fe fbfe 	bl	8016abc <rcl_service_is_valid>
 80182c0:	b338      	cbz	r0, 8018312 <rcl_action_take_result_request+0x66>
 80182c2:	6820      	ldr	r0, [r4, #0]
 80182c4:	3004      	adds	r0, #4
 80182c6:	f7fe fbf9 	bl	8016abc <rcl_service_is_valid>
 80182ca:	b310      	cbz	r0, 8018312 <rcl_action_take_result_request+0x66>
 80182cc:	6820      	ldr	r0, [r4, #0]
 80182ce:	3008      	adds	r0, #8
 80182d0:	f7fe fbf4 	bl	8016abc <rcl_service_is_valid>
 80182d4:	b1e8      	cbz	r0, 8018312 <rcl_action_take_result_request+0x66>
 80182d6:	6820      	ldr	r0, [r4, #0]
 80182d8:	300c      	adds	r0, #12
 80182da:	f7fe f9b5 	bl	8016648 <rcl_publisher_is_valid>
 80182de:	b1c0      	cbz	r0, 8018312 <rcl_action_take_result_request+0x66>
 80182e0:	6820      	ldr	r0, [r4, #0]
 80182e2:	3010      	adds	r0, #16
 80182e4:	f7fe f9b0 	bl	8016648 <rcl_publisher_is_valid>
 80182e8:	b198      	cbz	r0, 8018312 <rcl_action_take_result_request+0x66>
 80182ea:	b1d5      	cbz	r5, 8018322 <rcl_action_take_result_request+0x76>
 80182ec:	b1ce      	cbz	r6, 8018322 <rcl_action_take_result_request+0x76>
 80182ee:	6820      	ldr	r0, [r4, #0]
 80182f0:	462a      	mov	r2, r5
 80182f2:	4631      	mov	r1, r6
 80182f4:	3008      	adds	r0, #8
 80182f6:	f7fe fb89 	bl	8016a0c <rcl_take_request>
 80182fa:	b148      	cbz	r0, 8018310 <rcl_action_take_result_request+0x64>
 80182fc:	280a      	cmp	r0, #10
 80182fe:	d007      	beq.n	8018310 <rcl_action_take_result_request+0x64>
 8018300:	f240 2259 	movw	r2, #601	@ 0x259
 8018304:	f640 0399 	movw	r3, #2201	@ 0x899
 8018308:	4290      	cmp	r0, r2
 801830a:	bf0c      	ite	eq
 801830c:	4618      	moveq	r0, r3
 801830e:	2001      	movne	r0, #1
 8018310:	bd70      	pop	{r4, r5, r6, pc}
 8018312:	f7fc fd15 	bl	8014d40 <rcutils_reset_error>
 8018316:	f640 0098 	movw	r0, #2200	@ 0x898
 801831a:	bd70      	pop	{r4, r5, r6, pc}
 801831c:	f640 0098 	movw	r0, #2200	@ 0x898
 8018320:	bd70      	pop	{r4, r5, r6, pc}
 8018322:	200b      	movs	r0, #11
 8018324:	bd70      	pop	{r4, r5, r6, pc}
 8018326:	f640 0098 	movw	r0, #2200	@ 0x898
 801832a:	4770      	bx	lr

0801832c <rcl_action_take_cancel_request>:
 801832c:	2800      	cmp	r0, #0
 801832e:	d03a      	beq.n	80183a6 <rcl_action_take_cancel_request+0x7a>
 8018330:	b570      	push	{r4, r5, r6, lr}
 8018332:	4604      	mov	r4, r0
 8018334:	6800      	ldr	r0, [r0, #0]
 8018336:	b388      	cbz	r0, 801839c <rcl_action_take_cancel_request+0x70>
 8018338:	460e      	mov	r6, r1
 801833a:	4615      	mov	r5, r2
 801833c:	f7fe fbbe 	bl	8016abc <rcl_service_is_valid>
 8018340:	b338      	cbz	r0, 8018392 <rcl_action_take_cancel_request+0x66>
 8018342:	6820      	ldr	r0, [r4, #0]
 8018344:	3004      	adds	r0, #4
 8018346:	f7fe fbb9 	bl	8016abc <rcl_service_is_valid>
 801834a:	b310      	cbz	r0, 8018392 <rcl_action_take_cancel_request+0x66>
 801834c:	6820      	ldr	r0, [r4, #0]
 801834e:	3008      	adds	r0, #8
 8018350:	f7fe fbb4 	bl	8016abc <rcl_service_is_valid>
 8018354:	b1e8      	cbz	r0, 8018392 <rcl_action_take_cancel_request+0x66>
 8018356:	6820      	ldr	r0, [r4, #0]
 8018358:	300c      	adds	r0, #12
 801835a:	f7fe f975 	bl	8016648 <rcl_publisher_is_valid>
 801835e:	b1c0      	cbz	r0, 8018392 <rcl_action_take_cancel_request+0x66>
 8018360:	6820      	ldr	r0, [r4, #0]
 8018362:	3010      	adds	r0, #16
 8018364:	f7fe f970 	bl	8016648 <rcl_publisher_is_valid>
 8018368:	b198      	cbz	r0, 8018392 <rcl_action_take_cancel_request+0x66>
 801836a:	b1d5      	cbz	r5, 80183a2 <rcl_action_take_cancel_request+0x76>
 801836c:	b1ce      	cbz	r6, 80183a2 <rcl_action_take_cancel_request+0x76>
 801836e:	6820      	ldr	r0, [r4, #0]
 8018370:	462a      	mov	r2, r5
 8018372:	4631      	mov	r1, r6
 8018374:	3004      	adds	r0, #4
 8018376:	f7fe fb49 	bl	8016a0c <rcl_take_request>
 801837a:	b148      	cbz	r0, 8018390 <rcl_action_take_cancel_request+0x64>
 801837c:	280a      	cmp	r0, #10
 801837e:	d007      	beq.n	8018390 <rcl_action_take_cancel_request+0x64>
 8018380:	f240 2259 	movw	r2, #601	@ 0x259
 8018384:	f640 0399 	movw	r3, #2201	@ 0x899
 8018388:	4290      	cmp	r0, r2
 801838a:	bf0c      	ite	eq
 801838c:	4618      	moveq	r0, r3
 801838e:	2001      	movne	r0, #1
 8018390:	bd70      	pop	{r4, r5, r6, pc}
 8018392:	f7fc fcd5 	bl	8014d40 <rcutils_reset_error>
 8018396:	f640 0098 	movw	r0, #2200	@ 0x898
 801839a:	bd70      	pop	{r4, r5, r6, pc}
 801839c:	f640 0098 	movw	r0, #2200	@ 0x898
 80183a0:	bd70      	pop	{r4, r5, r6, pc}
 80183a2:	200b      	movs	r0, #11
 80183a4:	bd70      	pop	{r4, r5, r6, pc}
 80183a6:	f640 0098 	movw	r0, #2200	@ 0x898
 80183aa:	4770      	bx	lr

080183ac <rcl_action_send_cancel_response>:
 80183ac:	b398      	cbz	r0, 8018416 <rcl_action_send_cancel_response+0x6a>
 80183ae:	b570      	push	{r4, r5, r6, lr}
 80183b0:	4604      	mov	r4, r0
 80183b2:	6800      	ldr	r0, [r0, #0]
 80183b4:	b350      	cbz	r0, 801840c <rcl_action_send_cancel_response+0x60>
 80183b6:	460e      	mov	r6, r1
 80183b8:	4615      	mov	r5, r2
 80183ba:	f7fe fb7f 	bl	8016abc <rcl_service_is_valid>
 80183be:	b300      	cbz	r0, 8018402 <rcl_action_send_cancel_response+0x56>
 80183c0:	6820      	ldr	r0, [r4, #0]
 80183c2:	3004      	adds	r0, #4
 80183c4:	f7fe fb7a 	bl	8016abc <rcl_service_is_valid>
 80183c8:	b1d8      	cbz	r0, 8018402 <rcl_action_send_cancel_response+0x56>
 80183ca:	6820      	ldr	r0, [r4, #0]
 80183cc:	3008      	adds	r0, #8
 80183ce:	f7fe fb75 	bl	8016abc <rcl_service_is_valid>
 80183d2:	b1b0      	cbz	r0, 8018402 <rcl_action_send_cancel_response+0x56>
 80183d4:	6820      	ldr	r0, [r4, #0]
 80183d6:	300c      	adds	r0, #12
 80183d8:	f7fe f936 	bl	8016648 <rcl_publisher_is_valid>
 80183dc:	b188      	cbz	r0, 8018402 <rcl_action_send_cancel_response+0x56>
 80183de:	6820      	ldr	r0, [r4, #0]
 80183e0:	3010      	adds	r0, #16
 80183e2:	f7fe f931 	bl	8016648 <rcl_publisher_is_valid>
 80183e6:	b160      	cbz	r0, 8018402 <rcl_action_send_cancel_response+0x56>
 80183e8:	b19d      	cbz	r5, 8018412 <rcl_action_send_cancel_response+0x66>
 80183ea:	b196      	cbz	r6, 8018412 <rcl_action_send_cancel_response+0x66>
 80183ec:	6820      	ldr	r0, [r4, #0]
 80183ee:	462a      	mov	r2, r5
 80183f0:	4631      	mov	r1, r6
 80183f2:	3004      	adds	r0, #4
 80183f4:	f7fe fb4a 	bl	8016a8c <rcl_send_response>
 80183f8:	b110      	cbz	r0, 8018400 <rcl_action_send_cancel_response+0x54>
 80183fa:	2802      	cmp	r0, #2
 80183fc:	bf18      	it	ne
 80183fe:	2001      	movne	r0, #1
 8018400:	bd70      	pop	{r4, r5, r6, pc}
 8018402:	f7fc fc9d 	bl	8014d40 <rcutils_reset_error>
 8018406:	f640 0098 	movw	r0, #2200	@ 0x898
 801840a:	bd70      	pop	{r4, r5, r6, pc}
 801840c:	f640 0098 	movw	r0, #2200	@ 0x898
 8018410:	bd70      	pop	{r4, r5, r6, pc}
 8018412:	200b      	movs	r0, #11
 8018414:	bd70      	pop	{r4, r5, r6, pc}
 8018416:	f640 0098 	movw	r0, #2200	@ 0x898
 801841a:	4770      	bx	lr

0801841c <rcl_action_wait_set_add_action_server>:
 801841c:	2800      	cmp	r0, #0
 801841e:	d04d      	beq.n	80184bc <rcl_action_wait_set_add_action_server+0xa0>
 8018420:	b570      	push	{r4, r5, r6, lr}
 8018422:	460c      	mov	r4, r1
 8018424:	b159      	cbz	r1, 801843e <rcl_action_wait_set_add_action_server+0x22>
 8018426:	4605      	mov	r5, r0
 8018428:	6808      	ldr	r0, [r1, #0]
 801842a:	b140      	cbz	r0, 801843e <rcl_action_wait_set_add_action_server+0x22>
 801842c:	4616      	mov	r6, r2
 801842e:	f7fe fb45 	bl	8016abc <rcl_service_is_valid>
 8018432:	b120      	cbz	r0, 801843e <rcl_action_wait_set_add_action_server+0x22>
 8018434:	6820      	ldr	r0, [r4, #0]
 8018436:	3004      	adds	r0, #4
 8018438:	f7fe fb40 	bl	8016abc <rcl_service_is_valid>
 801843c:	b910      	cbnz	r0, 8018444 <rcl_action_wait_set_add_action_server+0x28>
 801843e:	f640 0098 	movw	r0, #2200	@ 0x898
 8018442:	bd70      	pop	{r4, r5, r6, pc}
 8018444:	6820      	ldr	r0, [r4, #0]
 8018446:	3008      	adds	r0, #8
 8018448:	f7fe fb38 	bl	8016abc <rcl_service_is_valid>
 801844c:	2800      	cmp	r0, #0
 801844e:	d0f6      	beq.n	801843e <rcl_action_wait_set_add_action_server+0x22>
 8018450:	6820      	ldr	r0, [r4, #0]
 8018452:	300c      	adds	r0, #12
 8018454:	f7fe f910 	bl	8016678 <rcl_publisher_is_valid_except_context>
 8018458:	2800      	cmp	r0, #0
 801845a:	d0f0      	beq.n	801843e <rcl_action_wait_set_add_action_server+0x22>
 801845c:	6820      	ldr	r0, [r4, #0]
 801845e:	3010      	adds	r0, #16
 8018460:	f7fe f90a 	bl	8016678 <rcl_publisher_is_valid_except_context>
 8018464:	2800      	cmp	r0, #0
 8018466:	d0ea      	beq.n	801843e <rcl_action_wait_set_add_action_server+0x22>
 8018468:	6821      	ldr	r1, [r4, #0]
 801846a:	4628      	mov	r0, r5
 801846c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8018470:	f7ff fad0 	bl	8017a14 <rcl_wait_set_add_service>
 8018474:	2800      	cmp	r0, #0
 8018476:	d1e4      	bne.n	8018442 <rcl_action_wait_set_add_action_server+0x26>
 8018478:	6821      	ldr	r1, [r4, #0]
 801847a:	4628      	mov	r0, r5
 801847c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8018480:	3104      	adds	r1, #4
 8018482:	f7ff fac7 	bl	8017a14 <rcl_wait_set_add_service>
 8018486:	2800      	cmp	r0, #0
 8018488:	d1db      	bne.n	8018442 <rcl_action_wait_set_add_action_server+0x26>
 801848a:	6821      	ldr	r1, [r4, #0]
 801848c:	4628      	mov	r0, r5
 801848e:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8018492:	3108      	adds	r1, #8
 8018494:	f7ff fabe 	bl	8017a14 <rcl_wait_set_add_service>
 8018498:	2800      	cmp	r0, #0
 801849a:	d1d2      	bne.n	8018442 <rcl_action_wait_set_add_action_server+0x26>
 801849c:	6821      	ldr	r1, [r4, #0]
 801849e:	4628      	mov	r0, r5
 80184a0:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80184a4:	3114      	adds	r1, #20
 80184a6:	f7ff fa59 	bl	801795c <rcl_wait_set_add_timer>
 80184aa:	2800      	cmp	r0, #0
 80184ac:	d1c9      	bne.n	8018442 <rcl_action_wait_set_add_action_server+0x26>
 80184ae:	2e00      	cmp	r6, #0
 80184b0:	d0c7      	beq.n	8018442 <rcl_action_wait_set_add_action_server+0x26>
 80184b2:	6823      	ldr	r3, [r4, #0]
 80184b4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80184b8:	6033      	str	r3, [r6, #0]
 80184ba:	bd70      	pop	{r4, r5, r6, pc}
 80184bc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80184c0:	4770      	bx	lr
 80184c2:	bf00      	nop

080184c4 <rcl_action_server_wait_set_get_entities_ready>:
 80184c4:	2800      	cmp	r0, #0
 80184c6:	d067      	beq.n	8018598 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 80184c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184cc:	460c      	mov	r4, r1
 80184ce:	b161      	cbz	r1, 80184ea <rcl_action_server_wait_set_get_entities_ready+0x26>
 80184d0:	4605      	mov	r5, r0
 80184d2:	6808      	ldr	r0, [r1, #0]
 80184d4:	b148      	cbz	r0, 80184ea <rcl_action_server_wait_set_get_entities_ready+0x26>
 80184d6:	4616      	mov	r6, r2
 80184d8:	4698      	mov	r8, r3
 80184da:	f7fe faef 	bl	8016abc <rcl_service_is_valid>
 80184de:	b120      	cbz	r0, 80184ea <rcl_action_server_wait_set_get_entities_ready+0x26>
 80184e0:	6820      	ldr	r0, [r4, #0]
 80184e2:	3004      	adds	r0, #4
 80184e4:	f7fe faea 	bl	8016abc <rcl_service_is_valid>
 80184e8:	b918      	cbnz	r0, 80184f2 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 80184ea:	f640 0098 	movw	r0, #2200	@ 0x898
 80184ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184f2:	6820      	ldr	r0, [r4, #0]
 80184f4:	3008      	adds	r0, #8
 80184f6:	f7fe fae1 	bl	8016abc <rcl_service_is_valid>
 80184fa:	2800      	cmp	r0, #0
 80184fc:	d0f5      	beq.n	80184ea <rcl_action_server_wait_set_get_entities_ready+0x26>
 80184fe:	6820      	ldr	r0, [r4, #0]
 8018500:	300c      	adds	r0, #12
 8018502:	f7fe f8b9 	bl	8016678 <rcl_publisher_is_valid_except_context>
 8018506:	2800      	cmp	r0, #0
 8018508:	d0ef      	beq.n	80184ea <rcl_action_server_wait_set_get_entities_ready+0x26>
 801850a:	6820      	ldr	r0, [r4, #0]
 801850c:	3010      	adds	r0, #16
 801850e:	f7fe f8b3 	bl	8016678 <rcl_publisher_is_valid_except_context>
 8018512:	2800      	cmp	r0, #0
 8018514:	d0e9      	beq.n	80184ea <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018516:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801851a:	2a00      	cmp	r2, #0
 801851c:	bf18      	it	ne
 801851e:	2b00      	cmpne	r3, #0
 8018520:	bf0c      	ite	eq
 8018522:	2101      	moveq	r1, #1
 8018524:	2100      	movne	r1, #0
 8018526:	f1b8 0f00 	cmp.w	r8, #0
 801852a:	bf08      	it	eq
 801852c:	f041 0101 	orreq.w	r1, r1, #1
 8018530:	bba9      	cbnz	r1, 801859e <rcl_action_server_wait_set_get_entities_ready+0xda>
 8018532:	b3a6      	cbz	r6, 801859e <rcl_action_server_wait_set_get_entities_ready+0xda>
 8018534:	6821      	ldr	r1, [r4, #0]
 8018536:	2000      	movs	r0, #0
 8018538:	692c      	ldr	r4, [r5, #16]
 801853a:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 801853e:	6a2f      	ldr	r7, [r5, #32]
 8018540:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018544:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 8018548:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801854c:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8018550:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8018554:	1a64      	subs	r4, r4, r1
 8018556:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 801855a:	fab4 f484 	clz	r4, r4
 801855e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8018562:	0964      	lsrs	r4, r4, #5
 8018564:	7034      	strb	r4, [r6, #0]
 8018566:	1d0c      	adds	r4, r1, #4
 8018568:	1b2c      	subs	r4, r5, r4
 801856a:	fab4 f484 	clz	r4, r4
 801856e:	0964      	lsrs	r4, r4, #5
 8018570:	f888 4000 	strb.w	r4, [r8]
 8018574:	f101 0408 	add.w	r4, r1, #8
 8018578:	1b1b      	subs	r3, r3, r4
 801857a:	9c06      	ldr	r4, [sp, #24]
 801857c:	fab3 f383 	clz	r3, r3
 8018580:	095b      	lsrs	r3, r3, #5
 8018582:	7023      	strb	r3, [r4, #0]
 8018584:	f101 0314 	add.w	r3, r1, #20
 8018588:	1ad3      	subs	r3, r2, r3
 801858a:	9a07      	ldr	r2, [sp, #28]
 801858c:	fab3 f383 	clz	r3, r3
 8018590:	095b      	lsrs	r3, r3, #5
 8018592:	7013      	strb	r3, [r2, #0]
 8018594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018598:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801859c:	4770      	bx	lr
 801859e:	200b      	movs	r0, #11
 80185a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080185a4 <_execute_event_handler>:
 80185a4:	2002      	movs	r0, #2
 80185a6:	4770      	bx	lr

080185a8 <_cancel_goal_event_handler>:
 80185a8:	2003      	movs	r0, #3
 80185aa:	4770      	bx	lr

080185ac <_succeed_event_handler>:
 80185ac:	2004      	movs	r0, #4
 80185ae:	4770      	bx	lr

080185b0 <_abort_event_handler>:
 80185b0:	2006      	movs	r0, #6
 80185b2:	4770      	bx	lr

080185b4 <_canceled_event_handler>:
 80185b4:	2005      	movs	r0, #5
 80185b6:	4770      	bx	lr

080185b8 <rcl_action_transition_goal_state>:
 80185b8:	b2c2      	uxtb	r2, r0
 80185ba:	2a06      	cmp	r2, #6
 80185bc:	d810      	bhi.n	80185e0 <rcl_action_transition_goal_state+0x28>
 80185be:	2904      	cmp	r1, #4
 80185c0:	d80e      	bhi.n	80185e0 <rcl_action_transition_goal_state+0x28>
 80185c2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80185c6:	b410      	push	{r4}
 80185c8:	1853      	adds	r3, r2, r1
 80185ca:	4c06      	ldr	r4, [pc, #24]	@ (80185e4 <rcl_action_transition_goal_state+0x2c>)
 80185cc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80185d0:	b113      	cbz	r3, 80185d8 <rcl_action_transition_goal_state+0x20>
 80185d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185d6:	4718      	bx	r3
 80185d8:	2000      	movs	r0, #0
 80185da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185de:	4770      	bx	lr
 80185e0:	2000      	movs	r0, #0
 80185e2:	4770      	bx	lr
 80185e4:	08023dc4 	.word	0x08023dc4

080185e8 <rcl_action_get_zero_initialized_cancel_response>:
 80185e8:	b510      	push	{r4, lr}
 80185ea:	4c07      	ldr	r4, [pc, #28]	@ (8018608 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80185ec:	4686      	mov	lr, r0
 80185ee:	4684      	mov	ip, r0
 80185f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80185f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80185f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80185f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80185fc:	6823      	ldr	r3, [r4, #0]
 80185fe:	4670      	mov	r0, lr
 8018600:	f8cc 3000 	str.w	r3, [ip]
 8018604:	bd10      	pop	{r4, pc}
 8018606:	bf00      	nop
 8018608:	08023e50 	.word	0x08023e50

0801860c <rclc_action_send_result_request>:
 801860c:	b1d0      	cbz	r0, 8018644 <rclc_action_send_result_request+0x38>
 801860e:	4684      	mov	ip, r0
 8018610:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8018614:	b500      	push	{lr}
 8018616:	b087      	sub	sp, #28
 8018618:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801861c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8018620:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8018624:	f10d 0e08 	add.w	lr, sp, #8
 8018628:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801862c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8018630:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8018634:	a902      	add	r1, sp, #8
 8018636:	3010      	adds	r0, #16
 8018638:	f7ff fbca 	bl	8017dd0 <rcl_action_send_result_request>
 801863c:	b920      	cbnz	r0, 8018648 <rclc_action_send_result_request+0x3c>
 801863e:	b007      	add	sp, #28
 8018640:	f85d fb04 	ldr.w	pc, [sp], #4
 8018644:	200b      	movs	r0, #11
 8018646:	4770      	bx	lr
 8018648:	9001      	str	r0, [sp, #4]
 801864a:	f7fc fb79 	bl	8014d40 <rcutils_reset_error>
 801864e:	9801      	ldr	r0, [sp, #4]
 8018650:	b007      	add	sp, #28
 8018652:	f85d fb04 	ldr.w	pc, [sp], #4
 8018656:	bf00      	nop

08018658 <rclc_action_take_goal_handle>:
 8018658:	b160      	cbz	r0, 8018674 <rclc_action_take_goal_handle+0x1c>
 801865a:	6883      	ldr	r3, [r0, #8]
 801865c:	b143      	cbz	r3, 8018670 <rclc_action_take_goal_handle+0x18>
 801865e:	6819      	ldr	r1, [r3, #0]
 8018660:	2200      	movs	r2, #0
 8018662:	6081      	str	r1, [r0, #8]
 8018664:	721a      	strb	r2, [r3, #8]
 8018666:	68c1      	ldr	r1, [r0, #12]
 8018668:	621a      	str	r2, [r3, #32]
 801866a:	849a      	strh	r2, [r3, #36]	@ 0x24
 801866c:	6019      	str	r1, [r3, #0]
 801866e:	60c3      	str	r3, [r0, #12]
 8018670:	4618      	mov	r0, r3
 8018672:	4770      	bx	lr
 8018674:	4603      	mov	r3, r0
 8018676:	e7fb      	b.n	8018670 <rclc_action_take_goal_handle+0x18>

08018678 <rclc_action_remove_used_goal_handle>:
 8018678:	b180      	cbz	r0, 801869c <rclc_action_remove_used_goal_handle+0x24>
 801867a:	b179      	cbz	r1, 801869c <rclc_action_remove_used_goal_handle+0x24>
 801867c:	68c3      	ldr	r3, [r0, #12]
 801867e:	4299      	cmp	r1, r3
 8018680:	d00d      	beq.n	801869e <rclc_action_remove_used_goal_handle+0x26>
 8018682:	b12b      	cbz	r3, 8018690 <rclc_action_remove_used_goal_handle+0x18>
 8018684:	681a      	ldr	r2, [r3, #0]
 8018686:	4291      	cmp	r1, r2
 8018688:	d003      	beq.n	8018692 <rclc_action_remove_used_goal_handle+0x1a>
 801868a:	4613      	mov	r3, r2
 801868c:	2b00      	cmp	r3, #0
 801868e:	d1f9      	bne.n	8018684 <rclc_action_remove_used_goal_handle+0xc>
 8018690:	4770      	bx	lr
 8018692:	680a      	ldr	r2, [r1, #0]
 8018694:	601a      	str	r2, [r3, #0]
 8018696:	6883      	ldr	r3, [r0, #8]
 8018698:	600b      	str	r3, [r1, #0]
 801869a:	6081      	str	r1, [r0, #8]
 801869c:	4770      	bx	lr
 801869e:	680b      	ldr	r3, [r1, #0]
 80186a0:	60c3      	str	r3, [r0, #12]
 80186a2:	e7f8      	b.n	8018696 <rclc_action_remove_used_goal_handle+0x1e>

080186a4 <rclc_action_find_goal_handle_by_uuid>:
 80186a4:	b538      	push	{r3, r4, r5, lr}
 80186a6:	b181      	cbz	r1, 80186ca <rclc_action_find_goal_handle_by_uuid+0x26>
 80186a8:	b178      	cbz	r0, 80186ca <rclc_action_find_goal_handle_by_uuid+0x26>
 80186aa:	68c4      	ldr	r4, [r0, #12]
 80186ac:	460d      	mov	r5, r1
 80186ae:	b914      	cbnz	r4, 80186b6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80186b0:	e009      	b.n	80186c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80186b2:	6824      	ldr	r4, [r4, #0]
 80186b4:	b13c      	cbz	r4, 80186c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80186b6:	f104 0009 	add.w	r0, r4, #9
 80186ba:	2210      	movs	r2, #16
 80186bc:	4629      	mov	r1, r5
 80186be:	f008 fc53 	bl	8020f68 <memcmp>
 80186c2:	2800      	cmp	r0, #0
 80186c4:	d1f5      	bne.n	80186b2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80186c6:	4620      	mov	r0, r4
 80186c8:	bd38      	pop	{r3, r4, r5, pc}
 80186ca:	2400      	movs	r4, #0
 80186cc:	4620      	mov	r0, r4
 80186ce:	bd38      	pop	{r3, r4, r5, pc}

080186d0 <rclc_action_find_first_handle_by_status>:
 80186d0:	b140      	cbz	r0, 80186e4 <rclc_action_find_first_handle_by_status+0x14>
 80186d2:	68c0      	ldr	r0, [r0, #12]
 80186d4:	b910      	cbnz	r0, 80186dc <rclc_action_find_first_handle_by_status+0xc>
 80186d6:	e005      	b.n	80186e4 <rclc_action_find_first_handle_by_status+0x14>
 80186d8:	6800      	ldr	r0, [r0, #0]
 80186da:	b118      	cbz	r0, 80186e4 <rclc_action_find_first_handle_by_status+0x14>
 80186dc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80186e0:	428b      	cmp	r3, r1
 80186e2:	d1f9      	bne.n	80186d8 <rclc_action_find_first_handle_by_status+0x8>
 80186e4:	4770      	bx	lr
 80186e6:	bf00      	nop

080186e8 <rclc_action_find_first_terminated_handle>:
 80186e8:	b140      	cbz	r0, 80186fc <rclc_action_find_first_terminated_handle+0x14>
 80186ea:	68c0      	ldr	r0, [r0, #12]
 80186ec:	b910      	cbnz	r0, 80186f4 <rclc_action_find_first_terminated_handle+0xc>
 80186ee:	e005      	b.n	80186fc <rclc_action_find_first_terminated_handle+0x14>
 80186f0:	6800      	ldr	r0, [r0, #0]
 80186f2:	b118      	cbz	r0, 80186fc <rclc_action_find_first_terminated_handle+0x14>
 80186f4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80186f8:	2b03      	cmp	r3, #3
 80186fa:	ddf9      	ble.n	80186f0 <rclc_action_find_first_terminated_handle+0x8>
 80186fc:	4770      	bx	lr
 80186fe:	bf00      	nop

08018700 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018700:	b170      	cbz	r0, 8018720 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018702:	68c0      	ldr	r0, [r0, #12]
 8018704:	b160      	cbz	r0, 8018720 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018706:	b410      	push	{r4}
 8018708:	e001      	b.n	801870e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801870a:	6800      	ldr	r0, [r0, #0]
 801870c:	b128      	cbz	r0, 801871a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801870e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8018712:	4299      	cmp	r1, r3
 8018714:	bf08      	it	eq
 8018716:	4294      	cmpeq	r4, r2
 8018718:	d1f7      	bne.n	801870a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801871a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801871e:	4770      	bx	lr
 8018720:	4770      	bx	lr
 8018722:	bf00      	nop

08018724 <rclc_action_find_handle_by_result_request_sequence_number>:
 8018724:	b170      	cbz	r0, 8018744 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018726:	68c0      	ldr	r0, [r0, #12]
 8018728:	b160      	cbz	r0, 8018744 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801872a:	b410      	push	{r4}
 801872c:	e001      	b.n	8018732 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801872e:	6800      	ldr	r0, [r0, #0]
 8018730:	b128      	cbz	r0, 801873e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8018732:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8018736:	4299      	cmp	r1, r3
 8018738:	bf08      	it	eq
 801873a:	4294      	cmpeq	r4, r2
 801873c:	d1f7      	bne.n	801872e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801873e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018742:	4770      	bx	lr
 8018744:	4770      	bx	lr
 8018746:	bf00      	nop

08018748 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8018748:	b170      	cbz	r0, 8018768 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801874a:	68c0      	ldr	r0, [r0, #12]
 801874c:	b160      	cbz	r0, 8018768 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801874e:	b410      	push	{r4}
 8018750:	e001      	b.n	8018756 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8018752:	6800      	ldr	r0, [r0, #0]
 8018754:	b128      	cbz	r0, 8018762 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8018756:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801875a:	4299      	cmp	r1, r3
 801875c:	bf08      	it	eq
 801875e:	4294      	cmpeq	r4, r2
 8018760:	d1f7      	bne.n	8018752 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8018762:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018766:	4770      	bx	lr
 8018768:	4770      	bx	lr
 801876a:	bf00      	nop

0801876c <rclc_action_find_first_handle_with_goal_response>:
 801876c:	b140      	cbz	r0, 8018780 <rclc_action_find_first_handle_with_goal_response+0x14>
 801876e:	68c0      	ldr	r0, [r0, #12]
 8018770:	b910      	cbnz	r0, 8018778 <rclc_action_find_first_handle_with_goal_response+0xc>
 8018772:	e005      	b.n	8018780 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018774:	6800      	ldr	r0, [r0, #0]
 8018776:	b118      	cbz	r0, 8018780 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018778:	f890 3020 	ldrb.w	r3, [r0, #32]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d0f9      	beq.n	8018774 <rclc_action_find_first_handle_with_goal_response+0x8>
 8018780:	4770      	bx	lr
 8018782:	bf00      	nop

08018784 <rclc_action_find_first_handle_with_result_response>:
 8018784:	b140      	cbz	r0, 8018798 <rclc_action_find_first_handle_with_result_response+0x14>
 8018786:	68c0      	ldr	r0, [r0, #12]
 8018788:	b910      	cbnz	r0, 8018790 <rclc_action_find_first_handle_with_result_response+0xc>
 801878a:	e005      	b.n	8018798 <rclc_action_find_first_handle_with_result_response+0x14>
 801878c:	6800      	ldr	r0, [r0, #0]
 801878e:	b118      	cbz	r0, 8018798 <rclc_action_find_first_handle_with_result_response+0x14>
 8018790:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8018794:	2b00      	cmp	r3, #0
 8018796:	d0f9      	beq.n	801878c <rclc_action_find_first_handle_with_result_response+0x8>
 8018798:	4770      	bx	lr
 801879a:	bf00      	nop

0801879c <rclc_action_server_response_goal_request>:
 801879c:	b198      	cbz	r0, 80187c6 <rclc_action_server_response_goal_request+0x2a>
 801879e:	2200      	movs	r2, #0
 80187a0:	460b      	mov	r3, r1
 80187a2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80187a6:	b510      	push	{r4, lr}
 80187a8:	6844      	ldr	r4, [r0, #4]
 80187aa:	b086      	sub	sp, #24
 80187ac:	f104 0010 	add.w	r0, r4, #16
 80187b0:	9205      	str	r2, [sp, #20]
 80187b2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80187b6:	aa03      	add	r2, sp, #12
 80187b8:	f88d 300c 	strb.w	r3, [sp, #12]
 80187bc:	f7ff fd3e 	bl	801823c <rcl_action_send_goal_response>
 80187c0:	b918      	cbnz	r0, 80187ca <rclc_action_server_response_goal_request+0x2e>
 80187c2:	b006      	add	sp, #24
 80187c4:	bd10      	pop	{r4, pc}
 80187c6:	200b      	movs	r0, #11
 80187c8:	4770      	bx	lr
 80187ca:	9001      	str	r0, [sp, #4]
 80187cc:	f7fc fab8 	bl	8014d40 <rcutils_reset_error>
 80187d0:	9801      	ldr	r0, [sp, #4]
 80187d2:	b006      	add	sp, #24
 80187d4:	bd10      	pop	{r4, pc}
 80187d6:	bf00      	nop

080187d8 <rclc_action_server_goal_cancel_accept>:
 80187d8:	b310      	cbz	r0, 8018820 <rclc_action_server_goal_cancel_accept+0x48>
 80187da:	b510      	push	{r4, lr}
 80187dc:	b090      	sub	sp, #64	@ 0x40
 80187de:	4604      	mov	r4, r0
 80187e0:	a806      	add	r0, sp, #24
 80187e2:	f7ff ff01 	bl	80185e8 <rcl_action_get_zero_initialized_cancel_response>
 80187e6:	2300      	movs	r3, #0
 80187e8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80187ec:	46ec      	mov	ip, sp
 80187ee:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80187f2:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80187f6:	f88d 3018 	strb.w	r3, [sp, #24]
 80187fa:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80187fe:	f8cd d01c 	str.w	sp, [sp, #28]
 8018802:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018806:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8018828 <rclc_action_server_goal_cancel_accept+0x50>
 801880a:	6860      	ldr	r0, [r4, #4]
 801880c:	aa06      	add	r2, sp, #24
 801880e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8018812:	3010      	adds	r0, #16
 8018814:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018818:	f7ff fdc8 	bl	80183ac <rcl_action_send_cancel_response>
 801881c:	b010      	add	sp, #64	@ 0x40
 801881e:	bd10      	pop	{r4, pc}
 8018820:	200b      	movs	r0, #11
 8018822:	4770      	bx	lr
 8018824:	f3af 8000 	nop.w
 8018828:	00000001 	.word	0x00000001
 801882c:	00000001 	.word	0x00000001

08018830 <rclc_action_server_goal_cancel_reject>:
 8018830:	b082      	sub	sp, #8
 8018832:	b530      	push	{r4, r5, lr}
 8018834:	b08b      	sub	sp, #44	@ 0x2c
 8018836:	ac0e      	add	r4, sp, #56	@ 0x38
 8018838:	e884 000c 	stmia.w	r4, {r2, r3}
 801883c:	b188      	cbz	r0, 8018862 <rclc_action_server_goal_cancel_reject+0x32>
 801883e:	4604      	mov	r4, r0
 8018840:	a801      	add	r0, sp, #4
 8018842:	460d      	mov	r5, r1
 8018844:	f7ff fed0 	bl	80185e8 <rcl_action_get_zero_initialized_cancel_response>
 8018848:	aa01      	add	r2, sp, #4
 801884a:	a90e      	add	r1, sp, #56	@ 0x38
 801884c:	f104 0010 	add.w	r0, r4, #16
 8018850:	f88d 5004 	strb.w	r5, [sp, #4]
 8018854:	f7ff fdaa 	bl	80183ac <rcl_action_send_cancel_response>
 8018858:	b00b      	add	sp, #44	@ 0x2c
 801885a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801885e:	b002      	add	sp, #8
 8018860:	4770      	bx	lr
 8018862:	200b      	movs	r0, #11
 8018864:	b00b      	add	sp, #44	@ 0x2c
 8018866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801886a:	b002      	add	sp, #8
 801886c:	4770      	bx	lr
 801886e:	bf00      	nop

08018870 <__atomic_load_8>:
 8018870:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8018874:	4a16      	ldr	r2, [pc, #88]	@ (80188d0 <__atomic_load_8+0x60>)
 8018876:	4b17      	ldr	r3, [pc, #92]	@ (80188d4 <__atomic_load_8+0x64>)
 8018878:	f04f 0c01 	mov.w	ip, #1
 801887c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8018880:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8018884:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8018888:	fb02 f101 	mul.w	r1, r2, r1
 801888c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8018890:	fba3 2301 	umull	r2, r3, r3, r1
 8018894:	091b      	lsrs	r3, r3, #4
 8018896:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801889a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801889e:	b4d0      	push	{r4, r6, r7}
 80188a0:	1ac9      	subs	r1, r1, r3
 80188a2:	4c0d      	ldr	r4, [pc, #52]	@ (80188d8 <__atomic_load_8+0x68>)
 80188a4:	1862      	adds	r2, r4, r1
 80188a6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80188aa:	e8c2 cf46 	strexb	r6, ip, [r2]
 80188ae:	2e00      	cmp	r6, #0
 80188b0:	d1f9      	bne.n	80188a6 <__atomic_load_8+0x36>
 80188b2:	b2db      	uxtb	r3, r3
 80188b4:	f3bf 8f5b 	dmb	ish
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d1f4      	bne.n	80188a6 <__atomic_load_8+0x36>
 80188bc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80188c0:	f3bf 8f5b 	dmb	ish
 80188c4:	5463      	strb	r3, [r4, r1]
 80188c6:	4630      	mov	r0, r6
 80188c8:	4639      	mov	r1, r7
 80188ca:	bcd0      	pop	{r4, r6, r7}
 80188cc:	4770      	bx	lr
 80188ce:	bf00      	nop
 80188d0:	27d4eb2d 	.word	0x27d4eb2d
 80188d4:	b21642c9 	.word	0xb21642c9
 80188d8:	24064a90 	.word	0x24064a90

080188dc <__atomic_store_8>:
 80188dc:	b570      	push	{r4, r5, r6, lr}
 80188de:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 80188e2:	4916      	ldr	r1, [pc, #88]	@ (801893c <__atomic_store_8+0x60>)
 80188e4:	4c16      	ldr	r4, [pc, #88]	@ (8018940 <__atomic_store_8+0x64>)
 80188e6:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 80188ea:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80188ee:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80188f2:	fb01 fe0e 	mul.w	lr, r1, lr
 80188f6:	4913      	ldr	r1, [pc, #76]	@ (8018944 <__atomic_store_8+0x68>)
 80188f8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 80188fc:	fba1 510e 	umull	r5, r1, r1, lr
 8018900:	f04f 0501 	mov.w	r5, #1
 8018904:	0909      	lsrs	r1, r1, #4
 8018906:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801890a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801890e:	ebae 0e01 	sub.w	lr, lr, r1
 8018912:	eb04 0c0e 	add.w	ip, r4, lr
 8018916:	e8dc 1f4f 	ldrexb	r1, [ip]
 801891a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801891e:	2e00      	cmp	r6, #0
 8018920:	d1f9      	bne.n	8018916 <__atomic_store_8+0x3a>
 8018922:	b2c9      	uxtb	r1, r1
 8018924:	f3bf 8f5b 	dmb	ish
 8018928:	2900      	cmp	r1, #0
 801892a:	d1f4      	bne.n	8018916 <__atomic_store_8+0x3a>
 801892c:	e9c0 2300 	strd	r2, r3, [r0]
 8018930:	f3bf 8f5b 	dmb	ish
 8018934:	f804 100e 	strb.w	r1, [r4, lr]
 8018938:	bd70      	pop	{r4, r5, r6, pc}
 801893a:	bf00      	nop
 801893c:	27d4eb2d 	.word	0x27d4eb2d
 8018940:	24064a90 	.word	0x24064a90
 8018944:	b21642c9 	.word	0xb21642c9

08018948 <__atomic_exchange_8>:
 8018948:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801894c:	4917      	ldr	r1, [pc, #92]	@ (80189ac <__atomic_exchange_8+0x64>)
 801894e:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8018952:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8018956:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801895a:	fb01 fc0c 	mul.w	ip, r1, ip
 801895e:	4914      	ldr	r1, [pc, #80]	@ (80189b0 <__atomic_exchange_8+0x68>)
 8018960:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8018964:	b570      	push	{r4, r5, r6, lr}
 8018966:	4686      	mov	lr, r0
 8018968:	fba1 010c 	umull	r0, r1, r1, ip
 801896c:	4d11      	ldr	r5, [pc, #68]	@ (80189b4 <__atomic_exchange_8+0x6c>)
 801896e:	f04f 0001 	mov.w	r0, #1
 8018972:	0909      	lsrs	r1, r1, #4
 8018974:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8018978:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801897c:	ebac 0c01 	sub.w	ip, ip, r1
 8018980:	eb05 010c 	add.w	r1, r5, ip
 8018984:	e8d1 4f4f 	ldrexb	r4, [r1]
 8018988:	e8c1 0f46 	strexb	r6, r0, [r1]
 801898c:	2e00      	cmp	r6, #0
 801898e:	d1f9      	bne.n	8018984 <__atomic_exchange_8+0x3c>
 8018990:	b2e4      	uxtb	r4, r4
 8018992:	f3bf 8f5b 	dmb	ish
 8018996:	2c00      	cmp	r4, #0
 8018998:	d1f4      	bne.n	8018984 <__atomic_exchange_8+0x3c>
 801899a:	e9de 0100 	ldrd	r0, r1, [lr]
 801899e:	e9ce 2300 	strd	r2, r3, [lr]
 80189a2:	f3bf 8f5b 	dmb	ish
 80189a6:	f805 400c 	strb.w	r4, [r5, ip]
 80189aa:	bd70      	pop	{r4, r5, r6, pc}
 80189ac:	27d4eb2d 	.word	0x27d4eb2d
 80189b0:	b21642c9 	.word	0xb21642c9
 80189b4:	24064a90 	.word	0x24064a90

080189b8 <rcutils_get_env>:
 80189b8:	b168      	cbz	r0, 80189d6 <rcutils_get_env+0x1e>
 80189ba:	b510      	push	{r4, lr}
 80189bc:	460c      	mov	r4, r1
 80189be:	b129      	cbz	r1, 80189cc <rcutils_get_env+0x14>
 80189c0:	f007 fe32 	bl	8020628 <getenv>
 80189c4:	b120      	cbz	r0, 80189d0 <rcutils_get_env+0x18>
 80189c6:	6020      	str	r0, [r4, #0]
 80189c8:	2000      	movs	r0, #0
 80189ca:	bd10      	pop	{r4, pc}
 80189cc:	4803      	ldr	r0, [pc, #12]	@ (80189dc <rcutils_get_env+0x24>)
 80189ce:	bd10      	pop	{r4, pc}
 80189d0:	4b03      	ldr	r3, [pc, #12]	@ (80189e0 <rcutils_get_env+0x28>)
 80189d2:	6023      	str	r3, [r4, #0]
 80189d4:	bd10      	pop	{r4, pc}
 80189d6:	4803      	ldr	r0, [pc, #12]	@ (80189e4 <rcutils_get_env+0x2c>)
 80189d8:	4770      	bx	lr
 80189da:	bf00      	nop
 80189dc:	08023e90 	.word	0x08023e90
 80189e0:	08024550 	.word	0x08024550
 80189e4:	08023e74 	.word	0x08023e74

080189e8 <rcutils_is_directory>:
 80189e8:	2000      	movs	r0, #0
 80189ea:	4770      	bx	lr

080189ec <rcutils_join_path>:
 80189ec:	b082      	sub	sp, #8
 80189ee:	2000      	movs	r0, #0
 80189f0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80189f4:	b002      	add	sp, #8
 80189f6:	4770      	bx	lr

080189f8 <rcutils_to_native_path>:
 80189f8:	b084      	sub	sp, #16
 80189fa:	2000      	movs	r0, #0
 80189fc:	f10d 0c04 	add.w	ip, sp, #4
 8018a00:	b004      	add	sp, #16
 8018a02:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8018a06:	4770      	bx	lr

08018a08 <rcutils_format_string_limit>:
 8018a08:	b40f      	push	{r0, r1, r2, r3}
 8018a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a0c:	b083      	sub	sp, #12
 8018a0e:	ac08      	add	r4, sp, #32
 8018a10:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018a12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018a16:	b326      	cbz	r6, 8018a62 <rcutils_format_string_limit+0x5a>
 8018a18:	a808      	add	r0, sp, #32
 8018a1a:	f7fc f96b 	bl	8014cf4 <rcutils_allocator_is_valid>
 8018a1e:	b300      	cbz	r0, 8018a62 <rcutils_format_string_limit+0x5a>
 8018a20:	2100      	movs	r1, #0
 8018a22:	ab0f      	add	r3, sp, #60	@ 0x3c
 8018a24:	4632      	mov	r2, r6
 8018a26:	4608      	mov	r0, r1
 8018a28:	e9cd 3300 	strd	r3, r3, [sp]
 8018a2c:	f000 f906 	bl	8018c3c <rcutils_vsnprintf>
 8018a30:	1c43      	adds	r3, r0, #1
 8018a32:	4605      	mov	r5, r0
 8018a34:	d015      	beq.n	8018a62 <rcutils_format_string_limit+0x5a>
 8018a36:	1c47      	adds	r7, r0, #1
 8018a38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018a3a:	429f      	cmp	r7, r3
 8018a3c:	d901      	bls.n	8018a42 <rcutils_format_string_limit+0x3a>
 8018a3e:	1e5d      	subs	r5, r3, #1
 8018a40:	461f      	mov	r7, r3
 8018a42:	9b08      	ldr	r3, [sp, #32]
 8018a44:	4638      	mov	r0, r7
 8018a46:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018a48:	4798      	blx	r3
 8018a4a:	4604      	mov	r4, r0
 8018a4c:	b148      	cbz	r0, 8018a62 <rcutils_format_string_limit+0x5a>
 8018a4e:	4632      	mov	r2, r6
 8018a50:	4639      	mov	r1, r7
 8018a52:	9b01      	ldr	r3, [sp, #4]
 8018a54:	f000 f8f2 	bl	8018c3c <rcutils_vsnprintf>
 8018a58:	2800      	cmp	r0, #0
 8018a5a:	db09      	blt.n	8018a70 <rcutils_format_string_limit+0x68>
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	5563      	strb	r3, [r4, r5]
 8018a60:	e000      	b.n	8018a64 <rcutils_format_string_limit+0x5c>
 8018a62:	2400      	movs	r4, #0
 8018a64:	4620      	mov	r0, r4
 8018a66:	b003      	add	sp, #12
 8018a68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018a6c:	b004      	add	sp, #16
 8018a6e:	4770      	bx	lr
 8018a70:	4620      	mov	r0, r4
 8018a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a74:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018a76:	2400      	movs	r4, #0
 8018a78:	4798      	blx	r3
 8018a7a:	e7f3      	b.n	8018a64 <rcutils_format_string_limit+0x5c>

08018a7c <rcutils_repl_str>:
 8018a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a80:	ed2d 8b02 	vpush	{d8}
 8018a84:	b087      	sub	sp, #28
 8018a86:	2600      	movs	r6, #0
 8018a88:	4680      	mov	r8, r0
 8018a8a:	468a      	mov	sl, r1
 8018a8c:	9000      	str	r0, [sp, #0]
 8018a8e:	4608      	mov	r0, r1
 8018a90:	ee08 2a10 	vmov	s16, r2
 8018a94:	4699      	mov	r9, r3
 8018a96:	2510      	movs	r5, #16
 8018a98:	f7e7 fc2c 	bl	80002f4 <strlen>
 8018a9c:	4637      	mov	r7, r6
 8018a9e:	46b3      	mov	fp, r6
 8018aa0:	9001      	str	r0, [sp, #4]
 8018aa2:	e01e      	b.n	8018ae2 <rcutils_repl_str+0x66>
 8018aa4:	f10b 0b01 	add.w	fp, fp, #1
 8018aa8:	9b01      	ldr	r3, [sp, #4]
 8018aaa:	455e      	cmp	r6, fp
 8018aac:	eb04 0803 	add.w	r8, r4, r3
 8018ab0:	d211      	bcs.n	8018ad6 <rcutils_repl_str+0x5a>
 8018ab2:	442e      	add	r6, r5
 8018ab4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018ab8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018ac0:	00b1      	lsls	r1, r6, #2
 8018ac2:	4798      	blx	r3
 8018ac4:	2800      	cmp	r0, #0
 8018ac6:	f000 8088 	beq.w	8018bda <rcutils_repl_str+0x15e>
 8018aca:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8018ace:	4607      	mov	r7, r0
 8018ad0:	bf28      	it	cs
 8018ad2:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8018ad6:	9a00      	ldr	r2, [sp, #0]
 8018ad8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8018adc:	1aa4      	subs	r4, r4, r2
 8018ade:	f843 4c04 	str.w	r4, [r3, #-4]
 8018ae2:	4651      	mov	r1, sl
 8018ae4:	4640      	mov	r0, r8
 8018ae6:	f008 fa90 	bl	802100a <strstr>
 8018aea:	4604      	mov	r4, r0
 8018aec:	4638      	mov	r0, r7
 8018aee:	2c00      	cmp	r4, #0
 8018af0:	d1d8      	bne.n	8018aa4 <rcutils_repl_str+0x28>
 8018af2:	4640      	mov	r0, r8
 8018af4:	f7e7 fbfe 	bl	80002f4 <strlen>
 8018af8:	9b00      	ldr	r3, [sp, #0]
 8018afa:	eba8 0803 	sub.w	r8, r8, r3
 8018afe:	eb08 0400 	add.w	r4, r8, r0
 8018b02:	9402      	str	r4, [sp, #8]
 8018b04:	f1bb 0f00 	cmp.w	fp, #0
 8018b08:	d045      	beq.n	8018b96 <rcutils_repl_str+0x11a>
 8018b0a:	ee18 0a10 	vmov	r0, s16
 8018b0e:	f7e7 fbf1 	bl	80002f4 <strlen>
 8018b12:	9a01      	ldr	r2, [sp, #4]
 8018b14:	4606      	mov	r6, r0
 8018b16:	f8d9 3000 	ldr.w	r3, [r9]
 8018b1a:	1a82      	subs	r2, r0, r2
 8018b1c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018b20:	fb0b 4202 	mla	r2, fp, r2, r4
 8018b24:	1c50      	adds	r0, r2, #1
 8018b26:	9205      	str	r2, [sp, #20]
 8018b28:	4798      	blx	r3
 8018b2a:	4682      	mov	sl, r0
 8018b2c:	2800      	cmp	r0, #0
 8018b2e:	d054      	beq.n	8018bda <rcutils_repl_str+0x15e>
 8018b30:	683a      	ldr	r2, [r7, #0]
 8018b32:	463d      	mov	r5, r7
 8018b34:	9900      	ldr	r1, [sp, #0]
 8018b36:	2401      	movs	r4, #1
 8018b38:	f008 fb5f 	bl	80211fa <memcpy>
 8018b3c:	683b      	ldr	r3, [r7, #0]
 8018b3e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8018b42:	eb0a 0803 	add.w	r8, sl, r3
 8018b46:	ee18 7a10 	vmov	r7, s16
 8018b4a:	f8dd a000 	ldr.w	sl, [sp]
 8018b4e:	f8cd 9000 	str.w	r9, [sp]
 8018b52:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018b56:	4632      	mov	r2, r6
 8018b58:	4639      	mov	r1, r7
 8018b5a:	4640      	mov	r0, r8
 8018b5c:	44b0      	add	r8, r6
 8018b5e:	f008 fb4c 	bl	80211fa <memcpy>
 8018b62:	f855 2b04 	ldr.w	r2, [r5], #4
 8018b66:	45a3      	cmp	fp, r4
 8018b68:	444a      	add	r2, r9
 8018b6a:	eb0a 0102 	add.w	r1, sl, r2
 8018b6e:	d02a      	beq.n	8018bc6 <rcutils_repl_str+0x14a>
 8018b70:	6828      	ldr	r0, [r5, #0]
 8018b72:	1a82      	subs	r2, r0, r2
 8018b74:	4640      	mov	r0, r8
 8018b76:	4490      	add	r8, r2
 8018b78:	f008 fb3f 	bl	80211fa <memcpy>
 8018b7c:	1c62      	adds	r2, r4, #1
 8018b7e:	45a3      	cmp	fp, r4
 8018b80:	4614      	mov	r4, r2
 8018b82:	d8e8      	bhi.n	8018b56 <rcutils_repl_str+0xda>
 8018b84:	f8dd 9000 	ldr.w	r9, [sp]
 8018b88:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	9a05      	ldr	r2, [sp, #20]
 8018b90:	f80a 3002 	strb.w	r3, [sl, r2]
 8018b94:	e00b      	b.n	8018bae <rcutils_repl_str+0x132>
 8018b96:	4620      	mov	r0, r4
 8018b98:	f8d9 3000 	ldr.w	r3, [r9]
 8018b9c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018ba0:	3001      	adds	r0, #1
 8018ba2:	4798      	blx	r3
 8018ba4:	4682      	mov	sl, r0
 8018ba6:	b110      	cbz	r0, 8018bae <rcutils_repl_str+0x132>
 8018ba8:	9900      	ldr	r1, [sp, #0]
 8018baa:	f008 fb1e 	bl	80211ea <strcpy>
 8018bae:	4638      	mov	r0, r7
 8018bb0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018bb4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018bb8:	4798      	blx	r3
 8018bba:	4650      	mov	r0, sl
 8018bbc:	b007      	add	sp, #28
 8018bbe:	ecbd 8b02 	vpop	{d8}
 8018bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bc6:	9b02      	ldr	r3, [sp, #8]
 8018bc8:	4640      	mov	r0, r8
 8018bca:	f8dd 9000 	ldr.w	r9, [sp]
 8018bce:	1a9a      	subs	r2, r3, r2
 8018bd0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8018bd4:	f008 fb11 	bl	80211fa <memcpy>
 8018bd8:	e7d8      	b.n	8018b8c <rcutils_repl_str+0x110>
 8018bda:	f04f 0a00 	mov.w	sl, #0
 8018bde:	e7e6      	b.n	8018bae <rcutils_repl_str+0x132>

08018be0 <rcutils_snprintf>:
 8018be0:	b40c      	push	{r2, r3}
 8018be2:	b530      	push	{r4, r5, lr}
 8018be4:	b083      	sub	sp, #12
 8018be6:	ab06      	add	r3, sp, #24
 8018be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bec:	9301      	str	r3, [sp, #4]
 8018bee:	b1e2      	cbz	r2, 8018c2a <rcutils_snprintf+0x4a>
 8018bf0:	fab0 f480 	clz	r4, r0
 8018bf4:	fab1 f581 	clz	r5, r1
 8018bf8:	ea50 0c01 	orrs.w	ip, r0, r1
 8018bfc:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018c00:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8018c04:	d008      	beq.n	8018c18 <rcutils_snprintf+0x38>
 8018c06:	b984      	cbnz	r4, 8018c2a <rcutils_snprintf+0x4a>
 8018c08:	b97d      	cbnz	r5, 8018c2a <rcutils_snprintf+0x4a>
 8018c0a:	f008 f90b 	bl	8020e24 <vsniprintf>
 8018c0e:	b003      	add	sp, #12
 8018c10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c14:	b002      	add	sp, #8
 8018c16:	4770      	bx	lr
 8018c18:	4661      	mov	r1, ip
 8018c1a:	4660      	mov	r0, ip
 8018c1c:	f008 f902 	bl	8020e24 <vsniprintf>
 8018c20:	b003      	add	sp, #12
 8018c22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c26:	b002      	add	sp, #8
 8018c28:	4770      	bx	lr
 8018c2a:	f008 fab1 	bl	8021190 <__errno>
 8018c2e:	2216      	movs	r2, #22
 8018c30:	4603      	mov	r3, r0
 8018c32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c36:	601a      	str	r2, [r3, #0]
 8018c38:	e7e9      	b.n	8018c0e <rcutils_snprintf+0x2e>
 8018c3a:	bf00      	nop

08018c3c <rcutils_vsnprintf>:
 8018c3c:	b570      	push	{r4, r5, r6, lr}
 8018c3e:	b1b2      	cbz	r2, 8018c6e <rcutils_vsnprintf+0x32>
 8018c40:	fab0 f480 	clz	r4, r0
 8018c44:	fab1 f581 	clz	r5, r1
 8018c48:	ea50 0c01 	orrs.w	ip, r0, r1
 8018c4c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018c50:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8018c54:	d005      	beq.n	8018c62 <rcutils_vsnprintf+0x26>
 8018c56:	b954      	cbnz	r4, 8018c6e <rcutils_vsnprintf+0x32>
 8018c58:	b94d      	cbnz	r5, 8018c6e <rcutils_vsnprintf+0x32>
 8018c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c5e:	f008 b8e1 	b.w	8020e24 <vsniprintf>
 8018c62:	4661      	mov	r1, ip
 8018c64:	4660      	mov	r0, ip
 8018c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c6a:	f008 b8db 	b.w	8020e24 <vsniprintf>
 8018c6e:	f008 fa8f 	bl	8021190 <__errno>
 8018c72:	2316      	movs	r3, #22
 8018c74:	6003      	str	r3, [r0, #0]
 8018c76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c7a:	bd70      	pop	{r4, r5, r6, pc}

08018c7c <rcutils_strdup>:
 8018c7c:	b084      	sub	sp, #16
 8018c7e:	b570      	push	{r4, r5, r6, lr}
 8018c80:	b082      	sub	sp, #8
 8018c82:	4605      	mov	r5, r0
 8018c84:	ac07      	add	r4, sp, #28
 8018c86:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8018c8a:	b1b0      	cbz	r0, 8018cba <rcutils_strdup+0x3e>
 8018c8c:	f7e7 fb32 	bl	80002f4 <strlen>
 8018c90:	1c42      	adds	r2, r0, #1
 8018c92:	9b07      	ldr	r3, [sp, #28]
 8018c94:	4606      	mov	r6, r0
 8018c96:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018c98:	4610      	mov	r0, r2
 8018c9a:	9201      	str	r2, [sp, #4]
 8018c9c:	4798      	blx	r3
 8018c9e:	4604      	mov	r4, r0
 8018ca0:	b128      	cbz	r0, 8018cae <rcutils_strdup+0x32>
 8018ca2:	9a01      	ldr	r2, [sp, #4]
 8018ca4:	4629      	mov	r1, r5
 8018ca6:	f008 faa8 	bl	80211fa <memcpy>
 8018caa:	2300      	movs	r3, #0
 8018cac:	55a3      	strb	r3, [r4, r6]
 8018cae:	4620      	mov	r0, r4
 8018cb0:	b002      	add	sp, #8
 8018cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018cb6:	b004      	add	sp, #16
 8018cb8:	4770      	bx	lr
 8018cba:	4604      	mov	r4, r0
 8018cbc:	e7f7      	b.n	8018cae <rcutils_strdup+0x32>
 8018cbe:	bf00      	nop

08018cc0 <rcutils_strndup>:
 8018cc0:	b082      	sub	sp, #8
 8018cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cc4:	ac06      	add	r4, sp, #24
 8018cc6:	4605      	mov	r5, r0
 8018cc8:	e884 000c 	stmia.w	r4, {r2, r3}
 8018ccc:	b188      	cbz	r0, 8018cf2 <rcutils_strndup+0x32>
 8018cce:	1c4f      	adds	r7, r1, #1
 8018cd0:	460e      	mov	r6, r1
 8018cd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018cd4:	4638      	mov	r0, r7
 8018cd6:	4790      	blx	r2
 8018cd8:	4604      	mov	r4, r0
 8018cda:	b128      	cbz	r0, 8018ce8 <rcutils_strndup+0x28>
 8018cdc:	463a      	mov	r2, r7
 8018cde:	4629      	mov	r1, r5
 8018ce0:	f008 fa8b 	bl	80211fa <memcpy>
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	55a3      	strb	r3, [r4, r6]
 8018ce8:	4620      	mov	r0, r4
 8018cea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018cee:	b002      	add	sp, #8
 8018cf0:	4770      	bx	lr
 8018cf2:	4604      	mov	r4, r0
 8018cf4:	e7f8      	b.n	8018ce8 <rcutils_strndup+0x28>
 8018cf6:	bf00      	nop

08018cf8 <rcutils_get_zero_initialized_string_map>:
 8018cf8:	2000      	movs	r0, #0
 8018cfa:	4b01      	ldr	r3, [pc, #4]	@ (8018d00 <rcutils_get_zero_initialized_string_map+0x8>)
 8018cfc:	6018      	str	r0, [r3, #0]
 8018cfe:	4770      	bx	lr
 8018d00:	24064aa8 	.word	0x24064aa8

08018d04 <rcutils_string_map_reserve>:
 8018d04:	2800      	cmp	r0, #0
 8018d06:	d05e      	beq.n	8018dc6 <rcutils_string_map_reserve+0xc2>
 8018d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d0c:	460c      	mov	r4, r1
 8018d0e:	6801      	ldr	r1, [r0, #0]
 8018d10:	b082      	sub	sp, #8
 8018d12:	4605      	mov	r5, r0
 8018d14:	b129      	cbz	r1, 8018d22 <rcutils_string_map_reserve+0x1e>
 8018d16:	68cb      	ldr	r3, [r1, #12]
 8018d18:	42a3      	cmp	r3, r4
 8018d1a:	d906      	bls.n	8018d2a <rcutils_string_map_reserve+0x26>
 8018d1c:	461c      	mov	r4, r3
 8018d1e:	2900      	cmp	r1, #0
 8018d20:	d1f9      	bne.n	8018d16 <rcutils_string_map_reserve+0x12>
 8018d22:	201f      	movs	r0, #31
 8018d24:	b002      	add	sp, #8
 8018d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d2a:	688b      	ldr	r3, [r1, #8]
 8018d2c:	42a3      	cmp	r3, r4
 8018d2e:	d046      	beq.n	8018dbe <rcutils_string_map_reserve+0xba>
 8018d30:	6a0e      	ldr	r6, [r1, #32]
 8018d32:	2c00      	cmp	r4, #0
 8018d34:	d033      	beq.n	8018d9e <rcutils_string_map_reserve+0x9a>
 8018d36:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018d3a:	d242      	bcs.n	8018dc2 <rcutils_string_map_reserve+0xbe>
 8018d3c:	00a7      	lsls	r7, r4, #2
 8018d3e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8018d42:	6808      	ldr	r0, [r1, #0]
 8018d44:	4632      	mov	r2, r6
 8018d46:	4639      	mov	r1, r7
 8018d48:	47c0      	blx	r8
 8018d4a:	2800      	cmp	r0, #0
 8018d4c:	d039      	beq.n	8018dc2 <rcutils_string_map_reserve+0xbe>
 8018d4e:	682b      	ldr	r3, [r5, #0]
 8018d50:	4632      	mov	r2, r6
 8018d52:	4639      	mov	r1, r7
 8018d54:	6018      	str	r0, [r3, #0]
 8018d56:	6858      	ldr	r0, [r3, #4]
 8018d58:	47c0      	blx	r8
 8018d5a:	2800      	cmp	r0, #0
 8018d5c:	d031      	beq.n	8018dc2 <rcutils_string_map_reserve+0xbe>
 8018d5e:	682d      	ldr	r5, [r5, #0]
 8018d60:	68ab      	ldr	r3, [r5, #8]
 8018d62:	6068      	str	r0, [r5, #4]
 8018d64:	42a3      	cmp	r3, r4
 8018d66:	d225      	bcs.n	8018db4 <rcutils_string_map_reserve+0xb0>
 8018d68:	682a      	ldr	r2, [r5, #0]
 8018d6a:	eb00 0c07 	add.w	ip, r0, r7
 8018d6e:	0099      	lsls	r1, r3, #2
 8018d70:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8018d74:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8018d78:	45e6      	cmp	lr, ip
 8018d7a:	d203      	bcs.n	8018d84 <rcutils_string_map_reserve+0x80>
 8018d7c:	eb02 0c07 	add.w	ip, r2, r7
 8018d80:	4566      	cmp	r6, ip
 8018d82:	d322      	bcc.n	8018dca <rcutils_string_map_reserve+0xc6>
 8018d84:	1ae3      	subs	r3, r4, r3
 8018d86:	4670      	mov	r0, lr
 8018d88:	2100      	movs	r1, #0
 8018d8a:	009a      	lsls	r2, r3, #2
 8018d8c:	9201      	str	r2, [sp, #4]
 8018d8e:	f008 f915 	bl	8020fbc <memset>
 8018d92:	9a01      	ldr	r2, [sp, #4]
 8018d94:	2100      	movs	r1, #0
 8018d96:	4630      	mov	r0, r6
 8018d98:	f008 f910 	bl	8020fbc <memset>
 8018d9c:	e00a      	b.n	8018db4 <rcutils_string_map_reserve+0xb0>
 8018d9e:	694f      	ldr	r7, [r1, #20]
 8018da0:	6808      	ldr	r0, [r1, #0]
 8018da2:	4631      	mov	r1, r6
 8018da4:	47b8      	blx	r7
 8018da6:	682b      	ldr	r3, [r5, #0]
 8018da8:	4631      	mov	r1, r6
 8018daa:	6858      	ldr	r0, [r3, #4]
 8018dac:	601c      	str	r4, [r3, #0]
 8018dae:	47b8      	blx	r7
 8018db0:	682d      	ldr	r5, [r5, #0]
 8018db2:	606c      	str	r4, [r5, #4]
 8018db4:	2000      	movs	r0, #0
 8018db6:	60ac      	str	r4, [r5, #8]
 8018db8:	b002      	add	sp, #8
 8018dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dbe:	2000      	movs	r0, #0
 8018dc0:	e7b0      	b.n	8018d24 <rcutils_string_map_reserve+0x20>
 8018dc2:	200a      	movs	r0, #10
 8018dc4:	e7ae      	b.n	8018d24 <rcutils_string_map_reserve+0x20>
 8018dc6:	200b      	movs	r0, #11
 8018dc8:	4770      	bx	lr
 8018dca:	1f0b      	subs	r3, r1, #4
 8018dcc:	4418      	add	r0, r3
 8018dce:	4413      	add	r3, r2
 8018dd0:	3a04      	subs	r2, #4
 8018dd2:	4417      	add	r7, r2
 8018dd4:	2200      	movs	r2, #0
 8018dd6:	f843 2f04 	str.w	r2, [r3, #4]!
 8018dda:	42bb      	cmp	r3, r7
 8018ddc:	f840 2f04 	str.w	r2, [r0, #4]!
 8018de0:	d1f9      	bne.n	8018dd6 <rcutils_string_map_reserve+0xd2>
 8018de2:	e7e7      	b.n	8018db4 <rcutils_string_map_reserve+0xb0>

08018de4 <rcutils_string_map_init>:
 8018de4:	b082      	sub	sp, #8
 8018de6:	b570      	push	{r4, r5, r6, lr}
 8018de8:	ac04      	add	r4, sp, #16
 8018dea:	e884 000c 	stmia.w	r4, {r2, r3}
 8018dee:	b380      	cbz	r0, 8018e52 <rcutils_string_map_init+0x6e>
 8018df0:	6806      	ldr	r6, [r0, #0]
 8018df2:	4604      	mov	r4, r0
 8018df4:	b12e      	cbz	r6, 8018e02 <rcutils_string_map_init+0x1e>
 8018df6:	251e      	movs	r5, #30
 8018df8:	4628      	mov	r0, r5
 8018dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018dfe:	b002      	add	sp, #8
 8018e00:	4770      	bx	lr
 8018e02:	a804      	add	r0, sp, #16
 8018e04:	460d      	mov	r5, r1
 8018e06:	f7fb ff75 	bl	8014cf4 <rcutils_allocator_is_valid>
 8018e0a:	b310      	cbz	r0, 8018e52 <rcutils_string_map_init+0x6e>
 8018e0c:	9b04      	ldr	r3, [sp, #16]
 8018e0e:	2024      	movs	r0, #36	@ 0x24
 8018e10:	9908      	ldr	r1, [sp, #32]
 8018e12:	4798      	blx	r3
 8018e14:	6020      	str	r0, [r4, #0]
 8018e16:	b310      	cbz	r0, 8018e5e <rcutils_string_map_init+0x7a>
 8018e18:	f10d 0e10 	add.w	lr, sp, #16
 8018e1c:	f100 0c10 	add.w	ip, r0, #16
 8018e20:	e9c0 6600 	strd	r6, r6, [r0]
 8018e24:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8018e28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018e2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e30:	f8de 3000 	ldr.w	r3, [lr]
 8018e34:	4629      	mov	r1, r5
 8018e36:	4620      	mov	r0, r4
 8018e38:	f8cc 3000 	str.w	r3, [ip]
 8018e3c:	f7ff ff62 	bl	8018d04 <rcutils_string_map_reserve>
 8018e40:	4605      	mov	r5, r0
 8018e42:	2800      	cmp	r0, #0
 8018e44:	d0d8      	beq.n	8018df8 <rcutils_string_map_init+0x14>
 8018e46:	9b05      	ldr	r3, [sp, #20]
 8018e48:	9908      	ldr	r1, [sp, #32]
 8018e4a:	6820      	ldr	r0, [r4, #0]
 8018e4c:	4798      	blx	r3
 8018e4e:	6026      	str	r6, [r4, #0]
 8018e50:	e7d2      	b.n	8018df8 <rcutils_string_map_init+0x14>
 8018e52:	250b      	movs	r5, #11
 8018e54:	4628      	mov	r0, r5
 8018e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e5a:	b002      	add	sp, #8
 8018e5c:	4770      	bx	lr
 8018e5e:	250a      	movs	r5, #10
 8018e60:	e7ca      	b.n	8018df8 <rcutils_string_map_init+0x14>
 8018e62:	bf00      	nop

08018e64 <rcutils_string_map_fini>:
 8018e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e68:	b082      	sub	sp, #8
 8018e6a:	2800      	cmp	r0, #0
 8018e6c:	d03a      	beq.n	8018ee4 <rcutils_string_map_fini+0x80>
 8018e6e:	6804      	ldr	r4, [r0, #0]
 8018e70:	4606      	mov	r6, r0
 8018e72:	2c00      	cmp	r4, #0
 8018e74:	d032      	beq.n	8018edc <rcutils_string_map_fini+0x78>
 8018e76:	68a3      	ldr	r3, [r4, #8]
 8018e78:	b32b      	cbz	r3, 8018ec6 <rcutils_string_map_fini+0x62>
 8018e7a:	2500      	movs	r5, #0
 8018e7c:	6822      	ldr	r2, [r4, #0]
 8018e7e:	462f      	mov	r7, r5
 8018e80:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018e84:	b1e0      	cbz	r0, 8018ec0 <rcutils_string_map_fini+0x5c>
 8018e86:	6a21      	ldr	r1, [r4, #32]
 8018e88:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8018e8c:	9101      	str	r1, [sp, #4]
 8018e8e:	47c0      	blx	r8
 8018e90:	9901      	ldr	r1, [sp, #4]
 8018e92:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018e96:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8018e9a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018e9e:	47c0      	blx	r8
 8018ea0:	68e3      	ldr	r3, [r4, #12]
 8018ea2:	6862      	ldr	r2, [r4, #4]
 8018ea4:	3b01      	subs	r3, #1
 8018ea6:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018eaa:	3501      	adds	r5, #1
 8018eac:	60e3      	str	r3, [r4, #12]
 8018eae:	6834      	ldr	r4, [r6, #0]
 8018eb0:	68a3      	ldr	r3, [r4, #8]
 8018eb2:	429d      	cmp	r5, r3
 8018eb4:	d207      	bcs.n	8018ec6 <rcutils_string_map_fini+0x62>
 8018eb6:	6822      	ldr	r2, [r4, #0]
 8018eb8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018ebc:	2800      	cmp	r0, #0
 8018ebe:	d1e2      	bne.n	8018e86 <rcutils_string_map_fini+0x22>
 8018ec0:	3501      	adds	r5, #1
 8018ec2:	429d      	cmp	r5, r3
 8018ec4:	d3dc      	bcc.n	8018e80 <rcutils_string_map_fini+0x1c>
 8018ec6:	2100      	movs	r1, #0
 8018ec8:	4630      	mov	r0, r6
 8018eca:	f7ff ff1b 	bl	8018d04 <rcutils_string_map_reserve>
 8018ece:	4604      	mov	r4, r0
 8018ed0:	b920      	cbnz	r0, 8018edc <rcutils_string_map_fini+0x78>
 8018ed2:	6830      	ldr	r0, [r6, #0]
 8018ed4:	6943      	ldr	r3, [r0, #20]
 8018ed6:	6a01      	ldr	r1, [r0, #32]
 8018ed8:	4798      	blx	r3
 8018eda:	6034      	str	r4, [r6, #0]
 8018edc:	4620      	mov	r0, r4
 8018ede:	b002      	add	sp, #8
 8018ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ee4:	240b      	movs	r4, #11
 8018ee6:	4620      	mov	r0, r4
 8018ee8:	b002      	add	sp, #8
 8018eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018eee:	bf00      	nop

08018ef0 <rcutils_string_map_getn>:
 8018ef0:	b378      	cbz	r0, 8018f52 <rcutils_string_map_getn+0x62>
 8018ef2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ef6:	f8d0 b000 	ldr.w	fp, [r0]
 8018efa:	f1bb 0f00 	cmp.w	fp, #0
 8018efe:	d01f      	beq.n	8018f40 <rcutils_string_map_getn+0x50>
 8018f00:	fab1 f481 	clz	r4, r1
 8018f04:	4688      	mov	r8, r1
 8018f06:	0964      	lsrs	r4, r4, #5
 8018f08:	b1d1      	cbz	r1, 8018f40 <rcutils_string_map_getn+0x50>
 8018f0a:	f8db 7008 	ldr.w	r7, [fp, #8]
 8018f0e:	f8db 6000 	ldr.w	r6, [fp]
 8018f12:	b1af      	cbz	r7, 8018f40 <rcutils_string_map_getn+0x50>
 8018f14:	4691      	mov	r9, r2
 8018f16:	3e04      	subs	r6, #4
 8018f18:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8018f1c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8018f20:	3401      	adds	r4, #1
 8018f22:	4628      	mov	r0, r5
 8018f24:	b155      	cbz	r5, 8018f3c <rcutils_string_map_getn+0x4c>
 8018f26:	f7e7 f9e5 	bl	80002f4 <strlen>
 8018f2a:	4602      	mov	r2, r0
 8018f2c:	4629      	mov	r1, r5
 8018f2e:	4640      	mov	r0, r8
 8018f30:	454a      	cmp	r2, r9
 8018f32:	bf38      	it	cc
 8018f34:	464a      	movcc	r2, r9
 8018f36:	f008 f856 	bl	8020fe6 <strncmp>
 8018f3a:	b120      	cbz	r0, 8018f46 <rcutils_string_map_getn+0x56>
 8018f3c:	42a7      	cmp	r7, r4
 8018f3e:	d1eb      	bne.n	8018f18 <rcutils_string_map_getn+0x28>
 8018f40:	2000      	movs	r0, #0
 8018f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f46:	f8db 3004 	ldr.w	r3, [fp, #4]
 8018f4a:	f853 000a 	ldr.w	r0, [r3, sl]
 8018f4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f52:	4770      	bx	lr
 8018f54:	0000      	movs	r0, r0
	...

08018f58 <rmw_get_zero_initialized_context>:
 8018f58:	b510      	push	{r4, lr}
 8018f5a:	4604      	mov	r4, r0
 8018f5c:	3010      	adds	r0, #16
 8018f5e:	f000 f80f 	bl	8018f80 <rmw_get_zero_initialized_init_options>
 8018f62:	2300      	movs	r3, #0
 8018f64:	4620      	mov	r0, r4
 8018f66:	60a3      	str	r3, [r4, #8]
 8018f68:	64a3      	str	r3, [r4, #72]	@ 0x48
 8018f6a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8018f6c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8018f78 <rmw_get_zero_initialized_context+0x20>
 8018f70:	ed84 7b00 	vstr	d7, [r4]
 8018f74:	bd10      	pop	{r4, pc}
 8018f76:	bf00      	nop
	...

08018f80 <rmw_get_zero_initialized_init_options>:
 8018f80:	b510      	push	{r4, lr}
 8018f82:	4604      	mov	r4, r0
 8018f84:	2238      	movs	r2, #56	@ 0x38
 8018f86:	2100      	movs	r1, #0
 8018f88:	f008 f818 	bl	8020fbc <memset>
 8018f8c:	f104 0010 	add.w	r0, r4, #16
 8018f90:	f000 f80a 	bl	8018fa8 <rmw_get_default_security_options>
 8018f94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018f98:	4620      	mov	r0, r4
 8018f9a:	60e3      	str	r3, [r4, #12]
 8018f9c:	bd10      	pop	{r4, pc}
 8018f9e:	bf00      	nop

08018fa0 <rmw_get_default_publisher_options>:
 8018fa0:	2200      	movs	r2, #0
 8018fa2:	6002      	str	r2, [r0, #0]
 8018fa4:	7102      	strb	r2, [r0, #4]
 8018fa6:	4770      	bx	lr

08018fa8 <rmw_get_default_security_options>:
 8018fa8:	2200      	movs	r2, #0
 8018faa:	7002      	strb	r2, [r0, #0]
 8018fac:	6042      	str	r2, [r0, #4]
 8018fae:	4770      	bx	lr

08018fb0 <rmw_subscription_content_filter_options_fini>:
 8018fb0:	b1b0      	cbz	r0, 8018fe0 <rmw_subscription_content_filter_options_fini+0x30>
 8018fb2:	b538      	push	{r3, r4, r5, lr}
 8018fb4:	4604      	mov	r4, r0
 8018fb6:	4608      	mov	r0, r1
 8018fb8:	460d      	mov	r5, r1
 8018fba:	f7fb fe9b 	bl	8014cf4 <rcutils_allocator_is_valid>
 8018fbe:	b168      	cbz	r0, 8018fdc <rmw_subscription_content_filter_options_fini+0x2c>
 8018fc0:	6820      	ldr	r0, [r4, #0]
 8018fc2:	b120      	cbz	r0, 8018fce <rmw_subscription_content_filter_options_fini+0x1e>
 8018fc4:	686b      	ldr	r3, [r5, #4]
 8018fc6:	6929      	ldr	r1, [r5, #16]
 8018fc8:	4798      	blx	r3
 8018fca:	2300      	movs	r3, #0
 8018fcc:	6023      	str	r3, [r4, #0]
 8018fce:	1d20      	adds	r0, r4, #4
 8018fd0:	f006 fac8 	bl	801f564 <rcutils_string_array_fini>
 8018fd4:	3800      	subs	r0, #0
 8018fd6:	bf18      	it	ne
 8018fd8:	2001      	movne	r0, #1
 8018fda:	bd38      	pop	{r3, r4, r5, pc}
 8018fdc:	200b      	movs	r0, #11
 8018fde:	bd38      	pop	{r3, r4, r5, pc}
 8018fe0:	200b      	movs	r0, #11
 8018fe2:	4770      	bx	lr

08018fe4 <rmw_get_default_subscription_options>:
 8018fe4:	2200      	movs	r2, #0
 8018fe6:	e9c0 2200 	strd	r2, r2, [r0]
 8018fea:	6082      	str	r2, [r0, #8]
 8018fec:	4770      	bx	lr
 8018fee:	bf00      	nop

08018ff0 <rmw_get_zero_initialized_message_info>:
 8018ff0:	b510      	push	{r4, lr}
 8018ff2:	4604      	mov	r4, r0
 8018ff4:	2240      	movs	r2, #64	@ 0x40
 8018ff6:	2100      	movs	r1, #0
 8018ff8:	f007 ffe0 	bl	8020fbc <memset>
 8018ffc:	4620      	mov	r0, r4
 8018ffe:	bd10      	pop	{r4, pc}

08019000 <rmw_validate_full_topic_name>:
 8019000:	2800      	cmp	r0, #0
 8019002:	d05d      	beq.n	80190c0 <rmw_validate_full_topic_name+0xc0>
 8019004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019008:	460d      	mov	r5, r1
 801900a:	2900      	cmp	r1, #0
 801900c:	d05a      	beq.n	80190c4 <rmw_validate_full_topic_name+0xc4>
 801900e:	4604      	mov	r4, r0
 8019010:	4616      	mov	r6, r2
 8019012:	f7e7 f96f 	bl	80002f4 <strlen>
 8019016:	b150      	cbz	r0, 801902e <rmw_validate_full_topic_name+0x2e>
 8019018:	7823      	ldrb	r3, [r4, #0]
 801901a:	2b2f      	cmp	r3, #47	@ 0x2f
 801901c:	d00e      	beq.n	801903c <rmw_validate_full_topic_name+0x3c>
 801901e:	2302      	movs	r3, #2
 8019020:	602b      	str	r3, [r5, #0]
 8019022:	b146      	cbz	r6, 8019036 <rmw_validate_full_topic_name+0x36>
 8019024:	2300      	movs	r3, #0
 8019026:	4618      	mov	r0, r3
 8019028:	6033      	str	r3, [r6, #0]
 801902a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801902e:	2301      	movs	r3, #1
 8019030:	602b      	str	r3, [r5, #0]
 8019032:	2e00      	cmp	r6, #0
 8019034:	d1f6      	bne.n	8019024 <rmw_validate_full_topic_name+0x24>
 8019036:	2000      	movs	r0, #0
 8019038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801903c:	1e43      	subs	r3, r0, #1
 801903e:	5ce2      	ldrb	r2, [r4, r3]
 8019040:	2a2f      	cmp	r2, #47	@ 0x2f
 8019042:	d041      	beq.n	80190c8 <rmw_validate_full_topic_name+0xc8>
 8019044:	1e62      	subs	r2, r4, #1
 8019046:	f1c4 0e01 	rsb	lr, r4, #1
 801904a:	eb02 0800 	add.w	r8, r2, r0
 801904e:	eb0e 0702 	add.w	r7, lr, r2
 8019052:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8019056:	f023 0120 	bic.w	r1, r3, #32
 801905a:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801905e:	3941      	subs	r1, #65	@ 0x41
 8019060:	2919      	cmp	r1, #25
 8019062:	d90f      	bls.n	8019084 <rmw_validate_full_topic_name+0x84>
 8019064:	f1bc 0f0a 	cmp.w	ip, #10
 8019068:	d90c      	bls.n	8019084 <rmw_validate_full_topic_name+0x84>
 801906a:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801906e:	fab3 f383 	clz	r3, r3
 8019072:	095b      	lsrs	r3, r3, #5
 8019074:	b933      	cbnz	r3, 8019084 <rmw_validate_full_topic_name+0x84>
 8019076:	2204      	movs	r2, #4
 8019078:	602a      	str	r2, [r5, #0]
 801907a:	2e00      	cmp	r6, #0
 801907c:	d0db      	beq.n	8019036 <rmw_validate_full_topic_name+0x36>
 801907e:	4618      	mov	r0, r3
 8019080:	6037      	str	r7, [r6, #0]
 8019082:	e7d2      	b.n	801902a <rmw_validate_full_topic_name+0x2a>
 8019084:	4542      	cmp	r2, r8
 8019086:	d1e2      	bne.n	801904e <rmw_validate_full_topic_name+0x4e>
 8019088:	2301      	movs	r3, #1
 801908a:	4f1a      	ldr	r7, [pc, #104]	@ (80190f4 <rmw_validate_full_topic_name+0xf4>)
 801908c:	e004      	b.n	8019098 <rmw_validate_full_topic_name+0x98>
 801908e:	4298      	cmp	r0, r3
 8019090:	f104 0401 	add.w	r4, r4, #1
 8019094:	4613      	mov	r3, r2
 8019096:	d91c      	bls.n	80190d2 <rmw_validate_full_topic_name+0xd2>
 8019098:	4298      	cmp	r0, r3
 801909a:	f103 0201 	add.w	r2, r3, #1
 801909e:	d0f6      	beq.n	801908e <rmw_validate_full_topic_name+0x8e>
 80190a0:	7821      	ldrb	r1, [r4, #0]
 80190a2:	292f      	cmp	r1, #47	@ 0x2f
 80190a4:	d1f3      	bne.n	801908e <rmw_validate_full_topic_name+0x8e>
 80190a6:	7861      	ldrb	r1, [r4, #1]
 80190a8:	292f      	cmp	r1, #47	@ 0x2f
 80190aa:	d01e      	beq.n	80190ea <rmw_validate_full_topic_name+0xea>
 80190ac:	5dc9      	ldrb	r1, [r1, r7]
 80190ae:	0749      	lsls	r1, r1, #29
 80190b0:	d5ed      	bpl.n	801908e <rmw_validate_full_topic_name+0x8e>
 80190b2:	2206      	movs	r2, #6
 80190b4:	602a      	str	r2, [r5, #0]
 80190b6:	2e00      	cmp	r6, #0
 80190b8:	d0bd      	beq.n	8019036 <rmw_validate_full_topic_name+0x36>
 80190ba:	2000      	movs	r0, #0
 80190bc:	6033      	str	r3, [r6, #0]
 80190be:	e7b4      	b.n	801902a <rmw_validate_full_topic_name+0x2a>
 80190c0:	200b      	movs	r0, #11
 80190c2:	4770      	bx	lr
 80190c4:	200b      	movs	r0, #11
 80190c6:	e7b0      	b.n	801902a <rmw_validate_full_topic_name+0x2a>
 80190c8:	2203      	movs	r2, #3
 80190ca:	602a      	str	r2, [r5, #0]
 80190cc:	2e00      	cmp	r6, #0
 80190ce:	d1f4      	bne.n	80190ba <rmw_validate_full_topic_name+0xba>
 80190d0:	e7b1      	b.n	8019036 <rmw_validate_full_topic_name+0x36>
 80190d2:	28f7      	cmp	r0, #247	@ 0xf7
 80190d4:	d803      	bhi.n	80190de <rmw_validate_full_topic_name+0xde>
 80190d6:	2300      	movs	r3, #0
 80190d8:	4618      	mov	r0, r3
 80190da:	602b      	str	r3, [r5, #0]
 80190dc:	e7a5      	b.n	801902a <rmw_validate_full_topic_name+0x2a>
 80190de:	2307      	movs	r3, #7
 80190e0:	602b      	str	r3, [r5, #0]
 80190e2:	2e00      	cmp	r6, #0
 80190e4:	d0a7      	beq.n	8019036 <rmw_validate_full_topic_name+0x36>
 80190e6:	23f6      	movs	r3, #246	@ 0xf6
 80190e8:	e7e7      	b.n	80190ba <rmw_validate_full_topic_name+0xba>
 80190ea:	2205      	movs	r2, #5
 80190ec:	602a      	str	r2, [r5, #0]
 80190ee:	2e00      	cmp	r6, #0
 80190f0:	d1e3      	bne.n	80190ba <rmw_validate_full_topic_name+0xba>
 80190f2:	e7a0      	b.n	8019036 <rmw_validate_full_topic_name+0x36>
 80190f4:	08024666 	.word	0x08024666

080190f8 <rmw_validate_namespace_with_size>:
 80190f8:	2800      	cmp	r0, #0
 80190fa:	d043      	beq.n	8019184 <rmw_validate_namespace_with_size+0x8c>
 80190fc:	b570      	push	{r4, r5, r6, lr}
 80190fe:	4614      	mov	r4, r2
 8019100:	b0c2      	sub	sp, #264	@ 0x108
 8019102:	b32a      	cbz	r2, 8019150 <rmw_validate_namespace_with_size+0x58>
 8019104:	2901      	cmp	r1, #1
 8019106:	460d      	mov	r5, r1
 8019108:	461e      	mov	r6, r3
 801910a:	d102      	bne.n	8019112 <rmw_validate_namespace_with_size+0x1a>
 801910c:	7803      	ldrb	r3, [r0, #0]
 801910e:	2b2f      	cmp	r3, #47	@ 0x2f
 8019110:	d012      	beq.n	8019138 <rmw_validate_namespace_with_size+0x40>
 8019112:	aa01      	add	r2, sp, #4
 8019114:	4669      	mov	r1, sp
 8019116:	f7ff ff73 	bl	8019000 <rmw_validate_full_topic_name>
 801911a:	b980      	cbnz	r0, 801913e <rmw_validate_namespace_with_size+0x46>
 801911c:	9a00      	ldr	r2, [sp, #0]
 801911e:	b14a      	cbz	r2, 8019134 <rmw_validate_namespace_with_size+0x3c>
 8019120:	2a07      	cmp	r2, #7
 8019122:	d007      	beq.n	8019134 <rmw_validate_namespace_with_size+0x3c>
 8019124:	1e53      	subs	r3, r2, #1
 8019126:	2b05      	cmp	r3, #5
 8019128:	d82e      	bhi.n	8019188 <rmw_validate_namespace_with_size+0x90>
 801912a:	e8df f003 	tbb	[pc, r3]
 801912e:	1f1c      	.short	0x1f1c
 8019130:	14282522 	.word	0x14282522
 8019134:	2df5      	cmp	r5, #245	@ 0xf5
 8019136:	d804      	bhi.n	8019142 <rmw_validate_namespace_with_size+0x4a>
 8019138:	2300      	movs	r3, #0
 801913a:	4618      	mov	r0, r3
 801913c:	6023      	str	r3, [r4, #0]
 801913e:	b042      	add	sp, #264	@ 0x108
 8019140:	bd70      	pop	{r4, r5, r6, pc}
 8019142:	2307      	movs	r3, #7
 8019144:	6023      	str	r3, [r4, #0]
 8019146:	2e00      	cmp	r6, #0
 8019148:	d0f9      	beq.n	801913e <rmw_validate_namespace_with_size+0x46>
 801914a:	23f4      	movs	r3, #244	@ 0xf4
 801914c:	6033      	str	r3, [r6, #0]
 801914e:	e7f6      	b.n	801913e <rmw_validate_namespace_with_size+0x46>
 8019150:	200b      	movs	r0, #11
 8019152:	b042      	add	sp, #264	@ 0x108
 8019154:	bd70      	pop	{r4, r5, r6, pc}
 8019156:	2306      	movs	r3, #6
 8019158:	6023      	str	r3, [r4, #0]
 801915a:	2e00      	cmp	r6, #0
 801915c:	d0ef      	beq.n	801913e <rmw_validate_namespace_with_size+0x46>
 801915e:	9b01      	ldr	r3, [sp, #4]
 8019160:	6033      	str	r3, [r6, #0]
 8019162:	b042      	add	sp, #264	@ 0x108
 8019164:	bd70      	pop	{r4, r5, r6, pc}
 8019166:	2301      	movs	r3, #1
 8019168:	6023      	str	r3, [r4, #0]
 801916a:	e7f6      	b.n	801915a <rmw_validate_namespace_with_size+0x62>
 801916c:	2302      	movs	r3, #2
 801916e:	6023      	str	r3, [r4, #0]
 8019170:	e7f3      	b.n	801915a <rmw_validate_namespace_with_size+0x62>
 8019172:	2303      	movs	r3, #3
 8019174:	6023      	str	r3, [r4, #0]
 8019176:	e7f0      	b.n	801915a <rmw_validate_namespace_with_size+0x62>
 8019178:	2304      	movs	r3, #4
 801917a:	6023      	str	r3, [r4, #0]
 801917c:	e7ed      	b.n	801915a <rmw_validate_namespace_with_size+0x62>
 801917e:	2305      	movs	r3, #5
 8019180:	6023      	str	r3, [r4, #0]
 8019182:	e7ea      	b.n	801915a <rmw_validate_namespace_with_size+0x62>
 8019184:	200b      	movs	r0, #11
 8019186:	4770      	bx	lr
 8019188:	4613      	mov	r3, r2
 801918a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801918e:	4a03      	ldr	r2, [pc, #12]	@ (801919c <rmw_validate_namespace_with_size+0xa4>)
 8019190:	a802      	add	r0, sp, #8
 8019192:	f7ff fd25 	bl	8018be0 <rcutils_snprintf>
 8019196:	2001      	movs	r0, #1
 8019198:	e7d1      	b.n	801913e <rmw_validate_namespace_with_size+0x46>
 801919a:	bf00      	nop
 801919c:	08023eac 	.word	0x08023eac

080191a0 <rmw_validate_namespace>:
 80191a0:	b168      	cbz	r0, 80191be <rmw_validate_namespace+0x1e>
 80191a2:	b570      	push	{r4, r5, r6, lr}
 80191a4:	460d      	mov	r5, r1
 80191a6:	4616      	mov	r6, r2
 80191a8:	4604      	mov	r4, r0
 80191aa:	f7e7 f8a3 	bl	80002f4 <strlen>
 80191ae:	4633      	mov	r3, r6
 80191b0:	4601      	mov	r1, r0
 80191b2:	462a      	mov	r2, r5
 80191b4:	4620      	mov	r0, r4
 80191b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80191ba:	f7ff bf9d 	b.w	80190f8 <rmw_validate_namespace_with_size>
 80191be:	200b      	movs	r0, #11
 80191c0:	4770      	bx	lr
 80191c2:	bf00      	nop

080191c4 <rmw_namespace_validation_result_string>:
 80191c4:	2807      	cmp	r0, #7
 80191c6:	d803      	bhi.n	80191d0 <rmw_namespace_validation_result_string+0xc>
 80191c8:	4b02      	ldr	r3, [pc, #8]	@ (80191d4 <rmw_namespace_validation_result_string+0x10>)
 80191ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80191ce:	4770      	bx	lr
 80191d0:	4801      	ldr	r0, [pc, #4]	@ (80191d8 <rmw_namespace_validation_result_string+0x14>)
 80191d2:	4770      	bx	lr
 80191d4:	080240a4 	.word	0x080240a4
 80191d8:	08023efc 	.word	0x08023efc

080191dc <rmw_validate_node_name>:
 80191dc:	2800      	cmp	r0, #0
 80191de:	d042      	beq.n	8019266 <rmw_validate_node_name+0x8a>
 80191e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191e4:	460d      	mov	r5, r1
 80191e6:	2900      	cmp	r1, #0
 80191e8:	d03f      	beq.n	801926a <rmw_validate_node_name+0x8e>
 80191ea:	4604      	mov	r4, r0
 80191ec:	4616      	mov	r6, r2
 80191ee:	f7e7 f881 	bl	80002f4 <strlen>
 80191f2:	b310      	cbz	r0, 801923a <rmw_validate_node_name+0x5e>
 80191f4:	1e63      	subs	r3, r4, #1
 80191f6:	f1c4 0101 	rsb	r1, r4, #1
 80191fa:	eb03 0800 	add.w	r8, r3, r0
 80191fe:	18cf      	adds	r7, r1, r3
 8019200:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8019204:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8019208:	f02e 0c20 	bic.w	ip, lr, #32
 801920c:	2a09      	cmp	r2, #9
 801920e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8019212:	d905      	bls.n	8019220 <rmw_validate_node_name+0x44>
 8019214:	f1bc 0f19 	cmp.w	ip, #25
 8019218:	d902      	bls.n	8019220 <rmw_validate_node_name+0x44>
 801921a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801921e:	d114      	bne.n	801924a <rmw_validate_node_name+0x6e>
 8019220:	4598      	cmp	r8, r3
 8019222:	d1ec      	bne.n	80191fe <rmw_validate_node_name+0x22>
 8019224:	7822      	ldrb	r2, [r4, #0]
 8019226:	4b16      	ldr	r3, [pc, #88]	@ (8019280 <rmw_validate_node_name+0xa4>)
 8019228:	5cd3      	ldrb	r3, [r2, r3]
 801922a:	f013 0304 	ands.w	r3, r3, #4
 801922e:	d113      	bne.n	8019258 <rmw_validate_node_name+0x7c>
 8019230:	28ff      	cmp	r0, #255	@ 0xff
 8019232:	d81c      	bhi.n	801926e <rmw_validate_node_name+0x92>
 8019234:	4618      	mov	r0, r3
 8019236:	602b      	str	r3, [r5, #0]
 8019238:	e00c      	b.n	8019254 <rmw_validate_node_name+0x78>
 801923a:	2301      	movs	r3, #1
 801923c:	602b      	str	r3, [r5, #0]
 801923e:	b17e      	cbz	r6, 8019260 <rmw_validate_node_name+0x84>
 8019240:	2300      	movs	r3, #0
 8019242:	4618      	mov	r0, r3
 8019244:	6033      	str	r3, [r6, #0]
 8019246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801924a:	2302      	movs	r3, #2
 801924c:	602b      	str	r3, [r5, #0]
 801924e:	b13e      	cbz	r6, 8019260 <rmw_validate_node_name+0x84>
 8019250:	2000      	movs	r0, #0
 8019252:	6037      	str	r7, [r6, #0]
 8019254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019258:	2303      	movs	r3, #3
 801925a:	602b      	str	r3, [r5, #0]
 801925c:	2e00      	cmp	r6, #0
 801925e:	d1ef      	bne.n	8019240 <rmw_validate_node_name+0x64>
 8019260:	2000      	movs	r0, #0
 8019262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019266:	200b      	movs	r0, #11
 8019268:	4770      	bx	lr
 801926a:	200b      	movs	r0, #11
 801926c:	e7f2      	b.n	8019254 <rmw_validate_node_name+0x78>
 801926e:	2204      	movs	r2, #4
 8019270:	602a      	str	r2, [r5, #0]
 8019272:	2e00      	cmp	r6, #0
 8019274:	d0f4      	beq.n	8019260 <rmw_validate_node_name+0x84>
 8019276:	22fe      	movs	r2, #254	@ 0xfe
 8019278:	4618      	mov	r0, r3
 801927a:	6032      	str	r2, [r6, #0]
 801927c:	e7ea      	b.n	8019254 <rmw_validate_node_name+0x78>
 801927e:	bf00      	nop
 8019280:	08024666 	.word	0x08024666

08019284 <rmw_node_name_validation_result_string>:
 8019284:	2804      	cmp	r0, #4
 8019286:	d803      	bhi.n	8019290 <rmw_node_name_validation_result_string+0xc>
 8019288:	4b02      	ldr	r3, [pc, #8]	@ (8019294 <rmw_node_name_validation_result_string+0x10>)
 801928a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801928e:	4770      	bx	lr
 8019290:	4801      	ldr	r0, [pc, #4]	@ (8019298 <rmw_node_name_validation_result_string+0x14>)
 8019292:	4770      	bx	lr
 8019294:	080241b0 	.word	0x080241b0
 8019298:	080240c4 	.word	0x080240c4

0801929c <rmw_destroy_client>:
 801929c:	b570      	push	{r4, r5, r6, lr}
 801929e:	b128      	cbz	r0, 80192ac <rmw_destroy_client+0x10>
 80192a0:	4604      	mov	r4, r0
 80192a2:	6800      	ldr	r0, [r0, #0]
 80192a4:	460d      	mov	r5, r1
 80192a6:	f001 feef 	bl	801b088 <is_uxrce_rmw_identifier_valid>
 80192aa:	b910      	cbnz	r0, 80192b2 <rmw_destroy_client+0x16>
 80192ac:	2401      	movs	r4, #1
 80192ae:	4620      	mov	r0, r4
 80192b0:	bd70      	pop	{r4, r5, r6, pc}
 80192b2:	6863      	ldr	r3, [r4, #4]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d0f9      	beq.n	80192ac <rmw_destroy_client+0x10>
 80192b8:	2d00      	cmp	r5, #0
 80192ba:	d0f7      	beq.n	80192ac <rmw_destroy_client+0x10>
 80192bc:	6828      	ldr	r0, [r5, #0]
 80192be:	f001 fee3 	bl	801b088 <is_uxrce_rmw_identifier_valid>
 80192c2:	2800      	cmp	r0, #0
 80192c4:	d0f2      	beq.n	80192ac <rmw_destroy_client+0x10>
 80192c6:	686e      	ldr	r6, [r5, #4]
 80192c8:	2e00      	cmp	r6, #0
 80192ca:	d0ef      	beq.n	80192ac <rmw_destroy_client+0x10>
 80192cc:	6864      	ldr	r4, [r4, #4]
 80192ce:	6932      	ldr	r2, [r6, #16]
 80192d0:	6920      	ldr	r0, [r4, #16]
 80192d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80192d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80192da:	6819      	ldr	r1, [r3, #0]
 80192dc:	f002 fd70 	bl	801bdc0 <uxr_buffer_cancel_data>
 80192e0:	4602      	mov	r2, r0
 80192e2:	6920      	ldr	r0, [r4, #16]
 80192e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80192e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80192ec:	f001 fdba 	bl	801ae64 <run_xrce_session>
 80192f0:	6920      	ldr	r0, [r4, #16]
 80192f2:	6932      	ldr	r2, [r6, #16]
 80192f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80192f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80192fc:	6819      	ldr	r1, [r3, #0]
 80192fe:	f002 f9fb 	bl	801b6f8 <uxr_buffer_delete_entity>
 8019302:	4602      	mov	r2, r0
 8019304:	6920      	ldr	r0, [r4, #16]
 8019306:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801930a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801930e:	f001 fda9 	bl	801ae64 <run_xrce_session>
 8019312:	4603      	mov	r3, r0
 8019314:	4628      	mov	r0, r5
 8019316:	2b00      	cmp	r3, #0
 8019318:	bf14      	ite	ne
 801931a:	2400      	movne	r4, #0
 801931c:	2402      	moveq	r4, #2
 801931e:	f001 fc7f 	bl	801ac20 <rmw_uxrce_fini_client_memory>
 8019322:	e7c4      	b.n	80192ae <rmw_destroy_client+0x12>

08019324 <rmw_get_implementation_identifier>:
 8019324:	4b01      	ldr	r3, [pc, #4]	@ (801932c <rmw_get_implementation_identifier+0x8>)
 8019326:	6818      	ldr	r0, [r3, #0]
 8019328:	4770      	bx	lr
 801932a:	bf00      	nop
 801932c:	08024500 	.word	0x08024500

08019330 <rmw_init_options_init>:
 8019330:	b084      	sub	sp, #16
 8019332:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019334:	b083      	sub	sp, #12
 8019336:	ad09      	add	r5, sp, #36	@ 0x24
 8019338:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801933c:	b130      	cbz	r0, 801934c <rmw_init_options_init+0x1c>
 801933e:	4604      	mov	r4, r0
 8019340:	4628      	mov	r0, r5
 8019342:	f7fb fcd7 	bl	8014cf4 <rcutils_allocator_is_valid>
 8019346:	b108      	cbz	r0, 801934c <rmw_init_options_init+0x1c>
 8019348:	68a6      	ldr	r6, [r4, #8]
 801934a:	b12e      	cbz	r6, 8019358 <rmw_init_options_init+0x28>
 801934c:	200b      	movs	r0, #11
 801934e:	b003      	add	sp, #12
 8019350:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019354:	b004      	add	sp, #16
 8019356:	4770      	bx	lr
 8019358:	2200      	movs	r2, #0
 801935a:	2300      	movs	r3, #0
 801935c:	f104 0c20 	add.w	ip, r4, #32
 8019360:	f8df e098 	ldr.w	lr, [pc, #152]	@ 80193fc <rmw_init_options_init+0xcc>
 8019364:	466f      	mov	r7, sp
 8019366:	e9c4 2300 	strd	r2, r3, [r4]
 801936a:	4b20      	ldr	r3, [pc, #128]	@ (80193ec <rmw_init_options_init+0xbc>)
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	60a3      	str	r3, [r4, #8]
 8019370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019372:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019376:	682b      	ldr	r3, [r5, #0]
 8019378:	4638      	mov	r0, r7
 801937a:	f8cc 3000 	str.w	r3, [ip]
 801937e:	f8c4 e01c 	str.w	lr, [r4, #28]
 8019382:	60e6      	str	r6, [r4, #12]
 8019384:	f7ff fe10 	bl	8018fa8 <rmw_get_default_security_options>
 8019388:	f104 0310 	add.w	r3, r4, #16
 801938c:	2203      	movs	r2, #3
 801938e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019392:	e883 0003 	stmia.w	r3, {r0, r1}
 8019396:	4816      	ldr	r0, [pc, #88]	@ (80193f0 <rmw_init_options_init+0xc0>)
 8019398:	4916      	ldr	r1, [pc, #88]	@ (80193f4 <rmw_init_options_init+0xc4>)
 801939a:	7626      	strb	r6, [r4, #24]
 801939c:	f001 fb80 	bl	801aaa0 <rmw_uxrce_init_init_options_impl_memory>
 80193a0:	4813      	ldr	r0, [pc, #76]	@ (80193f0 <rmw_init_options_init+0xc0>)
 80193a2:	f006 fa79 	bl	801f898 <get_memory>
 80193a6:	b1f0      	cbz	r0, 80193e6 <rmw_init_options_init+0xb6>
 80193a8:	4a13      	ldr	r2, [pc, #76]	@ (80193f8 <rmw_init_options_init+0xc8>)
 80193aa:	6883      	ldr	r3, [r0, #8]
 80193ac:	6851      	ldr	r1, [r2, #4]
 80193ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80193b0:	7810      	ldrb	r0, [r2, #0]
 80193b2:	6159      	str	r1, [r3, #20]
 80193b4:	68d1      	ldr	r1, [r2, #12]
 80193b6:	7418      	strb	r0, [r3, #16]
 80193b8:	61d9      	str	r1, [r3, #28]
 80193ba:	6911      	ldr	r1, [r2, #16]
 80193bc:	6219      	str	r1, [r3, #32]
 80193be:	6951      	ldr	r1, [r2, #20]
 80193c0:	6892      	ldr	r2, [r2, #8]
 80193c2:	6259      	str	r1, [r3, #36]	@ 0x24
 80193c4:	619a      	str	r2, [r3, #24]
 80193c6:	f004 fca5 	bl	801dd14 <uxr_nanos>
 80193ca:	f007 fa33 	bl	8020834 <srand>
 80193ce:	f007 fa5f 	bl	8020890 <rand>
 80193d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80193d4:	6298      	str	r0, [r3, #40]	@ 0x28
 80193d6:	2800      	cmp	r0, #0
 80193d8:	d0f9      	beq.n	80193ce <rmw_init_options_init+0x9e>
 80193da:	2000      	movs	r0, #0
 80193dc:	b003      	add	sp, #12
 80193de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80193e2:	b004      	add	sp, #16
 80193e4:	4770      	bx	lr
 80193e6:	2001      	movs	r0, #1
 80193e8:	e7b1      	b.n	801934e <rmw_init_options_init+0x1e>
 80193ea:	bf00      	nop
 80193ec:	08024500 	.word	0x08024500
 80193f0:	240694e4 	.word	0x240694e4
 80193f4:	24064d80 	.word	0x24064d80
 80193f8:	24064924 	.word	0x24064924
 80193fc:	08023b88 	.word	0x08023b88

08019400 <rmw_init_options_copy>:
 8019400:	2800      	cmp	r0, #0
 8019402:	d047      	beq.n	8019494 <rmw_init_options_copy+0x94>
 8019404:	b570      	push	{r4, r5, r6, lr}
 8019406:	460d      	mov	r5, r1
 8019408:	b149      	cbz	r1, 801941e <rmw_init_options_copy+0x1e>
 801940a:	4604      	mov	r4, r0
 801940c:	6880      	ldr	r0, [r0, #8]
 801940e:	b120      	cbz	r0, 801941a <rmw_init_options_copy+0x1a>
 8019410:	4b22      	ldr	r3, [pc, #136]	@ (801949c <rmw_init_options_copy+0x9c>)
 8019412:	6819      	ldr	r1, [r3, #0]
 8019414:	f7e6 ff64 	bl	80002e0 <strcmp>
 8019418:	bba8      	cbnz	r0, 8019486 <rmw_init_options_copy+0x86>
 801941a:	68ab      	ldr	r3, [r5, #8]
 801941c:	b11b      	cbz	r3, 8019426 <rmw_init_options_copy+0x26>
 801941e:	f04f 0c0b 	mov.w	ip, #11
 8019422:	4660      	mov	r0, ip
 8019424:	bd70      	pop	{r4, r5, r6, pc}
 8019426:	4623      	mov	r3, r4
 8019428:	462a      	mov	r2, r5
 801942a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801942e:	f8d3 e000 	ldr.w	lr, [r3]
 8019432:	3310      	adds	r3, #16
 8019434:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8019438:	3210      	adds	r2, #16
 801943a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801943e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019442:	42b3      	cmp	r3, r6
 8019444:	f842 ec10 	str.w	lr, [r2, #-16]
 8019448:	f842 cc0c 	str.w	ip, [r2, #-12]
 801944c:	f842 0c08 	str.w	r0, [r2, #-8]
 8019450:	f842 1c04 	str.w	r1, [r2, #-4]
 8019454:	d1eb      	bne.n	801942e <rmw_init_options_copy+0x2e>
 8019456:	6819      	ldr	r1, [r3, #0]
 8019458:	685b      	ldr	r3, [r3, #4]
 801945a:	4811      	ldr	r0, [pc, #68]	@ (80194a0 <rmw_init_options_copy+0xa0>)
 801945c:	6011      	str	r1, [r2, #0]
 801945e:	6053      	str	r3, [r2, #4]
 8019460:	f006 fa1a 	bl	801f898 <get_memory>
 8019464:	b198      	cbz	r0, 801948e <rmw_init_options_copy+0x8e>
 8019466:	6883      	ldr	r3, [r0, #8]
 8019468:	f04f 0c00 	mov.w	ip, #0
 801946c:	636b      	str	r3, [r5, #52]	@ 0x34
 801946e:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8019470:	f103 0410 	add.w	r4, r3, #16
 8019474:	3510      	adds	r5, #16
 8019476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801947a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801947e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019482:	4660      	mov	r0, ip
 8019484:	bd70      	pop	{r4, r5, r6, pc}
 8019486:	f04f 0c0c 	mov.w	ip, #12
 801948a:	4660      	mov	r0, ip
 801948c:	bd70      	pop	{r4, r5, r6, pc}
 801948e:	f04f 0c01 	mov.w	ip, #1
 8019492:	e7c6      	b.n	8019422 <rmw_init_options_copy+0x22>
 8019494:	f04f 0c0b 	mov.w	ip, #11
 8019498:	4660      	mov	r0, ip
 801949a:	4770      	bx	lr
 801949c:	08024500 	.word	0x08024500
 80194a0:	240694e4 	.word	0x240694e4

080194a4 <rmw_init_options_fini>:
 80194a4:	b510      	push	{r4, lr}
 80194a6:	b08e      	sub	sp, #56	@ 0x38
 80194a8:	b388      	cbz	r0, 801950e <rmw_init_options_fini+0x6a>
 80194aa:	4604      	mov	r4, r0
 80194ac:	3020      	adds	r0, #32
 80194ae:	f7fb fc21 	bl	8014cf4 <rcutils_allocator_is_valid>
 80194b2:	b360      	cbz	r0, 801950e <rmw_init_options_fini+0x6a>
 80194b4:	68a0      	ldr	r0, [r4, #8]
 80194b6:	b120      	cbz	r0, 80194c2 <rmw_init_options_fini+0x1e>
 80194b8:	4b1a      	ldr	r3, [pc, #104]	@ (8019524 <rmw_init_options_fini+0x80>)
 80194ba:	6819      	ldr	r1, [r3, #0]
 80194bc:	f7e6 ff10 	bl	80002e0 <strcmp>
 80194c0:	bb68      	cbnz	r0, 801951e <rmw_init_options_fini+0x7a>
 80194c2:	4b19      	ldr	r3, [pc, #100]	@ (8019528 <rmw_init_options_fini+0x84>)
 80194c4:	6819      	ldr	r1, [r3, #0]
 80194c6:	b331      	cbz	r1, 8019516 <rmw_init_options_fini+0x72>
 80194c8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80194ca:	e001      	b.n	80194d0 <rmw_init_options_fini+0x2c>
 80194cc:	6849      	ldr	r1, [r1, #4]
 80194ce:	b311      	cbz	r1, 8019516 <rmw_init_options_fini+0x72>
 80194d0:	688b      	ldr	r3, [r1, #8]
 80194d2:	429a      	cmp	r2, r3
 80194d4:	d1fa      	bne.n	80194cc <rmw_init_options_fini+0x28>
 80194d6:	4814      	ldr	r0, [pc, #80]	@ (8019528 <rmw_init_options_fini+0x84>)
 80194d8:	f006 f9ee 	bl	801f8b8 <put_memory>
 80194dc:	4668      	mov	r0, sp
 80194de:	f7ff fd4f 	bl	8018f80 <rmw_get_zero_initialized_init_options>
 80194e2:	46ee      	mov	lr, sp
 80194e4:	46a4      	mov	ip, r4
 80194e6:	2400      	movs	r4, #0
 80194e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80194ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80194f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80194f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80194f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80194fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019500:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8019504:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019508:	4620      	mov	r0, r4
 801950a:	b00e      	add	sp, #56	@ 0x38
 801950c:	bd10      	pop	{r4, pc}
 801950e:	240b      	movs	r4, #11
 8019510:	4620      	mov	r0, r4
 8019512:	b00e      	add	sp, #56	@ 0x38
 8019514:	bd10      	pop	{r4, pc}
 8019516:	2401      	movs	r4, #1
 8019518:	4620      	mov	r0, r4
 801951a:	b00e      	add	sp, #56	@ 0x38
 801951c:	bd10      	pop	{r4, pc}
 801951e:	240c      	movs	r4, #12
 8019520:	e7f2      	b.n	8019508 <rmw_init_options_fini+0x64>
 8019522:	bf00      	nop
 8019524:	08024500 	.word	0x08024500
 8019528:	240694e4 	.word	0x240694e4

0801952c <rmw_init>:
 801952c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019530:	b083      	sub	sp, #12
 8019532:	2800      	cmp	r0, #0
 8019534:	f000 80d3 	beq.w	80196de <rmw_init+0x1b2>
 8019538:	460e      	mov	r6, r1
 801953a:	2900      	cmp	r1, #0
 801953c:	f000 80cf 	beq.w	80196de <rmw_init+0x1b2>
 8019540:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8019542:	4605      	mov	r5, r0
 8019544:	2b00      	cmp	r3, #0
 8019546:	f000 80ca 	beq.w	80196de <rmw_init+0x1b2>
 801954a:	4b78      	ldr	r3, [pc, #480]	@ (801972c <rmw_init+0x200>)
 801954c:	6880      	ldr	r0, [r0, #8]
 801954e:	681f      	ldr	r7, [r3, #0]
 8019550:	b128      	cbz	r0, 801955e <rmw_init+0x32>
 8019552:	4639      	mov	r1, r7
 8019554:	f7e6 fec4 	bl	80002e0 <strcmp>
 8019558:	2800      	cmp	r0, #0
 801955a:	f040 80ca 	bne.w	80196f2 <rmw_init+0x1c6>
 801955e:	4c74      	ldr	r4, [pc, #464]	@ (8019730 <rmw_init+0x204>)
 8019560:	f04f 0800 	mov.w	r8, #0
 8019564:	4973      	ldr	r1, [pc, #460]	@ (8019734 <rmw_init+0x208>)
 8019566:	4874      	ldr	r0, [pc, #464]	@ (8019738 <rmw_init+0x20c>)
 8019568:	e9d5 2300 	ldrd	r2, r3, [r5]
 801956c:	60b7      	str	r7, [r6, #8]
 801956e:	e9c6 2300 	strd	r2, r3, [r6]
 8019572:	68eb      	ldr	r3, [r5, #12]
 8019574:	2201      	movs	r2, #1
 8019576:	64b3      	str	r3, [r6, #72]	@ 0x48
 8019578:	f001 fa32 	bl	801a9e0 <rmw_uxrce_init_session_memory>
 801957c:	4620      	mov	r0, r4
 801957e:	2204      	movs	r2, #4
 8019580:	496e      	ldr	r1, [pc, #440]	@ (801973c <rmw_init+0x210>)
 8019582:	f001 fa6d 	bl	801aa60 <rmw_uxrce_init_static_input_buffer_memory>
 8019586:	486c      	ldr	r0, [pc, #432]	@ (8019738 <rmw_init+0x20c>)
 8019588:	f884 800d 	strb.w	r8, [r4, #13]
 801958c:	f006 f984 	bl	801f898 <get_memory>
 8019590:	2800      	cmp	r0, #0
 8019592:	f000 80a9 	beq.w	80196e8 <rmw_init+0x1bc>
 8019596:	6884      	ldr	r4, [r0, #8]
 8019598:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801959a:	f104 0910 	add.w	r9, r4, #16
 801959e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80195a0:	f890 c010 	ldrb.w	ip, [r0, #16]
 80195a4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80195a8:	9101      	str	r1, [sp, #4]
 80195aa:	4661      	mov	r1, ip
 80195ac:	6a00      	ldr	r0, [r0, #32]
 80195ae:	9000      	str	r0, [sp, #0]
 80195b0:	4648      	mov	r0, r9
 80195b2:	f002 fb59 	bl	801bc68 <uxr_set_custom_transport_callbacks>
 80195b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80195ba:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80195be:	4960      	ldr	r1, [pc, #384]	@ (8019740 <rmw_init+0x214>)
 80195c0:	4860      	ldr	r0, [pc, #384]	@ (8019744 <rmw_init+0x218>)
 80195c2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80195c6:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80195ca:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80195ce:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80195d2:	2201      	movs	r2, #1
 80195d4:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80195d8:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80195dc:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80195e0:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80195e4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80195e6:	f001 f9db 	bl	801a9a0 <rmw_uxrce_init_node_memory>
 80195ea:	2205      	movs	r2, #5
 80195ec:	4956      	ldr	r1, [pc, #344]	@ (8019748 <rmw_init+0x21c>)
 80195ee:	4857      	ldr	r0, [pc, #348]	@ (801974c <rmw_init+0x220>)
 80195f0:	f001 f9b6 	bl	801a960 <rmw_uxrce_init_subscription_memory>
 80195f4:	220a      	movs	r2, #10
 80195f6:	4956      	ldr	r1, [pc, #344]	@ (8019750 <rmw_init+0x224>)
 80195f8:	4856      	ldr	r0, [pc, #344]	@ (8019754 <rmw_init+0x228>)
 80195fa:	f001 f991 	bl	801a920 <rmw_uxrce_init_publisher_memory>
 80195fe:	2201      	movs	r2, #1
 8019600:	4955      	ldr	r1, [pc, #340]	@ (8019758 <rmw_init+0x22c>)
 8019602:	4856      	ldr	r0, [pc, #344]	@ (801975c <rmw_init+0x230>)
 8019604:	f001 f94c 	bl	801a8a0 <rmw_uxrce_init_service_memory>
 8019608:	2201      	movs	r2, #1
 801960a:	4955      	ldr	r1, [pc, #340]	@ (8019760 <rmw_init+0x234>)
 801960c:	4855      	ldr	r0, [pc, #340]	@ (8019764 <rmw_init+0x238>)
 801960e:	f001 f967 	bl	801a8e0 <rmw_uxrce_init_client_memory>
 8019612:	220f      	movs	r2, #15
 8019614:	4954      	ldr	r1, [pc, #336]	@ (8019768 <rmw_init+0x23c>)
 8019616:	4855      	ldr	r0, [pc, #340]	@ (801976c <rmw_init+0x240>)
 8019618:	f001 fa02 	bl	801aa20 <rmw_uxrce_init_topic_memory>
 801961c:	2203      	movs	r2, #3
 801961e:	4954      	ldr	r1, [pc, #336]	@ (8019770 <rmw_init+0x244>)
 8019620:	4854      	ldr	r0, [pc, #336]	@ (8019774 <rmw_init+0x248>)
 8019622:	f001 fa3d 	bl	801aaa0 <rmw_uxrce_init_init_options_impl_memory>
 8019626:	2204      	movs	r2, #4
 8019628:	4953      	ldr	r1, [pc, #332]	@ (8019778 <rmw_init+0x24c>)
 801962a:	4854      	ldr	r0, [pc, #336]	@ (801977c <rmw_init+0x250>)
 801962c:	f001 fa58 	bl	801aae0 <rmw_uxrce_init_wait_set_memory>
 8019630:	4953      	ldr	r1, [pc, #332]	@ (8019780 <rmw_init+0x254>)
 8019632:	4854      	ldr	r0, [pc, #336]	@ (8019784 <rmw_init+0x258>)
 8019634:	2204      	movs	r2, #4
 8019636:	f001 fa73 	bl	801ab20 <rmw_uxrce_init_guard_condition_memory>
 801963a:	4642      	mov	r2, r8
 801963c:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801963e:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8019640:	f000 ff94 	bl	801a56c <rmw_uxrce_transport_init>
 8019644:	4607      	mov	r7, r0
 8019646:	2800      	cmp	r0, #0
 8019648:	d158      	bne.n	80196fc <rmw_init+0x1d0>
 801964a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801964c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8019650:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8019654:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019656:	4628      	mov	r0, r5
 8019658:	f002 fd36 	bl	801c0c8 <uxr_init_session>
 801965c:	4622      	mov	r2, r4
 801965e:	494a      	ldr	r1, [pc, #296]	@ (8019788 <rmw_init+0x25c>)
 8019660:	4628      	mov	r0, r5
 8019662:	f002 fd55 	bl	801c110 <uxr_set_topic_callback>
 8019666:	463a      	mov	r2, r7
 8019668:	4948      	ldr	r1, [pc, #288]	@ (801978c <rmw_init+0x260>)
 801966a:	4628      	mov	r0, r5
 801966c:	f002 fd4c 	bl	801c108 <uxr_set_status_callback>
 8019670:	463a      	mov	r2, r7
 8019672:	4947      	ldr	r1, [pc, #284]	@ (8019790 <rmw_init+0x264>)
 8019674:	4628      	mov	r0, r5
 8019676:	f002 fd4f 	bl	801c118 <uxr_set_request_callback>
 801967a:	463a      	mov	r2, r7
 801967c:	4945      	ldr	r1, [pc, #276]	@ (8019794 <rmw_init+0x268>)
 801967e:	4628      	mov	r0, r5
 8019680:	f002 fd4e 	bl	801c120 <uxr_set_reply_callback>
 8019684:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8019688:	2304      	movs	r3, #4
 801968a:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801968e:	0092      	lsls	r2, r2, #2
 8019690:	4628      	mov	r0, r5
 8019692:	f002 fd85 	bl	801c1a0 <uxr_create_input_reliable_stream>
 8019696:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801969a:	2304      	movs	r3, #4
 801969c:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80196a0:	0092      	lsls	r2, r2, #2
 80196a2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80196a6:	4628      	mov	r0, r5
 80196a8:	f002 fd50 	bl	801c14c <uxr_create_output_reliable_stream>
 80196ac:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80196b0:	4628      	mov	r0, r5
 80196b2:	f002 fd6f 	bl	801c194 <uxr_create_input_best_effort_stream>
 80196b6:	f241 3194 	movw	r1, #5012	@ 0x1394
 80196ba:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80196be:	4628      	mov	r0, r5
 80196c0:	4421      	add	r1, r4
 80196c2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80196c6:	f002 fd2f 	bl	801c128 <uxr_create_output_best_effort_stream>
 80196ca:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80196ce:	4628      	mov	r0, r5
 80196d0:	f003 fab8 	bl	801cc44 <uxr_create_session>
 80196d4:	b1f8      	cbz	r0, 8019716 <rmw_init+0x1ea>
 80196d6:	4638      	mov	r0, r7
 80196d8:	b003      	add	sp, #12
 80196da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196de:	270b      	movs	r7, #11
 80196e0:	4638      	mov	r0, r7
 80196e2:	b003      	add	sp, #12
 80196e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196e8:	2701      	movs	r7, #1
 80196ea:	4638      	mov	r0, r7
 80196ec:	b003      	add	sp, #12
 80196ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196f2:	270c      	movs	r7, #12
 80196f4:	4638      	mov	r0, r7
 80196f6:	b003      	add	sp, #12
 80196f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196fc:	4648      	mov	r0, r9
 80196fe:	f002 faf1 	bl	801bce4 <uxr_close_custom_transport>
 8019702:	4621      	mov	r1, r4
 8019704:	480c      	ldr	r0, [pc, #48]	@ (8019738 <rmw_init+0x20c>)
 8019706:	f006 f8d7 	bl	801f8b8 <put_memory>
 801970a:	4638      	mov	r0, r7
 801970c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8019710:	b003      	add	sp, #12
 8019712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019716:	4648      	mov	r0, r9
 8019718:	f002 fae4 	bl	801bce4 <uxr_close_custom_transport>
 801971c:	4621      	mov	r1, r4
 801971e:	4806      	ldr	r0, [pc, #24]	@ (8019738 <rmw_init+0x20c>)
 8019720:	f006 f8ca 	bl	801f8b8 <put_memory>
 8019724:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8019726:	2701      	movs	r7, #1
 8019728:	e7d5      	b.n	80196d6 <rmw_init+0x1aa>
 801972a:	bf00      	nop
 801972c:	08024500 	.word	0x08024500
 8019730:	24069534 	.word	0x24069534
 8019734:	240657e0 	.word	0x240657e0
 8019738:	24069524 	.word	0x24069524
 801973c:	24066d88 	.word	0x24066d88
 8019740:	24064e04 	.word	0x24064e04
 8019744:	240694f4 	.word	0x240694f4
 8019748:	24068e88 	.word	0x24068e88
 801974c:	24069544 	.word	0x24069544
 8019750:	24064ea8 	.word	0x24064ea8
 8019754:	24069504 	.word	0x24069504
 8019758:	24065718 	.word	0x24065718
 801975c:	24069514 	.word	0x24069514
 8019760:	24064c38 	.word	0x24064c38
 8019764:	24064c28 	.word	0x24064c28
 8019768:	240692c0 	.word	0x240692c0
 801976c:	24069554 	.word	0x24069554
 8019770:	24064d80 	.word	0x24064d80
 8019774:	240694e4 	.word	0x240694e4
 8019778:	24069464 	.word	0x24069464
 801977c:	24069564 	.word	0x24069564
 8019780:	24064d00 	.word	0x24064d00
 8019784:	240694d4 	.word	0x240694d4
 8019788:	0801f6d1 	.word	0x0801f6d1
 801978c:	0801f6c9 	.word	0x0801f6c9
 8019790:	0801f769 	.word	0x0801f769
 8019794:	0801f805 	.word	0x0801f805

08019798 <rmw_context_fini>:
 8019798:	4b17      	ldr	r3, [pc, #92]	@ (80197f8 <rmw_context_fini+0x60>)
 801979a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801979c:	b570      	push	{r4, r5, r6, lr}
 801979e:	681c      	ldr	r4, [r3, #0]
 80197a0:	4605      	mov	r5, r0
 80197a2:	b334      	cbz	r4, 80197f2 <rmw_context_fini+0x5a>
 80197a4:	2600      	movs	r6, #0
 80197a6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80197aa:	6902      	ldr	r2, [r0, #16]
 80197ac:	428a      	cmp	r2, r1
 80197ae:	d018      	beq.n	80197e2 <rmw_context_fini+0x4a>
 80197b0:	2c00      	cmp	r4, #0
 80197b2:	d1f8      	bne.n	80197a6 <rmw_context_fini+0xe>
 80197b4:	b189      	cbz	r1, 80197da <rmw_context_fini+0x42>
 80197b6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80197ba:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80197be:	789b      	ldrb	r3, [r3, #2]
 80197c0:	2b01      	cmp	r3, #1
 80197c2:	bf14      	ite	ne
 80197c4:	210a      	movne	r1, #10
 80197c6:	2100      	moveq	r1, #0
 80197c8:	f003 fa14 	bl	801cbf4 <uxr_delete_session_retries>
 80197cc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80197ce:	f001 f9c7 	bl	801ab60 <rmw_uxrce_fini_session_memory>
 80197d2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80197d4:	3010      	adds	r0, #16
 80197d6:	f002 fa85 	bl	801bce4 <uxr_close_custom_transport>
 80197da:	2300      	movs	r3, #0
 80197dc:	4630      	mov	r0, r6
 80197de:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80197e0:	bd70      	pop	{r4, r5, r6, pc}
 80197e2:	3018      	adds	r0, #24
 80197e4:	f000 f89c 	bl	8019920 <rmw_destroy_node>
 80197e8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80197ea:	4606      	mov	r6, r0
 80197ec:	2c00      	cmp	r4, #0
 80197ee:	d1da      	bne.n	80197a6 <rmw_context_fini+0xe>
 80197f0:	e7e0      	b.n	80197b4 <rmw_context_fini+0x1c>
 80197f2:	4626      	mov	r6, r4
 80197f4:	e7de      	b.n	80197b4 <rmw_context_fini+0x1c>
 80197f6:	bf00      	nop
 80197f8:	240694f4 	.word	0x240694f4

080197fc <create_node>:
 80197fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019800:	b083      	sub	sp, #12
 8019802:	2b00      	cmp	r3, #0
 8019804:	d064      	beq.n	80198d0 <create_node+0xd4>
 8019806:	4606      	mov	r6, r0
 8019808:	4838      	ldr	r0, [pc, #224]	@ (80198ec <create_node+0xf0>)
 801980a:	460f      	mov	r7, r1
 801980c:	4690      	mov	r8, r2
 801980e:	461d      	mov	r5, r3
 8019810:	f006 f842 	bl	801f898 <get_memory>
 8019814:	2800      	cmp	r0, #0
 8019816:	d05b      	beq.n	80198d0 <create_node+0xd4>
 8019818:	6884      	ldr	r4, [r0, #8]
 801981a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801981c:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8019820:	f104 0518 	add.w	r5, r4, #24
 8019824:	6123      	str	r3, [r4, #16]
 8019826:	f7ff fd7d 	bl	8019324 <rmw_get_implementation_identifier>
 801982a:	f8c4 9020 	str.w	r9, [r4, #32]
 801982e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8019832:	4630      	mov	r0, r6
 8019834:	f7e6 fd5e 	bl	80002f4 <strlen>
 8019838:	1c42      	adds	r2, r0, #1
 801983a:	2a3c      	cmp	r2, #60	@ 0x3c
 801983c:	d840      	bhi.n	80198c0 <create_node+0xc4>
 801983e:	4648      	mov	r0, r9
 8019840:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8019844:	4631      	mov	r1, r6
 8019846:	f007 fcd8 	bl	80211fa <memcpy>
 801984a:	4638      	mov	r0, r7
 801984c:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8019850:	f7e6 fd50 	bl	80002f4 <strlen>
 8019854:	1c42      	adds	r2, r0, #1
 8019856:	2a3c      	cmp	r2, #60	@ 0x3c
 8019858:	d832      	bhi.n	80198c0 <create_node+0xc4>
 801985a:	4639      	mov	r1, r7
 801985c:	4648      	mov	r0, r9
 801985e:	f007 fccc 	bl	80211fa <memcpy>
 8019862:	6923      	ldr	r3, [r4, #16]
 8019864:	2101      	movs	r1, #1
 8019866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801986a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801986e:	1842      	adds	r2, r0, r1
 8019870:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8019874:	f002 fa3a 	bl	801bcec <uxr_object_id>
 8019878:	6160      	str	r0, [r4, #20]
 801987a:	783b      	ldrb	r3, [r7, #0]
 801987c:	2b2f      	cmp	r3, #47	@ 0x2f
 801987e:	d12c      	bne.n	80198da <create_node+0xde>
 8019880:	787b      	ldrb	r3, [r7, #1]
 8019882:	bb53      	cbnz	r3, 80198da <create_node+0xde>
 8019884:	4633      	mov	r3, r6
 8019886:	4a1a      	ldr	r2, [pc, #104]	@ (80198f0 <create_node+0xf4>)
 8019888:	213c      	movs	r1, #60	@ 0x3c
 801988a:	481a      	ldr	r0, [pc, #104]	@ (80198f4 <create_node+0xf8>)
 801988c:	f007 fa08 	bl	8020ca0 <sniprintf>
 8019890:	6920      	ldr	r0, [r4, #16]
 8019892:	2106      	movs	r1, #6
 8019894:	fa1f f388 	uxth.w	r3, r8
 8019898:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801989c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80198a0:	9101      	str	r1, [sp, #4]
 80198a2:	4914      	ldr	r1, [pc, #80]	@ (80198f4 <create_node+0xf8>)
 80198a4:	9100      	str	r1, [sp, #0]
 80198a6:	6811      	ldr	r1, [r2, #0]
 80198a8:	6962      	ldr	r2, [r4, #20]
 80198aa:	f001 ff71 	bl	801b790 <uxr_buffer_create_participant_bin>
 80198ae:	4602      	mov	r2, r0
 80198b0:	6920      	ldr	r0, [r4, #16]
 80198b2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80198b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80198ba:	f001 fad3 	bl	801ae64 <run_xrce_session>
 80198be:	b918      	cbnz	r0, 80198c8 <create_node+0xcc>
 80198c0:	4628      	mov	r0, r5
 80198c2:	2500      	movs	r5, #0
 80198c4:	f001 f952 	bl	801ab6c <rmw_uxrce_fini_node_memory>
 80198c8:	4628      	mov	r0, r5
 80198ca:	b003      	add	sp, #12
 80198cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198d0:	2500      	movs	r5, #0
 80198d2:	4628      	mov	r0, r5
 80198d4:	b003      	add	sp, #12
 80198d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198da:	463b      	mov	r3, r7
 80198dc:	4a06      	ldr	r2, [pc, #24]	@ (80198f8 <create_node+0xfc>)
 80198de:	213c      	movs	r1, #60	@ 0x3c
 80198e0:	9600      	str	r6, [sp, #0]
 80198e2:	4804      	ldr	r0, [pc, #16]	@ (80198f4 <create_node+0xf8>)
 80198e4:	f007 f9dc 	bl	8020ca0 <sniprintf>
 80198e8:	e7d2      	b.n	8019890 <create_node+0x94>
 80198ea:	bf00      	nop
 80198ec:	240694f4 	.word	0x240694f4
 80198f0:	080241d4 	.word	0x080241d4
 80198f4:	24064aac 	.word	0x24064aac
 80198f8:	08023b98 	.word	0x08023b98

080198fc <rmw_create_node>:
 80198fc:	468c      	mov	ip, r1
 80198fe:	4611      	mov	r1, r2
 8019900:	f1bc 0f00 	cmp.w	ip, #0
 8019904:	d00a      	beq.n	801991c <rmw_create_node+0x20>
 8019906:	f89c 3000 	ldrb.w	r3, [ip]
 801990a:	b13b      	cbz	r3, 801991c <rmw_create_node+0x20>
 801990c:	b132      	cbz	r2, 801991c <rmw_create_node+0x20>
 801990e:	7813      	ldrb	r3, [r2, #0]
 8019910:	b123      	cbz	r3, 801991c <rmw_create_node+0x20>
 8019912:	4603      	mov	r3, r0
 8019914:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8019916:	4660      	mov	r0, ip
 8019918:	f7ff bf70 	b.w	80197fc <create_node>
 801991c:	2000      	movs	r0, #0
 801991e:	4770      	bx	lr

08019920 <rmw_destroy_node>:
 8019920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019922:	b328      	cbz	r0, 8019970 <rmw_destroy_node+0x50>
 8019924:	4607      	mov	r7, r0
 8019926:	6800      	ldr	r0, [r0, #0]
 8019928:	b120      	cbz	r0, 8019934 <rmw_destroy_node+0x14>
 801992a:	4b37      	ldr	r3, [pc, #220]	@ (8019a08 <rmw_destroy_node+0xe8>)
 801992c:	6819      	ldr	r1, [r3, #0]
 801992e:	f7e6 fcd7 	bl	80002e0 <strcmp>
 8019932:	b9e8      	cbnz	r0, 8019970 <rmw_destroy_node+0x50>
 8019934:	687d      	ldr	r5, [r7, #4]
 8019936:	b1dd      	cbz	r5, 8019970 <rmw_destroy_node+0x50>
 8019938:	4b34      	ldr	r3, [pc, #208]	@ (8019a0c <rmw_destroy_node+0xec>)
 801993a:	681c      	ldr	r4, [r3, #0]
 801993c:	2c00      	cmp	r4, #0
 801993e:	d060      	beq.n	8019a02 <rmw_destroy_node+0xe2>
 8019940:	2600      	movs	r6, #0
 8019942:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019946:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801994a:	429d      	cmp	r5, r3
 801994c:	d013      	beq.n	8019976 <rmw_destroy_node+0x56>
 801994e:	2c00      	cmp	r4, #0
 8019950:	d1f7      	bne.n	8019942 <rmw_destroy_node+0x22>
 8019952:	4b2f      	ldr	r3, [pc, #188]	@ (8019a10 <rmw_destroy_node+0xf0>)
 8019954:	681c      	ldr	r4, [r3, #0]
 8019956:	b1c4      	cbz	r4, 801998a <rmw_destroy_node+0x6a>
 8019958:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801995c:	6a0b      	ldr	r3, [r1, #32]
 801995e:	429d      	cmp	r5, r3
 8019960:	d1f9      	bne.n	8019956 <rmw_destroy_node+0x36>
 8019962:	317c      	adds	r1, #124	@ 0x7c
 8019964:	4638      	mov	r0, r7
 8019966:	f000 fd4b 	bl	801a400 <rmw_destroy_subscription>
 801996a:	2801      	cmp	r0, #1
 801996c:	4606      	mov	r6, r0
 801996e:	d1f2      	bne.n	8019956 <rmw_destroy_node+0x36>
 8019970:	2601      	movs	r6, #1
 8019972:	4630      	mov	r0, r6
 8019974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019976:	3184      	adds	r1, #132	@ 0x84
 8019978:	4638      	mov	r0, r7
 801997a:	f000 f94d 	bl	8019c18 <rmw_destroy_publisher>
 801997e:	2801      	cmp	r0, #1
 8019980:	4606      	mov	r6, r0
 8019982:	d0f5      	beq.n	8019970 <rmw_destroy_node+0x50>
 8019984:	2c00      	cmp	r4, #0
 8019986:	d1dc      	bne.n	8019942 <rmw_destroy_node+0x22>
 8019988:	e7e3      	b.n	8019952 <rmw_destroy_node+0x32>
 801998a:	4b22      	ldr	r3, [pc, #136]	@ (8019a14 <rmw_destroy_node+0xf4>)
 801998c:	681c      	ldr	r4, [r3, #0]
 801998e:	b16c      	cbz	r4, 80199ac <rmw_destroy_node+0x8c>
 8019990:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019994:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8019996:	429d      	cmp	r5, r3
 8019998:	d1f9      	bne.n	801998e <rmw_destroy_node+0x6e>
 801999a:	317c      	adds	r1, #124	@ 0x7c
 801999c:	4638      	mov	r0, r7
 801999e:	f000 fbb9 	bl	801a114 <rmw_destroy_service>
 80199a2:	2801      	cmp	r0, #1
 80199a4:	4606      	mov	r6, r0
 80199a6:	d0e3      	beq.n	8019970 <rmw_destroy_node+0x50>
 80199a8:	2c00      	cmp	r4, #0
 80199aa:	d1f1      	bne.n	8019990 <rmw_destroy_node+0x70>
 80199ac:	4b1a      	ldr	r3, [pc, #104]	@ (8019a18 <rmw_destroy_node+0xf8>)
 80199ae:	681c      	ldr	r4, [r3, #0]
 80199b0:	b16c      	cbz	r4, 80199ce <rmw_destroy_node+0xae>
 80199b2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80199b6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80199b8:	429d      	cmp	r5, r3
 80199ba:	d1f9      	bne.n	80199b0 <rmw_destroy_node+0x90>
 80199bc:	317c      	adds	r1, #124	@ 0x7c
 80199be:	4638      	mov	r0, r7
 80199c0:	f7ff fc6c 	bl	801929c <rmw_destroy_client>
 80199c4:	2801      	cmp	r0, #1
 80199c6:	4606      	mov	r6, r0
 80199c8:	d0d2      	beq.n	8019970 <rmw_destroy_node+0x50>
 80199ca:	2c00      	cmp	r4, #0
 80199cc:	d1f1      	bne.n	80199b2 <rmw_destroy_node+0x92>
 80199ce:	6928      	ldr	r0, [r5, #16]
 80199d0:	696a      	ldr	r2, [r5, #20]
 80199d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80199d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80199da:	6819      	ldr	r1, [r3, #0]
 80199dc:	f001 fe8c 	bl	801b6f8 <uxr_buffer_delete_entity>
 80199e0:	4602      	mov	r2, r0
 80199e2:	6928      	ldr	r0, [r5, #16]
 80199e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80199e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80199ec:	f001 fa3a 	bl	801ae64 <run_xrce_session>
 80199f0:	4603      	mov	r3, r0
 80199f2:	4638      	mov	r0, r7
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	bf08      	it	eq
 80199f8:	2602      	moveq	r6, #2
 80199fa:	f001 f8b7 	bl	801ab6c <rmw_uxrce_fini_node_memory>
 80199fe:	4630      	mov	r0, r6
 8019a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a02:	4626      	mov	r6, r4
 8019a04:	e7a5      	b.n	8019952 <rmw_destroy_node+0x32>
 8019a06:	bf00      	nop
 8019a08:	08024500 	.word	0x08024500
 8019a0c:	24069504 	.word	0x24069504
 8019a10:	24069544 	.word	0x24069544
 8019a14:	24069514 	.word	0x24069514
 8019a18:	24064c28 	.word	0x24064c28

08019a1c <rmw_node_get_graph_guard_condition>:
 8019a1c:	6843      	ldr	r3, [r0, #4]
 8019a1e:	6918      	ldr	r0, [r3, #16]
 8019a20:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8019a24:	4770      	bx	lr
 8019a26:	bf00      	nop

08019a28 <rmw_create_publisher>:
 8019a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a2c:	b087      	sub	sp, #28
 8019a2e:	2800      	cmp	r0, #0
 8019a30:	f000 80d2 	beq.w	8019bd8 <rmw_create_publisher+0x1b0>
 8019a34:	460e      	mov	r6, r1
 8019a36:	2900      	cmp	r1, #0
 8019a38:	f000 80ce 	beq.w	8019bd8 <rmw_create_publisher+0x1b0>
 8019a3c:	4604      	mov	r4, r0
 8019a3e:	6800      	ldr	r0, [r0, #0]
 8019a40:	4615      	mov	r5, r2
 8019a42:	461f      	mov	r7, r3
 8019a44:	f001 fb20 	bl	801b088 <is_uxrce_rmw_identifier_valid>
 8019a48:	f080 0001 	eor.w	r0, r0, #1
 8019a4c:	b2c0      	uxtb	r0, r0
 8019a4e:	2800      	cmp	r0, #0
 8019a50:	f040 80c2 	bne.w	8019bd8 <rmw_create_publisher+0x1b0>
 8019a54:	2d00      	cmp	r5, #0
 8019a56:	f000 80bf 	beq.w	8019bd8 <rmw_create_publisher+0x1b0>
 8019a5a:	782b      	ldrb	r3, [r5, #0]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	f000 80bb 	beq.w	8019bd8 <rmw_create_publisher+0x1b0>
 8019a62:	2f00      	cmp	r7, #0
 8019a64:	f000 80b8 	beq.w	8019bd8 <rmw_create_publisher+0x1b0>
 8019a68:	485e      	ldr	r0, [pc, #376]	@ (8019be4 <rmw_create_publisher+0x1bc>)
 8019a6a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8019a6e:	f005 ff13 	bl	801f898 <get_memory>
 8019a72:	2800      	cmp	r0, #0
 8019a74:	f000 80b0 	beq.w	8019bd8 <rmw_create_publisher+0x1b0>
 8019a78:	6884      	ldr	r4, [r0, #8]
 8019a7a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8019a7e:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8019a82:	f7ff fc4f 	bl	8019324 <rmw_get_implementation_identifier>
 8019a86:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8019a8a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8019a8e:	4628      	mov	r0, r5
 8019a90:	f7e6 fc30 	bl	80002f4 <strlen>
 8019a94:	3001      	adds	r0, #1
 8019a96:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 8019a9a:	283c      	cmp	r0, #60	@ 0x3c
 8019a9c:	f200 808f 	bhi.w	8019bbe <rmw_create_publisher+0x196>
 8019aa0:	462b      	mov	r3, r5
 8019aa2:	4a51      	ldr	r2, [pc, #324]	@ (8019be8 <rmw_create_publisher+0x1c0>)
 8019aa4:	213c      	movs	r1, #60	@ 0x3c
 8019aa6:	4650      	mov	r0, sl
 8019aa8:	f007 f8fa 	bl	8020ca0 <sniprintf>
 8019aac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019ab0:	4639      	mov	r1, r7
 8019ab2:	2250      	movs	r2, #80	@ 0x50
 8019ab4:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8019ab6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8019aba:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8019abe:	f007 fb9c 	bl	80211fa <memcpy>
 8019ac2:	7a3b      	ldrb	r3, [r7, #8]
 8019ac4:	4630      	mov	r0, r6
 8019ac6:	4949      	ldr	r1, [pc, #292]	@ (8019bec <rmw_create_publisher+0x1c4>)
 8019ac8:	2b02      	cmp	r3, #2
 8019aca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019ace:	bf0c      	ite	eq
 8019ad0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8019ad4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8019ad8:	67a3      	str	r3, [r4, #120]	@ 0x78
 8019ada:	2300      	movs	r3, #0
 8019adc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8019ae0:	f7fb f9ac 	bl	8014e3c <get_message_typesupport_handle>
 8019ae4:	2800      	cmp	r0, #0
 8019ae6:	d06a      	beq.n	8019bbe <rmw_create_publisher+0x196>
 8019ae8:	6842      	ldr	r2, [r0, #4]
 8019aea:	61a2      	str	r2, [r4, #24]
 8019aec:	2a00      	cmp	r2, #0
 8019aee:	d066      	beq.n	8019bbe <rmw_create_publisher+0x196>
 8019af0:	4629      	mov	r1, r5
 8019af2:	463b      	mov	r3, r7
 8019af4:	4648      	mov	r0, r9
 8019af6:	f005 ff1d 	bl	801f934 <create_topic>
 8019afa:	6260      	str	r0, [r4, #36]	@ 0x24
 8019afc:	2800      	cmp	r0, #0
 8019afe:	d062      	beq.n	8019bc6 <rmw_create_publisher+0x19e>
 8019b00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019b04:	2103      	movs	r1, #3
 8019b06:	2506      	movs	r5, #6
 8019b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019b0c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8019b10:	1c42      	adds	r2, r0, #1
 8019b12:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8019b16:	f002 f8e9 	bl	801bcec <uxr_object_id>
 8019b1a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8019b1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019b22:	6120      	str	r0, [r4, #16]
 8019b24:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8019b28:	6910      	ldr	r0, [r2, #16]
 8019b2a:	9500      	str	r5, [sp, #0]
 8019b2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019b30:	6819      	ldr	r1, [r3, #0]
 8019b32:	6922      	ldr	r2, [r4, #16]
 8019b34:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8019b38:	f001 fe92 	bl	801b860 <uxr_buffer_create_publisher_bin>
 8019b3c:	4602      	mov	r2, r0
 8019b3e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019b42:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8019b46:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019b4a:	f001 f98b 	bl	801ae64 <run_xrce_session>
 8019b4e:	b3b0      	cbz	r0, 8019bbe <rmw_create_publisher+0x196>
 8019b50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019b54:	2105      	movs	r1, #5
 8019b56:	f10d 0a10 	add.w	sl, sp, #16
 8019b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019b5e:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8019b62:	1c42      	adds	r2, r0, #1
 8019b64:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8019b68:	f002 f8c0 	bl	801bcec <uxr_object_id>
 8019b6c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8019b70:	4639      	mov	r1, r7
 8019b72:	6160      	str	r0, [r4, #20]
 8019b74:	691e      	ldr	r6, [r3, #16]
 8019b76:	4650      	mov	r0, sl
 8019b78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019b7c:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8019b80:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8019b84:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 8019b88:	f001 f988 	bl	801ae9c <convert_qos_profile>
 8019b8c:	9503      	str	r5, [sp, #12]
 8019b8e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8019b92:	9001      	str	r0, [sp, #4]
 8019b94:	4630      	mov	r0, r6
 8019b96:	f8ad 1008 	strh.w	r1, [sp, #8]
 8019b9a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8019b9e:	9300      	str	r3, [sp, #0]
 8019ba0:	6839      	ldr	r1, [r7, #0]
 8019ba2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8019ba6:	f001 febb 	bl	801b920 <uxr_buffer_create_datawriter_bin>
 8019baa:	4602      	mov	r2, r0
 8019bac:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019bb0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8019bb4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019bb8:	f001 f954 	bl	801ae64 <run_xrce_session>
 8019bbc:	b970      	cbnz	r0, 8019bdc <rmw_create_publisher+0x1b4>
 8019bbe:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8019bc0:	b108      	cbz	r0, 8019bc6 <rmw_create_publisher+0x19e>
 8019bc2:	f001 f843 	bl	801ac4c <rmw_uxrce_fini_topic_memory>
 8019bc6:	4640      	mov	r0, r8
 8019bc8:	f04f 0800 	mov.w	r8, #0
 8019bcc:	f000 ffe6 	bl	801ab9c <rmw_uxrce_fini_publisher_memory>
 8019bd0:	4640      	mov	r0, r8
 8019bd2:	b007      	add	sp, #28
 8019bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bd8:	f04f 0800 	mov.w	r8, #0
 8019bdc:	4640      	mov	r0, r8
 8019bde:	b007      	add	sp, #28
 8019be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019be4:	24069504 	.word	0x24069504
 8019be8:	080241d4 	.word	0x080241d4
 8019bec:	08022314 	.word	0x08022314

08019bf0 <rmw_publisher_get_actual_qos>:
 8019bf0:	b178      	cbz	r0, 8019c12 <rmw_publisher_get_actual_qos+0x22>
 8019bf2:	b510      	push	{r4, lr}
 8019bf4:	fab1 f481 	clz	r4, r1
 8019bf8:	0964      	lsrs	r4, r4, #5
 8019bfa:	b141      	cbz	r1, 8019c0e <rmw_publisher_get_actual_qos+0x1e>
 8019bfc:	6843      	ldr	r3, [r0, #4]
 8019bfe:	2250      	movs	r2, #80	@ 0x50
 8019c00:	4608      	mov	r0, r1
 8019c02:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8019c06:	f007 faf8 	bl	80211fa <memcpy>
 8019c0a:	4620      	mov	r0, r4
 8019c0c:	bd10      	pop	{r4, pc}
 8019c0e:	200b      	movs	r0, #11
 8019c10:	bd10      	pop	{r4, pc}
 8019c12:	200b      	movs	r0, #11
 8019c14:	4770      	bx	lr
 8019c16:	bf00      	nop

08019c18 <rmw_destroy_publisher>:
 8019c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c1c:	b128      	cbz	r0, 8019c2a <rmw_destroy_publisher+0x12>
 8019c1e:	4604      	mov	r4, r0
 8019c20:	6800      	ldr	r0, [r0, #0]
 8019c22:	460d      	mov	r5, r1
 8019c24:	f001 fa30 	bl	801b088 <is_uxrce_rmw_identifier_valid>
 8019c28:	b918      	cbnz	r0, 8019c32 <rmw_destroy_publisher+0x1a>
 8019c2a:	2401      	movs	r4, #1
 8019c2c:	4620      	mov	r0, r4
 8019c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c32:	6863      	ldr	r3, [r4, #4]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d0f8      	beq.n	8019c2a <rmw_destroy_publisher+0x12>
 8019c38:	fab5 f485 	clz	r4, r5
 8019c3c:	0964      	lsrs	r4, r4, #5
 8019c3e:	2d00      	cmp	r5, #0
 8019c40:	d0f3      	beq.n	8019c2a <rmw_destroy_publisher+0x12>
 8019c42:	6828      	ldr	r0, [r5, #0]
 8019c44:	f001 fa20 	bl	801b088 <is_uxrce_rmw_identifier_valid>
 8019c48:	2800      	cmp	r0, #0
 8019c4a:	d0ee      	beq.n	8019c2a <rmw_destroy_publisher+0x12>
 8019c4c:	686e      	ldr	r6, [r5, #4]
 8019c4e:	2e00      	cmp	r6, #0
 8019c50:	d0eb      	beq.n	8019c2a <rmw_destroy_publisher+0x12>
 8019c52:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8019c54:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8019c58:	f005 febc 	bl	801f9d4 <destroy_topic>
 8019c5c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8019c60:	6972      	ldr	r2, [r6, #20]
 8019c62:	6918      	ldr	r0, [r3, #16]
 8019c64:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019c68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019c6c:	6819      	ldr	r1, [r3, #0]
 8019c6e:	f001 fd43 	bl	801b6f8 <uxr_buffer_delete_entity>
 8019c72:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8019c76:	4680      	mov	r8, r0
 8019c78:	6932      	ldr	r2, [r6, #16]
 8019c7a:	6918      	ldr	r0, [r3, #16]
 8019c7c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019c80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019c84:	6819      	ldr	r1, [r3, #0]
 8019c86:	f001 fd37 	bl	801b6f8 <uxr_buffer_delete_entity>
 8019c8a:	4606      	mov	r6, r0
 8019c8c:	6938      	ldr	r0, [r7, #16]
 8019c8e:	4642      	mov	r2, r8
 8019c90:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019c94:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019c98:	f001 f8e4 	bl	801ae64 <run_xrce_session>
 8019c9c:	693f      	ldr	r7, [r7, #16]
 8019c9e:	4632      	mov	r2, r6
 8019ca0:	4606      	mov	r6, r0
 8019ca2:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019ca6:	4638      	mov	r0, r7
 8019ca8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8019cac:	f001 f8da 	bl	801ae64 <run_xrce_session>
 8019cb0:	b126      	cbz	r6, 8019cbc <rmw_destroy_publisher+0xa4>
 8019cb2:	b118      	cbz	r0, 8019cbc <rmw_destroy_publisher+0xa4>
 8019cb4:	4628      	mov	r0, r5
 8019cb6:	f000 ff71 	bl	801ab9c <rmw_uxrce_fini_publisher_memory>
 8019cba:	e7b7      	b.n	8019c2c <rmw_destroy_publisher+0x14>
 8019cbc:	2402      	movs	r4, #2
 8019cbe:	e7f9      	b.n	8019cb4 <rmw_destroy_publisher+0x9c>

08019cc0 <rmw_send_request>:
 8019cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019cc4:	4604      	mov	r4, r0
 8019cc6:	6800      	ldr	r0, [r0, #0]
 8019cc8:	b08b      	sub	sp, #44	@ 0x2c
 8019cca:	460e      	mov	r6, r1
 8019ccc:	4615      	mov	r5, r2
 8019cce:	b128      	cbz	r0, 8019cdc <rmw_send_request+0x1c>
 8019cd0:	4b21      	ldr	r3, [pc, #132]	@ (8019d58 <rmw_send_request+0x98>)
 8019cd2:	6819      	ldr	r1, [r3, #0]
 8019cd4:	f7e6 fb04 	bl	80002e0 <strcmp>
 8019cd8:	2800      	cmp	r0, #0
 8019cda:	d139      	bne.n	8019d50 <rmw_send_request+0x90>
 8019cdc:	6864      	ldr	r4, [r4, #4]
 8019cde:	2700      	movs	r7, #0
 8019ce0:	6963      	ldr	r3, [r4, #20]
 8019ce2:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8019ce6:	689b      	ldr	r3, [r3, #8]
 8019ce8:	4798      	blx	r3
 8019cea:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8019cee:	4630      	mov	r0, r6
 8019cf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019cf4:	4798      	blx	r3
 8019cf6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019cfa:	9000      	str	r0, [sp, #0]
 8019cfc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8019d00:	6922      	ldr	r2, [r4, #16]
 8019d02:	ab02      	add	r3, sp, #8
 8019d04:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8019d06:	f004 f81b 	bl	801dd40 <uxr_prepare_output_stream>
 8019d0a:	e9c5 0700 	strd	r0, r7, [r5]
 8019d0e:	b198      	cbz	r0, 8019d38 <rmw_send_request+0x78>
 8019d10:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019d14:	a902      	add	r1, sp, #8
 8019d16:	4630      	mov	r0, r6
 8019d18:	4798      	blx	r3
 8019d1a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8019d1e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019d22:	2b01      	cmp	r3, #1
 8019d24:	d00c      	beq.n	8019d40 <rmw_send_request+0x80>
 8019d26:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8019d28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019d2c:	f002 fe18 	bl	801c960 <uxr_run_session_until_confirm_delivery>
 8019d30:	4638      	mov	r0, r7
 8019d32:	b00b      	add	sp, #44	@ 0x2c
 8019d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d38:	2001      	movs	r0, #1
 8019d3a:	b00b      	add	sp, #44	@ 0x2c
 8019d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019d44:	f002 fa52 	bl	801c1ec <uxr_flash_output_streams>
 8019d48:	4638      	mov	r0, r7
 8019d4a:	b00b      	add	sp, #44	@ 0x2c
 8019d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d50:	200c      	movs	r0, #12
 8019d52:	b00b      	add	sp, #44	@ 0x2c
 8019d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d58:	08024500 	.word	0x08024500

08019d5c <rmw_take_request>:
 8019d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d60:	4605      	mov	r5, r0
 8019d62:	6800      	ldr	r0, [r0, #0]
 8019d64:	b089      	sub	sp, #36	@ 0x24
 8019d66:	460c      	mov	r4, r1
 8019d68:	4690      	mov	r8, r2
 8019d6a:	461e      	mov	r6, r3
 8019d6c:	b128      	cbz	r0, 8019d7a <rmw_take_request+0x1e>
 8019d6e:	4b28      	ldr	r3, [pc, #160]	@ (8019e10 <rmw_take_request+0xb4>)
 8019d70:	6819      	ldr	r1, [r3, #0]
 8019d72:	f7e6 fab5 	bl	80002e0 <strcmp>
 8019d76:	2800      	cmp	r0, #0
 8019d78:	d146      	bne.n	8019e08 <rmw_take_request+0xac>
 8019d7a:	b10e      	cbz	r6, 8019d80 <rmw_take_request+0x24>
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	7033      	strb	r3, [r6, #0]
 8019d80:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8019d84:	f000 fff0 	bl	801ad68 <rmw_uxrce_clean_expired_static_input_buffer>
 8019d88:	4648      	mov	r0, r9
 8019d8a:	f000 ffc5 	bl	801ad18 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019d8e:	4607      	mov	r7, r0
 8019d90:	b3b0      	cbz	r0, 8019e00 <rmw_take_request+0xa4>
 8019d92:	6885      	ldr	r5, [r0, #8]
 8019d94:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8019d98:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8019d9c:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8019da0:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8019da4:	7423      	strb	r3, [r4, #16]
 8019da6:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 8019daa:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 8019dae:	f8a4 2011 	strh.w	r2, [r4, #17]
 8019db2:	74e3      	strb	r3, [r4, #19]
 8019db4:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8019db8:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8019dbc:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 8019dc0:	6161      	str	r1, [r4, #20]
 8019dc2:	61a2      	str	r2, [r4, #24]
 8019dc4:	61e3      	str	r3, [r4, #28]
 8019dc6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8019dca:	689b      	ldr	r3, [r3, #8]
 8019dcc:	4798      	blx	r3
 8019dce:	6844      	ldr	r4, [r0, #4]
 8019dd0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8019dd4:	f105 0110 	add.w	r1, r5, #16
 8019dd8:	4668      	mov	r0, sp
 8019dda:	f7f9 ff43 	bl	8013c64 <ucdr_init_buffer>
 8019dde:	4641      	mov	r1, r8
 8019de0:	68e3      	ldr	r3, [r4, #12]
 8019de2:	4668      	mov	r0, sp
 8019de4:	4798      	blx	r3
 8019de6:	4639      	mov	r1, r7
 8019de8:	4604      	mov	r4, r0
 8019dea:	480a      	ldr	r0, [pc, #40]	@ (8019e14 <rmw_take_request+0xb8>)
 8019dec:	f005 fd64 	bl	801f8b8 <put_memory>
 8019df0:	b106      	cbz	r6, 8019df4 <rmw_take_request+0x98>
 8019df2:	7034      	strb	r4, [r6, #0]
 8019df4:	f084 0001 	eor.w	r0, r4, #1
 8019df8:	b2c0      	uxtb	r0, r0
 8019dfa:	b009      	add	sp, #36	@ 0x24
 8019dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e00:	2001      	movs	r0, #1
 8019e02:	b009      	add	sp, #36	@ 0x24
 8019e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e08:	200c      	movs	r0, #12
 8019e0a:	b009      	add	sp, #36	@ 0x24
 8019e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e10:	08024500 	.word	0x08024500
 8019e14:	24069534 	.word	0x24069534

08019e18 <rmw_send_response>:
 8019e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e1a:	4605      	mov	r5, r0
 8019e1c:	6800      	ldr	r0, [r0, #0]
 8019e1e:	b091      	sub	sp, #68	@ 0x44
 8019e20:	460c      	mov	r4, r1
 8019e22:	4616      	mov	r6, r2
 8019e24:	b128      	cbz	r0, 8019e32 <rmw_send_response+0x1a>
 8019e26:	4b29      	ldr	r3, [pc, #164]	@ (8019ecc <rmw_send_response+0xb4>)
 8019e28:	6819      	ldr	r1, [r3, #0]
 8019e2a:	f7e6 fa59 	bl	80002e0 <strcmp>
 8019e2e:	2800      	cmp	r0, #0
 8019e30:	d141      	bne.n	8019eb6 <rmw_send_response+0x9e>
 8019e32:	686d      	ldr	r5, [r5, #4]
 8019e34:	68a1      	ldr	r1, [r4, #8]
 8019e36:	6860      	ldr	r0, [r4, #4]
 8019e38:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8019e3a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8019e3e:	9307      	str	r3, [sp, #28]
 8019e40:	4623      	mov	r3, r4
 8019e42:	9206      	str	r2, [sp, #24]
 8019e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e48:	789b      	ldrb	r3, [r3, #2]
 8019e4a:	f88d 2017 	strb.w	r2, [sp, #23]
 8019e4e:	f88d 3016 	strb.w	r3, [sp, #22]
 8019e52:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8019e56:	68e2      	ldr	r2, [r4, #12]
 8019e58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019e5c:	ab02      	add	r3, sp, #8
 8019e5e:	696c      	ldr	r4, [r5, #20]
 8019e60:	c307      	stmia	r3!, {r0, r1, r2}
 8019e62:	68e3      	ldr	r3, [r4, #12]
 8019e64:	4798      	blx	r3
 8019e66:	6844      	ldr	r4, [r0, #4]
 8019e68:	4630      	mov	r0, r6
 8019e6a:	6923      	ldr	r3, [r4, #16]
 8019e6c:	4798      	blx	r3
 8019e6e:	f100 0318 	add.w	r3, r0, #24
 8019e72:	6938      	ldr	r0, [r7, #16]
 8019e74:	9300      	str	r3, [sp, #0]
 8019e76:	ab08      	add	r3, sp, #32
 8019e78:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019e7c:	692a      	ldr	r2, [r5, #16]
 8019e7e:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8019e80:	f003 ff5e 	bl	801dd40 <uxr_prepare_output_stream>
 8019e84:	b910      	cbnz	r0, 8019e8c <rmw_send_response+0x74>
 8019e86:	2001      	movs	r0, #1
 8019e88:	b011      	add	sp, #68	@ 0x44
 8019e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e8c:	a902      	add	r1, sp, #8
 8019e8e:	a808      	add	r0, sp, #32
 8019e90:	f004 fff8 	bl	801ee84 <uxr_serialize_SampleIdentity>
 8019e94:	68a3      	ldr	r3, [r4, #8]
 8019e96:	a908      	add	r1, sp, #32
 8019e98:	4630      	mov	r0, r6
 8019e9a:	4798      	blx	r3
 8019e9c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8019ea0:	6938      	ldr	r0, [r7, #16]
 8019ea2:	2b01      	cmp	r3, #1
 8019ea4:	d00a      	beq.n	8019ebc <rmw_send_response+0xa4>
 8019ea6:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8019ea8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019eac:	f002 fd58 	bl	801c960 <uxr_run_session_until_confirm_delivery>
 8019eb0:	2000      	movs	r0, #0
 8019eb2:	b011      	add	sp, #68	@ 0x44
 8019eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019eb6:	200c      	movs	r0, #12
 8019eb8:	b011      	add	sp, #68	@ 0x44
 8019eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ebc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019ec0:	f002 f994 	bl	801c1ec <uxr_flash_output_streams>
 8019ec4:	2000      	movs	r0, #0
 8019ec6:	b011      	add	sp, #68	@ 0x44
 8019ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019eca:	bf00      	nop
 8019ecc:	08024500 	.word	0x08024500

08019ed0 <rmw_take_response>:
 8019ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ed4:	4604      	mov	r4, r0
 8019ed6:	6800      	ldr	r0, [r0, #0]
 8019ed8:	b088      	sub	sp, #32
 8019eda:	460f      	mov	r7, r1
 8019edc:	4690      	mov	r8, r2
 8019ede:	461d      	mov	r5, r3
 8019ee0:	b120      	cbz	r0, 8019eec <rmw_take_response+0x1c>
 8019ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8019f58 <rmw_take_response+0x88>)
 8019ee4:	6819      	ldr	r1, [r3, #0]
 8019ee6:	f7e6 f9fb 	bl	80002e0 <strcmp>
 8019eea:	bb68      	cbnz	r0, 8019f48 <rmw_take_response+0x78>
 8019eec:	b10d      	cbz	r5, 8019ef2 <rmw_take_response+0x22>
 8019eee:	2300      	movs	r3, #0
 8019ef0:	702b      	strb	r3, [r5, #0]
 8019ef2:	6864      	ldr	r4, [r4, #4]
 8019ef4:	f000 ff38 	bl	801ad68 <rmw_uxrce_clean_expired_static_input_buffer>
 8019ef8:	4620      	mov	r0, r4
 8019efa:	f000 ff0d 	bl	801ad18 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019efe:	4606      	mov	r6, r0
 8019f00:	b330      	cbz	r0, 8019f50 <rmw_take_response+0x80>
 8019f02:	6963      	ldr	r3, [r4, #20]
 8019f04:	6884      	ldr	r4, [r0, #8]
 8019f06:	68db      	ldr	r3, [r3, #12]
 8019f08:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8019f0c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8019f10:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8019f14:	4798      	blx	r3
 8019f16:	6847      	ldr	r7, [r0, #4]
 8019f18:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8019f1c:	f104 0110 	add.w	r1, r4, #16
 8019f20:	4668      	mov	r0, sp
 8019f22:	f7f9 fe9f 	bl	8013c64 <ucdr_init_buffer>
 8019f26:	4641      	mov	r1, r8
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	4668      	mov	r0, sp
 8019f2c:	4798      	blx	r3
 8019f2e:	4631      	mov	r1, r6
 8019f30:	4604      	mov	r4, r0
 8019f32:	480a      	ldr	r0, [pc, #40]	@ (8019f5c <rmw_take_response+0x8c>)
 8019f34:	f005 fcc0 	bl	801f8b8 <put_memory>
 8019f38:	b105      	cbz	r5, 8019f3c <rmw_take_response+0x6c>
 8019f3a:	702c      	strb	r4, [r5, #0]
 8019f3c:	f084 0001 	eor.w	r0, r4, #1
 8019f40:	b2c0      	uxtb	r0, r0
 8019f42:	b008      	add	sp, #32
 8019f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f48:	200c      	movs	r0, #12
 8019f4a:	b008      	add	sp, #32
 8019f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f50:	2001      	movs	r0, #1
 8019f52:	b008      	add	sp, #32
 8019f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f58:	08024500 	.word	0x08024500
 8019f5c:	24069534 	.word	0x24069534

08019f60 <rmw_create_service>:
 8019f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f64:	b091      	sub	sp, #68	@ 0x44
 8019f66:	2900      	cmp	r1, #0
 8019f68:	f000 80bb 	beq.w	801a0e2 <rmw_create_service+0x182>
 8019f6c:	4606      	mov	r6, r0
 8019f6e:	2800      	cmp	r0, #0
 8019f70:	f000 80b7 	beq.w	801a0e2 <rmw_create_service+0x182>
 8019f74:	4614      	mov	r4, r2
 8019f76:	6800      	ldr	r0, [r0, #0]
 8019f78:	4689      	mov	r9, r1
 8019f7a:	461d      	mov	r5, r3
 8019f7c:	f001 f884 	bl	801b088 <is_uxrce_rmw_identifier_valid>
 8019f80:	2c00      	cmp	r4, #0
 8019f82:	f000 80ae 	beq.w	801a0e2 <rmw_create_service+0x182>
 8019f86:	f080 0001 	eor.w	r0, r0, #1
 8019f8a:	b2c0      	uxtb	r0, r0
 8019f8c:	2800      	cmp	r0, #0
 8019f8e:	f040 80a8 	bne.w	801a0e2 <rmw_create_service+0x182>
 8019f92:	7823      	ldrb	r3, [r4, #0]
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	f000 80a4 	beq.w	801a0e2 <rmw_create_service+0x182>
 8019f9a:	2d00      	cmp	r5, #0
 8019f9c:	f000 80a1 	beq.w	801a0e2 <rmw_create_service+0x182>
 8019fa0:	4856      	ldr	r0, [pc, #344]	@ (801a0fc <rmw_create_service+0x19c>)
 8019fa2:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8019fa6:	f005 fc77 	bl	801f898 <get_memory>
 8019faa:	4606      	mov	r6, r0
 8019fac:	2800      	cmp	r0, #0
 8019fae:	f000 8099 	beq.w	801a0e4 <rmw_create_service+0x184>
 8019fb2:	6887      	ldr	r7, [r0, #8]
 8019fb4:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 8019fb8:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8019fbc:	f7ff f9b2 	bl	8019324 <rmw_get_implementation_identifier>
 8019fc0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8019fc2:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8019fc6:	4620      	mov	r0, r4
 8019fc8:	f7e6 f994 	bl	80002f4 <strlen>
 8019fcc:	1c42      	adds	r2, r0, #1
 8019fce:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 8019fd2:	2a3c      	cmp	r2, #60	@ 0x3c
 8019fd4:	f200 808a 	bhi.w	801a0ec <rmw_create_service+0x18c>
 8019fd8:	4621      	mov	r1, r4
 8019fda:	4650      	mov	r0, sl
 8019fdc:	f007 f90d 	bl	80211fa <memcpy>
 8019fe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019fe4:	4629      	mov	r1, r5
 8019fe6:	2250      	movs	r2, #80	@ 0x50
 8019fe8:	f107 0020 	add.w	r0, r7, #32
 8019fec:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 8019ff0:	677b      	str	r3, [r7, #116]	@ 0x74
 8019ff2:	f007 f902 	bl	80211fa <memcpy>
 8019ff6:	4648      	mov	r0, r9
 8019ff8:	4941      	ldr	r1, [pc, #260]	@ (801a100 <rmw_create_service+0x1a0>)
 8019ffa:	f7fa ff2b 	bl	8014e54 <get_service_typesupport_handle>
 8019ffe:	2800      	cmp	r0, #0
 801a000:	d074      	beq.n	801a0ec <rmw_create_service+0x18c>
 801a002:	6843      	ldr	r3, [r0, #4]
 801a004:	617b      	str	r3, [r7, #20]
 801a006:	2b00      	cmp	r3, #0
 801a008:	d070      	beq.n	801a0ec <rmw_create_service+0x18c>
 801a00a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a00e:	2108      	movs	r1, #8
 801a010:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 801a108 <rmw_create_service+0x1a8>
 801a014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a018:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 801a10c <rmw_create_service+0x1ac>
 801a01c:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 801a020:	1c42      	adds	r2, r0, #1
 801a022:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801a026:	f001 fe61 	bl	801bcec <uxr_object_id>
 801a02a:	2364      	movs	r3, #100	@ 0x64
 801a02c:	6138      	str	r0, [r7, #16]
 801a02e:	4652      	mov	r2, sl
 801a030:	4649      	mov	r1, r9
 801a032:	6978      	ldr	r0, [r7, #20]
 801a034:	f000 ff7c 	bl	801af30 <generate_service_types>
 801a038:	2800      	cmp	r0, #0
 801a03a:	d057      	beq.n	801a0ec <rmw_create_service+0x18c>
 801a03c:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 801a110 <rmw_create_service+0x1b0>
 801a040:	233c      	movs	r3, #60	@ 0x3c
 801a042:	4a30      	ldr	r2, [pc, #192]	@ (801a104 <rmw_create_service+0x1a4>)
 801a044:	4620      	mov	r0, r4
 801a046:	4659      	mov	r1, fp
 801a048:	f000 ff40 	bl	801aecc <generate_service_topics>
 801a04c:	2800      	cmp	r0, #0
 801a04e:	d04d      	beq.n	801a0ec <rmw_create_service+0x18c>
 801a050:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a054:	a80c      	add	r0, sp, #48	@ 0x30
 801a056:	4629      	mov	r1, r5
 801a058:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 801a05c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a060:	f000 ff1c 	bl	801ae9c <convert_qos_profile>
 801a064:	4a27      	ldr	r2, [pc, #156]	@ (801a104 <rmw_create_service+0x1a4>)
 801a066:	a80c      	add	r0, sp, #48	@ 0x30
 801a068:	9400      	str	r4, [sp, #0]
 801a06a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a06c:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a070:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801a074:	c803      	ldmia	r0, {r0, r1}
 801a076:	9a08      	ldr	r2, [sp, #32]
 801a078:	9005      	str	r0, [sp, #20]
 801a07a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801a07e:	2306      	movs	r3, #6
 801a080:	f8ad 1018 	strh.w	r1, [sp, #24]
 801a084:	9307      	str	r3, [sp, #28]
 801a086:	6811      	ldr	r1, [r2, #0]
 801a088:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801a08c:	693a      	ldr	r2, [r7, #16]
 801a08e:	f001 fd35 	bl	801bafc <uxr_buffer_create_replier_bin>
 801a092:	4602      	mov	r2, r0
 801a094:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a098:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801a09c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801a0a0:	f000 fee0 	bl	801ae64 <run_xrce_session>
 801a0a4:	b310      	cbz	r0, 801a0ec <rmw_create_service+0x18c>
 801a0a6:	7a2b      	ldrb	r3, [r5, #8]
 801a0a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a0ac:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a0b0:	2b02      	cmp	r3, #2
 801a0b2:	920e      	str	r2, [sp, #56]	@ 0x38
 801a0b4:	f04f 0200 	mov.w	r2, #0
 801a0b8:	920f      	str	r2, [sp, #60]	@ 0x3c
 801a0ba:	bf0c      	ite	eq
 801a0bc:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 801a0c0:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 801a0c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a0c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a0ca:	ab0e      	add	r3, sp, #56	@ 0x38
 801a0cc:	673a      	str	r2, [r7, #112]	@ 0x70
 801a0ce:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 801a0d2:	9300      	str	r3, [sp, #0]
 801a0d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a0d6:	6811      	ldr	r1, [r2, #0]
 801a0d8:	693a      	ldr	r2, [r7, #16]
 801a0da:	f001 fe37 	bl	801bd4c <uxr_buffer_request_data>
 801a0de:	8338      	strh	r0, [r7, #24]
 801a0e0:	e000      	b.n	801a0e4 <rmw_create_service+0x184>
 801a0e2:	2600      	movs	r6, #0
 801a0e4:	4630      	mov	r0, r6
 801a0e6:	b011      	add	sp, #68	@ 0x44
 801a0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0ec:	4630      	mov	r0, r6
 801a0ee:	2600      	movs	r6, #0
 801a0f0:	f000 fd80 	bl	801abf4 <rmw_uxrce_fini_service_memory>
 801a0f4:	4630      	mov	r0, r6
 801a0f6:	b011      	add	sp, #68	@ 0x44
 801a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0fc:	24069514 	.word	0x24069514
 801a100:	08022314 	.word	0x08022314
 801a104:	24064b88 	.word	0x24064b88
 801a108:	24064bc4 	.word	0x24064bc4
 801a10c:	24064b24 	.word	0x24064b24
 801a110:	24064ae8 	.word	0x24064ae8

0801a114 <rmw_destroy_service>:
 801a114:	b570      	push	{r4, r5, r6, lr}
 801a116:	b128      	cbz	r0, 801a124 <rmw_destroy_service+0x10>
 801a118:	4604      	mov	r4, r0
 801a11a:	6800      	ldr	r0, [r0, #0]
 801a11c:	460d      	mov	r5, r1
 801a11e:	f000 ffb3 	bl	801b088 <is_uxrce_rmw_identifier_valid>
 801a122:	b910      	cbnz	r0, 801a12a <rmw_destroy_service+0x16>
 801a124:	2401      	movs	r4, #1
 801a126:	4620      	mov	r0, r4
 801a128:	bd70      	pop	{r4, r5, r6, pc}
 801a12a:	6863      	ldr	r3, [r4, #4]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d0f9      	beq.n	801a124 <rmw_destroy_service+0x10>
 801a130:	2d00      	cmp	r5, #0
 801a132:	d0f7      	beq.n	801a124 <rmw_destroy_service+0x10>
 801a134:	6828      	ldr	r0, [r5, #0]
 801a136:	f000 ffa7 	bl	801b088 <is_uxrce_rmw_identifier_valid>
 801a13a:	2800      	cmp	r0, #0
 801a13c:	d0f2      	beq.n	801a124 <rmw_destroy_service+0x10>
 801a13e:	686e      	ldr	r6, [r5, #4]
 801a140:	2e00      	cmp	r6, #0
 801a142:	d0ef      	beq.n	801a124 <rmw_destroy_service+0x10>
 801a144:	6864      	ldr	r4, [r4, #4]
 801a146:	6932      	ldr	r2, [r6, #16]
 801a148:	6920      	ldr	r0, [r4, #16]
 801a14a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a14e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a152:	6819      	ldr	r1, [r3, #0]
 801a154:	f001 fe34 	bl	801bdc0 <uxr_buffer_cancel_data>
 801a158:	4602      	mov	r2, r0
 801a15a:	6920      	ldr	r0, [r4, #16]
 801a15c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a160:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a164:	f000 fe7e 	bl	801ae64 <run_xrce_session>
 801a168:	6920      	ldr	r0, [r4, #16]
 801a16a:	6932      	ldr	r2, [r6, #16]
 801a16c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a170:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a174:	6819      	ldr	r1, [r3, #0]
 801a176:	f001 fabf 	bl	801b6f8 <uxr_buffer_delete_entity>
 801a17a:	4602      	mov	r2, r0
 801a17c:	6920      	ldr	r0, [r4, #16]
 801a17e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a182:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a186:	f000 fe6d 	bl	801ae64 <run_xrce_session>
 801a18a:	4603      	mov	r3, r0
 801a18c:	4628      	mov	r0, r5
 801a18e:	2b00      	cmp	r3, #0
 801a190:	bf14      	ite	ne
 801a192:	2400      	movne	r4, #0
 801a194:	2402      	moveq	r4, #2
 801a196:	f000 fd2d 	bl	801abf4 <rmw_uxrce_fini_service_memory>
 801a19a:	e7c4      	b.n	801a126 <rmw_destroy_service+0x12>

0801a19c <rmw_service_response_publisher_get_actual_qos>:
 801a19c:	b181      	cbz	r1, 801a1c0 <rmw_service_response_publisher_get_actual_qos+0x24>
 801a19e:	4603      	mov	r3, r0
 801a1a0:	b510      	push	{r4, lr}
 801a1a2:	fab0 f480 	clz	r4, r0
 801a1a6:	0964      	lsrs	r4, r4, #5
 801a1a8:	b140      	cbz	r0, 801a1bc <rmw_service_response_publisher_get_actual_qos+0x20>
 801a1aa:	685b      	ldr	r3, [r3, #4]
 801a1ac:	4608      	mov	r0, r1
 801a1ae:	2250      	movs	r2, #80	@ 0x50
 801a1b0:	f103 0120 	add.w	r1, r3, #32
 801a1b4:	f007 f821 	bl	80211fa <memcpy>
 801a1b8:	4620      	mov	r0, r4
 801a1ba:	bd10      	pop	{r4, pc}
 801a1bc:	200b      	movs	r0, #11
 801a1be:	bd10      	pop	{r4, pc}
 801a1c0:	200b      	movs	r0, #11
 801a1c2:	4770      	bx	lr

0801a1c4 <rmw_service_request_subscription_get_actual_qos>:
 801a1c4:	b178      	cbz	r0, 801a1e6 <rmw_service_request_subscription_get_actual_qos+0x22>
 801a1c6:	b510      	push	{r4, lr}
 801a1c8:	fab1 f481 	clz	r4, r1
 801a1cc:	0964      	lsrs	r4, r4, #5
 801a1ce:	b141      	cbz	r1, 801a1e2 <rmw_service_request_subscription_get_actual_qos+0x1e>
 801a1d0:	6843      	ldr	r3, [r0, #4]
 801a1d2:	2250      	movs	r2, #80	@ 0x50
 801a1d4:	4608      	mov	r0, r1
 801a1d6:	f103 0120 	add.w	r1, r3, #32
 801a1da:	f007 f80e 	bl	80211fa <memcpy>
 801a1de:	4620      	mov	r0, r4
 801a1e0:	bd10      	pop	{r4, pc}
 801a1e2:	200b      	movs	r0, #11
 801a1e4:	bd10      	pop	{r4, pc}
 801a1e6:	200b      	movs	r0, #11
 801a1e8:	4770      	bx	lr
 801a1ea:	bf00      	nop

0801a1ec <rmw_create_subscription>:
 801a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1f0:	b08d      	sub	sp, #52	@ 0x34
 801a1f2:	2900      	cmp	r1, #0
 801a1f4:	f000 80d8 	beq.w	801a3a8 <rmw_create_subscription+0x1bc>
 801a1f8:	4604      	mov	r4, r0
 801a1fa:	2800      	cmp	r0, #0
 801a1fc:	f000 80d4 	beq.w	801a3a8 <rmw_create_subscription+0x1bc>
 801a200:	6800      	ldr	r0, [r0, #0]
 801a202:	460e      	mov	r6, r1
 801a204:	4615      	mov	r5, r2
 801a206:	461f      	mov	r7, r3
 801a208:	f000 ff3e 	bl	801b088 <is_uxrce_rmw_identifier_valid>
 801a20c:	f080 0001 	eor.w	r0, r0, #1
 801a210:	b2c0      	uxtb	r0, r0
 801a212:	2800      	cmp	r0, #0
 801a214:	f040 80c8 	bne.w	801a3a8 <rmw_create_subscription+0x1bc>
 801a218:	2d00      	cmp	r5, #0
 801a21a:	f000 80c5 	beq.w	801a3a8 <rmw_create_subscription+0x1bc>
 801a21e:	782b      	ldrb	r3, [r5, #0]
 801a220:	2b00      	cmp	r3, #0
 801a222:	f000 80c1 	beq.w	801a3a8 <rmw_create_subscription+0x1bc>
 801a226:	2f00      	cmp	r7, #0
 801a228:	f000 80be 	beq.w	801a3a8 <rmw_create_subscription+0x1bc>
 801a22c:	4867      	ldr	r0, [pc, #412]	@ (801a3cc <rmw_create_subscription+0x1e0>)
 801a22e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801a232:	f005 fb31 	bl	801f898 <get_memory>
 801a236:	4604      	mov	r4, r0
 801a238:	2800      	cmp	r0, #0
 801a23a:	f000 80b6 	beq.w	801a3aa <rmw_create_subscription+0x1be>
 801a23e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a242:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 801a246:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 801a24a:	f7ff f86b 	bl	8019324 <rmw_get_implementation_identifier>
 801a24e:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 801a252:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 801a256:	4628      	mov	r0, r5
 801a258:	f7e6 f84c 	bl	80002f4 <strlen>
 801a25c:	3001      	adds	r0, #1
 801a25e:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 801a262:	283c      	cmp	r0, #60	@ 0x3c
 801a264:	f200 80a5 	bhi.w	801a3b2 <rmw_create_subscription+0x1c6>
 801a268:	462b      	mov	r3, r5
 801a26a:	4a59      	ldr	r2, [pc, #356]	@ (801a3d0 <rmw_create_subscription+0x1e4>)
 801a26c:	213c      	movs	r1, #60	@ 0x3c
 801a26e:	4650      	mov	r0, sl
 801a270:	f006 fd16 	bl	8020ca0 <sniprintf>
 801a274:	4639      	mov	r1, r7
 801a276:	2250      	movs	r2, #80	@ 0x50
 801a278:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 801a27c:	f8c8 9020 	str.w	r9, [r8, #32]
 801a280:	f006 ffbb 	bl	80211fa <memcpy>
 801a284:	4630      	mov	r0, r6
 801a286:	4953      	ldr	r1, [pc, #332]	@ (801a3d4 <rmw_create_subscription+0x1e8>)
 801a288:	f7fa fdd8 	bl	8014e3c <get_message_typesupport_handle>
 801a28c:	2800      	cmp	r0, #0
 801a28e:	f000 8090 	beq.w	801a3b2 <rmw_create_subscription+0x1c6>
 801a292:	6842      	ldr	r2, [r0, #4]
 801a294:	f8c8 2018 	str.w	r2, [r8, #24]
 801a298:	2a00      	cmp	r2, #0
 801a29a:	f000 808a 	beq.w	801a3b2 <rmw_create_subscription+0x1c6>
 801a29e:	4629      	mov	r1, r5
 801a2a0:	463b      	mov	r3, r7
 801a2a2:	4648      	mov	r0, r9
 801a2a4:	f005 fb46 	bl	801f934 <create_topic>
 801a2a8:	f8c8 001c 	str.w	r0, [r8, #28]
 801a2ac:	2800      	cmp	r0, #0
 801a2ae:	f000 8085 	beq.w	801a3bc <rmw_create_subscription+0x1d0>
 801a2b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a2b6:	2104      	movs	r1, #4
 801a2b8:	2506      	movs	r5, #6
 801a2ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a2be:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801a2c2:	1c42      	adds	r2, r0, #1
 801a2c4:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801a2c8:	f001 fd10 	bl	801bcec <uxr_object_id>
 801a2cc:	f8c8 0010 	str.w	r0, [r8, #16]
 801a2d0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a2d4:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801a2d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a2dc:	9500      	str	r5, [sp, #0]
 801a2de:	6819      	ldr	r1, [r3, #0]
 801a2e0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a2e4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a2e8:	f001 faea 	bl	801b8c0 <uxr_buffer_create_subscriber_bin>
 801a2ec:	4602      	mov	r2, r0
 801a2ee:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a2f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801a2f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801a2fa:	f000 fdb3 	bl	801ae64 <run_xrce_session>
 801a2fe:	2800      	cmp	r0, #0
 801a300:	d057      	beq.n	801a3b2 <rmw_create_subscription+0x1c6>
 801a302:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a306:	4629      	mov	r1, r5
 801a308:	ae08      	add	r6, sp, #32
 801a30a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a30e:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801a312:	1c42      	adds	r2, r0, #1
 801a314:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801a318:	f001 fce8 	bl	801bcec <uxr_object_id>
 801a31c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a320:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801a324:	4639      	mov	r1, r7
 801a326:	f8c8 0014 	str.w	r0, [r8, #20]
 801a32a:	4630      	mov	r0, r6
 801a32c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801a330:	9305      	str	r3, [sp, #20]
 801a332:	f000 fdb3 	bl	801ae9c <convert_qos_profile>
 801a336:	9503      	str	r5, [sp, #12]
 801a338:	9b05      	ldr	r3, [sp, #20]
 801a33a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a33e:	9001      	str	r0, [sp, #4]
 801a340:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801a344:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a348:	691b      	ldr	r3, [r3, #16]
 801a34a:	9300      	str	r3, [sp, #0]
 801a34c:	f8db 1000 	ldr.w	r1, [fp]
 801a350:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801a354:	f001 fb5a 	bl	801ba0c <uxr_buffer_create_datareader_bin>
 801a358:	4602      	mov	r2, r0
 801a35a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a35e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801a362:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801a366:	f000 fd7d 	bl	801ae64 <run_xrce_session>
 801a36a:	b310      	cbz	r0, 801a3b2 <rmw_create_subscription+0x1c6>
 801a36c:	7a3b      	ldrb	r3, [r7, #8]
 801a36e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a372:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a376:	2b02      	cmp	r3, #2
 801a378:	920a      	str	r2, [sp, #40]	@ 0x28
 801a37a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801a37e:	f04f 0200 	mov.w	r2, #0
 801a382:	bf08      	it	eq
 801a384:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801a388:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a38c:	bf18      	it	ne
 801a38e:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 801a392:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a394:	9307      	str	r3, [sp, #28]
 801a396:	ab0a      	add	r3, sp, #40	@ 0x28
 801a398:	9300      	str	r3, [sp, #0]
 801a39a:	9b07      	ldr	r3, [sp, #28]
 801a39c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801a3a0:	6809      	ldr	r1, [r1, #0]
 801a3a2:	f001 fcd3 	bl	801bd4c <uxr_buffer_request_data>
 801a3a6:	e000      	b.n	801a3aa <rmw_create_subscription+0x1be>
 801a3a8:	2400      	movs	r4, #0
 801a3aa:	4620      	mov	r0, r4
 801a3ac:	b00d      	add	sp, #52	@ 0x34
 801a3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3b2:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801a3b6:	b108      	cbz	r0, 801a3bc <rmw_create_subscription+0x1d0>
 801a3b8:	f000 fc48 	bl	801ac4c <rmw_uxrce_fini_topic_memory>
 801a3bc:	4620      	mov	r0, r4
 801a3be:	2400      	movs	r4, #0
 801a3c0:	f000 fc02 	bl	801abc8 <rmw_uxrce_fini_subscription_memory>
 801a3c4:	4620      	mov	r0, r4
 801a3c6:	b00d      	add	sp, #52	@ 0x34
 801a3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3cc:	24069544 	.word	0x24069544
 801a3d0:	080241d4 	.word	0x080241d4
 801a3d4:	08022314 	.word	0x08022314

0801a3d8 <rmw_subscription_get_actual_qos>:
 801a3d8:	b178      	cbz	r0, 801a3fa <rmw_subscription_get_actual_qos+0x22>
 801a3da:	b510      	push	{r4, lr}
 801a3dc:	fab1 f481 	clz	r4, r1
 801a3e0:	0964      	lsrs	r4, r4, #5
 801a3e2:	b141      	cbz	r1, 801a3f6 <rmw_subscription_get_actual_qos+0x1e>
 801a3e4:	6843      	ldr	r3, [r0, #4]
 801a3e6:	2250      	movs	r2, #80	@ 0x50
 801a3e8:	4608      	mov	r0, r1
 801a3ea:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801a3ee:	f006 ff04 	bl	80211fa <memcpy>
 801a3f2:	4620      	mov	r0, r4
 801a3f4:	bd10      	pop	{r4, pc}
 801a3f6:	200b      	movs	r0, #11
 801a3f8:	bd10      	pop	{r4, pc}
 801a3fa:	200b      	movs	r0, #11
 801a3fc:	4770      	bx	lr
 801a3fe:	bf00      	nop

0801a400 <rmw_destroy_subscription>:
 801a400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a404:	b128      	cbz	r0, 801a412 <rmw_destroy_subscription+0x12>
 801a406:	4604      	mov	r4, r0
 801a408:	6800      	ldr	r0, [r0, #0]
 801a40a:	460d      	mov	r5, r1
 801a40c:	f000 fe3c 	bl	801b088 <is_uxrce_rmw_identifier_valid>
 801a410:	b918      	cbnz	r0, 801a41a <rmw_destroy_subscription+0x1a>
 801a412:	2401      	movs	r4, #1
 801a414:	4620      	mov	r0, r4
 801a416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a41a:	6863      	ldr	r3, [r4, #4]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d0f8      	beq.n	801a412 <rmw_destroy_subscription+0x12>
 801a420:	fab5 f485 	clz	r4, r5
 801a424:	0964      	lsrs	r4, r4, #5
 801a426:	2d00      	cmp	r5, #0
 801a428:	d0f3      	beq.n	801a412 <rmw_destroy_subscription+0x12>
 801a42a:	6828      	ldr	r0, [r5, #0]
 801a42c:	f000 fe2c 	bl	801b088 <is_uxrce_rmw_identifier_valid>
 801a430:	2800      	cmp	r0, #0
 801a432:	d0ee      	beq.n	801a412 <rmw_destroy_subscription+0x12>
 801a434:	686e      	ldr	r6, [r5, #4]
 801a436:	2e00      	cmp	r6, #0
 801a438:	d0eb      	beq.n	801a412 <rmw_destroy_subscription+0x12>
 801a43a:	6a37      	ldr	r7, [r6, #32]
 801a43c:	6972      	ldr	r2, [r6, #20]
 801a43e:	6938      	ldr	r0, [r7, #16]
 801a440:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a444:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a448:	6819      	ldr	r1, [r3, #0]
 801a44a:	f001 fcb9 	bl	801bdc0 <uxr_buffer_cancel_data>
 801a44e:	4602      	mov	r2, r0
 801a450:	6938      	ldr	r0, [r7, #16]
 801a452:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a456:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a45a:	f000 fd03 	bl	801ae64 <run_xrce_session>
 801a45e:	69f0      	ldr	r0, [r6, #28]
 801a460:	f005 fab8 	bl	801f9d4 <destroy_topic>
 801a464:	6a33      	ldr	r3, [r6, #32]
 801a466:	6972      	ldr	r2, [r6, #20]
 801a468:	6918      	ldr	r0, [r3, #16]
 801a46a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a46e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a472:	6819      	ldr	r1, [r3, #0]
 801a474:	f001 f940 	bl	801b6f8 <uxr_buffer_delete_entity>
 801a478:	6a33      	ldr	r3, [r6, #32]
 801a47a:	4680      	mov	r8, r0
 801a47c:	6932      	ldr	r2, [r6, #16]
 801a47e:	6918      	ldr	r0, [r3, #16]
 801a480:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a484:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a488:	6819      	ldr	r1, [r3, #0]
 801a48a:	f001 f935 	bl	801b6f8 <uxr_buffer_delete_entity>
 801a48e:	4606      	mov	r6, r0
 801a490:	6938      	ldr	r0, [r7, #16]
 801a492:	4642      	mov	r2, r8
 801a494:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a498:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a49c:	f000 fce2 	bl	801ae64 <run_xrce_session>
 801a4a0:	693f      	ldr	r7, [r7, #16]
 801a4a2:	4632      	mov	r2, r6
 801a4a4:	4606      	mov	r6, r0
 801a4a6:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801a4aa:	4638      	mov	r0, r7
 801a4ac:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801a4b0:	f000 fcd8 	bl	801ae64 <run_xrce_session>
 801a4b4:	b126      	cbz	r6, 801a4c0 <rmw_destroy_subscription+0xc0>
 801a4b6:	b118      	cbz	r0, 801a4c0 <rmw_destroy_subscription+0xc0>
 801a4b8:	4628      	mov	r0, r5
 801a4ba:	f000 fb85 	bl	801abc8 <rmw_uxrce_fini_subscription_memory>
 801a4be:	e7a9      	b.n	801a414 <rmw_destroy_subscription+0x14>
 801a4c0:	2402      	movs	r4, #2
 801a4c2:	e7f9      	b.n	801a4b8 <rmw_destroy_subscription+0xb8>

0801a4c4 <rmw_take_with_info>:
 801a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a4c6:	4604      	mov	r4, r0
 801a4c8:	6800      	ldr	r0, [r0, #0]
 801a4ca:	b089      	sub	sp, #36	@ 0x24
 801a4cc:	460f      	mov	r7, r1
 801a4ce:	4615      	mov	r5, r2
 801a4d0:	b128      	cbz	r0, 801a4de <rmw_take_with_info+0x1a>
 801a4d2:	4b24      	ldr	r3, [pc, #144]	@ (801a564 <rmw_take_with_info+0xa0>)
 801a4d4:	6819      	ldr	r1, [r3, #0]
 801a4d6:	f7e5 ff03 	bl	80002e0 <strcmp>
 801a4da:	2800      	cmp	r0, #0
 801a4dc:	d13e      	bne.n	801a55c <rmw_take_with_info+0x98>
 801a4de:	b305      	cbz	r5, 801a522 <rmw_take_with_info+0x5e>
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	6864      	ldr	r4, [r4, #4]
 801a4e4:	702b      	strb	r3, [r5, #0]
 801a4e6:	f000 fc3f 	bl	801ad68 <rmw_uxrce_clean_expired_static_input_buffer>
 801a4ea:	4620      	mov	r0, r4
 801a4ec:	f000 fc14 	bl	801ad18 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a4f0:	4606      	mov	r6, r0
 801a4f2:	b1f0      	cbz	r0, 801a532 <rmw_take_with_info+0x6e>
 801a4f4:	6881      	ldr	r1, [r0, #8]
 801a4f6:	4668      	mov	r0, sp
 801a4f8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801a4fc:	3110      	adds	r1, #16
 801a4fe:	f7f9 fbb1 	bl	8013c64 <ucdr_init_buffer>
 801a502:	69a3      	ldr	r3, [r4, #24]
 801a504:	4639      	mov	r1, r7
 801a506:	4668      	mov	r0, sp
 801a508:	68db      	ldr	r3, [r3, #12]
 801a50a:	4798      	blx	r3
 801a50c:	4604      	mov	r4, r0
 801a50e:	4631      	mov	r1, r6
 801a510:	4815      	ldr	r0, [pc, #84]	@ (801a568 <rmw_take_with_info+0xa4>)
 801a512:	f005 f9d1 	bl	801f8b8 <put_memory>
 801a516:	702c      	strb	r4, [r5, #0]
 801a518:	f084 0001 	eor.w	r0, r4, #1
 801a51c:	b2c0      	uxtb	r0, r0
 801a51e:	b009      	add	sp, #36	@ 0x24
 801a520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a522:	6864      	ldr	r4, [r4, #4]
 801a524:	f000 fc20 	bl	801ad68 <rmw_uxrce_clean_expired_static_input_buffer>
 801a528:	4620      	mov	r0, r4
 801a52a:	f000 fbf5 	bl	801ad18 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a52e:	4605      	mov	r5, r0
 801a530:	b910      	cbnz	r0, 801a538 <rmw_take_with_info+0x74>
 801a532:	2001      	movs	r0, #1
 801a534:	b009      	add	sp, #36	@ 0x24
 801a536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a538:	68a9      	ldr	r1, [r5, #8]
 801a53a:	4668      	mov	r0, sp
 801a53c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801a540:	3110      	adds	r1, #16
 801a542:	f7f9 fb8f 	bl	8013c64 <ucdr_init_buffer>
 801a546:	69a3      	ldr	r3, [r4, #24]
 801a548:	4639      	mov	r1, r7
 801a54a:	4668      	mov	r0, sp
 801a54c:	68db      	ldr	r3, [r3, #12]
 801a54e:	4798      	blx	r3
 801a550:	4629      	mov	r1, r5
 801a552:	4604      	mov	r4, r0
 801a554:	4804      	ldr	r0, [pc, #16]	@ (801a568 <rmw_take_with_info+0xa4>)
 801a556:	f005 f9af 	bl	801f8b8 <put_memory>
 801a55a:	e7dd      	b.n	801a518 <rmw_take_with_info+0x54>
 801a55c:	200c      	movs	r0, #12
 801a55e:	b009      	add	sp, #36	@ 0x24
 801a560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a562:	bf00      	nop
 801a564:	08024500 	.word	0x08024500
 801a568:	24069534 	.word	0x24069534

0801a56c <rmw_uxrce_transport_init>:
 801a56c:	b508      	push	{r3, lr}
 801a56e:	b108      	cbz	r0, 801a574 <rmw_uxrce_transport_init+0x8>
 801a570:	f100 0210 	add.w	r2, r0, #16
 801a574:	b139      	cbz	r1, 801a586 <rmw_uxrce_transport_init+0x1a>
 801a576:	6949      	ldr	r1, [r1, #20]
 801a578:	4610      	mov	r0, r2
 801a57a:	f001 fb7f 	bl	801bc7c <uxr_init_custom_transport>
 801a57e:	f080 0001 	eor.w	r0, r0, #1
 801a582:	b2c0      	uxtb	r0, r0
 801a584:	bd08      	pop	{r3, pc}
 801a586:	4b04      	ldr	r3, [pc, #16]	@ (801a598 <rmw_uxrce_transport_init+0x2c>)
 801a588:	4610      	mov	r0, r2
 801a58a:	6859      	ldr	r1, [r3, #4]
 801a58c:	f001 fb76 	bl	801bc7c <uxr_init_custom_transport>
 801a590:	f080 0001 	eor.w	r0, r0, #1
 801a594:	b2c0      	uxtb	r0, r0
 801a596:	bd08      	pop	{r3, pc}
 801a598:	24064924 	.word	0x24064924

0801a59c <rmw_wait>:
 801a59c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5a0:	4698      	mov	r8, r3
 801a5a2:	ea40 0301 	orr.w	r3, r0, r1
 801a5a6:	b089      	sub	sp, #36	@ 0x24
 801a5a8:	ea48 0303 	orr.w	r3, r8, r3
 801a5ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a5ae:	4313      	orrs	r3, r2
 801a5b0:	f000 8106 	beq.w	801a7c0 <rmw_wait+0x224>
 801a5b4:	4605      	mov	r5, r0
 801a5b6:	460e      	mov	r6, r1
 801a5b8:	4691      	mov	r9, r2
 801a5ba:	b16c      	cbz	r4, 801a5d8 <rmw_wait+0x3c>
 801a5bc:	4ba6      	ldr	r3, [pc, #664]	@ (801a858 <rmw_wait+0x2bc>)
 801a5be:	af04      	add	r7, sp, #16
 801a5c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a5c2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801a5c6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801a5ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a5ce:	f004 fff3 	bl	801f5b8 <rmw_time_equal>
 801a5d2:	2800      	cmp	r0, #0
 801a5d4:	f000 810b 	beq.w	801a7ee <rmw_wait+0x252>
 801a5d8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801a5dc:	f000 fbc4 	bl	801ad68 <rmw_uxrce_clean_expired_static_input_buffer>
 801a5e0:	4b9e      	ldr	r3, [pc, #632]	@ (801a85c <rmw_wait+0x2c0>)
 801a5e2:	681c      	ldr	r4, [r3, #0]
 801a5e4:	b14c      	cbz	r4, 801a5fa <rmw_wait+0x5e>
 801a5e6:	4623      	mov	r3, r4
 801a5e8:	2100      	movs	r1, #0
 801a5ea:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801a5ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a5f2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d1f7      	bne.n	801a5ea <rmw_wait+0x4e>
 801a5fa:	f1b9 0f00 	cmp.w	r9, #0
 801a5fe:	d011      	beq.n	801a624 <rmw_wait+0x88>
 801a600:	f8d9 1000 	ldr.w	r1, [r9]
 801a604:	b171      	cbz	r1, 801a624 <rmw_wait+0x88>
 801a606:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801a60a:	2300      	movs	r3, #0
 801a60c:	2001      	movs	r0, #1
 801a60e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a612:	3301      	adds	r3, #1
 801a614:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801a616:	4299      	cmp	r1, r3
 801a618:	6912      	ldr	r2, [r2, #16]
 801a61a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a61e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801a622:	d1f4      	bne.n	801a60e <rmw_wait+0x72>
 801a624:	f1b8 0f00 	cmp.w	r8, #0
 801a628:	d011      	beq.n	801a64e <rmw_wait+0xb2>
 801a62a:	f8d8 1000 	ldr.w	r1, [r8]
 801a62e:	b171      	cbz	r1, 801a64e <rmw_wait+0xb2>
 801a630:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801a634:	2300      	movs	r3, #0
 801a636:	2001      	movs	r0, #1
 801a638:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a63c:	3301      	adds	r3, #1
 801a63e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801a640:	4299      	cmp	r1, r3
 801a642:	6912      	ldr	r2, [r2, #16]
 801a644:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a648:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801a64c:	d1f4      	bne.n	801a638 <rmw_wait+0x9c>
 801a64e:	b185      	cbz	r5, 801a672 <rmw_wait+0xd6>
 801a650:	6829      	ldr	r1, [r5, #0]
 801a652:	b171      	cbz	r1, 801a672 <rmw_wait+0xd6>
 801a654:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801a658:	2300      	movs	r3, #0
 801a65a:	2001      	movs	r0, #1
 801a65c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a660:	3301      	adds	r3, #1
 801a662:	6a12      	ldr	r2, [r2, #32]
 801a664:	4299      	cmp	r1, r3
 801a666:	6912      	ldr	r2, [r2, #16]
 801a668:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a66c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801a670:	d1f4      	bne.n	801a65c <rmw_wait+0xc0>
 801a672:	b344      	cbz	r4, 801a6c6 <rmw_wait+0x12a>
 801a674:	4622      	mov	r2, r4
 801a676:	2300      	movs	r3, #0
 801a678:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801a67c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801a680:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801a684:	440b      	add	r3, r1
 801a686:	b2db      	uxtb	r3, r3
 801a688:	2a00      	cmp	r2, #0
 801a68a:	d1f5      	bne.n	801a678 <rmw_wait+0xdc>
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d05f      	beq.n	801a750 <rmw_wait+0x1b4>
 801a690:	1c7a      	adds	r2, r7, #1
 801a692:	d00d      	beq.n	801a6b0 <rmw_wait+0x114>
 801a694:	ee07 7a90 	vmov	s15, r7
 801a698:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a69c:	ee07 3a90 	vmov	s15, r3
 801a6a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a6a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a6a8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801a6ac:	ee17 7a90 	vmov	r7, s15
 801a6b0:	68a0      	ldr	r0, [r4, #8]
 801a6b2:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801a6b6:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	f040 808d 	bne.w	801a7da <rmw_wait+0x23e>
 801a6c0:	6864      	ldr	r4, [r4, #4]
 801a6c2:	2c00      	cmp	r4, #0
 801a6c4:	d1f4      	bne.n	801a6b0 <rmw_wait+0x114>
 801a6c6:	f1b9 0f00 	cmp.w	r9, #0
 801a6ca:	f000 80a1 	beq.w	801a810 <rmw_wait+0x274>
 801a6ce:	f8d9 7000 	ldr.w	r7, [r9]
 801a6d2:	2f00      	cmp	r7, #0
 801a6d4:	f000 80a4 	beq.w	801a820 <rmw_wait+0x284>
 801a6d8:	2400      	movs	r4, #0
 801a6da:	4627      	mov	r7, r4
 801a6dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a6e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a6e4:	f000 fb18 	bl	801ad18 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a6e8:	2800      	cmp	r0, #0
 801a6ea:	d03b      	beq.n	801a764 <rmw_wait+0x1c8>
 801a6ec:	3401      	adds	r4, #1
 801a6ee:	f8d9 3000 	ldr.w	r3, [r9]
 801a6f2:	2701      	movs	r7, #1
 801a6f4:	42a3      	cmp	r3, r4
 801a6f6:	d8f1      	bhi.n	801a6dc <rmw_wait+0x140>
 801a6f8:	2701      	movs	r7, #1
 801a6fa:	f1b8 0f00 	cmp.w	r8, #0
 801a6fe:	d010      	beq.n	801a722 <rmw_wait+0x186>
 801a700:	f8d8 3000 	ldr.w	r3, [r8]
 801a704:	b16b      	cbz	r3, 801a722 <rmw_wait+0x186>
 801a706:	2400      	movs	r4, #0
 801a708:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a70c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a710:	f000 fb02 	bl	801ad18 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a714:	b370      	cbz	r0, 801a774 <rmw_wait+0x1d8>
 801a716:	3401      	adds	r4, #1
 801a718:	f8d8 3000 	ldr.w	r3, [r8]
 801a71c:	2701      	movs	r7, #1
 801a71e:	42a3      	cmp	r3, r4
 801a720:	d8f2      	bhi.n	801a708 <rmw_wait+0x16c>
 801a722:	2d00      	cmp	r5, #0
 801a724:	d035      	beq.n	801a792 <rmw_wait+0x1f6>
 801a726:	682b      	ldr	r3, [r5, #0]
 801a728:	b39b      	cbz	r3, 801a792 <rmw_wait+0x1f6>
 801a72a:	2400      	movs	r4, #0
 801a72c:	686b      	ldr	r3, [r5, #4]
 801a72e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a732:	f000 faf1 	bl	801ad18 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a736:	b328      	cbz	r0, 801a784 <rmw_wait+0x1e8>
 801a738:	3401      	adds	r4, #1
 801a73a:	682b      	ldr	r3, [r5, #0]
 801a73c:	2701      	movs	r7, #1
 801a73e:	42a3      	cmp	r3, r4
 801a740:	d8f4      	bhi.n	801a72c <rmw_wait+0x190>
 801a742:	2e00      	cmp	r6, #0
 801a744:	d03c      	beq.n	801a7c0 <rmw_wait+0x224>
 801a746:	6834      	ldr	r4, [r6, #0]
 801a748:	2c00      	cmp	r4, #0
 801a74a:	d039      	beq.n	801a7c0 <rmw_wait+0x224>
 801a74c:	2701      	movs	r7, #1
 801a74e:	e023      	b.n	801a798 <rmw_wait+0x1fc>
 801a750:	68a0      	ldr	r0, [r4, #8]
 801a752:	2100      	movs	r1, #0
 801a754:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a758:	f002 f8c8 	bl	801c8ec <uxr_run_session_timeout>
 801a75c:	6864      	ldr	r4, [r4, #4]
 801a75e:	2c00      	cmp	r4, #0
 801a760:	d1f6      	bne.n	801a750 <rmw_wait+0x1b4>
 801a762:	e7b0      	b.n	801a6c6 <rmw_wait+0x12a>
 801a764:	e9d9 3200 	ldrd	r3, r2, [r9]
 801a768:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a76c:	3401      	adds	r4, #1
 801a76e:	42a3      	cmp	r3, r4
 801a770:	d8b4      	bhi.n	801a6dc <rmw_wait+0x140>
 801a772:	e7c2      	b.n	801a6fa <rmw_wait+0x15e>
 801a774:	e9d8 3200 	ldrd	r3, r2, [r8]
 801a778:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a77c:	3401      	adds	r4, #1
 801a77e:	429c      	cmp	r4, r3
 801a780:	d3c2      	bcc.n	801a708 <rmw_wait+0x16c>
 801a782:	e7ce      	b.n	801a722 <rmw_wait+0x186>
 801a784:	e9d5 3200 	ldrd	r3, r2, [r5]
 801a788:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a78c:	3401      	adds	r4, #1
 801a78e:	42a3      	cmp	r3, r4
 801a790:	d8cc      	bhi.n	801a72c <rmw_wait+0x190>
 801a792:	b1a6      	cbz	r6, 801a7be <rmw_wait+0x222>
 801a794:	6834      	ldr	r4, [r6, #0]
 801a796:	b194      	cbz	r4, 801a7be <rmw_wait+0x222>
 801a798:	2300      	movs	r3, #0
 801a79a:	461d      	mov	r5, r3
 801a79c:	e004      	b.n	801a7a8 <rmw_wait+0x20c>
 801a79e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801a7a2:	3301      	adds	r3, #1
 801a7a4:	42a3      	cmp	r3, r4
 801a7a6:	d00a      	beq.n	801a7be <rmw_wait+0x222>
 801a7a8:	6870      	ldr	r0, [r6, #4]
 801a7aa:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801a7ae:	7c0a      	ldrb	r2, [r1, #16]
 801a7b0:	2a00      	cmp	r2, #0
 801a7b2:	d0f4      	beq.n	801a79e <rmw_wait+0x202>
 801a7b4:	3301      	adds	r3, #1
 801a7b6:	4617      	mov	r7, r2
 801a7b8:	740d      	strb	r5, [r1, #16]
 801a7ba:	42a3      	cmp	r3, r4
 801a7bc:	d1f4      	bne.n	801a7a8 <rmw_wait+0x20c>
 801a7be:	b147      	cbz	r7, 801a7d2 <rmw_wait+0x236>
 801a7c0:	2000      	movs	r0, #0
 801a7c2:	b009      	add	sp, #36	@ 0x24
 801a7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7c8:	b11e      	cbz	r6, 801a7d2 <rmw_wait+0x236>
 801a7ca:	6834      	ldr	r4, [r6, #0]
 801a7cc:	462f      	mov	r7, r5
 801a7ce:	2c00      	cmp	r4, #0
 801a7d0:	d1e2      	bne.n	801a798 <rmw_wait+0x1fc>
 801a7d2:	2002      	movs	r0, #2
 801a7d4:	b009      	add	sp, #36	@ 0x24
 801a7d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7da:	4639      	mov	r1, r7
 801a7dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a7e0:	f002 f89e 	bl	801c920 <uxr_run_session_until_data>
 801a7e4:	6864      	ldr	r4, [r4, #4]
 801a7e6:	2c00      	cmp	r4, #0
 801a7e8:	f47f af62 	bne.w	801a6b0 <rmw_wait+0x114>
 801a7ec:	e76b      	b.n	801a6c6 <rmw_wait+0x12a>
 801a7ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a7f2:	f004 ff37 	bl	801f664 <rmw_time_total_nsec>
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	4a19      	ldr	r2, [pc, #100]	@ (801a860 <rmw_wait+0x2c4>)
 801a7fa:	f7e5 fe29 	bl	8000450 <__aeabi_uldivmod>
 801a7fe:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801a802:	4607      	mov	r7, r0
 801a804:	f171 0300 	sbcs.w	r3, r1, #0
 801a808:	bfa8      	it	ge
 801a80a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801a80e:	e6e5      	b.n	801a5dc <rmw_wait+0x40>
 801a810:	f1b8 0f00 	cmp.w	r8, #0
 801a814:	d00f      	beq.n	801a836 <rmw_wait+0x29a>
 801a816:	f8d8 3000 	ldr.w	r3, [r8]
 801a81a:	b193      	cbz	r3, 801a842 <rmw_wait+0x2a6>
 801a81c:	464f      	mov	r7, r9
 801a81e:	e772      	b.n	801a706 <rmw_wait+0x16a>
 801a820:	f1b8 0f00 	cmp.w	r8, #0
 801a824:	d007      	beq.n	801a836 <rmw_wait+0x29a>
 801a826:	f8d8 3000 	ldr.w	r3, [r8]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	f47f af6b 	bne.w	801a706 <rmw_wait+0x16a>
 801a830:	b155      	cbz	r5, 801a848 <rmw_wait+0x2ac>
 801a832:	461f      	mov	r7, r3
 801a834:	e777      	b.n	801a726 <rmw_wait+0x18a>
 801a836:	2d00      	cmp	r5, #0
 801a838:	d0c6      	beq.n	801a7c8 <rmw_wait+0x22c>
 801a83a:	682b      	ldr	r3, [r5, #0]
 801a83c:	b143      	cbz	r3, 801a850 <rmw_wait+0x2b4>
 801a83e:	4647      	mov	r7, r8
 801a840:	e773      	b.n	801a72a <rmw_wait+0x18e>
 801a842:	b10d      	cbz	r5, 801a848 <rmw_wait+0x2ac>
 801a844:	464f      	mov	r7, r9
 801a846:	e76e      	b.n	801a726 <rmw_wait+0x18a>
 801a848:	462f      	mov	r7, r5
 801a84a:	2e00      	cmp	r6, #0
 801a84c:	d1a2      	bne.n	801a794 <rmw_wait+0x1f8>
 801a84e:	e7c0      	b.n	801a7d2 <rmw_wait+0x236>
 801a850:	4647      	mov	r7, r8
 801a852:	2e00      	cmp	r6, #0
 801a854:	d19e      	bne.n	801a794 <rmw_wait+0x1f8>
 801a856:	e7bc      	b.n	801a7d2 <rmw_wait+0x236>
 801a858:	08022140 	.word	0x08022140
 801a85c:	24069524 	.word	0x24069524
 801a860:	000f4240 	.word	0x000f4240

0801a864 <rmw_create_wait_set>:
 801a864:	b508      	push	{r3, lr}
 801a866:	4803      	ldr	r0, [pc, #12]	@ (801a874 <rmw_create_wait_set+0x10>)
 801a868:	f005 f816 	bl	801f898 <get_memory>
 801a86c:	b108      	cbz	r0, 801a872 <rmw_create_wait_set+0xe>
 801a86e:	6880      	ldr	r0, [r0, #8]
 801a870:	3010      	adds	r0, #16
 801a872:	bd08      	pop	{r3, pc}
 801a874:	24069564 	.word	0x24069564

0801a878 <rmw_destroy_wait_set>:
 801a878:	b508      	push	{r3, lr}
 801a87a:	4b08      	ldr	r3, [pc, #32]	@ (801a89c <rmw_destroy_wait_set+0x24>)
 801a87c:	6819      	ldr	r1, [r3, #0]
 801a87e:	b911      	cbnz	r1, 801a886 <rmw_destroy_wait_set+0xe>
 801a880:	e00a      	b.n	801a898 <rmw_destroy_wait_set+0x20>
 801a882:	6849      	ldr	r1, [r1, #4]
 801a884:	b141      	cbz	r1, 801a898 <rmw_destroy_wait_set+0x20>
 801a886:	688b      	ldr	r3, [r1, #8]
 801a888:	3310      	adds	r3, #16
 801a88a:	4298      	cmp	r0, r3
 801a88c:	d1f9      	bne.n	801a882 <rmw_destroy_wait_set+0xa>
 801a88e:	4803      	ldr	r0, [pc, #12]	@ (801a89c <rmw_destroy_wait_set+0x24>)
 801a890:	f005 f812 	bl	801f8b8 <put_memory>
 801a894:	2000      	movs	r0, #0
 801a896:	bd08      	pop	{r3, pc}
 801a898:	2001      	movs	r0, #1
 801a89a:	bd08      	pop	{r3, pc}
 801a89c:	24069564 	.word	0x24069564

0801a8a0 <rmw_uxrce_init_service_memory>:
 801a8a0:	b1e2      	cbz	r2, 801a8dc <rmw_uxrce_init_service_memory+0x3c>
 801a8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8a6:	7b05      	ldrb	r5, [r0, #12]
 801a8a8:	4606      	mov	r6, r0
 801a8aa:	b9ad      	cbnz	r5, 801a8d8 <rmw_uxrce_init_service_memory+0x38>
 801a8ac:	23c8      	movs	r3, #200	@ 0xc8
 801a8ae:	4617      	mov	r7, r2
 801a8b0:	460c      	mov	r4, r1
 801a8b2:	46a8      	mov	r8, r5
 801a8b4:	6083      	str	r3, [r0, #8]
 801a8b6:	f240 1301 	movw	r3, #257	@ 0x101
 801a8ba:	e9c0 5500 	strd	r5, r5, [r0]
 801a8be:	8183      	strh	r3, [r0, #12]
 801a8c0:	3501      	adds	r5, #1
 801a8c2:	4621      	mov	r1, r4
 801a8c4:	4630      	mov	r0, r6
 801a8c6:	f004 fff7 	bl	801f8b8 <put_memory>
 801a8ca:	42af      	cmp	r7, r5
 801a8cc:	60a4      	str	r4, [r4, #8]
 801a8ce:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801a8d2:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801a8d6:	d1f3      	bne.n	801a8c0 <rmw_uxrce_init_service_memory+0x20>
 801a8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8dc:	4770      	bx	lr
 801a8de:	bf00      	nop

0801a8e0 <rmw_uxrce_init_client_memory>:
 801a8e0:	b1e2      	cbz	r2, 801a91c <rmw_uxrce_init_client_memory+0x3c>
 801a8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8e6:	7b05      	ldrb	r5, [r0, #12]
 801a8e8:	4606      	mov	r6, r0
 801a8ea:	b9ad      	cbnz	r5, 801a918 <rmw_uxrce_init_client_memory+0x38>
 801a8ec:	23c8      	movs	r3, #200	@ 0xc8
 801a8ee:	4617      	mov	r7, r2
 801a8f0:	460c      	mov	r4, r1
 801a8f2:	46a8      	mov	r8, r5
 801a8f4:	6083      	str	r3, [r0, #8]
 801a8f6:	f240 1301 	movw	r3, #257	@ 0x101
 801a8fa:	e9c0 5500 	strd	r5, r5, [r0]
 801a8fe:	8183      	strh	r3, [r0, #12]
 801a900:	3501      	adds	r5, #1
 801a902:	4621      	mov	r1, r4
 801a904:	4630      	mov	r0, r6
 801a906:	f004 ffd7 	bl	801f8b8 <put_memory>
 801a90a:	42af      	cmp	r7, r5
 801a90c:	60a4      	str	r4, [r4, #8]
 801a90e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801a912:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801a916:	d1f3      	bne.n	801a900 <rmw_uxrce_init_client_memory+0x20>
 801a918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a91c:	4770      	bx	lr
 801a91e:	bf00      	nop

0801a920 <rmw_uxrce_init_publisher_memory>:
 801a920:	b1e2      	cbz	r2, 801a95c <rmw_uxrce_init_publisher_memory+0x3c>
 801a922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a926:	7b05      	ldrb	r5, [r0, #12]
 801a928:	4606      	mov	r6, r0
 801a92a:	b9ad      	cbnz	r5, 801a958 <rmw_uxrce_init_publisher_memory+0x38>
 801a92c:	23d8      	movs	r3, #216	@ 0xd8
 801a92e:	4617      	mov	r7, r2
 801a930:	460c      	mov	r4, r1
 801a932:	46a8      	mov	r8, r5
 801a934:	6083      	str	r3, [r0, #8]
 801a936:	f240 1301 	movw	r3, #257	@ 0x101
 801a93a:	e9c0 5500 	strd	r5, r5, [r0]
 801a93e:	8183      	strh	r3, [r0, #12]
 801a940:	3501      	adds	r5, #1
 801a942:	4621      	mov	r1, r4
 801a944:	4630      	mov	r0, r6
 801a946:	f004 ffb7 	bl	801f8b8 <put_memory>
 801a94a:	42af      	cmp	r7, r5
 801a94c:	60a4      	str	r4, [r4, #8]
 801a94e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801a952:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801a956:	d1f3      	bne.n	801a940 <rmw_uxrce_init_publisher_memory+0x20>
 801a958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a95c:	4770      	bx	lr
 801a95e:	bf00      	nop

0801a960 <rmw_uxrce_init_subscription_memory>:
 801a960:	b1e2      	cbz	r2, 801a99c <rmw_uxrce_init_subscription_memory+0x3c>
 801a962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a966:	7b05      	ldrb	r5, [r0, #12]
 801a968:	4606      	mov	r6, r0
 801a96a:	b9ad      	cbnz	r5, 801a998 <rmw_uxrce_init_subscription_memory+0x38>
 801a96c:	23d8      	movs	r3, #216	@ 0xd8
 801a96e:	4617      	mov	r7, r2
 801a970:	460c      	mov	r4, r1
 801a972:	46a8      	mov	r8, r5
 801a974:	6083      	str	r3, [r0, #8]
 801a976:	f240 1301 	movw	r3, #257	@ 0x101
 801a97a:	e9c0 5500 	strd	r5, r5, [r0]
 801a97e:	8183      	strh	r3, [r0, #12]
 801a980:	3501      	adds	r5, #1
 801a982:	4621      	mov	r1, r4
 801a984:	4630      	mov	r0, r6
 801a986:	f004 ff97 	bl	801f8b8 <put_memory>
 801a98a:	42af      	cmp	r7, r5
 801a98c:	60a4      	str	r4, [r4, #8]
 801a98e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801a992:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801a996:	d1f3      	bne.n	801a980 <rmw_uxrce_init_subscription_memory+0x20>
 801a998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a99c:	4770      	bx	lr
 801a99e:	bf00      	nop

0801a9a0 <rmw_uxrce_init_node_memory>:
 801a9a0:	b1e2      	cbz	r2, 801a9dc <rmw_uxrce_init_node_memory+0x3c>
 801a9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9a6:	7b05      	ldrb	r5, [r0, #12]
 801a9a8:	4606      	mov	r6, r0
 801a9aa:	b9ad      	cbnz	r5, 801a9d8 <rmw_uxrce_init_node_memory+0x38>
 801a9ac:	23a4      	movs	r3, #164	@ 0xa4
 801a9ae:	4617      	mov	r7, r2
 801a9b0:	460c      	mov	r4, r1
 801a9b2:	46a8      	mov	r8, r5
 801a9b4:	6083      	str	r3, [r0, #8]
 801a9b6:	f240 1301 	movw	r3, #257	@ 0x101
 801a9ba:	e9c0 5500 	strd	r5, r5, [r0]
 801a9be:	8183      	strh	r3, [r0, #12]
 801a9c0:	3501      	adds	r5, #1
 801a9c2:	4621      	mov	r1, r4
 801a9c4:	4630      	mov	r0, r6
 801a9c6:	f004 ff77 	bl	801f8b8 <put_memory>
 801a9ca:	42af      	cmp	r7, r5
 801a9cc:	60a4      	str	r4, [r4, #8]
 801a9ce:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801a9d2:	f804 8c98 	strb.w	r8, [r4, #-152]
 801a9d6:	d1f3      	bne.n	801a9c0 <rmw_uxrce_init_node_memory+0x20>
 801a9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9dc:	4770      	bx	lr
 801a9de:	bf00      	nop

0801a9e0 <rmw_uxrce_init_session_memory>:
 801a9e0:	b1ea      	cbz	r2, 801aa1e <rmw_uxrce_init_session_memory+0x3e>
 801a9e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a9e6:	7b05      	ldrb	r5, [r0, #12]
 801a9e8:	4606      	mov	r6, r0
 801a9ea:	b9b5      	cbnz	r5, 801aa1a <rmw_uxrce_init_session_memory+0x3a>
 801a9ec:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 801a9f0:	f240 1301 	movw	r3, #257	@ 0x101
 801a9f4:	4617      	mov	r7, r2
 801a9f6:	460c      	mov	r4, r1
 801a9f8:	46a9      	mov	r9, r5
 801a9fa:	f8c0 8008 	str.w	r8, [r0, #8]
 801a9fe:	8183      	strh	r3, [r0, #12]
 801aa00:	e9c0 5500 	strd	r5, r5, [r0]
 801aa04:	3501      	adds	r5, #1
 801aa06:	4621      	mov	r1, r4
 801aa08:	4630      	mov	r0, r6
 801aa0a:	f004 ff55 	bl	801f8b8 <put_memory>
 801aa0e:	42af      	cmp	r7, r5
 801aa10:	60a4      	str	r4, [r4, #8]
 801aa12:	f884 900c 	strb.w	r9, [r4, #12]
 801aa16:	4444      	add	r4, r8
 801aa18:	d1f4      	bne.n	801aa04 <rmw_uxrce_init_session_memory+0x24>
 801aa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa1e:	4770      	bx	lr

0801aa20 <rmw_uxrce_init_topic_memory>:
 801aa20:	b1e2      	cbz	r2, 801aa5c <rmw_uxrce_init_topic_memory+0x3c>
 801aa22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa26:	7b05      	ldrb	r5, [r0, #12]
 801aa28:	4606      	mov	r6, r0
 801aa2a:	b9ad      	cbnz	r5, 801aa58 <rmw_uxrce_init_topic_memory+0x38>
 801aa2c:	231c      	movs	r3, #28
 801aa2e:	4617      	mov	r7, r2
 801aa30:	460c      	mov	r4, r1
 801aa32:	46a8      	mov	r8, r5
 801aa34:	6083      	str	r3, [r0, #8]
 801aa36:	f240 1301 	movw	r3, #257	@ 0x101
 801aa3a:	e9c0 5500 	strd	r5, r5, [r0]
 801aa3e:	8183      	strh	r3, [r0, #12]
 801aa40:	3501      	adds	r5, #1
 801aa42:	4621      	mov	r1, r4
 801aa44:	4630      	mov	r0, r6
 801aa46:	f004 ff37 	bl	801f8b8 <put_memory>
 801aa4a:	42af      	cmp	r7, r5
 801aa4c:	60a4      	str	r4, [r4, #8]
 801aa4e:	f104 041c 	add.w	r4, r4, #28
 801aa52:	f804 8c10 	strb.w	r8, [r4, #-16]
 801aa56:	d1f3      	bne.n	801aa40 <rmw_uxrce_init_topic_memory+0x20>
 801aa58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa5c:	4770      	bx	lr
 801aa5e:	bf00      	nop

0801aa60 <rmw_uxrce_init_static_input_buffer_memory>:
 801aa60:	b1ea      	cbz	r2, 801aa9e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801aa62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa66:	7b05      	ldrb	r5, [r0, #12]
 801aa68:	4606      	mov	r6, r0
 801aa6a:	b9b5      	cbnz	r5, 801aa9a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 801aa6c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 801aa70:	4617      	mov	r7, r2
 801aa72:	460c      	mov	r4, r1
 801aa74:	46a8      	mov	r8, r5
 801aa76:	6083      	str	r3, [r0, #8]
 801aa78:	f240 1301 	movw	r3, #257	@ 0x101
 801aa7c:	e9c0 5500 	strd	r5, r5, [r0]
 801aa80:	8183      	strh	r3, [r0, #12]
 801aa82:	3501      	adds	r5, #1
 801aa84:	4621      	mov	r1, r4
 801aa86:	4630      	mov	r0, r6
 801aa88:	f004 ff16 	bl	801f8b8 <put_memory>
 801aa8c:	42af      	cmp	r7, r5
 801aa8e:	60a4      	str	r4, [r4, #8]
 801aa90:	f884 800c 	strb.w	r8, [r4, #12]
 801aa94:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 801aa98:	d1f3      	bne.n	801aa82 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801aa9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa9e:	4770      	bx	lr

0801aaa0 <rmw_uxrce_init_init_options_impl_memory>:
 801aaa0:	b1e2      	cbz	r2, 801aadc <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801aaa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aaa6:	7b05      	ldrb	r5, [r0, #12]
 801aaa8:	4606      	mov	r6, r0
 801aaaa:	b9ad      	cbnz	r5, 801aad8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 801aaac:	232c      	movs	r3, #44	@ 0x2c
 801aaae:	4617      	mov	r7, r2
 801aab0:	460c      	mov	r4, r1
 801aab2:	46a8      	mov	r8, r5
 801aab4:	6083      	str	r3, [r0, #8]
 801aab6:	f240 1301 	movw	r3, #257	@ 0x101
 801aaba:	e9c0 5500 	strd	r5, r5, [r0]
 801aabe:	8183      	strh	r3, [r0, #12]
 801aac0:	3501      	adds	r5, #1
 801aac2:	4621      	mov	r1, r4
 801aac4:	4630      	mov	r0, r6
 801aac6:	f004 fef7 	bl	801f8b8 <put_memory>
 801aaca:	42af      	cmp	r7, r5
 801aacc:	60a4      	str	r4, [r4, #8]
 801aace:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801aad2:	f804 8c20 	strb.w	r8, [r4, #-32]
 801aad6:	d1f3      	bne.n	801aac0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 801aad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aadc:	4770      	bx	lr
 801aade:	bf00      	nop

0801aae0 <rmw_uxrce_init_wait_set_memory>:
 801aae0:	b1e2      	cbz	r2, 801ab1c <rmw_uxrce_init_wait_set_memory+0x3c>
 801aae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aae6:	7b05      	ldrb	r5, [r0, #12]
 801aae8:	4606      	mov	r6, r0
 801aaea:	b9ad      	cbnz	r5, 801ab18 <rmw_uxrce_init_wait_set_memory+0x38>
 801aaec:	231c      	movs	r3, #28
 801aaee:	4617      	mov	r7, r2
 801aaf0:	460c      	mov	r4, r1
 801aaf2:	46a8      	mov	r8, r5
 801aaf4:	6083      	str	r3, [r0, #8]
 801aaf6:	f240 1301 	movw	r3, #257	@ 0x101
 801aafa:	e9c0 5500 	strd	r5, r5, [r0]
 801aafe:	8183      	strh	r3, [r0, #12]
 801ab00:	3501      	adds	r5, #1
 801ab02:	4621      	mov	r1, r4
 801ab04:	4630      	mov	r0, r6
 801ab06:	f004 fed7 	bl	801f8b8 <put_memory>
 801ab0a:	42af      	cmp	r7, r5
 801ab0c:	60a4      	str	r4, [r4, #8]
 801ab0e:	f104 041c 	add.w	r4, r4, #28
 801ab12:	f804 8c10 	strb.w	r8, [r4, #-16]
 801ab16:	d1f3      	bne.n	801ab00 <rmw_uxrce_init_wait_set_memory+0x20>
 801ab18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab1c:	4770      	bx	lr
 801ab1e:	bf00      	nop

0801ab20 <rmw_uxrce_init_guard_condition_memory>:
 801ab20:	b1e2      	cbz	r2, 801ab5c <rmw_uxrce_init_guard_condition_memory+0x3c>
 801ab22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab26:	7b05      	ldrb	r5, [r0, #12]
 801ab28:	4606      	mov	r6, r0
 801ab2a:	b9ad      	cbnz	r5, 801ab58 <rmw_uxrce_init_guard_condition_memory+0x38>
 801ab2c:	2320      	movs	r3, #32
 801ab2e:	4617      	mov	r7, r2
 801ab30:	460c      	mov	r4, r1
 801ab32:	46a8      	mov	r8, r5
 801ab34:	6083      	str	r3, [r0, #8]
 801ab36:	f240 1301 	movw	r3, #257	@ 0x101
 801ab3a:	e9c0 5500 	strd	r5, r5, [r0]
 801ab3e:	8183      	strh	r3, [r0, #12]
 801ab40:	3501      	adds	r5, #1
 801ab42:	4621      	mov	r1, r4
 801ab44:	4630      	mov	r0, r6
 801ab46:	f004 feb7 	bl	801f8b8 <put_memory>
 801ab4a:	42af      	cmp	r7, r5
 801ab4c:	60a4      	str	r4, [r4, #8]
 801ab4e:	f104 0420 	add.w	r4, r4, #32
 801ab52:	f804 8c14 	strb.w	r8, [r4, #-20]
 801ab56:	d1f3      	bne.n	801ab40 <rmw_uxrce_init_guard_condition_memory+0x20>
 801ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab5c:	4770      	bx	lr
 801ab5e:	bf00      	nop

0801ab60 <rmw_uxrce_fini_session_memory>:
 801ab60:	4601      	mov	r1, r0
 801ab62:	4801      	ldr	r0, [pc, #4]	@ (801ab68 <rmw_uxrce_fini_session_memory+0x8>)
 801ab64:	f004 bea8 	b.w	801f8b8 <put_memory>
 801ab68:	24069524 	.word	0x24069524

0801ab6c <rmw_uxrce_fini_node_memory>:
 801ab6c:	b538      	push	{r3, r4, r5, lr}
 801ab6e:	4604      	mov	r4, r0
 801ab70:	6800      	ldr	r0, [r0, #0]
 801ab72:	b128      	cbz	r0, 801ab80 <rmw_uxrce_fini_node_memory+0x14>
 801ab74:	4b07      	ldr	r3, [pc, #28]	@ (801ab94 <rmw_uxrce_fini_node_memory+0x28>)
 801ab76:	6819      	ldr	r1, [r3, #0]
 801ab78:	f7e5 fbb2 	bl	80002e0 <strcmp>
 801ab7c:	b940      	cbnz	r0, 801ab90 <rmw_uxrce_fini_node_memory+0x24>
 801ab7e:	6020      	str	r0, [r4, #0]
 801ab80:	6861      	ldr	r1, [r4, #4]
 801ab82:	b129      	cbz	r1, 801ab90 <rmw_uxrce_fini_node_memory+0x24>
 801ab84:	2500      	movs	r5, #0
 801ab86:	4804      	ldr	r0, [pc, #16]	@ (801ab98 <rmw_uxrce_fini_node_memory+0x2c>)
 801ab88:	610d      	str	r5, [r1, #16]
 801ab8a:	f004 fe95 	bl	801f8b8 <put_memory>
 801ab8e:	6065      	str	r5, [r4, #4]
 801ab90:	bd38      	pop	{r3, r4, r5, pc}
 801ab92:	bf00      	nop
 801ab94:	08024500 	.word	0x08024500
 801ab98:	240694f4 	.word	0x240694f4

0801ab9c <rmw_uxrce_fini_publisher_memory>:
 801ab9c:	b510      	push	{r4, lr}
 801ab9e:	4604      	mov	r4, r0
 801aba0:	6800      	ldr	r0, [r0, #0]
 801aba2:	b128      	cbz	r0, 801abb0 <rmw_uxrce_fini_publisher_memory+0x14>
 801aba4:	4b06      	ldr	r3, [pc, #24]	@ (801abc0 <rmw_uxrce_fini_publisher_memory+0x24>)
 801aba6:	6819      	ldr	r1, [r3, #0]
 801aba8:	f7e5 fb9a 	bl	80002e0 <strcmp>
 801abac:	b938      	cbnz	r0, 801abbe <rmw_uxrce_fini_publisher_memory+0x22>
 801abae:	6020      	str	r0, [r4, #0]
 801abb0:	6861      	ldr	r1, [r4, #4]
 801abb2:	b121      	cbz	r1, 801abbe <rmw_uxrce_fini_publisher_memory+0x22>
 801abb4:	4803      	ldr	r0, [pc, #12]	@ (801abc4 <rmw_uxrce_fini_publisher_memory+0x28>)
 801abb6:	f004 fe7f 	bl	801f8b8 <put_memory>
 801abba:	2300      	movs	r3, #0
 801abbc:	6063      	str	r3, [r4, #4]
 801abbe:	bd10      	pop	{r4, pc}
 801abc0:	08024500 	.word	0x08024500
 801abc4:	24069504 	.word	0x24069504

0801abc8 <rmw_uxrce_fini_subscription_memory>:
 801abc8:	b510      	push	{r4, lr}
 801abca:	4604      	mov	r4, r0
 801abcc:	6800      	ldr	r0, [r0, #0]
 801abce:	b128      	cbz	r0, 801abdc <rmw_uxrce_fini_subscription_memory+0x14>
 801abd0:	4b06      	ldr	r3, [pc, #24]	@ (801abec <rmw_uxrce_fini_subscription_memory+0x24>)
 801abd2:	6819      	ldr	r1, [r3, #0]
 801abd4:	f7e5 fb84 	bl	80002e0 <strcmp>
 801abd8:	b938      	cbnz	r0, 801abea <rmw_uxrce_fini_subscription_memory+0x22>
 801abda:	6020      	str	r0, [r4, #0]
 801abdc:	6861      	ldr	r1, [r4, #4]
 801abde:	b121      	cbz	r1, 801abea <rmw_uxrce_fini_subscription_memory+0x22>
 801abe0:	4803      	ldr	r0, [pc, #12]	@ (801abf0 <rmw_uxrce_fini_subscription_memory+0x28>)
 801abe2:	f004 fe69 	bl	801f8b8 <put_memory>
 801abe6:	2300      	movs	r3, #0
 801abe8:	6063      	str	r3, [r4, #4]
 801abea:	bd10      	pop	{r4, pc}
 801abec:	08024500 	.word	0x08024500
 801abf0:	24069544 	.word	0x24069544

0801abf4 <rmw_uxrce_fini_service_memory>:
 801abf4:	b510      	push	{r4, lr}
 801abf6:	4604      	mov	r4, r0
 801abf8:	6800      	ldr	r0, [r0, #0]
 801abfa:	b128      	cbz	r0, 801ac08 <rmw_uxrce_fini_service_memory+0x14>
 801abfc:	4b06      	ldr	r3, [pc, #24]	@ (801ac18 <rmw_uxrce_fini_service_memory+0x24>)
 801abfe:	6819      	ldr	r1, [r3, #0]
 801ac00:	f7e5 fb6e 	bl	80002e0 <strcmp>
 801ac04:	b938      	cbnz	r0, 801ac16 <rmw_uxrce_fini_service_memory+0x22>
 801ac06:	6020      	str	r0, [r4, #0]
 801ac08:	6861      	ldr	r1, [r4, #4]
 801ac0a:	b121      	cbz	r1, 801ac16 <rmw_uxrce_fini_service_memory+0x22>
 801ac0c:	4803      	ldr	r0, [pc, #12]	@ (801ac1c <rmw_uxrce_fini_service_memory+0x28>)
 801ac0e:	f004 fe53 	bl	801f8b8 <put_memory>
 801ac12:	2300      	movs	r3, #0
 801ac14:	6063      	str	r3, [r4, #4]
 801ac16:	bd10      	pop	{r4, pc}
 801ac18:	08024500 	.word	0x08024500
 801ac1c:	24069514 	.word	0x24069514

0801ac20 <rmw_uxrce_fini_client_memory>:
 801ac20:	b510      	push	{r4, lr}
 801ac22:	4604      	mov	r4, r0
 801ac24:	6800      	ldr	r0, [r0, #0]
 801ac26:	b128      	cbz	r0, 801ac34 <rmw_uxrce_fini_client_memory+0x14>
 801ac28:	4b06      	ldr	r3, [pc, #24]	@ (801ac44 <rmw_uxrce_fini_client_memory+0x24>)
 801ac2a:	6819      	ldr	r1, [r3, #0]
 801ac2c:	f7e5 fb58 	bl	80002e0 <strcmp>
 801ac30:	b938      	cbnz	r0, 801ac42 <rmw_uxrce_fini_client_memory+0x22>
 801ac32:	6020      	str	r0, [r4, #0]
 801ac34:	6861      	ldr	r1, [r4, #4]
 801ac36:	b121      	cbz	r1, 801ac42 <rmw_uxrce_fini_client_memory+0x22>
 801ac38:	4803      	ldr	r0, [pc, #12]	@ (801ac48 <rmw_uxrce_fini_client_memory+0x28>)
 801ac3a:	f004 fe3d 	bl	801f8b8 <put_memory>
 801ac3e:	2300      	movs	r3, #0
 801ac40:	6063      	str	r3, [r4, #4]
 801ac42:	bd10      	pop	{r4, pc}
 801ac44:	08024500 	.word	0x08024500
 801ac48:	24064c28 	.word	0x24064c28

0801ac4c <rmw_uxrce_fini_topic_memory>:
 801ac4c:	b510      	push	{r4, lr}
 801ac4e:	4604      	mov	r4, r0
 801ac50:	4803      	ldr	r0, [pc, #12]	@ (801ac60 <rmw_uxrce_fini_topic_memory+0x14>)
 801ac52:	4621      	mov	r1, r4
 801ac54:	f004 fe30 	bl	801f8b8 <put_memory>
 801ac58:	2300      	movs	r3, #0
 801ac5a:	61a3      	str	r3, [r4, #24]
 801ac5c:	bd10      	pop	{r4, pc}
 801ac5e:	bf00      	nop
 801ac60:	24069554 	.word	0x24069554

0801ac64 <rmw_uxrce_get_static_input_buffer_for_entity>:
 801ac64:	b082      	sub	sp, #8
 801ac66:	492b      	ldr	r1, [pc, #172]	@ (801ad14 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801ac68:	b530      	push	{r4, r5, lr}
 801ac6a:	680d      	ldr	r5, [r1, #0]
 801ac6c:	ac03      	add	r4, sp, #12
 801ac6e:	e884 000c 	stmia.w	r4, {r2, r3}
 801ac72:	461c      	mov	r4, r3
 801ac74:	2d00      	cmp	r5, #0
 801ac76:	d04b      	beq.n	801ad10 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 801ac78:	462b      	mov	r3, r5
 801ac7a:	2100      	movs	r1, #0
 801ac7c:	689a      	ldr	r2, [r3, #8]
 801ac7e:	685b      	ldr	r3, [r3, #4]
 801ac80:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 801ac84:	4290      	cmp	r0, r2
 801ac86:	bf08      	it	eq
 801ac88:	3101      	addeq	r1, #1
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d1f6      	bne.n	801ac7c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801ac8e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801ac92:	2b02      	cmp	r3, #2
 801ac94:	d029      	beq.n	801acea <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801ac96:	d820      	bhi.n	801acda <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 801ac98:	428c      	cmp	r4, r1
 801ac9a:	d828      	bhi.n	801acee <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801ac9c:	fab4 f284 	clz	r2, r4
 801aca0:	0952      	lsrs	r2, r2, #5
 801aca2:	b324      	cbz	r4, 801acee <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801aca4:	b1dd      	cbz	r5, 801acde <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 801aca6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801acaa:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801acae:	e001      	b.n	801acb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 801acb0:	686d      	ldr	r5, [r5, #4]
 801acb2:	b1ad      	cbz	r5, 801ace0 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801acb4:	68ab      	ldr	r3, [r5, #8]
 801acb6:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 801acba:	4288      	cmp	r0, r1
 801acbc:	d1f8      	bne.n	801acb0 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801acbe:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 801acc2:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801acc6:	4561      	cmp	r1, ip
 801acc8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801accc:	eb73 0e04 	sbcs.w	lr, r3, r4
 801acd0:	daee      	bge.n	801acb0 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801acd2:	468c      	mov	ip, r1
 801acd4:	461c      	mov	r4, r3
 801acd6:	462a      	mov	r2, r5
 801acd8:	e7ea      	b.n	801acb0 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801acda:	2b03      	cmp	r3, #3
 801acdc:	d0dc      	beq.n	801ac98 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 801acde:	2200      	movs	r2, #0
 801ace0:	4610      	mov	r0, r2
 801ace2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ace6:	b002      	add	sp, #8
 801ace8:	4770      	bx	lr
 801acea:	428c      	cmp	r4, r1
 801acec:	d905      	bls.n	801acfa <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 801acee:	4809      	ldr	r0, [pc, #36]	@ (801ad14 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801acf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801acf4:	b002      	add	sp, #8
 801acf6:	f004 bdcf 	b.w	801f898 <get_memory>
 801acfa:	fab4 f284 	clz	r2, r4
 801acfe:	0952      	lsrs	r2, r2, #5
 801ad00:	2c00      	cmp	r4, #0
 801ad02:	d1ed      	bne.n	801ace0 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801ad04:	4803      	ldr	r0, [pc, #12]	@ (801ad14 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801ad06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ad0a:	b002      	add	sp, #8
 801ad0c:	f004 bdc4 	b.w	801f898 <get_memory>
 801ad10:	4629      	mov	r1, r5
 801ad12:	e7bc      	b.n	801ac8e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 801ad14:	24069534 	.word	0x24069534

0801ad18 <rmw_uxrce_find_static_input_buffer_by_owner>:
 801ad18:	4b12      	ldr	r3, [pc, #72]	@ (801ad64 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	b530      	push	{r4, r5, lr}
 801ad1e:	b1f3      	cbz	r3, 801ad5e <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 801ad20:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801ad24:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801ad28:	2400      	movs	r4, #0
 801ad2a:	e001      	b.n	801ad30 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801ad2c:	685b      	ldr	r3, [r3, #4]
 801ad2e:	b1a3      	cbz	r3, 801ad5a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 801ad30:	689a      	ldr	r2, [r3, #8]
 801ad32:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801ad36:	4288      	cmp	r0, r1
 801ad38:	d1f8      	bne.n	801ad2c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801ad3a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 801ad3e:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 801ad42:	4571      	cmp	r1, lr
 801ad44:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801ad48:	eb72 050c 	sbcs.w	r5, r2, ip
 801ad4c:	daee      	bge.n	801ad2c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801ad4e:	461c      	mov	r4, r3
 801ad50:	685b      	ldr	r3, [r3, #4]
 801ad52:	468e      	mov	lr, r1
 801ad54:	4694      	mov	ip, r2
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d1ea      	bne.n	801ad30 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801ad5a:	4620      	mov	r0, r4
 801ad5c:	bd30      	pop	{r4, r5, pc}
 801ad5e:	461c      	mov	r4, r3
 801ad60:	4620      	mov	r0, r4
 801ad62:	bd30      	pop	{r4, r5, pc}
 801ad64:	24069534 	.word	0x24069534

0801ad68 <rmw_uxrce_clean_expired_static_input_buffer>:
 801ad68:	4b3d      	ldr	r3, [pc, #244]	@ (801ae60 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801ad6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad6e:	681f      	ldr	r7, [r3, #0]
 801ad70:	ed2d 8b06 	vpush	{d8-d10}
 801ad74:	b08d      	sub	sp, #52	@ 0x34
 801ad76:	f004 fe4f 	bl	801fa18 <rmw_uros_epoch_nanos>
 801ad7a:	2f00      	cmp	r7, #0
 801ad7c:	d05d      	beq.n	801ae3a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801ad7e:	46b8      	mov	r8, r7
 801ad80:	4681      	mov	r9, r0
 801ad82:	468a      	mov	sl, r1
 801ad84:	ac04      	add	r4, sp, #16
 801ad86:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ad8a:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801ad8e:	2b04      	cmp	r3, #4
 801ad90:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 801ae48 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801ad94:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 801ae50 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 801ad98:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 801ae58 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 801ad9c:	d03f      	beq.n	801ae1e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801ad9e:	2b05      	cmp	r3, #5
 801ada0:	d044      	beq.n	801ae2c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801ada2:	2b03      	cmp	r3, #3
 801ada4:	d03b      	beq.n	801ae1e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801ada6:	ed8d 8b04 	vstr	d8, [sp, #16]
 801adaa:	ed8d ab06 	vstr	d10, [sp, #24]
 801adae:	ab08      	add	r3, sp, #32
 801adb0:	ed8d 8b08 	vstr	d8, [sp, #32]
 801adb4:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 801adb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801adba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801adbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801adc2:	f004 fbf9 	bl	801f5b8 <rmw_time_equal>
 801adc6:	b118      	cbz	r0, 801add0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 801adc8:	ed8d 9b04 	vstr	d9, [sp, #16]
 801adcc:	ed8d 8b06 	vstr	d8, [sp, #24]
 801add0:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 801add4:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 801add8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801addc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 801ade0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ade4:	f004 fc3e 	bl	801f664 <rmw_time_total_nsec>
 801ade8:	1830      	adds	r0, r6, r0
 801adea:	eb47 0101 	adc.w	r1, r7, r1
 801adee:	4548      	cmp	r0, r9
 801adf0:	eb71 030a 	sbcs.w	r3, r1, sl
 801adf4:	db05      	blt.n	801ae02 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801adf6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801adfa:	4591      	cmp	r9, r2
 801adfc:	eb7a 0303 	sbcs.w	r3, sl, r3
 801ae00:	da03      	bge.n	801ae0a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801ae02:	4641      	mov	r1, r8
 801ae04:	4816      	ldr	r0, [pc, #88]	@ (801ae60 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801ae06:	f004 fd57 	bl	801f8b8 <put_memory>
 801ae0a:	f1bb 0f00 	cmp.w	fp, #0
 801ae0e:	d014      	beq.n	801ae3a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801ae10:	46d8      	mov	r8, fp
 801ae12:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ae16:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801ae1a:	2b04      	cmp	r3, #4
 801ae1c:	d1bf      	bne.n	801ad9e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801ae1e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801ae22:	3340      	adds	r3, #64	@ 0x40
 801ae24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ae26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801ae2a:	e7c0      	b.n	801adae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801ae2c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801ae30:	3348      	adds	r3, #72	@ 0x48
 801ae32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ae34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801ae38:	e7b9      	b.n	801adae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801ae3a:	b00d      	add	sp, #52	@ 0x34
 801ae3c:	ecbd 8b06 	vpop	{d8-d10}
 801ae40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae44:	f3af 8000 	nop.w
	...
 801ae50:	00000001 	.word	0x00000001
 801ae54:	00000000 	.word	0x00000000
 801ae58:	0000001e 	.word	0x0000001e
 801ae5c:	00000000 	.word	0x00000000
 801ae60:	24069534 	.word	0x24069534

0801ae64 <run_xrce_session>:
 801ae64:	b510      	push	{r4, lr}
 801ae66:	788c      	ldrb	r4, [r1, #2]
 801ae68:	b086      	sub	sp, #24
 801ae6a:	2c01      	cmp	r4, #1
 801ae6c:	f8ad 200e 	strh.w	r2, [sp, #14]
 801ae70:	d00c      	beq.n	801ae8c <run_xrce_session+0x28>
 801ae72:	2401      	movs	r4, #1
 801ae74:	4619      	mov	r1, r3
 801ae76:	f10d 020e 	add.w	r2, sp, #14
 801ae7a:	f10d 0317 	add.w	r3, sp, #23
 801ae7e:	9400      	str	r4, [sp, #0]
 801ae80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ae84:	f001 fd90 	bl	801c9a8 <uxr_run_session_until_all_status>
 801ae88:	b006      	add	sp, #24
 801ae8a:	bd10      	pop	{r4, pc}
 801ae8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ae90:	f001 f9ac 	bl	801c1ec <uxr_flash_output_streams>
 801ae94:	4620      	mov	r0, r4
 801ae96:	b006      	add	sp, #24
 801ae98:	bd10      	pop	{r4, pc}
 801ae9a:	bf00      	nop

0801ae9c <convert_qos_profile>:
 801ae9c:	7a4a      	ldrb	r2, [r1, #9]
 801ae9e:	f891 c008 	ldrb.w	ip, [r1, #8]
 801aea2:	2a02      	cmp	r2, #2
 801aea4:	bf18      	it	ne
 801aea6:	2200      	movne	r2, #0
 801aea8:	7002      	strb	r2, [r0, #0]
 801aeaa:	f1ac 0202 	sub.w	r2, ip, #2
 801aeae:	fab2 f282 	clz	r2, r2
 801aeb2:	0952      	lsrs	r2, r2, #5
 801aeb4:	7042      	strb	r2, [r0, #1]
 801aeb6:	780a      	ldrb	r2, [r1, #0]
 801aeb8:	8889      	ldrh	r1, [r1, #4]
 801aeba:	f1a2 0202 	sub.w	r2, r2, #2
 801aebe:	8081      	strh	r1, [r0, #4]
 801aec0:	fab2 f282 	clz	r2, r2
 801aec4:	0952      	lsrs	r2, r2, #5
 801aec6:	7082      	strb	r2, [r0, #2]
 801aec8:	4770      	bx	lr
 801aeca:	bf00      	nop

0801aecc <generate_service_topics>:
 801aecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aece:	461d      	mov	r5, r3
 801aed0:	b083      	sub	sp, #12
 801aed2:	4606      	mov	r6, r0
 801aed4:	4c11      	ldr	r4, [pc, #68]	@ (801af1c <generate_service_topics+0x50>)
 801aed6:	4608      	mov	r0, r1
 801aed8:	4b11      	ldr	r3, [pc, #68]	@ (801af20 <generate_service_topics+0x54>)
 801aeda:	4617      	mov	r7, r2
 801aedc:	4629      	mov	r1, r5
 801aede:	4a11      	ldr	r2, [pc, #68]	@ (801af24 <generate_service_topics+0x58>)
 801aee0:	9401      	str	r4, [sp, #4]
 801aee2:	9600      	str	r6, [sp, #0]
 801aee4:	f005 fedc 	bl	8020ca0 <sniprintf>
 801aee8:	4a0f      	ldr	r2, [pc, #60]	@ (801af28 <generate_service_topics+0x5c>)
 801aeea:	4604      	mov	r4, r0
 801aeec:	4b0f      	ldr	r3, [pc, #60]	@ (801af2c <generate_service_topics+0x60>)
 801aeee:	9201      	str	r2, [sp, #4]
 801aef0:	4638      	mov	r0, r7
 801aef2:	4a0c      	ldr	r2, [pc, #48]	@ (801af24 <generate_service_topics+0x58>)
 801aef4:	4629      	mov	r1, r5
 801aef6:	9600      	str	r6, [sp, #0]
 801aef8:	f005 fed2 	bl	8020ca0 <sniprintf>
 801aefc:	2c00      	cmp	r4, #0
 801aefe:	bfa8      	it	ge
 801af00:	42a5      	cmpge	r5, r4
 801af02:	bfcc      	ite	gt
 801af04:	2401      	movgt	r4, #1
 801af06:	2400      	movle	r4, #0
 801af08:	dd05      	ble.n	801af16 <generate_service_topics+0x4a>
 801af0a:	2800      	cmp	r0, #0
 801af0c:	bfa8      	it	ge
 801af0e:	4285      	cmpge	r5, r0
 801af10:	bfcc      	ite	gt
 801af12:	2401      	movgt	r4, #1
 801af14:	2400      	movle	r4, #0
 801af16:	4620      	mov	r0, r4
 801af18:	b003      	add	sp, #12
 801af1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af1c:	080241f0 	.word	0x080241f0
 801af20:	080241ec 	.word	0x080241ec
 801af24:	080241d0 	.word	0x080241d0
 801af28:	080241e4 	.word	0x080241e4
 801af2c:	080241e0 	.word	0x080241e0

0801af30 <generate_service_types>:
 801af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af34:	4606      	mov	r6, r0
 801af36:	b087      	sub	sp, #28
 801af38:	461c      	mov	r4, r3
 801af3a:	6883      	ldr	r3, [r0, #8]
 801af3c:	460d      	mov	r5, r1
 801af3e:	4617      	mov	r7, r2
 801af40:	4798      	blx	r3
 801af42:	68f3      	ldr	r3, [r6, #12]
 801af44:	4606      	mov	r6, r0
 801af46:	4798      	blx	r3
 801af48:	2300      	movs	r3, #0
 801af4a:	f8d0 b004 	ldr.w	fp, [r0, #4]
 801af4e:	6872      	ldr	r2, [r6, #4]
 801af50:	702b      	strb	r3, [r5, #0]
 801af52:	6813      	ldr	r3, [r2, #0]
 801af54:	2b00      	cmp	r3, #0
 801af56:	d03f      	beq.n	801afd8 <generate_service_types+0xa8>
 801af58:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801afec <generate_service_types+0xbc>
 801af5c:	4649      	mov	r1, r9
 801af5e:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 801aff4 <generate_service_types+0xc4>
 801af62:	4628      	mov	r0, r5
 801af64:	f8df a090 	ldr.w	sl, [pc, #144]	@ 801aff8 <generate_service_types+0xc8>
 801af68:	f8cd 8014 	str.w	r8, [sp, #20]
 801af6c:	6852      	ldr	r2, [r2, #4]
 801af6e:	9100      	str	r1, [sp, #0]
 801af70:	4621      	mov	r1, r4
 801af72:	f8cd 8008 	str.w	r8, [sp, #8]
 801af76:	f8cd a004 	str.w	sl, [sp, #4]
 801af7a:	e9cd 9203 	strd	r9, r2, [sp, #12]
 801af7e:	4a1a      	ldr	r2, [pc, #104]	@ (801afe8 <generate_service_types+0xb8>)
 801af80:	f005 fe8e 	bl	8020ca0 <sniprintf>
 801af84:	2300      	movs	r3, #0
 801af86:	42a0      	cmp	r0, r4
 801af88:	ea6f 0600 	mvn.w	r6, r0
 801af8c:	703b      	strb	r3, [r7, #0]
 801af8e:	f8db 3000 	ldr.w	r3, [fp]
 801af92:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 801af96:	bfac      	ite	ge
 801af98:	2500      	movge	r5, #0
 801af9a:	2501      	movlt	r5, #1
 801af9c:	b30b      	cbz	r3, 801afe2 <generate_service_types+0xb2>
 801af9e:	4a13      	ldr	r2, [pc, #76]	@ (801afec <generate_service_types+0xbc>)
 801afa0:	f8cd 8014 	str.w	r8, [sp, #20]
 801afa4:	402e      	ands	r6, r5
 801afa6:	f8db 1004 	ldr.w	r1, [fp, #4]
 801afaa:	4638      	mov	r0, r7
 801afac:	9104      	str	r1, [sp, #16]
 801afae:	4621      	mov	r1, r4
 801afb0:	e9cd 2a00 	strd	r2, sl, [sp]
 801afb4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801afb8:	4a0b      	ldr	r2, [pc, #44]	@ (801afe8 <generate_service_types+0xb8>)
 801afba:	f005 fe71 	bl	8020ca0 <sniprintf>
 801afbe:	2800      	cmp	r0, #0
 801afc0:	bfb4      	ite	lt
 801afc2:	2600      	movlt	r6, #0
 801afc4:	f006 0601 	andge.w	r6, r6, #1
 801afc8:	42a0      	cmp	r0, r4
 801afca:	bfac      	ite	ge
 801afcc:	2000      	movge	r0, #0
 801afce:	f006 0001 	andlt.w	r0, r6, #1
 801afd2:	b007      	add	sp, #28
 801afd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afd8:	4b05      	ldr	r3, [pc, #20]	@ (801aff0 <generate_service_types+0xc0>)
 801afda:	f8df 9010 	ldr.w	r9, [pc, #16]	@ 801afec <generate_service_types+0xbc>
 801afde:	4619      	mov	r1, r3
 801afe0:	e7bd      	b.n	801af5e <generate_service_types+0x2e>
 801afe2:	4b03      	ldr	r3, [pc, #12]	@ (801aff0 <generate_service_types+0xc0>)
 801afe4:	461a      	mov	r2, r3
 801afe6:	e7db      	b.n	801afa0 <generate_service_types+0x70>
 801afe8:	080241c8 	.word	0x080241c8
 801afec:	080241c4 	.word	0x080241c4
 801aff0:	08024550 	.word	0x08024550
 801aff4:	080241d8 	.word	0x080241d8
 801aff8:	080241dc 	.word	0x080241dc

0801affc <generate_type_name>:
 801affc:	2300      	movs	r3, #0
 801affe:	b530      	push	{r4, r5, lr}
 801b000:	700b      	strb	r3, [r1, #0]
 801b002:	b087      	sub	sp, #28
 801b004:	6803      	ldr	r3, [r0, #0]
 801b006:	4614      	mov	r4, r2
 801b008:	b1bb      	cbz	r3, 801b03a <generate_type_name+0x3e>
 801b00a:	4a0e      	ldr	r2, [pc, #56]	@ (801b044 <generate_type_name+0x48>)
 801b00c:	4615      	mov	r5, r2
 801b00e:	9500      	str	r5, [sp, #0]
 801b010:	9203      	str	r2, [sp, #12]
 801b012:	4d0d      	ldr	r5, [pc, #52]	@ (801b048 <generate_type_name+0x4c>)
 801b014:	6842      	ldr	r2, [r0, #4]
 801b016:	4608      	mov	r0, r1
 801b018:	490c      	ldr	r1, [pc, #48]	@ (801b04c <generate_type_name+0x50>)
 801b01a:	9204      	str	r2, [sp, #16]
 801b01c:	9105      	str	r1, [sp, #20]
 801b01e:	9102      	str	r1, [sp, #8]
 801b020:	4621      	mov	r1, r4
 801b022:	4a0b      	ldr	r2, [pc, #44]	@ (801b050 <generate_type_name+0x54>)
 801b024:	9501      	str	r5, [sp, #4]
 801b026:	f005 fe3b 	bl	8020ca0 <sniprintf>
 801b02a:	2800      	cmp	r0, #0
 801b02c:	bfa8      	it	ge
 801b02e:	4284      	cmpge	r4, r0
 801b030:	bfcc      	ite	gt
 801b032:	2001      	movgt	r0, #1
 801b034:	2000      	movle	r0, #0
 801b036:	b007      	add	sp, #28
 801b038:	bd30      	pop	{r4, r5, pc}
 801b03a:	4b06      	ldr	r3, [pc, #24]	@ (801b054 <generate_type_name+0x58>)
 801b03c:	4a01      	ldr	r2, [pc, #4]	@ (801b044 <generate_type_name+0x48>)
 801b03e:	461d      	mov	r5, r3
 801b040:	e7e5      	b.n	801b00e <generate_type_name+0x12>
 801b042:	bf00      	nop
 801b044:	080241c4 	.word	0x080241c4
 801b048:	080241dc 	.word	0x080241dc
 801b04c:	080241d8 	.word	0x080241d8
 801b050:	080241c8 	.word	0x080241c8
 801b054:	08024550 	.word	0x08024550

0801b058 <generate_topic_name>:
 801b058:	b530      	push	{r4, r5, lr}
 801b05a:	4614      	mov	r4, r2
 801b05c:	b083      	sub	sp, #12
 801b05e:	4605      	mov	r5, r0
 801b060:	4b07      	ldr	r3, [pc, #28]	@ (801b080 <generate_topic_name+0x28>)
 801b062:	4a08      	ldr	r2, [pc, #32]	@ (801b084 <generate_topic_name+0x2c>)
 801b064:	4608      	mov	r0, r1
 801b066:	9500      	str	r5, [sp, #0]
 801b068:	4621      	mov	r1, r4
 801b06a:	f005 fe19 	bl	8020ca0 <sniprintf>
 801b06e:	2800      	cmp	r0, #0
 801b070:	bfa8      	it	ge
 801b072:	4284      	cmpge	r4, r0
 801b074:	bfcc      	ite	gt
 801b076:	2001      	movgt	r0, #1
 801b078:	2000      	movle	r0, #0
 801b07a:	b003      	add	sp, #12
 801b07c:	bd30      	pop	{r4, r5, pc}
 801b07e:	bf00      	nop
 801b080:	080241f8 	.word	0x080241f8
 801b084:	08023b90 	.word	0x08023b90

0801b088 <is_uxrce_rmw_identifier_valid>:
 801b088:	b510      	push	{r4, lr}
 801b08a:	4604      	mov	r4, r0
 801b08c:	b140      	cbz	r0, 801b0a0 <is_uxrce_rmw_identifier_valid+0x18>
 801b08e:	f7fe f949 	bl	8019324 <rmw_get_implementation_identifier>
 801b092:	4601      	mov	r1, r0
 801b094:	4620      	mov	r0, r4
 801b096:	f7e5 f923 	bl	80002e0 <strcmp>
 801b09a:	fab0 f080 	clz	r0, r0
 801b09e:	0940      	lsrs	r0, r0, #5
 801b0a0:	bd10      	pop	{r4, pc}
 801b0a2:	bf00      	nop

0801b0a4 <std_msgs__msg__Header__init>:
 801b0a4:	b570      	push	{r4, r5, r6, lr}
 801b0a6:	4605      	mov	r5, r0
 801b0a8:	b1a8      	cbz	r0, 801b0d6 <std_msgs__msg__Header__init+0x32>
 801b0aa:	f7fa fbf7 	bl	801589c <builtin_interfaces__msg__Time__init>
 801b0ae:	4604      	mov	r4, r0
 801b0b0:	b140      	cbz	r0, 801b0c4 <std_msgs__msg__Header__init+0x20>
 801b0b2:	f105 0608 	add.w	r6, r5, #8
 801b0b6:	4630      	mov	r0, r6
 801b0b8:	f004 fcbc 	bl	801fa34 <rosidl_runtime_c__String__init>
 801b0bc:	4604      	mov	r4, r0
 801b0be:	b168      	cbz	r0, 801b0dc <std_msgs__msg__Header__init+0x38>
 801b0c0:	4620      	mov	r0, r4
 801b0c2:	bd70      	pop	{r4, r5, r6, pc}
 801b0c4:	4628      	mov	r0, r5
 801b0c6:	f7fa fbed 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801b0ca:	f105 0008 	add.w	r0, r5, #8
 801b0ce:	f004 fcc7 	bl	801fa60 <rosidl_runtime_c__String__fini>
 801b0d2:	4620      	mov	r0, r4
 801b0d4:	bd70      	pop	{r4, r5, r6, pc}
 801b0d6:	4604      	mov	r4, r0
 801b0d8:	4620      	mov	r0, r4
 801b0da:	bd70      	pop	{r4, r5, r6, pc}
 801b0dc:	4628      	mov	r0, r5
 801b0de:	f7fa fbe1 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801b0e2:	4630      	mov	r0, r6
 801b0e4:	f004 fcbc 	bl	801fa60 <rosidl_runtime_c__String__fini>
 801b0e8:	e7ea      	b.n	801b0c0 <std_msgs__msg__Header__init+0x1c>
 801b0ea:	bf00      	nop

0801b0ec <std_msgs__msg__Header__fini>:
 801b0ec:	b148      	cbz	r0, 801b102 <std_msgs__msg__Header__fini+0x16>
 801b0ee:	b510      	push	{r4, lr}
 801b0f0:	4604      	mov	r4, r0
 801b0f2:	f7fa fbd7 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801b0f6:	f104 0008 	add.w	r0, r4, #8
 801b0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0fe:	f004 bcaf 	b.w	801fa60 <rosidl_runtime_c__String__fini>
 801b102:	4770      	bx	lr

0801b104 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 801b104:	b570      	push	{r4, r5, r6, lr}
 801b106:	4605      	mov	r5, r0
 801b108:	b1a8      	cbz	r0, 801b136 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 801b10a:	f7ff ffcb 	bl	801b0a4 <std_msgs__msg__Header__init>
 801b10e:	4604      	mov	r4, r0
 801b110:	b140      	cbz	r0, 801b124 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 801b112:	f105 0618 	add.w	r6, r5, #24
 801b116:	4630      	mov	r0, r6
 801b118:	f004 fcea 	bl	801faf0 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 801b11c:	4604      	mov	r4, r0
 801b11e:	b168      	cbz	r0, 801b13c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 801b120:	4620      	mov	r0, r4
 801b122:	bd70      	pop	{r4, r5, r6, pc}
 801b124:	4628      	mov	r0, r5
 801b126:	f7ff ffe1 	bl	801b0ec <std_msgs__msg__Header__fini>
 801b12a:	f105 0018 	add.w	r0, r5, #24
 801b12e:	f004 fce3 	bl	801faf8 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801b132:	4620      	mov	r0, r4
 801b134:	bd70      	pop	{r4, r5, r6, pc}
 801b136:	4604      	mov	r4, r0
 801b138:	4620      	mov	r0, r4
 801b13a:	bd70      	pop	{r4, r5, r6, pc}
 801b13c:	4628      	mov	r0, r5
 801b13e:	f7ff ffd5 	bl	801b0ec <std_msgs__msg__Header__fini>
 801b142:	4630      	mov	r0, r6
 801b144:	f004 fcd8 	bl	801faf8 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801b148:	e7ea      	b.n	801b120 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 801b14a:	bf00      	nop

0801b14c <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 801b14c:	b148      	cbz	r0, 801b162 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 801b14e:	b510      	push	{r4, lr}
 801b150:	4604      	mov	r4, r0
 801b152:	f7ff ffcb 	bl	801b0ec <std_msgs__msg__Header__fini>
 801b156:	f104 0018 	add.w	r0, r4, #24
 801b15a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b15e:	f004 bccb 	b.w	801faf8 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801b162:	4770      	bx	lr

0801b164 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801b164:	b570      	push	{r4, r5, r6, lr}
 801b166:	4605      	mov	r5, r0
 801b168:	b1a8      	cbz	r0, 801b196 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 801b16a:	f7ff ff9b 	bl	801b0a4 <std_msgs__msg__Header__init>
 801b16e:	4604      	mov	r4, r0
 801b170:	b140      	cbz	r0, 801b184 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 801b172:	f105 0618 	add.w	r6, r5, #24
 801b176:	4630      	mov	r0, r6
 801b178:	f004 fcc0 	bl	801fafc <tier4_vehicle_msgs__msg__ActuationStatus__init>
 801b17c:	4604      	mov	r4, r0
 801b17e:	b168      	cbz	r0, 801b19c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 801b180:	4620      	mov	r0, r4
 801b182:	bd70      	pop	{r4, r5, r6, pc}
 801b184:	4628      	mov	r0, r5
 801b186:	f7ff ffb1 	bl	801b0ec <std_msgs__msg__Header__fini>
 801b18a:	f105 0018 	add.w	r0, r5, #24
 801b18e:	f004 fcb9 	bl	801fb04 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801b192:	4620      	mov	r0, r4
 801b194:	bd70      	pop	{r4, r5, r6, pc}
 801b196:	4604      	mov	r4, r0
 801b198:	4620      	mov	r0, r4
 801b19a:	bd70      	pop	{r4, r5, r6, pc}
 801b19c:	4628      	mov	r0, r5
 801b19e:	f7ff ffa5 	bl	801b0ec <std_msgs__msg__Header__fini>
 801b1a2:	4630      	mov	r0, r6
 801b1a4:	f004 fcae 	bl	801fb04 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801b1a8:	e7ea      	b.n	801b180 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 801b1aa:	bf00      	nop

0801b1ac <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 801b1ac:	b148      	cbz	r0, 801b1c2 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 801b1ae:	b510      	push	{r4, lr}
 801b1b0:	4604      	mov	r4, r0
 801b1b2:	f7ff ff9b 	bl	801b0ec <std_msgs__msg__Header__fini>
 801b1b6:	f104 0018 	add.w	r0, r4, #24
 801b1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1be:	f004 bca1 	b.w	801fb04 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801b1c2:	4770      	bx	lr

0801b1c4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 801b1c4:	b538      	push	{r3, r4, r5, lr}
 801b1c6:	4604      	mov	r4, r0
 801b1c8:	b128      	cbz	r0, 801b1d6 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 801b1ca:	f7fa fb67 	bl	801589c <builtin_interfaces__msg__Time__init>
 801b1ce:	4605      	mov	r5, r0
 801b1d0:	b120      	cbz	r0, 801b1dc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801b1d2:	4628      	mov	r0, r5
 801b1d4:	bd38      	pop	{r3, r4, r5, pc}
 801b1d6:	4605      	mov	r5, r0
 801b1d8:	4628      	mov	r0, r5
 801b1da:	bd38      	pop	{r3, r4, r5, pc}
 801b1dc:	4620      	mov	r0, r4
 801b1de:	f7fa fb61 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801b1e2:	4628      	mov	r0, r5
 801b1e4:	bd38      	pop	{r3, r4, r5, pc}
 801b1e6:	bf00      	nop

0801b1e8 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 801b1e8:	b108      	cbz	r0, 801b1ee <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 801b1ea:	f7fa bb5b 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 801b1ee:	4770      	bx	lr

0801b1f0 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 801b1f0:	b538      	push	{r3, r4, r5, lr}
 801b1f2:	4604      	mov	r4, r0
 801b1f4:	b128      	cbz	r0, 801b202 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 801b1f6:	f7fa fb51 	bl	801589c <builtin_interfaces__msg__Time__init>
 801b1fa:	4605      	mov	r5, r0
 801b1fc:	b120      	cbz	r0, 801b208 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 801b1fe:	4628      	mov	r0, r5
 801b200:	bd38      	pop	{r3, r4, r5, pc}
 801b202:	4605      	mov	r5, r0
 801b204:	4628      	mov	r0, r5
 801b206:	bd38      	pop	{r3, r4, r5, pc}
 801b208:	4620      	mov	r0, r4
 801b20a:	f7fa fb4b 	bl	80158a4 <builtin_interfaces__msg__Time__fini>
 801b20e:	4628      	mov	r0, r5
 801b210:	bd38      	pop	{r3, r4, r5, pc}
 801b212:	bf00      	nop

0801b214 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801b214:	b108      	cbz	r0, 801b21a <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801b216:	f7fa bb45 	b.w	80158a4 <builtin_interfaces__msg__Time__fini>
 801b21a:	4770      	bx	lr

0801b21c <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 801b21c:	f004 bc68 	b.w	801faf0 <tier4_vehicle_msgs__msg__ActuationCommand__init>

0801b220 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 801b220:	f004 bc6a 	b.w	801faf8 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

0801b224 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801b224:	4b04      	ldr	r3, [pc, #16]	@ (801b238 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801b226:	681a      	ldr	r2, [r3, #0]
 801b228:	b10a      	cbz	r2, 801b22e <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 801b22a:	4803      	ldr	r0, [pc, #12]	@ (801b238 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801b22c:	4770      	bx	lr
 801b22e:	4a03      	ldr	r2, [pc, #12]	@ (801b23c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 801b230:	4801      	ldr	r0, [pc, #4]	@ (801b238 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801b232:	6812      	ldr	r2, [r2, #0]
 801b234:	601a      	str	r2, [r3, #0]
 801b236:	4770      	bx	lr
 801b238:	24001278 	.word	0x24001278
 801b23c:	24000e14 	.word	0x24000e14

0801b240 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 801b240:	f004 bc5c 	b.w	801fafc <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801b244 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801b244:	f004 bc5e 	b.w	801fb04 <tier4_vehicle_msgs__msg__ActuationStatus__fini>

0801b248 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801b248:	4b04      	ldr	r3, [pc, #16]	@ (801b25c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801b24a:	681a      	ldr	r2, [r3, #0]
 801b24c:	b10a      	cbz	r2, 801b252 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 801b24e:	4803      	ldr	r0, [pc, #12]	@ (801b25c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801b250:	4770      	bx	lr
 801b252:	4a03      	ldr	r2, [pc, #12]	@ (801b260 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801b254:	4801      	ldr	r0, [pc, #4]	@ (801b25c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801b256:	6812      	ldr	r2, [r2, #0]
 801b258:	601a      	str	r2, [r3, #0]
 801b25a:	4770      	bx	lr
 801b25c:	24001338 	.word	0x24001338
 801b260:	24000e14 	.word	0x24000e14

0801b264 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801b264:	b1b8      	cbz	r0, 801b296 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801b266:	b538      	push	{r3, r4, r5, lr}
 801b268:	460d      	mov	r5, r1
 801b26a:	2108      	movs	r1, #8
 801b26c:	4628      	mov	r0, r5
 801b26e:	f7f8 fcfd 	bl	8013c6c <ucdr_alignment>
 801b272:	f105 0308 	add.w	r3, r5, #8
 801b276:	2108      	movs	r1, #8
 801b278:	f1c5 0508 	rsb	r5, r5, #8
 801b27c:	181c      	adds	r4, r3, r0
 801b27e:	4620      	mov	r0, r4
 801b280:	f7f8 fcf4 	bl	8013c6c <ucdr_alignment>
 801b284:	2108      	movs	r1, #8
 801b286:	4408      	add	r0, r1
 801b288:	4404      	add	r4, r0
 801b28a:	4620      	mov	r0, r4
 801b28c:	f7f8 fcee 	bl	8013c6c <ucdr_alignment>
 801b290:	4428      	add	r0, r5
 801b292:	4420      	add	r0, r4
 801b294:	bd38      	pop	{r3, r4, r5, pc}
 801b296:	4770      	bx	lr

0801b298 <_ActuationCommand__cdr_deserialize>:
 801b298:	b538      	push	{r3, r4, r5, lr}
 801b29a:	460c      	mov	r4, r1
 801b29c:	b171      	cbz	r1, 801b2bc <_ActuationCommand__cdr_deserialize+0x24>
 801b29e:	4605      	mov	r5, r0
 801b2a0:	f7f8 fbc6 	bl	8013a30 <ucdr_deserialize_double>
 801b2a4:	f104 0108 	add.w	r1, r4, #8
 801b2a8:	4628      	mov	r0, r5
 801b2aa:	f7f8 fbc1 	bl	8013a30 <ucdr_deserialize_double>
 801b2ae:	f104 0110 	add.w	r1, r4, #16
 801b2b2:	4628      	mov	r0, r5
 801b2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2b8:	f7f8 bbba 	b.w	8013a30 <ucdr_deserialize_double>
 801b2bc:	4608      	mov	r0, r1
 801b2be:	bd38      	pop	{r3, r4, r5, pc}

0801b2c0 <_ActuationCommand__cdr_serialize>:
 801b2c0:	b198      	cbz	r0, 801b2ea <_ActuationCommand__cdr_serialize+0x2a>
 801b2c2:	b538      	push	{r3, r4, r5, lr}
 801b2c4:	460d      	mov	r5, r1
 801b2c6:	4604      	mov	r4, r0
 801b2c8:	ed90 0b00 	vldr	d0, [r0]
 801b2cc:	4608      	mov	r0, r1
 801b2ce:	f7f8 fadf 	bl	8013890 <ucdr_serialize_double>
 801b2d2:	4628      	mov	r0, r5
 801b2d4:	ed94 0b02 	vldr	d0, [r4, #8]
 801b2d8:	f7f8 fada 	bl	8013890 <ucdr_serialize_double>
 801b2dc:	4628      	mov	r0, r5
 801b2de:	ed94 0b04 	vldr	d0, [r4, #16]
 801b2e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2e6:	f7f8 bad3 	b.w	8013890 <ucdr_serialize_double>
 801b2ea:	4770      	bx	lr

0801b2ec <_ActuationCommand__get_serialized_size>:
 801b2ec:	b190      	cbz	r0, 801b314 <_ActuationCommand__get_serialized_size+0x28>
 801b2ee:	2108      	movs	r1, #8
 801b2f0:	2000      	movs	r0, #0
 801b2f2:	b510      	push	{r4, lr}
 801b2f4:	f7f8 fcba 	bl	8013c6c <ucdr_alignment>
 801b2f8:	2108      	movs	r1, #8
 801b2fa:	1844      	adds	r4, r0, r1
 801b2fc:	4620      	mov	r0, r4
 801b2fe:	f7f8 fcb5 	bl	8013c6c <ucdr_alignment>
 801b302:	2108      	movs	r1, #8
 801b304:	4408      	add	r0, r1
 801b306:	4404      	add	r4, r0
 801b308:	4620      	mov	r0, r4
 801b30a:	f7f8 fcaf 	bl	8013c6c <ucdr_alignment>
 801b30e:	3008      	adds	r0, #8
 801b310:	4420      	add	r0, r4
 801b312:	bd10      	pop	{r4, pc}
 801b314:	4770      	bx	lr
 801b316:	bf00      	nop

0801b318 <_ActuationCommand__max_serialized_size>:
 801b318:	b538      	push	{r3, r4, r5, lr}
 801b31a:	2108      	movs	r1, #8
 801b31c:	2000      	movs	r0, #0
 801b31e:	f7f8 fca5 	bl	8013c6c <ucdr_alignment>
 801b322:	2108      	movs	r1, #8
 801b324:	1845      	adds	r5, r0, r1
 801b326:	4628      	mov	r0, r5
 801b328:	f7f8 fca0 	bl	8013c6c <ucdr_alignment>
 801b32c:	2108      	movs	r1, #8
 801b32e:	1844      	adds	r4, r0, r1
 801b330:	442c      	add	r4, r5
 801b332:	4620      	mov	r0, r4
 801b334:	f7f8 fc9a 	bl	8013c6c <ucdr_alignment>
 801b338:	3008      	adds	r0, #8
 801b33a:	4420      	add	r0, r4
 801b33c:	bd38      	pop	{r3, r4, r5, pc}
 801b33e:	bf00      	nop

0801b340 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801b340:	b570      	push	{r4, r5, r6, lr}
 801b342:	460c      	mov	r4, r1
 801b344:	2301      	movs	r3, #1
 801b346:	2108      	movs	r1, #8
 801b348:	f104 0508 	add.w	r5, r4, #8
 801b34c:	7003      	strb	r3, [r0, #0]
 801b34e:	4620      	mov	r0, r4
 801b350:	f1c4 0408 	rsb	r4, r4, #8
 801b354:	f7f8 fc8a 	bl	8013c6c <ucdr_alignment>
 801b358:	1946      	adds	r6, r0, r5
 801b35a:	2108      	movs	r1, #8
 801b35c:	4630      	mov	r0, r6
 801b35e:	f7f8 fc85 	bl	8013c6c <ucdr_alignment>
 801b362:	2108      	movs	r1, #8
 801b364:	1845      	adds	r5, r0, r1
 801b366:	4435      	add	r5, r6
 801b368:	4628      	mov	r0, r5
 801b36a:	f7f8 fc7f 	bl	8013c6c <ucdr_alignment>
 801b36e:	4420      	add	r0, r4
 801b370:	4428      	add	r0, r5
 801b372:	bd70      	pop	{r4, r5, r6, pc}

0801b374 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801b374:	4800      	ldr	r0, [pc, #0]	@ (801b378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801b376:	4770      	bx	lr
 801b378:	24001344 	.word	0x24001344

0801b37c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801b37c:	b1b8      	cbz	r0, 801b3ae <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 801b37e:	b538      	push	{r3, r4, r5, lr}
 801b380:	460d      	mov	r5, r1
 801b382:	2108      	movs	r1, #8
 801b384:	4628      	mov	r0, r5
 801b386:	f7f8 fc71 	bl	8013c6c <ucdr_alignment>
 801b38a:	f105 0308 	add.w	r3, r5, #8
 801b38e:	2108      	movs	r1, #8
 801b390:	f1c5 0508 	rsb	r5, r5, #8
 801b394:	181c      	adds	r4, r3, r0
 801b396:	4620      	mov	r0, r4
 801b398:	f7f8 fc68 	bl	8013c6c <ucdr_alignment>
 801b39c:	2108      	movs	r1, #8
 801b39e:	4408      	add	r0, r1
 801b3a0:	4404      	add	r4, r0
 801b3a2:	4620      	mov	r0, r4
 801b3a4:	f7f8 fc62 	bl	8013c6c <ucdr_alignment>
 801b3a8:	4428      	add	r0, r5
 801b3aa:	4420      	add	r0, r4
 801b3ac:	bd38      	pop	{r3, r4, r5, pc}
 801b3ae:	4770      	bx	lr

0801b3b0 <_ActuationStatus__cdr_deserialize>:
 801b3b0:	b538      	push	{r3, r4, r5, lr}
 801b3b2:	460c      	mov	r4, r1
 801b3b4:	b171      	cbz	r1, 801b3d4 <_ActuationStatus__cdr_deserialize+0x24>
 801b3b6:	4605      	mov	r5, r0
 801b3b8:	f7f8 fb3a 	bl	8013a30 <ucdr_deserialize_double>
 801b3bc:	f104 0108 	add.w	r1, r4, #8
 801b3c0:	4628      	mov	r0, r5
 801b3c2:	f7f8 fb35 	bl	8013a30 <ucdr_deserialize_double>
 801b3c6:	f104 0110 	add.w	r1, r4, #16
 801b3ca:	4628      	mov	r0, r5
 801b3cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3d0:	f7f8 bb2e 	b.w	8013a30 <ucdr_deserialize_double>
 801b3d4:	4608      	mov	r0, r1
 801b3d6:	bd38      	pop	{r3, r4, r5, pc}

0801b3d8 <_ActuationStatus__cdr_serialize>:
 801b3d8:	b198      	cbz	r0, 801b402 <_ActuationStatus__cdr_serialize+0x2a>
 801b3da:	b538      	push	{r3, r4, r5, lr}
 801b3dc:	460d      	mov	r5, r1
 801b3de:	4604      	mov	r4, r0
 801b3e0:	ed90 0b00 	vldr	d0, [r0]
 801b3e4:	4608      	mov	r0, r1
 801b3e6:	f7f8 fa53 	bl	8013890 <ucdr_serialize_double>
 801b3ea:	4628      	mov	r0, r5
 801b3ec:	ed94 0b02 	vldr	d0, [r4, #8]
 801b3f0:	f7f8 fa4e 	bl	8013890 <ucdr_serialize_double>
 801b3f4:	4628      	mov	r0, r5
 801b3f6:	ed94 0b04 	vldr	d0, [r4, #16]
 801b3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3fe:	f7f8 ba47 	b.w	8013890 <ucdr_serialize_double>
 801b402:	4770      	bx	lr

0801b404 <_ActuationStatus__get_serialized_size>:
 801b404:	b190      	cbz	r0, 801b42c <_ActuationStatus__get_serialized_size+0x28>
 801b406:	2108      	movs	r1, #8
 801b408:	2000      	movs	r0, #0
 801b40a:	b510      	push	{r4, lr}
 801b40c:	f7f8 fc2e 	bl	8013c6c <ucdr_alignment>
 801b410:	2108      	movs	r1, #8
 801b412:	1844      	adds	r4, r0, r1
 801b414:	4620      	mov	r0, r4
 801b416:	f7f8 fc29 	bl	8013c6c <ucdr_alignment>
 801b41a:	2108      	movs	r1, #8
 801b41c:	4408      	add	r0, r1
 801b41e:	4404      	add	r4, r0
 801b420:	4620      	mov	r0, r4
 801b422:	f7f8 fc23 	bl	8013c6c <ucdr_alignment>
 801b426:	3008      	adds	r0, #8
 801b428:	4420      	add	r0, r4
 801b42a:	bd10      	pop	{r4, pc}
 801b42c:	4770      	bx	lr
 801b42e:	bf00      	nop

0801b430 <_ActuationStatus__max_serialized_size>:
 801b430:	b538      	push	{r3, r4, r5, lr}
 801b432:	2108      	movs	r1, #8
 801b434:	2000      	movs	r0, #0
 801b436:	f7f8 fc19 	bl	8013c6c <ucdr_alignment>
 801b43a:	2108      	movs	r1, #8
 801b43c:	1845      	adds	r5, r0, r1
 801b43e:	4628      	mov	r0, r5
 801b440:	f7f8 fc14 	bl	8013c6c <ucdr_alignment>
 801b444:	2108      	movs	r1, #8
 801b446:	1844      	adds	r4, r0, r1
 801b448:	442c      	add	r4, r5
 801b44a:	4620      	mov	r0, r4
 801b44c:	f7f8 fc0e 	bl	8013c6c <ucdr_alignment>
 801b450:	3008      	adds	r0, #8
 801b452:	4420      	add	r0, r4
 801b454:	bd38      	pop	{r3, r4, r5, pc}
 801b456:	bf00      	nop

0801b458 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801b458:	b570      	push	{r4, r5, r6, lr}
 801b45a:	460c      	mov	r4, r1
 801b45c:	2301      	movs	r3, #1
 801b45e:	2108      	movs	r1, #8
 801b460:	f104 0508 	add.w	r5, r4, #8
 801b464:	7003      	strb	r3, [r0, #0]
 801b466:	4620      	mov	r0, r4
 801b468:	f1c4 0408 	rsb	r4, r4, #8
 801b46c:	f7f8 fbfe 	bl	8013c6c <ucdr_alignment>
 801b470:	1946      	adds	r6, r0, r5
 801b472:	2108      	movs	r1, #8
 801b474:	4630      	mov	r0, r6
 801b476:	f7f8 fbf9 	bl	8013c6c <ucdr_alignment>
 801b47a:	2108      	movs	r1, #8
 801b47c:	1845      	adds	r5, r0, r1
 801b47e:	4435      	add	r5, r6
 801b480:	4628      	mov	r0, r5
 801b482:	f7f8 fbf3 	bl	8013c6c <ucdr_alignment>
 801b486:	4420      	add	r0, r4
 801b488:	4428      	add	r0, r5
 801b48a:	bd70      	pop	{r4, r5, r6, pc}

0801b48c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801b48c:	4800      	ldr	r0, [pc, #0]	@ (801b490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 801b48e:	4770      	bx	lr
 801b490:	2400136c 	.word	0x2400136c

0801b494 <ucdr_serialize_endian_array_char>:
 801b494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b498:	4619      	mov	r1, r3
 801b49a:	461f      	mov	r7, r3
 801b49c:	4605      	mov	r5, r0
 801b49e:	4690      	mov	r8, r2
 801b4a0:	f7f8 fb8c 	bl	8013bbc <ucdr_check_buffer_available_for>
 801b4a4:	b9e0      	cbnz	r0, 801b4e0 <ucdr_serialize_endian_array_char+0x4c>
 801b4a6:	463e      	mov	r6, r7
 801b4a8:	e00b      	b.n	801b4c2 <ucdr_serialize_endian_array_char+0x2e>
 801b4aa:	4441      	add	r1, r8
 801b4ac:	68a8      	ldr	r0, [r5, #8]
 801b4ae:	4622      	mov	r2, r4
 801b4b0:	1b36      	subs	r6, r6, r4
 801b4b2:	f005 fea2 	bl	80211fa <memcpy>
 801b4b6:	68ab      	ldr	r3, [r5, #8]
 801b4b8:	6928      	ldr	r0, [r5, #16]
 801b4ba:	4423      	add	r3, r4
 801b4bc:	4420      	add	r0, r4
 801b4be:	60ab      	str	r3, [r5, #8]
 801b4c0:	6128      	str	r0, [r5, #16]
 801b4c2:	4631      	mov	r1, r6
 801b4c4:	2201      	movs	r2, #1
 801b4c6:	4628      	mov	r0, r5
 801b4c8:	f7f8 fc02 	bl	8013cd0 <ucdr_check_final_buffer_behavior_array>
 801b4cc:	1bb9      	subs	r1, r7, r6
 801b4ce:	4604      	mov	r4, r0
 801b4d0:	2800      	cmp	r0, #0
 801b4d2:	d1ea      	bne.n	801b4aa <ucdr_serialize_endian_array_char+0x16>
 801b4d4:	2301      	movs	r3, #1
 801b4d6:	7da8      	ldrb	r0, [r5, #22]
 801b4d8:	756b      	strb	r3, [r5, #21]
 801b4da:	4058      	eors	r0, r3
 801b4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4e0:	463a      	mov	r2, r7
 801b4e2:	4641      	mov	r1, r8
 801b4e4:	68a8      	ldr	r0, [r5, #8]
 801b4e6:	f005 fe88 	bl	80211fa <memcpy>
 801b4ea:	68aa      	ldr	r2, [r5, #8]
 801b4ec:	692b      	ldr	r3, [r5, #16]
 801b4ee:	443a      	add	r2, r7
 801b4f0:	443b      	add	r3, r7
 801b4f2:	60aa      	str	r2, [r5, #8]
 801b4f4:	612b      	str	r3, [r5, #16]
 801b4f6:	e7ed      	b.n	801b4d4 <ucdr_serialize_endian_array_char+0x40>

0801b4f8 <ucdr_deserialize_endian_array_char>:
 801b4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4fc:	4619      	mov	r1, r3
 801b4fe:	461f      	mov	r7, r3
 801b500:	4605      	mov	r5, r0
 801b502:	4690      	mov	r8, r2
 801b504:	f7f8 fb5a 	bl	8013bbc <ucdr_check_buffer_available_for>
 801b508:	b9e8      	cbnz	r0, 801b546 <ucdr_deserialize_endian_array_char+0x4e>
 801b50a:	463e      	mov	r6, r7
 801b50c:	e00c      	b.n	801b528 <ucdr_deserialize_endian_array_char+0x30>
 801b50e:	eb08 0003 	add.w	r0, r8, r3
 801b512:	68a9      	ldr	r1, [r5, #8]
 801b514:	4622      	mov	r2, r4
 801b516:	1b36      	subs	r6, r6, r4
 801b518:	f005 fe6f 	bl	80211fa <memcpy>
 801b51c:	68ab      	ldr	r3, [r5, #8]
 801b51e:	6928      	ldr	r0, [r5, #16]
 801b520:	4423      	add	r3, r4
 801b522:	4420      	add	r0, r4
 801b524:	60ab      	str	r3, [r5, #8]
 801b526:	6128      	str	r0, [r5, #16]
 801b528:	4631      	mov	r1, r6
 801b52a:	2201      	movs	r2, #1
 801b52c:	4628      	mov	r0, r5
 801b52e:	f7f8 fbcf 	bl	8013cd0 <ucdr_check_final_buffer_behavior_array>
 801b532:	1bbb      	subs	r3, r7, r6
 801b534:	4604      	mov	r4, r0
 801b536:	2800      	cmp	r0, #0
 801b538:	d1e9      	bne.n	801b50e <ucdr_deserialize_endian_array_char+0x16>
 801b53a:	2301      	movs	r3, #1
 801b53c:	7da8      	ldrb	r0, [r5, #22]
 801b53e:	756b      	strb	r3, [r5, #21]
 801b540:	4058      	eors	r0, r3
 801b542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b546:	463a      	mov	r2, r7
 801b548:	68a9      	ldr	r1, [r5, #8]
 801b54a:	4640      	mov	r0, r8
 801b54c:	f005 fe55 	bl	80211fa <memcpy>
 801b550:	68aa      	ldr	r2, [r5, #8]
 801b552:	692b      	ldr	r3, [r5, #16]
 801b554:	443a      	add	r2, r7
 801b556:	443b      	add	r3, r7
 801b558:	60aa      	str	r2, [r5, #8]
 801b55a:	612b      	str	r3, [r5, #16]
 801b55c:	e7ed      	b.n	801b53a <ucdr_deserialize_endian_array_char+0x42>
 801b55e:	bf00      	nop

0801b560 <ucdr_serialize_array_uint8_t>:
 801b560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b564:	4688      	mov	r8, r1
 801b566:	4611      	mov	r1, r2
 801b568:	4617      	mov	r7, r2
 801b56a:	4605      	mov	r5, r0
 801b56c:	f7f8 fb26 	bl	8013bbc <ucdr_check_buffer_available_for>
 801b570:	b9e0      	cbnz	r0, 801b5ac <ucdr_serialize_array_uint8_t+0x4c>
 801b572:	463e      	mov	r6, r7
 801b574:	e00b      	b.n	801b58e <ucdr_serialize_array_uint8_t+0x2e>
 801b576:	4441      	add	r1, r8
 801b578:	68a8      	ldr	r0, [r5, #8]
 801b57a:	4622      	mov	r2, r4
 801b57c:	1b36      	subs	r6, r6, r4
 801b57e:	f005 fe3c 	bl	80211fa <memcpy>
 801b582:	68ab      	ldr	r3, [r5, #8]
 801b584:	6928      	ldr	r0, [r5, #16]
 801b586:	4423      	add	r3, r4
 801b588:	4420      	add	r0, r4
 801b58a:	60ab      	str	r3, [r5, #8]
 801b58c:	6128      	str	r0, [r5, #16]
 801b58e:	4631      	mov	r1, r6
 801b590:	2201      	movs	r2, #1
 801b592:	4628      	mov	r0, r5
 801b594:	f7f8 fb9c 	bl	8013cd0 <ucdr_check_final_buffer_behavior_array>
 801b598:	1bb9      	subs	r1, r7, r6
 801b59a:	4604      	mov	r4, r0
 801b59c:	2800      	cmp	r0, #0
 801b59e:	d1ea      	bne.n	801b576 <ucdr_serialize_array_uint8_t+0x16>
 801b5a0:	2301      	movs	r3, #1
 801b5a2:	7da8      	ldrb	r0, [r5, #22]
 801b5a4:	756b      	strb	r3, [r5, #21]
 801b5a6:	4058      	eors	r0, r3
 801b5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5ac:	463a      	mov	r2, r7
 801b5ae:	4641      	mov	r1, r8
 801b5b0:	68a8      	ldr	r0, [r5, #8]
 801b5b2:	f005 fe22 	bl	80211fa <memcpy>
 801b5b6:	68aa      	ldr	r2, [r5, #8]
 801b5b8:	692b      	ldr	r3, [r5, #16]
 801b5ba:	443a      	add	r2, r7
 801b5bc:	443b      	add	r3, r7
 801b5be:	60aa      	str	r2, [r5, #8]
 801b5c0:	612b      	str	r3, [r5, #16]
 801b5c2:	e7ed      	b.n	801b5a0 <ucdr_serialize_array_uint8_t+0x40>

0801b5c4 <ucdr_serialize_endian_array_uint8_t>:
 801b5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5c8:	4619      	mov	r1, r3
 801b5ca:	461f      	mov	r7, r3
 801b5cc:	4605      	mov	r5, r0
 801b5ce:	4690      	mov	r8, r2
 801b5d0:	f7f8 faf4 	bl	8013bbc <ucdr_check_buffer_available_for>
 801b5d4:	b9e0      	cbnz	r0, 801b610 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801b5d6:	463e      	mov	r6, r7
 801b5d8:	e00b      	b.n	801b5f2 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801b5da:	4441      	add	r1, r8
 801b5dc:	68a8      	ldr	r0, [r5, #8]
 801b5de:	4622      	mov	r2, r4
 801b5e0:	1b36      	subs	r6, r6, r4
 801b5e2:	f005 fe0a 	bl	80211fa <memcpy>
 801b5e6:	68ab      	ldr	r3, [r5, #8]
 801b5e8:	6928      	ldr	r0, [r5, #16]
 801b5ea:	4423      	add	r3, r4
 801b5ec:	4420      	add	r0, r4
 801b5ee:	60ab      	str	r3, [r5, #8]
 801b5f0:	6128      	str	r0, [r5, #16]
 801b5f2:	4631      	mov	r1, r6
 801b5f4:	2201      	movs	r2, #1
 801b5f6:	4628      	mov	r0, r5
 801b5f8:	f7f8 fb6a 	bl	8013cd0 <ucdr_check_final_buffer_behavior_array>
 801b5fc:	1bb9      	subs	r1, r7, r6
 801b5fe:	4604      	mov	r4, r0
 801b600:	2800      	cmp	r0, #0
 801b602:	d1ea      	bne.n	801b5da <ucdr_serialize_endian_array_uint8_t+0x16>
 801b604:	2301      	movs	r3, #1
 801b606:	7da8      	ldrb	r0, [r5, #22]
 801b608:	756b      	strb	r3, [r5, #21]
 801b60a:	4058      	eors	r0, r3
 801b60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b610:	463a      	mov	r2, r7
 801b612:	4641      	mov	r1, r8
 801b614:	68a8      	ldr	r0, [r5, #8]
 801b616:	f005 fdf0 	bl	80211fa <memcpy>
 801b61a:	68aa      	ldr	r2, [r5, #8]
 801b61c:	692b      	ldr	r3, [r5, #16]
 801b61e:	443a      	add	r2, r7
 801b620:	443b      	add	r3, r7
 801b622:	60aa      	str	r2, [r5, #8]
 801b624:	612b      	str	r3, [r5, #16]
 801b626:	e7ed      	b.n	801b604 <ucdr_serialize_endian_array_uint8_t+0x40>

0801b628 <ucdr_deserialize_array_uint8_t>:
 801b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b62c:	4688      	mov	r8, r1
 801b62e:	4611      	mov	r1, r2
 801b630:	4617      	mov	r7, r2
 801b632:	4605      	mov	r5, r0
 801b634:	f7f8 fac2 	bl	8013bbc <ucdr_check_buffer_available_for>
 801b638:	b9e8      	cbnz	r0, 801b676 <ucdr_deserialize_array_uint8_t+0x4e>
 801b63a:	463e      	mov	r6, r7
 801b63c:	e00c      	b.n	801b658 <ucdr_deserialize_array_uint8_t+0x30>
 801b63e:	eb08 0003 	add.w	r0, r8, r3
 801b642:	68a9      	ldr	r1, [r5, #8]
 801b644:	4622      	mov	r2, r4
 801b646:	1b36      	subs	r6, r6, r4
 801b648:	f005 fdd7 	bl	80211fa <memcpy>
 801b64c:	68ab      	ldr	r3, [r5, #8]
 801b64e:	6928      	ldr	r0, [r5, #16]
 801b650:	4423      	add	r3, r4
 801b652:	4420      	add	r0, r4
 801b654:	60ab      	str	r3, [r5, #8]
 801b656:	6128      	str	r0, [r5, #16]
 801b658:	4631      	mov	r1, r6
 801b65a:	2201      	movs	r2, #1
 801b65c:	4628      	mov	r0, r5
 801b65e:	f7f8 fb37 	bl	8013cd0 <ucdr_check_final_buffer_behavior_array>
 801b662:	1bbb      	subs	r3, r7, r6
 801b664:	4604      	mov	r4, r0
 801b666:	2800      	cmp	r0, #0
 801b668:	d1e9      	bne.n	801b63e <ucdr_deserialize_array_uint8_t+0x16>
 801b66a:	2301      	movs	r3, #1
 801b66c:	7da8      	ldrb	r0, [r5, #22]
 801b66e:	756b      	strb	r3, [r5, #21]
 801b670:	4058      	eors	r0, r3
 801b672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b676:	463a      	mov	r2, r7
 801b678:	68a9      	ldr	r1, [r5, #8]
 801b67a:	4640      	mov	r0, r8
 801b67c:	f005 fdbd 	bl	80211fa <memcpy>
 801b680:	68aa      	ldr	r2, [r5, #8]
 801b682:	692b      	ldr	r3, [r5, #16]
 801b684:	443a      	add	r2, r7
 801b686:	443b      	add	r3, r7
 801b688:	60aa      	str	r2, [r5, #8]
 801b68a:	612b      	str	r3, [r5, #16]
 801b68c:	e7ed      	b.n	801b66a <ucdr_deserialize_array_uint8_t+0x42>
 801b68e:	bf00      	nop

0801b690 <ucdr_deserialize_endian_array_uint8_t>:
 801b690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b694:	4619      	mov	r1, r3
 801b696:	461f      	mov	r7, r3
 801b698:	4605      	mov	r5, r0
 801b69a:	4690      	mov	r8, r2
 801b69c:	f7f8 fa8e 	bl	8013bbc <ucdr_check_buffer_available_for>
 801b6a0:	b9e8      	cbnz	r0, 801b6de <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801b6a2:	463e      	mov	r6, r7
 801b6a4:	e00c      	b.n	801b6c0 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801b6a6:	eb08 0003 	add.w	r0, r8, r3
 801b6aa:	68a9      	ldr	r1, [r5, #8]
 801b6ac:	4622      	mov	r2, r4
 801b6ae:	1b36      	subs	r6, r6, r4
 801b6b0:	f005 fda3 	bl	80211fa <memcpy>
 801b6b4:	68ab      	ldr	r3, [r5, #8]
 801b6b6:	6928      	ldr	r0, [r5, #16]
 801b6b8:	4423      	add	r3, r4
 801b6ba:	4420      	add	r0, r4
 801b6bc:	60ab      	str	r3, [r5, #8]
 801b6be:	6128      	str	r0, [r5, #16]
 801b6c0:	4631      	mov	r1, r6
 801b6c2:	2201      	movs	r2, #1
 801b6c4:	4628      	mov	r0, r5
 801b6c6:	f7f8 fb03 	bl	8013cd0 <ucdr_check_final_buffer_behavior_array>
 801b6ca:	1bbb      	subs	r3, r7, r6
 801b6cc:	4604      	mov	r4, r0
 801b6ce:	2800      	cmp	r0, #0
 801b6d0:	d1e9      	bne.n	801b6a6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801b6d2:	2301      	movs	r3, #1
 801b6d4:	7da8      	ldrb	r0, [r5, #22]
 801b6d6:	756b      	strb	r3, [r5, #21]
 801b6d8:	4058      	eors	r0, r3
 801b6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6de:	463a      	mov	r2, r7
 801b6e0:	68a9      	ldr	r1, [r5, #8]
 801b6e2:	4640      	mov	r0, r8
 801b6e4:	f005 fd89 	bl	80211fa <memcpy>
 801b6e8:	68aa      	ldr	r2, [r5, #8]
 801b6ea:	692b      	ldr	r3, [r5, #16]
 801b6ec:	443a      	add	r2, r7
 801b6ee:	443b      	add	r3, r7
 801b6f0:	60aa      	str	r2, [r5, #8]
 801b6f2:	612b      	str	r3, [r5, #16]
 801b6f4:	e7ed      	b.n	801b6d2 <ucdr_deserialize_endian_array_uint8_t+0x42>
 801b6f6:	bf00      	nop

0801b6f8 <uxr_buffer_delete_entity>:
 801b6f8:	b510      	push	{r4, lr}
 801b6fa:	2300      	movs	r3, #0
 801b6fc:	b08e      	sub	sp, #56	@ 0x38
 801b6fe:	4604      	mov	r4, r0
 801b700:	9103      	str	r1, [sp, #12]
 801b702:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801b706:	2303      	movs	r3, #3
 801b708:	2204      	movs	r2, #4
 801b70a:	9300      	str	r3, [sp, #0]
 801b70c:	ab06      	add	r3, sp, #24
 801b70e:	f001 fb77 	bl	801ce00 <uxr_prepare_stream_to_write_submessage>
 801b712:	b918      	cbnz	r0, 801b71c <uxr_buffer_delete_entity+0x24>
 801b714:	4604      	mov	r4, r0
 801b716:	4620      	mov	r0, r4
 801b718:	b00e      	add	sp, #56	@ 0x38
 801b71a:	bd10      	pop	{r4, pc}
 801b71c:	9902      	ldr	r1, [sp, #8]
 801b71e:	aa05      	add	r2, sp, #20
 801b720:	4620      	mov	r0, r4
 801b722:	f001 fca9 	bl	801d078 <uxr_init_base_object_request>
 801b726:	4604      	mov	r4, r0
 801b728:	a905      	add	r1, sp, #20
 801b72a:	a806      	add	r0, sp, #24
 801b72c:	f003 fa5a 	bl	801ebe4 <uxr_serialize_DELETE_Payload>
 801b730:	4620      	mov	r0, r4
 801b732:	b00e      	add	sp, #56	@ 0x38
 801b734:	bd10      	pop	{r4, pc}
 801b736:	bf00      	nop

0801b738 <uxr_common_create_entity>:
 801b738:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801b73c:	b510      	push	{r4, lr}
 801b73e:	f1bc 0f01 	cmp.w	ip, #1
 801b742:	b08c      	sub	sp, #48	@ 0x30
 801b744:	4604      	mov	r4, r0
 801b746:	9202      	str	r2, [sp, #8]
 801b748:	bf0c      	ite	eq
 801b74a:	f003 0201 	andeq.w	r2, r3, #1
 801b74e:	2200      	movne	r2, #0
 801b750:	330e      	adds	r3, #14
 801b752:	9103      	str	r1, [sp, #12]
 801b754:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801b758:	441a      	add	r2, r3
 801b75a:	ab04      	add	r3, sp, #16
 801b75c:	9101      	str	r1, [sp, #4]
 801b75e:	2101      	movs	r1, #1
 801b760:	b292      	uxth	r2, r2
 801b762:	9100      	str	r1, [sp, #0]
 801b764:	9903      	ldr	r1, [sp, #12]
 801b766:	f001 fb4b 	bl	801ce00 <uxr_prepare_stream_to_write_submessage>
 801b76a:	b918      	cbnz	r0, 801b774 <uxr_common_create_entity+0x3c>
 801b76c:	4604      	mov	r4, r0
 801b76e:	4620      	mov	r0, r4
 801b770:	b00c      	add	sp, #48	@ 0x30
 801b772:	bd10      	pop	{r4, pc}
 801b774:	9902      	ldr	r1, [sp, #8]
 801b776:	4620      	mov	r0, r4
 801b778:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b77a:	f001 fc7d 	bl	801d078 <uxr_init_base_object_request>
 801b77e:	4604      	mov	r4, r0
 801b780:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b782:	a804      	add	r0, sp, #16
 801b784:	f003 f988 	bl	801ea98 <uxr_serialize_CREATE_Payload>
 801b788:	4620      	mov	r0, r4
 801b78a:	b00c      	add	sp, #48	@ 0x30
 801b78c:	bd10      	pop	{r4, pc}
 801b78e:	bf00      	nop

0801b790 <uxr_buffer_create_participant_bin>:
 801b790:	b570      	push	{r4, r5, r6, lr}
 801b792:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801b796:	4605      	mov	r5, r0
 801b798:	ac11      	add	r4, sp, #68	@ 0x44
 801b79a:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 801b79e:	2303      	movs	r3, #3
 801b7a0:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801b7a4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801b7a8:	7223      	strb	r3, [r4, #8]
 801b7aa:	2300      	movs	r3, #0
 801b7ac:	2201      	movs	r2, #1
 801b7ae:	f88d 3014 	strb.w	r3, [sp, #20]
 801b7b2:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801b7b4:	7122      	strb	r2, [r4, #4]
 801b7b6:	b1cb      	cbz	r3, 801b7ec <uxr_buffer_create_participant_bin+0x5c>
 801b7b8:	f88d 201c 	strb.w	r2, [sp, #28]
 801b7bc:	9308      	str	r3, [sp, #32]
 801b7be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b7c2:	a915      	add	r1, sp, #84	@ 0x54
 801b7c4:	a809      	add	r0, sp, #36	@ 0x24
 801b7c6:	f7f8 fa4d 	bl	8013c64 <ucdr_init_buffer>
 801b7ca:	a905      	add	r1, sp, #20
 801b7cc:	a809      	add	r0, sp, #36	@ 0x24
 801b7ce:	f002 fd19 	bl	801e204 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801b7d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b7d4:	9600      	str	r6, [sp, #0]
 801b7d6:	4628      	mov	r0, r5
 801b7d8:	9401      	str	r4, [sp, #4]
 801b7da:	60e3      	str	r3, [r4, #12]
 801b7dc:	b29b      	uxth	r3, r3
 801b7de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b7e2:	f7ff ffa9 	bl	801b738 <uxr_common_create_entity>
 801b7e6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801b7ea:	bd70      	pop	{r4, r5, r6, pc}
 801b7ec:	f88d 301c 	strb.w	r3, [sp, #28]
 801b7f0:	e7e5      	b.n	801b7be <uxr_buffer_create_participant_bin+0x2e>
 801b7f2:	bf00      	nop

0801b7f4 <uxr_buffer_create_topic_bin>:
 801b7f4:	b570      	push	{r4, r5, r6, lr}
 801b7f6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801b7fa:	4605      	mov	r5, r0
 801b7fc:	4618      	mov	r0, r3
 801b7fe:	9105      	str	r1, [sp, #20]
 801b800:	a997      	add	r1, sp, #604	@ 0x25c
 801b802:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801b806:	ac13      	add	r4, sp, #76	@ 0x4c
 801b808:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b80c:	2302      	movs	r3, #2
 801b80e:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801b812:	f000 fa8d 	bl	801bd30 <uxr_object_id_to_raw>
 801b816:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801b818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b81c:	a917      	add	r1, sp, #92	@ 0x5c
 801b81e:	a80b      	add	r0, sp, #44	@ 0x2c
 801b820:	9306      	str	r3, [sp, #24]
 801b822:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801b824:	930a      	str	r3, [sp, #40]	@ 0x28
 801b826:	2303      	movs	r3, #3
 801b828:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801b82c:	2301      	movs	r3, #1
 801b82e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801b832:	2300      	movs	r3, #0
 801b834:	f88d 301c 	strb.w	r3, [sp, #28]
 801b838:	f7f8 fa14 	bl	8013c64 <ucdr_init_buffer>
 801b83c:	a906      	add	r1, sp, #24
 801b83e:	a80b      	add	r0, sp, #44	@ 0x2c
 801b840:	f002 fd02 	bl	801e248 <uxr_serialize_OBJK_Topic_Binary>
 801b844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b846:	4628      	mov	r0, r5
 801b848:	9600      	str	r6, [sp, #0]
 801b84a:	9316      	str	r3, [sp, #88]	@ 0x58
 801b84c:	b29b      	uxth	r3, r3
 801b84e:	9401      	str	r4, [sp, #4]
 801b850:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b854:	f7ff ff70 	bl	801b738 <uxr_common_create_entity>
 801b858:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 801b85c:	bd70      	pop	{r4, r5, r6, pc}
 801b85e:	bf00      	nop

0801b860 <uxr_buffer_create_publisher_bin>:
 801b860:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b862:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801b866:	2603      	movs	r6, #3
 801b868:	4605      	mov	r5, r0
 801b86a:	4618      	mov	r0, r3
 801b86c:	9105      	str	r1, [sp, #20]
 801b86e:	a992      	add	r1, sp, #584	@ 0x248
 801b870:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801b874:	ac0e      	add	r4, sp, #56	@ 0x38
 801b876:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801b87a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b87e:	f000 fa57 	bl	801bd30 <uxr_object_id_to_raw>
 801b882:	2300      	movs	r3, #0
 801b884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b888:	a912      	add	r1, sp, #72	@ 0x48
 801b88a:	a806      	add	r0, sp, #24
 801b88c:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801b890:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801b894:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801b898:	f7f8 f9e4 	bl	8013c64 <ucdr_init_buffer>
 801b89c:	a993      	add	r1, sp, #588	@ 0x24c
 801b89e:	a806      	add	r0, sp, #24
 801b8a0:	f002 fd86 	bl	801e3b0 <uxr_serialize_OBJK_Publisher_Binary>
 801b8a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b8a6:	4628      	mov	r0, r5
 801b8a8:	9700      	str	r7, [sp, #0]
 801b8aa:	9311      	str	r3, [sp, #68]	@ 0x44
 801b8ac:	b29b      	uxth	r3, r3
 801b8ae:	9401      	str	r4, [sp, #4]
 801b8b0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b8b4:	f7ff ff40 	bl	801b738 <uxr_common_create_entity>
 801b8b8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801b8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8be:	bf00      	nop

0801b8c0 <uxr_buffer_create_subscriber_bin>:
 801b8c0:	b570      	push	{r4, r5, r6, lr}
 801b8c2:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801b8c6:	4605      	mov	r5, r0
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	9105      	str	r1, [sp, #20]
 801b8cc:	a992      	add	r1, sp, #584	@ 0x248
 801b8ce:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 801b8d2:	ac0e      	add	r4, sp, #56	@ 0x38
 801b8d4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b8d8:	2304      	movs	r3, #4
 801b8da:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 801b8de:	f000 fa27 	bl	801bd30 <uxr_object_id_to_raw>
 801b8e2:	2300      	movs	r3, #0
 801b8e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b8e8:	a912      	add	r1, sp, #72	@ 0x48
 801b8ea:	a806      	add	r0, sp, #24
 801b8ec:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801b8f0:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801b8f4:	2303      	movs	r3, #3
 801b8f6:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801b8fa:	f7f8 f9b3 	bl	8013c64 <ucdr_init_buffer>
 801b8fe:	a993      	add	r1, sp, #588	@ 0x24c
 801b900:	a806      	add	r0, sp, #24
 801b902:	f002 fe05 	bl	801e510 <uxr_serialize_OBJK_Subscriber_Binary>
 801b906:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b908:	4628      	mov	r0, r5
 801b90a:	9600      	str	r6, [sp, #0]
 801b90c:	9311      	str	r3, [sp, #68]	@ 0x44
 801b90e:	b29b      	uxth	r3, r3
 801b910:	9401      	str	r4, [sp, #4]
 801b912:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b916:	f7ff ff0f 	bl	801b738 <uxr_common_create_entity>
 801b91a:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 801b91e:	bd70      	pop	{r4, r5, r6, pc}

0801b920 <uxr_buffer_create_datawriter_bin>:
 801b920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b924:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801b928:	4606      	mov	r6, r0
 801b92a:	4618      	mov	r0, r3
 801b92c:	2703      	movs	r7, #3
 801b92e:	ac1d      	add	r4, sp, #116	@ 0x74
 801b930:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801b934:	9105      	str	r1, [sp, #20]
 801b936:	a9a1      	add	r1, sp, #644	@ 0x284
 801b938:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801b93c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b940:	2305      	movs	r3, #5
 801b942:	7123      	strb	r3, [r4, #4]
 801b944:	f000 f9f4 	bl	801bd30 <uxr_object_id_to_raw>
 801b948:	a90e      	add	r1, sp, #56	@ 0x38
 801b94a:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801b94c:	7227      	strb	r7, [r4, #8]
 801b94e:	f000 f9ef 	bl	801bd30 <uxr_object_id_to_raw>
 801b952:	2300      	movs	r3, #0
 801b954:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801b958:	3d00      	subs	r5, #0
 801b95a:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 801b95e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801b962:	bf18      	it	ne
 801b964:	2501      	movne	r5, #1
 801b966:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801b96a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801b96e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801b972:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801b976:	2301      	movs	r3, #1
 801b978:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801b97c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801b980:	bb8a      	cbnz	r2, 801b9e6 <uxr_buffer_create_datawriter_bin+0xc6>
 801b982:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801b986:	f04f 0c13 	mov.w	ip, #19
 801b98a:	250b      	movs	r5, #11
 801b98c:	2221      	movs	r2, #33	@ 0x21
 801b98e:	2111      	movs	r1, #17
 801b990:	2009      	movs	r0, #9
 801b992:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801b996:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801b99a:	b923      	cbnz	r3, 801b9a6 <uxr_buffer_create_datawriter_bin+0x86>
 801b99c:	4672      	mov	r2, lr
 801b99e:	4661      	mov	r1, ip
 801b9a0:	4628      	mov	r0, r5
 801b9a2:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801b9a6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801b9aa:	2b01      	cmp	r3, #1
 801b9ac:	d025      	beq.n	801b9fa <uxr_buffer_create_datawriter_bin+0xda>
 801b9ae:	2b03      	cmp	r3, #3
 801b9b0:	d029      	beq.n	801ba06 <uxr_buffer_create_datawriter_bin+0xe6>
 801b9b2:	b32b      	cbz	r3, 801ba00 <uxr_buffer_create_datawriter_bin+0xe0>
 801b9b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b9b8:	a921      	add	r1, sp, #132	@ 0x84
 801b9ba:	a806      	add	r0, sp, #24
 801b9bc:	f7f8 f952 	bl	8013c64 <ucdr_init_buffer>
 801b9c0:	a90e      	add	r1, sp, #56	@ 0x38
 801b9c2:	a806      	add	r0, sp, #24
 801b9c4:	f002 fe56 	bl	801e674 <uxr_serialize_OBJK_DataWriter_Binary>
 801b9c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b9ca:	f8cd 8000 	str.w	r8, [sp]
 801b9ce:	4630      	mov	r0, r6
 801b9d0:	9401      	str	r4, [sp, #4]
 801b9d2:	60e3      	str	r3, [r4, #12]
 801b9d4:	b29b      	uxth	r3, r3
 801b9d6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801b9da:	f7ff fead 	bl	801b738 <uxr_common_create_entity>
 801b9de:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801b9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9e6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801b9ea:	f04f 0c12 	mov.w	ip, #18
 801b9ee:	250a      	movs	r5, #10
 801b9f0:	2220      	movs	r2, #32
 801b9f2:	2110      	movs	r1, #16
 801b9f4:	2008      	movs	r0, #8
 801b9f6:	2702      	movs	r7, #2
 801b9f8:	e7cd      	b.n	801b996 <uxr_buffer_create_datawriter_bin+0x76>
 801b9fa:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801b9fe:	e7d9      	b.n	801b9b4 <uxr_buffer_create_datawriter_bin+0x94>
 801ba00:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801ba04:	e7d6      	b.n	801b9b4 <uxr_buffer_create_datawriter_bin+0x94>
 801ba06:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801ba0a:	e7d3      	b.n	801b9b4 <uxr_buffer_create_datawriter_bin+0x94>

0801ba0c <uxr_buffer_create_datareader_bin>:
 801ba0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba10:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801ba14:	4606      	mov	r6, r0
 801ba16:	4618      	mov	r0, r3
 801ba18:	2703      	movs	r7, #3
 801ba1a:	ac1f      	add	r4, sp, #124	@ 0x7c
 801ba1c:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 801ba20:	9105      	str	r1, [sp, #20]
 801ba22:	a9a3      	add	r1, sp, #652	@ 0x28c
 801ba24:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 801ba28:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801ba2c:	2306      	movs	r3, #6
 801ba2e:	7123      	strb	r3, [r4, #4]
 801ba30:	f000 f97e 	bl	801bd30 <uxr_object_id_to_raw>
 801ba34:	a90e      	add	r1, sp, #56	@ 0x38
 801ba36:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801ba38:	7227      	strb	r7, [r4, #8]
 801ba3a:	f000 f979 	bl	801bd30 <uxr_object_id_to_raw>
 801ba3e:	2300      	movs	r3, #0
 801ba40:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801ba44:	3d00      	subs	r5, #0
 801ba46:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 801ba4a:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 801ba4e:	bf18      	it	ne
 801ba50:	2501      	movne	r5, #1
 801ba52:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801ba56:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801ba5a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801ba5e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801ba62:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801ba66:	2301      	movs	r3, #1
 801ba68:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801ba6c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801ba70:	bb8a      	cbnz	r2, 801bad6 <uxr_buffer_create_datareader_bin+0xca>
 801ba72:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801ba76:	f04f 0c13 	mov.w	ip, #19
 801ba7a:	250b      	movs	r5, #11
 801ba7c:	2221      	movs	r2, #33	@ 0x21
 801ba7e:	2111      	movs	r1, #17
 801ba80:	2009      	movs	r0, #9
 801ba82:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801ba86:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 801ba8a:	b923      	cbnz	r3, 801ba96 <uxr_buffer_create_datareader_bin+0x8a>
 801ba8c:	4672      	mov	r2, lr
 801ba8e:	4661      	mov	r1, ip
 801ba90:	4628      	mov	r0, r5
 801ba92:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801ba96:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801ba9a:	2b01      	cmp	r3, #1
 801ba9c:	d025      	beq.n	801baea <uxr_buffer_create_datareader_bin+0xde>
 801ba9e:	2b03      	cmp	r3, #3
 801baa0:	d029      	beq.n	801baf6 <uxr_buffer_create_datareader_bin+0xea>
 801baa2:	b32b      	cbz	r3, 801baf0 <uxr_buffer_create_datareader_bin+0xe4>
 801baa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801baa8:	a923      	add	r1, sp, #140	@ 0x8c
 801baaa:	a806      	add	r0, sp, #24
 801baac:	f7f8 f8da 	bl	8013c64 <ucdr_init_buffer>
 801bab0:	a90e      	add	r1, sp, #56	@ 0x38
 801bab2:	a806      	add	r0, sp, #24
 801bab4:	f002 fda2 	bl	801e5fc <uxr_serialize_OBJK_DataReader_Binary>
 801bab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801baba:	f8cd 8000 	str.w	r8, [sp]
 801babe:	4630      	mov	r0, r6
 801bac0:	9401      	str	r4, [sp, #4]
 801bac2:	60e3      	str	r3, [r4, #12]
 801bac4:	b29b      	uxth	r3, r3
 801bac6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801baca:	f7ff fe35 	bl	801b738 <uxr_common_create_entity>
 801bace:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801bad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bad6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801bada:	f04f 0c12 	mov.w	ip, #18
 801bade:	250a      	movs	r5, #10
 801bae0:	2220      	movs	r2, #32
 801bae2:	2110      	movs	r1, #16
 801bae4:	2008      	movs	r0, #8
 801bae6:	2702      	movs	r7, #2
 801bae8:	e7cd      	b.n	801ba86 <uxr_buffer_create_datareader_bin+0x7a>
 801baea:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801baee:	e7d9      	b.n	801baa4 <uxr_buffer_create_datareader_bin+0x98>
 801baf0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801baf4:	e7d6      	b.n	801baa4 <uxr_buffer_create_datareader_bin+0x98>
 801baf6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801bafa:	e7d3      	b.n	801baa4 <uxr_buffer_create_datareader_bin+0x98>

0801bafc <uxr_buffer_create_replier_bin>:
 801bafc:	b570      	push	{r4, r5, r6, lr}
 801bafe:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801bb02:	4605      	mov	r5, r0
 801bb04:	4618      	mov	r0, r3
 801bb06:	9105      	str	r1, [sp, #20]
 801bb08:	a999      	add	r1, sp, #612	@ 0x264
 801bb0a:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 801bb0e:	ac15      	add	r4, sp, #84	@ 0x54
 801bb10:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801bb14:	2308      	movs	r3, #8
 801bb16:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 801bb1a:	f000 f909 	bl	801bd30 <uxr_object_id_to_raw>
 801bb1e:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 801bb20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801bb24:	a919      	add	r1, sp, #100	@ 0x64
 801bb26:	a80d      	add	r0, sp, #52	@ 0x34
 801bb28:	9306      	str	r3, [sp, #24]
 801bb2a:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 801bb2c:	9307      	str	r3, [sp, #28]
 801bb2e:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 801bb30:	9308      	str	r3, [sp, #32]
 801bb32:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 801bb34:	930c      	str	r3, [sp, #48]	@ 0x30
 801bb36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801bb38:	930a      	str	r3, [sp, #40]	@ 0x28
 801bb3a:	2301      	movs	r3, #1
 801bb3c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801bb40:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801bb44:	2303      	movs	r3, #3
 801bb46:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 801bb4a:	f7f8 f88b 	bl	8013c64 <ucdr_init_buffer>
 801bb4e:	a906      	add	r1, sp, #24
 801bb50:	a80d      	add	r0, sp, #52	@ 0x34
 801bb52:	f002 fdbb 	bl	801e6cc <uxr_serialize_OBJK_Replier_Binary>
 801bb56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bb58:	4628      	mov	r0, r5
 801bb5a:	9600      	str	r6, [sp, #0]
 801bb5c:	9318      	str	r3, [sp, #96]	@ 0x60
 801bb5e:	b29b      	uxth	r3, r3
 801bb60:	9401      	str	r4, [sp, #4]
 801bb62:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801bb66:	f7ff fde7 	bl	801b738 <uxr_common_create_entity>
 801bb6a:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 801bb6e:	bd70      	pop	{r4, r5, r6, pc}

0801bb70 <get_custom_error>:
 801bb70:	4b01      	ldr	r3, [pc, #4]	@ (801bb78 <get_custom_error+0x8>)
 801bb72:	7818      	ldrb	r0, [r3, #0]
 801bb74:	4770      	bx	lr
 801bb76:	bf00      	nop
 801bb78:	24069574 	.word	0x24069574

0801bb7c <recv_custom_msg>:
 801bb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb80:	4693      	mov	fp, r2
 801bb82:	b089      	sub	sp, #36	@ 0x24
 801bb84:	2200      	movs	r2, #0
 801bb86:	4604      	mov	r4, r0
 801bb88:	468a      	mov	sl, r1
 801bb8a:	9305      	str	r3, [sp, #20]
 801bb8c:	f88d 201e 	strb.w	r2, [sp, #30]
 801bb90:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801bb94:	b322      	cbz	r2, 801bbe0 <recv_custom_msg+0x64>
 801bb96:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801bb9a:	f10d 081f 	add.w	r8, sp, #31
 801bb9e:	af05      	add	r7, sp, #20
 801bba0:	f10d 061e 	add.w	r6, sp, #30
 801bba4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801bba8:	e002      	b.n	801bbb0 <recv_custom_msg+0x34>
 801bbaa:	9b05      	ldr	r3, [sp, #20]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	dd0f      	ble.n	801bbd0 <recv_custom_msg+0x54>
 801bbb0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801bbb4:	4623      	mov	r3, r4
 801bbb6:	4622      	mov	r2, r4
 801bbb8:	4648      	mov	r0, r9
 801bbba:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801bbbe:	e9cd 5600 	strd	r5, r6, [sp]
 801bbc2:	f001 fc6f 	bl	801d4a4 <uxr_read_framed_msg>
 801bbc6:	2800      	cmp	r0, #0
 801bbc8:	d0ef      	beq.n	801bbaa <recv_custom_msg+0x2e>
 801bbca:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801bbce:	b1b3      	cbz	r3, 801bbfe <recv_custom_msg+0x82>
 801bbd0:	4b0f      	ldr	r3, [pc, #60]	@ (801bc10 <recv_custom_msg+0x94>)
 801bbd2:	2000      	movs	r0, #0
 801bbd4:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801bbd8:	701a      	strb	r2, [r3, #0]
 801bbda:	b009      	add	sp, #36	@ 0x24
 801bbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbe0:	f10d 021f 	add.w	r2, sp, #31
 801bbe4:	4601      	mov	r1, r0
 801bbe6:	9200      	str	r2, [sp, #0]
 801bbe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801bbec:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801bbf0:	47a8      	blx	r5
 801bbf2:	2800      	cmp	r0, #0
 801bbf4:	d0ec      	beq.n	801bbd0 <recv_custom_msg+0x54>
 801bbf6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d1e8      	bne.n	801bbd0 <recv_custom_msg+0x54>
 801bbfe:	f8cb 0000 	str.w	r0, [fp]
 801bc02:	2001      	movs	r0, #1
 801bc04:	f8ca 4000 	str.w	r4, [sl]
 801bc08:	b009      	add	sp, #36	@ 0x24
 801bc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc0e:	bf00      	nop
 801bc10:	24069574 	.word	0x24069574

0801bc14 <send_custom_msg>:
 801bc14:	b530      	push	{r4, r5, lr}
 801bc16:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 801bc1a:	b087      	sub	sp, #28
 801bc1c:	4614      	mov	r4, r2
 801bc1e:	b995      	cbnz	r5, 801bc46 <send_custom_msg+0x32>
 801bc20:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 801bc24:	f10d 0317 	add.w	r3, sp, #23
 801bc28:	47a8      	blx	r5
 801bc2a:	1e03      	subs	r3, r0, #0
 801bc2c:	bf18      	it	ne
 801bc2e:	2301      	movne	r3, #1
 801bc30:	42a0      	cmp	r0, r4
 801bc32:	bf18      	it	ne
 801bc34:	2300      	movne	r3, #0
 801bc36:	b91b      	cbnz	r3, 801bc40 <send_custom_msg+0x2c>
 801bc38:	4a0a      	ldr	r2, [pc, #40]	@ (801bc64 <send_custom_msg+0x50>)
 801bc3a:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801bc3e:	7011      	strb	r1, [r2, #0]
 801bc40:	4618      	mov	r0, r3
 801bc42:	b007      	add	sp, #28
 801bc44:	bd30      	pop	{r4, r5, pc}
 801bc46:	460b      	mov	r3, r1
 801bc48:	2200      	movs	r2, #0
 801bc4a:	f10d 0117 	add.w	r1, sp, #23
 801bc4e:	9400      	str	r4, [sp, #0]
 801bc50:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801bc54:	4602      	mov	r2, r0
 801bc56:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 801bc5a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801bc5e:	f001 fa43 	bl	801d0e8 <uxr_write_framed_msg>
 801bc62:	e7e2      	b.n	801bc2a <send_custom_msg+0x16>
 801bc64:	24069574 	.word	0x24069574

0801bc68 <uxr_set_custom_transport_callbacks>:
 801bc68:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801bc6c:	9901      	ldr	r1, [sp, #4]
 801bc6e:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801bc72:	9b00      	ldr	r3, [sp, #0]
 801bc74:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 801bc78:	4770      	bx	lr
 801bc7a:	bf00      	nop

0801bc7c <uxr_init_custom_transport>:
 801bc7c:	b538      	push	{r3, r4, r5, lr}
 801bc7e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801bc82:	b303      	cbz	r3, 801bcc6 <uxr_init_custom_transport+0x4a>
 801bc84:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801bc88:	4604      	mov	r4, r0
 801bc8a:	b1e2      	cbz	r2, 801bcc6 <uxr_init_custom_transport+0x4a>
 801bc8c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801bc90:	b1ca      	cbz	r2, 801bcc6 <uxr_init_custom_transport+0x4a>
 801bc92:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801bc96:	b1b2      	cbz	r2, 801bcc6 <uxr_init_custom_transport+0x4a>
 801bc98:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801bc9c:	4798      	blx	r3
 801bc9e:	4605      	mov	r5, r0
 801bca0:	b188      	cbz	r0, 801bcc6 <uxr_init_custom_transport+0x4a>
 801bca2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801bca6:	b98b      	cbnz	r3, 801bccc <uxr_init_custom_transport+0x50>
 801bca8:	4b0b      	ldr	r3, [pc, #44]	@ (801bcd8 <uxr_init_custom_transport+0x5c>)
 801bcaa:	4628      	mov	r0, r5
 801bcac:	490b      	ldr	r1, [pc, #44]	@ (801bcdc <uxr_init_custom_transport+0x60>)
 801bcae:	4a0c      	ldr	r2, [pc, #48]	@ (801bce0 <uxr_init_custom_transport+0x64>)
 801bcb0:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801bcb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801bcb8:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801bcbc:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801bcc0:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801bcc4:	bd38      	pop	{r3, r4, r5, pc}
 801bcc6:	2500      	movs	r5, #0
 801bcc8:	4628      	mov	r0, r5
 801bcca:	bd38      	pop	{r3, r4, r5, pc}
 801bccc:	2100      	movs	r1, #0
 801bcce:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801bcd2:	f001 fa03 	bl	801d0dc <uxr_init_framing_io>
 801bcd6:	e7e7      	b.n	801bca8 <uxr_init_custom_transport+0x2c>
 801bcd8:	0801bb7d 	.word	0x0801bb7d
 801bcdc:	0801bc15 	.word	0x0801bc15
 801bce0:	0801bb71 	.word	0x0801bb71

0801bce4 <uxr_close_custom_transport>:
 801bce4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801bce8:	4718      	bx	r3
 801bcea:	bf00      	nop

0801bcec <uxr_object_id>:
 801bcec:	b082      	sub	sp, #8
 801bcee:	2300      	movs	r3, #0
 801bcf0:	f88d 1006 	strb.w	r1, [sp, #6]
 801bcf4:	f360 030f 	bfi	r3, r0, #0, #16
 801bcf8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801bcfc:	f362 431f 	bfi	r3, r2, #16, #16
 801bd00:	4618      	mov	r0, r3
 801bd02:	b002      	add	sp, #8
 801bd04:	4770      	bx	lr
 801bd06:	bf00      	nop

0801bd08 <uxr_object_id_from_raw>:
 801bd08:	7843      	ldrb	r3, [r0, #1]
 801bd0a:	b082      	sub	sp, #8
 801bd0c:	7801      	ldrb	r1, [r0, #0]
 801bd0e:	2000      	movs	r0, #0
 801bd10:	091a      	lsrs	r2, r3, #4
 801bd12:	f003 030f 	and.w	r3, r3, #15
 801bd16:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801bd1a:	f88d 3006 	strb.w	r3, [sp, #6]
 801bd1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801bd22:	f362 000f 	bfi	r0, r2, #0, #16
 801bd26:	f363 401f 	bfi	r0, r3, #16, #16
 801bd2a:	b002      	add	sp, #8
 801bd2c:	4770      	bx	lr
 801bd2e:	bf00      	nop

0801bd30 <uxr_object_id_to_raw>:
 801bd30:	4602      	mov	r2, r0
 801bd32:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801bd36:	b082      	sub	sp, #8
 801bd38:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801bd3c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801bd40:	f881 c000 	strb.w	ip, [r1]
 801bd44:	7048      	strb	r0, [r1, #1]
 801bd46:	b002      	add	sp, #8
 801bd48:	4770      	bx	lr
 801bd4a:	bf00      	nop

0801bd4c <uxr_buffer_request_data>:
 801bd4c:	b530      	push	{r4, r5, lr}
 801bd4e:	b095      	sub	sp, #84	@ 0x54
 801bd50:	4604      	mov	r4, r0
 801bd52:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801bd54:	9303      	str	r3, [sp, #12]
 801bd56:	2d00      	cmp	r5, #0
 801bd58:	f88d 301c 	strb.w	r3, [sp, #28]
 801bd5c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801bd60:	f04f 0200 	mov.w	r2, #0
 801bd64:	bf14      	ite	ne
 801bd66:	2101      	movne	r1, #1
 801bd68:	4611      	moveq	r1, r2
 801bd6a:	f88d 201d 	strb.w	r2, [sp, #29]
 801bd6e:	f88d 201e 	strb.w	r2, [sp, #30]
 801bd72:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801bd76:	d021      	beq.n	801bdbc <uxr_buffer_request_data+0x70>
 801bd78:	686b      	ldr	r3, [r5, #4]
 801bd7a:	2210      	movs	r2, #16
 801bd7c:	6829      	ldr	r1, [r5, #0]
 801bd7e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801bd82:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 801bd86:	2308      	movs	r3, #8
 801bd88:	2100      	movs	r1, #0
 801bd8a:	4620      	mov	r0, r4
 801bd8c:	e9cd 3100 	strd	r3, r1, [sp]
 801bd90:	ab0c      	add	r3, sp, #48	@ 0x30
 801bd92:	9905      	ldr	r1, [sp, #20]
 801bd94:	f001 f834 	bl	801ce00 <uxr_prepare_stream_to_write_submessage>
 801bd98:	b918      	cbnz	r0, 801bda2 <uxr_buffer_request_data+0x56>
 801bd9a:	4604      	mov	r4, r0
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	b015      	add	sp, #84	@ 0x54
 801bda0:	bd30      	pop	{r4, r5, pc}
 801bda2:	9904      	ldr	r1, [sp, #16]
 801bda4:	aa06      	add	r2, sp, #24
 801bda6:	4620      	mov	r0, r4
 801bda8:	f001 f966 	bl	801d078 <uxr_init_base_object_request>
 801bdac:	4604      	mov	r4, r0
 801bdae:	a906      	add	r1, sp, #24
 801bdb0:	a80c      	add	r0, sp, #48	@ 0x30
 801bdb2:	f002 ffc1 	bl	801ed38 <uxr_serialize_READ_DATA_Payload>
 801bdb6:	4620      	mov	r0, r4
 801bdb8:	b015      	add	sp, #84	@ 0x54
 801bdba:	bd30      	pop	{r4, r5, pc}
 801bdbc:	2208      	movs	r2, #8
 801bdbe:	e7e2      	b.n	801bd86 <uxr_buffer_request_data+0x3a>

0801bdc0 <uxr_buffer_cancel_data>:
 801bdc0:	b510      	push	{r4, lr}
 801bdc2:	2300      	movs	r3, #0
 801bdc4:	b094      	sub	sp, #80	@ 0x50
 801bdc6:	4604      	mov	r4, r0
 801bdc8:	9205      	str	r2, [sp, #20]
 801bdca:	9301      	str	r3, [sp, #4]
 801bdcc:	f8ad 301c 	strh.w	r3, [sp, #28]
 801bdd0:	f88d 301e 	strb.w	r3, [sp, #30]
 801bdd4:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801bdd8:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801bddc:	2308      	movs	r3, #8
 801bdde:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801bde2:	2201      	movs	r2, #1
 801bde4:	9300      	str	r3, [sp, #0]
 801bde6:	ab0c      	add	r3, sp, #48	@ 0x30
 801bde8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801bdec:	2210      	movs	r2, #16
 801bdee:	f001 f807 	bl	801ce00 <uxr_prepare_stream_to_write_submessage>
 801bdf2:	b918      	cbnz	r0, 801bdfc <uxr_buffer_cancel_data+0x3c>
 801bdf4:	4604      	mov	r4, r0
 801bdf6:	4620      	mov	r0, r4
 801bdf8:	b014      	add	sp, #80	@ 0x50
 801bdfa:	bd10      	pop	{r4, pc}
 801bdfc:	9905      	ldr	r1, [sp, #20]
 801bdfe:	aa06      	add	r2, sp, #24
 801be00:	4620      	mov	r0, r4
 801be02:	f001 f939 	bl	801d078 <uxr_init_base_object_request>
 801be06:	4604      	mov	r4, r0
 801be08:	a906      	add	r1, sp, #24
 801be0a:	a80c      	add	r0, sp, #48	@ 0x30
 801be0c:	f002 ff94 	bl	801ed38 <uxr_serialize_READ_DATA_Payload>
 801be10:	4620      	mov	r0, r4
 801be12:	b014      	add	sp, #80	@ 0x50
 801be14:	bd10      	pop	{r4, pc}
 801be16:	bf00      	nop

0801be18 <read_submessage_format>:
 801be18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be1c:	b095      	sub	sp, #84	@ 0x54
 801be1e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801be22:	b113      	cbz	r3, 801be2a <read_submessage_format+0x12>
 801be24:	b015      	add	sp, #84	@ 0x54
 801be26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be2a:	4606      	mov	r6, r0
 801be2c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801be2e:	460c      	mov	r4, r1
 801be30:	4615      	mov	r5, r2
 801be32:	9004      	str	r0, [sp, #16]
 801be34:	4699      	mov	r9, r3
 801be36:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801be38:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801be3c:	9005      	str	r0, [sp, #20]
 801be3e:	a80c      	add	r0, sp, #48	@ 0x30
 801be40:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801be44:	1a52      	subs	r2, r2, r1
 801be46:	f7f7 ff0d 	bl	8013c64 <ucdr_init_buffer>
 801be4a:	a80c      	add	r0, sp, #48	@ 0x30
 801be4c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801be50:	f7f7 fedc 	bl	8013c0c <ucdr_set_on_full_buffer_callback>
 801be54:	69e2      	ldr	r2, [r4, #28]
 801be56:	b19a      	cbz	r2, 801be80 <read_submessage_format+0x68>
 801be58:	f1b8 0f07 	cmp.w	r8, #7
 801be5c:	f882 9014 	strb.w	r9, [r2, #20]
 801be60:	d040      	beq.n	801bee4 <read_submessage_format+0xcc>
 801be62:	f1b8 0f08 	cmp.w	r8, #8
 801be66:	d02e      	beq.n	801bec6 <read_submessage_format+0xae>
 801be68:	f1b8 0f06 	cmp.w	r8, #6
 801be6c:	d011      	beq.n	801be92 <read_submessage_format+0x7a>
 801be6e:	2301      	movs	r3, #1
 801be70:	7513      	strb	r3, [r2, #20]
 801be72:	4629      	mov	r1, r5
 801be74:	4620      	mov	r0, r4
 801be76:	f7f7 ff49 	bl	8013d0c <ucdr_advance_buffer>
 801be7a:	b015      	add	sp, #84	@ 0x54
 801be7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be80:	f1b8 0f07 	cmp.w	r8, #7
 801be84:	d02e      	beq.n	801bee4 <read_submessage_format+0xcc>
 801be86:	f1b8 0f08 	cmp.w	r8, #8
 801be8a:	d01c      	beq.n	801bec6 <read_submessage_format+0xae>
 801be8c:	f1b8 0f06 	cmp.w	r8, #6
 801be90:	d1ef      	bne.n	801be72 <read_submessage_format+0x5a>
 801be92:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 801be96:	f1b8 0f00 	cmp.w	r8, #0
 801be9a:	d011      	beq.n	801bec0 <read_submessage_format+0xa8>
 801be9c:	ab0c      	add	r3, sp, #48	@ 0x30
 801be9e:	9501      	str	r5, [sp, #4]
 801bea0:	463a      	mov	r2, r7
 801bea2:	4630      	mov	r0, r6
 801bea4:	9300      	str	r3, [sp, #0]
 801bea6:	2306      	movs	r3, #6
 801bea8:	f88d 3016 	strb.w	r3, [sp, #22]
 801beac:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 801beb0:	9302      	str	r3, [sp, #8]
 801beb2:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801beb6:	47c0      	blx	r8
 801beb8:	2301      	movs	r3, #1
 801beba:	69e2      	ldr	r2, [r4, #28]
 801bebc:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801bec0:	2a00      	cmp	r2, #0
 801bec2:	d1d4      	bne.n	801be6e <read_submessage_format+0x56>
 801bec4:	e7d5      	b.n	801be72 <read_submessage_format+0x5a>
 801bec6:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 801beca:	2b00      	cmp	r3, #0
 801becc:	d0f8      	beq.n	801bec0 <read_submessage_format+0xa8>
 801bece:	a80c      	add	r0, sp, #48	@ 0x30
 801bed0:	a906      	add	r1, sp, #24
 801bed2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801bed6:	f002 fffb 	bl	801eed0 <uxr_deserialize_SampleIdentity>
 801beda:	b9a0      	cbnz	r0, 801bf06 <read_submessage_format+0xee>
 801bedc:	69e2      	ldr	r2, [r4, #28]
 801bede:	2a00      	cmp	r2, #0
 801bee0:	d1c5      	bne.n	801be6e <read_submessage_format+0x56>
 801bee2:	e7c6      	b.n	801be72 <read_submessage_format+0x5a>
 801bee4:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 801bee8:	b13b      	cbz	r3, 801befa <read_submessage_format+0xe2>
 801beea:	a906      	add	r1, sp, #24
 801beec:	a80c      	add	r0, sp, #48	@ 0x30
 801beee:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801bef2:	f002 fcc1 	bl	801e878 <uxr_deserialize_BaseObjectRequest>
 801bef6:	bb60      	cbnz	r0, 801bf52 <read_submessage_format+0x13a>
 801bef8:	69e2      	ldr	r2, [r4, #28]
 801befa:	68a3      	ldr	r3, [r4, #8]
 801befc:	442b      	add	r3, r5
 801befe:	60a3      	str	r3, [r4, #8]
 801bf00:	2a00      	cmp	r2, #0
 801bf02:	d1b4      	bne.n	801be6e <read_submessage_format+0x56>
 801bf04:	e7b5      	b.n	801be72 <read_submessage_format+0x5a>
 801bf06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bf08:	a80c      	add	r0, sp, #48	@ 0x30
 801bf0a:	eba8 0803 	sub.w	r8, r8, r3
 801bf0e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801bf12:	44a8      	add	r8, r5
 801bf14:	1a52      	subs	r2, r2, r1
 801bf16:	f7f7 fea5 	bl	8013c64 <ucdr_init_buffer>
 801bf1a:	a80c      	add	r0, sp, #48	@ 0x30
 801bf1c:	fa1f f888 	uxth.w	r8, r8
 801bf20:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801bf24:	f7f7 fe72 	bl	8013c0c <ucdr_set_on_full_buffer_callback>
 801bf28:	ab0c      	add	r3, sp, #48	@ 0x30
 801bf2a:	2108      	movs	r1, #8
 801bf2c:	f8cd 8004 	str.w	r8, [sp, #4]
 801bf30:	9300      	str	r3, [sp, #0]
 801bf32:	463a      	mov	r2, r7
 801bf34:	f88d 1016 	strb.w	r1, [sp, #22]
 801bf38:	ab06      	add	r3, sp, #24
 801bf3a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 801bf3e:	4630      	mov	r0, r6
 801bf40:	9102      	str	r1, [sp, #8]
 801bf42:	9905      	ldr	r1, [sp, #20]
 801bf44:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 801bf48:	47b8      	blx	r7
 801bf4a:	2301      	movs	r3, #1
 801bf4c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801bf50:	e7c4      	b.n	801bedc <read_submessage_format+0xc4>
 801bf52:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801bf56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bf58:	a80c      	add	r0, sp, #48	@ 0x30
 801bf5a:	1a52      	subs	r2, r2, r1
 801bf5c:	eba8 0803 	sub.w	r8, r8, r3
 801bf60:	f7f7 fe80 	bl	8013c64 <ucdr_init_buffer>
 801bf64:	a80c      	add	r0, sp, #48	@ 0x30
 801bf66:	44a8      	add	r8, r5
 801bf68:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801bf6c:	f7f7 fe4e 	bl	8013c0c <ucdr_set_on_full_buffer_callback>
 801bf70:	ab0c      	add	r3, sp, #48	@ 0x30
 801bf72:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801bf76:	fa1f f888 	uxth.w	r8, r8
 801bf7a:	9300      	str	r3, [sp, #0]
 801bf7c:	463a      	mov	r2, r7
 801bf7e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801bf82:	4630      	mov	r0, r6
 801bf84:	f8cd 8004 	str.w	r8, [sp, #4]
 801bf88:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801bf8c:	2107      	movs	r1, #7
 801bf8e:	f88d 1016 	strb.w	r1, [sp, #22]
 801bf92:	b29b      	uxth	r3, r3
 801bf94:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 801bf98:	9102      	str	r1, [sp, #8]
 801bf9a:	9905      	ldr	r1, [sp, #20]
 801bf9c:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 801bfa0:	47b8      	blx	r7
 801bfa2:	2301      	movs	r3, #1
 801bfa4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801bfa8:	e7a6      	b.n	801bef8 <read_submessage_format+0xe0>
 801bfaa:	bf00      	nop

0801bfac <on_get_fragmentation_info>:
 801bfac:	b500      	push	{lr}
 801bfae:	b08b      	sub	sp, #44	@ 0x2c
 801bfb0:	4601      	mov	r1, r0
 801bfb2:	2204      	movs	r2, #4
 801bfb4:	a802      	add	r0, sp, #8
 801bfb6:	f7f7 fe55 	bl	8013c64 <ucdr_init_buffer>
 801bfba:	f10d 0305 	add.w	r3, sp, #5
 801bfbe:	f10d 0206 	add.w	r2, sp, #6
 801bfc2:	a901      	add	r1, sp, #4
 801bfc4:	a802      	add	r0, sp, #8
 801bfc6:	f001 fe5d 	bl	801dc84 <uxr_read_submessage_header>
 801bfca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801bfce:	2b0d      	cmp	r3, #13
 801bfd0:	d003      	beq.n	801bfda <on_get_fragmentation_info+0x2e>
 801bfd2:	2000      	movs	r0, #0
 801bfd4:	b00b      	add	sp, #44	@ 0x2c
 801bfd6:	f85d fb04 	ldr.w	pc, [sp], #4
 801bfda:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801bfde:	f013 0f02 	tst.w	r3, #2
 801bfe2:	bf14      	ite	ne
 801bfe4:	2002      	movne	r0, #2
 801bfe6:	2001      	moveq	r0, #1
 801bfe8:	b00b      	add	sp, #44	@ 0x2c
 801bfea:	f85d fb04 	ldr.w	pc, [sp], #4
 801bfee:	bf00      	nop

0801bff0 <read_submessage_get_info>:
 801bff0:	b570      	push	{r4, r5, r6, lr}
 801bff2:	2500      	movs	r5, #0
 801bff4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 801bff8:	460e      	mov	r6, r1
 801bffa:	4604      	mov	r4, r0
 801bffc:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801c000:	4629      	mov	r1, r5
 801c002:	a810      	add	r0, sp, #64	@ 0x40
 801c004:	9503      	str	r5, [sp, #12]
 801c006:	9504      	str	r5, [sp, #16]
 801c008:	f004 ffd8 	bl	8020fbc <memset>
 801c00c:	a903      	add	r1, sp, #12
 801c00e:	4630      	mov	r0, r6
 801c010:	f002 fdd2 	bl	801ebb8 <uxr_deserialize_GET_INFO_Payload>
 801c014:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c018:	4620      	mov	r0, r4
 801c01a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801c01e:	f001 f823 	bl	801d068 <uxr_session_header_offset>
 801c022:	462b      	mov	r3, r5
 801c024:	220c      	movs	r2, #12
 801c026:	a905      	add	r1, sp, #20
 801c028:	9000      	str	r0, [sp, #0]
 801c02a:	a808      	add	r0, sp, #32
 801c02c:	f7f7 fe08 	bl	8013c40 <ucdr_init_buffer_origin_offset>
 801c030:	a910      	add	r1, sp, #64	@ 0x40
 801c032:	a808      	add	r0, sp, #32
 801c034:	f002 fe34 	bl	801eca0 <uxr_serialize_INFO_Payload>
 801c038:	9b08      	ldr	r3, [sp, #32]
 801c03a:	462a      	mov	r2, r5
 801c03c:	4629      	mov	r1, r5
 801c03e:	4620      	mov	r0, r4
 801c040:	f000 ffbe 	bl	801cfc0 <uxr_stamp_session_header>
 801c044:	a808      	add	r0, sp, #32
 801c046:	f7f7 fe3b 	bl	8013cc0 <ucdr_buffer_length>
 801c04a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801c04c:	4602      	mov	r2, r0
 801c04e:	a905      	add	r1, sp, #20
 801c050:	e9d3 0400 	ldrd	r0, r4, [r3]
 801c054:	47a0      	blx	r4
 801c056:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801c05a:	bd70      	pop	{r4, r5, r6, pc}

0801c05c <write_submessage_acknack.isra.0>:
 801c05c:	b570      	push	{r4, r5, r6, lr}
 801c05e:	b092      	sub	sp, #72	@ 0x48
 801c060:	4605      	mov	r5, r0
 801c062:	460e      	mov	r6, r1
 801c064:	4614      	mov	r4, r2
 801c066:	f000 ffff 	bl	801d068 <uxr_session_header_offset>
 801c06a:	a905      	add	r1, sp, #20
 801c06c:	9000      	str	r0, [sp, #0]
 801c06e:	2300      	movs	r3, #0
 801c070:	a80a      	add	r0, sp, #40	@ 0x28
 801c072:	2211      	movs	r2, #17
 801c074:	f7f7 fde4 	bl	8013c40 <ucdr_init_buffer_origin_offset>
 801c078:	2218      	movs	r2, #24
 801c07a:	2300      	movs	r3, #0
 801c07c:	210a      	movs	r1, #10
 801c07e:	fb02 5404 	mla	r4, r2, r4, r5
 801c082:	a80a      	add	r0, sp, #40	@ 0x28
 801c084:	2205      	movs	r2, #5
 801c086:	3450      	adds	r4, #80	@ 0x50
 801c088:	f001 fde2 	bl	801dc50 <uxr_buffer_submessage_header>
 801c08c:	a903      	add	r1, sp, #12
 801c08e:	4620      	mov	r0, r4
 801c090:	f003 feec 	bl	801fe6c <uxr_compute_acknack>
 801c094:	ba40      	rev16	r0, r0
 801c096:	a903      	add	r1, sp, #12
 801c098:	f88d 6010 	strb.w	r6, [sp, #16]
 801c09c:	f8ad 000e 	strh.w	r0, [sp, #14]
 801c0a0:	a80a      	add	r0, sp, #40	@ 0x28
 801c0a2:	f002 fe6f 	bl	801ed84 <uxr_serialize_ACKNACK_Payload>
 801c0a6:	2200      	movs	r2, #0
 801c0a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c0aa:	4628      	mov	r0, r5
 801c0ac:	4611      	mov	r1, r2
 801c0ae:	f000 ff87 	bl	801cfc0 <uxr_stamp_session_header>
 801c0b2:	a80a      	add	r0, sp, #40	@ 0x28
 801c0b4:	f7f7 fe04 	bl	8013cc0 <ucdr_buffer_length>
 801c0b8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801c0ba:	4602      	mov	r2, r0
 801c0bc:	a905      	add	r1, sp, #20
 801c0be:	e9d3 0400 	ldrd	r0, r4, [r3]
 801c0c2:	47a0      	blx	r4
 801c0c4:	b012      	add	sp, #72	@ 0x48
 801c0c6:	bd70      	pop	{r4, r5, r6, pc}

0801c0c8 <uxr_init_session>:
 801c0c8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801c100 <uxr_init_session+0x38>
 801c0cc:	2300      	movs	r3, #0
 801c0ce:	b510      	push	{r4, lr}
 801c0d0:	4604      	mov	r4, r0
 801c0d2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801c0d6:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801c0da:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801c0de:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801c0e2:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801c0e6:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801c0ea:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801c0ee:	2181      	movs	r1, #129	@ 0x81
 801c0f0:	f000 feca 	bl	801ce88 <uxr_init_session_info>
 801c0f4:	f104 0008 	add.w	r0, r4, #8
 801c0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0fc:	f001 bcc4 	b.w	801da88 <uxr_init_stream_storage>
	...

0801c108 <uxr_set_status_callback>:
 801c108:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801c10c:	4770      	bx	lr
 801c10e:	bf00      	nop

0801c110 <uxr_set_topic_callback>:
 801c110:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801c114:	4770      	bx	lr
 801c116:	bf00      	nop

0801c118 <uxr_set_request_callback>:
 801c118:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801c11c:	4770      	bx	lr
 801c11e:	bf00      	nop

0801c120 <uxr_set_reply_callback>:
 801c120:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801c124:	4770      	bx	lr
 801c126:	bf00      	nop

0801c128 <uxr_create_output_best_effort_stream>:
 801c128:	b510      	push	{r4, lr}
 801c12a:	4604      	mov	r4, r0
 801c12c:	b084      	sub	sp, #16
 801c12e:	e9cd 2100 	strd	r2, r1, [sp]
 801c132:	f000 ff99 	bl	801d068 <uxr_session_header_offset>
 801c136:	4603      	mov	r3, r0
 801c138:	f104 0008 	add.w	r0, r4, #8
 801c13c:	e9dd 2100 	ldrd	r2, r1, [sp]
 801c140:	b004      	add	sp, #16
 801c142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c146:	f001 bce5 	b.w	801db14 <uxr_add_output_best_effort_buffer>
 801c14a:	bf00      	nop

0801c14c <uxr_create_output_reliable_stream>:
 801c14c:	b530      	push	{r4, r5, lr}
 801c14e:	b089      	sub	sp, #36	@ 0x24
 801c150:	4604      	mov	r4, r0
 801c152:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801c156:	9303      	str	r3, [sp, #12]
 801c158:	f000 ff86 	bl	801d068 <uxr_session_header_offset>
 801c15c:	4605      	mov	r5, r0
 801c15e:	9905      	ldr	r1, [sp, #20]
 801c160:	f104 0008 	add.w	r0, r4, #8
 801c164:	9500      	str	r5, [sp, #0]
 801c166:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801c16a:	f001 fce7 	bl	801db3c <uxr_add_output_reliable_buffer>
 801c16e:	2200      	movs	r2, #0
 801c170:	fa5f fc80 	uxtb.w	ip, r0
 801c174:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801c178:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801c17c:	0e03      	lsrs	r3, r0, #24
 801c17e:	f36c 0207 	bfi	r2, ip, #0, #8
 801c182:	f364 220f 	bfi	r2, r4, #8, #8
 801c186:	f361 4217 	bfi	r2, r1, #16, #8
 801c18a:	f363 621f 	bfi	r2, r3, #24, #8
 801c18e:	4610      	mov	r0, r2
 801c190:	b009      	add	sp, #36	@ 0x24
 801c192:	bd30      	pop	{r4, r5, pc}

0801c194 <uxr_create_input_best_effort_stream>:
 801c194:	b082      	sub	sp, #8
 801c196:	3008      	adds	r0, #8
 801c198:	b002      	add	sp, #8
 801c19a:	f001 bce9 	b.w	801db70 <uxr_add_input_best_effort_buffer>
 801c19e:	bf00      	nop

0801c1a0 <uxr_create_input_reliable_stream>:
 801c1a0:	b510      	push	{r4, lr}
 801c1a2:	4c0c      	ldr	r4, [pc, #48]	@ (801c1d4 <uxr_create_input_reliable_stream+0x34>)
 801c1a4:	b084      	sub	sp, #16
 801c1a6:	3008      	adds	r0, #8
 801c1a8:	9400      	str	r4, [sp, #0]
 801c1aa:	f001 fcf7 	bl	801db9c <uxr_add_input_reliable_buffer>
 801c1ae:	2200      	movs	r2, #0
 801c1b0:	fa5f fe80 	uxtb.w	lr, r0
 801c1b4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 801c1b8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801c1bc:	0e03      	lsrs	r3, r0, #24
 801c1be:	f36e 0207 	bfi	r2, lr, #0, #8
 801c1c2:	f36c 220f 	bfi	r2, ip, #8, #8
 801c1c6:	f361 4217 	bfi	r2, r1, #16, #8
 801c1ca:	f363 621f 	bfi	r2, r3, #24, #8
 801c1ce:	4610      	mov	r0, r2
 801c1d0:	b004      	add	sp, #16
 801c1d2:	bd10      	pop	{r4, pc}
 801c1d4:	0801bfad 	.word	0x0801bfad

0801c1d8 <uxr_epoch_nanos>:
 801c1d8:	b510      	push	{r4, lr}
 801c1da:	4604      	mov	r4, r0
 801c1dc:	f001 fd9a 	bl	801dd14 <uxr_nanos>
 801c1e0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801c1e4:	1ac0      	subs	r0, r0, r3
 801c1e6:	eb61 0102 	sbc.w	r1, r1, r2
 801c1ea:	bd10      	pop	{r4, pc}

0801c1ec <uxr_flash_output_streams>:
 801c1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1f0:	7e03      	ldrb	r3, [r0, #24]
 801c1f2:	b084      	sub	sp, #16
 801c1f4:	4604      	mov	r4, r0
 801c1f6:	b1fb      	cbz	r3, 801c238 <uxr_flash_output_streams+0x4c>
 801c1f8:	f04f 0900 	mov.w	r9, #0
 801c1fc:	f10d 0802 	add.w	r8, sp, #2
 801c200:	af03      	add	r7, sp, #12
 801c202:	ae02      	add	r6, sp, #8
 801c204:	4648      	mov	r0, r9
 801c206:	2201      	movs	r2, #1
 801c208:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801c20c:	4611      	mov	r1, r2
 801c20e:	3508      	adds	r5, #8
 801c210:	f001 fbe0 	bl	801d9d4 <uxr_stream_id>
 801c214:	4684      	mov	ip, r0
 801c216:	4643      	mov	r3, r8
 801c218:	463a      	mov	r2, r7
 801c21a:	4631      	mov	r1, r6
 801c21c:	4628      	mov	r0, r5
 801c21e:	f8cd c004 	str.w	ip, [sp, #4]
 801c222:	f003 fead 	bl	801ff80 <uxr_prepare_best_effort_buffer_to_send>
 801c226:	2800      	cmp	r0, #0
 801c228:	d13d      	bne.n	801c2a6 <uxr_flash_output_streams+0xba>
 801c22a:	f109 0901 	add.w	r9, r9, #1
 801c22e:	7e23      	ldrb	r3, [r4, #24]
 801c230:	fa5f f089 	uxtb.w	r0, r9
 801c234:	4283      	cmp	r3, r0
 801c236:	d8e6      	bhi.n	801c206 <uxr_flash_output_streams+0x1a>
 801c238:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801c23c:	b383      	cbz	r3, 801c2a0 <uxr_flash_output_streams+0xb4>
 801c23e:	f04f 0900 	mov.w	r9, #0
 801c242:	f10d 0802 	add.w	r8, sp, #2
 801c246:	af03      	add	r7, sp, #12
 801c248:	ae02      	add	r6, sp, #8
 801c24a:	4648      	mov	r0, r9
 801c24c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801c250:	2201      	movs	r2, #1
 801c252:	2102      	movs	r1, #2
 801c254:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801c258:	f001 fbbc 	bl	801d9d4 <uxr_stream_id>
 801c25c:	9001      	str	r0, [sp, #4]
 801c25e:	3520      	adds	r5, #32
 801c260:	e00c      	b.n	801c27c <uxr_flash_output_streams+0x90>
 801c262:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c266:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801c26a:	9b02      	ldr	r3, [sp, #8]
 801c26c:	f000 fea8 	bl	801cfc0 <uxr_stamp_session_header>
 801c270:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801c272:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c276:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801c27a:	47d0      	blx	sl
 801c27c:	4643      	mov	r3, r8
 801c27e:	463a      	mov	r2, r7
 801c280:	4631      	mov	r1, r6
 801c282:	4628      	mov	r0, r5
 801c284:	f004 f8a0 	bl	80203c8 <uxr_prepare_next_reliable_buffer_to_send>
 801c288:	4603      	mov	r3, r0
 801c28a:	4620      	mov	r0, r4
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d1e8      	bne.n	801c262 <uxr_flash_output_streams+0x76>
 801c290:	f109 0901 	add.w	r9, r9, #1
 801c294:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801c298:	fa5f f089 	uxtb.w	r0, r9
 801c29c:	4283      	cmp	r3, r0
 801c29e:	d8d5      	bhi.n	801c24c <uxr_flash_output_streams+0x60>
 801c2a0:	b004      	add	sp, #16
 801c2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2a6:	9b02      	ldr	r3, [sp, #8]
 801c2a8:	4620      	mov	r0, r4
 801c2aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c2ae:	f109 0901 	add.w	r9, r9, #1
 801c2b2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801c2b6:	f000 fe83 	bl	801cfc0 <uxr_stamp_session_header>
 801c2ba:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801c2bc:	9a03      	ldr	r2, [sp, #12]
 801c2be:	685d      	ldr	r5, [r3, #4]
 801c2c0:	6818      	ldr	r0, [r3, #0]
 801c2c2:	9902      	ldr	r1, [sp, #8]
 801c2c4:	47a8      	blx	r5
 801c2c6:	7e23      	ldrb	r3, [r4, #24]
 801c2c8:	fa5f f089 	uxtb.w	r0, r9
 801c2cc:	4283      	cmp	r3, r0
 801c2ce:	d89a      	bhi.n	801c206 <uxr_flash_output_streams+0x1a>
 801c2d0:	e7b2      	b.n	801c238 <uxr_flash_output_streams+0x4c>
 801c2d2:	bf00      	nop

0801c2d4 <read_submessage_info>:
 801c2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2d8:	460d      	mov	r5, r1
 801c2da:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801c2de:	4606      	mov	r6, r0
 801c2e0:	4669      	mov	r1, sp
 801c2e2:	4628      	mov	r0, r5
 801c2e4:	f002 fb7a 	bl	801e9dc <uxr_deserialize_BaseObjectReply>
 801c2e8:	4604      	mov	r4, r0
 801c2ea:	a902      	add	r1, sp, #8
 801c2ec:	4628      	mov	r0, r5
 801c2ee:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801c2f2:	f7f6 fa35 	bl	8012760 <ucdr_deserialize_bool>
 801c2f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801c2fa:	4004      	ands	r4, r0
 801c2fc:	b2e4      	uxtb	r4, r4
 801c2fe:	b95b      	cbnz	r3, 801c318 <read_submessage_info+0x44>
 801c300:	a987      	add	r1, sp, #540	@ 0x21c
 801c302:	4628      	mov	r0, r5
 801c304:	f7f6 fa2c 	bl	8012760 <ucdr_deserialize_bool>
 801c308:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801c30c:	4680      	mov	r8, r0
 801c30e:	b94b      	cbnz	r3, 801c324 <read_submessage_info+0x50>
 801c310:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801c314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c318:	a903      	add	r1, sp, #12
 801c31a:	4628      	mov	r0, r5
 801c31c:	f002 fa0a 	bl	801e734 <uxr_deserialize_ObjectVariant>
 801c320:	4004      	ands	r4, r0
 801c322:	e7ed      	b.n	801c300 <read_submessage_info+0x2c>
 801c324:	a988      	add	r1, sp, #544	@ 0x220
 801c326:	4628      	mov	r0, r5
 801c328:	f7f6 fa48 	bl	80127bc <ucdr_deserialize_uint8_t>
 801c32c:	ea14 0f08 	tst.w	r4, r8
 801c330:	d0ee      	beq.n	801c310 <read_submessage_info+0x3c>
 801c332:	2800      	cmp	r0, #0
 801c334:	d0ec      	beq.n	801c310 <read_submessage_info+0x3c>
 801c336:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 801c33a:	2b0d      	cmp	r3, #13
 801c33c:	d1e8      	bne.n	801c310 <read_submessage_info+0x3c>
 801c33e:	a98a      	add	r1, sp, #552	@ 0x228
 801c340:	4628      	mov	r0, r5
 801c342:	f7f6 ffe1 	bl	8013308 <ucdr_deserialize_int16_t>
 801c346:	b138      	cbz	r0, 801c358 <read_submessage_info+0x84>
 801c348:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	dd06      	ble.n	801c35e <read_submessage_info+0x8a>
 801c350:	2f00      	cmp	r7, #0
 801c352:	bf14      	ite	ne
 801c354:	2001      	movne	r0, #1
 801c356:	2002      	moveq	r0, #2
 801c358:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 801c35c:	e7d8      	b.n	801c310 <read_submessage_info+0x3c>
 801c35e:	2000      	movs	r0, #0
 801c360:	e7fa      	b.n	801c358 <read_submessage_info+0x84>
 801c362:	bf00      	nop

0801c364 <read_submessage_list>:
 801c364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c368:	4604      	mov	r4, r0
 801c36a:	b097      	sub	sp, #92	@ 0x5c
 801c36c:	460d      	mov	r5, r1
 801c36e:	4ec1      	ldr	r6, [pc, #772]	@ (801c674 <read_submessage_list+0x310>)
 801c370:	9209      	str	r2, [sp, #36]	@ 0x24
 801c372:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801c376:	aa0c      	add	r2, sp, #48	@ 0x30
 801c378:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801c37c:	4628      	mov	r0, r5
 801c37e:	f001 fc81 	bl	801dc84 <uxr_read_submessage_header>
 801c382:	2800      	cmp	r0, #0
 801c384:	f000 8142 	beq.w	801c60c <read_submessage_list+0x2a8>
 801c388:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801c38c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 801c390:	3b02      	subs	r3, #2
 801c392:	2b0d      	cmp	r3, #13
 801c394:	d8ed      	bhi.n	801c372 <read_submessage_list+0xe>
 801c396:	a101      	add	r1, pc, #4	@ (adr r1, 801c39c <read_submessage_list+0x38>)
 801c398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c39c:	0801c603 	.word	0x0801c603
 801c3a0:	0801c373 	.word	0x0801c373
 801c3a4:	0801c5f3 	.word	0x0801c5f3
 801c3a8:	0801c591 	.word	0x0801c591
 801c3ac:	0801c587 	.word	0x0801c587
 801c3b0:	0801c373 	.word	0x0801c373
 801c3b4:	0801c373 	.word	0x0801c373
 801c3b8:	0801c4dd 	.word	0x0801c4dd
 801c3bc:	0801c46f 	.word	0x0801c46f
 801c3c0:	0801c42f 	.word	0x0801c42f
 801c3c4:	0801c373 	.word	0x0801c373
 801c3c8:	0801c373 	.word	0x0801c373
 801c3cc:	0801c373 	.word	0x0801c373
 801c3d0:	0801c3d5 	.word	0x0801c3d5
 801c3d4:	a910      	add	r1, sp, #64	@ 0x40
 801c3d6:	4628      	mov	r0, r5
 801c3d8:	f002 fd28 	bl	801ee2c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801c3dc:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 801c3e0:	f1b8 0f00 	cmp.w	r8, #0
 801c3e4:	f000 811a 	beq.w	801c61c <read_submessage_list+0x2b8>
 801c3e8:	f001 fc94 	bl	801dd14 <uxr_nanos>
 801c3ec:	4602      	mov	r2, r0
 801c3ee:	460b      	mov	r3, r1
 801c3f0:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 801c3f4:	2100      	movs	r1, #0
 801c3f6:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801c3f8:	9006      	str	r0, [sp, #24]
 801c3fa:	468c      	mov	ip, r1
 801c3fc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c3fe:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801c402:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c404:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 801c408:	468c      	mov	ip, r1
 801c40a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c40c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801c410:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801c414:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 801c418:	fbc7 0106 	smlal	r0, r1, r7, r6
 801c41c:	e9cd 0100 	strd	r0, r1, [sp]
 801c420:	4620      	mov	r0, r4
 801c422:	47c0      	blx	r8
 801c424:	f04f 0301 	mov.w	r3, #1
 801c428:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801c42c:	e7a1      	b.n	801c372 <read_submessage_list+0xe>
 801c42e:	a910      	add	r1, sp, #64	@ 0x40
 801c430:	4628      	mov	r0, r5
 801c432:	f002 fce7 	bl	801ee04 <uxr_deserialize_HEARTBEAT_Payload>
 801c436:	2100      	movs	r1, #0
 801c438:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801c43c:	f001 faf8 	bl	801da30 <uxr_stream_id_from_raw>
 801c440:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801c444:	900f      	str	r0, [sp, #60]	@ 0x3c
 801c446:	f104 0008 	add.w	r0, r4, #8
 801c44a:	4641      	mov	r1, r8
 801c44c:	f001 fbde 	bl	801dc0c <uxr_get_input_reliable_stream>
 801c450:	2800      	cmp	r0, #0
 801c452:	d08e      	beq.n	801c372 <read_submessage_list+0xe>
 801c454:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801c458:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801c45c:	f003 fcfa 	bl	801fe54 <uxr_process_heartbeat>
 801c460:	4642      	mov	r2, r8
 801c462:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801c466:	4620      	mov	r0, r4
 801c468:	f7ff fdf8 	bl	801c05c <write_submessage_acknack.isra.0>
 801c46c:	e781      	b.n	801c372 <read_submessage_list+0xe>
 801c46e:	a910      	add	r1, sp, #64	@ 0x40
 801c470:	4628      	mov	r0, r5
 801c472:	f002 fc9f 	bl	801edb4 <uxr_deserialize_ACKNACK_Payload>
 801c476:	2100      	movs	r1, #0
 801c478:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801c47c:	f001 fad8 	bl	801da30 <uxr_stream_id_from_raw>
 801c480:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801c484:	900d      	str	r0, [sp, #52]	@ 0x34
 801c486:	f104 0008 	add.w	r0, r4, #8
 801c48a:	f001 fba9 	bl	801dbe0 <uxr_get_output_reliable_stream>
 801c48e:	4680      	mov	r8, r0
 801c490:	2800      	cmp	r0, #0
 801c492:	f43f af6e 	beq.w	801c372 <read_submessage_list+0xe>
 801c496:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801c49a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801c49e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801c4a2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801c4a6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801c4aa:	b289      	uxth	r1, r1
 801c4ac:	f004 f834 	bl	8020518 <uxr_process_acknack>
 801c4b0:	4640      	mov	r0, r8
 801c4b2:	f003 fff5 	bl	80204a0 <uxr_begin_output_nack_buffer_it>
 801c4b6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801c4ba:	e005      	b.n	801c4c8 <read_submessage_list+0x164>
 801c4bc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801c4be:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 801c4c2:	e9d3 0900 	ldrd	r0, r9, [r3]
 801c4c6:	47c8      	blx	r9
 801c4c8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801c4cc:	aa0f      	add	r2, sp, #60	@ 0x3c
 801c4ce:	4651      	mov	r1, sl
 801c4d0:	4640      	mov	r0, r8
 801c4d2:	f003 ffe7 	bl	80204a4 <uxr_next_reliable_nack_buffer_to_send>
 801c4d6:	2800      	cmp	r0, #0
 801c4d8:	d1f0      	bne.n	801c4bc <read_submessage_list+0x158>
 801c4da:	e74a      	b.n	801c372 <read_submessage_list+0xe>
 801c4dc:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 801c4e0:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801c4e4:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 801c4e8:	4628      	mov	r0, r5
 801c4ea:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801c4ee:	4651      	mov	r1, sl
 801c4f0:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801c4f4:	f1a8 0804 	sub.w	r8, r8, #4
 801c4f8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801c4fc:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 801c500:	fa1f f888 	uxth.w	r8, r8
 801c504:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801c508:	f009 090e 	and.w	r9, r9, #14
 801c50c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 801c510:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801c514:	f002 f9b0 	bl	801e878 <uxr_deserialize_BaseObjectRequest>
 801c518:	4650      	mov	r0, sl
 801c51a:	a90f      	add	r1, sp, #60	@ 0x3c
 801c51c:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801c520:	f000 fdca 	bl	801d0b8 <uxr_parse_base_object_request>
 801c524:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c526:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801c52a:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 801c52e:	9110      	str	r1, [sp, #64]	@ 0x40
 801c530:	f1bb 0f00 	cmp.w	fp, #0
 801c534:	d006      	beq.n	801c544 <read_submessage_list+0x1e0>
 801c536:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801c53a:	4652      	mov	r2, sl
 801c53c:	4620      	mov	r0, r4
 801c53e:	9300      	str	r3, [sp, #0]
 801c540:	2300      	movs	r3, #0
 801c542:	47d8      	blx	fp
 801c544:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801c546:	b182      	cbz	r2, 801c56a <read_submessage_list+0x206>
 801c548:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801c54a:	f04f 0c00 	mov.w	ip, #0
 801c54e:	3902      	subs	r1, #2
 801c550:	e003      	b.n	801c55a <read_submessage_list+0x1f6>
 801c552:	f10c 0c01 	add.w	ip, ip, #1
 801c556:	4594      	cmp	ip, r2
 801c558:	d007      	beq.n	801c56a <read_submessage_list+0x206>
 801c55a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801c55e:	4553      	cmp	r3, sl
 801c560:	d1f7      	bne.n	801c552 <read_submessage_list+0x1ee>
 801c562:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801c564:	2200      	movs	r2, #0
 801c566:	f803 200c 	strb.w	r2, [r3, ip]
 801c56a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801c56e:	464b      	mov	r3, r9
 801c570:	4642      	mov	r2, r8
 801c572:	4620      	mov	r0, r4
 801c574:	9102      	str	r1, [sp, #8]
 801c576:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c578:	9101      	str	r1, [sp, #4]
 801c57a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801c57c:	9100      	str	r1, [sp, #0]
 801c57e:	4629      	mov	r1, r5
 801c580:	f7ff fc4a 	bl	801be18 <read_submessage_format>
 801c584:	e6f5      	b.n	801c372 <read_submessage_list+0xe>
 801c586:	4629      	mov	r1, r5
 801c588:	4620      	mov	r0, r4
 801c58a:	f7ff fea3 	bl	801c2d4 <read_submessage_info>
 801c58e:	e6f0      	b.n	801c372 <read_submessage_list+0xe>
 801c590:	2a00      	cmp	r2, #0
 801c592:	d03e      	beq.n	801c612 <read_submessage_list+0x2ae>
 801c594:	a910      	add	r1, sp, #64	@ 0x40
 801c596:	4628      	mov	r0, r5
 801c598:	f002 fb64 	bl	801ec64 <uxr_deserialize_STATUS_Payload>
 801c59c:	a90e      	add	r1, sp, #56	@ 0x38
 801c59e:	aa0d      	add	r2, sp, #52	@ 0x34
 801c5a0:	a810      	add	r0, sp, #64	@ 0x40
 801c5a2:	f000 fd89 	bl	801d0b8 <uxr_parse_base_object_request>
 801c5a6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c5a8:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801c5ac:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801c5b0:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 801c5b4:	910f      	str	r1, [sp, #60]	@ 0x3c
 801c5b6:	f1ba 0f00 	cmp.w	sl, #0
 801c5ba:	d006      	beq.n	801c5ca <read_submessage_list+0x266>
 801c5bc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801c5c0:	4642      	mov	r2, r8
 801c5c2:	4620      	mov	r0, r4
 801c5c4:	9300      	str	r3, [sp, #0]
 801c5c6:	464b      	mov	r3, r9
 801c5c8:	47d0      	blx	sl
 801c5ca:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801c5cc:	2a00      	cmp	r2, #0
 801c5ce:	f43f aed0 	beq.w	801c372 <read_submessage_list+0xe>
 801c5d2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801c5d4:	2100      	movs	r1, #0
 801c5d6:	3802      	subs	r0, #2
 801c5d8:	e003      	b.n	801c5e2 <read_submessage_list+0x27e>
 801c5da:	3101      	adds	r1, #1
 801c5dc:	4291      	cmp	r1, r2
 801c5de:	f43f aec8 	beq.w	801c372 <read_submessage_list+0xe>
 801c5e2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801c5e6:	4543      	cmp	r3, r8
 801c5e8:	d1f7      	bne.n	801c5da <read_submessage_list+0x276>
 801c5ea:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801c5ec:	f803 9001 	strb.w	r9, [r3, r1]
 801c5f0:	e6bf      	b.n	801c372 <read_submessage_list+0xe>
 801c5f2:	2a00      	cmp	r2, #0
 801c5f4:	f47f aebd 	bne.w	801c372 <read_submessage_list+0xe>
 801c5f8:	4629      	mov	r1, r5
 801c5fa:	4620      	mov	r0, r4
 801c5fc:	f000 fca0 	bl	801cf40 <uxr_read_create_session_status>
 801c600:	e6b7      	b.n	801c372 <read_submessage_list+0xe>
 801c602:	4629      	mov	r1, r5
 801c604:	4620      	mov	r0, r4
 801c606:	f7ff fcf3 	bl	801bff0 <read_submessage_get_info>
 801c60a:	e6b2      	b.n	801c372 <read_submessage_list+0xe>
 801c60c:	b017      	add	sp, #92	@ 0x5c
 801c60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c612:	4629      	mov	r1, r5
 801c614:	4620      	mov	r0, r4
 801c616:	f000 fca1 	bl	801cf5c <uxr_read_delete_session_status>
 801c61a:	e6aa      	b.n	801c372 <read_submessage_list+0xe>
 801c61c:	f001 fb7a 	bl	801dd14 <uxr_nanos>
 801c620:	4642      	mov	r2, r8
 801c622:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801c624:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c626:	fbc7 3206 	smlal	r3, r2, r7, r6
 801c62a:	1818      	adds	r0, r3, r0
 801c62c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801c62e:	eb42 0101 	adc.w	r1, r2, r1
 801c632:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c634:	4642      	mov	r2, r8
 801c636:	fbc7 3206 	smlal	r3, r2, r7, r6
 801c63a:	469c      	mov	ip, r3
 801c63c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 801c640:	fbc3 7806 	smlal	r7, r8, r3, r6
 801c644:	4643      	mov	r3, r8
 801c646:	eb1c 0c07 	adds.w	ip, ip, r7
 801c64a:	eb42 0203 	adc.w	r2, r2, r3
 801c64e:	ebb0 030c 	subs.w	r3, r0, ip
 801c652:	eb61 0202 	sbc.w	r2, r1, r2
 801c656:	2a00      	cmp	r2, #0
 801c658:	db08      	blt.n	801c66c <read_submessage_list+0x308>
 801c65a:	085b      	lsrs	r3, r3, #1
 801c65c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 801c660:	1052      	asrs	r2, r2, #1
 801c662:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 801c666:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801c66a:	e6db      	b.n	801c424 <read_submessage_list+0xc0>
 801c66c:	3301      	adds	r3, #1
 801c66e:	f142 0200 	adc.w	r2, r2, #0
 801c672:	e7f2      	b.n	801c65a <read_submessage_list+0x2f6>
 801c674:	3b9aca00 	.word	0x3b9aca00

0801c678 <listen_message_reliably>:
 801c678:	1e0b      	subs	r3, r1, #0
 801c67a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c67e:	bfb8      	it	lt
 801c680:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801c684:	b09d      	sub	sp, #116	@ 0x74
 801c686:	4680      	mov	r8, r0
 801c688:	9305      	str	r3, [sp, #20]
 801c68a:	f001 fb27 	bl	801dcdc <uxr_millis>
 801c68e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801c692:	4681      	mov	r9, r0
 801c694:	2a00      	cmp	r2, #0
 801c696:	f000 809a 	beq.w	801c7ce <listen_message_reliably+0x156>
 801c69a:	2600      	movs	r6, #0
 801c69c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c6a0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801c6a4:	460f      	mov	r7, r1
 801c6a6:	4630      	mov	r0, r6
 801c6a8:	9303      	str	r3, [sp, #12]
 801c6aa:	e00e      	b.n	801c6ca <listen_message_reliably+0x52>
 801c6ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c6ae:	3601      	adds	r6, #1
 801c6b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c6b2:	455a      	cmp	r2, fp
 801c6b4:	9903      	ldr	r1, [sp, #12]
 801c6b6:	b2f0      	uxtb	r0, r6
 801c6b8:	eb73 0101 	sbcs.w	r1, r3, r1
 801c6bc:	da01      	bge.n	801c6c2 <listen_message_reliably+0x4a>
 801c6be:	4693      	mov	fp, r2
 801c6c0:	9303      	str	r3, [sp, #12]
 801c6c2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801c6c6:	4283      	cmp	r3, r0
 801c6c8:	d95f      	bls.n	801c78a <listen_message_reliably+0x112>
 801c6ca:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801c6ce:	2102      	movs	r1, #2
 801c6d0:	2201      	movs	r2, #1
 801c6d2:	00e4      	lsls	r4, r4, #3
 801c6d4:	f001 f97e 	bl	801d9d4 <uxr_stream_id>
 801c6d8:	4601      	mov	r1, r0
 801c6da:	f104 0520 	add.w	r5, r4, #32
 801c6de:	463b      	mov	r3, r7
 801c6e0:	464a      	mov	r2, r9
 801c6e2:	9109      	str	r1, [sp, #36]	@ 0x24
 801c6e4:	4445      	add	r5, r8
 801c6e6:	4628      	mov	r0, r5
 801c6e8:	f003 feae 	bl	8020448 <uxr_update_output_stream_heartbeat_timestamp>
 801c6ec:	eb08 0304 	add.w	r3, r8, r4
 801c6f0:	2800      	cmp	r0, #0
 801c6f2:	d0db      	beq.n	801c6ac <listen_message_reliably+0x34>
 801c6f4:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801c6f8:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 801c6fc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801c700:	4640      	mov	r0, r8
 801c702:	3501      	adds	r5, #1
 801c704:	4444      	add	r4, r8
 801c706:	9304      	str	r3, [sp, #16]
 801c708:	f000 fcae 	bl	801d068 <uxr_session_header_offset>
 801c70c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801c710:	2300      	movs	r3, #0
 801c712:	2211      	movs	r2, #17
 801c714:	a90c      	add	r1, sp, #48	@ 0x30
 801c716:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801c71a:	9000      	str	r0, [sp, #0]
 801c71c:	4650      	mov	r0, sl
 801c71e:	3601      	adds	r6, #1
 801c720:	f7f7 fa8e 	bl	8013c40 <ucdr_init_buffer_origin_offset>
 801c724:	2300      	movs	r3, #0
 801c726:	2205      	movs	r2, #5
 801c728:	210b      	movs	r1, #11
 801c72a:	4650      	mov	r0, sl
 801c72c:	f001 fa90 	bl	801dc50 <uxr_buffer_submessage_header>
 801c730:	2101      	movs	r1, #1
 801c732:	8968      	ldrh	r0, [r5, #10]
 801c734:	f003 ff2a 	bl	802058c <uxr_seq_num_add>
 801c738:	892b      	ldrh	r3, [r5, #8]
 801c73a:	4602      	mov	r2, r0
 801c73c:	a90a      	add	r1, sp, #40	@ 0x28
 801c73e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801c742:	4650      	mov	r0, sl
 801c744:	9b04      	ldr	r3, [sp, #16]
 801c746:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801c74a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801c74e:	f002 fb45 	bl	801eddc <uxr_serialize_HEARTBEAT_Payload>
 801c752:	2200      	movs	r2, #0
 801c754:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c756:	4640      	mov	r0, r8
 801c758:	4611      	mov	r1, r2
 801c75a:	f000 fc31 	bl	801cfc0 <uxr_stamp_session_header>
 801c75e:	4650      	mov	r0, sl
 801c760:	f7f7 faae 	bl	8013cc0 <ucdr_buffer_length>
 801c764:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801c768:	4602      	mov	r2, r0
 801c76a:	a90c      	add	r1, sp, #48	@ 0x30
 801c76c:	e9d3 0500 	ldrd	r0, r5, [r3]
 801c770:	47a8      	blx	r5
 801c772:	9903      	ldr	r1, [sp, #12]
 801c774:	b2f0      	uxtb	r0, r6
 801c776:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801c77a:	455a      	cmp	r2, fp
 801c77c:	eb73 0101 	sbcs.w	r1, r3, r1
 801c780:	db9d      	blt.n	801c6be <listen_message_reliably+0x46>
 801c782:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801c786:	4283      	cmp	r3, r0
 801c788:	d89f      	bhi.n	801c6ca <listen_message_reliably+0x52>
 801c78a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c78e:	9a03      	ldr	r2, [sp, #12]
 801c790:	429a      	cmp	r2, r3
 801c792:	bf08      	it	eq
 801c794:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 801c798:	d019      	beq.n	801c7ce <listen_message_reliably+0x156>
 801c79a:	ebab 0309 	sub.w	r3, fp, r9
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	9d05      	ldr	r5, [sp, #20]
 801c7a2:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801c7a6:	aa08      	add	r2, sp, #32
 801c7a8:	bf08      	it	eq
 801c7aa:	2301      	moveq	r3, #1
 801c7ac:	a907      	add	r1, sp, #28
 801c7ae:	6884      	ldr	r4, [r0, #8]
 801c7b0:	429d      	cmp	r5, r3
 801c7b2:	6800      	ldr	r0, [r0, #0]
 801c7b4:	bfa8      	it	ge
 801c7b6:	461d      	movge	r5, r3
 801c7b8:	462b      	mov	r3, r5
 801c7ba:	47a0      	blx	r4
 801c7bc:	b948      	cbnz	r0, 801c7d2 <listen_message_reliably+0x15a>
 801c7be:	9b05      	ldr	r3, [sp, #20]
 801c7c0:	1b5b      	subs	r3, r3, r5
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	9305      	str	r3, [sp, #20]
 801c7c6:	f73f af60 	bgt.w	801c68a <listen_message_reliably+0x12>
 801c7ca:	4604      	mov	r4, r0
 801c7cc:	e012      	b.n	801c7f4 <listen_message_reliably+0x17c>
 801c7ce:	9b05      	ldr	r3, [sp, #20]
 801c7d0:	e7e5      	b.n	801c79e <listen_message_reliably+0x126>
 801c7d2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801c7d6:	4604      	mov	r4, r0
 801c7d8:	2500      	movs	r5, #0
 801c7da:	a80c      	add	r0, sp, #48	@ 0x30
 801c7dc:	f7f7 fa42 	bl	8013c64 <ucdr_init_buffer>
 801c7e0:	f10d 031a 	add.w	r3, sp, #26
 801c7e4:	aa06      	add	r2, sp, #24
 801c7e6:	a90c      	add	r1, sp, #48	@ 0x30
 801c7e8:	4640      	mov	r0, r8
 801c7ea:	f88d 5018 	strb.w	r5, [sp, #24]
 801c7ee:	f000 fbfb 	bl	801cfe8 <uxr_read_session_header>
 801c7f2:	b918      	cbnz	r0, 801c7fc <listen_message_reliably+0x184>
 801c7f4:	4620      	mov	r0, r4
 801c7f6:	b01d      	add	sp, #116	@ 0x74
 801c7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7fc:	4629      	mov	r1, r5
 801c7fe:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801c802:	f001 f915 	bl	801da30 <uxr_stream_id_from_raw>
 801c806:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801c80a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801c80e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801c812:	2e01      	cmp	r6, #1
 801c814:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801c818:	d04b      	beq.n	801c8b2 <listen_message_reliably+0x23a>
 801c81a:	2e02      	cmp	r6, #2
 801c81c:	d00f      	beq.n	801c83e <listen_message_reliably+0x1c6>
 801c81e:	2e00      	cmp	r6, #0
 801c820:	d1e8      	bne.n	801c7f4 <listen_message_reliably+0x17c>
 801c822:	4631      	mov	r1, r6
 801c824:	4630      	mov	r0, r6
 801c826:	f001 f903 	bl	801da30 <uxr_stream_id_from_raw>
 801c82a:	4602      	mov	r2, r0
 801c82c:	a90c      	add	r1, sp, #48	@ 0x30
 801c82e:	4640      	mov	r0, r8
 801c830:	920a      	str	r2, [sp, #40]	@ 0x28
 801c832:	f7ff fd97 	bl	801c364 <read_submessage_list>
 801c836:	4620      	mov	r0, r4
 801c838:	b01d      	add	sp, #116	@ 0x74
 801c83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c83e:	4629      	mov	r1, r5
 801c840:	f108 0008 	add.w	r0, r8, #8
 801c844:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801c848:	f001 f9e0 	bl	801dc0c <uxr_get_input_reliable_stream>
 801c84c:	4607      	mov	r7, r0
 801c84e:	b338      	cbz	r0, 801c8a0 <listen_message_reliably+0x228>
 801c850:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c852:	a80c      	add	r0, sp, #48	@ 0x30
 801c854:	9203      	str	r2, [sp, #12]
 801c856:	f7f7 fa37 	bl	8013cc8 <ucdr_buffer_remaining>
 801c85a:	4603      	mov	r3, r0
 801c85c:	f10d 0019 	add.w	r0, sp, #25
 801c860:	9a03      	ldr	r2, [sp, #12]
 801c862:	4651      	mov	r1, sl
 801c864:	9000      	str	r0, [sp, #0]
 801c866:	4638      	mov	r0, r7
 801c868:	f003 f9f8 	bl	801fc5c <uxr_receive_reliable_message>
 801c86c:	b1c0      	cbz	r0, 801c8a0 <listen_message_reliably+0x228>
 801c86e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801c872:	b393      	cbz	r3, 801c8da <listen_message_reliably+0x262>
 801c874:	ae14      	add	r6, sp, #80	@ 0x50
 801c876:	f04f 0a02 	mov.w	sl, #2
 801c87a:	e00a      	b.n	801c892 <listen_message_reliably+0x21a>
 801c87c:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801c880:	4631      	mov	r1, r6
 801c882:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801c886:	4640      	mov	r0, r8
 801c888:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801c88c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c88e:	f7ff fd69 	bl	801c364 <read_submessage_list>
 801c892:	2204      	movs	r2, #4
 801c894:	4631      	mov	r1, r6
 801c896:	4638      	mov	r0, r7
 801c898:	f003 fa62 	bl	801fd60 <uxr_next_input_reliable_buffer_available>
 801c89c:	2800      	cmp	r0, #0
 801c89e:	d1ed      	bne.n	801c87c <listen_message_reliably+0x204>
 801c8a0:	4640      	mov	r0, r8
 801c8a2:	462a      	mov	r2, r5
 801c8a4:	4649      	mov	r1, r9
 801c8a6:	f7ff fbd9 	bl	801c05c <write_submessage_acknack.isra.0>
 801c8aa:	4620      	mov	r0, r4
 801c8ac:	b01d      	add	sp, #116	@ 0x74
 801c8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8b2:	4629      	mov	r1, r5
 801c8b4:	f108 0008 	add.w	r0, r8, #8
 801c8b8:	f001 f99e 	bl	801dbf8 <uxr_get_input_best_effort_stream>
 801c8bc:	2800      	cmp	r0, #0
 801c8be:	d099      	beq.n	801c7f4 <listen_message_reliably+0x17c>
 801c8c0:	4651      	mov	r1, sl
 801c8c2:	f003 f941 	bl	801fb48 <uxr_receive_best_effort_message>
 801c8c6:	2800      	cmp	r0, #0
 801c8c8:	d094      	beq.n	801c7f4 <listen_message_reliably+0x17c>
 801c8ca:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801c8ce:	a90c      	add	r1, sp, #48	@ 0x30
 801c8d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c8d2:	4640      	mov	r0, r8
 801c8d4:	f7ff fd46 	bl	801c364 <read_submessage_list>
 801c8d8:	e78c      	b.n	801c7f4 <listen_message_reliably+0x17c>
 801c8da:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801c8de:	a90c      	add	r1, sp, #48	@ 0x30
 801c8e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c8e2:	4640      	mov	r0, r8
 801c8e4:	f7ff fd3e 	bl	801c364 <read_submessage_list>
 801c8e8:	e7c4      	b.n	801c874 <listen_message_reliably+0x1fc>
 801c8ea:	bf00      	nop

0801c8ec <uxr_run_session_timeout>:
 801c8ec:	b570      	push	{r4, r5, r6, lr}
 801c8ee:	4604      	mov	r4, r0
 801c8f0:	460d      	mov	r5, r1
 801c8f2:	f001 f9f3 	bl	801dcdc <uxr_millis>
 801c8f6:	4606      	mov	r6, r0
 801c8f8:	4620      	mov	r0, r4
 801c8fa:	f7ff fc77 	bl	801c1ec <uxr_flash_output_streams>
 801c8fe:	4629      	mov	r1, r5
 801c900:	4620      	mov	r0, r4
 801c902:	f7ff feb9 	bl	801c678 <listen_message_reliably>
 801c906:	f001 f9e9 	bl	801dcdc <uxr_millis>
 801c90a:	1b83      	subs	r3, r0, r6
 801c90c:	1ae9      	subs	r1, r5, r3
 801c90e:	2900      	cmp	r1, #0
 801c910:	dcf6      	bgt.n	801c900 <uxr_run_session_timeout+0x14>
 801c912:	f104 0008 	add.w	r0, r4, #8
 801c916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c91a:	f001 b983 	b.w	801dc24 <uxr_output_streams_confirmed>
 801c91e:	bf00      	nop

0801c920 <uxr_run_session_until_data>:
 801c920:	b570      	push	{r4, r5, r6, lr}
 801c922:	4604      	mov	r4, r0
 801c924:	460d      	mov	r5, r1
 801c926:	f001 f9d9 	bl	801dcdc <uxr_millis>
 801c92a:	4606      	mov	r6, r0
 801c92c:	4620      	mov	r0, r4
 801c92e:	f7ff fc5d 	bl	801c1ec <uxr_flash_output_streams>
 801c932:	2300      	movs	r3, #0
 801c934:	4629      	mov	r1, r5
 801c936:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801c93a:	e005      	b.n	801c948 <uxr_run_session_until_data+0x28>
 801c93c:	f001 f9ce 	bl	801dcdc <uxr_millis>
 801c940:	1b83      	subs	r3, r0, r6
 801c942:	1ae9      	subs	r1, r5, r3
 801c944:	2900      	cmp	r1, #0
 801c946:	dd07      	ble.n	801c958 <uxr_run_session_until_data+0x38>
 801c948:	4620      	mov	r0, r4
 801c94a:	f7ff fe95 	bl	801c678 <listen_message_reliably>
 801c94e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801c952:	2800      	cmp	r0, #0
 801c954:	d0f2      	beq.n	801c93c <uxr_run_session_until_data+0x1c>
 801c956:	bd70      	pop	{r4, r5, r6, pc}
 801c958:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801c95c:	bd70      	pop	{r4, r5, r6, pc}
 801c95e:	bf00      	nop

0801c960 <uxr_run_session_until_confirm_delivery>:
 801c960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c964:	4606      	mov	r6, r0
 801c966:	460d      	mov	r5, r1
 801c968:	f001 f9b8 	bl	801dcdc <uxr_millis>
 801c96c:	4607      	mov	r7, r0
 801c96e:	4630      	mov	r0, r6
 801c970:	f106 0808 	add.w	r8, r6, #8
 801c974:	f7ff fc3a 	bl	801c1ec <uxr_flash_output_streams>
 801c978:	2d00      	cmp	r5, #0
 801c97a:	db10      	blt.n	801c99e <uxr_run_session_until_confirm_delivery+0x3e>
 801c97c:	462c      	mov	r4, r5
 801c97e:	e006      	b.n	801c98e <uxr_run_session_until_confirm_delivery+0x2e>
 801c980:	f7ff fe7a 	bl	801c678 <listen_message_reliably>
 801c984:	f001 f9aa 	bl	801dcdc <uxr_millis>
 801c988:	1bc3      	subs	r3, r0, r7
 801c98a:	1aec      	subs	r4, r5, r3
 801c98c:	d407      	bmi.n	801c99e <uxr_run_session_until_confirm_delivery+0x3e>
 801c98e:	4640      	mov	r0, r8
 801c990:	f001 f948 	bl	801dc24 <uxr_output_streams_confirmed>
 801c994:	4603      	mov	r3, r0
 801c996:	4621      	mov	r1, r4
 801c998:	4630      	mov	r0, r6
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d0f0      	beq.n	801c980 <uxr_run_session_until_confirm_delivery+0x20>
 801c99e:	4640      	mov	r0, r8
 801c9a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c9a4:	f001 b93e 	b.w	801dc24 <uxr_output_streams_confirmed>

0801c9a8 <uxr_run_session_until_all_status>:
 801c9a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9ac:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 801c9b0:	4606      	mov	r6, r0
 801c9b2:	4688      	mov	r8, r1
 801c9b4:	4692      	mov	sl, r2
 801c9b6:	461f      	mov	r7, r3
 801c9b8:	f7ff fc18 	bl	801c1ec <uxr_flash_output_streams>
 801c9bc:	f1bb 0f00 	cmp.w	fp, #0
 801c9c0:	d004      	beq.n	801c9cc <uxr_run_session_until_all_status+0x24>
 801c9c2:	465a      	mov	r2, fp
 801c9c4:	21ff      	movs	r1, #255	@ 0xff
 801c9c6:	4638      	mov	r0, r7
 801c9c8:	f004 faf8 	bl	8020fbc <memset>
 801c9cc:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 801c9d0:	1e7d      	subs	r5, r7, #1
 801c9d2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 801c9d6:	f001 f981 	bl	801dcdc <uxr_millis>
 801c9da:	4641      	mov	r1, r8
 801c9dc:	4681      	mov	r9, r0
 801c9de:	4630      	mov	r0, r6
 801c9e0:	f7ff fe4a 	bl	801c678 <listen_message_reliably>
 801c9e4:	f001 f97a 	bl	801dcdc <uxr_millis>
 801c9e8:	eba0 0009 	sub.w	r0, r0, r9
 801c9ec:	eba8 0100 	sub.w	r1, r8, r0
 801c9f0:	f1bb 0f00 	cmp.w	fp, #0
 801c9f4:	d029      	beq.n	801ca4a <uxr_run_session_until_all_status+0xa2>
 801c9f6:	46ae      	mov	lr, r5
 801c9f8:	f04f 0c00 	mov.w	ip, #0
 801c9fc:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 801ca00:	2cff      	cmp	r4, #255	@ 0xff
 801ca02:	d015      	beq.n	801ca30 <uxr_run_session_until_all_status+0x88>
 801ca04:	f10c 0c01 	add.w	ip, ip, #1
 801ca08:	45e3      	cmp	fp, ip
 801ca0a:	d8f7      	bhi.n	801c9fc <uxr_run_session_until_all_status+0x54>
 801ca0c:	2300      	movs	r3, #0
 801ca0e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 801ca10:	e000      	b.n	801ca14 <uxr_run_session_until_all_status+0x6c>
 801ca12:	b158      	cbz	r0, 801ca2c <uxr_run_session_until_all_status+0x84>
 801ca14:	462b      	mov	r3, r5
 801ca16:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801ca1a:	3302      	adds	r3, #2
 801ca1c:	2801      	cmp	r0, #1
 801ca1e:	eba3 0307 	sub.w	r3, r3, r7
 801ca22:	bf8c      	ite	hi
 801ca24:	2000      	movhi	r0, #0
 801ca26:	2001      	movls	r0, #1
 801ca28:	459b      	cmp	fp, r3
 801ca2a:	d8f2      	bhi.n	801ca12 <uxr_run_session_until_all_status+0x6a>
 801ca2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca30:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801ca34:	f10c 0c01 	add.w	ip, ip, #1
 801ca38:	45dc      	cmp	ip, fp
 801ca3a:	d201      	bcs.n	801ca40 <uxr_run_session_until_all_status+0x98>
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d0dd      	beq.n	801c9fc <uxr_run_session_until_all_status+0x54>
 801ca40:	2900      	cmp	r1, #0
 801ca42:	dde3      	ble.n	801ca0c <uxr_run_session_until_all_status+0x64>
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d1ca      	bne.n	801c9de <uxr_run_session_until_all_status+0x36>
 801ca48:	e7e0      	b.n	801ca0c <uxr_run_session_until_all_status+0x64>
 801ca4a:	2001      	movs	r0, #1
 801ca4c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 801ca50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca54 <wait_session_status>:
 801ca54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca58:	4604      	mov	r4, r0
 801ca5a:	b09d      	sub	sp, #116	@ 0x74
 801ca5c:	20ff      	movs	r0, #255	@ 0xff
 801ca5e:	9303      	str	r3, [sp, #12]
 801ca60:	7160      	strb	r0, [r4, #5]
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	f000 80b6 	beq.w	801cbd4 <wait_session_status+0x180>
 801ca68:	4689      	mov	r9, r1
 801ca6a:	4692      	mov	sl, r2
 801ca6c:	f04f 0b00 	mov.w	fp, #0
 801ca70:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801ca72:	4652      	mov	r2, sl
 801ca74:	4649      	mov	r1, r9
 801ca76:	e9d3 0500 	ldrd	r0, r5, [r3]
 801ca7a:	47a8      	blx	r5
 801ca7c:	f001 f92e 	bl	801dcdc <uxr_millis>
 801ca80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801ca84:	4605      	mov	r5, r0
 801ca86:	e009      	b.n	801ca9c <wait_session_status+0x48>
 801ca88:	f001 f928 	bl	801dcdc <uxr_millis>
 801ca8c:	1b40      	subs	r0, r0, r5
 801ca8e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	dd40      	ble.n	801cb18 <wait_session_status+0xc4>
 801ca96:	7960      	ldrb	r0, [r4, #5]
 801ca98:	28ff      	cmp	r0, #255	@ 0xff
 801ca9a:	d145      	bne.n	801cb28 <wait_session_status+0xd4>
 801ca9c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801ca9e:	a908      	add	r1, sp, #32
 801caa0:	6896      	ldr	r6, [r2, #8]
 801caa2:	6810      	ldr	r0, [r2, #0]
 801caa4:	aa09      	add	r2, sp, #36	@ 0x24
 801caa6:	47b0      	blx	r6
 801caa8:	2800      	cmp	r0, #0
 801caaa:	d0ed      	beq.n	801ca88 <wait_session_status+0x34>
 801caac:	a80c      	add	r0, sp, #48	@ 0x30
 801caae:	2600      	movs	r6, #0
 801cab0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801cab4:	f7f7 f8d6 	bl	8013c64 <ucdr_init_buffer>
 801cab8:	f10d 031e 	add.w	r3, sp, #30
 801cabc:	aa07      	add	r2, sp, #28
 801cabe:	a90c      	add	r1, sp, #48	@ 0x30
 801cac0:	4620      	mov	r0, r4
 801cac2:	f88d 601c 	strb.w	r6, [sp, #28]
 801cac6:	f000 fa8f 	bl	801cfe8 <uxr_read_session_header>
 801caca:	2800      	cmp	r0, #0
 801cacc:	d0dc      	beq.n	801ca88 <wait_session_status+0x34>
 801cace:	4631      	mov	r1, r6
 801cad0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801cad4:	f000 ffac 	bl	801da30 <uxr_stream_id_from_raw>
 801cad8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801cadc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801cae0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801cae4:	2f01      	cmp	r7, #1
 801cae6:	9302      	str	r3, [sp, #8]
 801cae8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801caec:	d05c      	beq.n	801cba8 <wait_session_status+0x154>
 801caee:	2f02      	cmp	r7, #2
 801caf0:	d020      	beq.n	801cb34 <wait_session_status+0xe0>
 801caf2:	2f00      	cmp	r7, #0
 801caf4:	d1c8      	bne.n	801ca88 <wait_session_status+0x34>
 801caf6:	4639      	mov	r1, r7
 801caf8:	4638      	mov	r0, r7
 801cafa:	f000 ff99 	bl	801da30 <uxr_stream_id_from_raw>
 801cafe:	a90c      	add	r1, sp, #48	@ 0x30
 801cb00:	4602      	mov	r2, r0
 801cb02:	900b      	str	r0, [sp, #44]	@ 0x2c
 801cb04:	4620      	mov	r0, r4
 801cb06:	f7ff fc2d 	bl	801c364 <read_submessage_list>
 801cb0a:	f001 f8e7 	bl	801dcdc <uxr_millis>
 801cb0e:	1b40      	subs	r0, r0, r5
 801cb10:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	dcbe      	bgt.n	801ca96 <wait_session_status+0x42>
 801cb18:	f10b 0b01 	add.w	fp, fp, #1
 801cb1c:	9b03      	ldr	r3, [sp, #12]
 801cb1e:	7960      	ldrb	r0, [r4, #5]
 801cb20:	455b      	cmp	r3, fp
 801cb22:	d001      	beq.n	801cb28 <wait_session_status+0xd4>
 801cb24:	28ff      	cmp	r0, #255	@ 0xff
 801cb26:	d0a3      	beq.n	801ca70 <wait_session_status+0x1c>
 801cb28:	38ff      	subs	r0, #255	@ 0xff
 801cb2a:	bf18      	it	ne
 801cb2c:	2001      	movne	r0, #1
 801cb2e:	b01d      	add	sp, #116	@ 0x74
 801cb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb34:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801cb38:	4631      	mov	r1, r6
 801cb3a:	f104 0008 	add.w	r0, r4, #8
 801cb3e:	9304      	str	r3, [sp, #16]
 801cb40:	f001 f864 	bl	801dc0c <uxr_get_input_reliable_stream>
 801cb44:	4680      	mov	r8, r0
 801cb46:	b348      	cbz	r0, 801cb9c <wait_session_status+0x148>
 801cb48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cb4a:	a80c      	add	r0, sp, #48	@ 0x30
 801cb4c:	9205      	str	r2, [sp, #20]
 801cb4e:	f7f7 f8bb 	bl	8013cc8 <ucdr_buffer_remaining>
 801cb52:	4603      	mov	r3, r0
 801cb54:	f10d 001d 	add.w	r0, sp, #29
 801cb58:	9a05      	ldr	r2, [sp, #20]
 801cb5a:	9000      	str	r0, [sp, #0]
 801cb5c:	4640      	mov	r0, r8
 801cb5e:	9902      	ldr	r1, [sp, #8]
 801cb60:	f003 f87c 	bl	801fc5c <uxr_receive_reliable_message>
 801cb64:	b1d0      	cbz	r0, 801cb9c <wait_session_status+0x148>
 801cb66:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d03a      	beq.n	801cbe4 <wait_session_status+0x190>
 801cb6e:	9f04      	ldr	r7, [sp, #16]
 801cb70:	e00a      	b.n	801cb88 <wait_session_status+0x134>
 801cb72:	f04f 0302 	mov.w	r3, #2
 801cb76:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801cb7a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801cb7e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801cb82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cb84:	f7ff fbee 	bl	801c364 <read_submessage_list>
 801cb88:	a914      	add	r1, sp, #80	@ 0x50
 801cb8a:	2204      	movs	r2, #4
 801cb8c:	4640      	mov	r0, r8
 801cb8e:	f003 f8e7 	bl	801fd60 <uxr_next_input_reliable_buffer_available>
 801cb92:	4603      	mov	r3, r0
 801cb94:	a914      	add	r1, sp, #80	@ 0x50
 801cb96:	4620      	mov	r0, r4
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d1ea      	bne.n	801cb72 <wait_session_status+0x11e>
 801cb9c:	4632      	mov	r2, r6
 801cb9e:	9904      	ldr	r1, [sp, #16]
 801cba0:	4620      	mov	r0, r4
 801cba2:	f7ff fa5b 	bl	801c05c <write_submessage_acknack.isra.0>
 801cba6:	e76f      	b.n	801ca88 <wait_session_status+0x34>
 801cba8:	4631      	mov	r1, r6
 801cbaa:	f104 0008 	add.w	r0, r4, #8
 801cbae:	f001 f823 	bl	801dbf8 <uxr_get_input_best_effort_stream>
 801cbb2:	2800      	cmp	r0, #0
 801cbb4:	f43f af68 	beq.w	801ca88 <wait_session_status+0x34>
 801cbb8:	9902      	ldr	r1, [sp, #8]
 801cbba:	f002 ffc5 	bl	801fb48 <uxr_receive_best_effort_message>
 801cbbe:	2800      	cmp	r0, #0
 801cbc0:	f43f af62 	beq.w	801ca88 <wait_session_status+0x34>
 801cbc4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801cbc8:	a90c      	add	r1, sp, #48	@ 0x30
 801cbca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cbcc:	4620      	mov	r0, r4
 801cbce:	f7ff fbc9 	bl	801c364 <read_submessage_list>
 801cbd2:	e759      	b.n	801ca88 <wait_session_status+0x34>
 801cbd4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801cbd6:	e9d3 0400 	ldrd	r0, r4, [r3]
 801cbda:	47a0      	blx	r4
 801cbdc:	2001      	movs	r0, #1
 801cbde:	b01d      	add	sp, #116	@ 0x74
 801cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbe4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801cbe8:	a90c      	add	r1, sp, #48	@ 0x30
 801cbea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cbec:	4620      	mov	r0, r4
 801cbee:	f7ff fbb9 	bl	801c364 <read_submessage_list>
 801cbf2:	e7bc      	b.n	801cb6e <wait_session_status+0x11a>

0801cbf4 <uxr_delete_session_retries>:
 801cbf4:	b530      	push	{r4, r5, lr}
 801cbf6:	b08f      	sub	sp, #60	@ 0x3c
 801cbf8:	4604      	mov	r4, r0
 801cbfa:	460d      	mov	r5, r1
 801cbfc:	f000 fa34 	bl	801d068 <uxr_session_header_offset>
 801cc00:	2300      	movs	r3, #0
 801cc02:	2210      	movs	r2, #16
 801cc04:	a902      	add	r1, sp, #8
 801cc06:	9000      	str	r0, [sp, #0]
 801cc08:	a806      	add	r0, sp, #24
 801cc0a:	f7f7 f819 	bl	8013c40 <ucdr_init_buffer_origin_offset>
 801cc0e:	a906      	add	r1, sp, #24
 801cc10:	4620      	mov	r0, r4
 801cc12:	f000 f979 	bl	801cf08 <uxr_buffer_delete_session>
 801cc16:	2200      	movs	r2, #0
 801cc18:	9b06      	ldr	r3, [sp, #24]
 801cc1a:	4620      	mov	r0, r4
 801cc1c:	4611      	mov	r1, r2
 801cc1e:	f000 f9cf 	bl	801cfc0 <uxr_stamp_session_header>
 801cc22:	a806      	add	r0, sp, #24
 801cc24:	f7f7 f84c 	bl	8013cc0 <ucdr_buffer_length>
 801cc28:	462b      	mov	r3, r5
 801cc2a:	4602      	mov	r2, r0
 801cc2c:	a902      	add	r1, sp, #8
 801cc2e:	4620      	mov	r0, r4
 801cc30:	f7ff ff10 	bl	801ca54 <wait_session_status>
 801cc34:	b118      	cbz	r0, 801cc3e <uxr_delete_session_retries+0x4a>
 801cc36:	7960      	ldrb	r0, [r4, #5]
 801cc38:	fab0 f080 	clz	r0, r0
 801cc3c:	0940      	lsrs	r0, r0, #5
 801cc3e:	b00f      	add	sp, #60	@ 0x3c
 801cc40:	bd30      	pop	{r4, r5, pc}
 801cc42:	bf00      	nop

0801cc44 <uxr_create_session>:
 801cc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc48:	f100 0b08 	add.w	fp, r0, #8
 801cc4c:	4604      	mov	r4, r0
 801cc4e:	b0ab      	sub	sp, #172	@ 0xac
 801cc50:	4658      	mov	r0, fp
 801cc52:	465e      	mov	r6, fp
 801cc54:	f000 ff22 	bl	801da9c <uxr_reset_stream_storage>
 801cc58:	4620      	mov	r0, r4
 801cc5a:	f000 fa05 	bl	801d068 <uxr_session_header_offset>
 801cc5e:	2300      	movs	r3, #0
 801cc60:	221c      	movs	r2, #28
 801cc62:	a90b      	add	r1, sp, #44	@ 0x2c
 801cc64:	9000      	str	r0, [sp, #0]
 801cc66:	a812      	add	r0, sp, #72	@ 0x48
 801cc68:	f7f6 ffea 	bl	8013c40 <ucdr_init_buffer_origin_offset>
 801cc6c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801cc6e:	a912      	add	r1, sp, #72	@ 0x48
 801cc70:	4620      	mov	r0, r4
 801cc72:	8a1a      	ldrh	r2, [r3, #16]
 801cc74:	3a04      	subs	r2, #4
 801cc76:	b292      	uxth	r2, r2
 801cc78:	f000 f91c 	bl	801ceb4 <uxr_buffer_create_session>
 801cc7c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801cc7e:	4620      	mov	r0, r4
 801cc80:	f000 f98a 	bl	801cf98 <uxr_stamp_create_session_header>
 801cc84:	a812      	add	r0, sp, #72	@ 0x48
 801cc86:	f7f7 f81b 	bl	8013cc0 <ucdr_buffer_length>
 801cc8a:	23ff      	movs	r3, #255	@ 0xff
 801cc8c:	4681      	mov	r9, r0
 801cc8e:	7163      	strb	r3, [r4, #5]
 801cc90:	230a      	movs	r3, #10
 801cc92:	9303      	str	r3, [sp, #12]
 801cc94:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801cc96:	464a      	mov	r2, r9
 801cc98:	a90b      	add	r1, sp, #44	@ 0x2c
 801cc9a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801cc9e:	47a8      	blx	r5
 801cca0:	f001 f81c 	bl	801dcdc <uxr_millis>
 801cca4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801cca8:	4605      	mov	r5, r0
 801ccaa:	e009      	b.n	801ccc0 <uxr_create_session+0x7c>
 801ccac:	f001 f816 	bl	801dcdc <uxr_millis>
 801ccb0:	1b40      	subs	r0, r0, r5
 801ccb2:	7962      	ldrb	r2, [r4, #5]
 801ccb4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	dd38      	ble.n	801cd2e <uxr_create_session+0xea>
 801ccbc:	2aff      	cmp	r2, #255	@ 0xff
 801ccbe:	d13c      	bne.n	801cd3a <uxr_create_session+0xf6>
 801ccc0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801ccc2:	a907      	add	r1, sp, #28
 801ccc4:	6897      	ldr	r7, [r2, #8]
 801ccc6:	6810      	ldr	r0, [r2, #0]
 801ccc8:	aa08      	add	r2, sp, #32
 801ccca:	47b8      	blx	r7
 801cccc:	2800      	cmp	r0, #0
 801ccce:	d0ed      	beq.n	801ccac <uxr_create_session+0x68>
 801ccd0:	a81a      	add	r0, sp, #104	@ 0x68
 801ccd2:	2700      	movs	r7, #0
 801ccd4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801ccd8:	f7f6 ffc4 	bl	8013c64 <ucdr_init_buffer>
 801ccdc:	f10d 031a 	add.w	r3, sp, #26
 801cce0:	aa06      	add	r2, sp, #24
 801cce2:	a91a      	add	r1, sp, #104	@ 0x68
 801cce4:	4620      	mov	r0, r4
 801cce6:	f88d 7018 	strb.w	r7, [sp, #24]
 801ccea:	f000 f97d 	bl	801cfe8 <uxr_read_session_header>
 801ccee:	2800      	cmp	r0, #0
 801ccf0:	d0dc      	beq.n	801ccac <uxr_create_session+0x68>
 801ccf2:	4639      	mov	r1, r7
 801ccf4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801ccf8:	f000 fe9a 	bl	801da30 <uxr_stream_id_from_raw>
 801ccfc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801cd00:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 801cd04:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801cd08:	2f01      	cmp	r7, #1
 801cd0a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801cd0e:	d053      	beq.n	801cdb8 <uxr_create_session+0x174>
 801cd10:	2f02      	cmp	r7, #2
 801cd12:	d018      	beq.n	801cd46 <uxr_create_session+0x102>
 801cd14:	2f00      	cmp	r7, #0
 801cd16:	d1c9      	bne.n	801ccac <uxr_create_session+0x68>
 801cd18:	4639      	mov	r1, r7
 801cd1a:	4638      	mov	r0, r7
 801cd1c:	f000 fe88 	bl	801da30 <uxr_stream_id_from_raw>
 801cd20:	a91a      	add	r1, sp, #104	@ 0x68
 801cd22:	4602      	mov	r2, r0
 801cd24:	900a      	str	r0, [sp, #40]	@ 0x28
 801cd26:	4620      	mov	r0, r4
 801cd28:	f7ff fb1c 	bl	801c364 <read_submessage_list>
 801cd2c:	e7be      	b.n	801ccac <uxr_create_session+0x68>
 801cd2e:	9b03      	ldr	r3, [sp, #12]
 801cd30:	3b01      	subs	r3, #1
 801cd32:	9303      	str	r3, [sp, #12]
 801cd34:	d001      	beq.n	801cd3a <uxr_create_session+0xf6>
 801cd36:	2aff      	cmp	r2, #255	@ 0xff
 801cd38:	d0ac      	beq.n	801cc94 <uxr_create_session+0x50>
 801cd3a:	2a00      	cmp	r2, #0
 801cd3c:	d051      	beq.n	801cde2 <uxr_create_session+0x19e>
 801cd3e:	2000      	movs	r0, #0
 801cd40:	b02b      	add	sp, #172	@ 0xac
 801cd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd46:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801cd4a:	4641      	mov	r1, r8
 801cd4c:	4630      	mov	r0, r6
 801cd4e:	9304      	str	r3, [sp, #16]
 801cd50:	f000 ff5c 	bl	801dc0c <uxr_get_input_reliable_stream>
 801cd54:	4682      	mov	sl, r0
 801cd56:	b348      	cbz	r0, 801cdac <uxr_create_session+0x168>
 801cd58:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801cd5a:	a81a      	add	r0, sp, #104	@ 0x68
 801cd5c:	9205      	str	r2, [sp, #20]
 801cd5e:	f7f6 ffb3 	bl	8013cc8 <ucdr_buffer_remaining>
 801cd62:	4603      	mov	r3, r0
 801cd64:	f10d 0019 	add.w	r0, sp, #25
 801cd68:	9a05      	ldr	r2, [sp, #20]
 801cd6a:	4659      	mov	r1, fp
 801cd6c:	9000      	str	r0, [sp, #0]
 801cd6e:	4650      	mov	r0, sl
 801cd70:	f002 ff74 	bl	801fc5c <uxr_receive_reliable_message>
 801cd74:	b1d0      	cbz	r0, 801cdac <uxr_create_session+0x168>
 801cd76:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d038      	beq.n	801cdf0 <uxr_create_session+0x1ac>
 801cd7e:	9f04      	ldr	r7, [sp, #16]
 801cd80:	e00a      	b.n	801cd98 <uxr_create_session+0x154>
 801cd82:	f04f 0302 	mov.w	r3, #2
 801cd86:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801cd8a:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801cd8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cd92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cd94:	f7ff fae6 	bl	801c364 <read_submessage_list>
 801cd98:	a922      	add	r1, sp, #136	@ 0x88
 801cd9a:	2204      	movs	r2, #4
 801cd9c:	4650      	mov	r0, sl
 801cd9e:	f002 ffdf 	bl	801fd60 <uxr_next_input_reliable_buffer_available>
 801cda2:	4603      	mov	r3, r0
 801cda4:	a922      	add	r1, sp, #136	@ 0x88
 801cda6:	4620      	mov	r0, r4
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d1ea      	bne.n	801cd82 <uxr_create_session+0x13e>
 801cdac:	4642      	mov	r2, r8
 801cdae:	9904      	ldr	r1, [sp, #16]
 801cdb0:	4620      	mov	r0, r4
 801cdb2:	f7ff f953 	bl	801c05c <write_submessage_acknack.isra.0>
 801cdb6:	e779      	b.n	801ccac <uxr_create_session+0x68>
 801cdb8:	4641      	mov	r1, r8
 801cdba:	4630      	mov	r0, r6
 801cdbc:	f000 ff1c 	bl	801dbf8 <uxr_get_input_best_effort_stream>
 801cdc0:	2800      	cmp	r0, #0
 801cdc2:	f43f af73 	beq.w	801ccac <uxr_create_session+0x68>
 801cdc6:	4659      	mov	r1, fp
 801cdc8:	f002 febe 	bl	801fb48 <uxr_receive_best_effort_message>
 801cdcc:	2800      	cmp	r0, #0
 801cdce:	f43f af6d 	beq.w	801ccac <uxr_create_session+0x68>
 801cdd2:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801cdd6:	a91a      	add	r1, sp, #104	@ 0x68
 801cdd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cdda:	4620      	mov	r0, r4
 801cddc:	f7ff fac2 	bl	801c364 <read_submessage_list>
 801cde0:	e764      	b.n	801ccac <uxr_create_session+0x68>
 801cde2:	4630      	mov	r0, r6
 801cde4:	f000 fe5a 	bl	801da9c <uxr_reset_stream_storage>
 801cde8:	2001      	movs	r0, #1
 801cdea:	b02b      	add	sp, #172	@ 0xac
 801cdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdf0:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801cdf4:	a91a      	add	r1, sp, #104	@ 0x68
 801cdf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cdf8:	4620      	mov	r0, r4
 801cdfa:	f7ff fab3 	bl	801c364 <read_submessage_list>
 801cdfe:	e7be      	b.n	801cd7e <uxr_create_session+0x13a>

0801ce00 <uxr_prepare_stream_to_write_submessage>:
 801ce00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce04:	b082      	sub	sp, #8
 801ce06:	4604      	mov	r4, r0
 801ce08:	4610      	mov	r0, r2
 801ce0a:	4615      	mov	r5, r2
 801ce0c:	461e      	mov	r6, r3
 801ce0e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 801ce12:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801ce16:	f105 0904 	add.w	r9, r5, #4
 801ce1a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801ce1e:	9101      	str	r1, [sp, #4]
 801ce20:	f000 ff56 	bl	801dcd0 <uxr_submessage_padding>
 801ce24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801ce28:	4481      	add	r9, r0
 801ce2a:	2b01      	cmp	r3, #1
 801ce2c:	d01d      	beq.n	801ce6a <uxr_prepare_stream_to_write_submessage+0x6a>
 801ce2e:	2b02      	cmp	r3, #2
 801ce30:	d116      	bne.n	801ce60 <uxr_prepare_stream_to_write_submessage+0x60>
 801ce32:	f104 0008 	add.w	r0, r4, #8
 801ce36:	4651      	mov	r1, sl
 801ce38:	f000 fed2 	bl	801dbe0 <uxr_get_output_reliable_stream>
 801ce3c:	4604      	mov	r4, r0
 801ce3e:	b158      	cbz	r0, 801ce58 <uxr_prepare_stream_to_write_submessage+0x58>
 801ce40:	4649      	mov	r1, r9
 801ce42:	4632      	mov	r2, r6
 801ce44:	f003 f952 	bl	80200ec <uxr_prepare_reliable_buffer_to_write>
 801ce48:	4604      	mov	r4, r0
 801ce4a:	b12c      	cbz	r4, 801ce58 <uxr_prepare_stream_to_write_submessage+0x58>
 801ce4c:	4643      	mov	r3, r8
 801ce4e:	b2aa      	uxth	r2, r5
 801ce50:	4639      	mov	r1, r7
 801ce52:	4630      	mov	r0, r6
 801ce54:	f000 fefc 	bl	801dc50 <uxr_buffer_submessage_header>
 801ce58:	4620      	mov	r0, r4
 801ce5a:	b002      	add	sp, #8
 801ce5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce60:	2400      	movs	r4, #0
 801ce62:	4620      	mov	r0, r4
 801ce64:	b002      	add	sp, #8
 801ce66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce6a:	f104 0008 	add.w	r0, r4, #8
 801ce6e:	4651      	mov	r1, sl
 801ce70:	f000 feae 	bl	801dbd0 <uxr_get_output_best_effort_stream>
 801ce74:	4604      	mov	r4, r0
 801ce76:	2800      	cmp	r0, #0
 801ce78:	d0ee      	beq.n	801ce58 <uxr_prepare_stream_to_write_submessage+0x58>
 801ce7a:	4649      	mov	r1, r9
 801ce7c:	4632      	mov	r2, r6
 801ce7e:	f003 f85f 	bl	801ff40 <uxr_prepare_best_effort_buffer_to_write>
 801ce82:	4604      	mov	r4, r0
 801ce84:	e7e1      	b.n	801ce4a <uxr_prepare_stream_to_write_submessage+0x4a>
 801ce86:	bf00      	nop

0801ce88 <uxr_init_session_info>:
 801ce88:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801ce8c:	23ff      	movs	r3, #255	@ 0xff
 801ce8e:	7102      	strb	r2, [r0, #4]
 801ce90:	f880 c001 	strb.w	ip, [r0, #1]
 801ce94:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801ce98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ce9c:	7001      	strb	r1, [r0, #0]
 801ce9e:	f880 c002 	strb.w	ip, [r0, #2]
 801cea2:	7143      	strb	r3, [r0, #5]
 801cea4:	70c2      	strb	r2, [r0, #3]
 801cea6:	b500      	push	{lr}
 801cea8:	f04f 0e09 	mov.w	lr, #9
 801ceac:	f8a0 e006 	strh.w	lr, [r0, #6]
 801ceb0:	f85d fb04 	ldr.w	pc, [sp], #4

0801ceb4 <uxr_buffer_create_session>:
 801ceb4:	b530      	push	{r4, r5, lr}
 801ceb6:	2300      	movs	r3, #0
 801ceb8:	b089      	sub	sp, #36	@ 0x24
 801ceba:	4d12      	ldr	r5, [pc, #72]	@ (801cf04 <uxr_buffer_create_session+0x50>)
 801cebc:	460c      	mov	r4, r1
 801cebe:	9307      	str	r3, [sp, #28]
 801cec0:	4619      	mov	r1, r3
 801cec2:	f8ad 201c 	strh.w	r2, [sp, #28]
 801cec6:	2201      	movs	r2, #1
 801cec8:	9301      	str	r3, [sp, #4]
 801ceca:	80c2      	strh	r2, [r0, #6]
 801cecc:	f88d 2004 	strb.w	r2, [sp, #4]
 801ced0:	682a      	ldr	r2, [r5, #0]
 801ced2:	9303      	str	r3, [sp, #12]
 801ced4:	9200      	str	r2, [sp, #0]
 801ced6:	88aa      	ldrh	r2, [r5, #4]
 801ced8:	9306      	str	r3, [sp, #24]
 801ceda:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cede:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801cee2:	9202      	str	r2, [sp, #8]
 801cee4:	7802      	ldrb	r2, [r0, #0]
 801cee6:	4620      	mov	r0, r4
 801cee8:	f88d 200c 	strb.w	r2, [sp, #12]
 801ceec:	2210      	movs	r2, #16
 801ceee:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801cef2:	f000 fead 	bl	801dc50 <uxr_buffer_submessage_header>
 801cef6:	4669      	mov	r1, sp
 801cef8:	4620      	mov	r0, r4
 801cefa:	f001 fdcb 	bl	801ea94 <uxr_serialize_CREATE_CLIENT_Payload>
 801cefe:	b009      	add	sp, #36	@ 0x24
 801cf00:	bd30      	pop	{r4, r5, pc}
 801cf02:	bf00      	nop
 801cf04:	08022150 	.word	0x08022150

0801cf08 <uxr_buffer_delete_session>:
 801cf08:	4a0c      	ldr	r2, [pc, #48]	@ (801cf3c <uxr_buffer_delete_session+0x34>)
 801cf0a:	2302      	movs	r3, #2
 801cf0c:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 801cf10:	b510      	push	{r4, lr}
 801cf12:	460c      	mov	r4, r1
 801cf14:	b082      	sub	sp, #8
 801cf16:	8911      	ldrh	r1, [r2, #8]
 801cf18:	2204      	movs	r2, #4
 801cf1a:	80c3      	strh	r3, [r0, #6]
 801cf1c:	2300      	movs	r3, #0
 801cf1e:	f8ad 1006 	strh.w	r1, [sp, #6]
 801cf22:	4620      	mov	r0, r4
 801cf24:	2103      	movs	r1, #3
 801cf26:	f8ad c004 	strh.w	ip, [sp, #4]
 801cf2a:	f000 fe91 	bl	801dc50 <uxr_buffer_submessage_header>
 801cf2e:	a901      	add	r1, sp, #4
 801cf30:	4620      	mov	r0, r4
 801cf32:	f001 fe57 	bl	801ebe4 <uxr_serialize_DELETE_Payload>
 801cf36:	b002      	add	sp, #8
 801cf38:	bd10      	pop	{r4, pc}
 801cf3a:	bf00      	nop
 801cf3c:	08022150 	.word	0x08022150

0801cf40 <uxr_read_create_session_status>:
 801cf40:	b510      	push	{r4, lr}
 801cf42:	460b      	mov	r3, r1
 801cf44:	b088      	sub	sp, #32
 801cf46:	4604      	mov	r4, r0
 801cf48:	a901      	add	r1, sp, #4
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	f001 fe5a 	bl	801ec04 <uxr_deserialize_STATUS_AGENT_Payload>
 801cf50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801cf54:	7163      	strb	r3, [r4, #5]
 801cf56:	b008      	add	sp, #32
 801cf58:	bd10      	pop	{r4, pc}
 801cf5a:	bf00      	nop

0801cf5c <uxr_read_delete_session_status>:
 801cf5c:	b510      	push	{r4, lr}
 801cf5e:	b084      	sub	sp, #16
 801cf60:	4604      	mov	r4, r0
 801cf62:	4608      	mov	r0, r1
 801cf64:	a902      	add	r1, sp, #8
 801cf66:	f001 fe7d 	bl	801ec64 <uxr_deserialize_STATUS_Payload>
 801cf6a:	88e3      	ldrh	r3, [r4, #6]
 801cf6c:	2b02      	cmp	r3, #2
 801cf6e:	d001      	beq.n	801cf74 <uxr_read_delete_session_status+0x18>
 801cf70:	b004      	add	sp, #16
 801cf72:	bd10      	pop	{r4, pc}
 801cf74:	f10d 000a 	add.w	r0, sp, #10
 801cf78:	f7fe fec6 	bl	801bd08 <uxr_object_id_from_raw>
 801cf7c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801cf80:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801cf84:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801cf88:	b29b      	uxth	r3, r3
 801cf8a:	2b02      	cmp	r3, #2
 801cf8c:	d1f0      	bne.n	801cf70 <uxr_read_delete_session_status+0x14>
 801cf8e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801cf92:	7163      	strb	r3, [r4, #5]
 801cf94:	e7ec      	b.n	801cf70 <uxr_read_delete_session_status+0x14>
 801cf96:	bf00      	nop

0801cf98 <uxr_stamp_create_session_header>:
 801cf98:	b510      	push	{r4, lr}
 801cf9a:	2208      	movs	r2, #8
 801cf9c:	b08a      	sub	sp, #40	@ 0x28
 801cf9e:	4604      	mov	r4, r0
 801cfa0:	eb0d 0002 	add.w	r0, sp, r2
 801cfa4:	f7f6 fe5e 	bl	8013c64 <ucdr_init_buffer>
 801cfa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cfac:	2300      	movs	r3, #0
 801cfae:	a802      	add	r0, sp, #8
 801cfb0:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801cfb4:	9400      	str	r4, [sp, #0]
 801cfb6:	461a      	mov	r2, r3
 801cfb8:	f000 fef2 	bl	801dda0 <uxr_serialize_message_header>
 801cfbc:	b00a      	add	sp, #40	@ 0x28
 801cfbe:	bd10      	pop	{r4, pc}

0801cfc0 <uxr_stamp_session_header>:
 801cfc0:	b530      	push	{r4, r5, lr}
 801cfc2:	b08d      	sub	sp, #52	@ 0x34
 801cfc4:	4604      	mov	r4, r0
 801cfc6:	460d      	mov	r5, r1
 801cfc8:	4619      	mov	r1, r3
 801cfca:	a804      	add	r0, sp, #16
 801cfcc:	9203      	str	r2, [sp, #12]
 801cfce:	2208      	movs	r2, #8
 801cfd0:	f7f6 fe48 	bl	8013c64 <ucdr_init_buffer>
 801cfd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cfd8:	9b03      	ldr	r3, [sp, #12]
 801cfda:	462a      	mov	r2, r5
 801cfdc:	a804      	add	r0, sp, #16
 801cfde:	9400      	str	r4, [sp, #0]
 801cfe0:	f000 fede 	bl	801dda0 <uxr_serialize_message_header>
 801cfe4:	b00d      	add	sp, #52	@ 0x34
 801cfe6:	bd30      	pop	{r4, r5, pc}

0801cfe8 <uxr_read_session_header>:
 801cfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfec:	4607      	mov	r7, r0
 801cfee:	b084      	sub	sp, #16
 801cff0:	4608      	mov	r0, r1
 801cff2:	460c      	mov	r4, r1
 801cff4:	4615      	mov	r5, r2
 801cff6:	461e      	mov	r6, r3
 801cff8:	f7f6 fe66 	bl	8013cc8 <ucdr_buffer_remaining>
 801cffc:	2808      	cmp	r0, #8
 801cffe:	d803      	bhi.n	801d008 <uxr_read_session_header+0x20>
 801d000:	2000      	movs	r0, #0
 801d002:	b004      	add	sp, #16
 801d004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d008:	f10d 080c 	add.w	r8, sp, #12
 801d00c:	4633      	mov	r3, r6
 801d00e:	462a      	mov	r2, r5
 801d010:	4620      	mov	r0, r4
 801d012:	f10d 010b 	add.w	r1, sp, #11
 801d016:	f8cd 8000 	str.w	r8, [sp]
 801d01a:	f000 fedf 	bl	801dddc <uxr_deserialize_message_header>
 801d01e:	783a      	ldrb	r2, [r7, #0]
 801d020:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801d024:	4293      	cmp	r3, r2
 801d026:	d1eb      	bne.n	801d000 <uxr_read_session_header+0x18>
 801d028:	061b      	lsls	r3, r3, #24
 801d02a:	d41b      	bmi.n	801d064 <uxr_read_session_header+0x7c>
 801d02c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801d030:	787b      	ldrb	r3, [r7, #1]
 801d032:	429a      	cmp	r2, r3
 801d034:	d003      	beq.n	801d03e <uxr_read_session_header+0x56>
 801d036:	2001      	movs	r0, #1
 801d038:	f080 0001 	eor.w	r0, r0, #1
 801d03c:	e7e1      	b.n	801d002 <uxr_read_session_header+0x1a>
 801d03e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801d042:	1cb8      	adds	r0, r7, #2
 801d044:	78bb      	ldrb	r3, [r7, #2]
 801d046:	429a      	cmp	r2, r3
 801d048:	d1f5      	bne.n	801d036 <uxr_read_session_header+0x4e>
 801d04a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801d04e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801d052:	429a      	cmp	r2, r3
 801d054:	d1ef      	bne.n	801d036 <uxr_read_session_header+0x4e>
 801d056:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801d05a:	7843      	ldrb	r3, [r0, #1]
 801d05c:	429a      	cmp	r2, r3
 801d05e:	d1ea      	bne.n	801d036 <uxr_read_session_header+0x4e>
 801d060:	2000      	movs	r0, #0
 801d062:	e7e9      	b.n	801d038 <uxr_read_session_header+0x50>
 801d064:	2001      	movs	r0, #1
 801d066:	e7cc      	b.n	801d002 <uxr_read_session_header+0x1a>

0801d068 <uxr_session_header_offset>:
 801d068:	f990 3000 	ldrsb.w	r3, [r0]
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	bfac      	ite	ge
 801d070:	2008      	movge	r0, #8
 801d072:	2004      	movlt	r0, #4
 801d074:	4770      	bx	lr
 801d076:	bf00      	nop

0801d078 <uxr_init_base_object_request>:
 801d078:	b510      	push	{r4, lr}
 801d07a:	b082      	sub	sp, #8
 801d07c:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801d080:	9101      	str	r1, [sp, #4]
 801d082:	88c3      	ldrh	r3, [r0, #6]
 801d084:	f1a3 010a 	sub.w	r1, r3, #10
 801d088:	b289      	uxth	r1, r1
 801d08a:	42a1      	cmp	r1, r4
 801d08c:	d80f      	bhi.n	801d0ae <uxr_init_base_object_request+0x36>
 801d08e:	3301      	adds	r3, #1
 801d090:	b29c      	uxth	r4, r3
 801d092:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801d096:	b2db      	uxtb	r3, r3
 801d098:	80c4      	strh	r4, [r0, #6]
 801d09a:	1c91      	adds	r1, r2, #2
 801d09c:	9801      	ldr	r0, [sp, #4]
 801d09e:	f882 c000 	strb.w	ip, [r2]
 801d0a2:	7053      	strb	r3, [r2, #1]
 801d0a4:	f7fe fe44 	bl	801bd30 <uxr_object_id_to_raw>
 801d0a8:	4620      	mov	r0, r4
 801d0aa:	b002      	add	sp, #8
 801d0ac:	bd10      	pop	{r4, pc}
 801d0ae:	230a      	movs	r3, #10
 801d0b0:	f04f 0c00 	mov.w	ip, #0
 801d0b4:	461c      	mov	r4, r3
 801d0b6:	e7ef      	b.n	801d098 <uxr_init_base_object_request+0x20>

0801d0b8 <uxr_parse_base_object_request>:
 801d0b8:	b570      	push	{r4, r5, r6, lr}
 801d0ba:	4604      	mov	r4, r0
 801d0bc:	3002      	adds	r0, #2
 801d0be:	460d      	mov	r5, r1
 801d0c0:	4616      	mov	r6, r2
 801d0c2:	f7fe fe21 	bl	801bd08 <uxr_object_id_from_raw>
 801d0c6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801d0ca:	8028      	strh	r0, [r5, #0]
 801d0cc:	806b      	strh	r3, [r5, #2]
 801d0ce:	7822      	ldrb	r2, [r4, #0]
 801d0d0:	7863      	ldrb	r3, [r4, #1]
 801d0d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801d0d6:	8033      	strh	r3, [r6, #0]
 801d0d8:	bd70      	pop	{r4, r5, r6, pc}
 801d0da:	bf00      	nop

0801d0dc <uxr_init_framing_io>:
 801d0dc:	2300      	movs	r3, #0
 801d0de:	7041      	strb	r1, [r0, #1]
 801d0e0:	7003      	strb	r3, [r0, #0]
 801d0e2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801d0e4:	4770      	bx	lr
 801d0e6:	bf00      	nop

0801d0e8 <uxr_write_framed_msg>:
 801d0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0ec:	4617      	mov	r7, r2
 801d0ee:	7842      	ldrb	r2, [r0, #1]
 801d0f0:	460e      	mov	r6, r1
 801d0f2:	b083      	sub	sp, #12
 801d0f4:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801d0f8:	469b      	mov	fp, r3
 801d0fa:	237e      	movs	r3, #126	@ 0x7e
 801d0fc:	4604      	mov	r4, r0
 801d0fe:	2901      	cmp	r1, #1
 801d100:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801d104:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801d108:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801d10c:	f240 8115 	bls.w	801d33a <uxr_write_framed_msg+0x252>
 801d110:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801d114:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801d118:	2202      	movs	r2, #2
 801d11a:	2901      	cmp	r1, #1
 801d11c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801d120:	d952      	bls.n	801d1c8 <uxr_write_framed_msg+0xe0>
 801d122:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d124:	2103      	movs	r1, #3
 801d126:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801d12a:	b2dd      	uxtb	r5, r3
 801d12c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801d130:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801d134:	2a01      	cmp	r2, #1
 801d136:	d95c      	bls.n	801d1f2 <uxr_write_framed_msg+0x10a>
 801d138:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d13a:	1862      	adds	r2, r4, r1
 801d13c:	3101      	adds	r1, #1
 801d13e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801d142:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 801d146:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801d14a:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801d14e:	2a01      	cmp	r2, #1
 801d150:	d961      	bls.n	801d216 <uxr_write_framed_msg+0x12e>
 801d152:	1c4a      	adds	r2, r1, #1
 801d154:	4421      	add	r1, r4
 801d156:	b2d2      	uxtb	r2, r2
 801d158:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801d15c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801d160:	2b00      	cmp	r3, #0
 801d162:	d06a      	beq.n	801d23a <uxr_write_framed_msg+0x152>
 801d164:	f04f 0800 	mov.w	r8, #0
 801d168:	46c1      	mov	r9, r8
 801d16a:	e016      	b.n	801d19a <uxr_write_framed_msg+0xb2>
 801d16c:	2a29      	cmp	r2, #41	@ 0x29
 801d16e:	d868      	bhi.n	801d242 <uxr_write_framed_msg+0x15a>
 801d170:	18a0      	adds	r0, r4, r2
 801d172:	3201      	adds	r2, #1
 801d174:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801d178:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801d17c:	ea88 0101 	eor.w	r1, r8, r1
 801d180:	4b7d      	ldr	r3, [pc, #500]	@ (801d378 <uxr_write_framed_msg+0x290>)
 801d182:	f109 0901 	add.w	r9, r9, #1
 801d186:	b2c9      	uxtb	r1, r1
 801d188:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801d18c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801d190:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d192:	454b      	cmp	r3, r9
 801d194:	d969      	bls.n	801d26a <uxr_write_framed_msg+0x182>
 801d196:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801d19a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801d19e:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801d1a2:	2801      	cmp	r0, #1
 801d1a4:	d8e2      	bhi.n	801d16c <uxr_write_framed_msg+0x84>
 801d1a6:	1c50      	adds	r0, r2, #1
 801d1a8:	b2c0      	uxtb	r0, r0
 801d1aa:	2829      	cmp	r0, #41	@ 0x29
 801d1ac:	d849      	bhi.n	801d242 <uxr_write_framed_msg+0x15a>
 801d1ae:	18a0      	adds	r0, r4, r2
 801d1b0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801d1b4:	3202      	adds	r2, #2
 801d1b6:	f081 0520 	eor.w	r5, r1, #32
 801d1ba:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801d1be:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801d1c2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801d1c6:	e7d9      	b.n	801d17c <uxr_write_framed_msg+0x94>
 801d1c8:	2104      	movs	r1, #4
 801d1ca:	f04f 0c03 	mov.w	ip, #3
 801d1ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d1d0:	4422      	add	r2, r4
 801d1d2:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801d1d6:	44a4      	add	ip, r4
 801d1d8:	b2dd      	uxtb	r5, r3
 801d1da:	f080 0020 	eor.w	r0, r0, #32
 801d1de:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 801d1e2:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801d1e6:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801d1ea:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801d1ee:	2a01      	cmp	r2, #1
 801d1f0:	d8a2      	bhi.n	801d138 <uxr_write_framed_msg+0x50>
 801d1f2:	1862      	adds	r2, r4, r1
 801d1f4:	207d      	movs	r0, #125	@ 0x7d
 801d1f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d1f8:	f085 0520 	eor.w	r5, r5, #32
 801d1fc:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 801d200:	3102      	adds	r1, #2
 801d202:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801d206:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 801d20a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801d20e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801d212:	2a01      	cmp	r2, #1
 801d214:	d89d      	bhi.n	801d152 <uxr_write_framed_msg+0x6a>
 801d216:	1c4d      	adds	r5, r1, #1
 801d218:	1c8a      	adds	r2, r1, #2
 801d21a:	f080 0020 	eor.w	r0, r0, #32
 801d21e:	4421      	add	r1, r4
 801d220:	fa54 f585 	uxtab	r5, r4, r5
 801d224:	b2d2      	uxtb	r2, r2
 801d226:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801d22a:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801d22e:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 801d232:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801d236:	2b00      	cmp	r3, #0
 801d238:	d194      	bne.n	801d164 <uxr_write_framed_msg+0x7c>
 801d23a:	4619      	mov	r1, r3
 801d23c:	f8ad 3004 	strh.w	r3, [sp, #4]
 801d240:	e019      	b.n	801d276 <uxr_write_framed_msg+0x18e>
 801d242:	2500      	movs	r5, #0
 801d244:	e000      	b.n	801d248 <uxr_write_framed_msg+0x160>
 801d246:	b160      	cbz	r0, 801d262 <uxr_write_framed_msg+0x17a>
 801d248:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801d24c:	1b52      	subs	r2, r2, r5
 801d24e:	4653      	mov	r3, sl
 801d250:	4638      	mov	r0, r7
 801d252:	4421      	add	r1, r4
 801d254:	47b0      	blx	r6
 801d256:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801d25a:	4405      	add	r5, r0
 801d25c:	4295      	cmp	r5, r2
 801d25e:	d3f2      	bcc.n	801d246 <uxr_write_framed_msg+0x15e>
 801d260:	d066      	beq.n	801d330 <uxr_write_framed_msg+0x248>
 801d262:	2000      	movs	r0, #0
 801d264:	b003      	add	sp, #12
 801d266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d26a:	fa5f f188 	uxtb.w	r1, r8
 801d26e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801d272:	f8ad 8004 	strh.w	r8, [sp, #4]
 801d276:	f04f 0900 	mov.w	r9, #0
 801d27a:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801d27e:	46c8      	mov	r8, r9
 801d280:	e013      	b.n	801d2aa <uxr_write_framed_msg+0x1c2>
 801d282:	2a29      	cmp	r2, #41	@ 0x29
 801d284:	d824      	bhi.n	801d2d0 <uxr_write_framed_msg+0x1e8>
 801d286:	18a3      	adds	r3, r4, r2
 801d288:	3201      	adds	r2, #1
 801d28a:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801d28e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801d292:	f109 0901 	add.w	r9, r9, #1
 801d296:	f1b9 0f02 	cmp.w	r9, #2
 801d29a:	d02d      	beq.n	801d2f8 <uxr_write_framed_msg+0x210>
 801d29c:	f109 0308 	add.w	r3, r9, #8
 801d2a0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801d2a4:	446b      	add	r3, sp
 801d2a6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801d2aa:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801d2ae:	2b01      	cmp	r3, #1
 801d2b0:	d8e7      	bhi.n	801d282 <uxr_write_framed_msg+0x19a>
 801d2b2:	1c53      	adds	r3, r2, #1
 801d2b4:	b2db      	uxtb	r3, r3
 801d2b6:	2b29      	cmp	r3, #41	@ 0x29
 801d2b8:	d80a      	bhi.n	801d2d0 <uxr_write_framed_msg+0x1e8>
 801d2ba:	18a3      	adds	r3, r4, r2
 801d2bc:	f081 0120 	eor.w	r1, r1, #32
 801d2c0:	3202      	adds	r2, #2
 801d2c2:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 801d2c6:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 801d2ca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801d2ce:	e7e0      	b.n	801d292 <uxr_write_framed_msg+0x1aa>
 801d2d0:	2500      	movs	r5, #0
 801d2d2:	e001      	b.n	801d2d8 <uxr_write_framed_msg+0x1f0>
 801d2d4:	2800      	cmp	r0, #0
 801d2d6:	d0c4      	beq.n	801d262 <uxr_write_framed_msg+0x17a>
 801d2d8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801d2dc:	1b52      	subs	r2, r2, r5
 801d2de:	4653      	mov	r3, sl
 801d2e0:	4638      	mov	r0, r7
 801d2e2:	4421      	add	r1, r4
 801d2e4:	47b0      	blx	r6
 801d2e6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801d2ea:	4405      	add	r5, r0
 801d2ec:	4295      	cmp	r5, r2
 801d2ee:	d3f1      	bcc.n	801d2d4 <uxr_write_framed_msg+0x1ec>
 801d2f0:	d1b7      	bne.n	801d262 <uxr_write_framed_msg+0x17a>
 801d2f2:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 801d2f6:	e7d1      	b.n	801d29c <uxr_write_framed_msg+0x1b4>
 801d2f8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801d2fc:	b19a      	cbz	r2, 801d326 <uxr_write_framed_msg+0x23e>
 801d2fe:	2500      	movs	r5, #0
 801d300:	e001      	b.n	801d306 <uxr_write_framed_msg+0x21e>
 801d302:	2800      	cmp	r0, #0
 801d304:	d0ad      	beq.n	801d262 <uxr_write_framed_msg+0x17a>
 801d306:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801d30a:	1b52      	subs	r2, r2, r5
 801d30c:	4653      	mov	r3, sl
 801d30e:	4638      	mov	r0, r7
 801d310:	4421      	add	r1, r4
 801d312:	47b0      	blx	r6
 801d314:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801d318:	4405      	add	r5, r0
 801d31a:	4295      	cmp	r5, r2
 801d31c:	d3f1      	bcc.n	801d302 <uxr_write_framed_msg+0x21a>
 801d31e:	d1a0      	bne.n	801d262 <uxr_write_framed_msg+0x17a>
 801d320:	2300      	movs	r3, #0
 801d322:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801d326:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d328:	b298      	uxth	r0, r3
 801d32a:	b003      	add	sp, #12
 801d32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d330:	f04f 0300 	mov.w	r3, #0
 801d334:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801d338:	e72a      	b.n	801d190 <uxr_write_framed_msg+0xa8>
 801d33a:	217d      	movs	r1, #125	@ 0x7d
 801d33c:	f082 0220 	eor.w	r2, r2, #32
 801d340:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801d344:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801d348:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801d34c:	2203      	movs	r2, #3
 801d34e:	2901      	cmp	r1, #1
 801d350:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801d354:	d803      	bhi.n	801d35e <uxr_write_framed_msg+0x276>
 801d356:	2105      	movs	r1, #5
 801d358:	f04f 0c04 	mov.w	ip, #4
 801d35c:	e737      	b.n	801d1ce <uxr_write_framed_msg+0xe6>
 801d35e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d360:	2104      	movs	r1, #4
 801d362:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801d366:	b2dd      	uxtb	r5, r3
 801d368:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801d36c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801d370:	2a01      	cmp	r2, #1
 801d372:	f63f aee1 	bhi.w	801d138 <uxr_write_framed_msg+0x50>
 801d376:	e73c      	b.n	801d1f2 <uxr_write_framed_msg+0x10a>
 801d378:	080242ac 	.word	0x080242ac

0801d37c <uxr_framing_read_transport>:
 801d37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d380:	4604      	mov	r4, r0
 801d382:	b085      	sub	sp, #20
 801d384:	4692      	mov	sl, r2
 801d386:	4689      	mov	r9, r1
 801d388:	461d      	mov	r5, r3
 801d38a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801d38c:	f000 fca6 	bl	801dcdc <uxr_millis>
 801d390:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801d394:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 801d398:	4680      	mov	r8, r0
 801d39a:	42ba      	cmp	r2, r7
 801d39c:	d05f      	beq.n	801d45e <uxr_framing_read_transport+0xe2>
 801d39e:	d817      	bhi.n	801d3d0 <uxr_framing_read_transport+0x54>
 801d3a0:	3f01      	subs	r7, #1
 801d3a2:	1aba      	subs	r2, r7, r2
 801d3a4:	2700      	movs	r7, #0
 801d3a6:	b2d2      	uxtb	r2, r2
 801d3a8:	42b2      	cmp	r2, r6
 801d3aa:	d81a      	bhi.n	801d3e2 <uxr_framing_read_transport+0x66>
 801d3ac:	19d3      	adds	r3, r2, r7
 801d3ae:	42b3      	cmp	r3, r6
 801d3b0:	d852      	bhi.n	801d458 <uxr_framing_read_transport+0xdc>
 801d3b2:	b9d2      	cbnz	r2, 801d3ea <uxr_framing_read_transport+0x6e>
 801d3b4:	2600      	movs	r6, #0
 801d3b6:	f000 fc91 	bl	801dcdc <uxr_millis>
 801d3ba:	682b      	ldr	r3, [r5, #0]
 801d3bc:	eba0 0008 	sub.w	r0, r0, r8
 801d3c0:	1a1b      	subs	r3, r3, r0
 801d3c2:	4630      	mov	r0, r6
 801d3c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d3c8:	602b      	str	r3, [r5, #0]
 801d3ca:	b005      	add	sp, #20
 801d3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3d0:	2f00      	cmp	r7, #0
 801d3d2:	d060      	beq.n	801d496 <uxr_framing_read_transport+0x11a>
 801d3d4:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 801d3d8:	3f01      	subs	r7, #1
 801d3da:	b2d2      	uxtb	r2, r2
 801d3dc:	b2ff      	uxtb	r7, r7
 801d3de:	42b2      	cmp	r2, r6
 801d3e0:	d9e4      	bls.n	801d3ac <uxr_framing_read_transport+0x30>
 801d3e2:	b2f2      	uxtb	r2, r6
 801d3e4:	2700      	movs	r7, #0
 801d3e6:	2a00      	cmp	r2, #0
 801d3e8:	d0e4      	beq.n	801d3b4 <uxr_framing_read_transport+0x38>
 801d3ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d3ec:	4650      	mov	r0, sl
 801d3ee:	9203      	str	r2, [sp, #12]
 801d3f0:	9300      	str	r3, [sp, #0]
 801d3f2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801d3f6:	682b      	ldr	r3, [r5, #0]
 801d3f8:	3102      	adds	r1, #2
 801d3fa:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 801d4a0 <uxr_framing_read_transport+0x124>
 801d3fe:	4421      	add	r1, r4
 801d400:	47c8      	blx	r9
 801d402:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801d406:	4606      	mov	r6, r0
 801d408:	4403      	add	r3, r0
 801d40a:	0859      	lsrs	r1, r3, #1
 801d40c:	fbab 2101 	umull	r2, r1, fp, r1
 801d410:	222a      	movs	r2, #42	@ 0x2a
 801d412:	0889      	lsrs	r1, r1, #2
 801d414:	fb02 3111 	mls	r1, r2, r1, r3
 801d418:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801d41c:	2800      	cmp	r0, #0
 801d41e:	d0c9      	beq.n	801d3b4 <uxr_framing_read_transport+0x38>
 801d420:	9a03      	ldr	r2, [sp, #12]
 801d422:	4290      	cmp	r0, r2
 801d424:	d1c7      	bne.n	801d3b6 <uxr_framing_read_transport+0x3a>
 801d426:	2f00      	cmp	r7, #0
 801d428:	d0c5      	beq.n	801d3b6 <uxr_framing_read_transport+0x3a>
 801d42a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d42c:	3102      	adds	r1, #2
 801d42e:	463a      	mov	r2, r7
 801d430:	4650      	mov	r0, sl
 801d432:	4421      	add	r1, r4
 801d434:	9300      	str	r3, [sp, #0]
 801d436:	2300      	movs	r3, #0
 801d438:	47c8      	blx	r9
 801d43a:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801d43e:	4406      	add	r6, r0
 801d440:	1813      	adds	r3, r2, r0
 801d442:	085a      	lsrs	r2, r3, #1
 801d444:	fbab 1b02 	umull	r1, fp, fp, r2
 801d448:	222a      	movs	r2, #42	@ 0x2a
 801d44a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801d44e:	fb02 331b 	mls	r3, r2, fp, r3
 801d452:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801d456:	e7ae      	b.n	801d3b6 <uxr_framing_read_transport+0x3a>
 801d458:	1ab6      	subs	r6, r6, r2
 801d45a:	b2f7      	uxtb	r7, r6
 801d45c:	e7a9      	b.n	801d3b2 <uxr_framing_read_transport+0x36>
 801d45e:	2300      	movs	r3, #0
 801d460:	2e28      	cmp	r6, #40	@ 0x28
 801d462:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 801d464:	d9bd      	bls.n	801d3e2 <uxr_framing_read_transport+0x66>
 801d466:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d468:	2229      	movs	r2, #41	@ 0x29
 801d46a:	1ca1      	adds	r1, r4, #2
 801d46c:	4650      	mov	r0, sl
 801d46e:	9300      	str	r3, [sp, #0]
 801d470:	682b      	ldr	r3, [r5, #0]
 801d472:	47c8      	blx	r9
 801d474:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801d478:	4606      	mov	r6, r0
 801d47a:	212a      	movs	r1, #42	@ 0x2a
 801d47c:	4403      	add	r3, r0
 801d47e:	4808      	ldr	r0, [pc, #32]	@ (801d4a0 <uxr_framing_read_transport+0x124>)
 801d480:	085a      	lsrs	r2, r3, #1
 801d482:	fba0 0202 	umull	r0, r2, r0, r2
 801d486:	0892      	lsrs	r2, r2, #2
 801d488:	fb01 3312 	mls	r3, r1, r2, r3
 801d48c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801d490:	2e00      	cmp	r6, #0
 801d492:	d08f      	beq.n	801d3b4 <uxr_framing_read_transport+0x38>
 801d494:	e78f      	b.n	801d3b6 <uxr_framing_read_transport+0x3a>
 801d496:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 801d49a:	b2d2      	uxtb	r2, r2
 801d49c:	e784      	b.n	801d3a8 <uxr_framing_read_transport+0x2c>
 801d49e:	bf00      	nop
 801d4a0:	30c30c31 	.word	0x30c30c31

0801d4a4 <uxr_read_framed_msg>:
 801d4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4a8:	461e      	mov	r6, r3
 801d4aa:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801d4ae:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801d4b2:	b083      	sub	sp, #12
 801d4b4:	4604      	mov	r4, r0
 801d4b6:	4688      	mov	r8, r1
 801d4b8:	429d      	cmp	r5, r3
 801d4ba:	4691      	mov	r9, r2
 801d4bc:	f000 818c 	beq.w	801d7d8 <uxr_read_framed_msg+0x334>
 801d4c0:	7823      	ldrb	r3, [r4, #0]
 801d4c2:	4dc3      	ldr	r5, [pc, #780]	@ (801d7d0 <uxr_read_framed_msg+0x32c>)
 801d4c4:	4fc3      	ldr	r7, [pc, #780]	@ (801d7d4 <uxr_read_framed_msg+0x330>)
 801d4c6:	2b07      	cmp	r3, #7
 801d4c8:	d8fd      	bhi.n	801d4c6 <uxr_read_framed_msg+0x22>
 801d4ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d4ce:	011c      	.short	0x011c
 801d4d0:	00d900fb 	.word	0x00d900fb
 801d4d4:	008f00ba 	.word	0x008f00ba
 801d4d8:	00320051 	.word	0x00320051
 801d4dc:	0008      	.short	0x0008
 801d4de:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801d4e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801d4e6:	4299      	cmp	r1, r3
 801d4e8:	f000 814d 	beq.w	801d786 <uxr_read_framed_msg+0x2e2>
 801d4ec:	18e2      	adds	r2, r4, r3
 801d4ee:	7892      	ldrb	r2, [r2, #2]
 801d4f0:	2a7d      	cmp	r2, #125	@ 0x7d
 801d4f2:	f000 81b8 	beq.w	801d866 <uxr_read_framed_msg+0x3c2>
 801d4f6:	3301      	adds	r3, #1
 801d4f8:	212a      	movs	r1, #42	@ 0x2a
 801d4fa:	2a7e      	cmp	r2, #126	@ 0x7e
 801d4fc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801d500:	fba5 c000 	umull	ip, r0, r5, r0
 801d504:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801d508:	fb01 3310 	mls	r3, r1, r0, r3
 801d50c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d510:	f000 8257 	beq.w	801d9c2 <uxr_read_framed_msg+0x51e>
 801d514:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801d516:	2000      	movs	r0, #0
 801d518:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801d51a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801d51e:	7020      	strb	r0, [r4, #0]
 801d520:	b29b      	uxth	r3, r3
 801d522:	4299      	cmp	r1, r3
 801d524:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801d526:	f000 8178 	beq.w	801d81a <uxr_read_framed_msg+0x376>
 801d52a:	2000      	movs	r0, #0
 801d52c:	b003      	add	sp, #12
 801d52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d532:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801d536:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801d53a:	4298      	cmp	r0, r3
 801d53c:	f000 8132 	beq.w	801d7a4 <uxr_read_framed_msg+0x300>
 801d540:	18e2      	adds	r2, r4, r3
 801d542:	7891      	ldrb	r1, [r2, #2]
 801d544:	297d      	cmp	r1, #125	@ 0x7d
 801d546:	f000 8170 	beq.w	801d82a <uxr_read_framed_msg+0x386>
 801d54a:	3301      	adds	r3, #1
 801d54c:	202a      	movs	r0, #42	@ 0x2a
 801d54e:	297e      	cmp	r1, #126	@ 0x7e
 801d550:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801d554:	fba5 c202 	umull	ip, r2, r5, r2
 801d558:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d55c:	fb00 3312 	mls	r3, r0, r2, r3
 801d560:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d564:	f000 821d 	beq.w	801d9a2 <uxr_read_framed_msg+0x4fe>
 801d568:	2307      	movs	r3, #7
 801d56a:	86a1      	strh	r1, [r4, #52]	@ 0x34
 801d56c:	7023      	strb	r3, [r4, #0]
 801d56e:	e7aa      	b.n	801d4c6 <uxr_read_framed_msg+0x22>
 801d570:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801d572:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801d576:	459e      	cmp	lr, r3
 801d578:	d827      	bhi.n	801d5ca <uxr_read_framed_msg+0x126>
 801d57a:	e032      	b.n	801d5e2 <uxr_read_framed_msg+0x13e>
 801d57c:	fba5 b101 	umull	fp, r1, r5, r1
 801d580:	f89c c002 	ldrb.w	ip, [ip, #2]
 801d584:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801d588:	0889      	lsrs	r1, r1, #2
 801d58a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801d58e:	fb0b 0111 	mls	r1, fp, r1, r0
 801d592:	f000 80d4 	beq.w	801d73e <uxr_read_framed_msg+0x29a>
 801d596:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801d59a:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801d59e:	f000 80cb 	beq.w	801d738 <uxr_read_framed_msg+0x294>
 801d5a2:	f806 c003 	strb.w	ip, [r6, r3]
 801d5a6:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801d5a8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801d5aa:	ea80 010c 	eor.w	r1, r0, ip
 801d5ae:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801d5b2:	3301      	adds	r3, #1
 801d5b4:	b2c9      	uxtb	r1, r1
 801d5b6:	b29b      	uxth	r3, r3
 801d5b8:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801d5bc:	4573      	cmp	r3, lr
 801d5be:	8663      	strh	r3, [r4, #50]	@ 0x32
 801d5c0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801d5c4:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801d5c6:	f080 811d 	bcs.w	801d804 <uxr_read_framed_msg+0x360>
 801d5ca:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801d5ce:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801d5d2:	1c50      	adds	r0, r2, #1
 801d5d4:	eb04 0c02 	add.w	ip, r4, r2
 801d5d8:	4592      	cmp	sl, r2
 801d5da:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801d5de:	d1cd      	bne.n	801d57c <uxr_read_framed_msg+0xd8>
 801d5e0:	459e      	cmp	lr, r3
 801d5e2:	f040 8114 	bne.w	801d80e <uxr_read_framed_msg+0x36a>
 801d5e6:	2306      	movs	r3, #6
 801d5e8:	7023      	strb	r3, [r4, #0]
 801d5ea:	e76c      	b.n	801d4c6 <uxr_read_framed_msg+0x22>
 801d5ec:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801d5f0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801d5f4:	4298      	cmp	r0, r3
 801d5f6:	f000 80c6 	beq.w	801d786 <uxr_read_framed_msg+0x2e2>
 801d5fa:	18e2      	adds	r2, r4, r3
 801d5fc:	7891      	ldrb	r1, [r2, #2]
 801d5fe:	297d      	cmp	r1, #125	@ 0x7d
 801d600:	f000 8193 	beq.w	801d92a <uxr_read_framed_msg+0x486>
 801d604:	3301      	adds	r3, #1
 801d606:	202a      	movs	r0, #42	@ 0x2a
 801d608:	297e      	cmp	r1, #126	@ 0x7e
 801d60a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801d60e:	fba5 c202 	umull	ip, r2, r5, r2
 801d612:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d616:	fb00 3312 	mls	r3, r0, r2, r3
 801d61a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d61e:	f000 81d0 	beq.w	801d9c2 <uxr_read_framed_msg+0x51e>
 801d622:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801d624:	2000      	movs	r0, #0
 801d626:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801d62a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801d62c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801d62e:	b29b      	uxth	r3, r3
 801d630:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801d632:	428b      	cmp	r3, r1
 801d634:	8623      	strh	r3, [r4, #48]	@ 0x30
 801d636:	f240 80e2 	bls.w	801d7fe <uxr_read_framed_msg+0x35a>
 801d63a:	7020      	strb	r0, [r4, #0]
 801d63c:	b003      	add	sp, #12
 801d63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d642:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801d646:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801d64a:	4298      	cmp	r0, r3
 801d64c:	f000 80aa 	beq.w	801d7a4 <uxr_read_framed_msg+0x300>
 801d650:	18e2      	adds	r2, r4, r3
 801d652:	7891      	ldrb	r1, [r2, #2]
 801d654:	297d      	cmp	r1, #125	@ 0x7d
 801d656:	f000 8186 	beq.w	801d966 <uxr_read_framed_msg+0x4c2>
 801d65a:	3301      	adds	r3, #1
 801d65c:	202a      	movs	r0, #42	@ 0x2a
 801d65e:	297e      	cmp	r1, #126	@ 0x7e
 801d660:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801d664:	fba5 c202 	umull	ip, r2, r5, r2
 801d668:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d66c:	fb00 3312 	mls	r3, r0, r2, r3
 801d670:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d674:	f000 8195 	beq.w	801d9a2 <uxr_read_framed_msg+0x4fe>
 801d678:	2304      	movs	r3, #4
 801d67a:	8621      	strh	r1, [r4, #48]	@ 0x30
 801d67c:	7023      	strb	r3, [r4, #0]
 801d67e:	e722      	b.n	801d4c6 <uxr_read_framed_msg+0x22>
 801d680:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801d684:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801d688:	4290      	cmp	r0, r2
 801d68a:	f000 80b4 	beq.w	801d7f6 <uxr_read_framed_msg+0x352>
 801d68e:	18a3      	adds	r3, r4, r2
 801d690:	7899      	ldrb	r1, [r3, #2]
 801d692:	297d      	cmp	r1, #125	@ 0x7d
 801d694:	f000 8107 	beq.w	801d8a6 <uxr_read_framed_msg+0x402>
 801d698:	3201      	adds	r2, #1
 801d69a:	232a      	movs	r3, #42	@ 0x2a
 801d69c:	297e      	cmp	r1, #126	@ 0x7e
 801d69e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801d6a2:	fba5 c000 	umull	ip, r0, r5, r0
 801d6a6:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801d6aa:	fb03 2210 	mls	r2, r3, r0, r2
 801d6ae:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801d6b2:	f000 818a 	beq.w	801d9ca <uxr_read_framed_msg+0x526>
 801d6b6:	7863      	ldrb	r3, [r4, #1]
 801d6b8:	428b      	cmp	r3, r1
 801d6ba:	bf0c      	ite	eq
 801d6bc:	2303      	moveq	r3, #3
 801d6be:	2300      	movne	r3, #0
 801d6c0:	7023      	strb	r3, [r4, #0]
 801d6c2:	e700      	b.n	801d4c6 <uxr_read_framed_msg+0x22>
 801d6c4:	2300      	movs	r3, #0
 801d6c6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801d6ca:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801d6ce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801d6d2:	4299      	cmp	r1, r3
 801d6d4:	d06a      	beq.n	801d7ac <uxr_read_framed_msg+0x308>
 801d6d6:	18e2      	adds	r2, r4, r3
 801d6d8:	7890      	ldrb	r0, [r2, #2]
 801d6da:	287d      	cmp	r0, #125	@ 0x7d
 801d6dc:	f000 8100 	beq.w	801d8e0 <uxr_read_framed_msg+0x43c>
 801d6e0:	3301      	adds	r3, #1
 801d6e2:	212a      	movs	r1, #42	@ 0x2a
 801d6e4:	287e      	cmp	r0, #126	@ 0x7e
 801d6e6:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801d6ea:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801d6ee:	fba5 c202 	umull	ip, r2, r5, r2
 801d6f2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d6f6:	fb01 3312 	mls	r3, r1, r2, r3
 801d6fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d6fe:	d055      	beq.n	801d7ac <uxr_read_framed_msg+0x308>
 801d700:	2302      	movs	r3, #2
 801d702:	7023      	strb	r3, [r4, #0]
 801d704:	e6df      	b.n	801d4c6 <uxr_read_framed_msg+0x22>
 801d706:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 801d70a:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801d70e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801d712:	1c5a      	adds	r2, r3, #1
 801d714:	459c      	cmp	ip, r3
 801d716:	eb04 0103 	add.w	r1, r4, r3
 801d71a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801d71e:	f43f af04 	beq.w	801d52a <uxr_read_framed_msg+0x86>
 801d722:	fba5 0303 	umull	r0, r3, r5, r3
 801d726:	7889      	ldrb	r1, [r1, #2]
 801d728:	089b      	lsrs	r3, r3, #2
 801d72a:	297e      	cmp	r1, #126	@ 0x7e
 801d72c:	fb0e 2313 	mls	r3, lr, r3, r2
 801d730:	b2db      	uxtb	r3, r3
 801d732:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d736:	d1ec      	bne.n	801d712 <uxr_read_framed_msg+0x26e>
 801d738:	2301      	movs	r3, #1
 801d73a:	7023      	strb	r3, [r4, #0]
 801d73c:	e6c3      	b.n	801d4c6 <uxr_read_framed_msg+0x22>
 801d73e:	1c50      	adds	r0, r2, #1
 801d740:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801d744:	3202      	adds	r2, #2
 801d746:	0841      	lsrs	r1, r0, #1
 801d748:	fba5 c101 	umull	ip, r1, r5, r1
 801d74c:	0889      	lsrs	r1, r1, #2
 801d74e:	fb0b 0111 	mls	r1, fp, r1, r0
 801d752:	1860      	adds	r0, r4, r1
 801d754:	b2c9      	uxtb	r1, r1
 801d756:	458a      	cmp	sl, r1
 801d758:	f43f af42 	beq.w	801d5e0 <uxr_read_framed_msg+0x13c>
 801d75c:	0851      	lsrs	r1, r2, #1
 801d75e:	7880      	ldrb	r0, [r0, #2]
 801d760:	fba5 a101 	umull	sl, r1, r5, r1
 801d764:	287e      	cmp	r0, #126	@ 0x7e
 801d766:	f080 0c20 	eor.w	ip, r0, #32
 801d76a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801d76e:	fb0b 2211 	mls	r2, fp, r1, r2
 801d772:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801d776:	f47f af14 	bne.w	801d5a2 <uxr_read_framed_msg+0xfe>
 801d77a:	459e      	cmp	lr, r3
 801d77c:	f43f af33 	beq.w	801d5e6 <uxr_read_framed_msg+0x142>
 801d780:	2301      	movs	r3, #1
 801d782:	7023      	strb	r3, [r4, #0]
 801d784:	e69f      	b.n	801d4c6 <uxr_read_framed_msg+0x22>
 801d786:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d788:	9300      	str	r3, [sp, #0]
 801d78a:	2301      	movs	r3, #1
 801d78c:	9301      	str	r3, [sp, #4]
 801d78e:	464a      	mov	r2, r9
 801d790:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d792:	4641      	mov	r1, r8
 801d794:	4620      	mov	r0, r4
 801d796:	f7ff fdf1 	bl	801d37c <uxr_framing_read_transport>
 801d79a:	2800      	cmp	r0, #0
 801d79c:	f43f aec5 	beq.w	801d52a <uxr_read_framed_msg+0x86>
 801d7a0:	7823      	ldrb	r3, [r4, #0]
 801d7a2:	e690      	b.n	801d4c6 <uxr_read_framed_msg+0x22>
 801d7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7a6:	9300      	str	r3, [sp, #0]
 801d7a8:	2302      	movs	r3, #2
 801d7aa:	e7ef      	b.n	801d78c <uxr_read_framed_msg+0x2e8>
 801d7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7ae:	464a      	mov	r2, r9
 801d7b0:	4641      	mov	r1, r8
 801d7b2:	4620      	mov	r0, r4
 801d7b4:	9300      	str	r3, [sp, #0]
 801d7b6:	2304      	movs	r3, #4
 801d7b8:	9301      	str	r3, [sp, #4]
 801d7ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d7bc:	f7ff fdde 	bl	801d37c <uxr_framing_read_transport>
 801d7c0:	2800      	cmp	r0, #0
 801d7c2:	d1ed      	bne.n	801d7a0 <uxr_read_framed_msg+0x2fc>
 801d7c4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801d7c8:	2b7e      	cmp	r3, #126	@ 0x7e
 801d7ca:	d0e9      	beq.n	801d7a0 <uxr_read_framed_msg+0x2fc>
 801d7cc:	e6ad      	b.n	801d52a <uxr_read_framed_msg+0x86>
 801d7ce:	bf00      	nop
 801d7d0:	30c30c31 	.word	0x30c30c31
 801d7d4:	080242ac 	.word	0x080242ac
 801d7d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7da:	9300      	str	r3, [sp, #0]
 801d7dc:	2305      	movs	r3, #5
 801d7de:	9301      	str	r3, [sp, #4]
 801d7e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d7e2:	f7ff fdcb 	bl	801d37c <uxr_framing_read_transport>
 801d7e6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801d7ea:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801d7ee:	429a      	cmp	r2, r3
 801d7f0:	f43f ae9b 	beq.w	801d52a <uxr_read_framed_msg+0x86>
 801d7f4:	e664      	b.n	801d4c0 <uxr_read_framed_msg+0x1c>
 801d7f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7f8:	9300      	str	r3, [sp, #0]
 801d7fa:	2303      	movs	r3, #3
 801d7fc:	e7c6      	b.n	801d78c <uxr_read_framed_msg+0x2e8>
 801d7fe:	2305      	movs	r3, #5
 801d800:	7023      	strb	r3, [r4, #0]
 801d802:	e660      	b.n	801d4c6 <uxr_read_framed_msg+0x22>
 801d804:	f43f aeef 	beq.w	801d5e6 <uxr_read_framed_msg+0x142>
 801d808:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801d80c:	d094      	beq.n	801d738 <uxr_read_framed_msg+0x294>
 801d80e:	ebae 0303 	sub.w	r3, lr, r3
 801d812:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d814:	3302      	adds	r3, #2
 801d816:	9200      	str	r2, [sp, #0]
 801d818:	e7b8      	b.n	801d78c <uxr_read_framed_msg+0x2e8>
 801d81a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801d81e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d820:	7013      	strb	r3, [r2, #0]
 801d822:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801d824:	b003      	add	sp, #12
 801d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d82a:	1c59      	adds	r1, r3, #1
 801d82c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801d830:	084a      	lsrs	r2, r1, #1
 801d832:	fba5 e202 	umull	lr, r2, r5, r2
 801d836:	0892      	lsrs	r2, r2, #2
 801d838:	fb0c 1212 	mls	r2, ip, r2, r1
 801d83c:	b2d1      	uxtb	r1, r2
 801d83e:	4288      	cmp	r0, r1
 801d840:	d0b0      	beq.n	801d7a4 <uxr_read_framed_msg+0x300>
 801d842:	3302      	adds	r3, #2
 801d844:	4422      	add	r2, r4
 801d846:	7891      	ldrb	r1, [r2, #2]
 801d848:	085a      	lsrs	r2, r3, #1
 801d84a:	fba5 0202 	umull	r0, r2, r5, r2
 801d84e:	297e      	cmp	r1, #126	@ 0x7e
 801d850:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d854:	fb0c 3312 	mls	r3, ip, r2, r3
 801d858:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d85c:	f000 80a1 	beq.w	801d9a2 <uxr_read_framed_msg+0x4fe>
 801d860:	f081 0120 	eor.w	r1, r1, #32
 801d864:	e680      	b.n	801d568 <uxr_read_framed_msg+0xc4>
 801d866:	f103 0c01 	add.w	ip, r3, #1
 801d86a:	202a      	movs	r0, #42	@ 0x2a
 801d86c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801d870:	fba5 e202 	umull	lr, r2, r5, r2
 801d874:	0892      	lsrs	r2, r2, #2
 801d876:	fb00 c212 	mls	r2, r0, r2, ip
 801d87a:	fa5f fc82 	uxtb.w	ip, r2
 801d87e:	4561      	cmp	r1, ip
 801d880:	d081      	beq.n	801d786 <uxr_read_framed_msg+0x2e2>
 801d882:	3302      	adds	r3, #2
 801d884:	4422      	add	r2, r4
 801d886:	0859      	lsrs	r1, r3, #1
 801d888:	7892      	ldrb	r2, [r2, #2]
 801d88a:	fba5 c101 	umull	ip, r1, r5, r1
 801d88e:	2a7e      	cmp	r2, #126	@ 0x7e
 801d890:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801d894:	fb00 3311 	mls	r3, r0, r1, r3
 801d898:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d89c:	f000 8091 	beq.w	801d9c2 <uxr_read_framed_msg+0x51e>
 801d8a0:	f082 0220 	eor.w	r2, r2, #32
 801d8a4:	e636      	b.n	801d514 <uxr_read_framed_msg+0x70>
 801d8a6:	1c51      	adds	r1, r2, #1
 801d8a8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801d8ac:	084b      	lsrs	r3, r1, #1
 801d8ae:	fba5 e303 	umull	lr, r3, r5, r3
 801d8b2:	089b      	lsrs	r3, r3, #2
 801d8b4:	fb0c 1313 	mls	r3, ip, r3, r1
 801d8b8:	b2d9      	uxtb	r1, r3
 801d8ba:	4288      	cmp	r0, r1
 801d8bc:	d09b      	beq.n	801d7f6 <uxr_read_framed_msg+0x352>
 801d8be:	3202      	adds	r2, #2
 801d8c0:	4423      	add	r3, r4
 801d8c2:	0850      	lsrs	r0, r2, #1
 801d8c4:	789b      	ldrb	r3, [r3, #2]
 801d8c6:	fba5 1000 	umull	r1, r0, r5, r0
 801d8ca:	2b7e      	cmp	r3, #126	@ 0x7e
 801d8cc:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801d8d0:	fb0c 2210 	mls	r2, ip, r0, r2
 801d8d4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801d8d8:	d077      	beq.n	801d9ca <uxr_read_framed_msg+0x526>
 801d8da:	f083 0120 	eor.w	r1, r3, #32
 801d8de:	e6ea      	b.n	801d6b6 <uxr_read_framed_msg+0x212>
 801d8e0:	f103 0c01 	add.w	ip, r3, #1
 801d8e4:	202a      	movs	r0, #42	@ 0x2a
 801d8e6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801d8ea:	fba5 e202 	umull	lr, r2, r5, r2
 801d8ee:	0892      	lsrs	r2, r2, #2
 801d8f0:	fb00 c212 	mls	r2, r0, r2, ip
 801d8f4:	fa5f fc82 	uxtb.w	ip, r2
 801d8f8:	4561      	cmp	r1, ip
 801d8fa:	f43f af57 	beq.w	801d7ac <uxr_read_framed_msg+0x308>
 801d8fe:	3302      	adds	r3, #2
 801d900:	4422      	add	r2, r4
 801d902:	7891      	ldrb	r1, [r2, #2]
 801d904:	085a      	lsrs	r2, r3, #1
 801d906:	fba5 c202 	umull	ip, r2, r5, r2
 801d90a:	297e      	cmp	r1, #126	@ 0x7e
 801d90c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801d910:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d914:	fb00 3312 	mls	r3, r0, r2, r3
 801d918:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d91c:	f43f af46 	beq.w	801d7ac <uxr_read_framed_msg+0x308>
 801d920:	f081 0120 	eor.w	r1, r1, #32
 801d924:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801d928:	e6ea      	b.n	801d700 <uxr_read_framed_msg+0x25c>
 801d92a:	1c59      	adds	r1, r3, #1
 801d92c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801d930:	084a      	lsrs	r2, r1, #1
 801d932:	fba5 e202 	umull	lr, r2, r5, r2
 801d936:	0892      	lsrs	r2, r2, #2
 801d938:	fb0c 1212 	mls	r2, ip, r2, r1
 801d93c:	b2d1      	uxtb	r1, r2
 801d93e:	4288      	cmp	r0, r1
 801d940:	f43f af21 	beq.w	801d786 <uxr_read_framed_msg+0x2e2>
 801d944:	3302      	adds	r3, #2
 801d946:	4422      	add	r2, r4
 801d948:	7891      	ldrb	r1, [r2, #2]
 801d94a:	085a      	lsrs	r2, r3, #1
 801d94c:	fba5 0202 	umull	r0, r2, r5, r2
 801d950:	297e      	cmp	r1, #126	@ 0x7e
 801d952:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d956:	fb0c 3312 	mls	r3, ip, r2, r3
 801d95a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d95e:	d030      	beq.n	801d9c2 <uxr_read_framed_msg+0x51e>
 801d960:	f081 0120 	eor.w	r1, r1, #32
 801d964:	e65d      	b.n	801d622 <uxr_read_framed_msg+0x17e>
 801d966:	1c59      	adds	r1, r3, #1
 801d968:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801d96c:	084a      	lsrs	r2, r1, #1
 801d96e:	fba5 e202 	umull	lr, r2, r5, r2
 801d972:	0892      	lsrs	r2, r2, #2
 801d974:	fb0c 1212 	mls	r2, ip, r2, r1
 801d978:	b2d1      	uxtb	r1, r2
 801d97a:	4288      	cmp	r0, r1
 801d97c:	f43f af12 	beq.w	801d7a4 <uxr_read_framed_msg+0x300>
 801d980:	3302      	adds	r3, #2
 801d982:	4422      	add	r2, r4
 801d984:	7891      	ldrb	r1, [r2, #2]
 801d986:	085a      	lsrs	r2, r3, #1
 801d988:	fba5 0202 	umull	r0, r2, r5, r2
 801d98c:	297e      	cmp	r1, #126	@ 0x7e
 801d98e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801d992:	fb0c 3312 	mls	r3, ip, r2, r3
 801d996:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801d99a:	d002      	beq.n	801d9a2 <uxr_read_framed_msg+0x4fe>
 801d99c:	f081 0120 	eor.w	r1, r1, #32
 801d9a0:	e66a      	b.n	801d678 <uxr_read_framed_msg+0x1d4>
 801d9a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d9a4:	9300      	str	r3, [sp, #0]
 801d9a6:	2302      	movs	r3, #2
 801d9a8:	9301      	str	r3, [sp, #4]
 801d9aa:	464a      	mov	r2, r9
 801d9ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d9ae:	4641      	mov	r1, r8
 801d9b0:	4620      	mov	r0, r4
 801d9b2:	f7ff fce3 	bl	801d37c <uxr_framing_read_transport>
 801d9b6:	2800      	cmp	r0, #0
 801d9b8:	f47f aef2 	bne.w	801d7a0 <uxr_read_framed_msg+0x2fc>
 801d9bc:	2301      	movs	r3, #1
 801d9be:	7023      	strb	r3, [r4, #0]
 801d9c0:	e581      	b.n	801d4c6 <uxr_read_framed_msg+0x22>
 801d9c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d9c4:	9300      	str	r3, [sp, #0]
 801d9c6:	2301      	movs	r3, #1
 801d9c8:	e7ee      	b.n	801d9a8 <uxr_read_framed_msg+0x504>
 801d9ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d9cc:	9300      	str	r3, [sp, #0]
 801d9ce:	2303      	movs	r3, #3
 801d9d0:	e7ea      	b.n	801d9a8 <uxr_read_framed_msg+0x504>
 801d9d2:	bf00      	nop

0801d9d4 <uxr_stream_id>:
 801d9d4:	2901      	cmp	r1, #1
 801d9d6:	4684      	mov	ip, r0
 801d9d8:	b500      	push	{lr}
 801d9da:	b083      	sub	sp, #12
 801d9dc:	d01f      	beq.n	801da1e <uxr_stream_id+0x4a>
 801d9de:	2902      	cmp	r1, #2
 801d9e0:	f04f 0e00 	mov.w	lr, #0
 801d9e4:	d020      	beq.n	801da28 <uxr_stream_id+0x54>
 801d9e6:	2300      	movs	r3, #0
 801d9e8:	2000      	movs	r0, #0
 801d9ea:	f36e 0307 	bfi	r3, lr, #0, #8
 801d9ee:	f36c 230f 	bfi	r3, ip, #8, #8
 801d9f2:	f361 4317 	bfi	r3, r1, #16, #8
 801d9f6:	f362 631f 	bfi	r3, r2, #24, #8
 801d9fa:	fa5f fc83 	uxtb.w	ip, r3
 801d9fe:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801da02:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801da06:	0e1b      	lsrs	r3, r3, #24
 801da08:	f36c 0007 	bfi	r0, ip, #0, #8
 801da0c:	f361 200f 	bfi	r0, r1, #8, #8
 801da10:	f362 4017 	bfi	r0, r2, #16, #8
 801da14:	f363 601f 	bfi	r0, r3, #24, #8
 801da18:	b003      	add	sp, #12
 801da1a:	f85d fb04 	ldr.w	pc, [sp], #4
 801da1e:	f100 0e01 	add.w	lr, r0, #1
 801da22:	fa5f fe8e 	uxtb.w	lr, lr
 801da26:	e7de      	b.n	801d9e6 <uxr_stream_id+0x12>
 801da28:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 801da2c:	e7db      	b.n	801d9e6 <uxr_stream_id+0x12>
 801da2e:	bf00      	nop

0801da30 <uxr_stream_id_from_raw>:
 801da30:	b082      	sub	sp, #8
 801da32:	b130      	cbz	r0, 801da42 <uxr_stream_id_from_raw+0x12>
 801da34:	0603      	lsls	r3, r0, #24
 801da36:	d421      	bmi.n	801da7c <uxr_stream_id_from_raw+0x4c>
 801da38:	1e42      	subs	r2, r0, #1
 801da3a:	f04f 0c01 	mov.w	ip, #1
 801da3e:	b2d2      	uxtb	r2, r2
 801da40:	e001      	b.n	801da46 <uxr_stream_id_from_raw+0x16>
 801da42:	4684      	mov	ip, r0
 801da44:	4602      	mov	r2, r0
 801da46:	2300      	movs	r3, #0
 801da48:	f360 0307 	bfi	r3, r0, #0, #8
 801da4c:	2000      	movs	r0, #0
 801da4e:	f362 230f 	bfi	r3, r2, #8, #8
 801da52:	f36c 4317 	bfi	r3, ip, #16, #8
 801da56:	f361 631f 	bfi	r3, r1, #24, #8
 801da5a:	fa5f fc83 	uxtb.w	ip, r3
 801da5e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801da62:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801da66:	0e1b      	lsrs	r3, r3, #24
 801da68:	f36c 0007 	bfi	r0, ip, #0, #8
 801da6c:	f361 200f 	bfi	r0, r1, #8, #8
 801da70:	f362 4017 	bfi	r0, r2, #16, #8
 801da74:	f363 601f 	bfi	r0, r3, #24, #8
 801da78:	b002      	add	sp, #8
 801da7a:	4770      	bx	lr
 801da7c:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801da80:	f04f 0c02 	mov.w	ip, #2
 801da84:	e7df      	b.n	801da46 <uxr_stream_id_from_raw+0x16>
 801da86:	bf00      	nop

0801da88 <uxr_init_stream_storage>:
 801da88:	2300      	movs	r3, #0
 801da8a:	7403      	strb	r3, [r0, #16]
 801da8c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801da90:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801da94:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801da98:	4770      	bx	lr
 801da9a:	bf00      	nop

0801da9c <uxr_reset_stream_storage>:
 801da9c:	b570      	push	{r4, r5, r6, lr}
 801da9e:	7c03      	ldrb	r3, [r0, #16]
 801daa0:	4604      	mov	r4, r0
 801daa2:	b14b      	cbz	r3, 801dab8 <uxr_reset_stream_storage+0x1c>
 801daa4:	4606      	mov	r6, r0
 801daa6:	2500      	movs	r5, #0
 801daa8:	4630      	mov	r0, r6
 801daaa:	3501      	adds	r5, #1
 801daac:	f002 fa42 	bl	801ff34 <uxr_reset_output_best_effort_stream>
 801dab0:	7c23      	ldrb	r3, [r4, #16]
 801dab2:	3610      	adds	r6, #16
 801dab4:	42ab      	cmp	r3, r5
 801dab6:	d8f7      	bhi.n	801daa8 <uxr_reset_stream_storage+0xc>
 801dab8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801dabc:	b15b      	cbz	r3, 801dad6 <uxr_reset_stream_storage+0x3a>
 801dabe:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dac2:	2500      	movs	r5, #0
 801dac4:	4630      	mov	r0, r6
 801dac6:	3501      	adds	r5, #1
 801dac8:	f002 f83a 	bl	801fb40 <uxr_reset_input_best_effort_stream>
 801dacc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801dad0:	3602      	adds	r6, #2
 801dad2:	42ab      	cmp	r3, r5
 801dad4:	d8f6      	bhi.n	801dac4 <uxr_reset_stream_storage+0x28>
 801dad6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801dada:	b15b      	cbz	r3, 801daf4 <uxr_reset_stream_storage+0x58>
 801dadc:	f104 0618 	add.w	r6, r4, #24
 801dae0:	2500      	movs	r5, #0
 801dae2:	4630      	mov	r0, r6
 801dae4:	3501      	adds	r5, #1
 801dae6:	f002 fad3 	bl	8020090 <uxr_reset_output_reliable_stream>
 801daea:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801daee:	3628      	adds	r6, #40	@ 0x28
 801daf0:	42ab      	cmp	r3, r5
 801daf2:	d8f6      	bhi.n	801dae2 <uxr_reset_stream_storage+0x46>
 801daf4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801daf8:	b15b      	cbz	r3, 801db12 <uxr_reset_stream_storage+0x76>
 801dafa:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801dafe:	2500      	movs	r5, #0
 801db00:	4630      	mov	r0, r6
 801db02:	3501      	adds	r5, #1
 801db04:	f002 f888 	bl	801fc18 <uxr_reset_input_reliable_stream>
 801db08:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801db0c:	3618      	adds	r6, #24
 801db0e:	42ab      	cmp	r3, r5
 801db10:	d8f6      	bhi.n	801db00 <uxr_reset_stream_storage+0x64>
 801db12:	bd70      	pop	{r4, r5, r6, pc}

0801db14 <uxr_add_output_best_effort_buffer>:
 801db14:	b510      	push	{r4, lr}
 801db16:	7c04      	ldrb	r4, [r0, #16]
 801db18:	b082      	sub	sp, #8
 801db1a:	f104 0c01 	add.w	ip, r4, #1
 801db1e:	f880 c010 	strb.w	ip, [r0, #16]
 801db22:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801db26:	f002 f9fb 	bl	801ff20 <uxr_init_output_best_effort_stream>
 801db2a:	2201      	movs	r2, #1
 801db2c:	4620      	mov	r0, r4
 801db2e:	4611      	mov	r1, r2
 801db30:	b002      	add	sp, #8
 801db32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db36:	f7ff bf4d 	b.w	801d9d4 <uxr_stream_id>
 801db3a:	bf00      	nop

0801db3c <uxr_add_output_reliable_buffer>:
 801db3c:	b510      	push	{r4, lr}
 801db3e:	b084      	sub	sp, #16
 801db40:	4684      	mov	ip, r0
 801db42:	2028      	movs	r0, #40	@ 0x28
 801db44:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801db48:	9400      	str	r4, [sp, #0]
 801db4a:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801db4e:	fb00 c004 	mla	r0, r0, r4, ip
 801db52:	f104 0e01 	add.w	lr, r4, #1
 801db56:	3018      	adds	r0, #24
 801db58:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801db5c:	f002 fa60 	bl	8020020 <uxr_init_output_reliable_stream>
 801db60:	2201      	movs	r2, #1
 801db62:	2102      	movs	r1, #2
 801db64:	4620      	mov	r0, r4
 801db66:	b004      	add	sp, #16
 801db68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db6c:	f7ff bf32 	b.w	801d9d4 <uxr_stream_id>

0801db70 <uxr_add_input_best_effort_buffer>:
 801db70:	b510      	push	{r4, lr}
 801db72:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801db76:	b082      	sub	sp, #8
 801db78:	1c62      	adds	r2, r4, #1
 801db7a:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801db7e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801db82:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801db86:	f001 ffd7 	bl	801fb38 <uxr_init_input_best_effort_stream>
 801db8a:	2200      	movs	r2, #0
 801db8c:	2101      	movs	r1, #1
 801db8e:	4620      	mov	r0, r4
 801db90:	b002      	add	sp, #8
 801db92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db96:	f7ff bf1d 	b.w	801d9d4 <uxr_stream_id>
 801db9a:	bf00      	nop

0801db9c <uxr_add_input_reliable_buffer>:
 801db9c:	b510      	push	{r4, lr}
 801db9e:	b084      	sub	sp, #16
 801dba0:	4684      	mov	ip, r0
 801dba2:	2018      	movs	r0, #24
 801dba4:	9c06      	ldr	r4, [sp, #24]
 801dba6:	9400      	str	r4, [sp, #0]
 801dba8:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801dbac:	fb00 c004 	mla	r0, r0, r4, ip
 801dbb0:	f104 0e01 	add.w	lr, r4, #1
 801dbb4:	3048      	adds	r0, #72	@ 0x48
 801dbb6:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801dbba:	f002 f807 	bl	801fbcc <uxr_init_input_reliable_stream>
 801dbbe:	2200      	movs	r2, #0
 801dbc0:	2102      	movs	r1, #2
 801dbc2:	4620      	mov	r0, r4
 801dbc4:	b004      	add	sp, #16
 801dbc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbca:	f7ff bf03 	b.w	801d9d4 <uxr_stream_id>
 801dbce:	bf00      	nop

0801dbd0 <uxr_get_output_best_effort_stream>:
 801dbd0:	7c03      	ldrb	r3, [r0, #16]
 801dbd2:	428b      	cmp	r3, r1
 801dbd4:	bf8c      	ite	hi
 801dbd6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801dbda:	2000      	movls	r0, #0
 801dbdc:	4770      	bx	lr
 801dbde:	bf00      	nop

0801dbe0 <uxr_get_output_reliable_stream>:
 801dbe0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801dbe4:	428b      	cmp	r3, r1
 801dbe6:	d904      	bls.n	801dbf2 <uxr_get_output_reliable_stream+0x12>
 801dbe8:	2328      	movs	r3, #40	@ 0x28
 801dbea:	fb03 0001 	mla	r0, r3, r1, r0
 801dbee:	3018      	adds	r0, #24
 801dbf0:	4770      	bx	lr
 801dbf2:	2000      	movs	r0, #0
 801dbf4:	4770      	bx	lr
 801dbf6:	bf00      	nop

0801dbf8 <uxr_get_input_best_effort_stream>:
 801dbf8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801dbfc:	428b      	cmp	r3, r1
 801dbfe:	d903      	bls.n	801dc08 <uxr_get_input_best_effort_stream+0x10>
 801dc00:	3121      	adds	r1, #33	@ 0x21
 801dc02:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801dc06:	4770      	bx	lr
 801dc08:	2000      	movs	r0, #0
 801dc0a:	4770      	bx	lr

0801dc0c <uxr_get_input_reliable_stream>:
 801dc0c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801dc10:	428b      	cmp	r3, r1
 801dc12:	d904      	bls.n	801dc1e <uxr_get_input_reliable_stream+0x12>
 801dc14:	2318      	movs	r3, #24
 801dc16:	fb03 0001 	mla	r0, r3, r1, r0
 801dc1a:	3048      	adds	r0, #72	@ 0x48
 801dc1c:	4770      	bx	lr
 801dc1e:	2000      	movs	r0, #0
 801dc20:	4770      	bx	lr
 801dc22:	bf00      	nop

0801dc24 <uxr_output_streams_confirmed>:
 801dc24:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801dc28:	b183      	cbz	r3, 801dc4c <uxr_output_streams_confirmed+0x28>
 801dc2a:	b570      	push	{r4, r5, r6, lr}
 801dc2c:	4606      	mov	r6, r0
 801dc2e:	f100 0518 	add.w	r5, r0, #24
 801dc32:	2400      	movs	r4, #0
 801dc34:	e000      	b.n	801dc38 <uxr_output_streams_confirmed+0x14>
 801dc36:	b140      	cbz	r0, 801dc4a <uxr_output_streams_confirmed+0x26>
 801dc38:	4628      	mov	r0, r5
 801dc3a:	3401      	adds	r4, #1
 801dc3c:	f002 fc9c 	bl	8020578 <uxr_is_output_up_to_date>
 801dc40:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801dc44:	3528      	adds	r5, #40	@ 0x28
 801dc46:	42a3      	cmp	r3, r4
 801dc48:	d8f5      	bhi.n	801dc36 <uxr_output_streams_confirmed+0x12>
 801dc4a:	bd70      	pop	{r4, r5, r6, pc}
 801dc4c:	2001      	movs	r0, #1
 801dc4e:	4770      	bx	lr

0801dc50 <uxr_buffer_submessage_header>:
 801dc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc52:	460e      	mov	r6, r1
 801dc54:	2104      	movs	r1, #4
 801dc56:	4604      	mov	r4, r0
 801dc58:	4615      	mov	r5, r2
 801dc5a:	461f      	mov	r7, r3
 801dc5c:	f7f6 f81e 	bl	8013c9c <ucdr_align_to>
 801dc60:	2301      	movs	r3, #1
 801dc62:	4631      	mov	r1, r6
 801dc64:	4620      	mov	r0, r4
 801dc66:	ea47 0203 	orr.w	r2, r7, r3
 801dc6a:	7523      	strb	r3, [r4, #20]
 801dc6c:	462b      	mov	r3, r5
 801dc6e:	f000 f8d5 	bl	801de1c <uxr_serialize_submessage_header>
 801dc72:	4620      	mov	r0, r4
 801dc74:	f7f6 f828 	bl	8013cc8 <ucdr_buffer_remaining>
 801dc78:	42a8      	cmp	r0, r5
 801dc7a:	bf34      	ite	cc
 801dc7c:	2000      	movcc	r0, #0
 801dc7e:	2001      	movcs	r0, #1
 801dc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc82:	bf00      	nop

0801dc84 <uxr_read_submessage_header>:
 801dc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc88:	4604      	mov	r4, r0
 801dc8a:	460d      	mov	r5, r1
 801dc8c:	2104      	movs	r1, #4
 801dc8e:	4616      	mov	r6, r2
 801dc90:	4698      	mov	r8, r3
 801dc92:	f7f6 f803 	bl	8013c9c <ucdr_align_to>
 801dc96:	4620      	mov	r0, r4
 801dc98:	f7f6 f816 	bl	8013cc8 <ucdr_buffer_remaining>
 801dc9c:	2803      	cmp	r0, #3
 801dc9e:	bf8c      	ite	hi
 801dca0:	2701      	movhi	r7, #1
 801dca2:	2700      	movls	r7, #0
 801dca4:	d802      	bhi.n	801dcac <uxr_read_submessage_header+0x28>
 801dca6:	4638      	mov	r0, r7
 801dca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcac:	4633      	mov	r3, r6
 801dcae:	4642      	mov	r2, r8
 801dcb0:	4620      	mov	r0, r4
 801dcb2:	4629      	mov	r1, r5
 801dcb4:	f000 f8c6 	bl	801de44 <uxr_deserialize_submessage_header>
 801dcb8:	f898 3000 	ldrb.w	r3, [r8]
 801dcbc:	4638      	mov	r0, r7
 801dcbe:	f003 0201 	and.w	r2, r3, #1
 801dcc2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801dcc6:	f888 3000 	strb.w	r3, [r8]
 801dcca:	7522      	strb	r2, [r4, #20]
 801dccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801dcd0 <uxr_submessage_padding>:
 801dcd0:	f010 0003 	ands.w	r0, r0, #3
 801dcd4:	bf18      	it	ne
 801dcd6:	f1c0 0004 	rsbne	r0, r0, #4
 801dcda:	4770      	bx	lr

0801dcdc <uxr_millis>:
 801dcdc:	b510      	push	{r4, lr}
 801dcde:	b084      	sub	sp, #16
 801dce0:	2001      	movs	r0, #1
 801dce2:	4669      	mov	r1, sp
 801dce4:	f7e4 f848 	bl	8001d78 <clock_gettime>
 801dce8:	4908      	ldr	r1, [pc, #32]	@ (801dd0c <uxr_millis+0x30>)
 801dcea:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801dcee:	fba0 0301 	umull	r0, r3, r0, r1
 801dcf2:	1900      	adds	r0, r0, r4
 801dcf4:	fb01 3102 	mla	r1, r1, r2, r3
 801dcf8:	4a05      	ldr	r2, [pc, #20]	@ (801dd10 <uxr_millis+0x34>)
 801dcfa:	f04f 0300 	mov.w	r3, #0
 801dcfe:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801dd02:	f7e2 fb55 	bl	80003b0 <__aeabi_ldivmod>
 801dd06:	b004      	add	sp, #16
 801dd08:	bd10      	pop	{r4, pc}
 801dd0a:	bf00      	nop
 801dd0c:	3b9aca00 	.word	0x3b9aca00
 801dd10:	000f4240 	.word	0x000f4240

0801dd14 <uxr_nanos>:
 801dd14:	b510      	push	{r4, lr}
 801dd16:	b084      	sub	sp, #16
 801dd18:	2001      	movs	r0, #1
 801dd1a:	4669      	mov	r1, sp
 801dd1c:	f7e4 f82c 	bl	8001d78 <clock_gettime>
 801dd20:	4a06      	ldr	r2, [pc, #24]	@ (801dd3c <uxr_nanos+0x28>)
 801dd22:	9800      	ldr	r0, [sp, #0]
 801dd24:	9902      	ldr	r1, [sp, #8]
 801dd26:	fba0 0302 	umull	r0, r3, r0, r2
 801dd2a:	9c01      	ldr	r4, [sp, #4]
 801dd2c:	1840      	adds	r0, r0, r1
 801dd2e:	fb02 3304 	mla	r3, r2, r4, r3
 801dd32:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801dd36:	b004      	add	sp, #16
 801dd38:	bd10      	pop	{r4, pc}
 801dd3a:	bf00      	nop
 801dd3c:	3b9aca00 	.word	0x3b9aca00

0801dd40 <uxr_prepare_output_stream>:
 801dd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd42:	b087      	sub	sp, #28
 801dd44:	2707      	movs	r7, #7
 801dd46:	2500      	movs	r5, #0
 801dd48:	461c      	mov	r4, r3
 801dd4a:	4606      	mov	r6, r0
 801dd4c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801dd50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dd52:	e9cd 7500 	strd	r7, r5, [sp]
 801dd56:	3204      	adds	r2, #4
 801dd58:	f7ff f852 	bl	801ce00 <uxr_prepare_stream_to_write_submessage>
 801dd5c:	f080 0201 	eor.w	r2, r0, #1
 801dd60:	b2d2      	uxtb	r2, r2
 801dd62:	75a2      	strb	r2, [r4, #22]
 801dd64:	b112      	cbz	r2, 801dd6c <uxr_prepare_output_stream+0x2c>
 801dd66:	4628      	mov	r0, r5
 801dd68:	b007      	add	sp, #28
 801dd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd6c:	aa05      	add	r2, sp, #20
 801dd6e:	9902      	ldr	r1, [sp, #8]
 801dd70:	4630      	mov	r0, r6
 801dd72:	f7ff f981 	bl	801d078 <uxr_init_base_object_request>
 801dd76:	a905      	add	r1, sp, #20
 801dd78:	4605      	mov	r5, r0
 801dd7a:	4620      	mov	r0, r4
 801dd7c:	f000 fff2 	bl	801ed64 <uxr_serialize_WRITE_DATA_Payload_Data>
 801dd80:	69a6      	ldr	r6, [r4, #24]
 801dd82:	69e7      	ldr	r7, [r4, #28]
 801dd84:	4620      	mov	r0, r4
 801dd86:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801dd8a:	1a52      	subs	r2, r2, r1
 801dd8c:	f7f5 ff6a 	bl	8013c64 <ucdr_init_buffer>
 801dd90:	4620      	mov	r0, r4
 801dd92:	463a      	mov	r2, r7
 801dd94:	4631      	mov	r1, r6
 801dd96:	f7f5 ff39 	bl	8013c0c <ucdr_set_on_full_buffer_callback>
 801dd9a:	4628      	mov	r0, r5
 801dd9c:	b007      	add	sp, #28
 801dd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dda0 <uxr_serialize_message_header>:
 801dda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dda2:	4616      	mov	r6, r2
 801dda4:	b083      	sub	sp, #12
 801dda6:	4604      	mov	r4, r0
 801dda8:	460d      	mov	r5, r1
 801ddaa:	9301      	str	r3, [sp, #4]
 801ddac:	9f08      	ldr	r7, [sp, #32]
 801ddae:	f7f4 fcef 	bl	8012790 <ucdr_serialize_uint8_t>
 801ddb2:	4631      	mov	r1, r6
 801ddb4:	4620      	mov	r0, r4
 801ddb6:	f7f4 fceb 	bl	8012790 <ucdr_serialize_uint8_t>
 801ddba:	9a01      	ldr	r2, [sp, #4]
 801ddbc:	2101      	movs	r1, #1
 801ddbe:	4620      	mov	r0, r4
 801ddc0:	f7f4 fd92 	bl	80128e8 <ucdr_serialize_endian_uint16_t>
 801ddc4:	062b      	lsls	r3, r5, #24
 801ddc6:	d501      	bpl.n	801ddcc <uxr_serialize_message_header+0x2c>
 801ddc8:	b003      	add	sp, #12
 801ddca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ddcc:	2204      	movs	r2, #4
 801ddce:	4639      	mov	r1, r7
 801ddd0:	4620      	mov	r0, r4
 801ddd2:	b003      	add	sp, #12
 801ddd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ddd8:	f7fd bbc2 	b.w	801b560 <ucdr_serialize_array_uint8_t>

0801dddc <uxr_deserialize_message_header>:
 801dddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ddde:	4616      	mov	r6, r2
 801dde0:	b083      	sub	sp, #12
 801dde2:	4604      	mov	r4, r0
 801dde4:	460d      	mov	r5, r1
 801dde6:	9301      	str	r3, [sp, #4]
 801dde8:	9f08      	ldr	r7, [sp, #32]
 801ddea:	f7f4 fce7 	bl	80127bc <ucdr_deserialize_uint8_t>
 801ddee:	4631      	mov	r1, r6
 801ddf0:	4620      	mov	r0, r4
 801ddf2:	f7f4 fce3 	bl	80127bc <ucdr_deserialize_uint8_t>
 801ddf6:	9a01      	ldr	r2, [sp, #4]
 801ddf8:	2101      	movs	r1, #1
 801ddfa:	4620      	mov	r0, r4
 801ddfc:	f7f4 fe68 	bl	8012ad0 <ucdr_deserialize_endian_uint16_t>
 801de00:	f995 3000 	ldrsb.w	r3, [r5]
 801de04:	2b00      	cmp	r3, #0
 801de06:	da01      	bge.n	801de0c <uxr_deserialize_message_header+0x30>
 801de08:	b003      	add	sp, #12
 801de0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de0c:	2204      	movs	r2, #4
 801de0e:	4639      	mov	r1, r7
 801de10:	4620      	mov	r0, r4
 801de12:	b003      	add	sp, #12
 801de14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801de18:	f7fd bc06 	b.w	801b628 <ucdr_deserialize_array_uint8_t>

0801de1c <uxr_serialize_submessage_header>:
 801de1c:	b530      	push	{r4, r5, lr}
 801de1e:	4615      	mov	r5, r2
 801de20:	b083      	sub	sp, #12
 801de22:	4604      	mov	r4, r0
 801de24:	9301      	str	r3, [sp, #4]
 801de26:	f7f4 fcb3 	bl	8012790 <ucdr_serialize_uint8_t>
 801de2a:	4629      	mov	r1, r5
 801de2c:	4620      	mov	r0, r4
 801de2e:	f7f4 fcaf 	bl	8012790 <ucdr_serialize_uint8_t>
 801de32:	9a01      	ldr	r2, [sp, #4]
 801de34:	2101      	movs	r1, #1
 801de36:	4620      	mov	r0, r4
 801de38:	b003      	add	sp, #12
 801de3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de3e:	f7f4 bd53 	b.w	80128e8 <ucdr_serialize_endian_uint16_t>
 801de42:	bf00      	nop

0801de44 <uxr_deserialize_submessage_header>:
 801de44:	b530      	push	{r4, r5, lr}
 801de46:	4615      	mov	r5, r2
 801de48:	b083      	sub	sp, #12
 801de4a:	4604      	mov	r4, r0
 801de4c:	9301      	str	r3, [sp, #4]
 801de4e:	f7f4 fcb5 	bl	80127bc <ucdr_deserialize_uint8_t>
 801de52:	4629      	mov	r1, r5
 801de54:	4620      	mov	r0, r4
 801de56:	f7f4 fcb1 	bl	80127bc <ucdr_deserialize_uint8_t>
 801de5a:	9a01      	ldr	r2, [sp, #4]
 801de5c:	2101      	movs	r1, #1
 801de5e:	4620      	mov	r0, r4
 801de60:	b003      	add	sp, #12
 801de62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de66:	f7f4 be33 	b.w	8012ad0 <ucdr_deserialize_endian_uint16_t>
 801de6a:	bf00      	nop

0801de6c <uxr_serialize_CLIENT_Representation>:
 801de6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de70:	2204      	movs	r2, #4
 801de72:	460e      	mov	r6, r1
 801de74:	4605      	mov	r5, r0
 801de76:	f7fd fb73 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801de7a:	4607      	mov	r7, r0
 801de7c:	2202      	movs	r2, #2
 801de7e:	1d31      	adds	r1, r6, #4
 801de80:	4628      	mov	r0, r5
 801de82:	f7fd fb6d 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801de86:	4038      	ands	r0, r7
 801de88:	2202      	movs	r2, #2
 801de8a:	1db1      	adds	r1, r6, #6
 801de8c:	b2c7      	uxtb	r7, r0
 801de8e:	4628      	mov	r0, r5
 801de90:	f7fd fb66 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801de94:	2204      	movs	r2, #4
 801de96:	4007      	ands	r7, r0
 801de98:	f106 0108 	add.w	r1, r6, #8
 801de9c:	4628      	mov	r0, r5
 801de9e:	f7fd fb5f 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801dea2:	4007      	ands	r7, r0
 801dea4:	7b31      	ldrb	r1, [r6, #12]
 801dea6:	4628      	mov	r0, r5
 801dea8:	f7f4 fc72 	bl	8012790 <ucdr_serialize_uint8_t>
 801deac:	7b71      	ldrb	r1, [r6, #13]
 801deae:	4007      	ands	r7, r0
 801deb0:	4628      	mov	r0, r5
 801deb2:	f7f4 fc3f 	bl	8012734 <ucdr_serialize_bool>
 801deb6:	7b73      	ldrb	r3, [r6, #13]
 801deb8:	ea07 0800 	and.w	r8, r7, r0
 801debc:	b93b      	cbnz	r3, 801dece <uxr_serialize_CLIENT_Representation+0x62>
 801debe:	8bb1      	ldrh	r1, [r6, #28]
 801dec0:	4628      	mov	r0, r5
 801dec2:	f7f4 fc91 	bl	80127e8 <ucdr_serialize_uint16_t>
 801dec6:	ea08 0000 	and.w	r0, r8, r0
 801deca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dece:	6931      	ldr	r1, [r6, #16]
 801ded0:	4628      	mov	r0, r5
 801ded2:	f7f4 fe73 	bl	8012bbc <ucdr_serialize_uint32_t>
 801ded6:	6933      	ldr	r3, [r6, #16]
 801ded8:	b1e3      	cbz	r3, 801df14 <uxr_serialize_CLIENT_Representation+0xa8>
 801deda:	b1c0      	cbz	r0, 801df0e <uxr_serialize_CLIENT_Representation+0xa2>
 801dedc:	4637      	mov	r7, r6
 801dede:	f04f 0900 	mov.w	r9, #0
 801dee2:	e000      	b.n	801dee6 <uxr_serialize_CLIENT_Representation+0x7a>
 801dee4:	b19c      	cbz	r4, 801df0e <uxr_serialize_CLIENT_Representation+0xa2>
 801dee6:	6979      	ldr	r1, [r7, #20]
 801dee8:	4628      	mov	r0, r5
 801deea:	f001 fe0d 	bl	801fb08 <ucdr_serialize_string>
 801deee:	69b9      	ldr	r1, [r7, #24]
 801def0:	4604      	mov	r4, r0
 801def2:	4628      	mov	r0, r5
 801def4:	f001 fe08 	bl	801fb08 <ucdr_serialize_string>
 801def8:	f109 0901 	add.w	r9, r9, #1
 801defc:	6933      	ldr	r3, [r6, #16]
 801defe:	4004      	ands	r4, r0
 801df00:	3708      	adds	r7, #8
 801df02:	4599      	cmp	r9, r3
 801df04:	b2e4      	uxtb	r4, r4
 801df06:	d3ed      	bcc.n	801dee4 <uxr_serialize_CLIENT_Representation+0x78>
 801df08:	ea08 0804 	and.w	r8, r8, r4
 801df0c:	e7d7      	b.n	801debe <uxr_serialize_CLIENT_Representation+0x52>
 801df0e:	f04f 0800 	mov.w	r8, #0
 801df12:	e7d4      	b.n	801debe <uxr_serialize_CLIENT_Representation+0x52>
 801df14:	ea08 0800 	and.w	r8, r8, r0
 801df18:	e7d1      	b.n	801debe <uxr_serialize_CLIENT_Representation+0x52>
 801df1a:	bf00      	nop

0801df1c <uxr_deserialize_CLIENT_Representation>:
 801df1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df20:	2204      	movs	r2, #4
 801df22:	460c      	mov	r4, r1
 801df24:	4605      	mov	r5, r0
 801df26:	f7fd fb7f 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801df2a:	4607      	mov	r7, r0
 801df2c:	2202      	movs	r2, #2
 801df2e:	1d21      	adds	r1, r4, #4
 801df30:	4628      	mov	r0, r5
 801df32:	f7fd fb79 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801df36:	4038      	ands	r0, r7
 801df38:	2202      	movs	r2, #2
 801df3a:	1da1      	adds	r1, r4, #6
 801df3c:	b2c6      	uxtb	r6, r0
 801df3e:	4628      	mov	r0, r5
 801df40:	f7fd fb72 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801df44:	2204      	movs	r2, #4
 801df46:	4006      	ands	r6, r0
 801df48:	f104 0108 	add.w	r1, r4, #8
 801df4c:	4628      	mov	r0, r5
 801df4e:	f7fd fb6b 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801df52:	4006      	ands	r6, r0
 801df54:	f104 010c 	add.w	r1, r4, #12
 801df58:	4628      	mov	r0, r5
 801df5a:	f7f4 fc2f 	bl	80127bc <ucdr_deserialize_uint8_t>
 801df5e:	f104 010d 	add.w	r1, r4, #13
 801df62:	ea06 0700 	and.w	r7, r6, r0
 801df66:	4628      	mov	r0, r5
 801df68:	f7f4 fbfa 	bl	8012760 <ucdr_deserialize_bool>
 801df6c:	7b63      	ldrb	r3, [r4, #13]
 801df6e:	4007      	ands	r7, r0
 801df70:	b93b      	cbnz	r3, 801df82 <uxr_deserialize_CLIENT_Representation+0x66>
 801df72:	f104 011c 	add.w	r1, r4, #28
 801df76:	4628      	mov	r0, r5
 801df78:	f7f4 fd36 	bl	80129e8 <ucdr_deserialize_uint16_t>
 801df7c:	4038      	ands	r0, r7
 801df7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df82:	f104 0110 	add.w	r1, r4, #16
 801df86:	4628      	mov	r0, r5
 801df88:	f7f4 ff48 	bl	8012e1c <ucdr_deserialize_uint32_t>
 801df8c:	6923      	ldr	r3, [r4, #16]
 801df8e:	2b01      	cmp	r3, #1
 801df90:	d903      	bls.n	801df9a <uxr_deserialize_CLIENT_Representation+0x7e>
 801df92:	2301      	movs	r3, #1
 801df94:	2700      	movs	r7, #0
 801df96:	75ab      	strb	r3, [r5, #22]
 801df98:	e7eb      	b.n	801df72 <uxr_deserialize_CLIENT_Representation+0x56>
 801df9a:	b30b      	cbz	r3, 801dfe0 <uxr_deserialize_CLIENT_Representation+0xc4>
 801df9c:	b1f0      	cbz	r0, 801dfdc <uxr_deserialize_CLIENT_Representation+0xc0>
 801df9e:	46a0      	mov	r8, r4
 801dfa0:	f04f 0900 	mov.w	r9, #0
 801dfa4:	e000      	b.n	801dfa8 <uxr_deserialize_CLIENT_Representation+0x8c>
 801dfa6:	b1ce      	cbz	r6, 801dfdc <uxr_deserialize_CLIENT_Representation+0xc0>
 801dfa8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801dfac:	f108 0808 	add.w	r8, r8, #8
 801dfb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801dfb4:	4628      	mov	r0, r5
 801dfb6:	f001 fdb7 	bl	801fb28 <ucdr_deserialize_string>
 801dfba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801dfbe:	4606      	mov	r6, r0
 801dfc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801dfc4:	4628      	mov	r0, r5
 801dfc6:	f109 0901 	add.w	r9, r9, #1
 801dfca:	f001 fdad 	bl	801fb28 <ucdr_deserialize_string>
 801dfce:	6923      	ldr	r3, [r4, #16]
 801dfd0:	4006      	ands	r6, r0
 801dfd2:	4599      	cmp	r9, r3
 801dfd4:	b2f6      	uxtb	r6, r6
 801dfd6:	d3e6      	bcc.n	801dfa6 <uxr_deserialize_CLIENT_Representation+0x8a>
 801dfd8:	4037      	ands	r7, r6
 801dfda:	e7ca      	b.n	801df72 <uxr_deserialize_CLIENT_Representation+0x56>
 801dfdc:	2700      	movs	r7, #0
 801dfde:	e7c8      	b.n	801df72 <uxr_deserialize_CLIENT_Representation+0x56>
 801dfe0:	4007      	ands	r7, r0
 801dfe2:	e7c6      	b.n	801df72 <uxr_deserialize_CLIENT_Representation+0x56>

0801dfe4 <uxr_serialize_AGENT_Representation>:
 801dfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dfe8:	2204      	movs	r2, #4
 801dfea:	460f      	mov	r7, r1
 801dfec:	4605      	mov	r5, r0
 801dfee:	f7fd fab7 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801dff2:	4604      	mov	r4, r0
 801dff4:	2202      	movs	r2, #2
 801dff6:	1d39      	adds	r1, r7, #4
 801dff8:	4628      	mov	r0, r5
 801dffa:	f7fd fab1 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801dffe:	4020      	ands	r0, r4
 801e000:	2202      	movs	r2, #2
 801e002:	1db9      	adds	r1, r7, #6
 801e004:	b2c4      	uxtb	r4, r0
 801e006:	4628      	mov	r0, r5
 801e008:	f7fd faaa 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801e00c:	7a39      	ldrb	r1, [r7, #8]
 801e00e:	4004      	ands	r4, r0
 801e010:	4628      	mov	r0, r5
 801e012:	f7f4 fb8f 	bl	8012734 <ucdr_serialize_bool>
 801e016:	7a3b      	ldrb	r3, [r7, #8]
 801e018:	ea00 0804 	and.w	r8, r0, r4
 801e01c:	b913      	cbnz	r3, 801e024 <uxr_serialize_AGENT_Representation+0x40>
 801e01e:	4640      	mov	r0, r8
 801e020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e024:	68f9      	ldr	r1, [r7, #12]
 801e026:	4628      	mov	r0, r5
 801e028:	f7f4 fdc8 	bl	8012bbc <ucdr_serialize_uint32_t>
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	b303      	cbz	r3, 801e072 <uxr_serialize_AGENT_Representation+0x8e>
 801e030:	b1d0      	cbz	r0, 801e068 <uxr_serialize_AGENT_Representation+0x84>
 801e032:	463e      	mov	r6, r7
 801e034:	f04f 0900 	mov.w	r9, #0
 801e038:	e000      	b.n	801e03c <uxr_serialize_AGENT_Representation+0x58>
 801e03a:	b1ac      	cbz	r4, 801e068 <uxr_serialize_AGENT_Representation+0x84>
 801e03c:	6931      	ldr	r1, [r6, #16]
 801e03e:	4628      	mov	r0, r5
 801e040:	f001 fd62 	bl	801fb08 <ucdr_serialize_string>
 801e044:	6971      	ldr	r1, [r6, #20]
 801e046:	4604      	mov	r4, r0
 801e048:	4628      	mov	r0, r5
 801e04a:	f001 fd5d 	bl	801fb08 <ucdr_serialize_string>
 801e04e:	f109 0901 	add.w	r9, r9, #1
 801e052:	68fb      	ldr	r3, [r7, #12]
 801e054:	4004      	ands	r4, r0
 801e056:	3608      	adds	r6, #8
 801e058:	4599      	cmp	r9, r3
 801e05a:	b2e4      	uxtb	r4, r4
 801e05c:	d3ed      	bcc.n	801e03a <uxr_serialize_AGENT_Representation+0x56>
 801e05e:	ea08 0804 	and.w	r8, r8, r4
 801e062:	4640      	mov	r0, r8
 801e064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e068:	f04f 0800 	mov.w	r8, #0
 801e06c:	4640      	mov	r0, r8
 801e06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e072:	ea08 0800 	and.w	r8, r8, r0
 801e076:	e7d2      	b.n	801e01e <uxr_serialize_AGENT_Representation+0x3a>

0801e078 <uxr_serialize_DATAWRITER_Representation>:
 801e078:	b570      	push	{r4, r5, r6, lr}
 801e07a:	460d      	mov	r5, r1
 801e07c:	7809      	ldrb	r1, [r1, #0]
 801e07e:	4606      	mov	r6, r0
 801e080:	f7f4 fb86 	bl	8012790 <ucdr_serialize_uint8_t>
 801e084:	4604      	mov	r4, r0
 801e086:	b130      	cbz	r0, 801e096 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801e088:	782b      	ldrb	r3, [r5, #0]
 801e08a:	2b02      	cmp	r3, #2
 801e08c:	d00c      	beq.n	801e0a8 <uxr_serialize_DATAWRITER_Representation+0x30>
 801e08e:	2b03      	cmp	r3, #3
 801e090:	d010      	beq.n	801e0b4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801e092:	2b01      	cmp	r3, #1
 801e094:	d008      	beq.n	801e0a8 <uxr_serialize_DATAWRITER_Representation+0x30>
 801e096:	2202      	movs	r2, #2
 801e098:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801e09c:	4630      	mov	r0, r6
 801e09e:	f7fd fa5f 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801e0a2:	4020      	ands	r0, r4
 801e0a4:	b2c0      	uxtb	r0, r0
 801e0a6:	bd70      	pop	{r4, r5, r6, pc}
 801e0a8:	6869      	ldr	r1, [r5, #4]
 801e0aa:	4630      	mov	r0, r6
 801e0ac:	f001 fd2c 	bl	801fb08 <ucdr_serialize_string>
 801e0b0:	4604      	mov	r4, r0
 801e0b2:	e7f0      	b.n	801e096 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801e0b4:	4629      	mov	r1, r5
 801e0b6:	4630      	mov	r0, r6
 801e0b8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801e0bc:	3104      	adds	r1, #4
 801e0be:	f7f7 fc1f 	bl	8015900 <ucdr_serialize_sequence_uint8_t>
 801e0c2:	4604      	mov	r4, r0
 801e0c4:	e7e7      	b.n	801e096 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801e0c6:	bf00      	nop

0801e0c8 <uxr_serialize_ObjectVariant.part.0>:
 801e0c8:	b570      	push	{r4, r5, r6, lr}
 801e0ca:	780b      	ldrb	r3, [r1, #0]
 801e0cc:	460c      	mov	r4, r1
 801e0ce:	4605      	mov	r5, r0
 801e0d0:	3b01      	subs	r3, #1
 801e0d2:	2b0d      	cmp	r3, #13
 801e0d4:	d854      	bhi.n	801e180 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801e0d6:	e8df f003 	tbb	[pc, r3]
 801e0da:	0730      	.short	0x0730
 801e0dc:	07071b1b 	.word	0x07071b1b
 801e0e0:	0c530707 	.word	0x0c530707
 801e0e4:	494e0c0c 	.word	0x494e0c0c
 801e0e8:	3104      	adds	r1, #4
 801e0ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e0ee:	f7ff bfc3 	b.w	801e078 <uxr_serialize_DATAWRITER_Representation>
 801e0f2:	7909      	ldrb	r1, [r1, #4]
 801e0f4:	f7f4 fb4c 	bl	8012790 <ucdr_serialize_uint8_t>
 801e0f8:	b1e8      	cbz	r0, 801e136 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801e0fa:	7923      	ldrb	r3, [r4, #4]
 801e0fc:	2b01      	cmp	r3, #1
 801e0fe:	d001      	beq.n	801e104 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801e100:	2b02      	cmp	r3, #2
 801e102:	d13d      	bne.n	801e180 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801e104:	68a1      	ldr	r1, [r4, #8]
 801e106:	4628      	mov	r0, r5
 801e108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e10c:	f001 bcfc 	b.w	801fb08 <ucdr_serialize_string>
 801e110:	7909      	ldrb	r1, [r1, #4]
 801e112:	f7f4 fb3d 	bl	8012790 <ucdr_serialize_uint8_t>
 801e116:	4606      	mov	r6, r0
 801e118:	b120      	cbz	r0, 801e124 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801e11a:	7923      	ldrb	r3, [r4, #4]
 801e11c:	2b02      	cmp	r3, #2
 801e11e:	d039      	beq.n	801e194 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801e120:	2b03      	cmp	r3, #3
 801e122:	d02f      	beq.n	801e184 <uxr_serialize_ObjectVariant.part.0+0xbc>
 801e124:	2202      	movs	r2, #2
 801e126:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801e12a:	4628      	mov	r0, r5
 801e12c:	f7fd fa18 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801e130:	4030      	ands	r0, r6
 801e132:	b2c0      	uxtb	r0, r0
 801e134:	bd70      	pop	{r4, r5, r6, pc}
 801e136:	2000      	movs	r0, #0
 801e138:	bd70      	pop	{r4, r5, r6, pc}
 801e13a:	7909      	ldrb	r1, [r1, #4]
 801e13c:	f7f4 fb28 	bl	8012790 <ucdr_serialize_uint8_t>
 801e140:	4606      	mov	r6, r0
 801e142:	b158      	cbz	r0, 801e15c <uxr_serialize_ObjectVariant.part.0+0x94>
 801e144:	7923      	ldrb	r3, [r4, #4]
 801e146:	2b02      	cmp	r3, #2
 801e148:	d003      	beq.n	801e152 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801e14a:	2b03      	cmp	r3, #3
 801e14c:	d028      	beq.n	801e1a0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801e14e:	2b01      	cmp	r3, #1
 801e150:	d104      	bne.n	801e15c <uxr_serialize_ObjectVariant.part.0+0x94>
 801e152:	68a1      	ldr	r1, [r4, #8]
 801e154:	4628      	mov	r0, r5
 801e156:	f001 fcd7 	bl	801fb08 <ucdr_serialize_string>
 801e15a:	4606      	mov	r6, r0
 801e15c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801e160:	4628      	mov	r0, r5
 801e162:	f7f5 f851 	bl	8013208 <ucdr_serialize_int16_t>
 801e166:	4030      	ands	r0, r6
 801e168:	b2c0      	uxtb	r0, r0
 801e16a:	bd70      	pop	{r4, r5, r6, pc}
 801e16c:	3104      	adds	r1, #4
 801e16e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e172:	f7ff be7b 	b.w	801de6c <uxr_serialize_CLIENT_Representation>
 801e176:	3104      	adds	r1, #4
 801e178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e17c:	f7ff bf32 	b.w	801dfe4 <uxr_serialize_AGENT_Representation>
 801e180:	2001      	movs	r0, #1
 801e182:	bd70      	pop	{r4, r5, r6, pc}
 801e184:	68a2      	ldr	r2, [r4, #8]
 801e186:	f104 010c 	add.w	r1, r4, #12
 801e18a:	4628      	mov	r0, r5
 801e18c:	f7f7 fbb8 	bl	8015900 <ucdr_serialize_sequence_uint8_t>
 801e190:	4606      	mov	r6, r0
 801e192:	e7c7      	b.n	801e124 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801e194:	68a1      	ldr	r1, [r4, #8]
 801e196:	4628      	mov	r0, r5
 801e198:	f001 fcb6 	bl	801fb08 <ucdr_serialize_string>
 801e19c:	4606      	mov	r6, r0
 801e19e:	e7c1      	b.n	801e124 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801e1a0:	68a2      	ldr	r2, [r4, #8]
 801e1a2:	f104 010c 	add.w	r1, r4, #12
 801e1a6:	4628      	mov	r0, r5
 801e1a8:	f7f7 fbaa 	bl	8015900 <ucdr_serialize_sequence_uint8_t>
 801e1ac:	4606      	mov	r6, r0
 801e1ae:	e7d5      	b.n	801e15c <uxr_serialize_ObjectVariant.part.0+0x94>

0801e1b0 <uxr_deserialize_DATAWRITER_Representation>:
 801e1b0:	b570      	push	{r4, r5, r6, lr}
 801e1b2:	4606      	mov	r6, r0
 801e1b4:	460d      	mov	r5, r1
 801e1b6:	f7f4 fb01 	bl	80127bc <ucdr_deserialize_uint8_t>
 801e1ba:	4604      	mov	r4, r0
 801e1bc:	b130      	cbz	r0, 801e1cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801e1be:	782b      	ldrb	r3, [r5, #0]
 801e1c0:	2b02      	cmp	r3, #2
 801e1c2:	d00c      	beq.n	801e1de <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801e1c4:	2b03      	cmp	r3, #3
 801e1c6:	d012      	beq.n	801e1ee <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801e1c8:	2b01      	cmp	r3, #1
 801e1ca:	d008      	beq.n	801e1de <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801e1cc:	2202      	movs	r2, #2
 801e1ce:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801e1d2:	4630      	mov	r0, r6
 801e1d4:	f7fd fa28 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801e1d8:	4020      	ands	r0, r4
 801e1da:	b2c0      	uxtb	r0, r0
 801e1dc:	bd70      	pop	{r4, r5, r6, pc}
 801e1de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e1e2:	6869      	ldr	r1, [r5, #4]
 801e1e4:	4630      	mov	r0, r6
 801e1e6:	f001 fc9f 	bl	801fb28 <ucdr_deserialize_string>
 801e1ea:	4604      	mov	r4, r0
 801e1ec:	e7ee      	b.n	801e1cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801e1ee:	1d2b      	adds	r3, r5, #4
 801e1f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e1f4:	f105 0108 	add.w	r1, r5, #8
 801e1f8:	4630      	mov	r0, r6
 801e1fa:	f7f7 fb93 	bl	8015924 <ucdr_deserialize_sequence_uint8_t>
 801e1fe:	4604      	mov	r4, r0
 801e200:	e7e4      	b.n	801e1cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801e202:	bf00      	nop

0801e204 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801e204:	b570      	push	{r4, r5, r6, lr}
 801e206:	460d      	mov	r5, r1
 801e208:	7809      	ldrb	r1, [r1, #0]
 801e20a:	4606      	mov	r6, r0
 801e20c:	f7f4 fa92 	bl	8012734 <ucdr_serialize_bool>
 801e210:	782b      	ldrb	r3, [r5, #0]
 801e212:	4604      	mov	r4, r0
 801e214:	b94b      	cbnz	r3, 801e22a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801e216:	7a29      	ldrb	r1, [r5, #8]
 801e218:	4630      	mov	r0, r6
 801e21a:	f7f4 fa8b 	bl	8012734 <ucdr_serialize_bool>
 801e21e:	7a2b      	ldrb	r3, [r5, #8]
 801e220:	4004      	ands	r4, r0
 801e222:	b2e4      	uxtb	r4, r4
 801e224:	b943      	cbnz	r3, 801e238 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801e226:	4620      	mov	r0, r4
 801e228:	bd70      	pop	{r4, r5, r6, pc}
 801e22a:	6869      	ldr	r1, [r5, #4]
 801e22c:	4630      	mov	r0, r6
 801e22e:	f001 fc6b 	bl	801fb08 <ucdr_serialize_string>
 801e232:	4004      	ands	r4, r0
 801e234:	b2e4      	uxtb	r4, r4
 801e236:	e7ee      	b.n	801e216 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801e238:	68e9      	ldr	r1, [r5, #12]
 801e23a:	4630      	mov	r0, r6
 801e23c:	f001 fc64 	bl	801fb08 <ucdr_serialize_string>
 801e240:	4004      	ands	r4, r0
 801e242:	4620      	mov	r0, r4
 801e244:	bd70      	pop	{r4, r5, r6, pc}
 801e246:	bf00      	nop

0801e248 <uxr_serialize_OBJK_Topic_Binary>:
 801e248:	b570      	push	{r4, r5, r6, lr}
 801e24a:	460d      	mov	r5, r1
 801e24c:	4606      	mov	r6, r0
 801e24e:	6809      	ldr	r1, [r1, #0]
 801e250:	f001 fc5a 	bl	801fb08 <ucdr_serialize_string>
 801e254:	4604      	mov	r4, r0
 801e256:	7929      	ldrb	r1, [r5, #4]
 801e258:	4630      	mov	r0, r6
 801e25a:	f7f4 fa6b 	bl	8012734 <ucdr_serialize_bool>
 801e25e:	792b      	ldrb	r3, [r5, #4]
 801e260:	4004      	ands	r4, r0
 801e262:	b2e4      	uxtb	r4, r4
 801e264:	b943      	cbnz	r3, 801e278 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801e266:	7b29      	ldrb	r1, [r5, #12]
 801e268:	4630      	mov	r0, r6
 801e26a:	f7f4 fa63 	bl	8012734 <ucdr_serialize_bool>
 801e26e:	7b2b      	ldrb	r3, [r5, #12]
 801e270:	4004      	ands	r4, r0
 801e272:	b93b      	cbnz	r3, 801e284 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801e274:	4620      	mov	r0, r4
 801e276:	bd70      	pop	{r4, r5, r6, pc}
 801e278:	68a9      	ldr	r1, [r5, #8]
 801e27a:	4630      	mov	r0, r6
 801e27c:	f001 fc44 	bl	801fb08 <ucdr_serialize_string>
 801e280:	4004      	ands	r4, r0
 801e282:	e7f0      	b.n	801e266 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801e284:	6929      	ldr	r1, [r5, #16]
 801e286:	4630      	mov	r0, r6
 801e288:	f001 fc3e 	bl	801fb08 <ucdr_serialize_string>
 801e28c:	4004      	ands	r4, r0
 801e28e:	b2e4      	uxtb	r4, r4
 801e290:	4620      	mov	r0, r4
 801e292:	bd70      	pop	{r4, r5, r6, pc}

0801e294 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801e294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e298:	460c      	mov	r4, r1
 801e29a:	7809      	ldrb	r1, [r1, #0]
 801e29c:	4606      	mov	r6, r0
 801e29e:	f7f4 fa49 	bl	8012734 <ucdr_serialize_bool>
 801e2a2:	7823      	ldrb	r3, [r4, #0]
 801e2a4:	4605      	mov	r5, r0
 801e2a6:	b96b      	cbnz	r3, 801e2c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801e2a8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801e2ac:	4630      	mov	r0, r6
 801e2ae:	f7f4 fa41 	bl	8012734 <ucdr_serialize_bool>
 801e2b2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801e2b6:	4005      	ands	r5, r0
 801e2b8:	b2ed      	uxtb	r5, r5
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	d169      	bne.n	801e392 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801e2be:	4628      	mov	r0, r5
 801e2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2c4:	6861      	ldr	r1, [r4, #4]
 801e2c6:	4630      	mov	r0, r6
 801e2c8:	f7f4 fc78 	bl	8012bbc <ucdr_serialize_uint32_t>
 801e2cc:	6863      	ldr	r3, [r4, #4]
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d06b      	beq.n	801e3aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801e2d2:	2800      	cmp	r0, #0
 801e2d4:	d067      	beq.n	801e3a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801e2d6:	68a1      	ldr	r1, [r4, #8]
 801e2d8:	4630      	mov	r0, r6
 801e2da:	f001 fc15 	bl	801fb08 <ucdr_serialize_string>
 801e2de:	6863      	ldr	r3, [r4, #4]
 801e2e0:	2b01      	cmp	r3, #1
 801e2e2:	d953      	bls.n	801e38c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801e2e4:	2800      	cmp	r0, #0
 801e2e6:	d05e      	beq.n	801e3a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801e2e8:	68e1      	ldr	r1, [r4, #12]
 801e2ea:	4630      	mov	r0, r6
 801e2ec:	f001 fc0c 	bl	801fb08 <ucdr_serialize_string>
 801e2f0:	6863      	ldr	r3, [r4, #4]
 801e2f2:	2b02      	cmp	r3, #2
 801e2f4:	d94a      	bls.n	801e38c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801e2f6:	2800      	cmp	r0, #0
 801e2f8:	d055      	beq.n	801e3a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801e2fa:	6921      	ldr	r1, [r4, #16]
 801e2fc:	4630      	mov	r0, r6
 801e2fe:	f001 fc03 	bl	801fb08 <ucdr_serialize_string>
 801e302:	6863      	ldr	r3, [r4, #4]
 801e304:	2b03      	cmp	r3, #3
 801e306:	d941      	bls.n	801e38c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801e308:	2800      	cmp	r0, #0
 801e30a:	d04c      	beq.n	801e3a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801e30c:	6961      	ldr	r1, [r4, #20]
 801e30e:	4630      	mov	r0, r6
 801e310:	f001 fbfa 	bl	801fb08 <ucdr_serialize_string>
 801e314:	6863      	ldr	r3, [r4, #4]
 801e316:	2b04      	cmp	r3, #4
 801e318:	d938      	bls.n	801e38c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801e31a:	2800      	cmp	r0, #0
 801e31c:	d043      	beq.n	801e3a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801e31e:	69a1      	ldr	r1, [r4, #24]
 801e320:	4630      	mov	r0, r6
 801e322:	f001 fbf1 	bl	801fb08 <ucdr_serialize_string>
 801e326:	6863      	ldr	r3, [r4, #4]
 801e328:	2b05      	cmp	r3, #5
 801e32a:	d92f      	bls.n	801e38c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801e32c:	2800      	cmp	r0, #0
 801e32e:	d03a      	beq.n	801e3a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801e330:	69e1      	ldr	r1, [r4, #28]
 801e332:	4630      	mov	r0, r6
 801e334:	f001 fbe8 	bl	801fb08 <ucdr_serialize_string>
 801e338:	6863      	ldr	r3, [r4, #4]
 801e33a:	2b06      	cmp	r3, #6
 801e33c:	d926      	bls.n	801e38c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801e33e:	b390      	cbz	r0, 801e3a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801e340:	6a21      	ldr	r1, [r4, #32]
 801e342:	4630      	mov	r0, r6
 801e344:	f001 fbe0 	bl	801fb08 <ucdr_serialize_string>
 801e348:	6863      	ldr	r3, [r4, #4]
 801e34a:	2b07      	cmp	r3, #7
 801e34c:	d91e      	bls.n	801e38c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801e34e:	b350      	cbz	r0, 801e3a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801e350:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801e352:	4630      	mov	r0, r6
 801e354:	f001 fbd8 	bl	801fb08 <ucdr_serialize_string>
 801e358:	6863      	ldr	r3, [r4, #4]
 801e35a:	2b08      	cmp	r3, #8
 801e35c:	d916      	bls.n	801e38c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801e35e:	b310      	cbz	r0, 801e3a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801e360:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801e362:	4630      	mov	r0, r6
 801e364:	f001 fbd0 	bl	801fb08 <ucdr_serialize_string>
 801e368:	6863      	ldr	r3, [r4, #4]
 801e36a:	2b09      	cmp	r3, #9
 801e36c:	d90e      	bls.n	801e38c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801e36e:	b1d0      	cbz	r0, 801e3a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801e370:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801e374:	2709      	movs	r7, #9
 801e376:	e000      	b.n	801e37a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801e378:	b1a8      	cbz	r0, 801e3a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801e37a:	f858 1b04 	ldr.w	r1, [r8], #4
 801e37e:	4630      	mov	r0, r6
 801e380:	f001 fbc2 	bl	801fb08 <ucdr_serialize_string>
 801e384:	3701      	adds	r7, #1
 801e386:	6862      	ldr	r2, [r4, #4]
 801e388:	4297      	cmp	r7, r2
 801e38a:	d3f5      	bcc.n	801e378 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801e38c:	4005      	ands	r5, r0
 801e38e:	b2ed      	uxtb	r5, r5
 801e390:	e78a      	b.n	801e2a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801e392:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801e394:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801e398:	4630      	mov	r0, r6
 801e39a:	f7f7 fab1 	bl	8015900 <ucdr_serialize_sequence_uint8_t>
 801e39e:	4005      	ands	r5, r0
 801e3a0:	4628      	mov	r0, r5
 801e3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3a6:	2500      	movs	r5, #0
 801e3a8:	e77e      	b.n	801e2a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801e3aa:	4028      	ands	r0, r5
 801e3ac:	b2c5      	uxtb	r5, r0
 801e3ae:	e77b      	b.n	801e2a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801e3b0 <uxr_serialize_OBJK_Publisher_Binary>:
 801e3b0:	b570      	push	{r4, r5, r6, lr}
 801e3b2:	460d      	mov	r5, r1
 801e3b4:	7809      	ldrb	r1, [r1, #0]
 801e3b6:	4606      	mov	r6, r0
 801e3b8:	f7f4 f9bc 	bl	8012734 <ucdr_serialize_bool>
 801e3bc:	782b      	ldrb	r3, [r5, #0]
 801e3be:	4604      	mov	r4, r0
 801e3c0:	b94b      	cbnz	r3, 801e3d6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801e3c2:	7a29      	ldrb	r1, [r5, #8]
 801e3c4:	4630      	mov	r0, r6
 801e3c6:	f7f4 f9b5 	bl	8012734 <ucdr_serialize_bool>
 801e3ca:	7a2b      	ldrb	r3, [r5, #8]
 801e3cc:	4004      	ands	r4, r0
 801e3ce:	b2e4      	uxtb	r4, r4
 801e3d0:	b943      	cbnz	r3, 801e3e4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801e3d2:	4620      	mov	r0, r4
 801e3d4:	bd70      	pop	{r4, r5, r6, pc}
 801e3d6:	6869      	ldr	r1, [r5, #4]
 801e3d8:	4630      	mov	r0, r6
 801e3da:	f001 fb95 	bl	801fb08 <ucdr_serialize_string>
 801e3de:	4004      	ands	r4, r0
 801e3e0:	b2e4      	uxtb	r4, r4
 801e3e2:	e7ee      	b.n	801e3c2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801e3e4:	f105 010c 	add.w	r1, r5, #12
 801e3e8:	4630      	mov	r0, r6
 801e3ea:	f7ff ff53 	bl	801e294 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801e3ee:	4004      	ands	r4, r0
 801e3f0:	4620      	mov	r0, r4
 801e3f2:	bd70      	pop	{r4, r5, r6, pc}

0801e3f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801e3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3f8:	460c      	mov	r4, r1
 801e3fa:	7809      	ldrb	r1, [r1, #0]
 801e3fc:	4606      	mov	r6, r0
 801e3fe:	f7f4 f999 	bl	8012734 <ucdr_serialize_bool>
 801e402:	7823      	ldrb	r3, [r4, #0]
 801e404:	4605      	mov	r5, r0
 801e406:	b96b      	cbnz	r3, 801e424 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801e408:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801e40c:	4630      	mov	r0, r6
 801e40e:	f7f4 f991 	bl	8012734 <ucdr_serialize_bool>
 801e412:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801e416:	4005      	ands	r5, r0
 801e418:	b2ed      	uxtb	r5, r5
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d169      	bne.n	801e4f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801e41e:	4628      	mov	r0, r5
 801e420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e424:	6861      	ldr	r1, [r4, #4]
 801e426:	4630      	mov	r0, r6
 801e428:	f7f4 fbc8 	bl	8012bbc <ucdr_serialize_uint32_t>
 801e42c:	6863      	ldr	r3, [r4, #4]
 801e42e:	2b00      	cmp	r3, #0
 801e430:	d06b      	beq.n	801e50a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801e432:	2800      	cmp	r0, #0
 801e434:	d067      	beq.n	801e506 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801e436:	68a1      	ldr	r1, [r4, #8]
 801e438:	4630      	mov	r0, r6
 801e43a:	f001 fb65 	bl	801fb08 <ucdr_serialize_string>
 801e43e:	6863      	ldr	r3, [r4, #4]
 801e440:	2b01      	cmp	r3, #1
 801e442:	d953      	bls.n	801e4ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801e444:	2800      	cmp	r0, #0
 801e446:	d05e      	beq.n	801e506 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801e448:	68e1      	ldr	r1, [r4, #12]
 801e44a:	4630      	mov	r0, r6
 801e44c:	f001 fb5c 	bl	801fb08 <ucdr_serialize_string>
 801e450:	6863      	ldr	r3, [r4, #4]
 801e452:	2b02      	cmp	r3, #2
 801e454:	d94a      	bls.n	801e4ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801e456:	2800      	cmp	r0, #0
 801e458:	d055      	beq.n	801e506 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801e45a:	6921      	ldr	r1, [r4, #16]
 801e45c:	4630      	mov	r0, r6
 801e45e:	f001 fb53 	bl	801fb08 <ucdr_serialize_string>
 801e462:	6863      	ldr	r3, [r4, #4]
 801e464:	2b03      	cmp	r3, #3
 801e466:	d941      	bls.n	801e4ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801e468:	2800      	cmp	r0, #0
 801e46a:	d04c      	beq.n	801e506 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801e46c:	6961      	ldr	r1, [r4, #20]
 801e46e:	4630      	mov	r0, r6
 801e470:	f001 fb4a 	bl	801fb08 <ucdr_serialize_string>
 801e474:	6863      	ldr	r3, [r4, #4]
 801e476:	2b04      	cmp	r3, #4
 801e478:	d938      	bls.n	801e4ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801e47a:	2800      	cmp	r0, #0
 801e47c:	d043      	beq.n	801e506 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801e47e:	69a1      	ldr	r1, [r4, #24]
 801e480:	4630      	mov	r0, r6
 801e482:	f001 fb41 	bl	801fb08 <ucdr_serialize_string>
 801e486:	6863      	ldr	r3, [r4, #4]
 801e488:	2b05      	cmp	r3, #5
 801e48a:	d92f      	bls.n	801e4ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801e48c:	2800      	cmp	r0, #0
 801e48e:	d03a      	beq.n	801e506 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801e490:	69e1      	ldr	r1, [r4, #28]
 801e492:	4630      	mov	r0, r6
 801e494:	f001 fb38 	bl	801fb08 <ucdr_serialize_string>
 801e498:	6863      	ldr	r3, [r4, #4]
 801e49a:	2b06      	cmp	r3, #6
 801e49c:	d926      	bls.n	801e4ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801e49e:	b390      	cbz	r0, 801e506 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801e4a0:	6a21      	ldr	r1, [r4, #32]
 801e4a2:	4630      	mov	r0, r6
 801e4a4:	f001 fb30 	bl	801fb08 <ucdr_serialize_string>
 801e4a8:	6863      	ldr	r3, [r4, #4]
 801e4aa:	2b07      	cmp	r3, #7
 801e4ac:	d91e      	bls.n	801e4ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801e4ae:	b350      	cbz	r0, 801e506 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801e4b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801e4b2:	4630      	mov	r0, r6
 801e4b4:	f001 fb28 	bl	801fb08 <ucdr_serialize_string>
 801e4b8:	6863      	ldr	r3, [r4, #4]
 801e4ba:	2b08      	cmp	r3, #8
 801e4bc:	d916      	bls.n	801e4ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801e4be:	b310      	cbz	r0, 801e506 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801e4c0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801e4c2:	4630      	mov	r0, r6
 801e4c4:	f001 fb20 	bl	801fb08 <ucdr_serialize_string>
 801e4c8:	6863      	ldr	r3, [r4, #4]
 801e4ca:	2b09      	cmp	r3, #9
 801e4cc:	d90e      	bls.n	801e4ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801e4ce:	b1d0      	cbz	r0, 801e506 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801e4d0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801e4d4:	2709      	movs	r7, #9
 801e4d6:	e000      	b.n	801e4da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801e4d8:	b1a8      	cbz	r0, 801e506 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801e4da:	f858 1b04 	ldr.w	r1, [r8], #4
 801e4de:	4630      	mov	r0, r6
 801e4e0:	f001 fb12 	bl	801fb08 <ucdr_serialize_string>
 801e4e4:	3701      	adds	r7, #1
 801e4e6:	6862      	ldr	r2, [r4, #4]
 801e4e8:	4297      	cmp	r7, r2
 801e4ea:	d3f5      	bcc.n	801e4d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801e4ec:	4005      	ands	r5, r0
 801e4ee:	b2ed      	uxtb	r5, r5
 801e4f0:	e78a      	b.n	801e408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801e4f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801e4f4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801e4f8:	4630      	mov	r0, r6
 801e4fa:	f7f7 fa01 	bl	8015900 <ucdr_serialize_sequence_uint8_t>
 801e4fe:	4005      	ands	r5, r0
 801e500:	4628      	mov	r0, r5
 801e502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e506:	2500      	movs	r5, #0
 801e508:	e77e      	b.n	801e408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801e50a:	4028      	ands	r0, r5
 801e50c:	b2c5      	uxtb	r5, r0
 801e50e:	e77b      	b.n	801e408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801e510 <uxr_serialize_OBJK_Subscriber_Binary>:
 801e510:	b570      	push	{r4, r5, r6, lr}
 801e512:	460d      	mov	r5, r1
 801e514:	7809      	ldrb	r1, [r1, #0]
 801e516:	4606      	mov	r6, r0
 801e518:	f7f4 f90c 	bl	8012734 <ucdr_serialize_bool>
 801e51c:	782b      	ldrb	r3, [r5, #0]
 801e51e:	4604      	mov	r4, r0
 801e520:	b94b      	cbnz	r3, 801e536 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801e522:	7a29      	ldrb	r1, [r5, #8]
 801e524:	4630      	mov	r0, r6
 801e526:	f7f4 f905 	bl	8012734 <ucdr_serialize_bool>
 801e52a:	7a2b      	ldrb	r3, [r5, #8]
 801e52c:	4004      	ands	r4, r0
 801e52e:	b2e4      	uxtb	r4, r4
 801e530:	b943      	cbnz	r3, 801e544 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801e532:	4620      	mov	r0, r4
 801e534:	bd70      	pop	{r4, r5, r6, pc}
 801e536:	6869      	ldr	r1, [r5, #4]
 801e538:	4630      	mov	r0, r6
 801e53a:	f001 fae5 	bl	801fb08 <ucdr_serialize_string>
 801e53e:	4004      	ands	r4, r0
 801e540:	b2e4      	uxtb	r4, r4
 801e542:	e7ee      	b.n	801e522 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801e544:	f105 010c 	add.w	r1, r5, #12
 801e548:	4630      	mov	r0, r6
 801e54a:	f7ff ff53 	bl	801e3f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801e54e:	4004      	ands	r4, r0
 801e550:	4620      	mov	r0, r4
 801e552:	bd70      	pop	{r4, r5, r6, pc}

0801e554 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801e554:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801e558:	4688      	mov	r8, r1
 801e55a:	4681      	mov	r9, r0
 801e55c:	8809      	ldrh	r1, [r1, #0]
 801e55e:	f7f4 f943 	bl	80127e8 <ucdr_serialize_uint16_t>
 801e562:	4606      	mov	r6, r0
 801e564:	f898 1002 	ldrb.w	r1, [r8, #2]
 801e568:	4648      	mov	r0, r9
 801e56a:	f7f4 f8e3 	bl	8012734 <ucdr_serialize_bool>
 801e56e:	f898 3002 	ldrb.w	r3, [r8, #2]
 801e572:	4006      	ands	r6, r0
 801e574:	b2f5      	uxtb	r5, r6
 801e576:	b9eb      	cbnz	r3, 801e5b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801e578:	f898 1006 	ldrb.w	r1, [r8, #6]
 801e57c:	4648      	mov	r0, r9
 801e57e:	f7f4 f8d9 	bl	8012734 <ucdr_serialize_bool>
 801e582:	f898 3006 	ldrb.w	r3, [r8, #6]
 801e586:	4005      	ands	r5, r0
 801e588:	bb7b      	cbnz	r3, 801e5ea <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801e58a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801e58e:	4648      	mov	r0, r9
 801e590:	f7f4 f8d0 	bl	8012734 <ucdr_serialize_bool>
 801e594:	f898 300c 	ldrb.w	r3, [r8, #12]
 801e598:	4005      	ands	r5, r0
 801e59a:	b9f3      	cbnz	r3, 801e5da <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801e59c:	f898 1014 	ldrb.w	r1, [r8, #20]
 801e5a0:	4648      	mov	r0, r9
 801e5a2:	f7f4 f8c7 	bl	8012734 <ucdr_serialize_bool>
 801e5a6:	f898 3014 	ldrb.w	r3, [r8, #20]
 801e5aa:	4005      	ands	r5, r0
 801e5ac:	b94b      	cbnz	r3, 801e5c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801e5ae:	4628      	mov	r0, r5
 801e5b0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801e5b4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801e5b8:	4648      	mov	r0, r9
 801e5ba:	f7f4 f915 	bl	80127e8 <ucdr_serialize_uint16_t>
 801e5be:	4005      	ands	r5, r0
 801e5c0:	e7da      	b.n	801e578 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801e5c2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801e5c6:	f108 011c 	add.w	r1, r8, #28
 801e5ca:	4648      	mov	r0, r9
 801e5cc:	f7f7 f998 	bl	8015900 <ucdr_serialize_sequence_uint8_t>
 801e5d0:	4028      	ands	r0, r5
 801e5d2:	b2c5      	uxtb	r5, r0
 801e5d4:	4628      	mov	r0, r5
 801e5d6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801e5da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801e5de:	4648      	mov	r0, r9
 801e5e0:	f7f4 faec 	bl	8012bbc <ucdr_serialize_uint32_t>
 801e5e4:	4028      	ands	r0, r5
 801e5e6:	b2c5      	uxtb	r5, r0
 801e5e8:	e7d8      	b.n	801e59c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801e5ea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801e5ee:	4648      	mov	r0, r9
 801e5f0:	f7f4 fae4 	bl	8012bbc <ucdr_serialize_uint32_t>
 801e5f4:	4028      	ands	r0, r5
 801e5f6:	b2c5      	uxtb	r5, r0
 801e5f8:	e7c7      	b.n	801e58a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801e5fa:	bf00      	nop

0801e5fc <uxr_serialize_OBJK_DataReader_Binary>:
 801e5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5fe:	2202      	movs	r2, #2
 801e600:	460c      	mov	r4, r1
 801e602:	4606      	mov	r6, r0
 801e604:	f7fc ffac 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801e608:	4605      	mov	r5, r0
 801e60a:	78a1      	ldrb	r1, [r4, #2]
 801e60c:	4630      	mov	r0, r6
 801e60e:	f7f4 f891 	bl	8012734 <ucdr_serialize_bool>
 801e612:	78a3      	ldrb	r3, [r4, #2]
 801e614:	4005      	ands	r5, r0
 801e616:	b2ed      	uxtb	r5, r5
 801e618:	b90b      	cbnz	r3, 801e61e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801e61a:	4628      	mov	r0, r5
 801e61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e61e:	f104 0108 	add.w	r1, r4, #8
 801e622:	4630      	mov	r0, r6
 801e624:	f7ff ff96 	bl	801e554 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801e628:	4607      	mov	r7, r0
 801e62a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801e62e:	4630      	mov	r0, r6
 801e630:	f7f4 f880 	bl	8012734 <ucdr_serialize_bool>
 801e634:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801e638:	4038      	ands	r0, r7
 801e63a:	b2c7      	uxtb	r7, r0
 801e63c:	b95b      	cbnz	r3, 801e656 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801e63e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801e642:	4630      	mov	r0, r6
 801e644:	f7f4 f876 	bl	8012734 <ucdr_serialize_bool>
 801e648:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801e64c:	4007      	ands	r7, r0
 801e64e:	b94b      	cbnz	r3, 801e664 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801e650:	403d      	ands	r5, r7
 801e652:	4628      	mov	r0, r5
 801e654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e656:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801e65a:	4630      	mov	r0, r6
 801e65c:	f7f4 fd04 	bl	8013068 <ucdr_serialize_uint64_t>
 801e660:	4007      	ands	r7, r0
 801e662:	e7ec      	b.n	801e63e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801e664:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801e666:	4630      	mov	r0, r6
 801e668:	f001 fa4e 	bl	801fb08 <ucdr_serialize_string>
 801e66c:	4007      	ands	r7, r0
 801e66e:	b2ff      	uxtb	r7, r7
 801e670:	e7ee      	b.n	801e650 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801e672:	bf00      	nop

0801e674 <uxr_serialize_OBJK_DataWriter_Binary>:
 801e674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e676:	2202      	movs	r2, #2
 801e678:	460d      	mov	r5, r1
 801e67a:	4606      	mov	r6, r0
 801e67c:	f7fc ff70 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801e680:	4604      	mov	r4, r0
 801e682:	78a9      	ldrb	r1, [r5, #2]
 801e684:	4630      	mov	r0, r6
 801e686:	f7f4 f855 	bl	8012734 <ucdr_serialize_bool>
 801e68a:	78ab      	ldrb	r3, [r5, #2]
 801e68c:	4004      	ands	r4, r0
 801e68e:	b2e4      	uxtb	r4, r4
 801e690:	b90b      	cbnz	r3, 801e696 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801e692:	4620      	mov	r0, r4
 801e694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e696:	f105 0108 	add.w	r1, r5, #8
 801e69a:	4630      	mov	r0, r6
 801e69c:	f7ff ff5a 	bl	801e554 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801e6a0:	4607      	mov	r7, r0
 801e6a2:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801e6a6:	4630      	mov	r0, r6
 801e6a8:	f7f4 f844 	bl	8012734 <ucdr_serialize_bool>
 801e6ac:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801e6b0:	4038      	ands	r0, r7
 801e6b2:	b2c7      	uxtb	r7, r0
 801e6b4:	b913      	cbnz	r3, 801e6bc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801e6b6:	403c      	ands	r4, r7
 801e6b8:	4620      	mov	r0, r4
 801e6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e6bc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801e6c0:	4630      	mov	r0, r6
 801e6c2:	f7f4 fcd1 	bl	8013068 <ucdr_serialize_uint64_t>
 801e6c6:	4007      	ands	r7, r0
 801e6c8:	e7f5      	b.n	801e6b6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801e6ca:	bf00      	nop

0801e6cc <uxr_serialize_OBJK_Replier_Binary>:
 801e6cc:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801e6d0:	460f      	mov	r7, r1
 801e6d2:	4680      	mov	r8, r0
 801e6d4:	6809      	ldr	r1, [r1, #0]
 801e6d6:	f001 fa17 	bl	801fb08 <ucdr_serialize_string>
 801e6da:	4605      	mov	r5, r0
 801e6dc:	6879      	ldr	r1, [r7, #4]
 801e6de:	4640      	mov	r0, r8
 801e6e0:	f001 fa12 	bl	801fb08 <ucdr_serialize_string>
 801e6e4:	4005      	ands	r5, r0
 801e6e6:	68b9      	ldr	r1, [r7, #8]
 801e6e8:	4640      	mov	r0, r8
 801e6ea:	b2ec      	uxtb	r4, r5
 801e6ec:	f001 fa0c 	bl	801fb08 <ucdr_serialize_string>
 801e6f0:	7b39      	ldrb	r1, [r7, #12]
 801e6f2:	4004      	ands	r4, r0
 801e6f4:	4640      	mov	r0, r8
 801e6f6:	f7f4 f81d 	bl	8012734 <ucdr_serialize_bool>
 801e6fa:	7b3b      	ldrb	r3, [r7, #12]
 801e6fc:	4004      	ands	r4, r0
 801e6fe:	b94b      	cbnz	r3, 801e714 <uxr_serialize_OBJK_Replier_Binary+0x48>
 801e700:	7d39      	ldrb	r1, [r7, #20]
 801e702:	4640      	mov	r0, r8
 801e704:	f7f4 f816 	bl	8012734 <ucdr_serialize_bool>
 801e708:	7d3b      	ldrb	r3, [r7, #20]
 801e70a:	4004      	ands	r4, r0
 801e70c:	b943      	cbnz	r3, 801e720 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801e70e:	4620      	mov	r0, r4
 801e710:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801e714:	6939      	ldr	r1, [r7, #16]
 801e716:	4640      	mov	r0, r8
 801e718:	f001 f9f6 	bl	801fb08 <ucdr_serialize_string>
 801e71c:	4004      	ands	r4, r0
 801e71e:	e7ef      	b.n	801e700 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801e720:	69b9      	ldr	r1, [r7, #24]
 801e722:	4640      	mov	r0, r8
 801e724:	f001 f9f0 	bl	801fb08 <ucdr_serialize_string>
 801e728:	4004      	ands	r4, r0
 801e72a:	b2e4      	uxtb	r4, r4
 801e72c:	4620      	mov	r0, r4
 801e72e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801e732:	bf00      	nop

0801e734 <uxr_deserialize_ObjectVariant>:
 801e734:	b570      	push	{r4, r5, r6, lr}
 801e736:	4605      	mov	r5, r0
 801e738:	460e      	mov	r6, r1
 801e73a:	f7f4 f83f 	bl	80127bc <ucdr_deserialize_uint8_t>
 801e73e:	b168      	cbz	r0, 801e75c <uxr_deserialize_ObjectVariant+0x28>
 801e740:	7833      	ldrb	r3, [r6, #0]
 801e742:	4604      	mov	r4, r0
 801e744:	3b01      	subs	r3, #1
 801e746:	2b0d      	cmp	r3, #13
 801e748:	d809      	bhi.n	801e75e <uxr_deserialize_ObjectVariant+0x2a>
 801e74a:	e8df f003 	tbb	[pc, r3]
 801e74e:	0a41      	.short	0x0a41
 801e750:	0a0a2323 	.word	0x0a0a2323
 801e754:	10080a0a 	.word	0x10080a0a
 801e758:	565c1010 	.word	0x565c1010
 801e75c:	2400      	movs	r4, #0
 801e75e:	4620      	mov	r0, r4
 801e760:	bd70      	pop	{r4, r5, r6, pc}
 801e762:	1d31      	adds	r1, r6, #4
 801e764:	4628      	mov	r0, r5
 801e766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e76a:	f7ff bd21 	b.w	801e1b0 <uxr_deserialize_DATAWRITER_Representation>
 801e76e:	1d31      	adds	r1, r6, #4
 801e770:	4628      	mov	r0, r5
 801e772:	f7f4 f823 	bl	80127bc <ucdr_deserialize_uint8_t>
 801e776:	2800      	cmp	r0, #0
 801e778:	d0f0      	beq.n	801e75c <uxr_deserialize_ObjectVariant+0x28>
 801e77a:	7933      	ldrb	r3, [r6, #4]
 801e77c:	2b01      	cmp	r3, #1
 801e77e:	d001      	beq.n	801e784 <uxr_deserialize_ObjectVariant+0x50>
 801e780:	2b02      	cmp	r3, #2
 801e782:	d1ec      	bne.n	801e75e <uxr_deserialize_ObjectVariant+0x2a>
 801e784:	68b1      	ldr	r1, [r6, #8]
 801e786:	4628      	mov	r0, r5
 801e788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e78c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e790:	f001 b9ca 	b.w	801fb28 <ucdr_deserialize_string>
 801e794:	1d31      	adds	r1, r6, #4
 801e796:	4628      	mov	r0, r5
 801e798:	f7f4 f810 	bl	80127bc <ucdr_deserialize_uint8_t>
 801e79c:	4604      	mov	r4, r0
 801e79e:	b170      	cbz	r0, 801e7be <uxr_deserialize_ObjectVariant+0x8a>
 801e7a0:	7933      	ldrb	r3, [r6, #4]
 801e7a2:	2b02      	cmp	r3, #2
 801e7a4:	d04c      	beq.n	801e840 <uxr_deserialize_ObjectVariant+0x10c>
 801e7a6:	2b03      	cmp	r3, #3
 801e7a8:	d109      	bne.n	801e7be <uxr_deserialize_ObjectVariant+0x8a>
 801e7aa:	f106 0308 	add.w	r3, r6, #8
 801e7ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e7b2:	f106 010c 	add.w	r1, r6, #12
 801e7b6:	4628      	mov	r0, r5
 801e7b8:	f7f7 f8b4 	bl	8015924 <ucdr_deserialize_sequence_uint8_t>
 801e7bc:	4604      	mov	r4, r0
 801e7be:	2202      	movs	r2, #2
 801e7c0:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801e7c4:	4628      	mov	r0, r5
 801e7c6:	f7fc ff2f 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801e7ca:	4020      	ands	r0, r4
 801e7cc:	b2c4      	uxtb	r4, r0
 801e7ce:	e7c6      	b.n	801e75e <uxr_deserialize_ObjectVariant+0x2a>
 801e7d0:	1d31      	adds	r1, r6, #4
 801e7d2:	4628      	mov	r0, r5
 801e7d4:	f7f3 fff2 	bl	80127bc <ucdr_deserialize_uint8_t>
 801e7d8:	4604      	mov	r4, r0
 801e7da:	b130      	cbz	r0, 801e7ea <uxr_deserialize_ObjectVariant+0xb6>
 801e7dc:	7933      	ldrb	r3, [r6, #4]
 801e7de:	2b02      	cmp	r3, #2
 801e7e0:	d036      	beq.n	801e850 <uxr_deserialize_ObjectVariant+0x11c>
 801e7e2:	2b03      	cmp	r3, #3
 801e7e4:	d03c      	beq.n	801e860 <uxr_deserialize_ObjectVariant+0x12c>
 801e7e6:	2b01      	cmp	r3, #1
 801e7e8:	d032      	beq.n	801e850 <uxr_deserialize_ObjectVariant+0x11c>
 801e7ea:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801e7ee:	4628      	mov	r0, r5
 801e7f0:	f7f4 fd8a 	bl	8013308 <ucdr_deserialize_int16_t>
 801e7f4:	4020      	ands	r0, r4
 801e7f6:	b2c4      	uxtb	r4, r0
 801e7f8:	e7b1      	b.n	801e75e <uxr_deserialize_ObjectVariant+0x2a>
 801e7fa:	1d31      	adds	r1, r6, #4
 801e7fc:	4628      	mov	r0, r5
 801e7fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e802:	f7ff bb8b 	b.w	801df1c <uxr_deserialize_CLIENT_Representation>
 801e806:	2204      	movs	r2, #4
 801e808:	4628      	mov	r0, r5
 801e80a:	18b1      	adds	r1, r6, r2
 801e80c:	f7fc ff0c 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801e810:	4604      	mov	r4, r0
 801e812:	2202      	movs	r2, #2
 801e814:	f106 0108 	add.w	r1, r6, #8
 801e818:	4628      	mov	r0, r5
 801e81a:	f7fc ff05 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801e81e:	4004      	ands	r4, r0
 801e820:	2202      	movs	r2, #2
 801e822:	f106 010a 	add.w	r1, r6, #10
 801e826:	4628      	mov	r0, r5
 801e828:	b2e4      	uxtb	r4, r4
 801e82a:	f7fc fefd 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801e82e:	4603      	mov	r3, r0
 801e830:	f106 010c 	add.w	r1, r6, #12
 801e834:	4628      	mov	r0, r5
 801e836:	401c      	ands	r4, r3
 801e838:	f7f3 ff92 	bl	8012760 <ucdr_deserialize_bool>
 801e83c:	4004      	ands	r4, r0
 801e83e:	e78e      	b.n	801e75e <uxr_deserialize_ObjectVariant+0x2a>
 801e840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e844:	68b1      	ldr	r1, [r6, #8]
 801e846:	4628      	mov	r0, r5
 801e848:	f001 f96e 	bl	801fb28 <ucdr_deserialize_string>
 801e84c:	4604      	mov	r4, r0
 801e84e:	e7b6      	b.n	801e7be <uxr_deserialize_ObjectVariant+0x8a>
 801e850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e854:	68b1      	ldr	r1, [r6, #8]
 801e856:	4628      	mov	r0, r5
 801e858:	f001 f966 	bl	801fb28 <ucdr_deserialize_string>
 801e85c:	4604      	mov	r4, r0
 801e85e:	e7c4      	b.n	801e7ea <uxr_deserialize_ObjectVariant+0xb6>
 801e860:	f106 0308 	add.w	r3, r6, #8
 801e864:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e868:	f106 010c 	add.w	r1, r6, #12
 801e86c:	4628      	mov	r0, r5
 801e86e:	f7f7 f859 	bl	8015924 <ucdr_deserialize_sequence_uint8_t>
 801e872:	4604      	mov	r4, r0
 801e874:	e7b9      	b.n	801e7ea <uxr_deserialize_ObjectVariant+0xb6>
 801e876:	bf00      	nop

0801e878 <uxr_deserialize_BaseObjectRequest>:
 801e878:	b570      	push	{r4, r5, r6, lr}
 801e87a:	2202      	movs	r2, #2
 801e87c:	4605      	mov	r5, r0
 801e87e:	460e      	mov	r6, r1
 801e880:	f7fc fed2 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801e884:	2202      	movs	r2, #2
 801e886:	4604      	mov	r4, r0
 801e888:	4628      	mov	r0, r5
 801e88a:	18b1      	adds	r1, r6, r2
 801e88c:	f7fc fecc 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801e890:	4020      	ands	r0, r4
 801e892:	b2c0      	uxtb	r0, r0
 801e894:	bd70      	pop	{r4, r5, r6, pc}
 801e896:	bf00      	nop

0801e898 <uxr_serialize_ActivityInfoVariant>:
 801e898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e89c:	460e      	mov	r6, r1
 801e89e:	7809      	ldrb	r1, [r1, #0]
 801e8a0:	4680      	mov	r8, r0
 801e8a2:	f7f3 ff75 	bl	8012790 <ucdr_serialize_uint8_t>
 801e8a6:	4607      	mov	r7, r0
 801e8a8:	b138      	cbz	r0, 801e8ba <uxr_serialize_ActivityInfoVariant+0x22>
 801e8aa:	7833      	ldrb	r3, [r6, #0]
 801e8ac:	2b06      	cmp	r3, #6
 801e8ae:	f000 8081 	beq.w	801e9b4 <uxr_serialize_ActivityInfoVariant+0x11c>
 801e8b2:	2b0d      	cmp	r3, #13
 801e8b4:	d014      	beq.n	801e8e0 <uxr_serialize_ActivityInfoVariant+0x48>
 801e8b6:	2b05      	cmp	r3, #5
 801e8b8:	d002      	beq.n	801e8c0 <uxr_serialize_ActivityInfoVariant+0x28>
 801e8ba:	4638      	mov	r0, r7
 801e8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8c0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801e8c4:	4640      	mov	r0, r8
 801e8c6:	f7f4 fc9f 	bl	8013208 <ucdr_serialize_int16_t>
 801e8ca:	4607      	mov	r7, r0
 801e8cc:	4640      	mov	r0, r8
 801e8ce:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801e8d2:	f7f4 fbc9 	bl	8013068 <ucdr_serialize_uint64_t>
 801e8d6:	4038      	ands	r0, r7
 801e8d8:	b2c7      	uxtb	r7, r0
 801e8da:	4638      	mov	r0, r7
 801e8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8e0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801e8e4:	4640      	mov	r0, r8
 801e8e6:	f7f4 fc8f 	bl	8013208 <ucdr_serialize_int16_t>
 801e8ea:	68f1      	ldr	r1, [r6, #12]
 801e8ec:	4607      	mov	r7, r0
 801e8ee:	4640      	mov	r0, r8
 801e8f0:	f7f4 f964 	bl	8012bbc <ucdr_serialize_uint32_t>
 801e8f4:	68f3      	ldr	r3, [r6, #12]
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	d0ed      	beq.n	801e8d6 <uxr_serialize_ActivityInfoVariant+0x3e>
 801e8fa:	b318      	cbz	r0, 801e944 <uxr_serialize_ActivityInfoVariant+0xac>
 801e8fc:	f106 090c 	add.w	r9, r6, #12
 801e900:	2400      	movs	r4, #0
 801e902:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801e906:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801e90a:	7c29      	ldrb	r1, [r5, #16]
 801e90c:	4640      	mov	r0, r8
 801e90e:	f7f3 ff3f 	bl	8012790 <ucdr_serialize_uint8_t>
 801e912:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801e916:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801e91a:	2800      	cmp	r0, #0
 801e91c:	d051      	beq.n	801e9c2 <uxr_serialize_ActivityInfoVariant+0x12a>
 801e91e:	7c2b      	ldrb	r3, [r5, #16]
 801e920:	00c9      	lsls	r1, r1, #3
 801e922:	2b03      	cmp	r3, #3
 801e924:	d854      	bhi.n	801e9d0 <uxr_serialize_ActivityInfoVariant+0x138>
 801e926:	e8df f003 	tbb	[pc, r3]
 801e92a:	2133      	.short	0x2133
 801e92c:	020f      	.short	0x020f
 801e92e:	4449      	add	r1, r9
 801e930:	4640      	mov	r0, r8
 801e932:	6889      	ldr	r1, [r1, #8]
 801e934:	f001 f8e8 	bl	801fb08 <ucdr_serialize_string>
 801e938:	3401      	adds	r4, #1
 801e93a:	68f2      	ldr	r2, [r6, #12]
 801e93c:	4294      	cmp	r4, r2
 801e93e:	d244      	bcs.n	801e9ca <uxr_serialize_ActivityInfoVariant+0x132>
 801e940:	2800      	cmp	r0, #0
 801e942:	d1de      	bne.n	801e902 <uxr_serialize_ActivityInfoVariant+0x6a>
 801e944:	2700      	movs	r7, #0
 801e946:	e7b8      	b.n	801e8ba <uxr_serialize_ActivityInfoVariant+0x22>
 801e948:	3108      	adds	r1, #8
 801e94a:	44a2      	add	sl, r4
 801e94c:	2210      	movs	r2, #16
 801e94e:	4640      	mov	r0, r8
 801e950:	4449      	add	r1, r9
 801e952:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801e956:	f7fc fe03 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801e95a:	4605      	mov	r5, r0
 801e95c:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801e960:	4640      	mov	r0, r8
 801e962:	f7f4 f92b 	bl	8012bbc <ucdr_serialize_uint32_t>
 801e966:	4028      	ands	r0, r5
 801e968:	b2c0      	uxtb	r0, r0
 801e96a:	e7e5      	b.n	801e938 <uxr_serialize_ActivityInfoVariant+0xa0>
 801e96c:	3108      	adds	r1, #8
 801e96e:	44a2      	add	sl, r4
 801e970:	2204      	movs	r2, #4
 801e972:	4640      	mov	r0, r8
 801e974:	4449      	add	r1, r9
 801e976:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801e97a:	f7fc fdf1 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801e97e:	4605      	mov	r5, r0
 801e980:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801e984:	4640      	mov	r0, r8
 801e986:	f7f3 ff2f 	bl	80127e8 <ucdr_serialize_uint16_t>
 801e98a:	4028      	ands	r0, r5
 801e98c:	b2c0      	uxtb	r0, r0
 801e98e:	e7d3      	b.n	801e938 <uxr_serialize_ActivityInfoVariant+0xa0>
 801e990:	3108      	adds	r1, #8
 801e992:	44a2      	add	sl, r4
 801e994:	2202      	movs	r2, #2
 801e996:	4640      	mov	r0, r8
 801e998:	4449      	add	r1, r9
 801e99a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801e99e:	f7fc fddf 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801e9a2:	4605      	mov	r5, r0
 801e9a4:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801e9a8:	4640      	mov	r0, r8
 801e9aa:	f7f3 fef1 	bl	8012790 <ucdr_serialize_uint8_t>
 801e9ae:	4028      	ands	r0, r5
 801e9b0:	b2c0      	uxtb	r0, r0
 801e9b2:	e7c1      	b.n	801e938 <uxr_serialize_ActivityInfoVariant+0xa0>
 801e9b4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801e9b8:	4640      	mov	r0, r8
 801e9ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e9be:	f7f4 bc23 	b.w	8013208 <ucdr_serialize_int16_t>
 801e9c2:	3401      	adds	r4, #1
 801e9c4:	68f2      	ldr	r2, [r6, #12]
 801e9c6:	42a2      	cmp	r2, r4
 801e9c8:	d8bc      	bhi.n	801e944 <uxr_serialize_ActivityInfoVariant+0xac>
 801e9ca:	4007      	ands	r7, r0
 801e9cc:	b2ff      	uxtb	r7, r7
 801e9ce:	e774      	b.n	801e8ba <uxr_serialize_ActivityInfoVariant+0x22>
 801e9d0:	3401      	adds	r4, #1
 801e9d2:	68f3      	ldr	r3, [r6, #12]
 801e9d4:	3518      	adds	r5, #24
 801e9d6:	429c      	cmp	r4, r3
 801e9d8:	d397      	bcc.n	801e90a <uxr_serialize_ActivityInfoVariant+0x72>
 801e9da:	e76e      	b.n	801e8ba <uxr_serialize_ActivityInfoVariant+0x22>

0801e9dc <uxr_deserialize_BaseObjectReply>:
 801e9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9e0:	2202      	movs	r2, #2
 801e9e2:	4606      	mov	r6, r0
 801e9e4:	460f      	mov	r7, r1
 801e9e6:	f7fc fe1f 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801e9ea:	2202      	movs	r2, #2
 801e9ec:	4605      	mov	r5, r0
 801e9ee:	4630      	mov	r0, r6
 801e9f0:	18b9      	adds	r1, r7, r2
 801e9f2:	f7fc fe19 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801e9f6:	4680      	mov	r8, r0
 801e9f8:	1d39      	adds	r1, r7, #4
 801e9fa:	4630      	mov	r0, r6
 801e9fc:	f7f3 fede 	bl	80127bc <ucdr_deserialize_uint8_t>
 801ea00:	ea05 0508 	and.w	r5, r5, r8
 801ea04:	4604      	mov	r4, r0
 801ea06:	1d79      	adds	r1, r7, #5
 801ea08:	4630      	mov	r0, r6
 801ea0a:	402c      	ands	r4, r5
 801ea0c:	f7f3 fed6 	bl	80127bc <ucdr_deserialize_uint8_t>
 801ea10:	4020      	ands	r0, r4
 801ea12:	b2c0      	uxtb	r0, r0
 801ea14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ea18 <uxr_serialize_ReadSpecification>:
 801ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea1a:	460e      	mov	r6, r1
 801ea1c:	4607      	mov	r7, r0
 801ea1e:	7809      	ldrb	r1, [r1, #0]
 801ea20:	f7f3 feb6 	bl	8012790 <ucdr_serialize_uint8_t>
 801ea24:	4604      	mov	r4, r0
 801ea26:	7871      	ldrb	r1, [r6, #1]
 801ea28:	4638      	mov	r0, r7
 801ea2a:	f7f3 feb1 	bl	8012790 <ucdr_serialize_uint8_t>
 801ea2e:	4004      	ands	r4, r0
 801ea30:	78b1      	ldrb	r1, [r6, #2]
 801ea32:	4638      	mov	r0, r7
 801ea34:	f7f3 fe7e 	bl	8012734 <ucdr_serialize_bool>
 801ea38:	78b3      	ldrb	r3, [r6, #2]
 801ea3a:	b2e4      	uxtb	r4, r4
 801ea3c:	4004      	ands	r4, r0
 801ea3e:	b943      	cbnz	r3, 801ea52 <uxr_serialize_ReadSpecification+0x3a>
 801ea40:	7a31      	ldrb	r1, [r6, #8]
 801ea42:	4638      	mov	r0, r7
 801ea44:	f7f3 fe76 	bl	8012734 <ucdr_serialize_bool>
 801ea48:	7a33      	ldrb	r3, [r6, #8]
 801ea4a:	4004      	ands	r4, r0
 801ea4c:	b93b      	cbnz	r3, 801ea5e <uxr_serialize_ReadSpecification+0x46>
 801ea4e:	4620      	mov	r0, r4
 801ea50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea52:	6871      	ldr	r1, [r6, #4]
 801ea54:	4638      	mov	r0, r7
 801ea56:	f001 f857 	bl	801fb08 <ucdr_serialize_string>
 801ea5a:	4004      	ands	r4, r0
 801ea5c:	e7f0      	b.n	801ea40 <uxr_serialize_ReadSpecification+0x28>
 801ea5e:	8971      	ldrh	r1, [r6, #10]
 801ea60:	4638      	mov	r0, r7
 801ea62:	f7f3 fec1 	bl	80127e8 <ucdr_serialize_uint16_t>
 801ea66:	4605      	mov	r5, r0
 801ea68:	89b1      	ldrh	r1, [r6, #12]
 801ea6a:	4638      	mov	r0, r7
 801ea6c:	f7f3 febc 	bl	80127e8 <ucdr_serialize_uint16_t>
 801ea70:	4005      	ands	r5, r0
 801ea72:	89f1      	ldrh	r1, [r6, #14]
 801ea74:	4638      	mov	r0, r7
 801ea76:	b2ed      	uxtb	r5, r5
 801ea78:	f7f3 feb6 	bl	80127e8 <ucdr_serialize_uint16_t>
 801ea7c:	8a31      	ldrh	r1, [r6, #16]
 801ea7e:	4025      	ands	r5, r4
 801ea80:	4604      	mov	r4, r0
 801ea82:	4638      	mov	r0, r7
 801ea84:	4025      	ands	r5, r4
 801ea86:	f7f3 feaf 	bl	80127e8 <ucdr_serialize_uint16_t>
 801ea8a:	ea00 0405 	and.w	r4, r0, r5
 801ea8e:	4620      	mov	r0, r4
 801ea90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea92:	bf00      	nop

0801ea94 <uxr_serialize_CREATE_CLIENT_Payload>:
 801ea94:	f7ff b9ea 	b.w	801de6c <uxr_serialize_CLIENT_Representation>

0801ea98 <uxr_serialize_CREATE_Payload>:
 801ea98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea9a:	2202      	movs	r2, #2
 801ea9c:	4607      	mov	r7, r0
 801ea9e:	460e      	mov	r6, r1
 801eaa0:	f7fc fd5e 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801eaa4:	2202      	movs	r2, #2
 801eaa6:	4605      	mov	r5, r0
 801eaa8:	4638      	mov	r0, r7
 801eaaa:	18b1      	adds	r1, r6, r2
 801eaac:	f7fc fd58 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801eab0:	7931      	ldrb	r1, [r6, #4]
 801eab2:	4604      	mov	r4, r0
 801eab4:	4638      	mov	r0, r7
 801eab6:	f7f3 fe6b 	bl	8012790 <ucdr_serialize_uint8_t>
 801eaba:	b170      	cbz	r0, 801eada <uxr_serialize_CREATE_Payload+0x42>
 801eabc:	7933      	ldrb	r3, [r6, #4]
 801eabe:	402c      	ands	r4, r5
 801eac0:	3b01      	subs	r3, #1
 801eac2:	b2e4      	uxtb	r4, r4
 801eac4:	2b0d      	cmp	r3, #13
 801eac6:	d809      	bhi.n	801eadc <uxr_serialize_CREATE_Payload+0x44>
 801eac8:	e8df f003 	tbb	[pc, r3]
 801eacc:	23230a4c 	.word	0x23230a4c
 801ead0:	0a0a0a0a 	.word	0x0a0a0a0a
 801ead4:	12121208 	.word	0x12121208
 801ead8:	3e45      	.short	0x3e45
 801eada:	2400      	movs	r4, #0
 801eadc:	4620      	mov	r0, r4
 801eade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eae0:	f106 0108 	add.w	r1, r6, #8
 801eae4:	4638      	mov	r0, r7
 801eae6:	f7ff fac7 	bl	801e078 <uxr_serialize_DATAWRITER_Representation>
 801eaea:	4004      	ands	r4, r0
 801eaec:	4620      	mov	r0, r4
 801eaee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eaf0:	7a31      	ldrb	r1, [r6, #8]
 801eaf2:	4638      	mov	r0, r7
 801eaf4:	f7f3 fe4c 	bl	8012790 <ucdr_serialize_uint8_t>
 801eaf8:	2800      	cmp	r0, #0
 801eafa:	d0ee      	beq.n	801eada <uxr_serialize_CREATE_Payload+0x42>
 801eafc:	7a33      	ldrb	r3, [r6, #8]
 801eafe:	2b01      	cmp	r3, #1
 801eb00:	d001      	beq.n	801eb06 <uxr_serialize_CREATE_Payload+0x6e>
 801eb02:	2b02      	cmp	r3, #2
 801eb04:	d1ea      	bne.n	801eadc <uxr_serialize_CREATE_Payload+0x44>
 801eb06:	68f1      	ldr	r1, [r6, #12]
 801eb08:	4638      	mov	r0, r7
 801eb0a:	f000 fffd 	bl	801fb08 <ucdr_serialize_string>
 801eb0e:	4004      	ands	r4, r0
 801eb10:	e7e4      	b.n	801eadc <uxr_serialize_CREATE_Payload+0x44>
 801eb12:	7a31      	ldrb	r1, [r6, #8]
 801eb14:	4638      	mov	r0, r7
 801eb16:	f7f3 fe3b 	bl	8012790 <ucdr_serialize_uint8_t>
 801eb1a:	4605      	mov	r5, r0
 801eb1c:	b158      	cbz	r0, 801eb36 <uxr_serialize_CREATE_Payload+0x9e>
 801eb1e:	7a33      	ldrb	r3, [r6, #8]
 801eb20:	2b02      	cmp	r3, #2
 801eb22:	d034      	beq.n	801eb8e <uxr_serialize_CREATE_Payload+0xf6>
 801eb24:	2b03      	cmp	r3, #3
 801eb26:	d106      	bne.n	801eb36 <uxr_serialize_CREATE_Payload+0x9e>
 801eb28:	68f2      	ldr	r2, [r6, #12]
 801eb2a:	f106 0110 	add.w	r1, r6, #16
 801eb2e:	4638      	mov	r0, r7
 801eb30:	f7f6 fee6 	bl	8015900 <ucdr_serialize_sequence_uint8_t>
 801eb34:	4605      	mov	r5, r0
 801eb36:	2202      	movs	r2, #2
 801eb38:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801eb3c:	4638      	mov	r0, r7
 801eb3e:	f7fc fd0f 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801eb42:	4028      	ands	r0, r5
 801eb44:	4004      	ands	r4, r0
 801eb46:	e7c9      	b.n	801eadc <uxr_serialize_CREATE_Payload+0x44>
 801eb48:	f106 0108 	add.w	r1, r6, #8
 801eb4c:	4638      	mov	r0, r7
 801eb4e:	f7ff f98d 	bl	801de6c <uxr_serialize_CLIENT_Representation>
 801eb52:	4004      	ands	r4, r0
 801eb54:	e7c2      	b.n	801eadc <uxr_serialize_CREATE_Payload+0x44>
 801eb56:	f106 0108 	add.w	r1, r6, #8
 801eb5a:	4638      	mov	r0, r7
 801eb5c:	f7ff fa42 	bl	801dfe4 <uxr_serialize_AGENT_Representation>
 801eb60:	4004      	ands	r4, r0
 801eb62:	e7bb      	b.n	801eadc <uxr_serialize_CREATE_Payload+0x44>
 801eb64:	7a31      	ldrb	r1, [r6, #8]
 801eb66:	4638      	mov	r0, r7
 801eb68:	f7f3 fe12 	bl	8012790 <ucdr_serialize_uint8_t>
 801eb6c:	4605      	mov	r5, r0
 801eb6e:	b130      	cbz	r0, 801eb7e <uxr_serialize_CREATE_Payload+0xe6>
 801eb70:	7a33      	ldrb	r3, [r6, #8]
 801eb72:	2b02      	cmp	r3, #2
 801eb74:	d011      	beq.n	801eb9a <uxr_serialize_CREATE_Payload+0x102>
 801eb76:	2b03      	cmp	r3, #3
 801eb78:	d015      	beq.n	801eba6 <uxr_serialize_CREATE_Payload+0x10e>
 801eb7a:	2b01      	cmp	r3, #1
 801eb7c:	d00d      	beq.n	801eb9a <uxr_serialize_CREATE_Payload+0x102>
 801eb7e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801eb82:	4638      	mov	r0, r7
 801eb84:	f7f4 fb40 	bl	8013208 <ucdr_serialize_int16_t>
 801eb88:	4028      	ands	r0, r5
 801eb8a:	4004      	ands	r4, r0
 801eb8c:	e7a6      	b.n	801eadc <uxr_serialize_CREATE_Payload+0x44>
 801eb8e:	68f1      	ldr	r1, [r6, #12]
 801eb90:	4638      	mov	r0, r7
 801eb92:	f000 ffb9 	bl	801fb08 <ucdr_serialize_string>
 801eb96:	4605      	mov	r5, r0
 801eb98:	e7cd      	b.n	801eb36 <uxr_serialize_CREATE_Payload+0x9e>
 801eb9a:	68f1      	ldr	r1, [r6, #12]
 801eb9c:	4638      	mov	r0, r7
 801eb9e:	f000 ffb3 	bl	801fb08 <ucdr_serialize_string>
 801eba2:	4605      	mov	r5, r0
 801eba4:	e7eb      	b.n	801eb7e <uxr_serialize_CREATE_Payload+0xe6>
 801eba6:	68f2      	ldr	r2, [r6, #12]
 801eba8:	f106 0110 	add.w	r1, r6, #16
 801ebac:	4638      	mov	r0, r7
 801ebae:	f7f6 fea7 	bl	8015900 <ucdr_serialize_sequence_uint8_t>
 801ebb2:	4605      	mov	r5, r0
 801ebb4:	e7e3      	b.n	801eb7e <uxr_serialize_CREATE_Payload+0xe6>
 801ebb6:	bf00      	nop

0801ebb8 <uxr_deserialize_GET_INFO_Payload>:
 801ebb8:	b570      	push	{r4, r5, r6, lr}
 801ebba:	2202      	movs	r2, #2
 801ebbc:	4605      	mov	r5, r0
 801ebbe:	460e      	mov	r6, r1
 801ebc0:	f7fc fd32 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801ebc4:	2202      	movs	r2, #2
 801ebc6:	4604      	mov	r4, r0
 801ebc8:	4628      	mov	r0, r5
 801ebca:	18b1      	adds	r1, r6, r2
 801ebcc:	f7fc fd2c 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801ebd0:	4603      	mov	r3, r0
 801ebd2:	1d31      	adds	r1, r6, #4
 801ebd4:	4628      	mov	r0, r5
 801ebd6:	401c      	ands	r4, r3
 801ebd8:	f7f4 f920 	bl	8012e1c <ucdr_deserialize_uint32_t>
 801ebdc:	b2e4      	uxtb	r4, r4
 801ebde:	4020      	ands	r0, r4
 801ebe0:	bd70      	pop	{r4, r5, r6, pc}
 801ebe2:	bf00      	nop

0801ebe4 <uxr_serialize_DELETE_Payload>:
 801ebe4:	b570      	push	{r4, r5, r6, lr}
 801ebe6:	2202      	movs	r2, #2
 801ebe8:	4605      	mov	r5, r0
 801ebea:	460e      	mov	r6, r1
 801ebec:	f7fc fcb8 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801ebf0:	2202      	movs	r2, #2
 801ebf2:	4604      	mov	r4, r0
 801ebf4:	4628      	mov	r0, r5
 801ebf6:	18b1      	adds	r1, r6, r2
 801ebf8:	f7fc fcb2 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801ebfc:	4020      	ands	r0, r4
 801ebfe:	b2c0      	uxtb	r0, r0
 801ec00:	bd70      	pop	{r4, r5, r6, pc}
 801ec02:	bf00      	nop

0801ec04 <uxr_deserialize_STATUS_AGENT_Payload>:
 801ec04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec08:	460e      	mov	r6, r1
 801ec0a:	4605      	mov	r5, r0
 801ec0c:	f7f3 fdd6 	bl	80127bc <ucdr_deserialize_uint8_t>
 801ec10:	4604      	mov	r4, r0
 801ec12:	1c71      	adds	r1, r6, #1
 801ec14:	4628      	mov	r0, r5
 801ec16:	f7f3 fdd1 	bl	80127bc <ucdr_deserialize_uint8_t>
 801ec1a:	2204      	movs	r2, #4
 801ec1c:	4681      	mov	r9, r0
 801ec1e:	4628      	mov	r0, r5
 801ec20:	18b1      	adds	r1, r6, r2
 801ec22:	f7fc fd01 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801ec26:	f106 0108 	add.w	r1, r6, #8
 801ec2a:	4680      	mov	r8, r0
 801ec2c:	2202      	movs	r2, #2
 801ec2e:	4628      	mov	r0, r5
 801ec30:	f7fc fcfa 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801ec34:	ea04 0309 	and.w	r3, r4, r9
 801ec38:	4607      	mov	r7, r0
 801ec3a:	2202      	movs	r2, #2
 801ec3c:	b2db      	uxtb	r3, r3
 801ec3e:	f106 010a 	add.w	r1, r6, #10
 801ec42:	4628      	mov	r0, r5
 801ec44:	ea03 0408 	and.w	r4, r3, r8
 801ec48:	f7fc fcee 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801ec4c:	4603      	mov	r3, r0
 801ec4e:	4628      	mov	r0, r5
 801ec50:	403c      	ands	r4, r7
 801ec52:	f106 010c 	add.w	r1, r6, #12
 801ec56:	461d      	mov	r5, r3
 801ec58:	f7f3 fd82 	bl	8012760 <ucdr_deserialize_bool>
 801ec5c:	4025      	ands	r5, r4
 801ec5e:	4028      	ands	r0, r5
 801ec60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801ec64 <uxr_deserialize_STATUS_Payload>:
 801ec64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec68:	2202      	movs	r2, #2
 801ec6a:	4606      	mov	r6, r0
 801ec6c:	460f      	mov	r7, r1
 801ec6e:	f7fc fcdb 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801ec72:	2202      	movs	r2, #2
 801ec74:	4605      	mov	r5, r0
 801ec76:	4630      	mov	r0, r6
 801ec78:	18b9      	adds	r1, r7, r2
 801ec7a:	f7fc fcd5 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801ec7e:	4680      	mov	r8, r0
 801ec80:	1d39      	adds	r1, r7, #4
 801ec82:	4630      	mov	r0, r6
 801ec84:	f7f3 fd9a 	bl	80127bc <ucdr_deserialize_uint8_t>
 801ec88:	ea05 0508 	and.w	r5, r5, r8
 801ec8c:	4604      	mov	r4, r0
 801ec8e:	1d79      	adds	r1, r7, #5
 801ec90:	4630      	mov	r0, r6
 801ec92:	402c      	ands	r4, r5
 801ec94:	f7f3 fd92 	bl	80127bc <ucdr_deserialize_uint8_t>
 801ec98:	4020      	ands	r0, r4
 801ec9a:	b2c0      	uxtb	r0, r0
 801ec9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801eca0 <uxr_serialize_INFO_Payload>:
 801eca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eca4:	2202      	movs	r2, #2
 801eca6:	460c      	mov	r4, r1
 801eca8:	4605      	mov	r5, r0
 801ecaa:	f7fc fc59 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801ecae:	2202      	movs	r2, #2
 801ecb0:	4680      	mov	r8, r0
 801ecb2:	4628      	mov	r0, r5
 801ecb4:	18a1      	adds	r1, r4, r2
 801ecb6:	f7fc fc53 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801ecba:	4607      	mov	r7, r0
 801ecbc:	7921      	ldrb	r1, [r4, #4]
 801ecbe:	4628      	mov	r0, r5
 801ecc0:	f7f3 fd66 	bl	8012790 <ucdr_serialize_uint8_t>
 801ecc4:	ea08 0807 	and.w	r8, r8, r7
 801ecc8:	4606      	mov	r6, r0
 801ecca:	7961      	ldrb	r1, [r4, #5]
 801eccc:	4628      	mov	r0, r5
 801ecce:	ea06 0608 	and.w	r6, r6, r8
 801ecd2:	f7f3 fd5d 	bl	8012790 <ucdr_serialize_uint8_t>
 801ecd6:	7a21      	ldrb	r1, [r4, #8]
 801ecd8:	4030      	ands	r0, r6
 801ecda:	b2c7      	uxtb	r7, r0
 801ecdc:	4628      	mov	r0, r5
 801ecde:	f7f3 fd29 	bl	8012734 <ucdr_serialize_bool>
 801ece2:	7a23      	ldrb	r3, [r4, #8]
 801ece4:	4606      	mov	r6, r0
 801ece6:	b96b      	cbnz	r3, 801ed04 <uxr_serialize_INFO_Payload+0x64>
 801ece8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801ecec:	4628      	mov	r0, r5
 801ecee:	f7f3 fd21 	bl	8012734 <ucdr_serialize_bool>
 801ecf2:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801ecf6:	4030      	ands	r0, r6
 801ecf8:	b2c6      	uxtb	r6, r0
 801ecfa:	b983      	cbnz	r3, 801ed1e <uxr_serialize_INFO_Payload+0x7e>
 801ecfc:	ea06 0007 	and.w	r0, r6, r7
 801ed00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed04:	7b21      	ldrb	r1, [r4, #12]
 801ed06:	4628      	mov	r0, r5
 801ed08:	f7f3 fd42 	bl	8012790 <ucdr_serialize_uint8_t>
 801ed0c:	b188      	cbz	r0, 801ed32 <uxr_serialize_INFO_Payload+0x92>
 801ed0e:	f104 010c 	add.w	r1, r4, #12
 801ed12:	4628      	mov	r0, r5
 801ed14:	f7ff f9d8 	bl	801e0c8 <uxr_serialize_ObjectVariant.part.0>
 801ed18:	4030      	ands	r0, r6
 801ed1a:	b2c6      	uxtb	r6, r0
 801ed1c:	e7e4      	b.n	801ece8 <uxr_serialize_INFO_Payload+0x48>
 801ed1e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801ed22:	4628      	mov	r0, r5
 801ed24:	f7ff fdb8 	bl	801e898 <uxr_serialize_ActivityInfoVariant>
 801ed28:	4006      	ands	r6, r0
 801ed2a:	ea06 0007 	and.w	r0, r6, r7
 801ed2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed32:	4606      	mov	r6, r0
 801ed34:	e7d8      	b.n	801ece8 <uxr_serialize_INFO_Payload+0x48>
 801ed36:	bf00      	nop

0801ed38 <uxr_serialize_READ_DATA_Payload>:
 801ed38:	b570      	push	{r4, r5, r6, lr}
 801ed3a:	2202      	movs	r2, #2
 801ed3c:	4605      	mov	r5, r0
 801ed3e:	460e      	mov	r6, r1
 801ed40:	f7fc fc0e 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801ed44:	2202      	movs	r2, #2
 801ed46:	4604      	mov	r4, r0
 801ed48:	4628      	mov	r0, r5
 801ed4a:	18b1      	adds	r1, r6, r2
 801ed4c:	f7fc fc08 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801ed50:	4603      	mov	r3, r0
 801ed52:	1d31      	adds	r1, r6, #4
 801ed54:	4628      	mov	r0, r5
 801ed56:	401c      	ands	r4, r3
 801ed58:	f7ff fe5e 	bl	801ea18 <uxr_serialize_ReadSpecification>
 801ed5c:	b2e4      	uxtb	r4, r4
 801ed5e:	4020      	ands	r0, r4
 801ed60:	bd70      	pop	{r4, r5, r6, pc}
 801ed62:	bf00      	nop

0801ed64 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801ed64:	b570      	push	{r4, r5, r6, lr}
 801ed66:	2202      	movs	r2, #2
 801ed68:	4605      	mov	r5, r0
 801ed6a:	460e      	mov	r6, r1
 801ed6c:	f7fc fbf8 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801ed70:	2202      	movs	r2, #2
 801ed72:	4604      	mov	r4, r0
 801ed74:	4628      	mov	r0, r5
 801ed76:	18b1      	adds	r1, r6, r2
 801ed78:	f7fc fbf2 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801ed7c:	4020      	ands	r0, r4
 801ed7e:	b2c0      	uxtb	r0, r0
 801ed80:	bd70      	pop	{r4, r5, r6, pc}
 801ed82:	bf00      	nop

0801ed84 <uxr_serialize_ACKNACK_Payload>:
 801ed84:	b570      	push	{r4, r5, r6, lr}
 801ed86:	460c      	mov	r4, r1
 801ed88:	4605      	mov	r5, r0
 801ed8a:	460e      	mov	r6, r1
 801ed8c:	f834 1b02 	ldrh.w	r1, [r4], #2
 801ed90:	f7f3 fd2a 	bl	80127e8 <ucdr_serialize_uint16_t>
 801ed94:	2202      	movs	r2, #2
 801ed96:	4621      	mov	r1, r4
 801ed98:	4604      	mov	r4, r0
 801ed9a:	4628      	mov	r0, r5
 801ed9c:	f7fc fbe0 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801eda0:	4603      	mov	r3, r0
 801eda2:	7931      	ldrb	r1, [r6, #4]
 801eda4:	4628      	mov	r0, r5
 801eda6:	401c      	ands	r4, r3
 801eda8:	f7f3 fcf2 	bl	8012790 <ucdr_serialize_uint8_t>
 801edac:	b2e4      	uxtb	r4, r4
 801edae:	4020      	ands	r0, r4
 801edb0:	bd70      	pop	{r4, r5, r6, pc}
 801edb2:	bf00      	nop

0801edb4 <uxr_deserialize_ACKNACK_Payload>:
 801edb4:	b570      	push	{r4, r5, r6, lr}
 801edb6:	460e      	mov	r6, r1
 801edb8:	4605      	mov	r5, r0
 801edba:	f7f3 fe15 	bl	80129e8 <ucdr_deserialize_uint16_t>
 801edbe:	2202      	movs	r2, #2
 801edc0:	4604      	mov	r4, r0
 801edc2:	4628      	mov	r0, r5
 801edc4:	18b1      	adds	r1, r6, r2
 801edc6:	f7fc fc2f 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801edca:	4603      	mov	r3, r0
 801edcc:	1d31      	adds	r1, r6, #4
 801edce:	4628      	mov	r0, r5
 801edd0:	401c      	ands	r4, r3
 801edd2:	f7f3 fcf3 	bl	80127bc <ucdr_deserialize_uint8_t>
 801edd6:	b2e4      	uxtb	r4, r4
 801edd8:	4020      	ands	r0, r4
 801edda:	bd70      	pop	{r4, r5, r6, pc}

0801eddc <uxr_serialize_HEARTBEAT_Payload>:
 801eddc:	b570      	push	{r4, r5, r6, lr}
 801edde:	460d      	mov	r5, r1
 801ede0:	4606      	mov	r6, r0
 801ede2:	8809      	ldrh	r1, [r1, #0]
 801ede4:	f7f3 fd00 	bl	80127e8 <ucdr_serialize_uint16_t>
 801ede8:	8869      	ldrh	r1, [r5, #2]
 801edea:	4604      	mov	r4, r0
 801edec:	4630      	mov	r0, r6
 801edee:	f7f3 fcfb 	bl	80127e8 <ucdr_serialize_uint16_t>
 801edf2:	4603      	mov	r3, r0
 801edf4:	7929      	ldrb	r1, [r5, #4]
 801edf6:	4630      	mov	r0, r6
 801edf8:	401c      	ands	r4, r3
 801edfa:	f7f3 fcc9 	bl	8012790 <ucdr_serialize_uint8_t>
 801edfe:	b2e4      	uxtb	r4, r4
 801ee00:	4020      	ands	r0, r4
 801ee02:	bd70      	pop	{r4, r5, r6, pc}

0801ee04 <uxr_deserialize_HEARTBEAT_Payload>:
 801ee04:	b570      	push	{r4, r5, r6, lr}
 801ee06:	460e      	mov	r6, r1
 801ee08:	4605      	mov	r5, r0
 801ee0a:	f7f3 fded 	bl	80129e8 <ucdr_deserialize_uint16_t>
 801ee0e:	4604      	mov	r4, r0
 801ee10:	1cb1      	adds	r1, r6, #2
 801ee12:	4628      	mov	r0, r5
 801ee14:	f7f3 fde8 	bl	80129e8 <ucdr_deserialize_uint16_t>
 801ee18:	4603      	mov	r3, r0
 801ee1a:	1d31      	adds	r1, r6, #4
 801ee1c:	4628      	mov	r0, r5
 801ee1e:	401c      	ands	r4, r3
 801ee20:	f7f3 fccc 	bl	80127bc <ucdr_deserialize_uint8_t>
 801ee24:	b2e4      	uxtb	r4, r4
 801ee26:	4020      	ands	r0, r4
 801ee28:	bd70      	pop	{r4, r5, r6, pc}
 801ee2a:	bf00      	nop

0801ee2c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801ee2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee30:	460e      	mov	r6, r1
 801ee32:	4605      	mov	r5, r0
 801ee34:	f7f4 fb74 	bl	8013520 <ucdr_deserialize_int32_t>
 801ee38:	4607      	mov	r7, r0
 801ee3a:	1d31      	adds	r1, r6, #4
 801ee3c:	4628      	mov	r0, r5
 801ee3e:	f7f3 ffed 	bl	8012e1c <ucdr_deserialize_uint32_t>
 801ee42:	4680      	mov	r8, r0
 801ee44:	f106 0108 	add.w	r1, r6, #8
 801ee48:	4628      	mov	r0, r5
 801ee4a:	f7f4 fb69 	bl	8013520 <ucdr_deserialize_int32_t>
 801ee4e:	ea07 0708 	and.w	r7, r7, r8
 801ee52:	4604      	mov	r4, r0
 801ee54:	f106 010c 	add.w	r1, r6, #12
 801ee58:	4628      	mov	r0, r5
 801ee5a:	403c      	ands	r4, r7
 801ee5c:	f7f3 ffde 	bl	8012e1c <ucdr_deserialize_uint32_t>
 801ee60:	f106 0110 	add.w	r1, r6, #16
 801ee64:	4004      	ands	r4, r0
 801ee66:	4628      	mov	r0, r5
 801ee68:	f7f4 fb5a 	bl	8013520 <ucdr_deserialize_int32_t>
 801ee6c:	4603      	mov	r3, r0
 801ee6e:	b2e4      	uxtb	r4, r4
 801ee70:	4628      	mov	r0, r5
 801ee72:	461d      	mov	r5, r3
 801ee74:	f106 0114 	add.w	r1, r6, #20
 801ee78:	f7f3 ffd0 	bl	8012e1c <ucdr_deserialize_uint32_t>
 801ee7c:	402c      	ands	r4, r5
 801ee7e:	4020      	ands	r0, r4
 801ee80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ee84 <uxr_serialize_SampleIdentity>:
 801ee84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee88:	4604      	mov	r4, r0
 801ee8a:	460d      	mov	r5, r1
 801ee8c:	220c      	movs	r2, #12
 801ee8e:	f7fc fb67 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801ee92:	2203      	movs	r2, #3
 801ee94:	f105 010c 	add.w	r1, r5, #12
 801ee98:	4607      	mov	r7, r0
 801ee9a:	4620      	mov	r0, r4
 801ee9c:	f7fc fb60 	bl	801b560 <ucdr_serialize_array_uint8_t>
 801eea0:	7be9      	ldrb	r1, [r5, #15]
 801eea2:	4680      	mov	r8, r0
 801eea4:	4620      	mov	r0, r4
 801eea6:	f7f3 fc73 	bl	8012790 <ucdr_serialize_uint8_t>
 801eeaa:	6929      	ldr	r1, [r5, #16]
 801eeac:	4606      	mov	r6, r0
 801eeae:	4620      	mov	r0, r4
 801eeb0:	f7f4 fa9e 	bl	80133f0 <ucdr_serialize_int32_t>
 801eeb4:	ea07 0708 	and.w	r7, r7, r8
 801eeb8:	4603      	mov	r3, r0
 801eeba:	4620      	mov	r0, r4
 801eebc:	403e      	ands	r6, r7
 801eebe:	6969      	ldr	r1, [r5, #20]
 801eec0:	461c      	mov	r4, r3
 801eec2:	f7f3 fe7b 	bl	8012bbc <ucdr_serialize_uint32_t>
 801eec6:	4034      	ands	r4, r6
 801eec8:	4020      	ands	r0, r4
 801eeca:	b2c0      	uxtb	r0, r0
 801eecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801eed0 <uxr_deserialize_SampleIdentity>:
 801eed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eed4:	4604      	mov	r4, r0
 801eed6:	460d      	mov	r5, r1
 801eed8:	220c      	movs	r2, #12
 801eeda:	f7fc fba5 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801eede:	2203      	movs	r2, #3
 801eee0:	f105 010c 	add.w	r1, r5, #12
 801eee4:	4607      	mov	r7, r0
 801eee6:	4620      	mov	r0, r4
 801eee8:	f7fc fb9e 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801eeec:	f105 010f 	add.w	r1, r5, #15
 801eef0:	4680      	mov	r8, r0
 801eef2:	4620      	mov	r0, r4
 801eef4:	f7f3 fc62 	bl	80127bc <ucdr_deserialize_uint8_t>
 801eef8:	f105 0110 	add.w	r1, r5, #16
 801eefc:	4606      	mov	r6, r0
 801eefe:	4620      	mov	r0, r4
 801ef00:	f7f4 fb0e 	bl	8013520 <ucdr_deserialize_int32_t>
 801ef04:	ea07 0708 	and.w	r7, r7, r8
 801ef08:	4603      	mov	r3, r0
 801ef0a:	4620      	mov	r0, r4
 801ef0c:	403e      	ands	r6, r7
 801ef0e:	f105 0114 	add.w	r1, r5, #20
 801ef12:	461c      	mov	r4, r3
 801ef14:	f7f3 ff82 	bl	8012e1c <ucdr_deserialize_uint32_t>
 801ef18:	4034      	ands	r4, r6
 801ef1a:	4020      	ands	r0, r4
 801ef1c:	b2c0      	uxtb	r0, r0
 801ef1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef22:	bf00      	nop

0801ef24 <rcl_convert_rmw_ret_to_rcl_ret>:
 801ef24:	280b      	cmp	r0, #11
 801ef26:	dc0d      	bgt.n	801ef44 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801ef28:	2800      	cmp	r0, #0
 801ef2a:	db09      	blt.n	801ef40 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801ef2c:	280b      	cmp	r0, #11
 801ef2e:	d807      	bhi.n	801ef40 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801ef30:	e8df f000 	tbb	[pc, r0]
 801ef34:	07060607 	.word	0x07060607
 801ef38:	06060606 	.word	0x06060606
 801ef3c:	07070606 	.word	0x07070606
 801ef40:	2001      	movs	r0, #1
 801ef42:	4770      	bx	lr
 801ef44:	28cb      	cmp	r0, #203	@ 0xcb
 801ef46:	bf18      	it	ne
 801ef48:	2001      	movne	r0, #1
 801ef4a:	4770      	bx	lr

0801ef4c <rcl_get_default_domain_id>:
 801ef4c:	b530      	push	{r4, r5, lr}
 801ef4e:	2300      	movs	r3, #0
 801ef50:	b083      	sub	sp, #12
 801ef52:	9300      	str	r3, [sp, #0]
 801ef54:	b1d0      	cbz	r0, 801ef8c <rcl_get_default_domain_id+0x40>
 801ef56:	4604      	mov	r4, r0
 801ef58:	4669      	mov	r1, sp
 801ef5a:	4815      	ldr	r0, [pc, #84]	@ (801efb0 <rcl_get_default_domain_id+0x64>)
 801ef5c:	f7f9 fd2c 	bl	80189b8 <rcutils_get_env>
 801ef60:	4602      	mov	r2, r0
 801ef62:	b110      	cbz	r0, 801ef6a <rcl_get_default_domain_id+0x1e>
 801ef64:	2001      	movs	r0, #1
 801ef66:	b003      	add	sp, #12
 801ef68:	bd30      	pop	{r4, r5, pc}
 801ef6a:	9b00      	ldr	r3, [sp, #0]
 801ef6c:	b18b      	cbz	r3, 801ef92 <rcl_get_default_domain_id+0x46>
 801ef6e:	7818      	ldrb	r0, [r3, #0]
 801ef70:	2800      	cmp	r0, #0
 801ef72:	d0f8      	beq.n	801ef66 <rcl_get_default_domain_id+0x1a>
 801ef74:	a901      	add	r1, sp, #4
 801ef76:	4618      	mov	r0, r3
 801ef78:	9201      	str	r2, [sp, #4]
 801ef7a:	f001 fd6b 	bl	8020a54 <strtoul>
 801ef7e:	4605      	mov	r5, r0
 801ef80:	b150      	cbz	r0, 801ef98 <rcl_get_default_domain_id+0x4c>
 801ef82:	1c43      	adds	r3, r0, #1
 801ef84:	d00d      	beq.n	801efa2 <rcl_get_default_domain_id+0x56>
 801ef86:	2000      	movs	r0, #0
 801ef88:	6025      	str	r5, [r4, #0]
 801ef8a:	e7ec      	b.n	801ef66 <rcl_get_default_domain_id+0x1a>
 801ef8c:	200b      	movs	r0, #11
 801ef8e:	b003      	add	sp, #12
 801ef90:	bd30      	pop	{r4, r5, pc}
 801ef92:	4618      	mov	r0, r3
 801ef94:	b003      	add	sp, #12
 801ef96:	bd30      	pop	{r4, r5, pc}
 801ef98:	9b01      	ldr	r3, [sp, #4]
 801ef9a:	781b      	ldrb	r3, [r3, #0]
 801ef9c:	2b00      	cmp	r3, #0
 801ef9e:	d0f2      	beq.n	801ef86 <rcl_get_default_domain_id+0x3a>
 801efa0:	e7e0      	b.n	801ef64 <rcl_get_default_domain_id+0x18>
 801efa2:	f002 f8f5 	bl	8021190 <__errno>
 801efa6:	6803      	ldr	r3, [r0, #0]
 801efa8:	2b22      	cmp	r3, #34	@ 0x22
 801efaa:	d1ec      	bne.n	801ef86 <rcl_get_default_domain_id+0x3a>
 801efac:	e7da      	b.n	801ef64 <rcl_get_default_domain_id+0x18>
 801efae:	bf00      	nop
 801efb0:	080244ac 	.word	0x080244ac

0801efb4 <rcl_expand_topic_name>:
 801efb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efb8:	b08d      	sub	sp, #52	@ 0x34
 801efba:	4698      	mov	r8, r3
 801efbc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801efbe:	9207      	str	r2, [sp, #28]
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	bf18      	it	ne
 801efc4:	f1b8 0f00 	cmpne.w	r8, #0
 801efc8:	bf0c      	ite	eq
 801efca:	2301      	moveq	r3, #1
 801efcc:	2300      	movne	r3, #0
 801efce:	2a00      	cmp	r2, #0
 801efd0:	bf08      	it	eq
 801efd2:	f043 0301 	orreq.w	r3, r3, #1
 801efd6:	2900      	cmp	r1, #0
 801efd8:	bf08      	it	eq
 801efda:	f043 0301 	orreq.w	r3, r3, #1
 801efde:	2b00      	cmp	r3, #0
 801efe0:	d13d      	bne.n	801f05e <rcl_expand_topic_name+0xaa>
 801efe2:	fab0 f280 	clz	r2, r0
 801efe6:	4604      	mov	r4, r0
 801efe8:	0952      	lsrs	r2, r2, #5
 801efea:	2800      	cmp	r0, #0
 801efec:	d037      	beq.n	801f05e <rcl_expand_topic_name+0xaa>
 801efee:	460f      	mov	r7, r1
 801eff0:	a90b      	add	r1, sp, #44	@ 0x2c
 801eff2:	f000 f9f3 	bl	801f3dc <rcl_validate_topic_name>
 801eff6:	4605      	mov	r5, r0
 801eff8:	bb68      	cbnz	r0, 801f056 <rcl_expand_topic_name+0xa2>
 801effa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801effc:	2b00      	cmp	r3, #0
 801effe:	d137      	bne.n	801f070 <rcl_expand_topic_name+0xbc>
 801f000:	4602      	mov	r2, r0
 801f002:	a90b      	add	r1, sp, #44	@ 0x2c
 801f004:	4638      	mov	r0, r7
 801f006:	f7fa f8e9 	bl	80191dc <rmw_validate_node_name>
 801f00a:	bb68      	cbnz	r0, 801f068 <rcl_expand_topic_name+0xb4>
 801f00c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d133      	bne.n	801f07a <rcl_expand_topic_name+0xc6>
 801f012:	462a      	mov	r2, r5
 801f014:	a90b      	add	r1, sp, #44	@ 0x2c
 801f016:	9807      	ldr	r0, [sp, #28]
 801f018:	f7fa f8c2 	bl	80191a0 <rmw_validate_namespace>
 801f01c:	bb20      	cbnz	r0, 801f068 <rcl_expand_topic_name+0xb4>
 801f01e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f020:	2d00      	cmp	r5, #0
 801f022:	f040 80a2 	bne.w	801f16a <rcl_expand_topic_name+0x1b6>
 801f026:	217b      	movs	r1, #123	@ 0x7b
 801f028:	4620      	mov	r0, r4
 801f02a:	f001 ffcf 	bl	8020fcc <strchr>
 801f02e:	7823      	ldrb	r3, [r4, #0]
 801f030:	4681      	mov	r9, r0
 801f032:	bb20      	cbnz	r0, 801f07e <rcl_expand_topic_name+0xca>
 801f034:	2b2f      	cmp	r3, #47	@ 0x2f
 801f036:	d122      	bne.n	801f07e <rcl_expand_topic_name+0xca>
 801f038:	ab19      	add	r3, sp, #100	@ 0x64
 801f03a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f03e:	ab16      	add	r3, sp, #88	@ 0x58
 801f040:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f044:	4620      	mov	r0, r4
 801f046:	cb0e      	ldmia	r3, {r1, r2, r3}
 801f048:	f7f9 fe18 	bl	8018c7c <rcutils_strdup>
 801f04c:	2800      	cmp	r0, #0
 801f04e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f050:	bf08      	it	eq
 801f052:	250a      	moveq	r5, #10
 801f054:	6018      	str	r0, [r3, #0]
 801f056:	4628      	mov	r0, r5
 801f058:	b00d      	add	sp, #52	@ 0x34
 801f05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f05e:	250b      	movs	r5, #11
 801f060:	4628      	mov	r0, r5
 801f062:	b00d      	add	sp, #52	@ 0x34
 801f064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f068:	f7ff ff5c 	bl	801ef24 <rcl_convert_rmw_ret_to_rcl_ret>
 801f06c:	4605      	mov	r5, r0
 801f06e:	e7f2      	b.n	801f056 <rcl_expand_topic_name+0xa2>
 801f070:	2567      	movs	r5, #103	@ 0x67
 801f072:	4628      	mov	r0, r5
 801f074:	b00d      	add	sp, #52	@ 0x34
 801f076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f07a:	25c9      	movs	r5, #201	@ 0xc9
 801f07c:	e7eb      	b.n	801f056 <rcl_expand_topic_name+0xa2>
 801f07e:	2b7e      	cmp	r3, #126	@ 0x7e
 801f080:	d075      	beq.n	801f16e <rcl_expand_topic_name+0x1ba>
 801f082:	f1b9 0f00 	cmp.w	r9, #0
 801f086:	f000 80c2 	beq.w	801f20e <rcl_expand_topic_name+0x25a>
 801f08a:	2300      	movs	r3, #0
 801f08c:	46a2      	mov	sl, r4
 801f08e:	461e      	mov	r6, r3
 801f090:	9508      	str	r5, [sp, #32]
 801f092:	4655      	mov	r5, sl
 801f094:	9409      	str	r4, [sp, #36]	@ 0x24
 801f096:	46b2      	mov	sl, r6
 801f098:	464c      	mov	r4, r9
 801f09a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f09e:	2c00      	cmp	r4, #0
 801f0a0:	f000 80ae 	beq.w	801f200 <rcl_expand_topic_name+0x24c>
 801f0a4:	217d      	movs	r1, #125	@ 0x7d
 801f0a6:	4628      	mov	r0, r5
 801f0a8:	f001 ff90 	bl	8020fcc <strchr>
 801f0ac:	eba0 0904 	sub.w	r9, r0, r4
 801f0b0:	4621      	mov	r1, r4
 801f0b2:	4869      	ldr	r0, [pc, #420]	@ (801f258 <rcl_expand_topic_name+0x2a4>)
 801f0b4:	f109 0601 	add.w	r6, r9, #1
 801f0b8:	4632      	mov	r2, r6
 801f0ba:	f001 ff94 	bl	8020fe6 <strncmp>
 801f0be:	2800      	cmp	r0, #0
 801f0c0:	d051      	beq.n	801f166 <rcl_expand_topic_name+0x1b2>
 801f0c2:	4632      	mov	r2, r6
 801f0c4:	4621      	mov	r1, r4
 801f0c6:	4865      	ldr	r0, [pc, #404]	@ (801f25c <rcl_expand_topic_name+0x2a8>)
 801f0c8:	f001 ff8d 	bl	8020fe6 <strncmp>
 801f0cc:	b128      	cbz	r0, 801f0da <rcl_expand_topic_name+0x126>
 801f0ce:	4632      	mov	r2, r6
 801f0d0:	4621      	mov	r1, r4
 801f0d2:	4863      	ldr	r0, [pc, #396]	@ (801f260 <rcl_expand_topic_name+0x2ac>)
 801f0d4:	f001 ff87 	bl	8020fe6 <strncmp>
 801f0d8:	bb38      	cbnz	r0, 801f12a <rcl_expand_topic_name+0x176>
 801f0da:	46d9      	mov	r9, fp
 801f0dc:	ab18      	add	r3, sp, #96	@ 0x60
 801f0de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f0e2:	ab16      	add	r3, sp, #88	@ 0x58
 801f0e4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f0e8:	4620      	mov	r0, r4
 801f0ea:	4631      	mov	r1, r6
 801f0ec:	cb0c      	ldmia	r3, {r2, r3}
 801f0ee:	f7f9 fde7 	bl	8018cc0 <rcutils_strndup>
 801f0f2:	4604      	mov	r4, r0
 801f0f4:	2800      	cmp	r0, #0
 801f0f6:	f000 80a3 	beq.w	801f240 <rcl_expand_topic_name+0x28c>
 801f0fa:	464a      	mov	r2, r9
 801f0fc:	4628      	mov	r0, r5
 801f0fe:	ab16      	add	r3, sp, #88	@ 0x58
 801f100:	4621      	mov	r1, r4
 801f102:	f7f9 fcbb 	bl	8018a7c <rcutils_repl_str>
 801f106:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f108:	4605      	mov	r5, r0
 801f10a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f10c:	4620      	mov	r0, r4
 801f10e:	4798      	blx	r3
 801f110:	4650      	mov	r0, sl
 801f112:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f114:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f116:	4798      	blx	r3
 801f118:	2d00      	cmp	r5, #0
 801f11a:	d06c      	beq.n	801f1f6 <rcl_expand_topic_name+0x242>
 801f11c:	217b      	movs	r1, #123	@ 0x7b
 801f11e:	4628      	mov	r0, r5
 801f120:	f001 ff54 	bl	8020fcc <strchr>
 801f124:	46aa      	mov	sl, r5
 801f126:	4604      	mov	r4, r0
 801f128:	e7b9      	b.n	801f09e <rcl_expand_topic_name+0xea>
 801f12a:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801f12e:	1c61      	adds	r1, r4, #1
 801f130:	4640      	mov	r0, r8
 801f132:	f7f9 fedd 	bl	8018ef0 <rcutils_string_map_getn>
 801f136:	4681      	mov	r9, r0
 801f138:	2800      	cmp	r0, #0
 801f13a:	d1cf      	bne.n	801f0dc <rcl_expand_topic_name+0x128>
 801f13c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f13e:	aa18      	add	r2, sp, #96	@ 0x60
 801f140:	2569      	movs	r5, #105	@ 0x69
 801f142:	6018      	str	r0, [r3, #0]
 801f144:	ab16      	add	r3, sp, #88	@ 0x58
 801f146:	ca07      	ldmia	r2, {r0, r1, r2}
 801f148:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f14c:	4631      	mov	r1, r6
 801f14e:	4620      	mov	r0, r4
 801f150:	cb0c      	ldmia	r3, {r2, r3}
 801f152:	f7f9 fdb5 	bl	8018cc0 <rcutils_strndup>
 801f156:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f158:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f15a:	4798      	blx	r3
 801f15c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f15e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f160:	4650      	mov	r0, sl
 801f162:	4798      	blx	r3
 801f164:	e777      	b.n	801f056 <rcl_expand_topic_name+0xa2>
 801f166:	46b9      	mov	r9, r7
 801f168:	e7b8      	b.n	801f0dc <rcl_expand_topic_name+0x128>
 801f16a:	25ca      	movs	r5, #202	@ 0xca
 801f16c:	e773      	b.n	801f056 <rcl_expand_topic_name+0xa2>
 801f16e:	9e07      	ldr	r6, [sp, #28]
 801f170:	4630      	mov	r0, r6
 801f172:	f7e1 f8bf 	bl	80002f4 <strlen>
 801f176:	4a3b      	ldr	r2, [pc, #236]	@ (801f264 <rcl_expand_topic_name+0x2b0>)
 801f178:	4b3b      	ldr	r3, [pc, #236]	@ (801f268 <rcl_expand_topic_name+0x2b4>)
 801f17a:	9603      	str	r6, [sp, #12]
 801f17c:	2801      	cmp	r0, #1
 801f17e:	bf18      	it	ne
 801f180:	4613      	movne	r3, r2
 801f182:	9704      	str	r7, [sp, #16]
 801f184:	9302      	str	r3, [sp, #8]
 801f186:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f188:	9300      	str	r3, [sp, #0]
 801f18a:	1c63      	adds	r3, r4, #1
 801f18c:	9305      	str	r3, [sp, #20]
 801f18e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801f192:	9301      	str	r3, [sp, #4]
 801f194:	ab16      	add	r3, sp, #88	@ 0x58
 801f196:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f198:	f7f9 fc36 	bl	8018a08 <rcutils_format_string_limit>
 801f19c:	4606      	mov	r6, r0
 801f19e:	b350      	cbz	r0, 801f1f6 <rcl_expand_topic_name+0x242>
 801f1a0:	f1b9 0f00 	cmp.w	r9, #0
 801f1a4:	d005      	beq.n	801f1b2 <rcl_expand_topic_name+0x1fe>
 801f1a6:	217b      	movs	r1, #123	@ 0x7b
 801f1a8:	46b2      	mov	sl, r6
 801f1aa:	f001 ff0f 	bl	8020fcc <strchr>
 801f1ae:	4681      	mov	r9, r0
 801f1b0:	e76e      	b.n	801f090 <rcl_expand_topic_name+0xdc>
 801f1b2:	7833      	ldrb	r3, [r6, #0]
 801f1b4:	2b2f      	cmp	r3, #47	@ 0x2f
 801f1b6:	d01b      	beq.n	801f1f0 <rcl_expand_topic_name+0x23c>
 801f1b8:	9c07      	ldr	r4, [sp, #28]
 801f1ba:	4620      	mov	r0, r4
 801f1bc:	f7e1 f89a 	bl	80002f4 <strlen>
 801f1c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801f1c4:	4a29      	ldr	r2, [pc, #164]	@ (801f26c <rcl_expand_topic_name+0x2b8>)
 801f1c6:	9301      	str	r3, [sp, #4]
 801f1c8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f1ca:	9604      	str	r6, [sp, #16]
 801f1cc:	9300      	str	r3, [sp, #0]
 801f1ce:	4b28      	ldr	r3, [pc, #160]	@ (801f270 <rcl_expand_topic_name+0x2bc>)
 801f1d0:	9403      	str	r4, [sp, #12]
 801f1d2:	2801      	cmp	r0, #1
 801f1d4:	bf18      	it	ne
 801f1d6:	4613      	movne	r3, r2
 801f1d8:	9302      	str	r3, [sp, #8]
 801f1da:	ab16      	add	r3, sp, #88	@ 0x58
 801f1dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f1de:	f7f9 fc13 	bl	8018a08 <rcutils_format_string_limit>
 801f1e2:	4603      	mov	r3, r0
 801f1e4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801f1e6:	4630      	mov	r0, r6
 801f1e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f1ea:	461e      	mov	r6, r3
 801f1ec:	4790      	blx	r2
 801f1ee:	b116      	cbz	r6, 801f1f6 <rcl_expand_topic_name+0x242>
 801f1f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f1f2:	601e      	str	r6, [r3, #0]
 801f1f4:	e72f      	b.n	801f056 <rcl_expand_topic_name+0xa2>
 801f1f6:	2300      	movs	r3, #0
 801f1f8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f1fa:	250a      	movs	r5, #10
 801f1fc:	6013      	str	r3, [r2, #0]
 801f1fe:	e72a      	b.n	801f056 <rcl_expand_topic_name+0xa2>
 801f200:	4653      	mov	r3, sl
 801f202:	4656      	mov	r6, sl
 801f204:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801f208:	2b00      	cmp	r3, #0
 801f20a:	d1d2      	bne.n	801f1b2 <rcl_expand_topic_name+0x1fe>
 801f20c:	7823      	ldrb	r3, [r4, #0]
 801f20e:	2b2f      	cmp	r3, #47	@ 0x2f
 801f210:	d01e      	beq.n	801f250 <rcl_expand_topic_name+0x29c>
 801f212:	9e07      	ldr	r6, [sp, #28]
 801f214:	4630      	mov	r0, r6
 801f216:	f7e1 f86d 	bl	80002f4 <strlen>
 801f21a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f21c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801f220:	9603      	str	r6, [sp, #12]
 801f222:	9404      	str	r4, [sp, #16]
 801f224:	e9cd 2300 	strd	r2, r3, [sp]
 801f228:	4a10      	ldr	r2, [pc, #64]	@ (801f26c <rcl_expand_topic_name+0x2b8>)
 801f22a:	4b11      	ldr	r3, [pc, #68]	@ (801f270 <rcl_expand_topic_name+0x2bc>)
 801f22c:	2801      	cmp	r0, #1
 801f22e:	bf18      	it	ne
 801f230:	4613      	movne	r3, r2
 801f232:	9302      	str	r3, [sp, #8]
 801f234:	ab16      	add	r3, sp, #88	@ 0x58
 801f236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f238:	f7f9 fbe6 	bl	8018a08 <rcutils_format_string_limit>
 801f23c:	4606      	mov	r6, r0
 801f23e:	e7d6      	b.n	801f1ee <rcl_expand_topic_name+0x23a>
 801f240:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801f244:	4650      	mov	r0, sl
 801f246:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f248:	6014      	str	r4, [r2, #0]
 801f24a:	250a      	movs	r5, #10
 801f24c:	4798      	blx	r3
 801f24e:	e702      	b.n	801f056 <rcl_expand_topic_name+0xa2>
 801f250:	2300      	movs	r3, #0
 801f252:	461e      	mov	r6, r3
 801f254:	e7cc      	b.n	801f1f0 <rcl_expand_topic_name+0x23c>
 801f256:	bf00      	nop
 801f258:	080244c4 	.word	0x080244c4
 801f25c:	080244cc 	.word	0x080244cc
 801f260:	080244d4 	.word	0x080244d4
 801f264:	080244bc 	.word	0x080244bc
 801f268:	080241d0 	.word	0x080241d0
 801f26c:	08023b98 	.word	0x08023b98
 801f270:	08023b90 	.word	0x08023b90

0801f274 <rcl_get_default_topic_name_substitutions>:
 801f274:	2800      	cmp	r0, #0
 801f276:	bf0c      	ite	eq
 801f278:	200b      	moveq	r0, #11
 801f27a:	2000      	movne	r0, #0
 801f27c:	4770      	bx	lr
 801f27e:	bf00      	nop

0801f280 <rcl_get_zero_initialized_guard_condition>:
 801f280:	4a03      	ldr	r2, [pc, #12]	@ (801f290 <rcl_get_zero_initialized_guard_condition+0x10>)
 801f282:	4603      	mov	r3, r0
 801f284:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f288:	e883 0003 	stmia.w	r3, {r0, r1}
 801f28c:	4618      	mov	r0, r3
 801f28e:	4770      	bx	lr
 801f290:	080244e0 	.word	0x080244e0

0801f294 <rcl_guard_condition_init_from_rmw>:
 801f294:	b082      	sub	sp, #8
 801f296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f29a:	b086      	sub	sp, #24
 801f29c:	4604      	mov	r4, r0
 801f29e:	460e      	mov	r6, r1
 801f2a0:	4615      	mov	r5, r2
 801f2a2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801f2a6:	f10d 0e04 	add.w	lr, sp, #4
 801f2aa:	f84c 3f04 	str.w	r3, [ip, #4]!
 801f2ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801f2b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801f2b6:	f8dc 3000 	ldr.w	r3, [ip]
 801f2ba:	a801      	add	r0, sp, #4
 801f2bc:	f8ce 3000 	str.w	r3, [lr]
 801f2c0:	f7f5 fd18 	bl	8014cf4 <rcutils_allocator_is_valid>
 801f2c4:	f080 0301 	eor.w	r3, r0, #1
 801f2c8:	b2db      	uxtb	r3, r3
 801f2ca:	bb3b      	cbnz	r3, 801f31c <rcl_guard_condition_init_from_rmw+0x88>
 801f2cc:	b334      	cbz	r4, 801f31c <rcl_guard_condition_init_from_rmw+0x88>
 801f2ce:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801f2d2:	f1b8 0f00 	cmp.w	r8, #0
 801f2d6:	d11a      	bne.n	801f30e <rcl_guard_condition_init_from_rmw+0x7a>
 801f2d8:	b305      	cbz	r5, 801f31c <rcl_guard_condition_init_from_rmw+0x88>
 801f2da:	4628      	mov	r0, r5
 801f2dc:	f7f6 fbd8 	bl	8015a90 <rcl_context_is_valid>
 801f2e0:	b1f0      	cbz	r0, 801f320 <rcl_guard_condition_init_from_rmw+0x8c>
 801f2e2:	9b01      	ldr	r3, [sp, #4]
 801f2e4:	201c      	movs	r0, #28
 801f2e6:	9905      	ldr	r1, [sp, #20]
 801f2e8:	4798      	blx	r3
 801f2ea:	4607      	mov	r7, r0
 801f2ec:	6060      	str	r0, [r4, #4]
 801f2ee:	b320      	cbz	r0, 801f33a <rcl_guard_condition_init_from_rmw+0xa6>
 801f2f0:	b1c6      	cbz	r6, 801f324 <rcl_guard_condition_init_from_rmw+0x90>
 801f2f2:	6006      	str	r6, [r0, #0]
 801f2f4:	f880 8004 	strb.w	r8, [r0, #4]
 801f2f8:	ac01      	add	r4, sp, #4
 801f2fa:	f107 0c08 	add.w	ip, r7, #8
 801f2fe:	2500      	movs	r5, #0
 801f300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f302:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f306:	6823      	ldr	r3, [r4, #0]
 801f308:	f8cc 3000 	str.w	r3, [ip]
 801f30c:	e000      	b.n	801f310 <rcl_guard_condition_init_from_rmw+0x7c>
 801f30e:	2564      	movs	r5, #100	@ 0x64
 801f310:	4628      	mov	r0, r5
 801f312:	b006      	add	sp, #24
 801f314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f318:	b002      	add	sp, #8
 801f31a:	4770      	bx	lr
 801f31c:	250b      	movs	r5, #11
 801f31e:	e7f7      	b.n	801f310 <rcl_guard_condition_init_from_rmw+0x7c>
 801f320:	2565      	movs	r5, #101	@ 0x65
 801f322:	e7f5      	b.n	801f310 <rcl_guard_condition_init_from_rmw+0x7c>
 801f324:	6828      	ldr	r0, [r5, #0]
 801f326:	3028      	adds	r0, #40	@ 0x28
 801f328:	f000 fada 	bl	801f8e0 <rmw_create_guard_condition>
 801f32c:	6038      	str	r0, [r7, #0]
 801f32e:	6867      	ldr	r7, [r4, #4]
 801f330:	683e      	ldr	r6, [r7, #0]
 801f332:	b126      	cbz	r6, 801f33e <rcl_guard_condition_init_from_rmw+0xaa>
 801f334:	2301      	movs	r3, #1
 801f336:	713b      	strb	r3, [r7, #4]
 801f338:	e7de      	b.n	801f2f8 <rcl_guard_condition_init_from_rmw+0x64>
 801f33a:	250a      	movs	r5, #10
 801f33c:	e7e8      	b.n	801f310 <rcl_guard_condition_init_from_rmw+0x7c>
 801f33e:	9b02      	ldr	r3, [sp, #8]
 801f340:	4638      	mov	r0, r7
 801f342:	9905      	ldr	r1, [sp, #20]
 801f344:	2501      	movs	r5, #1
 801f346:	4798      	blx	r3
 801f348:	6066      	str	r6, [r4, #4]
 801f34a:	e7e1      	b.n	801f310 <rcl_guard_condition_init_from_rmw+0x7c>

0801f34c <rcl_guard_condition_fini>:
 801f34c:	b570      	push	{r4, r5, r6, lr}
 801f34e:	b082      	sub	sp, #8
 801f350:	b1f0      	cbz	r0, 801f390 <rcl_guard_condition_fini+0x44>
 801f352:	6843      	ldr	r3, [r0, #4]
 801f354:	4604      	mov	r4, r0
 801f356:	b163      	cbz	r3, 801f372 <rcl_guard_condition_fini+0x26>
 801f358:	6818      	ldr	r0, [r3, #0]
 801f35a:	68de      	ldr	r6, [r3, #12]
 801f35c:	6999      	ldr	r1, [r3, #24]
 801f35e:	b160      	cbz	r0, 801f37a <rcl_guard_condition_fini+0x2e>
 801f360:	791d      	ldrb	r5, [r3, #4]
 801f362:	b965      	cbnz	r5, 801f37e <rcl_guard_condition_fini+0x32>
 801f364:	4618      	mov	r0, r3
 801f366:	47b0      	blx	r6
 801f368:	2300      	movs	r3, #0
 801f36a:	4628      	mov	r0, r5
 801f36c:	6063      	str	r3, [r4, #4]
 801f36e:	b002      	add	sp, #8
 801f370:	bd70      	pop	{r4, r5, r6, pc}
 801f372:	461d      	mov	r5, r3
 801f374:	4628      	mov	r0, r5
 801f376:	b002      	add	sp, #8
 801f378:	bd70      	pop	{r4, r5, r6, pc}
 801f37a:	4605      	mov	r5, r0
 801f37c:	e7f2      	b.n	801f364 <rcl_guard_condition_fini+0x18>
 801f37e:	9101      	str	r1, [sp, #4]
 801f380:	f000 fac4 	bl	801f90c <rmw_destroy_guard_condition>
 801f384:	1e05      	subs	r5, r0, #0
 801f386:	6863      	ldr	r3, [r4, #4]
 801f388:	9901      	ldr	r1, [sp, #4]
 801f38a:	bf18      	it	ne
 801f38c:	2501      	movne	r5, #1
 801f38e:	e7e9      	b.n	801f364 <rcl_guard_condition_fini+0x18>
 801f390:	250b      	movs	r5, #11
 801f392:	4628      	mov	r0, r5
 801f394:	b002      	add	sp, #8
 801f396:	bd70      	pop	{r4, r5, r6, pc}

0801f398 <rcl_guard_condition_get_default_options>:
 801f398:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f39a:	b087      	sub	sp, #28
 801f39c:	4606      	mov	r6, r0
 801f39e:	4c0b      	ldr	r4, [pc, #44]	@ (801f3cc <rcl_guard_condition_get_default_options+0x34>)
 801f3a0:	4668      	mov	r0, sp
 801f3a2:	f7f5 fc99 	bl	8014cd8 <rcutils_get_default_allocator>
 801f3a6:	46ee      	mov	lr, sp
 801f3a8:	46a4      	mov	ip, r4
 801f3aa:	4625      	mov	r5, r4
 801f3ac:	4634      	mov	r4, r6
 801f3ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801f3b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f3b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f3b8:	f8de 7000 	ldr.w	r7, [lr]
 801f3bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f3be:	4630      	mov	r0, r6
 801f3c0:	f8cc 7000 	str.w	r7, [ip]
 801f3c4:	6027      	str	r7, [r4, #0]
 801f3c6:	b007      	add	sp, #28
 801f3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f3ca:	bf00      	nop
 801f3cc:	24069578 	.word	0x24069578

0801f3d0 <rcl_guard_condition_get_rmw_handle>:
 801f3d0:	b110      	cbz	r0, 801f3d8 <rcl_guard_condition_get_rmw_handle+0x8>
 801f3d2:	6840      	ldr	r0, [r0, #4]
 801f3d4:	b100      	cbz	r0, 801f3d8 <rcl_guard_condition_get_rmw_handle+0x8>
 801f3d6:	6800      	ldr	r0, [r0, #0]
 801f3d8:	4770      	bx	lr
 801f3da:	bf00      	nop

0801f3dc <rcl_validate_topic_name>:
 801f3dc:	2800      	cmp	r0, #0
 801f3de:	f000 8089 	beq.w	801f4f4 <rcl_validate_topic_name+0x118>
 801f3e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3e6:	460e      	mov	r6, r1
 801f3e8:	2900      	cmp	r1, #0
 801f3ea:	f000 8085 	beq.w	801f4f8 <rcl_validate_topic_name+0x11c>
 801f3ee:	4604      	mov	r4, r0
 801f3f0:	4617      	mov	r7, r2
 801f3f2:	f7e0 ff7f 	bl	80002f4 <strlen>
 801f3f6:	b1b0      	cbz	r0, 801f426 <rcl_validate_topic_name+0x4a>
 801f3f8:	f894 e000 	ldrb.w	lr, [r4]
 801f3fc:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801f560 <rcl_validate_topic_name+0x184>
 801f400:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801f404:	f013 0304 	ands.w	r3, r3, #4
 801f408:	d139      	bne.n	801f47e <rcl_validate_topic_name+0xa2>
 801f40a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801f40e:	f814 2008 	ldrb.w	r2, [r4, r8]
 801f412:	2a2f      	cmp	r2, #47	@ 0x2f
 801f414:	d10f      	bne.n	801f436 <rcl_validate_topic_name+0x5a>
 801f416:	2202      	movs	r2, #2
 801f418:	6032      	str	r2, [r6, #0]
 801f41a:	b3a7      	cbz	r7, 801f486 <rcl_validate_topic_name+0xaa>
 801f41c:	4618      	mov	r0, r3
 801f41e:	f8c7 8000 	str.w	r8, [r7]
 801f422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f426:	2301      	movs	r3, #1
 801f428:	6033      	str	r3, [r6, #0]
 801f42a:	b367      	cbz	r7, 801f486 <rcl_validate_topic_name+0xaa>
 801f42c:	2300      	movs	r3, #0
 801f42e:	4618      	mov	r0, r3
 801f430:	603b      	str	r3, [r7, #0]
 801f432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f436:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801f43a:	461d      	mov	r5, r3
 801f43c:	4619      	mov	r1, r3
 801f43e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801f442:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801f446:	f1b9 0f09 	cmp.w	r9, #9
 801f44a:	d91f      	bls.n	801f48c <rcl_validate_topic_name+0xb0>
 801f44c:	f022 0920 	bic.w	r9, r2, #32
 801f450:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801f454:	f1b9 0f19 	cmp.w	r9, #25
 801f458:	d918      	bls.n	801f48c <rcl_validate_topic_name+0xb0>
 801f45a:	2a5f      	cmp	r2, #95	@ 0x5f
 801f45c:	d024      	beq.n	801f4a8 <rcl_validate_topic_name+0xcc>
 801f45e:	2a2f      	cmp	r2, #47	@ 0x2f
 801f460:	d058      	beq.n	801f514 <rcl_validate_topic_name+0x138>
 801f462:	2a7e      	cmp	r2, #126	@ 0x7e
 801f464:	d04a      	beq.n	801f4fc <rcl_validate_topic_name+0x120>
 801f466:	2a7b      	cmp	r2, #123	@ 0x7b
 801f468:	d05b      	beq.n	801f522 <rcl_validate_topic_name+0x146>
 801f46a:	2a7d      	cmp	r2, #125	@ 0x7d
 801f46c:	d169      	bne.n	801f542 <rcl_validate_topic_name+0x166>
 801f46e:	2d00      	cmp	r5, #0
 801f470:	d15c      	bne.n	801f52c <rcl_validate_topic_name+0x150>
 801f472:	2305      	movs	r3, #5
 801f474:	6033      	str	r3, [r6, #0]
 801f476:	b137      	cbz	r7, 801f486 <rcl_validate_topic_name+0xaa>
 801f478:	2000      	movs	r0, #0
 801f47a:	6039      	str	r1, [r7, #0]
 801f47c:	e7d9      	b.n	801f432 <rcl_validate_topic_name+0x56>
 801f47e:	2304      	movs	r3, #4
 801f480:	6033      	str	r3, [r6, #0]
 801f482:	2f00      	cmp	r7, #0
 801f484:	d1d2      	bne.n	801f42c <rcl_validate_topic_name+0x50>
 801f486:	2000      	movs	r0, #0
 801f488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f48c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f490:	0752      	lsls	r2, r2, #29
 801f492:	d509      	bpl.n	801f4a8 <rcl_validate_topic_name+0xcc>
 801f494:	2900      	cmp	r1, #0
 801f496:	bf0c      	ite	eq
 801f498:	2200      	moveq	r2, #0
 801f49a:	f005 0201 	andne.w	r2, r5, #1
 801f49e:	b11a      	cbz	r2, 801f4a8 <rcl_validate_topic_name+0xcc>
 801f4a0:	1e4d      	subs	r5, r1, #1
 801f4a2:	429d      	cmp	r5, r3
 801f4a4:	d031      	beq.n	801f50a <rcl_validate_topic_name+0x12e>
 801f4a6:	4615      	mov	r5, r2
 801f4a8:	3101      	adds	r1, #1
 801f4aa:	4288      	cmp	r0, r1
 801f4ac:	d1c7      	bne.n	801f43e <rcl_validate_topic_name+0x62>
 801f4ae:	2d00      	cmp	r5, #0
 801f4b0:	d142      	bne.n	801f538 <rcl_validate_topic_name+0x15c>
 801f4b2:	4628      	mov	r0, r5
 801f4b4:	2301      	movs	r3, #1
 801f4b6:	e00c      	b.n	801f4d2 <rcl_validate_topic_name+0xf6>
 801f4b8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801f4bc:	d101      	bne.n	801f4c2 <rcl_validate_topic_name+0xe6>
 801f4be:	2801      	cmp	r0, #1
 801f4c0:	d047      	beq.n	801f552 <rcl_validate_topic_name+0x176>
 801f4c2:	1c5a      	adds	r2, r3, #1
 801f4c4:	428b      	cmp	r3, r1
 801f4c6:	f100 0001 	add.w	r0, r0, #1
 801f4ca:	f104 0401 	add.w	r4, r4, #1
 801f4ce:	4613      	mov	r3, r2
 801f4d0:	d22e      	bcs.n	801f530 <rcl_validate_topic_name+0x154>
 801f4d2:	4580      	cmp	r8, r0
 801f4d4:	d0f5      	beq.n	801f4c2 <rcl_validate_topic_name+0xe6>
 801f4d6:	7822      	ldrb	r2, [r4, #0]
 801f4d8:	2a2f      	cmp	r2, #47	@ 0x2f
 801f4da:	d1ed      	bne.n	801f4b8 <rcl_validate_topic_name+0xdc>
 801f4dc:	7862      	ldrb	r2, [r4, #1]
 801f4de:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f4e2:	0752      	lsls	r2, r2, #29
 801f4e4:	d5ed      	bpl.n	801f4c2 <rcl_validate_topic_name+0xe6>
 801f4e6:	2204      	movs	r2, #4
 801f4e8:	6032      	str	r2, [r6, #0]
 801f4ea:	2f00      	cmp	r7, #0
 801f4ec:	d0cb      	beq.n	801f486 <rcl_validate_topic_name+0xaa>
 801f4ee:	2000      	movs	r0, #0
 801f4f0:	603b      	str	r3, [r7, #0]
 801f4f2:	e79e      	b.n	801f432 <rcl_validate_topic_name+0x56>
 801f4f4:	200b      	movs	r0, #11
 801f4f6:	4770      	bx	lr
 801f4f8:	200b      	movs	r0, #11
 801f4fa:	e79a      	b.n	801f432 <rcl_validate_topic_name+0x56>
 801f4fc:	2900      	cmp	r1, #0
 801f4fe:	d0d3      	beq.n	801f4a8 <rcl_validate_topic_name+0xcc>
 801f500:	2306      	movs	r3, #6
 801f502:	6033      	str	r3, [r6, #0]
 801f504:	2f00      	cmp	r7, #0
 801f506:	d1b7      	bne.n	801f478 <rcl_validate_topic_name+0x9c>
 801f508:	e7bd      	b.n	801f486 <rcl_validate_topic_name+0xaa>
 801f50a:	2309      	movs	r3, #9
 801f50c:	6033      	str	r3, [r6, #0]
 801f50e:	2f00      	cmp	r7, #0
 801f510:	d1b2      	bne.n	801f478 <rcl_validate_topic_name+0x9c>
 801f512:	e7b8      	b.n	801f486 <rcl_validate_topic_name+0xaa>
 801f514:	2d00      	cmp	r5, #0
 801f516:	d0c7      	beq.n	801f4a8 <rcl_validate_topic_name+0xcc>
 801f518:	2308      	movs	r3, #8
 801f51a:	6033      	str	r3, [r6, #0]
 801f51c:	2f00      	cmp	r7, #0
 801f51e:	d1ab      	bne.n	801f478 <rcl_validate_topic_name+0x9c>
 801f520:	e7b1      	b.n	801f486 <rcl_validate_topic_name+0xaa>
 801f522:	2d00      	cmp	r5, #0
 801f524:	d1f8      	bne.n	801f518 <rcl_validate_topic_name+0x13c>
 801f526:	460b      	mov	r3, r1
 801f528:	2501      	movs	r5, #1
 801f52a:	e7bd      	b.n	801f4a8 <rcl_validate_topic_name+0xcc>
 801f52c:	2500      	movs	r5, #0
 801f52e:	e7bb      	b.n	801f4a8 <rcl_validate_topic_name+0xcc>
 801f530:	2300      	movs	r3, #0
 801f532:	4618      	mov	r0, r3
 801f534:	6033      	str	r3, [r6, #0]
 801f536:	e77c      	b.n	801f432 <rcl_validate_topic_name+0x56>
 801f538:	2205      	movs	r2, #5
 801f53a:	6032      	str	r2, [r6, #0]
 801f53c:	2f00      	cmp	r7, #0
 801f53e:	d1d6      	bne.n	801f4ee <rcl_validate_topic_name+0x112>
 801f540:	e7a1      	b.n	801f486 <rcl_validate_topic_name+0xaa>
 801f542:	2d00      	cmp	r5, #0
 801f544:	bf14      	ite	ne
 801f546:	2308      	movne	r3, #8
 801f548:	2303      	moveq	r3, #3
 801f54a:	6033      	str	r3, [r6, #0]
 801f54c:	2f00      	cmp	r7, #0
 801f54e:	d193      	bne.n	801f478 <rcl_validate_topic_name+0x9c>
 801f550:	e799      	b.n	801f486 <rcl_validate_topic_name+0xaa>
 801f552:	2307      	movs	r3, #7
 801f554:	6033      	str	r3, [r6, #0]
 801f556:	2f00      	cmp	r7, #0
 801f558:	d095      	beq.n	801f486 <rcl_validate_topic_name+0xaa>
 801f55a:	2301      	movs	r3, #1
 801f55c:	e7c7      	b.n	801f4ee <rcl_validate_topic_name+0x112>
 801f55e:	bf00      	nop
 801f560:	08024666 	.word	0x08024666

0801f564 <rcutils_string_array_fini>:
 801f564:	b328      	cbz	r0, 801f5b2 <rcutils_string_array_fini+0x4e>
 801f566:	b570      	push	{r4, r5, r6, lr}
 801f568:	4604      	mov	r4, r0
 801f56a:	6840      	ldr	r0, [r0, #4]
 801f56c:	b1e0      	cbz	r0, 801f5a8 <rcutils_string_array_fini+0x44>
 801f56e:	f104 0008 	add.w	r0, r4, #8
 801f572:	f7f5 fbbf 	bl	8014cf4 <rcutils_allocator_is_valid>
 801f576:	b1c0      	cbz	r0, 801f5aa <rcutils_string_array_fini+0x46>
 801f578:	6823      	ldr	r3, [r4, #0]
 801f57a:	b1c3      	cbz	r3, 801f5ae <rcutils_string_array_fini+0x4a>
 801f57c:	2500      	movs	r5, #0
 801f57e:	6860      	ldr	r0, [r4, #4]
 801f580:	462e      	mov	r6, r5
 801f582:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801f586:	68e3      	ldr	r3, [r4, #12]
 801f588:	69a1      	ldr	r1, [r4, #24]
 801f58a:	4798      	blx	r3
 801f58c:	e9d4 3000 	ldrd	r3, r0, [r4]
 801f590:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801f594:	3501      	adds	r5, #1
 801f596:	429d      	cmp	r5, r3
 801f598:	d3f3      	bcc.n	801f582 <rcutils_string_array_fini+0x1e>
 801f59a:	68e3      	ldr	r3, [r4, #12]
 801f59c:	69a1      	ldr	r1, [r4, #24]
 801f59e:	4798      	blx	r3
 801f5a0:	2300      	movs	r3, #0
 801f5a2:	4618      	mov	r0, r3
 801f5a4:	e9c4 3300 	strd	r3, r3, [r4]
 801f5a8:	bd70      	pop	{r4, r5, r6, pc}
 801f5aa:	200b      	movs	r0, #11
 801f5ac:	bd70      	pop	{r4, r5, r6, pc}
 801f5ae:	6860      	ldr	r0, [r4, #4]
 801f5b0:	e7f3      	b.n	801f59a <rcutils_string_array_fini+0x36>
 801f5b2:	200b      	movs	r0, #11
 801f5b4:	4770      	bx	lr
 801f5b6:	bf00      	nop

0801f5b8 <rmw_time_equal>:
 801f5b8:	b4f0      	push	{r4, r5, r6, r7}
 801f5ba:	b084      	sub	sp, #16
 801f5bc:	ac04      	add	r4, sp, #16
 801f5be:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801f5c2:	4603      	mov	r3, r0
 801f5c4:	4925      	ldr	r1, [pc, #148]	@ (801f65c <rmw_time_equal+0xa4>)
 801f5c6:	9d01      	ldr	r5, [sp, #4]
 801f5c8:	4610      	mov	r0, r2
 801f5ca:	4299      	cmp	r1, r3
 801f5cc:	f04f 0202 	mov.w	r2, #2
 801f5d0:	9e03      	ldr	r6, [sp, #12]
 801f5d2:	41aa      	sbcs	r2, r5
 801f5d4:	d330      	bcc.n	801f638 <rmw_time_equal+0x80>
 801f5d6:	4c22      	ldr	r4, [pc, #136]	@ (801f660 <rmw_time_equal+0xa8>)
 801f5d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801f5dc:	fba3 3204 	umull	r3, r2, r3, r4
 801f5e0:	fb04 2205 	mla	r2, r4, r5, r2
 801f5e4:	43dd      	mvns	r5, r3
 801f5e6:	1a8c      	subs	r4, r1, r2
 801f5e8:	4285      	cmp	r5, r0
 801f5ea:	41b4      	sbcs	r4, r6
 801f5ec:	d332      	bcc.n	801f654 <rmw_time_equal+0x9c>
 801f5ee:	eb10 0c03 	adds.w	ip, r0, r3
 801f5f2:	eb42 0106 	adc.w	r1, r2, r6
 801f5f6:	4819      	ldr	r0, [pc, #100]	@ (801f65c <rmw_time_equal+0xa4>)
 801f5f8:	2202      	movs	r2, #2
 801f5fa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801f5fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f5fe:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801f602:	4298      	cmp	r0, r3
 801f604:	41b2      	sbcs	r2, r6
 801f606:	d31c      	bcc.n	801f642 <rmw_time_equal+0x8a>
 801f608:	4c15      	ldr	r4, [pc, #84]	@ (801f660 <rmw_time_equal+0xa8>)
 801f60a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801f60e:	fba3 3204 	umull	r3, r2, r3, r4
 801f612:	fb04 2206 	mla	r2, r4, r6, r2
 801f616:	43de      	mvns	r6, r3
 801f618:	1a84      	subs	r4, r0, r2
 801f61a:	42ae      	cmp	r6, r5
 801f61c:	41bc      	sbcs	r4, r7
 801f61e:	d315      	bcc.n	801f64c <rmw_time_equal+0x94>
 801f620:	195b      	adds	r3, r3, r5
 801f622:	eb42 0207 	adc.w	r2, r2, r7
 801f626:	428a      	cmp	r2, r1
 801f628:	bf08      	it	eq
 801f62a:	4563      	cmpeq	r3, ip
 801f62c:	bf0c      	ite	eq
 801f62e:	2001      	moveq	r0, #1
 801f630:	2000      	movne	r0, #0
 801f632:	b004      	add	sp, #16
 801f634:	bcf0      	pop	{r4, r5, r6, r7}
 801f636:	4770      	bx	lr
 801f638:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801f63c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801f640:	e7d9      	b.n	801f5f6 <rmw_time_equal+0x3e>
 801f642:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f646:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801f64a:	e7ec      	b.n	801f626 <rmw_time_equal+0x6e>
 801f64c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f650:	4602      	mov	r2, r0
 801f652:	e7e8      	b.n	801f626 <rmw_time_equal+0x6e>
 801f654:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801f658:	e7cd      	b.n	801f5f6 <rmw_time_equal+0x3e>
 801f65a:	bf00      	nop
 801f65c:	25c17d04 	.word	0x25c17d04
 801f660:	3b9aca00 	.word	0x3b9aca00

0801f664 <rmw_time_total_nsec>:
 801f664:	b470      	push	{r4, r5, r6}
 801f666:	b085      	sub	sp, #20
 801f668:	ac04      	add	r4, sp, #16
 801f66a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801f66e:	4603      	mov	r3, r0
 801f670:	4913      	ldr	r1, [pc, #76]	@ (801f6c0 <rmw_time_total_nsec+0x5c>)
 801f672:	9d01      	ldr	r5, [sp, #4]
 801f674:	4610      	mov	r0, r2
 801f676:	4299      	cmp	r1, r3
 801f678:	f04f 0202 	mov.w	r2, #2
 801f67c:	9e03      	ldr	r6, [sp, #12]
 801f67e:	41aa      	sbcs	r2, r5
 801f680:	d311      	bcc.n	801f6a6 <rmw_time_total_nsec+0x42>
 801f682:	4c10      	ldr	r4, [pc, #64]	@ (801f6c4 <rmw_time_total_nsec+0x60>)
 801f684:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801f688:	fba3 3204 	umull	r3, r2, r3, r4
 801f68c:	fb04 2205 	mla	r2, r4, r5, r2
 801f690:	43dd      	mvns	r5, r3
 801f692:	1a8c      	subs	r4, r1, r2
 801f694:	4285      	cmp	r5, r0
 801f696:	41b4      	sbcs	r4, r6
 801f698:	d30c      	bcc.n	801f6b4 <rmw_time_total_nsec+0x50>
 801f69a:	1818      	adds	r0, r3, r0
 801f69c:	eb42 0106 	adc.w	r1, r2, r6
 801f6a0:	b005      	add	sp, #20
 801f6a2:	bc70      	pop	{r4, r5, r6}
 801f6a4:	4770      	bx	lr
 801f6a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f6aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801f6ae:	b005      	add	sp, #20
 801f6b0:	bc70      	pop	{r4, r5, r6}
 801f6b2:	4770      	bx	lr
 801f6b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f6b8:	b005      	add	sp, #20
 801f6ba:	bc70      	pop	{r4, r5, r6}
 801f6bc:	4770      	bx	lr
 801f6be:	bf00      	nop
 801f6c0:	25c17d04 	.word	0x25c17d04
 801f6c4:	3b9aca00 	.word	0x3b9aca00

0801f6c8 <on_status>:
 801f6c8:	b082      	sub	sp, #8
 801f6ca:	b002      	add	sp, #8
 801f6cc:	4770      	bx	lr
 801f6ce:	bf00      	nop

0801f6d0 <on_topic>:
 801f6d0:	4a23      	ldr	r2, [pc, #140]	@ (801f760 <on_topic+0x90>)
 801f6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6d6:	6812      	ldr	r2, [r2, #0]
 801f6d8:	b094      	sub	sp, #80	@ 0x50
 801f6da:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801f6dc:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801f6e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f6e2:	9312      	str	r3, [sp, #72]	@ 0x48
 801f6e4:	b3c2      	cbz	r2, 801f758 <on_topic+0x88>
 801f6e6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801f6ea:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801f6ee:	e001      	b.n	801f6f4 <on_topic+0x24>
 801f6f0:	6852      	ldr	r2, [r2, #4]
 801f6f2:	b38a      	cbz	r2, 801f758 <on_topic+0x88>
 801f6f4:	6894      	ldr	r4, [r2, #8]
 801f6f6:	8aa3      	ldrh	r3, [r4, #20]
 801f6f8:	428b      	cmp	r3, r1
 801f6fa:	d1f9      	bne.n	801f6f0 <on_topic+0x20>
 801f6fc:	7da3      	ldrb	r3, [r4, #22]
 801f6fe:	4283      	cmp	r3, r0
 801f700:	d1f6      	bne.n	801f6f0 <on_topic+0x20>
 801f702:	2248      	movs	r2, #72	@ 0x48
 801f704:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801f708:	4668      	mov	r0, sp
 801f70a:	f001 fd76 	bl	80211fa <memcpy>
 801f70e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801f712:	4620      	mov	r0, r4
 801f714:	cb0c      	ldmia	r3, {r2, r3}
 801f716:	f7fb faa5 	bl	801ac64 <rmw_uxrce_get_static_input_buffer_for_entity>
 801f71a:	4607      	mov	r7, r0
 801f71c:	b1e0      	cbz	r0, 801f758 <on_topic+0x88>
 801f71e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801f722:	462a      	mov	r2, r5
 801f724:	4630      	mov	r0, r6
 801f726:	f108 0110 	add.w	r1, r8, #16
 801f72a:	f7fb ff7d 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801f72e:	b930      	cbnz	r0, 801f73e <on_topic+0x6e>
 801f730:	4639      	mov	r1, r7
 801f732:	480c      	ldr	r0, [pc, #48]	@ (801f764 <on_topic+0x94>)
 801f734:	b014      	add	sp, #80	@ 0x50
 801f736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f73a:	f000 b8bd 	b.w	801f8b8 <put_memory>
 801f73e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801f742:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801f746:	f000 f967 	bl	801fa18 <rmw_uros_epoch_nanos>
 801f74a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801f74e:	2305      	movs	r3, #5
 801f750:	e942 0102 	strd	r0, r1, [r2, #-8]
 801f754:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801f758:	b014      	add	sp, #80	@ 0x50
 801f75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f75e:	bf00      	nop
 801f760:	24069544 	.word	0x24069544
 801f764:	24069534 	.word	0x24069534

0801f768 <on_request>:
 801f768:	4824      	ldr	r0, [pc, #144]	@ (801f7fc <on_request+0x94>)
 801f76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f76e:	6800      	ldr	r0, [r0, #0]
 801f770:	b094      	sub	sp, #80	@ 0x50
 801f772:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801f774:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801f778:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f77a:	2800      	cmp	r0, #0
 801f77c:	d03b      	beq.n	801f7f6 <on_request+0x8e>
 801f77e:	461d      	mov	r5, r3
 801f780:	e001      	b.n	801f786 <on_request+0x1e>
 801f782:	6840      	ldr	r0, [r0, #4]
 801f784:	b3b8      	cbz	r0, 801f7f6 <on_request+0x8e>
 801f786:	6884      	ldr	r4, [r0, #8]
 801f788:	8b21      	ldrh	r1, [r4, #24]
 801f78a:	4291      	cmp	r1, r2
 801f78c:	d1f9      	bne.n	801f782 <on_request+0x1a>
 801f78e:	2248      	movs	r2, #72	@ 0x48
 801f790:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801f794:	4668      	mov	r0, sp
 801f796:	f001 fd30 	bl	80211fa <memcpy>
 801f79a:	f104 0320 	add.w	r3, r4, #32
 801f79e:	4620      	mov	r0, r4
 801f7a0:	cb0c      	ldmia	r3, {r2, r3}
 801f7a2:	f7fb fa5f 	bl	801ac64 <rmw_uxrce_get_static_input_buffer_for_entity>
 801f7a6:	4680      	mov	r8, r0
 801f7a8:	b328      	cbz	r0, 801f7f6 <on_request+0x8e>
 801f7aa:	4630      	mov	r0, r6
 801f7ac:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801f7b0:	463a      	mov	r2, r7
 801f7b2:	f106 0110 	add.w	r1, r6, #16
 801f7b6:	f7fb ff37 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801f7ba:	b930      	cbnz	r0, 801f7ca <on_request+0x62>
 801f7bc:	4641      	mov	r1, r8
 801f7be:	4810      	ldr	r0, [pc, #64]	@ (801f800 <on_request+0x98>)
 801f7c0:	b014      	add	sp, #80	@ 0x50
 801f7c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f7c6:	f000 b877 	b.w	801f8b8 <put_memory>
 801f7ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f7cc:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801f7d0:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801f7d4:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801f7d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f7dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 801f7e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801f7e4:	f000 f918 	bl	801fa18 <rmw_uros_epoch_nanos>
 801f7e8:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801f7ec:	2303      	movs	r3, #3
 801f7ee:	e942 0102 	strd	r0, r1, [r2, #-8]
 801f7f2:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801f7f6:	b014      	add	sp, #80	@ 0x50
 801f7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f7fc:	24069514 	.word	0x24069514
 801f800:	24069534 	.word	0x24069534

0801f804 <on_reply>:
 801f804:	4822      	ldr	r0, [pc, #136]	@ (801f890 <on_reply+0x8c>)
 801f806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f80a:	6800      	ldr	r0, [r0, #0]
 801f80c:	b094      	sub	sp, #80	@ 0x50
 801f80e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801f810:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801f814:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f816:	b3b8      	cbz	r0, 801f888 <on_reply+0x84>
 801f818:	461d      	mov	r5, r3
 801f81a:	e001      	b.n	801f820 <on_reply+0x1c>
 801f81c:	6840      	ldr	r0, [r0, #4]
 801f81e:	b398      	cbz	r0, 801f888 <on_reply+0x84>
 801f820:	6884      	ldr	r4, [r0, #8]
 801f822:	8b21      	ldrh	r1, [r4, #24]
 801f824:	4291      	cmp	r1, r2
 801f826:	d1f9      	bne.n	801f81c <on_reply+0x18>
 801f828:	2248      	movs	r2, #72	@ 0x48
 801f82a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801f82e:	4668      	mov	r0, sp
 801f830:	f001 fce3 	bl	80211fa <memcpy>
 801f834:	f104 0320 	add.w	r3, r4, #32
 801f838:	4620      	mov	r0, r4
 801f83a:	cb0c      	ldmia	r3, {r2, r3}
 801f83c:	f7fb fa12 	bl	801ac64 <rmw_uxrce_get_static_input_buffer_for_entity>
 801f840:	4680      	mov	r8, r0
 801f842:	b308      	cbz	r0, 801f888 <on_reply+0x84>
 801f844:	4630      	mov	r0, r6
 801f846:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801f84a:	463a      	mov	r2, r7
 801f84c:	f106 0110 	add.w	r1, r6, #16
 801f850:	f7fb feea 	bl	801b628 <ucdr_deserialize_array_uint8_t>
 801f854:	b930      	cbnz	r0, 801f864 <on_reply+0x60>
 801f856:	4641      	mov	r1, r8
 801f858:	480e      	ldr	r0, [pc, #56]	@ (801f894 <on_reply+0x90>)
 801f85a:	b014      	add	sp, #80	@ 0x50
 801f85c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f860:	f000 b82a 	b.w	801f8b8 <put_memory>
 801f864:	2200      	movs	r2, #0
 801f866:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801f86a:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801f86e:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801f872:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801f876:	f000 f8cf 	bl	801fa18 <rmw_uros_epoch_nanos>
 801f87a:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801f87e:	2304      	movs	r3, #4
 801f880:	e942 0102 	strd	r0, r1, [r2, #-8]
 801f884:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801f888:	b014      	add	sp, #80	@ 0x50
 801f88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f88e:	bf00      	nop
 801f890:	24064c28 	.word	0x24064c28
 801f894:	24069534 	.word	0x24069534

0801f898 <get_memory>:
 801f898:	4603      	mov	r3, r0
 801f89a:	6840      	ldr	r0, [r0, #4]
 801f89c:	b158      	cbz	r0, 801f8b6 <get_memory+0x1e>
 801f89e:	6842      	ldr	r2, [r0, #4]
 801f8a0:	605a      	str	r2, [r3, #4]
 801f8a2:	b10a      	cbz	r2, 801f8a8 <get_memory+0x10>
 801f8a4:	2100      	movs	r1, #0
 801f8a6:	6011      	str	r1, [r2, #0]
 801f8a8:	681a      	ldr	r2, [r3, #0]
 801f8aa:	6042      	str	r2, [r0, #4]
 801f8ac:	b102      	cbz	r2, 801f8b0 <get_memory+0x18>
 801f8ae:	6010      	str	r0, [r2, #0]
 801f8b0:	2200      	movs	r2, #0
 801f8b2:	6002      	str	r2, [r0, #0]
 801f8b4:	6018      	str	r0, [r3, #0]
 801f8b6:	4770      	bx	lr

0801f8b8 <put_memory>:
 801f8b8:	680b      	ldr	r3, [r1, #0]
 801f8ba:	b10b      	cbz	r3, 801f8c0 <put_memory+0x8>
 801f8bc:	684a      	ldr	r2, [r1, #4]
 801f8be:	605a      	str	r2, [r3, #4]
 801f8c0:	684a      	ldr	r2, [r1, #4]
 801f8c2:	b102      	cbz	r2, 801f8c6 <put_memory+0xe>
 801f8c4:	6013      	str	r3, [r2, #0]
 801f8c6:	6803      	ldr	r3, [r0, #0]
 801f8c8:	428b      	cmp	r3, r1
 801f8ca:	6843      	ldr	r3, [r0, #4]
 801f8cc:	bf08      	it	eq
 801f8ce:	6002      	streq	r2, [r0, #0]
 801f8d0:	604b      	str	r3, [r1, #4]
 801f8d2:	b103      	cbz	r3, 801f8d6 <put_memory+0x1e>
 801f8d4:	6019      	str	r1, [r3, #0]
 801f8d6:	2300      	movs	r3, #0
 801f8d8:	600b      	str	r3, [r1, #0]
 801f8da:	6041      	str	r1, [r0, #4]
 801f8dc:	4770      	bx	lr
 801f8de:	bf00      	nop

0801f8e0 <rmw_create_guard_condition>:
 801f8e0:	b538      	push	{r3, r4, r5, lr}
 801f8e2:	4605      	mov	r5, r0
 801f8e4:	4808      	ldr	r0, [pc, #32]	@ (801f908 <rmw_create_guard_condition+0x28>)
 801f8e6:	f7ff ffd7 	bl	801f898 <get_memory>
 801f8ea:	4603      	mov	r3, r0
 801f8ec:	b148      	cbz	r0, 801f902 <rmw_create_guard_condition+0x22>
 801f8ee:	6884      	ldr	r4, [r0, #8]
 801f8f0:	2300      	movs	r3, #0
 801f8f2:	61e5      	str	r5, [r4, #28]
 801f8f4:	7423      	strb	r3, [r4, #16]
 801f8f6:	f7f9 fd15 	bl	8019324 <rmw_get_implementation_identifier>
 801f8fa:	f104 0314 	add.w	r3, r4, #20
 801f8fe:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801f902:	4618      	mov	r0, r3
 801f904:	bd38      	pop	{r3, r4, r5, pc}
 801f906:	bf00      	nop
 801f908:	240694d4 	.word	0x240694d4

0801f90c <rmw_destroy_guard_condition>:
 801f90c:	b508      	push	{r3, lr}
 801f90e:	4b08      	ldr	r3, [pc, #32]	@ (801f930 <rmw_destroy_guard_condition+0x24>)
 801f910:	6819      	ldr	r1, [r3, #0]
 801f912:	b911      	cbnz	r1, 801f91a <rmw_destroy_guard_condition+0xe>
 801f914:	e00a      	b.n	801f92c <rmw_destroy_guard_condition+0x20>
 801f916:	6849      	ldr	r1, [r1, #4]
 801f918:	b141      	cbz	r1, 801f92c <rmw_destroy_guard_condition+0x20>
 801f91a:	688b      	ldr	r3, [r1, #8]
 801f91c:	3314      	adds	r3, #20
 801f91e:	4298      	cmp	r0, r3
 801f920:	d1f9      	bne.n	801f916 <rmw_destroy_guard_condition+0xa>
 801f922:	4803      	ldr	r0, [pc, #12]	@ (801f930 <rmw_destroy_guard_condition+0x24>)
 801f924:	f7ff ffc8 	bl	801f8b8 <put_memory>
 801f928:	2000      	movs	r0, #0
 801f92a:	bd08      	pop	{r3, pc}
 801f92c:	2001      	movs	r0, #1
 801f92e:	bd08      	pop	{r3, pc}
 801f930:	240694d4 	.word	0x240694d4

0801f934 <create_topic>:
 801f934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f938:	4605      	mov	r5, r0
 801f93a:	b084      	sub	sp, #16
 801f93c:	4822      	ldr	r0, [pc, #136]	@ (801f9c8 <create_topic+0x94>)
 801f93e:	460f      	mov	r7, r1
 801f940:	4616      	mov	r6, r2
 801f942:	f7ff ffa9 	bl	801f898 <get_memory>
 801f946:	4604      	mov	r4, r0
 801f948:	2800      	cmp	r0, #0
 801f94a:	d039      	beq.n	801f9c0 <create_topic+0x8c>
 801f94c:	692b      	ldr	r3, [r5, #16]
 801f94e:	2102      	movs	r1, #2
 801f950:	6884      	ldr	r4, [r0, #8]
 801f952:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f956:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801f9d0 <create_topic+0x9c>
 801f95a:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801f95e:	1c42      	adds	r2, r0, #1
 801f960:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801f964:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801f968:	f7fc f9c0 	bl	801bcec <uxr_object_id>
 801f96c:	223c      	movs	r2, #60	@ 0x3c
 801f96e:	6120      	str	r0, [r4, #16]
 801f970:	4641      	mov	r1, r8
 801f972:	4638      	mov	r0, r7
 801f974:	f7fb fb70 	bl	801b058 <generate_topic_name>
 801f978:	b1f0      	cbz	r0, 801f9b8 <create_topic+0x84>
 801f97a:	4f14      	ldr	r7, [pc, #80]	@ (801f9cc <create_topic+0x98>)
 801f97c:	4630      	mov	r0, r6
 801f97e:	2264      	movs	r2, #100	@ 0x64
 801f980:	4639      	mov	r1, r7
 801f982:	f7fb fb3b 	bl	801affc <generate_type_name>
 801f986:	b1b8      	cbz	r0, 801f9b8 <create_topic+0x84>
 801f988:	6928      	ldr	r0, [r5, #16]
 801f98a:	2106      	movs	r1, #6
 801f98c:	696b      	ldr	r3, [r5, #20]
 801f98e:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801f992:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f996:	f8cd 8000 	str.w	r8, [sp]
 801f99a:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801f99e:	6811      	ldr	r1, [r2, #0]
 801f9a0:	6922      	ldr	r2, [r4, #16]
 801f9a2:	f7fb ff27 	bl	801b7f4 <uxr_buffer_create_topic_bin>
 801f9a6:	4602      	mov	r2, r0
 801f9a8:	6928      	ldr	r0, [r5, #16]
 801f9aa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f9ae:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f9b2:	f7fb fa57 	bl	801ae64 <run_xrce_session>
 801f9b6:	b918      	cbnz	r0, 801f9c0 <create_topic+0x8c>
 801f9b8:	4620      	mov	r0, r4
 801f9ba:	2400      	movs	r4, #0
 801f9bc:	f7fb f946 	bl	801ac4c <rmw_uxrce_fini_topic_memory>
 801f9c0:	4620      	mov	r0, r4
 801f9c2:	b004      	add	sp, #16
 801f9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f9c8:	24069554 	.word	0x24069554
 801f9cc:	240695c8 	.word	0x240695c8
 801f9d0:	2406958c 	.word	0x2406958c

0801f9d4 <destroy_topic>:
 801f9d4:	b538      	push	{r3, r4, r5, lr}
 801f9d6:	6985      	ldr	r5, [r0, #24]
 801f9d8:	b1dd      	cbz	r5, 801fa12 <destroy_topic+0x3e>
 801f9da:	4604      	mov	r4, r0
 801f9dc:	6928      	ldr	r0, [r5, #16]
 801f9de:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f9e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f9e6:	6922      	ldr	r2, [r4, #16]
 801f9e8:	6819      	ldr	r1, [r3, #0]
 801f9ea:	f7fb fe85 	bl	801b6f8 <uxr_buffer_delete_entity>
 801f9ee:	4602      	mov	r2, r0
 801f9f0:	6928      	ldr	r0, [r5, #16]
 801f9f2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f9f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f9fa:	f7fb fa33 	bl	801ae64 <run_xrce_session>
 801f9fe:	4603      	mov	r3, r0
 801fa00:	4620      	mov	r0, r4
 801fa02:	2b00      	cmp	r3, #0
 801fa04:	bf14      	ite	ne
 801fa06:	2400      	movne	r4, #0
 801fa08:	2402      	moveq	r4, #2
 801fa0a:	f7fb f91f 	bl	801ac4c <rmw_uxrce_fini_topic_memory>
 801fa0e:	4620      	mov	r0, r4
 801fa10:	bd38      	pop	{r3, r4, r5, pc}
 801fa12:	2401      	movs	r4, #1
 801fa14:	4620      	mov	r0, r4
 801fa16:	bd38      	pop	{r3, r4, r5, pc}

0801fa18 <rmw_uros_epoch_nanos>:
 801fa18:	4b05      	ldr	r3, [pc, #20]	@ (801fa30 <rmw_uros_epoch_nanos+0x18>)
 801fa1a:	681b      	ldr	r3, [r3, #0]
 801fa1c:	b123      	cbz	r3, 801fa28 <rmw_uros_epoch_nanos+0x10>
 801fa1e:	6898      	ldr	r0, [r3, #8]
 801fa20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801fa24:	f7fc bbd8 	b.w	801c1d8 <uxr_epoch_nanos>
 801fa28:	2000      	movs	r0, #0
 801fa2a:	2100      	movs	r1, #0
 801fa2c:	4770      	bx	lr
 801fa2e:	bf00      	nop
 801fa30:	24069524 	.word	0x24069524

0801fa34 <rosidl_runtime_c__String__init>:
 801fa34:	b510      	push	{r4, lr}
 801fa36:	4604      	mov	r4, r0
 801fa38:	b086      	sub	sp, #24
 801fa3a:	b170      	cbz	r0, 801fa5a <rosidl_runtime_c__String__init+0x26>
 801fa3c:	a801      	add	r0, sp, #4
 801fa3e:	f7f5 f94b 	bl	8014cd8 <rcutils_get_default_allocator>
 801fa42:	9b01      	ldr	r3, [sp, #4]
 801fa44:	9905      	ldr	r1, [sp, #20]
 801fa46:	2001      	movs	r0, #1
 801fa48:	4798      	blx	r3
 801fa4a:	6020      	str	r0, [r4, #0]
 801fa4c:	b128      	cbz	r0, 801fa5a <rosidl_runtime_c__String__init+0x26>
 801fa4e:	2100      	movs	r1, #0
 801fa50:	2201      	movs	r2, #1
 801fa52:	7001      	strb	r1, [r0, #0]
 801fa54:	4610      	mov	r0, r2
 801fa56:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801fa5a:	b006      	add	sp, #24
 801fa5c:	bd10      	pop	{r4, pc}
 801fa5e:	bf00      	nop

0801fa60 <rosidl_runtime_c__String__fini>:
 801fa60:	b320      	cbz	r0, 801faac <rosidl_runtime_c__String__fini+0x4c>
 801fa62:	6803      	ldr	r3, [r0, #0]
 801fa64:	b510      	push	{r4, lr}
 801fa66:	4604      	mov	r4, r0
 801fa68:	b086      	sub	sp, #24
 801fa6a:	b173      	cbz	r3, 801fa8a <rosidl_runtime_c__String__fini+0x2a>
 801fa6c:	6883      	ldr	r3, [r0, #8]
 801fa6e:	b1f3      	cbz	r3, 801faae <rosidl_runtime_c__String__fini+0x4e>
 801fa70:	a801      	add	r0, sp, #4
 801fa72:	f7f5 f931 	bl	8014cd8 <rcutils_get_default_allocator>
 801fa76:	9b02      	ldr	r3, [sp, #8]
 801fa78:	9905      	ldr	r1, [sp, #20]
 801fa7a:	6820      	ldr	r0, [r4, #0]
 801fa7c:	4798      	blx	r3
 801fa7e:	2300      	movs	r3, #0
 801fa80:	e9c4 3300 	strd	r3, r3, [r4]
 801fa84:	60a3      	str	r3, [r4, #8]
 801fa86:	b006      	add	sp, #24
 801fa88:	bd10      	pop	{r4, pc}
 801fa8a:	6843      	ldr	r3, [r0, #4]
 801fa8c:	b9db      	cbnz	r3, 801fac6 <rosidl_runtime_c__String__fini+0x66>
 801fa8e:	6883      	ldr	r3, [r0, #8]
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	d0f8      	beq.n	801fa86 <rosidl_runtime_c__String__fini+0x26>
 801fa94:	4b12      	ldr	r3, [pc, #72]	@ (801fae0 <rosidl_runtime_c__String__fini+0x80>)
 801fa96:	2251      	movs	r2, #81	@ 0x51
 801fa98:	2101      	movs	r1, #1
 801fa9a:	4812      	ldr	r0, [pc, #72]	@ (801fae4 <rosidl_runtime_c__String__fini+0x84>)
 801fa9c:	681b      	ldr	r3, [r3, #0]
 801fa9e:	68db      	ldr	r3, [r3, #12]
 801faa0:	f001 f8f0 	bl	8020c84 <fwrite>
 801faa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801faa8:	f000 fdac 	bl	8020604 <exit>
 801faac:	4770      	bx	lr
 801faae:	4b0c      	ldr	r3, [pc, #48]	@ (801fae0 <rosidl_runtime_c__String__fini+0x80>)
 801fab0:	224c      	movs	r2, #76	@ 0x4c
 801fab2:	2101      	movs	r1, #1
 801fab4:	480c      	ldr	r0, [pc, #48]	@ (801fae8 <rosidl_runtime_c__String__fini+0x88>)
 801fab6:	681b      	ldr	r3, [r3, #0]
 801fab8:	68db      	ldr	r3, [r3, #12]
 801faba:	f001 f8e3 	bl	8020c84 <fwrite>
 801fabe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fac2:	f000 fd9f 	bl	8020604 <exit>
 801fac6:	4b06      	ldr	r3, [pc, #24]	@ (801fae0 <rosidl_runtime_c__String__fini+0x80>)
 801fac8:	224e      	movs	r2, #78	@ 0x4e
 801faca:	2101      	movs	r1, #1
 801facc:	4807      	ldr	r0, [pc, #28]	@ (801faec <rosidl_runtime_c__String__fini+0x8c>)
 801face:	681b      	ldr	r3, [r3, #0]
 801fad0:	68db      	ldr	r3, [r3, #12]
 801fad2:	f001 f8d7 	bl	8020c84 <fwrite>
 801fad6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fada:	f000 fd93 	bl	8020604 <exit>
 801fade:	bf00      	nop
 801fae0:	240013a0 	.word	0x240013a0
 801fae4:	080245a4 	.word	0x080245a4
 801fae8:	08024504 	.word	0x08024504
 801faec:	08024554 	.word	0x08024554

0801faf0 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 801faf0:	3800      	subs	r0, #0
 801faf2:	bf18      	it	ne
 801faf4:	2001      	movne	r0, #1
 801faf6:	4770      	bx	lr

0801faf8 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 801faf8:	4770      	bx	lr
 801fafa:	bf00      	nop

0801fafc <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 801fafc:	3800      	subs	r0, #0
 801fafe:	bf18      	it	ne
 801fb00:	2001      	movne	r0, #1
 801fb02:	4770      	bx	lr

0801fb04 <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 801fb04:	4770      	bx	lr
 801fb06:	bf00      	nop

0801fb08 <ucdr_serialize_string>:
 801fb08:	b510      	push	{r4, lr}
 801fb0a:	b082      	sub	sp, #8
 801fb0c:	4604      	mov	r4, r0
 801fb0e:	4608      	mov	r0, r1
 801fb10:	9101      	str	r1, [sp, #4]
 801fb12:	f7e0 fbef 	bl	80002f4 <strlen>
 801fb16:	4602      	mov	r2, r0
 801fb18:	9901      	ldr	r1, [sp, #4]
 801fb1a:	4620      	mov	r0, r4
 801fb1c:	3201      	adds	r2, #1
 801fb1e:	b002      	add	sp, #8
 801fb20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb24:	f7f5 bec0 	b.w	80158a8 <ucdr_serialize_sequence_char>

0801fb28 <ucdr_deserialize_string>:
 801fb28:	b500      	push	{lr}
 801fb2a:	b083      	sub	sp, #12
 801fb2c:	ab01      	add	r3, sp, #4
 801fb2e:	f7f5 fecd 	bl	80158cc <ucdr_deserialize_sequence_char>
 801fb32:	b003      	add	sp, #12
 801fb34:	f85d fb04 	ldr.w	pc, [sp], #4

0801fb38 <uxr_init_input_best_effort_stream>:
 801fb38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801fb3c:	8003      	strh	r3, [r0, #0]
 801fb3e:	4770      	bx	lr

0801fb40 <uxr_reset_input_best_effort_stream>:
 801fb40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801fb44:	8003      	strh	r3, [r0, #0]
 801fb46:	4770      	bx	lr

0801fb48 <uxr_receive_best_effort_message>:
 801fb48:	b538      	push	{r3, r4, r5, lr}
 801fb4a:	4604      	mov	r4, r0
 801fb4c:	8800      	ldrh	r0, [r0, #0]
 801fb4e:	460d      	mov	r5, r1
 801fb50:	f000 fd24 	bl	802059c <uxr_seq_num_cmp>
 801fb54:	4603      	mov	r3, r0
 801fb56:	0fc0      	lsrs	r0, r0, #31
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	bfb8      	it	lt
 801fb5c:	8025      	strhlt	r5, [r4, #0]
 801fb5e:	bd38      	pop	{r3, r4, r5, pc}

0801fb60 <on_full_input_buffer>:
 801fb60:	b570      	push	{r4, r5, r6, lr}
 801fb62:	460c      	mov	r4, r1
 801fb64:	4605      	mov	r5, r0
 801fb66:	8908      	ldrh	r0, [r1, #8]
 801fb68:	682b      	ldr	r3, [r5, #0]
 801fb6a:	7d26      	ldrb	r6, [r4, #20]
 801fb6c:	e9d1 1200 	ldrd	r1, r2, [r1]
 801fb70:	fbb2 f2f0 	udiv	r2, r2, r0
 801fb74:	eba3 0c01 	sub.w	ip, r3, r1
 801fb78:	fbbc fcf2 	udiv	ip, ip, r2
 801fb7c:	f10c 0c01 	add.w	ip, ip, #1
 801fb80:	fa1f f38c 	uxth.w	r3, ip
 801fb84:	fbb3 fcf0 	udiv	ip, r3, r0
 801fb88:	fb00 331c 	mls	r3, r0, ip, r3
 801fb8c:	b29b      	uxth	r3, r3
 801fb8e:	fb02 f303 	mul.w	r3, r2, r3
 801fb92:	1d18      	adds	r0, r3, #4
 801fb94:	4408      	add	r0, r1
 801fb96:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801fb9a:	b116      	cbz	r6, 801fba2 <on_full_input_buffer+0x42>
 801fb9c:	2600      	movs	r6, #0
 801fb9e:	f840 6c04 	str.w	r6, [r0, #-4]
 801fba2:	2a03      	cmp	r2, #3
 801fba4:	d801      	bhi.n	801fbaa <on_full_input_buffer+0x4a>
 801fba6:	2001      	movs	r0, #1
 801fba8:	bd70      	pop	{r4, r5, r6, pc}
 801fbaa:	3308      	adds	r3, #8
 801fbac:	4628      	mov	r0, r5
 801fbae:	3a04      	subs	r2, #4
 801fbb0:	4419      	add	r1, r3
 801fbb2:	692b      	ldr	r3, [r5, #16]
 801fbb4:	f7f4 f84e 	bl	8013c54 <ucdr_init_buffer_origin>
 801fbb8:	4628      	mov	r0, r5
 801fbba:	4622      	mov	r2, r4
 801fbbc:	4902      	ldr	r1, [pc, #8]	@ (801fbc8 <on_full_input_buffer+0x68>)
 801fbbe:	f7f4 f825 	bl	8013c0c <ucdr_set_on_full_buffer_callback>
 801fbc2:	2000      	movs	r0, #0
 801fbc4:	bd70      	pop	{r4, r5, r6, pc}
 801fbc6:	bf00      	nop
 801fbc8:	0801fb61 	.word	0x0801fb61

0801fbcc <uxr_init_input_reliable_stream>:
 801fbcc:	b510      	push	{r4, lr}
 801fbce:	e9c0 1200 	strd	r1, r2, [r0]
 801fbd2:	2400      	movs	r4, #0
 801fbd4:	9a02      	ldr	r2, [sp, #8]
 801fbd6:	8103      	strh	r3, [r0, #8]
 801fbd8:	6102      	str	r2, [r0, #16]
 801fbda:	7504      	strb	r4, [r0, #20]
 801fbdc:	b1c3      	cbz	r3, 801fc10 <uxr_init_input_reliable_stream+0x44>
 801fbde:	600c      	str	r4, [r1, #0]
 801fbe0:	8901      	ldrh	r1, [r0, #8]
 801fbe2:	2901      	cmp	r1, #1
 801fbe4:	d914      	bls.n	801fc10 <uxr_init_input_reliable_stream+0x44>
 801fbe6:	f04f 0c01 	mov.w	ip, #1
 801fbea:	6843      	ldr	r3, [r0, #4]
 801fbec:	f10c 0e01 	add.w	lr, ip, #1
 801fbf0:	fbbc f2f1 	udiv	r2, ip, r1
 801fbf4:	fbb3 f3f1 	udiv	r3, r3, r1
 801fbf8:	fb01 c212 	mls	r2, r1, r2, ip
 801fbfc:	fa1f fc8e 	uxth.w	ip, lr
 801fc00:	b292      	uxth	r2, r2
 801fc02:	fb02 f303 	mul.w	r3, r2, r3
 801fc06:	6802      	ldr	r2, [r0, #0]
 801fc08:	50d4      	str	r4, [r2, r3]
 801fc0a:	8901      	ldrh	r1, [r0, #8]
 801fc0c:	4561      	cmp	r1, ip
 801fc0e:	d8ec      	bhi.n	801fbea <uxr_init_input_reliable_stream+0x1e>
 801fc10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fc14:	60c3      	str	r3, [r0, #12]
 801fc16:	bd10      	pop	{r4, pc}

0801fc18 <uxr_reset_input_reliable_stream>:
 801fc18:	8901      	ldrh	r1, [r0, #8]
 801fc1a:	b1d9      	cbz	r1, 801fc54 <uxr_reset_input_reliable_stream+0x3c>
 801fc1c:	b510      	push	{r4, lr}
 801fc1e:	f04f 0e00 	mov.w	lr, #0
 801fc22:	46f4      	mov	ip, lr
 801fc24:	4674      	mov	r4, lr
 801fc26:	6843      	ldr	r3, [r0, #4]
 801fc28:	f10e 0e01 	add.w	lr, lr, #1
 801fc2c:	fbbc f2f1 	udiv	r2, ip, r1
 801fc30:	fbb3 f3f1 	udiv	r3, r3, r1
 801fc34:	fb01 c212 	mls	r2, r1, r2, ip
 801fc38:	fa1f fc8e 	uxth.w	ip, lr
 801fc3c:	b292      	uxth	r2, r2
 801fc3e:	fb02 f303 	mul.w	r3, r2, r3
 801fc42:	6802      	ldr	r2, [r0, #0]
 801fc44:	50d4      	str	r4, [r2, r3]
 801fc46:	8901      	ldrh	r1, [r0, #8]
 801fc48:	4561      	cmp	r1, ip
 801fc4a:	d8ec      	bhi.n	801fc26 <uxr_reset_input_reliable_stream+0xe>
 801fc4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fc50:	60c3      	str	r3, [r0, #12]
 801fc52:	bd10      	pop	{r4, pc}
 801fc54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fc58:	60c3      	str	r3, [r0, #12]
 801fc5a:	4770      	bx	lr

0801fc5c <uxr_receive_reliable_message>:
 801fc5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fc60:	4604      	mov	r4, r0
 801fc62:	460d      	mov	r5, r1
 801fc64:	8901      	ldrh	r1, [r0, #8]
 801fc66:	4617      	mov	r7, r2
 801fc68:	8980      	ldrh	r0, [r0, #12]
 801fc6a:	4698      	mov	r8, r3
 801fc6c:	f000 fc8e 	bl	802058c <uxr_seq_num_add>
 801fc70:	4629      	mov	r1, r5
 801fc72:	4606      	mov	r6, r0
 801fc74:	89a0      	ldrh	r0, [r4, #12]
 801fc76:	f000 fc91 	bl	802059c <uxr_seq_num_cmp>
 801fc7a:	2800      	cmp	r0, #0
 801fc7c:	db0a      	blt.n	801fc94 <uxr_receive_reliable_message+0x38>
 801fc7e:	2600      	movs	r6, #0
 801fc80:	4629      	mov	r1, r5
 801fc82:	89e0      	ldrh	r0, [r4, #14]
 801fc84:	f000 fc8a 	bl	802059c <uxr_seq_num_cmp>
 801fc88:	2800      	cmp	r0, #0
 801fc8a:	da00      	bge.n	801fc8e <uxr_receive_reliable_message+0x32>
 801fc8c:	81e5      	strh	r5, [r4, #14]
 801fc8e:	4630      	mov	r0, r6
 801fc90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc94:	4630      	mov	r0, r6
 801fc96:	4629      	mov	r1, r5
 801fc98:	f000 fc80 	bl	802059c <uxr_seq_num_cmp>
 801fc9c:	2800      	cmp	r0, #0
 801fc9e:	dbee      	blt.n	801fc7e <uxr_receive_reliable_message+0x22>
 801fca0:	6923      	ldr	r3, [r4, #16]
 801fca2:	4638      	mov	r0, r7
 801fca4:	4798      	blx	r3
 801fca6:	4681      	mov	r9, r0
 801fca8:	2101      	movs	r1, #1
 801fcaa:	89a0      	ldrh	r0, [r4, #12]
 801fcac:	f000 fc6e 	bl	802058c <uxr_seq_num_add>
 801fcb0:	f1b9 0f00 	cmp.w	r9, #0
 801fcb4:	bf08      	it	eq
 801fcb6:	4285      	cmpeq	r5, r0
 801fcb8:	bf0c      	ite	eq
 801fcba:	2601      	moveq	r6, #1
 801fcbc:	2600      	movne	r6, #0
 801fcbe:	d104      	bne.n	801fcca <uxr_receive_reliable_message+0x6e>
 801fcc0:	2300      	movs	r3, #0
 801fcc2:	9a08      	ldr	r2, [sp, #32]
 801fcc4:	81a0      	strh	r0, [r4, #12]
 801fcc6:	7013      	strb	r3, [r2, #0]
 801fcc8:	e7da      	b.n	801fc80 <uxr_receive_reliable_message+0x24>
 801fcca:	8922      	ldrh	r2, [r4, #8]
 801fccc:	6863      	ldr	r3, [r4, #4]
 801fcce:	fbb5 f0f2 	udiv	r0, r5, r2
 801fcd2:	fbb3 f3f2 	udiv	r3, r3, r2
 801fcd6:	fb02 5010 	mls	r0, r2, r0, r5
 801fcda:	b280      	uxth	r0, r0
 801fcdc:	fb03 f000 	mul.w	r0, r3, r0
 801fce0:	6823      	ldr	r3, [r4, #0]
 801fce2:	3004      	adds	r0, #4
 801fce4:	4418      	add	r0, r3
 801fce6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	d1c7      	bne.n	801fc7e <uxr_receive_reliable_message+0x22>
 801fcee:	4639      	mov	r1, r7
 801fcf0:	4642      	mov	r2, r8
 801fcf2:	f001 fa82 	bl	80211fa <memcpy>
 801fcf6:	8921      	ldrh	r1, [r4, #8]
 801fcf8:	6863      	ldr	r3, [r4, #4]
 801fcfa:	fbb5 f2f1 	udiv	r2, r5, r1
 801fcfe:	fbb3 f3f1 	udiv	r3, r3, r1
 801fd02:	fb01 5212 	mls	r2, r1, r2, r5
 801fd06:	b292      	uxth	r2, r2
 801fd08:	fb02 f303 	mul.w	r3, r2, r3
 801fd0c:	6822      	ldr	r2, [r4, #0]
 801fd0e:	f842 8003 	str.w	r8, [r2, r3]
 801fd12:	2301      	movs	r3, #1
 801fd14:	9a08      	ldr	r2, [sp, #32]
 801fd16:	7013      	strb	r3, [r2, #0]
 801fd18:	f1b9 0f00 	cmp.w	r9, #0
 801fd1c:	d0af      	beq.n	801fc7e <uxr_receive_reliable_message+0x22>
 801fd1e:	89a6      	ldrh	r6, [r4, #12]
 801fd20:	2101      	movs	r1, #1
 801fd22:	4630      	mov	r0, r6
 801fd24:	f000 fc32 	bl	802058c <uxr_seq_num_add>
 801fd28:	8921      	ldrh	r1, [r4, #8]
 801fd2a:	6863      	ldr	r3, [r4, #4]
 801fd2c:	4606      	mov	r6, r0
 801fd2e:	fbb0 f2f1 	udiv	r2, r0, r1
 801fd32:	fbb3 f3f1 	udiv	r3, r3, r1
 801fd36:	fb01 0212 	mls	r2, r1, r2, r0
 801fd3a:	6820      	ldr	r0, [r4, #0]
 801fd3c:	b292      	uxth	r2, r2
 801fd3e:	fb02 f303 	mul.w	r3, r2, r3
 801fd42:	3304      	adds	r3, #4
 801fd44:	4418      	add	r0, r3
 801fd46:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	d097      	beq.n	801fc7e <uxr_receive_reliable_message+0x22>
 801fd4e:	6923      	ldr	r3, [r4, #16]
 801fd50:	4798      	blx	r3
 801fd52:	2802      	cmp	r0, #2
 801fd54:	d002      	beq.n	801fd5c <uxr_receive_reliable_message+0x100>
 801fd56:	2801      	cmp	r0, #1
 801fd58:	d0e2      	beq.n	801fd20 <uxr_receive_reliable_message+0xc4>
 801fd5a:	e790      	b.n	801fc7e <uxr_receive_reliable_message+0x22>
 801fd5c:	2601      	movs	r6, #1
 801fd5e:	e78f      	b.n	801fc80 <uxr_receive_reliable_message+0x24>

0801fd60 <uxr_next_input_reliable_buffer_available>:
 801fd60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fd64:	4604      	mov	r4, r0
 801fd66:	460f      	mov	r7, r1
 801fd68:	8980      	ldrh	r0, [r0, #12]
 801fd6a:	2101      	movs	r1, #1
 801fd6c:	4690      	mov	r8, r2
 801fd6e:	f000 fc0d 	bl	802058c <uxr_seq_num_add>
 801fd72:	8922      	ldrh	r2, [r4, #8]
 801fd74:	6866      	ldr	r6, [r4, #4]
 801fd76:	fbb0 f3f2 	udiv	r3, r0, r2
 801fd7a:	fbb6 f6f2 	udiv	r6, r6, r2
 801fd7e:	fb02 0313 	mls	r3, r2, r3, r0
 801fd82:	b29b      	uxth	r3, r3
 801fd84:	fb03 f606 	mul.w	r6, r3, r6
 801fd88:	6823      	ldr	r3, [r4, #0]
 801fd8a:	3604      	adds	r6, #4
 801fd8c:	441e      	add	r6, r3
 801fd8e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801fd92:	f1b9 0f00 	cmp.w	r9, #0
 801fd96:	d023      	beq.n	801fde0 <uxr_next_input_reliable_buffer_available+0x80>
 801fd98:	4605      	mov	r5, r0
 801fd9a:	6923      	ldr	r3, [r4, #16]
 801fd9c:	4630      	mov	r0, r6
 801fd9e:	4798      	blx	r3
 801fda0:	4682      	mov	sl, r0
 801fda2:	b300      	cbz	r0, 801fde6 <uxr_next_input_reliable_buffer_available+0x86>
 801fda4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801fda8:	2101      	movs	r1, #1
 801fdaa:	4650      	mov	r0, sl
 801fdac:	f000 fbee 	bl	802058c <uxr_seq_num_add>
 801fdb0:	8921      	ldrh	r1, [r4, #8]
 801fdb2:	4682      	mov	sl, r0
 801fdb4:	6863      	ldr	r3, [r4, #4]
 801fdb6:	6820      	ldr	r0, [r4, #0]
 801fdb8:	fbba f2f1 	udiv	r2, sl, r1
 801fdbc:	fbb3 f3f1 	udiv	r3, r3, r1
 801fdc0:	fb01 a212 	mls	r2, r1, r2, sl
 801fdc4:	b292      	uxth	r2, r2
 801fdc6:	fb02 f303 	mul.w	r3, r2, r3
 801fdca:	3304      	adds	r3, #4
 801fdcc:	4418      	add	r0, r3
 801fdce:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801fdd2:	b12b      	cbz	r3, 801fde0 <uxr_next_input_reliable_buffer_available+0x80>
 801fdd4:	6923      	ldr	r3, [r4, #16]
 801fdd6:	4798      	blx	r3
 801fdd8:	2802      	cmp	r0, #2
 801fdda:	d01b      	beq.n	801fe14 <uxr_next_input_reliable_buffer_available+0xb4>
 801fddc:	2801      	cmp	r0, #1
 801fdde:	d0e3      	beq.n	801fda8 <uxr_next_input_reliable_buffer_available+0x48>
 801fde0:	2000      	movs	r0, #0
 801fde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fde6:	464a      	mov	r2, r9
 801fde8:	4631      	mov	r1, r6
 801fdea:	4638      	mov	r0, r7
 801fdec:	f7f3 ff3a 	bl	8013c64 <ucdr_init_buffer>
 801fdf0:	8921      	ldrh	r1, [r4, #8]
 801fdf2:	6863      	ldr	r3, [r4, #4]
 801fdf4:	2001      	movs	r0, #1
 801fdf6:	fbb5 f2f1 	udiv	r2, r5, r1
 801fdfa:	fbb3 f3f1 	udiv	r3, r3, r1
 801fdfe:	fb01 5212 	mls	r2, r1, r2, r5
 801fe02:	b292      	uxth	r2, r2
 801fe04:	fb02 f303 	mul.w	r3, r2, r3
 801fe08:	6822      	ldr	r2, [r4, #0]
 801fe0a:	f842 a003 	str.w	sl, [r2, r3]
 801fe0e:	81a5      	strh	r5, [r4, #12]
 801fe10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fe14:	8920      	ldrh	r0, [r4, #8]
 801fe16:	eb06 0108 	add.w	r1, r6, r8
 801fe1a:	6863      	ldr	r3, [r4, #4]
 801fe1c:	eba9 0208 	sub.w	r2, r9, r8
 801fe20:	fbb5 f6f0 	udiv	r6, r5, r0
 801fe24:	fbb3 f3f0 	udiv	r3, r3, r0
 801fe28:	fb00 5516 	mls	r5, r0, r6, r5
 801fe2c:	2000      	movs	r0, #0
 801fe2e:	b2ad      	uxth	r5, r5
 801fe30:	fb03 f505 	mul.w	r5, r3, r5
 801fe34:	6823      	ldr	r3, [r4, #0]
 801fe36:	5158      	str	r0, [r3, r5]
 801fe38:	4638      	mov	r0, r7
 801fe3a:	f7f3 ff13 	bl	8013c64 <ucdr_init_buffer>
 801fe3e:	4638      	mov	r0, r7
 801fe40:	4622      	mov	r2, r4
 801fe42:	4903      	ldr	r1, [pc, #12]	@ (801fe50 <uxr_next_input_reliable_buffer_available+0xf0>)
 801fe44:	f7f3 fee2 	bl	8013c0c <ucdr_set_on_full_buffer_callback>
 801fe48:	2001      	movs	r0, #1
 801fe4a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801fe4e:	e7c8      	b.n	801fde2 <uxr_next_input_reliable_buffer_available+0x82>
 801fe50:	0801fb61 	.word	0x0801fb61

0801fe54 <uxr_process_heartbeat>:
 801fe54:	b538      	push	{r3, r4, r5, lr}
 801fe56:	4611      	mov	r1, r2
 801fe58:	4604      	mov	r4, r0
 801fe5a:	89c0      	ldrh	r0, [r0, #14]
 801fe5c:	4615      	mov	r5, r2
 801fe5e:	f000 fb9d 	bl	802059c <uxr_seq_num_cmp>
 801fe62:	2800      	cmp	r0, #0
 801fe64:	bfb8      	it	lt
 801fe66:	81e5      	strhlt	r5, [r4, #14]
 801fe68:	bd38      	pop	{r3, r4, r5, pc}
 801fe6a:	bf00      	nop

0801fe6c <uxr_compute_acknack>:
 801fe6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe70:	8903      	ldrh	r3, [r0, #8]
 801fe72:	4604      	mov	r4, r0
 801fe74:	460f      	mov	r7, r1
 801fe76:	8985      	ldrh	r5, [r0, #12]
 801fe78:	b1db      	cbz	r3, 801feb2 <uxr_compute_acknack+0x46>
 801fe7a:	4628      	mov	r0, r5
 801fe7c:	2601      	movs	r6, #1
 801fe7e:	e004      	b.n	801fe8a <uxr_compute_acknack+0x1e>
 801fe80:	4566      	cmp	r6, ip
 801fe82:	f106 0601 	add.w	r6, r6, #1
 801fe86:	d214      	bcs.n	801feb2 <uxr_compute_acknack+0x46>
 801fe88:	89a0      	ldrh	r0, [r4, #12]
 801fe8a:	b2b1      	uxth	r1, r6
 801fe8c:	f000 fb7e 	bl	802058c <uxr_seq_num_add>
 801fe90:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801fe94:	fbb0 f2fc 	udiv	r2, r0, ip
 801fe98:	e9d4 1300 	ldrd	r1, r3, [r4]
 801fe9c:	fb0c 0212 	mls	r2, ip, r2, r0
 801fea0:	fbb3 f3fc 	udiv	r3, r3, ip
 801fea4:	b292      	uxth	r2, r2
 801fea6:	fb02 f303 	mul.w	r3, r2, r3
 801feaa:	58cb      	ldr	r3, [r1, r3]
 801feac:	2b00      	cmp	r3, #0
 801feae:	d1e7      	bne.n	801fe80 <uxr_compute_acknack+0x14>
 801feb0:	4605      	mov	r5, r0
 801feb2:	803d      	strh	r5, [r7, #0]
 801feb4:	2101      	movs	r1, #1
 801feb6:	89e6      	ldrh	r6, [r4, #14]
 801feb8:	4628      	mov	r0, r5
 801feba:	f000 fb6b 	bl	8020594 <uxr_seq_num_sub>
 801febe:	4601      	mov	r1, r0
 801fec0:	4630      	mov	r0, r6
 801fec2:	f000 fb67 	bl	8020594 <uxr_seq_num_sub>
 801fec6:	4606      	mov	r6, r0
 801fec8:	b328      	cbz	r0, 801ff16 <uxr_compute_acknack+0xaa>
 801feca:	f04f 0900 	mov.w	r9, #0
 801fece:	f04f 0801 	mov.w	r8, #1
 801fed2:	464d      	mov	r5, r9
 801fed4:	fa1f f189 	uxth.w	r1, r9
 801fed8:	8838      	ldrh	r0, [r7, #0]
 801feda:	f000 fb57 	bl	802058c <uxr_seq_num_add>
 801fede:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801fee2:	6861      	ldr	r1, [r4, #4]
 801fee4:	fa08 fe09 	lsl.w	lr, r8, r9
 801fee8:	6822      	ldr	r2, [r4, #0]
 801feea:	f109 0901 	add.w	r9, r9, #1
 801feee:	ea4e 0e05 	orr.w	lr, lr, r5
 801fef2:	fbb0 f3fc 	udiv	r3, r0, ip
 801fef6:	fbb1 f1fc 	udiv	r1, r1, ip
 801fefa:	fb03 001c 	mls	r0, r3, ip, r0
 801fefe:	b283      	uxth	r3, r0
 801ff00:	fb01 f303 	mul.w	r3, r1, r3
 801ff04:	58d3      	ldr	r3, [r2, r3]
 801ff06:	b90b      	cbnz	r3, 801ff0c <uxr_compute_acknack+0xa0>
 801ff08:	fa1f f58e 	uxth.w	r5, lr
 801ff0c:	454e      	cmp	r6, r9
 801ff0e:	d1e1      	bne.n	801fed4 <uxr_compute_acknack+0x68>
 801ff10:	4628      	mov	r0, r5
 801ff12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ff16:	4605      	mov	r5, r0
 801ff18:	4628      	mov	r0, r5
 801ff1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ff1e:	bf00      	nop

0801ff20 <uxr_init_output_best_effort_stream>:
 801ff20:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801ff24:	6001      	str	r1, [r0, #0]
 801ff26:	7303      	strb	r3, [r0, #12]
 801ff28:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801ff2c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801ff30:	4770      	bx	lr
 801ff32:	bf00      	nop

0801ff34 <uxr_reset_output_best_effort_stream>:
 801ff34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ff38:	7b03      	ldrb	r3, [r0, #12]
 801ff3a:	81c2      	strh	r2, [r0, #14]
 801ff3c:	6043      	str	r3, [r0, #4]
 801ff3e:	4770      	bx	lr

0801ff40 <uxr_prepare_best_effort_buffer_to_write>:
 801ff40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff42:	4604      	mov	r4, r0
 801ff44:	b083      	sub	sp, #12
 801ff46:	6840      	ldr	r0, [r0, #4]
 801ff48:	460d      	mov	r5, r1
 801ff4a:	4616      	mov	r6, r2
 801ff4c:	f7fd fec0 	bl	801dcd0 <uxr_submessage_padding>
 801ff50:	6863      	ldr	r3, [r4, #4]
 801ff52:	4418      	add	r0, r3
 801ff54:	68a3      	ldr	r3, [r4, #8]
 801ff56:	1942      	adds	r2, r0, r5
 801ff58:	4293      	cmp	r3, r2
 801ff5a:	bf2c      	ite	cs
 801ff5c:	2701      	movcs	r7, #1
 801ff5e:	2700      	movcc	r7, #0
 801ff60:	d202      	bcs.n	801ff68 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801ff62:	4638      	mov	r0, r7
 801ff64:	b003      	add	sp, #12
 801ff66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff68:	9000      	str	r0, [sp, #0]
 801ff6a:	2300      	movs	r3, #0
 801ff6c:	4630      	mov	r0, r6
 801ff6e:	6821      	ldr	r1, [r4, #0]
 801ff70:	f7f3 fe66 	bl	8013c40 <ucdr_init_buffer_origin_offset>
 801ff74:	6861      	ldr	r1, [r4, #4]
 801ff76:	4638      	mov	r0, r7
 801ff78:	4429      	add	r1, r5
 801ff7a:	6061      	str	r1, [r4, #4]
 801ff7c:	b003      	add	sp, #12
 801ff7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ff80 <uxr_prepare_best_effort_buffer_to_send>:
 801ff80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff84:	4604      	mov	r4, r0
 801ff86:	461d      	mov	r5, r3
 801ff88:	6840      	ldr	r0, [r0, #4]
 801ff8a:	7b23      	ldrb	r3, [r4, #12]
 801ff8c:	4298      	cmp	r0, r3
 801ff8e:	bf8c      	ite	hi
 801ff90:	2601      	movhi	r6, #1
 801ff92:	2600      	movls	r6, #0
 801ff94:	d802      	bhi.n	801ff9c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801ff96:	4630      	mov	r0, r6
 801ff98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff9c:	4688      	mov	r8, r1
 801ff9e:	89e0      	ldrh	r0, [r4, #14]
 801ffa0:	2101      	movs	r1, #1
 801ffa2:	4617      	mov	r7, r2
 801ffa4:	f000 faf2 	bl	802058c <uxr_seq_num_add>
 801ffa8:	6823      	ldr	r3, [r4, #0]
 801ffaa:	81e0      	strh	r0, [r4, #14]
 801ffac:	8028      	strh	r0, [r5, #0]
 801ffae:	4630      	mov	r0, r6
 801ffb0:	f8c8 3000 	str.w	r3, [r8]
 801ffb4:	6863      	ldr	r3, [r4, #4]
 801ffb6:	603b      	str	r3, [r7, #0]
 801ffb8:	7b23      	ldrb	r3, [r4, #12]
 801ffba:	6063      	str	r3, [r4, #4]
 801ffbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ffc0 <on_full_output_buffer>:
 801ffc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffc2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801ffc6:	460c      	mov	r4, r1
 801ffc8:	6803      	ldr	r3, [r0, #0]
 801ffca:	4605      	mov	r5, r0
 801ffcc:	7b26      	ldrb	r6, [r4, #12]
 801ffce:	e9d1 1200 	ldrd	r1, r2, [r1]
 801ffd2:	fbb2 f2fc 	udiv	r2, r2, ip
 801ffd6:	eba3 0e01 	sub.w	lr, r3, r1
 801ffda:	6903      	ldr	r3, [r0, #16]
 801ffdc:	fbbe fef2 	udiv	lr, lr, r2
 801ffe0:	f10e 0e01 	add.w	lr, lr, #1
 801ffe4:	fa1f fe8e 	uxth.w	lr, lr
 801ffe8:	fbbe f7fc 	udiv	r7, lr, ip
 801ffec:	fb0c ec17 	mls	ip, ip, r7, lr
 801fff0:	fa1f fc8c 	uxth.w	ip, ip
 801fff4:	fb02 fc0c 	mul.w	ip, r2, ip
 801fff8:	f851 200c 	ldr.w	r2, [r1, ip]
 801fffc:	44b4      	add	ip, r6
 801fffe:	1b92      	subs	r2, r2, r6
 8020000:	f10c 0c08 	add.w	ip, ip, #8
 8020004:	3a04      	subs	r2, #4
 8020006:	4461      	add	r1, ip
 8020008:	f7f3 fe24 	bl	8013c54 <ucdr_init_buffer_origin>
 802000c:	4628      	mov	r0, r5
 802000e:	4622      	mov	r2, r4
 8020010:	4902      	ldr	r1, [pc, #8]	@ (802001c <on_full_output_buffer+0x5c>)
 8020012:	f7f3 fdfb 	bl	8013c0c <ucdr_set_on_full_buffer_callback>
 8020016:	2000      	movs	r0, #0
 8020018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802001a:	bf00      	nop
 802001c:	0801ffc1 	.word	0x0801ffc1

08020020 <uxr_init_output_reliable_stream>:
 8020020:	b530      	push	{r4, r5, lr}
 8020022:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8020026:	8103      	strh	r3, [r0, #8]
 8020028:	7304      	strb	r4, [r0, #12]
 802002a:	e9c0 1200 	strd	r1, r2, [r0]
 802002e:	b1e3      	cbz	r3, 802006a <uxr_init_output_reliable_stream+0x4a>
 8020030:	600c      	str	r4, [r1, #0]
 8020032:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8020036:	f1bc 0f01 	cmp.w	ip, #1
 802003a:	d916      	bls.n	802006a <uxr_init_output_reliable_stream+0x4a>
 802003c:	f04f 0e01 	mov.w	lr, #1
 8020040:	6843      	ldr	r3, [r0, #4]
 8020042:	f10e 0501 	add.w	r5, lr, #1
 8020046:	7b04      	ldrb	r4, [r0, #12]
 8020048:	6801      	ldr	r1, [r0, #0]
 802004a:	fbbe f2fc 	udiv	r2, lr, ip
 802004e:	fbb3 f3fc 	udiv	r3, r3, ip
 8020052:	fb0c e212 	mls	r2, ip, r2, lr
 8020056:	fa1f fe85 	uxth.w	lr, r5
 802005a:	b292      	uxth	r2, r2
 802005c:	fb02 f303 	mul.w	r3, r2, r3
 8020060:	50cc      	str	r4, [r1, r3]
 8020062:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8020066:	45f4      	cmp	ip, lr
 8020068:	d8ea      	bhi.n	8020040 <uxr_init_output_reliable_stream+0x20>
 802006a:	4b07      	ldr	r3, [pc, #28]	@ (8020088 <uxr_init_output_reliable_stream+0x68>)
 802006c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020070:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8020074:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8020078:	f8c0 300e 	str.w	r3, [r0, #14]
 802007c:	2300      	movs	r3, #0
 802007e:	8242      	strh	r2, [r0, #18]
 8020080:	8403      	strh	r3, [r0, #32]
 8020082:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8020086:	bd30      	pop	{r4, r5, pc}
 8020088:	ffff0000 	.word	0xffff0000
 802008c:	00000000 	.word	0x00000000

08020090 <uxr_reset_output_reliable_stream>:
 8020090:	8901      	ldrh	r1, [r0, #8]
 8020092:	b510      	push	{r4, lr}
 8020094:	b1b1      	cbz	r1, 80200c4 <uxr_reset_output_reliable_stream+0x34>
 8020096:	f04f 0e00 	mov.w	lr, #0
 802009a:	46f4      	mov	ip, lr
 802009c:	6843      	ldr	r3, [r0, #4]
 802009e:	f10e 0e01 	add.w	lr, lr, #1
 80200a2:	7b04      	ldrb	r4, [r0, #12]
 80200a4:	fbbc f2f1 	udiv	r2, ip, r1
 80200a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80200ac:	fb01 c212 	mls	r2, r1, r2, ip
 80200b0:	fa1f fc8e 	uxth.w	ip, lr
 80200b4:	b292      	uxth	r2, r2
 80200b6:	fb02 f303 	mul.w	r3, r2, r3
 80200ba:	6802      	ldr	r2, [r0, #0]
 80200bc:	50d4      	str	r4, [r2, r3]
 80200be:	8901      	ldrh	r1, [r0, #8]
 80200c0:	4561      	cmp	r1, ip
 80200c2:	d8eb      	bhi.n	802009c <uxr_reset_output_reliable_stream+0xc>
 80200c4:	4b08      	ldr	r3, [pc, #32]	@ (80200e8 <uxr_reset_output_reliable_stream+0x58>)
 80200c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80200ca:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 80200e0 <uxr_reset_output_reliable_stream+0x50>
 80200ce:	f8c0 300e 	str.w	r3, [r0, #14]
 80200d2:	2300      	movs	r3, #0
 80200d4:	8242      	strh	r2, [r0, #18]
 80200d6:	8403      	strh	r3, [r0, #32]
 80200d8:	ed80 7b06 	vstr	d7, [r0, #24]
 80200dc:	bd10      	pop	{r4, pc}
 80200de:	bf00      	nop
 80200e0:	ffffffff 	.word	0xffffffff
 80200e4:	7fffffff 	.word	0x7fffffff
 80200e8:	ffff0000 	.word	0xffff0000

080200ec <uxr_prepare_reliable_buffer_to_write>:
 80200ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200f0:	4604      	mov	r4, r0
 80200f2:	b091      	sub	sp, #68	@ 0x44
 80200f4:	8900      	ldrh	r0, [r0, #8]
 80200f6:	468b      	mov	fp, r1
 80200f8:	89e6      	ldrh	r6, [r4, #14]
 80200fa:	9204      	str	r2, [sp, #16]
 80200fc:	6865      	ldr	r5, [r4, #4]
 80200fe:	6823      	ldr	r3, [r4, #0]
 8020100:	f894 900c 	ldrb.w	r9, [r4, #12]
 8020104:	fbb6 f2f0 	udiv	r2, r6, r0
 8020108:	fbb5 f5f0 	udiv	r5, r5, r0
 802010c:	fb00 6212 	mls	r2, r0, r2, r6
 8020110:	1f2f      	subs	r7, r5, #4
 8020112:	b292      	uxth	r2, r2
 8020114:	fb05 3202 	mla	r2, r5, r2, r3
 8020118:	1d11      	adds	r1, r2, #4
 802011a:	f8d2 8000 	ldr.w	r8, [r2]
 802011e:	9103      	str	r1, [sp, #12]
 8020120:	2800      	cmp	r0, #0
 8020122:	f000 814a 	beq.w	80203ba <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8020126:	f04f 0c00 	mov.w	ip, #0
 802012a:	46e2      	mov	sl, ip
 802012c:	4661      	mov	r1, ip
 802012e:	f10c 0c01 	add.w	ip, ip, #1
 8020132:	fbb1 f2f0 	udiv	r2, r1, r0
 8020136:	fb00 1212 	mls	r2, r0, r2, r1
 802013a:	fa1f f18c 	uxth.w	r1, ip
 802013e:	b292      	uxth	r2, r2
 8020140:	fb05 f202 	mul.w	r2, r5, r2
 8020144:	589a      	ldr	r2, [r3, r2]
 8020146:	454a      	cmp	r2, r9
 8020148:	d103      	bne.n	8020152 <uxr_prepare_reliable_buffer_to_write+0x66>
 802014a:	f10a 0a01 	add.w	sl, sl, #1
 802014e:	fa1f fa8a 	uxth.w	sl, sl
 8020152:	4281      	cmp	r1, r0
 8020154:	d3eb      	bcc.n	802012e <uxr_prepare_reliable_buffer_to_write+0x42>
 8020156:	4640      	mov	r0, r8
 8020158:	2104      	movs	r1, #4
 802015a:	f8cd a014 	str.w	sl, [sp, #20]
 802015e:	f7f3 fd85 	bl	8013c6c <ucdr_alignment>
 8020162:	4480      	add	r8, r0
 8020164:	eb08 020b 	add.w	r2, r8, fp
 8020168:	42ba      	cmp	r2, r7
 802016a:	f240 80ca 	bls.w	8020302 <uxr_prepare_reliable_buffer_to_write+0x216>
 802016e:	7b22      	ldrb	r2, [r4, #12]
 8020170:	445a      	add	r2, fp
 8020172:	42ba      	cmp	r2, r7
 8020174:	f240 80b2 	bls.w	80202dc <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8020178:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 802017c:	b2bb      	uxth	r3, r7
 802017e:	eba2 0209 	sub.w	r2, r2, r9
 8020182:	441a      	add	r2, r3
 8020184:	b292      	uxth	r2, r2
 8020186:	fb0a f902 	mul.w	r9, sl, r2
 802018a:	9205      	str	r2, [sp, #20]
 802018c:	45d9      	cmp	r9, fp
 802018e:	9206      	str	r2, [sp, #24]
 8020190:	f0c0 80b3 	bcc.w	80202fa <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020194:	f108 0204 	add.w	r2, r8, #4
 8020198:	42ba      	cmp	r2, r7
 802019a:	f080 80da 	bcs.w	8020352 <uxr_prepare_reliable_buffer_to_write+0x266>
 802019e:	f1a3 0904 	sub.w	r9, r3, #4
 80201a2:	9b05      	ldr	r3, [sp, #20]
 80201a4:	eba9 0908 	sub.w	r9, r9, r8
 80201a8:	fa1f f989 	uxth.w	r9, r9
 80201ac:	ebab 0b09 	sub.w	fp, fp, r9
 80201b0:	fbbb f2f3 	udiv	r2, fp, r3
 80201b4:	fb03 b312 	mls	r3, r3, r2, fp
 80201b8:	2b00      	cmp	r3, #0
 80201ba:	f040 80c4 	bne.w	8020346 <uxr_prepare_reliable_buffer_to_write+0x25a>
 80201be:	b293      	uxth	r3, r2
 80201c0:	4553      	cmp	r3, sl
 80201c2:	f200 809a 	bhi.w	80202fa <uxr_prepare_reliable_buffer_to_write+0x20e>
 80201c6:	2b00      	cmp	r3, #0
 80201c8:	f000 80f9 	beq.w	80203be <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80201cc:	f8cd 801c 	str.w	r8, [sp, #28]
 80201d0:	f04f 0a00 	mov.w	sl, #0
 80201d4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80201d8:	f10d 0b20 	add.w	fp, sp, #32
 80201dc:	9505      	str	r5, [sp, #20]
 80201de:	461d      	mov	r5, r3
 80201e0:	e000      	b.n	80201e4 <uxr_prepare_reliable_buffer_to_write+0xf8>
 80201e2:	46c1      	mov	r9, r8
 80201e4:	8922      	ldrh	r2, [r4, #8]
 80201e6:	4658      	mov	r0, fp
 80201e8:	6863      	ldr	r3, [r4, #4]
 80201ea:	f10a 0a01 	add.w	sl, sl, #1
 80201ee:	fbb6 f1f2 	udiv	r1, r6, r2
 80201f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80201f6:	fb02 6111 	mls	r1, r2, r1, r6
 80201fa:	463a      	mov	r2, r7
 80201fc:	b289      	uxth	r1, r1
 80201fe:	fb03 f101 	mul.w	r1, r3, r1
 8020202:	6823      	ldr	r3, [r4, #0]
 8020204:	3104      	adds	r1, #4
 8020206:	4419      	add	r1, r3
 8020208:	2300      	movs	r3, #0
 802020a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 802020e:	f8cd c000 	str.w	ip, [sp]
 8020212:	f7f3 fd15 	bl	8013c40 <ucdr_init_buffer_origin_offset>
 8020216:	464a      	mov	r2, r9
 8020218:	2300      	movs	r3, #0
 802021a:	210d      	movs	r1, #13
 802021c:	4658      	mov	r0, fp
 802021e:	f7fd fd17 	bl	801dc50 <uxr_buffer_submessage_header>
 8020222:	8921      	ldrh	r1, [r4, #8]
 8020224:	6863      	ldr	r3, [r4, #4]
 8020226:	4630      	mov	r0, r6
 8020228:	fbb6 f2f1 	udiv	r2, r6, r1
 802022c:	fbb3 f3f1 	udiv	r3, r3, r1
 8020230:	fb01 6212 	mls	r2, r1, r2, r6
 8020234:	2101      	movs	r1, #1
 8020236:	b292      	uxth	r2, r2
 8020238:	fb02 f303 	mul.w	r3, r2, r3
 802023c:	6822      	ldr	r2, [r4, #0]
 802023e:	50d7      	str	r7, [r2, r3]
 8020240:	f000 f9a4 	bl	802058c <uxr_seq_num_add>
 8020244:	4606      	mov	r6, r0
 8020246:	fa1f f38a 	uxth.w	r3, sl
 802024a:	429d      	cmp	r5, r3
 802024c:	d8c9      	bhi.n	80201e2 <uxr_prepare_reliable_buffer_to_write+0xf6>
 802024e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8020252:	9d05      	ldr	r5, [sp, #20]
 8020254:	8920      	ldrh	r0, [r4, #8]
 8020256:	463a      	mov	r2, r7
 8020258:	6863      	ldr	r3, [r4, #4]
 802025a:	fbb6 f1f0 	udiv	r1, r6, r0
 802025e:	fbb3 f3f0 	udiv	r3, r3, r0
 8020262:	fb00 6111 	mls	r1, r0, r1, r6
 8020266:	4658      	mov	r0, fp
 8020268:	b289      	uxth	r1, r1
 802026a:	fb01 f303 	mul.w	r3, r1, r3
 802026e:	6821      	ldr	r1, [r4, #0]
 8020270:	3304      	adds	r3, #4
 8020272:	4419      	add	r1, r3
 8020274:	2300      	movs	r3, #0
 8020276:	f851 7c04 	ldr.w	r7, [r1, #-4]
 802027a:	9700      	str	r7, [sp, #0]
 802027c:	f7f3 fce0 	bl	8013c40 <ucdr_init_buffer_origin_offset>
 8020280:	9f06      	ldr	r7, [sp, #24]
 8020282:	4658      	mov	r0, fp
 8020284:	2302      	movs	r3, #2
 8020286:	b2ba      	uxth	r2, r7
 8020288:	210d      	movs	r1, #13
 802028a:	f7fd fce1 	bl	801dc50 <uxr_buffer_submessage_header>
 802028e:	f108 0104 	add.w	r1, r8, #4
 8020292:	9b03      	ldr	r3, [sp, #12]
 8020294:	f1a5 0208 	sub.w	r2, r5, #8
 8020298:	8925      	ldrh	r5, [r4, #8]
 802029a:	440b      	add	r3, r1
 802029c:	eba2 0208 	sub.w	r2, r2, r8
 80202a0:	fbb6 f0f5 	udiv	r0, r6, r5
 80202a4:	4619      	mov	r1, r3
 80202a6:	6863      	ldr	r3, [r4, #4]
 80202a8:	fb05 6010 	mls	r0, r5, r0, r6
 80202ac:	fbb3 f3f5 	udiv	r3, r3, r5
 80202b0:	b280      	uxth	r0, r0
 80202b2:	6825      	ldr	r5, [r4, #0]
 80202b4:	fb00 f303 	mul.w	r3, r0, r3
 80202b8:	7b20      	ldrb	r0, [r4, #12]
 80202ba:	3004      	adds	r0, #4
 80202bc:	4438      	add	r0, r7
 80202be:	50e8      	str	r0, [r5, r3]
 80202c0:	9d04      	ldr	r5, [sp, #16]
 80202c2:	4628      	mov	r0, r5
 80202c4:	f7f3 fcce 	bl	8013c64 <ucdr_init_buffer>
 80202c8:	4628      	mov	r0, r5
 80202ca:	4622      	mov	r2, r4
 80202cc:	493d      	ldr	r1, [pc, #244]	@ (80203c4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80202ce:	f7f3 fc9d 	bl	8013c0c <ucdr_set_on_full_buffer_callback>
 80202d2:	2001      	movs	r0, #1
 80202d4:	81e6      	strh	r6, [r4, #14]
 80202d6:	b011      	add	sp, #68	@ 0x44
 80202d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202dc:	2101      	movs	r1, #1
 80202de:	89e0      	ldrh	r0, [r4, #14]
 80202e0:	f000 f954 	bl	802058c <uxr_seq_num_add>
 80202e4:	4605      	mov	r5, r0
 80202e6:	8921      	ldrh	r1, [r4, #8]
 80202e8:	8a60      	ldrh	r0, [r4, #18]
 80202ea:	f000 f94f 	bl	802058c <uxr_seq_num_add>
 80202ee:	4601      	mov	r1, r0
 80202f0:	4628      	mov	r0, r5
 80202f2:	f000 f953 	bl	802059c <uxr_seq_num_cmp>
 80202f6:	2800      	cmp	r0, #0
 80202f8:	dd44      	ble.n	8020384 <uxr_prepare_reliable_buffer_to_write+0x298>
 80202fa:	2000      	movs	r0, #0
 80202fc:	b011      	add	sp, #68	@ 0x44
 80202fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020302:	8921      	ldrh	r1, [r4, #8]
 8020304:	8a60      	ldrh	r0, [r4, #18]
 8020306:	9205      	str	r2, [sp, #20]
 8020308:	f000 f940 	bl	802058c <uxr_seq_num_add>
 802030c:	4601      	mov	r1, r0
 802030e:	4630      	mov	r0, r6
 8020310:	f000 f944 	bl	802059c <uxr_seq_num_cmp>
 8020314:	2800      	cmp	r0, #0
 8020316:	9a05      	ldr	r2, [sp, #20]
 8020318:	dcef      	bgt.n	80202fa <uxr_prepare_reliable_buffer_to_write+0x20e>
 802031a:	8925      	ldrh	r5, [r4, #8]
 802031c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8020320:	fbb6 f4f5 	udiv	r4, r6, r5
 8020324:	fbb3 f3f5 	udiv	r3, r3, r5
 8020328:	fb05 6414 	mls	r4, r5, r4, r6
 802032c:	b2a4      	uxth	r4, r4
 802032e:	fb04 f303 	mul.w	r3, r4, r3
 8020332:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8020336:	50fa      	str	r2, [r7, r3]
 8020338:	2300      	movs	r3, #0
 802033a:	f8cd 8000 	str.w	r8, [sp]
 802033e:	f7f3 fc7f 	bl	8013c40 <ucdr_init_buffer_origin_offset>
 8020342:	2001      	movs	r0, #1
 8020344:	e7da      	b.n	80202fc <uxr_prepare_reliable_buffer_to_write+0x210>
 8020346:	3201      	adds	r2, #1
 8020348:	9306      	str	r3, [sp, #24]
 802034a:	b293      	uxth	r3, r2
 802034c:	4553      	cmp	r3, sl
 802034e:	d8d4      	bhi.n	80202fa <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020350:	e739      	b.n	80201c6 <uxr_prepare_reliable_buffer_to_write+0xda>
 8020352:	4630      	mov	r0, r6
 8020354:	2101      	movs	r1, #1
 8020356:	9307      	str	r3, [sp, #28]
 8020358:	f000 f918 	bl	802058c <uxr_seq_num_add>
 802035c:	4606      	mov	r6, r0
 802035e:	8920      	ldrh	r0, [r4, #8]
 8020360:	6862      	ldr	r2, [r4, #4]
 8020362:	fbb6 f1f0 	udiv	r1, r6, r0
 8020366:	fbb2 f2f0 	udiv	r2, r2, r0
 802036a:	fb00 6111 	mls	r1, r0, r1, r6
 802036e:	b289      	uxth	r1, r1
 8020370:	fb01 f202 	mul.w	r2, r1, r2
 8020374:	6821      	ldr	r1, [r4, #0]
 8020376:	3204      	adds	r2, #4
 8020378:	188b      	adds	r3, r1, r2
 802037a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 802037e:	9303      	str	r3, [sp, #12]
 8020380:	9b07      	ldr	r3, [sp, #28]
 8020382:	e70c      	b.n	802019e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8020384:	8921      	ldrh	r1, [r4, #8]
 8020386:	6863      	ldr	r3, [r4, #4]
 8020388:	9804      	ldr	r0, [sp, #16]
 802038a:	fbb5 f2f1 	udiv	r2, r5, r1
 802038e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020392:	fb01 5212 	mls	r2, r1, r2, r5
 8020396:	6821      	ldr	r1, [r4, #0]
 8020398:	b292      	uxth	r2, r2
 802039a:	fb02 f303 	mul.w	r3, r2, r3
 802039e:	7b22      	ldrb	r2, [r4, #12]
 80203a0:	3304      	adds	r3, #4
 80203a2:	445a      	add	r2, fp
 80203a4:	4419      	add	r1, r3
 80203a6:	f841 2c04 	str.w	r2, [r1, #-4]
 80203aa:	7b23      	ldrb	r3, [r4, #12]
 80203ac:	9300      	str	r3, [sp, #0]
 80203ae:	2300      	movs	r3, #0
 80203b0:	f7f3 fc46 	bl	8013c40 <ucdr_init_buffer_origin_offset>
 80203b4:	2001      	movs	r0, #1
 80203b6:	81e5      	strh	r5, [r4, #14]
 80203b8:	e7a0      	b.n	80202fc <uxr_prepare_reliable_buffer_to_write+0x210>
 80203ba:	4682      	mov	sl, r0
 80203bc:	e6cb      	b.n	8020156 <uxr_prepare_reliable_buffer_to_write+0x6a>
 80203be:	f10d 0b20 	add.w	fp, sp, #32
 80203c2:	e747      	b.n	8020254 <uxr_prepare_reliable_buffer_to_write+0x168>
 80203c4:	0801ffc1 	.word	0x0801ffc1

080203c8 <uxr_prepare_next_reliable_buffer_to_send>:
 80203c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80203ca:	4604      	mov	r4, r0
 80203cc:	461d      	mov	r5, r3
 80203ce:	460f      	mov	r7, r1
 80203d0:	8a00      	ldrh	r0, [r0, #16]
 80203d2:	2101      	movs	r1, #1
 80203d4:	4616      	mov	r6, r2
 80203d6:	f000 f8d9 	bl	802058c <uxr_seq_num_add>
 80203da:	8028      	strh	r0, [r5, #0]
 80203dc:	8922      	ldrh	r2, [r4, #8]
 80203de:	6863      	ldr	r3, [r4, #4]
 80203e0:	fbb0 f1f2 	udiv	r1, r0, r2
 80203e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80203e8:	fb02 0c11 	mls	ip, r2, r1, r0
 80203ec:	89e1      	ldrh	r1, [r4, #14]
 80203ee:	fa1f fc8c 	uxth.w	ip, ip
 80203f2:	fb0c fc03 	mul.w	ip, ip, r3
 80203f6:	6823      	ldr	r3, [r4, #0]
 80203f8:	f10c 0c04 	add.w	ip, ip, #4
 80203fc:	4463      	add	r3, ip
 80203fe:	603b      	str	r3, [r7, #0]
 8020400:	6823      	ldr	r3, [r4, #0]
 8020402:	449c      	add	ip, r3
 8020404:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8020408:	6033      	str	r3, [r6, #0]
 802040a:	f000 f8c7 	bl	802059c <uxr_seq_num_cmp>
 802040e:	2800      	cmp	r0, #0
 8020410:	dd01      	ble.n	8020416 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8020412:	2000      	movs	r0, #0
 8020414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020416:	7b23      	ldrb	r3, [r4, #12]
 8020418:	6832      	ldr	r2, [r6, #0]
 802041a:	429a      	cmp	r2, r3
 802041c:	d9f9      	bls.n	8020412 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 802041e:	8a61      	ldrh	r1, [r4, #18]
 8020420:	8a20      	ldrh	r0, [r4, #16]
 8020422:	f000 f8b7 	bl	8020594 <uxr_seq_num_sub>
 8020426:	8923      	ldrh	r3, [r4, #8]
 8020428:	4283      	cmp	r3, r0
 802042a:	d0f2      	beq.n	8020412 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 802042c:	8828      	ldrh	r0, [r5, #0]
 802042e:	89e3      	ldrh	r3, [r4, #14]
 8020430:	8220      	strh	r0, [r4, #16]
 8020432:	4298      	cmp	r0, r3
 8020434:	d001      	beq.n	802043a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8020436:	2001      	movs	r0, #1
 8020438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802043a:	2101      	movs	r1, #1
 802043c:	f000 f8a6 	bl	802058c <uxr_seq_num_add>
 8020440:	4603      	mov	r3, r0
 8020442:	2001      	movs	r0, #1
 8020444:	81e3      	strh	r3, [r4, #14]
 8020446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020448 <uxr_update_output_stream_heartbeat_timestamp>:
 8020448:	b570      	push	{r4, r5, r6, lr}
 802044a:	8a01      	ldrh	r1, [r0, #16]
 802044c:	4604      	mov	r4, r0
 802044e:	8a40      	ldrh	r0, [r0, #18]
 8020450:	4615      	mov	r5, r2
 8020452:	461e      	mov	r6, r3
 8020454:	f000 f8a2 	bl	802059c <uxr_seq_num_cmp>
 8020458:	2800      	cmp	r0, #0
 802045a:	db07      	blt.n	802046c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 802045c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020460:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8020464:	2000      	movs	r0, #0
 8020466:	e9c4 2306 	strd	r2, r3, [r4, #24]
 802046a:	bd70      	pop	{r4, r5, r6, pc}
 802046c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8020470:	b940      	cbnz	r0, 8020484 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8020472:	2301      	movs	r3, #1
 8020474:	f884 3020 	strb.w	r3, [r4, #32]
 8020478:	3564      	adds	r5, #100	@ 0x64
 802047a:	f146 0600 	adc.w	r6, r6, #0
 802047e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8020482:	bd70      	pop	{r4, r5, r6, pc}
 8020484:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8020488:	4295      	cmp	r5, r2
 802048a:	eb76 0303 	sbcs.w	r3, r6, r3
 802048e:	db04      	blt.n	802049a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8020490:	1c43      	adds	r3, r0, #1
 8020492:	2001      	movs	r0, #1
 8020494:	f884 3020 	strb.w	r3, [r4, #32]
 8020498:	e7ee      	b.n	8020478 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 802049a:	2000      	movs	r0, #0
 802049c:	e7ec      	b.n	8020478 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 802049e:	bf00      	nop

080204a0 <uxr_begin_output_nack_buffer_it>:
 80204a0:	8a40      	ldrh	r0, [r0, #18]
 80204a2:	4770      	bx	lr

080204a4 <uxr_next_reliable_nack_buffer_to_send>:
 80204a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204a8:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 80204ac:	b197      	cbz	r7, 80204d4 <uxr_next_reliable_nack_buffer_to_send+0x30>
 80204ae:	4680      	mov	r8, r0
 80204b0:	460d      	mov	r5, r1
 80204b2:	4616      	mov	r6, r2
 80204b4:	461c      	mov	r4, r3
 80204b6:	8818      	ldrh	r0, [r3, #0]
 80204b8:	2101      	movs	r1, #1
 80204ba:	f000 f867 	bl	802058c <uxr_seq_num_add>
 80204be:	8020      	strh	r0, [r4, #0]
 80204c0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 80204c4:	f000 f86a 	bl	802059c <uxr_seq_num_cmp>
 80204c8:	2800      	cmp	r0, #0
 80204ca:	dd06      	ble.n	80204da <uxr_next_reliable_nack_buffer_to_send+0x36>
 80204cc:	2300      	movs	r3, #0
 80204ce:	461f      	mov	r7, r3
 80204d0:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 80204d4:	4638      	mov	r0, r7
 80204d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80204da:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 80204de:	8820      	ldrh	r0, [r4, #0]
 80204e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80204e4:	fbb0 f3f2 	udiv	r3, r0, r2
 80204e8:	fbb1 fcf2 	udiv	ip, r1, r2
 80204ec:	fb02 0313 	mls	r3, r2, r3, r0
 80204f0:	b29b      	uxth	r3, r3
 80204f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80204f6:	f8d8 3000 	ldr.w	r3, [r8]
 80204fa:	f10c 0c04 	add.w	ip, ip, #4
 80204fe:	4463      	add	r3, ip
 8020500:	602b      	str	r3, [r5, #0]
 8020502:	f8d8 3000 	ldr.w	r3, [r8]
 8020506:	4463      	add	r3, ip
 8020508:	f853 3c04 	ldr.w	r3, [r3, #-4]
 802050c:	6033      	str	r3, [r6, #0]
 802050e:	f898 200c 	ldrb.w	r2, [r8, #12]
 8020512:	429a      	cmp	r2, r3
 8020514:	d0d0      	beq.n	80204b8 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8020516:	e7dd      	b.n	80204d4 <uxr_next_reliable_nack_buffer_to_send+0x30>

08020518 <uxr_process_acknack>:
 8020518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802051a:	4604      	mov	r4, r0
 802051c:	460e      	mov	r6, r1
 802051e:	4610      	mov	r0, r2
 8020520:	2101      	movs	r1, #1
 8020522:	f000 f837 	bl	8020594 <uxr_seq_num_sub>
 8020526:	8a61      	ldrh	r1, [r4, #18]
 8020528:	f000 f834 	bl	8020594 <uxr_seq_num_sub>
 802052c:	b1c8      	cbz	r0, 8020562 <uxr_process_acknack+0x4a>
 802052e:	4605      	mov	r5, r0
 8020530:	2700      	movs	r7, #0
 8020532:	2101      	movs	r1, #1
 8020534:	8a60      	ldrh	r0, [r4, #18]
 8020536:	f000 f829 	bl	802058c <uxr_seq_num_add>
 802053a:	8923      	ldrh	r3, [r4, #8]
 802053c:	6862      	ldr	r2, [r4, #4]
 802053e:	3701      	adds	r7, #1
 8020540:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8020544:	6821      	ldr	r1, [r4, #0]
 8020546:	42bd      	cmp	r5, r7
 8020548:	8260      	strh	r0, [r4, #18]
 802054a:	fbb0 fef3 	udiv	lr, r0, r3
 802054e:	fbb2 f2f3 	udiv	r2, r2, r3
 8020552:	fb03 031e 	mls	r3, r3, lr, r0
 8020556:	b29b      	uxth	r3, r3
 8020558:	fb02 f303 	mul.w	r3, r2, r3
 802055c:	f841 c003 	str.w	ip, [r1, r3]
 8020560:	d1e7      	bne.n	8020532 <uxr_process_acknack+0x1a>
 8020562:	3e00      	subs	r6, #0
 8020564:	f04f 0300 	mov.w	r3, #0
 8020568:	bf18      	it	ne
 802056a:	2601      	movne	r6, #1
 802056c:	f884 3020 	strb.w	r3, [r4, #32]
 8020570:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8020574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020576:	bf00      	nop

08020578 <uxr_is_output_up_to_date>:
 8020578:	8a01      	ldrh	r1, [r0, #16]
 802057a:	8a40      	ldrh	r0, [r0, #18]
 802057c:	b508      	push	{r3, lr}
 802057e:	f000 f80d 	bl	802059c <uxr_seq_num_cmp>
 8020582:	fab0 f080 	clz	r0, r0
 8020586:	0940      	lsrs	r0, r0, #5
 8020588:	bd08      	pop	{r3, pc}
 802058a:	bf00      	nop

0802058c <uxr_seq_num_add>:
 802058c:	4408      	add	r0, r1
 802058e:	b280      	uxth	r0, r0
 8020590:	4770      	bx	lr
 8020592:	bf00      	nop

08020594 <uxr_seq_num_sub>:
 8020594:	1a40      	subs	r0, r0, r1
 8020596:	b280      	uxth	r0, r0
 8020598:	4770      	bx	lr
 802059a:	bf00      	nop

0802059c <uxr_seq_num_cmp>:
 802059c:	4288      	cmp	r0, r1
 802059e:	d011      	beq.n	80205c4 <uxr_seq_num_cmp+0x28>
 80205a0:	d309      	bcc.n	80205b6 <uxr_seq_num_cmp+0x1a>
 80205a2:	4288      	cmp	r0, r1
 80205a4:	d910      	bls.n	80205c8 <uxr_seq_num_cmp+0x2c>
 80205a6:	1a40      	subs	r0, r0, r1
 80205a8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80205ac:	bfd4      	ite	le
 80205ae:	2001      	movle	r0, #1
 80205b0:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80205b4:	4770      	bx	lr
 80205b6:	1a0b      	subs	r3, r1, r0
 80205b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80205bc:	daf1      	bge.n	80205a2 <uxr_seq_num_cmp+0x6>
 80205be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80205c2:	4770      	bx	lr
 80205c4:	2000      	movs	r0, #0
 80205c6:	4770      	bx	lr
 80205c8:	2001      	movs	r0, #1
 80205ca:	4770      	bx	lr

080205cc <calloc>:
 80205cc:	4b02      	ldr	r3, [pc, #8]	@ (80205d8 <calloc+0xc>)
 80205ce:	460a      	mov	r2, r1
 80205d0:	4601      	mov	r1, r0
 80205d2:	6818      	ldr	r0, [r3, #0]
 80205d4:	f000 b802 	b.w	80205dc <_calloc_r>
 80205d8:	240013a0 	.word	0x240013a0

080205dc <_calloc_r>:
 80205dc:	b570      	push	{r4, r5, r6, lr}
 80205de:	fba1 5402 	umull	r5, r4, r1, r2
 80205e2:	b93c      	cbnz	r4, 80205f4 <_calloc_r+0x18>
 80205e4:	4629      	mov	r1, r5
 80205e6:	f000 f899 	bl	802071c <_malloc_r>
 80205ea:	4606      	mov	r6, r0
 80205ec:	b928      	cbnz	r0, 80205fa <_calloc_r+0x1e>
 80205ee:	2600      	movs	r6, #0
 80205f0:	4630      	mov	r0, r6
 80205f2:	bd70      	pop	{r4, r5, r6, pc}
 80205f4:	220c      	movs	r2, #12
 80205f6:	6002      	str	r2, [r0, #0]
 80205f8:	e7f9      	b.n	80205ee <_calloc_r+0x12>
 80205fa:	462a      	mov	r2, r5
 80205fc:	4621      	mov	r1, r4
 80205fe:	f000 fcdd 	bl	8020fbc <memset>
 8020602:	e7f5      	b.n	80205f0 <_calloc_r+0x14>

08020604 <exit>:
 8020604:	b508      	push	{r3, lr}
 8020606:	4b06      	ldr	r3, [pc, #24]	@ (8020620 <exit+0x1c>)
 8020608:	4604      	mov	r4, r0
 802060a:	b113      	cbz	r3, 8020612 <exit+0xe>
 802060c:	2100      	movs	r1, #0
 802060e:	f3af 8000 	nop.w
 8020612:	4b04      	ldr	r3, [pc, #16]	@ (8020624 <exit+0x20>)
 8020614:	681b      	ldr	r3, [r3, #0]
 8020616:	b103      	cbz	r3, 802061a <exit+0x16>
 8020618:	4798      	blx	r3
 802061a:	4620      	mov	r0, r4
 802061c:	f7e1 fd12 	bl	8002044 <_exit>
 8020620:	00000000 	.word	0x00000000
 8020624:	2406976c 	.word	0x2406976c

08020628 <getenv>:
 8020628:	b507      	push	{r0, r1, r2, lr}
 802062a:	4b04      	ldr	r3, [pc, #16]	@ (802063c <getenv+0x14>)
 802062c:	4601      	mov	r1, r0
 802062e:	aa01      	add	r2, sp, #4
 8020630:	6818      	ldr	r0, [r3, #0]
 8020632:	f000 f805 	bl	8020640 <_findenv_r>
 8020636:	b003      	add	sp, #12
 8020638:	f85d fb04 	ldr.w	pc, [sp], #4
 802063c:	240013a0 	.word	0x240013a0

08020640 <_findenv_r>:
 8020640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020644:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80206b4 <_findenv_r+0x74>
 8020648:	4606      	mov	r6, r0
 802064a:	4689      	mov	r9, r1
 802064c:	4617      	mov	r7, r2
 802064e:	f000 fe01 	bl	8021254 <__env_lock>
 8020652:	f8da 4000 	ldr.w	r4, [sl]
 8020656:	b134      	cbz	r4, 8020666 <_findenv_r+0x26>
 8020658:	464b      	mov	r3, r9
 802065a:	4698      	mov	r8, r3
 802065c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020660:	b13a      	cbz	r2, 8020672 <_findenv_r+0x32>
 8020662:	2a3d      	cmp	r2, #61	@ 0x3d
 8020664:	d1f9      	bne.n	802065a <_findenv_r+0x1a>
 8020666:	4630      	mov	r0, r6
 8020668:	f000 fdfa 	bl	8021260 <__env_unlock>
 802066c:	2000      	movs	r0, #0
 802066e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020672:	eba8 0809 	sub.w	r8, r8, r9
 8020676:	46a3      	mov	fp, r4
 8020678:	f854 0b04 	ldr.w	r0, [r4], #4
 802067c:	2800      	cmp	r0, #0
 802067e:	d0f2      	beq.n	8020666 <_findenv_r+0x26>
 8020680:	4642      	mov	r2, r8
 8020682:	4649      	mov	r1, r9
 8020684:	f000 fcaf 	bl	8020fe6 <strncmp>
 8020688:	2800      	cmp	r0, #0
 802068a:	d1f4      	bne.n	8020676 <_findenv_r+0x36>
 802068c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8020690:	eb03 0508 	add.w	r5, r3, r8
 8020694:	f813 3008 	ldrb.w	r3, [r3, r8]
 8020698:	2b3d      	cmp	r3, #61	@ 0x3d
 802069a:	d1ec      	bne.n	8020676 <_findenv_r+0x36>
 802069c:	f8da 3000 	ldr.w	r3, [sl]
 80206a0:	ebab 0303 	sub.w	r3, fp, r3
 80206a4:	109b      	asrs	r3, r3, #2
 80206a6:	4630      	mov	r0, r6
 80206a8:	603b      	str	r3, [r7, #0]
 80206aa:	f000 fdd9 	bl	8021260 <__env_unlock>
 80206ae:	1c68      	adds	r0, r5, #1
 80206b0:	e7dd      	b.n	802066e <_findenv_r+0x2e>
 80206b2:	bf00      	nop
 80206b4:	24000000 	.word	0x24000000

080206b8 <malloc>:
 80206b8:	4b02      	ldr	r3, [pc, #8]	@ (80206c4 <malloc+0xc>)
 80206ba:	4601      	mov	r1, r0
 80206bc:	6818      	ldr	r0, [r3, #0]
 80206be:	f000 b82d 	b.w	802071c <_malloc_r>
 80206c2:	bf00      	nop
 80206c4:	240013a0 	.word	0x240013a0

080206c8 <free>:
 80206c8:	4b02      	ldr	r3, [pc, #8]	@ (80206d4 <free+0xc>)
 80206ca:	4601      	mov	r1, r0
 80206cc:	6818      	ldr	r0, [r3, #0]
 80206ce:	f000 bdcd 	b.w	802126c <_free_r>
 80206d2:	bf00      	nop
 80206d4:	240013a0 	.word	0x240013a0

080206d8 <sbrk_aligned>:
 80206d8:	b570      	push	{r4, r5, r6, lr}
 80206da:	4e0f      	ldr	r6, [pc, #60]	@ (8020718 <sbrk_aligned+0x40>)
 80206dc:	460c      	mov	r4, r1
 80206de:	6831      	ldr	r1, [r6, #0]
 80206e0:	4605      	mov	r5, r0
 80206e2:	b911      	cbnz	r1, 80206ea <sbrk_aligned+0x12>
 80206e4:	f000 fd32 	bl	802114c <_sbrk_r>
 80206e8:	6030      	str	r0, [r6, #0]
 80206ea:	4621      	mov	r1, r4
 80206ec:	4628      	mov	r0, r5
 80206ee:	f000 fd2d 	bl	802114c <_sbrk_r>
 80206f2:	1c43      	adds	r3, r0, #1
 80206f4:	d103      	bne.n	80206fe <sbrk_aligned+0x26>
 80206f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80206fa:	4620      	mov	r0, r4
 80206fc:	bd70      	pop	{r4, r5, r6, pc}
 80206fe:	1cc4      	adds	r4, r0, #3
 8020700:	f024 0403 	bic.w	r4, r4, #3
 8020704:	42a0      	cmp	r0, r4
 8020706:	d0f8      	beq.n	80206fa <sbrk_aligned+0x22>
 8020708:	1a21      	subs	r1, r4, r0
 802070a:	4628      	mov	r0, r5
 802070c:	f000 fd1e 	bl	802114c <_sbrk_r>
 8020710:	3001      	adds	r0, #1
 8020712:	d1f2      	bne.n	80206fa <sbrk_aligned+0x22>
 8020714:	e7ef      	b.n	80206f6 <sbrk_aligned+0x1e>
 8020716:	bf00      	nop
 8020718:	2406962c 	.word	0x2406962c

0802071c <_malloc_r>:
 802071c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020720:	1ccd      	adds	r5, r1, #3
 8020722:	f025 0503 	bic.w	r5, r5, #3
 8020726:	3508      	adds	r5, #8
 8020728:	2d0c      	cmp	r5, #12
 802072a:	bf38      	it	cc
 802072c:	250c      	movcc	r5, #12
 802072e:	2d00      	cmp	r5, #0
 8020730:	4606      	mov	r6, r0
 8020732:	db01      	blt.n	8020738 <_malloc_r+0x1c>
 8020734:	42a9      	cmp	r1, r5
 8020736:	d904      	bls.n	8020742 <_malloc_r+0x26>
 8020738:	230c      	movs	r3, #12
 802073a:	6033      	str	r3, [r6, #0]
 802073c:	2000      	movs	r0, #0
 802073e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020742:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8020818 <_malloc_r+0xfc>
 8020746:	f000 f869 	bl	802081c <__malloc_lock>
 802074a:	f8d8 3000 	ldr.w	r3, [r8]
 802074e:	461c      	mov	r4, r3
 8020750:	bb44      	cbnz	r4, 80207a4 <_malloc_r+0x88>
 8020752:	4629      	mov	r1, r5
 8020754:	4630      	mov	r0, r6
 8020756:	f7ff ffbf 	bl	80206d8 <sbrk_aligned>
 802075a:	1c43      	adds	r3, r0, #1
 802075c:	4604      	mov	r4, r0
 802075e:	d158      	bne.n	8020812 <_malloc_r+0xf6>
 8020760:	f8d8 4000 	ldr.w	r4, [r8]
 8020764:	4627      	mov	r7, r4
 8020766:	2f00      	cmp	r7, #0
 8020768:	d143      	bne.n	80207f2 <_malloc_r+0xd6>
 802076a:	2c00      	cmp	r4, #0
 802076c:	d04b      	beq.n	8020806 <_malloc_r+0xea>
 802076e:	6823      	ldr	r3, [r4, #0]
 8020770:	4639      	mov	r1, r7
 8020772:	4630      	mov	r0, r6
 8020774:	eb04 0903 	add.w	r9, r4, r3
 8020778:	f000 fce8 	bl	802114c <_sbrk_r>
 802077c:	4581      	cmp	r9, r0
 802077e:	d142      	bne.n	8020806 <_malloc_r+0xea>
 8020780:	6821      	ldr	r1, [r4, #0]
 8020782:	1a6d      	subs	r5, r5, r1
 8020784:	4629      	mov	r1, r5
 8020786:	4630      	mov	r0, r6
 8020788:	f7ff ffa6 	bl	80206d8 <sbrk_aligned>
 802078c:	3001      	adds	r0, #1
 802078e:	d03a      	beq.n	8020806 <_malloc_r+0xea>
 8020790:	6823      	ldr	r3, [r4, #0]
 8020792:	442b      	add	r3, r5
 8020794:	6023      	str	r3, [r4, #0]
 8020796:	f8d8 3000 	ldr.w	r3, [r8]
 802079a:	685a      	ldr	r2, [r3, #4]
 802079c:	bb62      	cbnz	r2, 80207f8 <_malloc_r+0xdc>
 802079e:	f8c8 7000 	str.w	r7, [r8]
 80207a2:	e00f      	b.n	80207c4 <_malloc_r+0xa8>
 80207a4:	6822      	ldr	r2, [r4, #0]
 80207a6:	1b52      	subs	r2, r2, r5
 80207a8:	d420      	bmi.n	80207ec <_malloc_r+0xd0>
 80207aa:	2a0b      	cmp	r2, #11
 80207ac:	d917      	bls.n	80207de <_malloc_r+0xc2>
 80207ae:	1961      	adds	r1, r4, r5
 80207b0:	42a3      	cmp	r3, r4
 80207b2:	6025      	str	r5, [r4, #0]
 80207b4:	bf18      	it	ne
 80207b6:	6059      	strne	r1, [r3, #4]
 80207b8:	6863      	ldr	r3, [r4, #4]
 80207ba:	bf08      	it	eq
 80207bc:	f8c8 1000 	streq.w	r1, [r8]
 80207c0:	5162      	str	r2, [r4, r5]
 80207c2:	604b      	str	r3, [r1, #4]
 80207c4:	4630      	mov	r0, r6
 80207c6:	f000 f82f 	bl	8020828 <__malloc_unlock>
 80207ca:	f104 000b 	add.w	r0, r4, #11
 80207ce:	1d23      	adds	r3, r4, #4
 80207d0:	f020 0007 	bic.w	r0, r0, #7
 80207d4:	1ac2      	subs	r2, r0, r3
 80207d6:	bf1c      	itt	ne
 80207d8:	1a1b      	subne	r3, r3, r0
 80207da:	50a3      	strne	r3, [r4, r2]
 80207dc:	e7af      	b.n	802073e <_malloc_r+0x22>
 80207de:	6862      	ldr	r2, [r4, #4]
 80207e0:	42a3      	cmp	r3, r4
 80207e2:	bf0c      	ite	eq
 80207e4:	f8c8 2000 	streq.w	r2, [r8]
 80207e8:	605a      	strne	r2, [r3, #4]
 80207ea:	e7eb      	b.n	80207c4 <_malloc_r+0xa8>
 80207ec:	4623      	mov	r3, r4
 80207ee:	6864      	ldr	r4, [r4, #4]
 80207f0:	e7ae      	b.n	8020750 <_malloc_r+0x34>
 80207f2:	463c      	mov	r4, r7
 80207f4:	687f      	ldr	r7, [r7, #4]
 80207f6:	e7b6      	b.n	8020766 <_malloc_r+0x4a>
 80207f8:	461a      	mov	r2, r3
 80207fa:	685b      	ldr	r3, [r3, #4]
 80207fc:	42a3      	cmp	r3, r4
 80207fe:	d1fb      	bne.n	80207f8 <_malloc_r+0xdc>
 8020800:	2300      	movs	r3, #0
 8020802:	6053      	str	r3, [r2, #4]
 8020804:	e7de      	b.n	80207c4 <_malloc_r+0xa8>
 8020806:	230c      	movs	r3, #12
 8020808:	6033      	str	r3, [r6, #0]
 802080a:	4630      	mov	r0, r6
 802080c:	f000 f80c 	bl	8020828 <__malloc_unlock>
 8020810:	e794      	b.n	802073c <_malloc_r+0x20>
 8020812:	6005      	str	r5, [r0, #0]
 8020814:	e7d6      	b.n	80207c4 <_malloc_r+0xa8>
 8020816:	bf00      	nop
 8020818:	24069630 	.word	0x24069630

0802081c <__malloc_lock>:
 802081c:	4801      	ldr	r0, [pc, #4]	@ (8020824 <__malloc_lock+0x8>)
 802081e:	f000 bce2 	b.w	80211e6 <__retarget_lock_acquire_recursive>
 8020822:	bf00      	nop
 8020824:	24069775 	.word	0x24069775

08020828 <__malloc_unlock>:
 8020828:	4801      	ldr	r0, [pc, #4]	@ (8020830 <__malloc_unlock+0x8>)
 802082a:	f000 bcdd 	b.w	80211e8 <__retarget_lock_release_recursive>
 802082e:	bf00      	nop
 8020830:	24069775 	.word	0x24069775

08020834 <srand>:
 8020834:	b538      	push	{r3, r4, r5, lr}
 8020836:	4b10      	ldr	r3, [pc, #64]	@ (8020878 <srand+0x44>)
 8020838:	681d      	ldr	r5, [r3, #0]
 802083a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802083c:	4604      	mov	r4, r0
 802083e:	b9b3      	cbnz	r3, 802086e <srand+0x3a>
 8020840:	2018      	movs	r0, #24
 8020842:	f7ff ff39 	bl	80206b8 <malloc>
 8020846:	4602      	mov	r2, r0
 8020848:	6328      	str	r0, [r5, #48]	@ 0x30
 802084a:	b920      	cbnz	r0, 8020856 <srand+0x22>
 802084c:	4b0b      	ldr	r3, [pc, #44]	@ (802087c <srand+0x48>)
 802084e:	480c      	ldr	r0, [pc, #48]	@ (8020880 <srand+0x4c>)
 8020850:	2146      	movs	r1, #70	@ 0x46
 8020852:	f000 fce1 	bl	8021218 <__assert_func>
 8020856:	490b      	ldr	r1, [pc, #44]	@ (8020884 <srand+0x50>)
 8020858:	4b0b      	ldr	r3, [pc, #44]	@ (8020888 <srand+0x54>)
 802085a:	e9c0 1300 	strd	r1, r3, [r0]
 802085e:	4b0b      	ldr	r3, [pc, #44]	@ (802088c <srand+0x58>)
 8020860:	6083      	str	r3, [r0, #8]
 8020862:	230b      	movs	r3, #11
 8020864:	8183      	strh	r3, [r0, #12]
 8020866:	2100      	movs	r1, #0
 8020868:	2001      	movs	r0, #1
 802086a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802086e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8020870:	2200      	movs	r2, #0
 8020872:	611c      	str	r4, [r3, #16]
 8020874:	615a      	str	r2, [r3, #20]
 8020876:	bd38      	pop	{r3, r4, r5, pc}
 8020878:	240013a0 	.word	0x240013a0
 802087c:	080245f6 	.word	0x080245f6
 8020880:	0802460d 	.word	0x0802460d
 8020884:	abcd330e 	.word	0xabcd330e
 8020888:	e66d1234 	.word	0xe66d1234
 802088c:	0005deec 	.word	0x0005deec

08020890 <rand>:
 8020890:	4b16      	ldr	r3, [pc, #88]	@ (80208ec <rand+0x5c>)
 8020892:	b510      	push	{r4, lr}
 8020894:	681c      	ldr	r4, [r3, #0]
 8020896:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020898:	b9b3      	cbnz	r3, 80208c8 <rand+0x38>
 802089a:	2018      	movs	r0, #24
 802089c:	f7ff ff0c 	bl	80206b8 <malloc>
 80208a0:	4602      	mov	r2, r0
 80208a2:	6320      	str	r0, [r4, #48]	@ 0x30
 80208a4:	b920      	cbnz	r0, 80208b0 <rand+0x20>
 80208a6:	4b12      	ldr	r3, [pc, #72]	@ (80208f0 <rand+0x60>)
 80208a8:	4812      	ldr	r0, [pc, #72]	@ (80208f4 <rand+0x64>)
 80208aa:	2152      	movs	r1, #82	@ 0x52
 80208ac:	f000 fcb4 	bl	8021218 <__assert_func>
 80208b0:	4911      	ldr	r1, [pc, #68]	@ (80208f8 <rand+0x68>)
 80208b2:	4b12      	ldr	r3, [pc, #72]	@ (80208fc <rand+0x6c>)
 80208b4:	e9c0 1300 	strd	r1, r3, [r0]
 80208b8:	4b11      	ldr	r3, [pc, #68]	@ (8020900 <rand+0x70>)
 80208ba:	6083      	str	r3, [r0, #8]
 80208bc:	230b      	movs	r3, #11
 80208be:	8183      	strh	r3, [r0, #12]
 80208c0:	2100      	movs	r1, #0
 80208c2:	2001      	movs	r0, #1
 80208c4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80208c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80208ca:	480e      	ldr	r0, [pc, #56]	@ (8020904 <rand+0x74>)
 80208cc:	690b      	ldr	r3, [r1, #16]
 80208ce:	694c      	ldr	r4, [r1, #20]
 80208d0:	4a0d      	ldr	r2, [pc, #52]	@ (8020908 <rand+0x78>)
 80208d2:	4358      	muls	r0, r3
 80208d4:	fb02 0004 	mla	r0, r2, r4, r0
 80208d8:	fba3 3202 	umull	r3, r2, r3, r2
 80208dc:	3301      	adds	r3, #1
 80208de:	eb40 0002 	adc.w	r0, r0, r2
 80208e2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80208e6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80208ea:	bd10      	pop	{r4, pc}
 80208ec:	240013a0 	.word	0x240013a0
 80208f0:	080245f6 	.word	0x080245f6
 80208f4:	0802460d 	.word	0x0802460d
 80208f8:	abcd330e 	.word	0xabcd330e
 80208fc:	e66d1234 	.word	0xe66d1234
 8020900:	0005deec 	.word	0x0005deec
 8020904:	5851f42d 	.word	0x5851f42d
 8020908:	4c957f2d 	.word	0x4c957f2d

0802090c <realloc>:
 802090c:	4b02      	ldr	r3, [pc, #8]	@ (8020918 <realloc+0xc>)
 802090e:	460a      	mov	r2, r1
 8020910:	4601      	mov	r1, r0
 8020912:	6818      	ldr	r0, [r3, #0]
 8020914:	f000 b802 	b.w	802091c <_realloc_r>
 8020918:	240013a0 	.word	0x240013a0

0802091c <_realloc_r>:
 802091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020920:	4680      	mov	r8, r0
 8020922:	4615      	mov	r5, r2
 8020924:	460c      	mov	r4, r1
 8020926:	b921      	cbnz	r1, 8020932 <_realloc_r+0x16>
 8020928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802092c:	4611      	mov	r1, r2
 802092e:	f7ff bef5 	b.w	802071c <_malloc_r>
 8020932:	b92a      	cbnz	r2, 8020940 <_realloc_r+0x24>
 8020934:	f000 fc9a 	bl	802126c <_free_r>
 8020938:	2400      	movs	r4, #0
 802093a:	4620      	mov	r0, r4
 802093c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020940:	f000 fcde 	bl	8021300 <_malloc_usable_size_r>
 8020944:	4285      	cmp	r5, r0
 8020946:	4606      	mov	r6, r0
 8020948:	d802      	bhi.n	8020950 <_realloc_r+0x34>
 802094a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802094e:	d8f4      	bhi.n	802093a <_realloc_r+0x1e>
 8020950:	4629      	mov	r1, r5
 8020952:	4640      	mov	r0, r8
 8020954:	f7ff fee2 	bl	802071c <_malloc_r>
 8020958:	4607      	mov	r7, r0
 802095a:	2800      	cmp	r0, #0
 802095c:	d0ec      	beq.n	8020938 <_realloc_r+0x1c>
 802095e:	42b5      	cmp	r5, r6
 8020960:	462a      	mov	r2, r5
 8020962:	4621      	mov	r1, r4
 8020964:	bf28      	it	cs
 8020966:	4632      	movcs	r2, r6
 8020968:	f000 fc47 	bl	80211fa <memcpy>
 802096c:	4621      	mov	r1, r4
 802096e:	4640      	mov	r0, r8
 8020970:	f000 fc7c 	bl	802126c <_free_r>
 8020974:	463c      	mov	r4, r7
 8020976:	e7e0      	b.n	802093a <_realloc_r+0x1e>

08020978 <_strtoul_l.constprop.0>:
 8020978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802097c:	4e34      	ldr	r6, [pc, #208]	@ (8020a50 <_strtoul_l.constprop.0+0xd8>)
 802097e:	4686      	mov	lr, r0
 8020980:	460d      	mov	r5, r1
 8020982:	4628      	mov	r0, r5
 8020984:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020988:	5d37      	ldrb	r7, [r6, r4]
 802098a:	f017 0708 	ands.w	r7, r7, #8
 802098e:	d1f8      	bne.n	8020982 <_strtoul_l.constprop.0+0xa>
 8020990:	2c2d      	cmp	r4, #45	@ 0x2d
 8020992:	d12f      	bne.n	80209f4 <_strtoul_l.constprop.0+0x7c>
 8020994:	782c      	ldrb	r4, [r5, #0]
 8020996:	2701      	movs	r7, #1
 8020998:	1c85      	adds	r5, r0, #2
 802099a:	f033 0010 	bics.w	r0, r3, #16
 802099e:	d109      	bne.n	80209b4 <_strtoul_l.constprop.0+0x3c>
 80209a0:	2c30      	cmp	r4, #48	@ 0x30
 80209a2:	d12c      	bne.n	80209fe <_strtoul_l.constprop.0+0x86>
 80209a4:	7828      	ldrb	r0, [r5, #0]
 80209a6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80209aa:	2858      	cmp	r0, #88	@ 0x58
 80209ac:	d127      	bne.n	80209fe <_strtoul_l.constprop.0+0x86>
 80209ae:	786c      	ldrb	r4, [r5, #1]
 80209b0:	2310      	movs	r3, #16
 80209b2:	3502      	adds	r5, #2
 80209b4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80209b8:	2600      	movs	r6, #0
 80209ba:	fbb8 f8f3 	udiv	r8, r8, r3
 80209be:	fb03 f908 	mul.w	r9, r3, r8
 80209c2:	ea6f 0909 	mvn.w	r9, r9
 80209c6:	4630      	mov	r0, r6
 80209c8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80209cc:	f1bc 0f09 	cmp.w	ip, #9
 80209d0:	d81c      	bhi.n	8020a0c <_strtoul_l.constprop.0+0x94>
 80209d2:	4664      	mov	r4, ip
 80209d4:	42a3      	cmp	r3, r4
 80209d6:	dd2a      	ble.n	8020a2e <_strtoul_l.constprop.0+0xb6>
 80209d8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80209dc:	d007      	beq.n	80209ee <_strtoul_l.constprop.0+0x76>
 80209de:	4580      	cmp	r8, r0
 80209e0:	d322      	bcc.n	8020a28 <_strtoul_l.constprop.0+0xb0>
 80209e2:	d101      	bne.n	80209e8 <_strtoul_l.constprop.0+0x70>
 80209e4:	45a1      	cmp	r9, r4
 80209e6:	db1f      	blt.n	8020a28 <_strtoul_l.constprop.0+0xb0>
 80209e8:	fb00 4003 	mla	r0, r0, r3, r4
 80209ec:	2601      	movs	r6, #1
 80209ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80209f2:	e7e9      	b.n	80209c8 <_strtoul_l.constprop.0+0x50>
 80209f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80209f6:	bf04      	itt	eq
 80209f8:	782c      	ldrbeq	r4, [r5, #0]
 80209fa:	1c85      	addeq	r5, r0, #2
 80209fc:	e7cd      	b.n	802099a <_strtoul_l.constprop.0+0x22>
 80209fe:	2b00      	cmp	r3, #0
 8020a00:	d1d8      	bne.n	80209b4 <_strtoul_l.constprop.0+0x3c>
 8020a02:	2c30      	cmp	r4, #48	@ 0x30
 8020a04:	bf0c      	ite	eq
 8020a06:	2308      	moveq	r3, #8
 8020a08:	230a      	movne	r3, #10
 8020a0a:	e7d3      	b.n	80209b4 <_strtoul_l.constprop.0+0x3c>
 8020a0c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8020a10:	f1bc 0f19 	cmp.w	ip, #25
 8020a14:	d801      	bhi.n	8020a1a <_strtoul_l.constprop.0+0xa2>
 8020a16:	3c37      	subs	r4, #55	@ 0x37
 8020a18:	e7dc      	b.n	80209d4 <_strtoul_l.constprop.0+0x5c>
 8020a1a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8020a1e:	f1bc 0f19 	cmp.w	ip, #25
 8020a22:	d804      	bhi.n	8020a2e <_strtoul_l.constprop.0+0xb6>
 8020a24:	3c57      	subs	r4, #87	@ 0x57
 8020a26:	e7d5      	b.n	80209d4 <_strtoul_l.constprop.0+0x5c>
 8020a28:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8020a2c:	e7df      	b.n	80209ee <_strtoul_l.constprop.0+0x76>
 8020a2e:	1c73      	adds	r3, r6, #1
 8020a30:	d106      	bne.n	8020a40 <_strtoul_l.constprop.0+0xc8>
 8020a32:	2322      	movs	r3, #34	@ 0x22
 8020a34:	f8ce 3000 	str.w	r3, [lr]
 8020a38:	4630      	mov	r0, r6
 8020a3a:	b932      	cbnz	r2, 8020a4a <_strtoul_l.constprop.0+0xd2>
 8020a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020a40:	b107      	cbz	r7, 8020a44 <_strtoul_l.constprop.0+0xcc>
 8020a42:	4240      	negs	r0, r0
 8020a44:	2a00      	cmp	r2, #0
 8020a46:	d0f9      	beq.n	8020a3c <_strtoul_l.constprop.0+0xc4>
 8020a48:	b106      	cbz	r6, 8020a4c <_strtoul_l.constprop.0+0xd4>
 8020a4a:	1e69      	subs	r1, r5, #1
 8020a4c:	6011      	str	r1, [r2, #0]
 8020a4e:	e7f5      	b.n	8020a3c <_strtoul_l.constprop.0+0xc4>
 8020a50:	08024666 	.word	0x08024666

08020a54 <strtoul>:
 8020a54:	4613      	mov	r3, r2
 8020a56:	460a      	mov	r2, r1
 8020a58:	4601      	mov	r1, r0
 8020a5a:	4802      	ldr	r0, [pc, #8]	@ (8020a64 <strtoul+0x10>)
 8020a5c:	6800      	ldr	r0, [r0, #0]
 8020a5e:	f7ff bf8b 	b.w	8020978 <_strtoul_l.constprop.0>
 8020a62:	bf00      	nop
 8020a64:	240013a0 	.word	0x240013a0

08020a68 <std>:
 8020a68:	2300      	movs	r3, #0
 8020a6a:	b510      	push	{r4, lr}
 8020a6c:	4604      	mov	r4, r0
 8020a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8020a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020a76:	6083      	str	r3, [r0, #8]
 8020a78:	8181      	strh	r1, [r0, #12]
 8020a7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8020a7c:	81c2      	strh	r2, [r0, #14]
 8020a7e:	6183      	str	r3, [r0, #24]
 8020a80:	4619      	mov	r1, r3
 8020a82:	2208      	movs	r2, #8
 8020a84:	305c      	adds	r0, #92	@ 0x5c
 8020a86:	f000 fa99 	bl	8020fbc <memset>
 8020a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8020ac0 <std+0x58>)
 8020a8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8020a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8020ac4 <std+0x5c>)
 8020a90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020a92:	4b0d      	ldr	r3, [pc, #52]	@ (8020ac8 <std+0x60>)
 8020a94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020a96:	4b0d      	ldr	r3, [pc, #52]	@ (8020acc <std+0x64>)
 8020a98:	6323      	str	r3, [r4, #48]	@ 0x30
 8020a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8020ad0 <std+0x68>)
 8020a9c:	6224      	str	r4, [r4, #32]
 8020a9e:	429c      	cmp	r4, r3
 8020aa0:	d006      	beq.n	8020ab0 <std+0x48>
 8020aa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8020aa6:	4294      	cmp	r4, r2
 8020aa8:	d002      	beq.n	8020ab0 <std+0x48>
 8020aaa:	33d0      	adds	r3, #208	@ 0xd0
 8020aac:	429c      	cmp	r4, r3
 8020aae:	d105      	bne.n	8020abc <std+0x54>
 8020ab0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8020ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ab8:	f000 bb94 	b.w	80211e4 <__retarget_lock_init_recursive>
 8020abc:	bd10      	pop	{r4, pc}
 8020abe:	bf00      	nop
 8020ac0:	08020d49 	.word	0x08020d49
 8020ac4:	08020d6b 	.word	0x08020d6b
 8020ac8:	08020da3 	.word	0x08020da3
 8020acc:	08020dc7 	.word	0x08020dc7
 8020ad0:	24069634 	.word	0x24069634

08020ad4 <stdio_exit_handler>:
 8020ad4:	4a02      	ldr	r2, [pc, #8]	@ (8020ae0 <stdio_exit_handler+0xc>)
 8020ad6:	4903      	ldr	r1, [pc, #12]	@ (8020ae4 <stdio_exit_handler+0x10>)
 8020ad8:	4803      	ldr	r0, [pc, #12]	@ (8020ae8 <stdio_exit_handler+0x14>)
 8020ada:	f000 b869 	b.w	8020bb0 <_fwalk_sglue>
 8020ade:	bf00      	nop
 8020ae0:	24001394 	.word	0x24001394
 8020ae4:	080219e5 	.word	0x080219e5
 8020ae8:	240013a4 	.word	0x240013a4

08020aec <cleanup_stdio>:
 8020aec:	6841      	ldr	r1, [r0, #4]
 8020aee:	4b0c      	ldr	r3, [pc, #48]	@ (8020b20 <cleanup_stdio+0x34>)
 8020af0:	4299      	cmp	r1, r3
 8020af2:	b510      	push	{r4, lr}
 8020af4:	4604      	mov	r4, r0
 8020af6:	d001      	beq.n	8020afc <cleanup_stdio+0x10>
 8020af8:	f000 ff74 	bl	80219e4 <_fflush_r>
 8020afc:	68a1      	ldr	r1, [r4, #8]
 8020afe:	4b09      	ldr	r3, [pc, #36]	@ (8020b24 <cleanup_stdio+0x38>)
 8020b00:	4299      	cmp	r1, r3
 8020b02:	d002      	beq.n	8020b0a <cleanup_stdio+0x1e>
 8020b04:	4620      	mov	r0, r4
 8020b06:	f000 ff6d 	bl	80219e4 <_fflush_r>
 8020b0a:	68e1      	ldr	r1, [r4, #12]
 8020b0c:	4b06      	ldr	r3, [pc, #24]	@ (8020b28 <cleanup_stdio+0x3c>)
 8020b0e:	4299      	cmp	r1, r3
 8020b10:	d004      	beq.n	8020b1c <cleanup_stdio+0x30>
 8020b12:	4620      	mov	r0, r4
 8020b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020b18:	f000 bf64 	b.w	80219e4 <_fflush_r>
 8020b1c:	bd10      	pop	{r4, pc}
 8020b1e:	bf00      	nop
 8020b20:	24069634 	.word	0x24069634
 8020b24:	2406969c 	.word	0x2406969c
 8020b28:	24069704 	.word	0x24069704

08020b2c <global_stdio_init.part.0>:
 8020b2c:	b510      	push	{r4, lr}
 8020b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8020b5c <global_stdio_init.part.0+0x30>)
 8020b30:	4c0b      	ldr	r4, [pc, #44]	@ (8020b60 <global_stdio_init.part.0+0x34>)
 8020b32:	4a0c      	ldr	r2, [pc, #48]	@ (8020b64 <global_stdio_init.part.0+0x38>)
 8020b34:	601a      	str	r2, [r3, #0]
 8020b36:	4620      	mov	r0, r4
 8020b38:	2200      	movs	r2, #0
 8020b3a:	2104      	movs	r1, #4
 8020b3c:	f7ff ff94 	bl	8020a68 <std>
 8020b40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8020b44:	2201      	movs	r2, #1
 8020b46:	2109      	movs	r1, #9
 8020b48:	f7ff ff8e 	bl	8020a68 <std>
 8020b4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020b50:	2202      	movs	r2, #2
 8020b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020b56:	2112      	movs	r1, #18
 8020b58:	f7ff bf86 	b.w	8020a68 <std>
 8020b5c:	2406976c 	.word	0x2406976c
 8020b60:	24069634 	.word	0x24069634
 8020b64:	08020ad5 	.word	0x08020ad5

08020b68 <__sfp_lock_acquire>:
 8020b68:	4801      	ldr	r0, [pc, #4]	@ (8020b70 <__sfp_lock_acquire+0x8>)
 8020b6a:	f000 bb3c 	b.w	80211e6 <__retarget_lock_acquire_recursive>
 8020b6e:	bf00      	nop
 8020b70:	24069776 	.word	0x24069776

08020b74 <__sfp_lock_release>:
 8020b74:	4801      	ldr	r0, [pc, #4]	@ (8020b7c <__sfp_lock_release+0x8>)
 8020b76:	f000 bb37 	b.w	80211e8 <__retarget_lock_release_recursive>
 8020b7a:	bf00      	nop
 8020b7c:	24069776 	.word	0x24069776

08020b80 <__sinit>:
 8020b80:	b510      	push	{r4, lr}
 8020b82:	4604      	mov	r4, r0
 8020b84:	f7ff fff0 	bl	8020b68 <__sfp_lock_acquire>
 8020b88:	6a23      	ldr	r3, [r4, #32]
 8020b8a:	b11b      	cbz	r3, 8020b94 <__sinit+0x14>
 8020b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020b90:	f7ff bff0 	b.w	8020b74 <__sfp_lock_release>
 8020b94:	4b04      	ldr	r3, [pc, #16]	@ (8020ba8 <__sinit+0x28>)
 8020b96:	6223      	str	r3, [r4, #32]
 8020b98:	4b04      	ldr	r3, [pc, #16]	@ (8020bac <__sinit+0x2c>)
 8020b9a:	681b      	ldr	r3, [r3, #0]
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	d1f5      	bne.n	8020b8c <__sinit+0xc>
 8020ba0:	f7ff ffc4 	bl	8020b2c <global_stdio_init.part.0>
 8020ba4:	e7f2      	b.n	8020b8c <__sinit+0xc>
 8020ba6:	bf00      	nop
 8020ba8:	08020aed 	.word	0x08020aed
 8020bac:	2406976c 	.word	0x2406976c

08020bb0 <_fwalk_sglue>:
 8020bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020bb4:	4607      	mov	r7, r0
 8020bb6:	4688      	mov	r8, r1
 8020bb8:	4614      	mov	r4, r2
 8020bba:	2600      	movs	r6, #0
 8020bbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020bc0:	f1b9 0901 	subs.w	r9, r9, #1
 8020bc4:	d505      	bpl.n	8020bd2 <_fwalk_sglue+0x22>
 8020bc6:	6824      	ldr	r4, [r4, #0]
 8020bc8:	2c00      	cmp	r4, #0
 8020bca:	d1f7      	bne.n	8020bbc <_fwalk_sglue+0xc>
 8020bcc:	4630      	mov	r0, r6
 8020bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020bd2:	89ab      	ldrh	r3, [r5, #12]
 8020bd4:	2b01      	cmp	r3, #1
 8020bd6:	d907      	bls.n	8020be8 <_fwalk_sglue+0x38>
 8020bd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020bdc:	3301      	adds	r3, #1
 8020bde:	d003      	beq.n	8020be8 <_fwalk_sglue+0x38>
 8020be0:	4629      	mov	r1, r5
 8020be2:	4638      	mov	r0, r7
 8020be4:	47c0      	blx	r8
 8020be6:	4306      	orrs	r6, r0
 8020be8:	3568      	adds	r5, #104	@ 0x68
 8020bea:	e7e9      	b.n	8020bc0 <_fwalk_sglue+0x10>

08020bec <_fwrite_r>:
 8020bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020bf0:	9c08      	ldr	r4, [sp, #32]
 8020bf2:	468a      	mov	sl, r1
 8020bf4:	4690      	mov	r8, r2
 8020bf6:	fb02 f903 	mul.w	r9, r2, r3
 8020bfa:	4606      	mov	r6, r0
 8020bfc:	b118      	cbz	r0, 8020c06 <_fwrite_r+0x1a>
 8020bfe:	6a03      	ldr	r3, [r0, #32]
 8020c00:	b90b      	cbnz	r3, 8020c06 <_fwrite_r+0x1a>
 8020c02:	f7ff ffbd 	bl	8020b80 <__sinit>
 8020c06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020c08:	07dd      	lsls	r5, r3, #31
 8020c0a:	d405      	bmi.n	8020c18 <_fwrite_r+0x2c>
 8020c0c:	89a3      	ldrh	r3, [r4, #12]
 8020c0e:	0598      	lsls	r0, r3, #22
 8020c10:	d402      	bmi.n	8020c18 <_fwrite_r+0x2c>
 8020c12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020c14:	f000 fae7 	bl	80211e6 <__retarget_lock_acquire_recursive>
 8020c18:	89a3      	ldrh	r3, [r4, #12]
 8020c1a:	0719      	lsls	r1, r3, #28
 8020c1c:	d516      	bpl.n	8020c4c <_fwrite_r+0x60>
 8020c1e:	6923      	ldr	r3, [r4, #16]
 8020c20:	b1a3      	cbz	r3, 8020c4c <_fwrite_r+0x60>
 8020c22:	2500      	movs	r5, #0
 8020c24:	454d      	cmp	r5, r9
 8020c26:	d01f      	beq.n	8020c68 <_fwrite_r+0x7c>
 8020c28:	68a7      	ldr	r7, [r4, #8]
 8020c2a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8020c2e:	3f01      	subs	r7, #1
 8020c30:	2f00      	cmp	r7, #0
 8020c32:	60a7      	str	r7, [r4, #8]
 8020c34:	da04      	bge.n	8020c40 <_fwrite_r+0x54>
 8020c36:	69a3      	ldr	r3, [r4, #24]
 8020c38:	429f      	cmp	r7, r3
 8020c3a:	db0f      	blt.n	8020c5c <_fwrite_r+0x70>
 8020c3c:	290a      	cmp	r1, #10
 8020c3e:	d00d      	beq.n	8020c5c <_fwrite_r+0x70>
 8020c40:	6823      	ldr	r3, [r4, #0]
 8020c42:	1c5a      	adds	r2, r3, #1
 8020c44:	6022      	str	r2, [r4, #0]
 8020c46:	7019      	strb	r1, [r3, #0]
 8020c48:	3501      	adds	r5, #1
 8020c4a:	e7eb      	b.n	8020c24 <_fwrite_r+0x38>
 8020c4c:	4621      	mov	r1, r4
 8020c4e:	4630      	mov	r0, r6
 8020c50:	f000 f934 	bl	8020ebc <__swsetup_r>
 8020c54:	2800      	cmp	r0, #0
 8020c56:	d0e4      	beq.n	8020c22 <_fwrite_r+0x36>
 8020c58:	2500      	movs	r5, #0
 8020c5a:	e005      	b.n	8020c68 <_fwrite_r+0x7c>
 8020c5c:	4622      	mov	r2, r4
 8020c5e:	4630      	mov	r0, r6
 8020c60:	f000 f8ee 	bl	8020e40 <__swbuf_r>
 8020c64:	3001      	adds	r0, #1
 8020c66:	d1ef      	bne.n	8020c48 <_fwrite_r+0x5c>
 8020c68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020c6a:	07da      	lsls	r2, r3, #31
 8020c6c:	d405      	bmi.n	8020c7a <_fwrite_r+0x8e>
 8020c6e:	89a3      	ldrh	r3, [r4, #12]
 8020c70:	059b      	lsls	r3, r3, #22
 8020c72:	d402      	bmi.n	8020c7a <_fwrite_r+0x8e>
 8020c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020c76:	f000 fab7 	bl	80211e8 <__retarget_lock_release_recursive>
 8020c7a:	fbb5 f0f8 	udiv	r0, r5, r8
 8020c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08020c84 <fwrite>:
 8020c84:	b507      	push	{r0, r1, r2, lr}
 8020c86:	9300      	str	r3, [sp, #0]
 8020c88:	4613      	mov	r3, r2
 8020c8a:	460a      	mov	r2, r1
 8020c8c:	4601      	mov	r1, r0
 8020c8e:	4803      	ldr	r0, [pc, #12]	@ (8020c9c <fwrite+0x18>)
 8020c90:	6800      	ldr	r0, [r0, #0]
 8020c92:	f7ff ffab 	bl	8020bec <_fwrite_r>
 8020c96:	b003      	add	sp, #12
 8020c98:	f85d fb04 	ldr.w	pc, [sp], #4
 8020c9c:	240013a0 	.word	0x240013a0

08020ca0 <sniprintf>:
 8020ca0:	b40c      	push	{r2, r3}
 8020ca2:	b530      	push	{r4, r5, lr}
 8020ca4:	4b17      	ldr	r3, [pc, #92]	@ (8020d04 <sniprintf+0x64>)
 8020ca6:	1e0c      	subs	r4, r1, #0
 8020ca8:	681d      	ldr	r5, [r3, #0]
 8020caa:	b09d      	sub	sp, #116	@ 0x74
 8020cac:	da08      	bge.n	8020cc0 <sniprintf+0x20>
 8020cae:	238b      	movs	r3, #139	@ 0x8b
 8020cb0:	602b      	str	r3, [r5, #0]
 8020cb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020cb6:	b01d      	add	sp, #116	@ 0x74
 8020cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020cbc:	b002      	add	sp, #8
 8020cbe:	4770      	bx	lr
 8020cc0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8020cc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020cc8:	bf14      	ite	ne
 8020cca:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8020cce:	4623      	moveq	r3, r4
 8020cd0:	9304      	str	r3, [sp, #16]
 8020cd2:	9307      	str	r3, [sp, #28]
 8020cd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020cd8:	9002      	str	r0, [sp, #8]
 8020cda:	9006      	str	r0, [sp, #24]
 8020cdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020ce0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8020ce2:	ab21      	add	r3, sp, #132	@ 0x84
 8020ce4:	a902      	add	r1, sp, #8
 8020ce6:	4628      	mov	r0, r5
 8020ce8:	9301      	str	r3, [sp, #4]
 8020cea:	f000 fb6d 	bl	80213c8 <_svfiprintf_r>
 8020cee:	1c43      	adds	r3, r0, #1
 8020cf0:	bfbc      	itt	lt
 8020cf2:	238b      	movlt	r3, #139	@ 0x8b
 8020cf4:	602b      	strlt	r3, [r5, #0]
 8020cf6:	2c00      	cmp	r4, #0
 8020cf8:	d0dd      	beq.n	8020cb6 <sniprintf+0x16>
 8020cfa:	9b02      	ldr	r3, [sp, #8]
 8020cfc:	2200      	movs	r2, #0
 8020cfe:	701a      	strb	r2, [r3, #0]
 8020d00:	e7d9      	b.n	8020cb6 <sniprintf+0x16>
 8020d02:	bf00      	nop
 8020d04:	240013a0 	.word	0x240013a0

08020d08 <siprintf>:
 8020d08:	b40e      	push	{r1, r2, r3}
 8020d0a:	b500      	push	{lr}
 8020d0c:	b09c      	sub	sp, #112	@ 0x70
 8020d0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8020d10:	9002      	str	r0, [sp, #8]
 8020d12:	9006      	str	r0, [sp, #24]
 8020d14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8020d18:	4809      	ldr	r0, [pc, #36]	@ (8020d40 <siprintf+0x38>)
 8020d1a:	9107      	str	r1, [sp, #28]
 8020d1c:	9104      	str	r1, [sp, #16]
 8020d1e:	4909      	ldr	r1, [pc, #36]	@ (8020d44 <siprintf+0x3c>)
 8020d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8020d24:	9105      	str	r1, [sp, #20]
 8020d26:	6800      	ldr	r0, [r0, #0]
 8020d28:	9301      	str	r3, [sp, #4]
 8020d2a:	a902      	add	r1, sp, #8
 8020d2c:	f000 fb4c 	bl	80213c8 <_svfiprintf_r>
 8020d30:	9b02      	ldr	r3, [sp, #8]
 8020d32:	2200      	movs	r2, #0
 8020d34:	701a      	strb	r2, [r3, #0]
 8020d36:	b01c      	add	sp, #112	@ 0x70
 8020d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8020d3c:	b003      	add	sp, #12
 8020d3e:	4770      	bx	lr
 8020d40:	240013a0 	.word	0x240013a0
 8020d44:	ffff0208 	.word	0xffff0208

08020d48 <__sread>:
 8020d48:	b510      	push	{r4, lr}
 8020d4a:	460c      	mov	r4, r1
 8020d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d50:	f000 f9ea 	bl	8021128 <_read_r>
 8020d54:	2800      	cmp	r0, #0
 8020d56:	bfab      	itete	ge
 8020d58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8020d5c:	181b      	addge	r3, r3, r0
 8020d5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8020d62:	bfac      	ite	ge
 8020d64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020d66:	81a3      	strhlt	r3, [r4, #12]
 8020d68:	bd10      	pop	{r4, pc}

08020d6a <__swrite>:
 8020d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d6e:	461f      	mov	r7, r3
 8020d70:	898b      	ldrh	r3, [r1, #12]
 8020d72:	05db      	lsls	r3, r3, #23
 8020d74:	4605      	mov	r5, r0
 8020d76:	460c      	mov	r4, r1
 8020d78:	4616      	mov	r6, r2
 8020d7a:	d505      	bpl.n	8020d88 <__swrite+0x1e>
 8020d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d80:	2302      	movs	r3, #2
 8020d82:	2200      	movs	r2, #0
 8020d84:	f000 f9be 	bl	8021104 <_lseek_r>
 8020d88:	89a3      	ldrh	r3, [r4, #12]
 8020d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020d92:	81a3      	strh	r3, [r4, #12]
 8020d94:	4632      	mov	r2, r6
 8020d96:	463b      	mov	r3, r7
 8020d98:	4628      	mov	r0, r5
 8020d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020d9e:	f000 b9e5 	b.w	802116c <_write_r>

08020da2 <__sseek>:
 8020da2:	b510      	push	{r4, lr}
 8020da4:	460c      	mov	r4, r1
 8020da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020daa:	f000 f9ab 	bl	8021104 <_lseek_r>
 8020dae:	1c43      	adds	r3, r0, #1
 8020db0:	89a3      	ldrh	r3, [r4, #12]
 8020db2:	bf15      	itete	ne
 8020db4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8020db6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020dba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8020dbe:	81a3      	strheq	r3, [r4, #12]
 8020dc0:	bf18      	it	ne
 8020dc2:	81a3      	strhne	r3, [r4, #12]
 8020dc4:	bd10      	pop	{r4, pc}

08020dc6 <__sclose>:
 8020dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020dca:	f000 b935 	b.w	8021038 <_close_r>

08020dce <_vsniprintf_r>:
 8020dce:	b530      	push	{r4, r5, lr}
 8020dd0:	4614      	mov	r4, r2
 8020dd2:	2c00      	cmp	r4, #0
 8020dd4:	b09b      	sub	sp, #108	@ 0x6c
 8020dd6:	4605      	mov	r5, r0
 8020dd8:	461a      	mov	r2, r3
 8020dda:	da05      	bge.n	8020de8 <_vsniprintf_r+0x1a>
 8020ddc:	238b      	movs	r3, #139	@ 0x8b
 8020dde:	6003      	str	r3, [r0, #0]
 8020de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020de4:	b01b      	add	sp, #108	@ 0x6c
 8020de6:	bd30      	pop	{r4, r5, pc}
 8020de8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8020dec:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020df0:	bf14      	ite	ne
 8020df2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8020df6:	4623      	moveq	r3, r4
 8020df8:	9302      	str	r3, [sp, #8]
 8020dfa:	9305      	str	r3, [sp, #20]
 8020dfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020e00:	9100      	str	r1, [sp, #0]
 8020e02:	9104      	str	r1, [sp, #16]
 8020e04:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020e08:	4669      	mov	r1, sp
 8020e0a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020e0c:	f000 fadc 	bl	80213c8 <_svfiprintf_r>
 8020e10:	1c43      	adds	r3, r0, #1
 8020e12:	bfbc      	itt	lt
 8020e14:	238b      	movlt	r3, #139	@ 0x8b
 8020e16:	602b      	strlt	r3, [r5, #0]
 8020e18:	2c00      	cmp	r4, #0
 8020e1a:	d0e3      	beq.n	8020de4 <_vsniprintf_r+0x16>
 8020e1c:	9b00      	ldr	r3, [sp, #0]
 8020e1e:	2200      	movs	r2, #0
 8020e20:	701a      	strb	r2, [r3, #0]
 8020e22:	e7df      	b.n	8020de4 <_vsniprintf_r+0x16>

08020e24 <vsniprintf>:
 8020e24:	b507      	push	{r0, r1, r2, lr}
 8020e26:	9300      	str	r3, [sp, #0]
 8020e28:	4613      	mov	r3, r2
 8020e2a:	460a      	mov	r2, r1
 8020e2c:	4601      	mov	r1, r0
 8020e2e:	4803      	ldr	r0, [pc, #12]	@ (8020e3c <vsniprintf+0x18>)
 8020e30:	6800      	ldr	r0, [r0, #0]
 8020e32:	f7ff ffcc 	bl	8020dce <_vsniprintf_r>
 8020e36:	b003      	add	sp, #12
 8020e38:	f85d fb04 	ldr.w	pc, [sp], #4
 8020e3c:	240013a0 	.word	0x240013a0

08020e40 <__swbuf_r>:
 8020e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e42:	460e      	mov	r6, r1
 8020e44:	4614      	mov	r4, r2
 8020e46:	4605      	mov	r5, r0
 8020e48:	b118      	cbz	r0, 8020e52 <__swbuf_r+0x12>
 8020e4a:	6a03      	ldr	r3, [r0, #32]
 8020e4c:	b90b      	cbnz	r3, 8020e52 <__swbuf_r+0x12>
 8020e4e:	f7ff fe97 	bl	8020b80 <__sinit>
 8020e52:	69a3      	ldr	r3, [r4, #24]
 8020e54:	60a3      	str	r3, [r4, #8]
 8020e56:	89a3      	ldrh	r3, [r4, #12]
 8020e58:	071a      	lsls	r2, r3, #28
 8020e5a:	d501      	bpl.n	8020e60 <__swbuf_r+0x20>
 8020e5c:	6923      	ldr	r3, [r4, #16]
 8020e5e:	b943      	cbnz	r3, 8020e72 <__swbuf_r+0x32>
 8020e60:	4621      	mov	r1, r4
 8020e62:	4628      	mov	r0, r5
 8020e64:	f000 f82a 	bl	8020ebc <__swsetup_r>
 8020e68:	b118      	cbz	r0, 8020e72 <__swbuf_r+0x32>
 8020e6a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8020e6e:	4638      	mov	r0, r7
 8020e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020e72:	6823      	ldr	r3, [r4, #0]
 8020e74:	6922      	ldr	r2, [r4, #16]
 8020e76:	1a98      	subs	r0, r3, r2
 8020e78:	6963      	ldr	r3, [r4, #20]
 8020e7a:	b2f6      	uxtb	r6, r6
 8020e7c:	4283      	cmp	r3, r0
 8020e7e:	4637      	mov	r7, r6
 8020e80:	dc05      	bgt.n	8020e8e <__swbuf_r+0x4e>
 8020e82:	4621      	mov	r1, r4
 8020e84:	4628      	mov	r0, r5
 8020e86:	f000 fdad 	bl	80219e4 <_fflush_r>
 8020e8a:	2800      	cmp	r0, #0
 8020e8c:	d1ed      	bne.n	8020e6a <__swbuf_r+0x2a>
 8020e8e:	68a3      	ldr	r3, [r4, #8]
 8020e90:	3b01      	subs	r3, #1
 8020e92:	60a3      	str	r3, [r4, #8]
 8020e94:	6823      	ldr	r3, [r4, #0]
 8020e96:	1c5a      	adds	r2, r3, #1
 8020e98:	6022      	str	r2, [r4, #0]
 8020e9a:	701e      	strb	r6, [r3, #0]
 8020e9c:	6962      	ldr	r2, [r4, #20]
 8020e9e:	1c43      	adds	r3, r0, #1
 8020ea0:	429a      	cmp	r2, r3
 8020ea2:	d004      	beq.n	8020eae <__swbuf_r+0x6e>
 8020ea4:	89a3      	ldrh	r3, [r4, #12]
 8020ea6:	07db      	lsls	r3, r3, #31
 8020ea8:	d5e1      	bpl.n	8020e6e <__swbuf_r+0x2e>
 8020eaa:	2e0a      	cmp	r6, #10
 8020eac:	d1df      	bne.n	8020e6e <__swbuf_r+0x2e>
 8020eae:	4621      	mov	r1, r4
 8020eb0:	4628      	mov	r0, r5
 8020eb2:	f000 fd97 	bl	80219e4 <_fflush_r>
 8020eb6:	2800      	cmp	r0, #0
 8020eb8:	d0d9      	beq.n	8020e6e <__swbuf_r+0x2e>
 8020eba:	e7d6      	b.n	8020e6a <__swbuf_r+0x2a>

08020ebc <__swsetup_r>:
 8020ebc:	b538      	push	{r3, r4, r5, lr}
 8020ebe:	4b29      	ldr	r3, [pc, #164]	@ (8020f64 <__swsetup_r+0xa8>)
 8020ec0:	4605      	mov	r5, r0
 8020ec2:	6818      	ldr	r0, [r3, #0]
 8020ec4:	460c      	mov	r4, r1
 8020ec6:	b118      	cbz	r0, 8020ed0 <__swsetup_r+0x14>
 8020ec8:	6a03      	ldr	r3, [r0, #32]
 8020eca:	b90b      	cbnz	r3, 8020ed0 <__swsetup_r+0x14>
 8020ecc:	f7ff fe58 	bl	8020b80 <__sinit>
 8020ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020ed4:	0719      	lsls	r1, r3, #28
 8020ed6:	d422      	bmi.n	8020f1e <__swsetup_r+0x62>
 8020ed8:	06da      	lsls	r2, r3, #27
 8020eda:	d407      	bmi.n	8020eec <__swsetup_r+0x30>
 8020edc:	2209      	movs	r2, #9
 8020ede:	602a      	str	r2, [r5, #0]
 8020ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020ee4:	81a3      	strh	r3, [r4, #12]
 8020ee6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020eea:	e033      	b.n	8020f54 <__swsetup_r+0x98>
 8020eec:	0758      	lsls	r0, r3, #29
 8020eee:	d512      	bpl.n	8020f16 <__swsetup_r+0x5a>
 8020ef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020ef2:	b141      	cbz	r1, 8020f06 <__swsetup_r+0x4a>
 8020ef4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020ef8:	4299      	cmp	r1, r3
 8020efa:	d002      	beq.n	8020f02 <__swsetup_r+0x46>
 8020efc:	4628      	mov	r0, r5
 8020efe:	f000 f9b5 	bl	802126c <_free_r>
 8020f02:	2300      	movs	r3, #0
 8020f04:	6363      	str	r3, [r4, #52]	@ 0x34
 8020f06:	89a3      	ldrh	r3, [r4, #12]
 8020f08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020f0c:	81a3      	strh	r3, [r4, #12]
 8020f0e:	2300      	movs	r3, #0
 8020f10:	6063      	str	r3, [r4, #4]
 8020f12:	6923      	ldr	r3, [r4, #16]
 8020f14:	6023      	str	r3, [r4, #0]
 8020f16:	89a3      	ldrh	r3, [r4, #12]
 8020f18:	f043 0308 	orr.w	r3, r3, #8
 8020f1c:	81a3      	strh	r3, [r4, #12]
 8020f1e:	6923      	ldr	r3, [r4, #16]
 8020f20:	b94b      	cbnz	r3, 8020f36 <__swsetup_r+0x7a>
 8020f22:	89a3      	ldrh	r3, [r4, #12]
 8020f24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020f2c:	d003      	beq.n	8020f36 <__swsetup_r+0x7a>
 8020f2e:	4621      	mov	r1, r4
 8020f30:	4628      	mov	r0, r5
 8020f32:	f000 fdb7 	bl	8021aa4 <__smakebuf_r>
 8020f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020f3a:	f013 0201 	ands.w	r2, r3, #1
 8020f3e:	d00a      	beq.n	8020f56 <__swsetup_r+0x9a>
 8020f40:	2200      	movs	r2, #0
 8020f42:	60a2      	str	r2, [r4, #8]
 8020f44:	6962      	ldr	r2, [r4, #20]
 8020f46:	4252      	negs	r2, r2
 8020f48:	61a2      	str	r2, [r4, #24]
 8020f4a:	6922      	ldr	r2, [r4, #16]
 8020f4c:	b942      	cbnz	r2, 8020f60 <__swsetup_r+0xa4>
 8020f4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8020f52:	d1c5      	bne.n	8020ee0 <__swsetup_r+0x24>
 8020f54:	bd38      	pop	{r3, r4, r5, pc}
 8020f56:	0799      	lsls	r1, r3, #30
 8020f58:	bf58      	it	pl
 8020f5a:	6962      	ldrpl	r2, [r4, #20]
 8020f5c:	60a2      	str	r2, [r4, #8]
 8020f5e:	e7f4      	b.n	8020f4a <__swsetup_r+0x8e>
 8020f60:	2000      	movs	r0, #0
 8020f62:	e7f7      	b.n	8020f54 <__swsetup_r+0x98>
 8020f64:	240013a0 	.word	0x240013a0

08020f68 <memcmp>:
 8020f68:	b510      	push	{r4, lr}
 8020f6a:	3901      	subs	r1, #1
 8020f6c:	4402      	add	r2, r0
 8020f6e:	4290      	cmp	r0, r2
 8020f70:	d101      	bne.n	8020f76 <memcmp+0xe>
 8020f72:	2000      	movs	r0, #0
 8020f74:	e005      	b.n	8020f82 <memcmp+0x1a>
 8020f76:	7803      	ldrb	r3, [r0, #0]
 8020f78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020f7c:	42a3      	cmp	r3, r4
 8020f7e:	d001      	beq.n	8020f84 <memcmp+0x1c>
 8020f80:	1b18      	subs	r0, r3, r4
 8020f82:	bd10      	pop	{r4, pc}
 8020f84:	3001      	adds	r0, #1
 8020f86:	e7f2      	b.n	8020f6e <memcmp+0x6>

08020f88 <memmove>:
 8020f88:	4288      	cmp	r0, r1
 8020f8a:	b510      	push	{r4, lr}
 8020f8c:	eb01 0402 	add.w	r4, r1, r2
 8020f90:	d902      	bls.n	8020f98 <memmove+0x10>
 8020f92:	4284      	cmp	r4, r0
 8020f94:	4623      	mov	r3, r4
 8020f96:	d807      	bhi.n	8020fa8 <memmove+0x20>
 8020f98:	1e43      	subs	r3, r0, #1
 8020f9a:	42a1      	cmp	r1, r4
 8020f9c:	d008      	beq.n	8020fb0 <memmove+0x28>
 8020f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020fa6:	e7f8      	b.n	8020f9a <memmove+0x12>
 8020fa8:	4402      	add	r2, r0
 8020faa:	4601      	mov	r1, r0
 8020fac:	428a      	cmp	r2, r1
 8020fae:	d100      	bne.n	8020fb2 <memmove+0x2a>
 8020fb0:	bd10      	pop	{r4, pc}
 8020fb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020fb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020fba:	e7f7      	b.n	8020fac <memmove+0x24>

08020fbc <memset>:
 8020fbc:	4402      	add	r2, r0
 8020fbe:	4603      	mov	r3, r0
 8020fc0:	4293      	cmp	r3, r2
 8020fc2:	d100      	bne.n	8020fc6 <memset+0xa>
 8020fc4:	4770      	bx	lr
 8020fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8020fca:	e7f9      	b.n	8020fc0 <memset+0x4>

08020fcc <strchr>:
 8020fcc:	b2c9      	uxtb	r1, r1
 8020fce:	4603      	mov	r3, r0
 8020fd0:	4618      	mov	r0, r3
 8020fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020fd6:	b112      	cbz	r2, 8020fde <strchr+0x12>
 8020fd8:	428a      	cmp	r2, r1
 8020fda:	d1f9      	bne.n	8020fd0 <strchr+0x4>
 8020fdc:	4770      	bx	lr
 8020fde:	2900      	cmp	r1, #0
 8020fe0:	bf18      	it	ne
 8020fe2:	2000      	movne	r0, #0
 8020fe4:	4770      	bx	lr

08020fe6 <strncmp>:
 8020fe6:	b510      	push	{r4, lr}
 8020fe8:	b16a      	cbz	r2, 8021006 <strncmp+0x20>
 8020fea:	3901      	subs	r1, #1
 8020fec:	1884      	adds	r4, r0, r2
 8020fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020ff2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020ff6:	429a      	cmp	r2, r3
 8020ff8:	d103      	bne.n	8021002 <strncmp+0x1c>
 8020ffa:	42a0      	cmp	r0, r4
 8020ffc:	d001      	beq.n	8021002 <strncmp+0x1c>
 8020ffe:	2a00      	cmp	r2, #0
 8021000:	d1f5      	bne.n	8020fee <strncmp+0x8>
 8021002:	1ad0      	subs	r0, r2, r3
 8021004:	bd10      	pop	{r4, pc}
 8021006:	4610      	mov	r0, r2
 8021008:	e7fc      	b.n	8021004 <strncmp+0x1e>

0802100a <strstr>:
 802100a:	780a      	ldrb	r2, [r1, #0]
 802100c:	b570      	push	{r4, r5, r6, lr}
 802100e:	b96a      	cbnz	r2, 802102c <strstr+0x22>
 8021010:	bd70      	pop	{r4, r5, r6, pc}
 8021012:	429a      	cmp	r2, r3
 8021014:	d109      	bne.n	802102a <strstr+0x20>
 8021016:	460c      	mov	r4, r1
 8021018:	4605      	mov	r5, r0
 802101a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802101e:	2b00      	cmp	r3, #0
 8021020:	d0f6      	beq.n	8021010 <strstr+0x6>
 8021022:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8021026:	429e      	cmp	r6, r3
 8021028:	d0f7      	beq.n	802101a <strstr+0x10>
 802102a:	3001      	adds	r0, #1
 802102c:	7803      	ldrb	r3, [r0, #0]
 802102e:	2b00      	cmp	r3, #0
 8021030:	d1ef      	bne.n	8021012 <strstr+0x8>
 8021032:	4618      	mov	r0, r3
 8021034:	e7ec      	b.n	8021010 <strstr+0x6>
	...

08021038 <_close_r>:
 8021038:	b538      	push	{r3, r4, r5, lr}
 802103a:	4d06      	ldr	r5, [pc, #24]	@ (8021054 <_close_r+0x1c>)
 802103c:	2300      	movs	r3, #0
 802103e:	4604      	mov	r4, r0
 8021040:	4608      	mov	r0, r1
 8021042:	602b      	str	r3, [r5, #0]
 8021044:	f7e1 f842 	bl	80020cc <_close>
 8021048:	1c43      	adds	r3, r0, #1
 802104a:	d102      	bne.n	8021052 <_close_r+0x1a>
 802104c:	682b      	ldr	r3, [r5, #0]
 802104e:	b103      	cbz	r3, 8021052 <_close_r+0x1a>
 8021050:	6023      	str	r3, [r4, #0]
 8021052:	bd38      	pop	{r3, r4, r5, pc}
 8021054:	24069770 	.word	0x24069770

08021058 <_reclaim_reent>:
 8021058:	4b29      	ldr	r3, [pc, #164]	@ (8021100 <_reclaim_reent+0xa8>)
 802105a:	681b      	ldr	r3, [r3, #0]
 802105c:	4283      	cmp	r3, r0
 802105e:	b570      	push	{r4, r5, r6, lr}
 8021060:	4604      	mov	r4, r0
 8021062:	d04b      	beq.n	80210fc <_reclaim_reent+0xa4>
 8021064:	69c3      	ldr	r3, [r0, #28]
 8021066:	b1ab      	cbz	r3, 8021094 <_reclaim_reent+0x3c>
 8021068:	68db      	ldr	r3, [r3, #12]
 802106a:	b16b      	cbz	r3, 8021088 <_reclaim_reent+0x30>
 802106c:	2500      	movs	r5, #0
 802106e:	69e3      	ldr	r3, [r4, #28]
 8021070:	68db      	ldr	r3, [r3, #12]
 8021072:	5959      	ldr	r1, [r3, r5]
 8021074:	2900      	cmp	r1, #0
 8021076:	d13b      	bne.n	80210f0 <_reclaim_reent+0x98>
 8021078:	3504      	adds	r5, #4
 802107a:	2d80      	cmp	r5, #128	@ 0x80
 802107c:	d1f7      	bne.n	802106e <_reclaim_reent+0x16>
 802107e:	69e3      	ldr	r3, [r4, #28]
 8021080:	4620      	mov	r0, r4
 8021082:	68d9      	ldr	r1, [r3, #12]
 8021084:	f000 f8f2 	bl	802126c <_free_r>
 8021088:	69e3      	ldr	r3, [r4, #28]
 802108a:	6819      	ldr	r1, [r3, #0]
 802108c:	b111      	cbz	r1, 8021094 <_reclaim_reent+0x3c>
 802108e:	4620      	mov	r0, r4
 8021090:	f000 f8ec 	bl	802126c <_free_r>
 8021094:	6961      	ldr	r1, [r4, #20]
 8021096:	b111      	cbz	r1, 802109e <_reclaim_reent+0x46>
 8021098:	4620      	mov	r0, r4
 802109a:	f000 f8e7 	bl	802126c <_free_r>
 802109e:	69e1      	ldr	r1, [r4, #28]
 80210a0:	b111      	cbz	r1, 80210a8 <_reclaim_reent+0x50>
 80210a2:	4620      	mov	r0, r4
 80210a4:	f000 f8e2 	bl	802126c <_free_r>
 80210a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80210aa:	b111      	cbz	r1, 80210b2 <_reclaim_reent+0x5a>
 80210ac:	4620      	mov	r0, r4
 80210ae:	f000 f8dd 	bl	802126c <_free_r>
 80210b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80210b4:	b111      	cbz	r1, 80210bc <_reclaim_reent+0x64>
 80210b6:	4620      	mov	r0, r4
 80210b8:	f000 f8d8 	bl	802126c <_free_r>
 80210bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80210be:	b111      	cbz	r1, 80210c6 <_reclaim_reent+0x6e>
 80210c0:	4620      	mov	r0, r4
 80210c2:	f000 f8d3 	bl	802126c <_free_r>
 80210c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80210c8:	b111      	cbz	r1, 80210d0 <_reclaim_reent+0x78>
 80210ca:	4620      	mov	r0, r4
 80210cc:	f000 f8ce 	bl	802126c <_free_r>
 80210d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80210d2:	b111      	cbz	r1, 80210da <_reclaim_reent+0x82>
 80210d4:	4620      	mov	r0, r4
 80210d6:	f000 f8c9 	bl	802126c <_free_r>
 80210da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80210dc:	b111      	cbz	r1, 80210e4 <_reclaim_reent+0x8c>
 80210de:	4620      	mov	r0, r4
 80210e0:	f000 f8c4 	bl	802126c <_free_r>
 80210e4:	6a23      	ldr	r3, [r4, #32]
 80210e6:	b14b      	cbz	r3, 80210fc <_reclaim_reent+0xa4>
 80210e8:	4620      	mov	r0, r4
 80210ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80210ee:	4718      	bx	r3
 80210f0:	680e      	ldr	r6, [r1, #0]
 80210f2:	4620      	mov	r0, r4
 80210f4:	f000 f8ba 	bl	802126c <_free_r>
 80210f8:	4631      	mov	r1, r6
 80210fa:	e7bb      	b.n	8021074 <_reclaim_reent+0x1c>
 80210fc:	bd70      	pop	{r4, r5, r6, pc}
 80210fe:	bf00      	nop
 8021100:	240013a0 	.word	0x240013a0

08021104 <_lseek_r>:
 8021104:	b538      	push	{r3, r4, r5, lr}
 8021106:	4d07      	ldr	r5, [pc, #28]	@ (8021124 <_lseek_r+0x20>)
 8021108:	4604      	mov	r4, r0
 802110a:	4608      	mov	r0, r1
 802110c:	4611      	mov	r1, r2
 802110e:	2200      	movs	r2, #0
 8021110:	602a      	str	r2, [r5, #0]
 8021112:	461a      	mov	r2, r3
 8021114:	f7e1 f801 	bl	800211a <_lseek>
 8021118:	1c43      	adds	r3, r0, #1
 802111a:	d102      	bne.n	8021122 <_lseek_r+0x1e>
 802111c:	682b      	ldr	r3, [r5, #0]
 802111e:	b103      	cbz	r3, 8021122 <_lseek_r+0x1e>
 8021120:	6023      	str	r3, [r4, #0]
 8021122:	bd38      	pop	{r3, r4, r5, pc}
 8021124:	24069770 	.word	0x24069770

08021128 <_read_r>:
 8021128:	b538      	push	{r3, r4, r5, lr}
 802112a:	4d07      	ldr	r5, [pc, #28]	@ (8021148 <_read_r+0x20>)
 802112c:	4604      	mov	r4, r0
 802112e:	4608      	mov	r0, r1
 8021130:	4611      	mov	r1, r2
 8021132:	2200      	movs	r2, #0
 8021134:	602a      	str	r2, [r5, #0]
 8021136:	461a      	mov	r2, r3
 8021138:	f7e0 ff8f 	bl	800205a <_read>
 802113c:	1c43      	adds	r3, r0, #1
 802113e:	d102      	bne.n	8021146 <_read_r+0x1e>
 8021140:	682b      	ldr	r3, [r5, #0]
 8021142:	b103      	cbz	r3, 8021146 <_read_r+0x1e>
 8021144:	6023      	str	r3, [r4, #0]
 8021146:	bd38      	pop	{r3, r4, r5, pc}
 8021148:	24069770 	.word	0x24069770

0802114c <_sbrk_r>:
 802114c:	b538      	push	{r3, r4, r5, lr}
 802114e:	4d06      	ldr	r5, [pc, #24]	@ (8021168 <_sbrk_r+0x1c>)
 8021150:	2300      	movs	r3, #0
 8021152:	4604      	mov	r4, r0
 8021154:	4608      	mov	r0, r1
 8021156:	602b      	str	r3, [r5, #0]
 8021158:	f7e0 ffec 	bl	8002134 <_sbrk>
 802115c:	1c43      	adds	r3, r0, #1
 802115e:	d102      	bne.n	8021166 <_sbrk_r+0x1a>
 8021160:	682b      	ldr	r3, [r5, #0]
 8021162:	b103      	cbz	r3, 8021166 <_sbrk_r+0x1a>
 8021164:	6023      	str	r3, [r4, #0]
 8021166:	bd38      	pop	{r3, r4, r5, pc}
 8021168:	24069770 	.word	0x24069770

0802116c <_write_r>:
 802116c:	b538      	push	{r3, r4, r5, lr}
 802116e:	4d07      	ldr	r5, [pc, #28]	@ (802118c <_write_r+0x20>)
 8021170:	4604      	mov	r4, r0
 8021172:	4608      	mov	r0, r1
 8021174:	4611      	mov	r1, r2
 8021176:	2200      	movs	r2, #0
 8021178:	602a      	str	r2, [r5, #0]
 802117a:	461a      	mov	r2, r3
 802117c:	f7e0 ff8a 	bl	8002094 <_write>
 8021180:	1c43      	adds	r3, r0, #1
 8021182:	d102      	bne.n	802118a <_write_r+0x1e>
 8021184:	682b      	ldr	r3, [r5, #0]
 8021186:	b103      	cbz	r3, 802118a <_write_r+0x1e>
 8021188:	6023      	str	r3, [r4, #0]
 802118a:	bd38      	pop	{r3, r4, r5, pc}
 802118c:	24069770 	.word	0x24069770

08021190 <__errno>:
 8021190:	4b01      	ldr	r3, [pc, #4]	@ (8021198 <__errno+0x8>)
 8021192:	6818      	ldr	r0, [r3, #0]
 8021194:	4770      	bx	lr
 8021196:	bf00      	nop
 8021198:	240013a0 	.word	0x240013a0

0802119c <__libc_init_array>:
 802119c:	b570      	push	{r4, r5, r6, lr}
 802119e:	4d0d      	ldr	r5, [pc, #52]	@ (80211d4 <__libc_init_array+0x38>)
 80211a0:	4c0d      	ldr	r4, [pc, #52]	@ (80211d8 <__libc_init_array+0x3c>)
 80211a2:	1b64      	subs	r4, r4, r5
 80211a4:	10a4      	asrs	r4, r4, #2
 80211a6:	2600      	movs	r6, #0
 80211a8:	42a6      	cmp	r6, r4
 80211aa:	d109      	bne.n	80211c0 <__libc_init_array+0x24>
 80211ac:	4d0b      	ldr	r5, [pc, #44]	@ (80211dc <__libc_init_array+0x40>)
 80211ae:	4c0c      	ldr	r4, [pc, #48]	@ (80211e0 <__libc_init_array+0x44>)
 80211b0:	f000 fe62 	bl	8021e78 <_init>
 80211b4:	1b64      	subs	r4, r4, r5
 80211b6:	10a4      	asrs	r4, r4, #2
 80211b8:	2600      	movs	r6, #0
 80211ba:	42a6      	cmp	r6, r4
 80211bc:	d105      	bne.n	80211ca <__libc_init_array+0x2e>
 80211be:	bd70      	pop	{r4, r5, r6, pc}
 80211c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80211c4:	4798      	blx	r3
 80211c6:	3601      	adds	r6, #1
 80211c8:	e7ee      	b.n	80211a8 <__libc_init_array+0xc>
 80211ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80211ce:	4798      	blx	r3
 80211d0:	3601      	adds	r6, #1
 80211d2:	e7f2      	b.n	80211ba <__libc_init_array+0x1e>
 80211d4:	080247e0 	.word	0x080247e0
 80211d8:	080247e0 	.word	0x080247e0
 80211dc:	080247e0 	.word	0x080247e0
 80211e0:	08024820 	.word	0x08024820

080211e4 <__retarget_lock_init_recursive>:
 80211e4:	4770      	bx	lr

080211e6 <__retarget_lock_acquire_recursive>:
 80211e6:	4770      	bx	lr

080211e8 <__retarget_lock_release_recursive>:
 80211e8:	4770      	bx	lr

080211ea <strcpy>:
 80211ea:	4603      	mov	r3, r0
 80211ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80211f0:	f803 2b01 	strb.w	r2, [r3], #1
 80211f4:	2a00      	cmp	r2, #0
 80211f6:	d1f9      	bne.n	80211ec <strcpy+0x2>
 80211f8:	4770      	bx	lr

080211fa <memcpy>:
 80211fa:	440a      	add	r2, r1
 80211fc:	4291      	cmp	r1, r2
 80211fe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8021202:	d100      	bne.n	8021206 <memcpy+0xc>
 8021204:	4770      	bx	lr
 8021206:	b510      	push	{r4, lr}
 8021208:	f811 4b01 	ldrb.w	r4, [r1], #1
 802120c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021210:	4291      	cmp	r1, r2
 8021212:	d1f9      	bne.n	8021208 <memcpy+0xe>
 8021214:	bd10      	pop	{r4, pc}
	...

08021218 <__assert_func>:
 8021218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802121a:	4614      	mov	r4, r2
 802121c:	461a      	mov	r2, r3
 802121e:	4b09      	ldr	r3, [pc, #36]	@ (8021244 <__assert_func+0x2c>)
 8021220:	681b      	ldr	r3, [r3, #0]
 8021222:	4605      	mov	r5, r0
 8021224:	68d8      	ldr	r0, [r3, #12]
 8021226:	b954      	cbnz	r4, 802123e <__assert_func+0x26>
 8021228:	4b07      	ldr	r3, [pc, #28]	@ (8021248 <__assert_func+0x30>)
 802122a:	461c      	mov	r4, r3
 802122c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021230:	9100      	str	r1, [sp, #0]
 8021232:	462b      	mov	r3, r5
 8021234:	4905      	ldr	r1, [pc, #20]	@ (802124c <__assert_func+0x34>)
 8021236:	f000 fbfd 	bl	8021a34 <fiprintf>
 802123a:	f000 fc91 	bl	8021b60 <abort>
 802123e:	4b04      	ldr	r3, [pc, #16]	@ (8021250 <__assert_func+0x38>)
 8021240:	e7f4      	b.n	802122c <__assert_func+0x14>
 8021242:	bf00      	nop
 8021244:	240013a0 	.word	0x240013a0
 8021248:	080247a1 	.word	0x080247a1
 802124c:	08024773 	.word	0x08024773
 8021250:	08024766 	.word	0x08024766

08021254 <__env_lock>:
 8021254:	4801      	ldr	r0, [pc, #4]	@ (802125c <__env_lock+0x8>)
 8021256:	f7ff bfc6 	b.w	80211e6 <__retarget_lock_acquire_recursive>
 802125a:	bf00      	nop
 802125c:	24069774 	.word	0x24069774

08021260 <__env_unlock>:
 8021260:	4801      	ldr	r0, [pc, #4]	@ (8021268 <__env_unlock+0x8>)
 8021262:	f7ff bfc1 	b.w	80211e8 <__retarget_lock_release_recursive>
 8021266:	bf00      	nop
 8021268:	24069774 	.word	0x24069774

0802126c <_free_r>:
 802126c:	b538      	push	{r3, r4, r5, lr}
 802126e:	4605      	mov	r5, r0
 8021270:	2900      	cmp	r1, #0
 8021272:	d041      	beq.n	80212f8 <_free_r+0x8c>
 8021274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021278:	1f0c      	subs	r4, r1, #4
 802127a:	2b00      	cmp	r3, #0
 802127c:	bfb8      	it	lt
 802127e:	18e4      	addlt	r4, r4, r3
 8021280:	f7ff facc 	bl	802081c <__malloc_lock>
 8021284:	4a1d      	ldr	r2, [pc, #116]	@ (80212fc <_free_r+0x90>)
 8021286:	6813      	ldr	r3, [r2, #0]
 8021288:	b933      	cbnz	r3, 8021298 <_free_r+0x2c>
 802128a:	6063      	str	r3, [r4, #4]
 802128c:	6014      	str	r4, [r2, #0]
 802128e:	4628      	mov	r0, r5
 8021290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021294:	f7ff bac8 	b.w	8020828 <__malloc_unlock>
 8021298:	42a3      	cmp	r3, r4
 802129a:	d908      	bls.n	80212ae <_free_r+0x42>
 802129c:	6820      	ldr	r0, [r4, #0]
 802129e:	1821      	adds	r1, r4, r0
 80212a0:	428b      	cmp	r3, r1
 80212a2:	bf01      	itttt	eq
 80212a4:	6819      	ldreq	r1, [r3, #0]
 80212a6:	685b      	ldreq	r3, [r3, #4]
 80212a8:	1809      	addeq	r1, r1, r0
 80212aa:	6021      	streq	r1, [r4, #0]
 80212ac:	e7ed      	b.n	802128a <_free_r+0x1e>
 80212ae:	461a      	mov	r2, r3
 80212b0:	685b      	ldr	r3, [r3, #4]
 80212b2:	b10b      	cbz	r3, 80212b8 <_free_r+0x4c>
 80212b4:	42a3      	cmp	r3, r4
 80212b6:	d9fa      	bls.n	80212ae <_free_r+0x42>
 80212b8:	6811      	ldr	r1, [r2, #0]
 80212ba:	1850      	adds	r0, r2, r1
 80212bc:	42a0      	cmp	r0, r4
 80212be:	d10b      	bne.n	80212d8 <_free_r+0x6c>
 80212c0:	6820      	ldr	r0, [r4, #0]
 80212c2:	4401      	add	r1, r0
 80212c4:	1850      	adds	r0, r2, r1
 80212c6:	4283      	cmp	r3, r0
 80212c8:	6011      	str	r1, [r2, #0]
 80212ca:	d1e0      	bne.n	802128e <_free_r+0x22>
 80212cc:	6818      	ldr	r0, [r3, #0]
 80212ce:	685b      	ldr	r3, [r3, #4]
 80212d0:	6053      	str	r3, [r2, #4]
 80212d2:	4408      	add	r0, r1
 80212d4:	6010      	str	r0, [r2, #0]
 80212d6:	e7da      	b.n	802128e <_free_r+0x22>
 80212d8:	d902      	bls.n	80212e0 <_free_r+0x74>
 80212da:	230c      	movs	r3, #12
 80212dc:	602b      	str	r3, [r5, #0]
 80212de:	e7d6      	b.n	802128e <_free_r+0x22>
 80212e0:	6820      	ldr	r0, [r4, #0]
 80212e2:	1821      	adds	r1, r4, r0
 80212e4:	428b      	cmp	r3, r1
 80212e6:	bf04      	itt	eq
 80212e8:	6819      	ldreq	r1, [r3, #0]
 80212ea:	685b      	ldreq	r3, [r3, #4]
 80212ec:	6063      	str	r3, [r4, #4]
 80212ee:	bf04      	itt	eq
 80212f0:	1809      	addeq	r1, r1, r0
 80212f2:	6021      	streq	r1, [r4, #0]
 80212f4:	6054      	str	r4, [r2, #4]
 80212f6:	e7ca      	b.n	802128e <_free_r+0x22>
 80212f8:	bd38      	pop	{r3, r4, r5, pc}
 80212fa:	bf00      	nop
 80212fc:	24069630 	.word	0x24069630

08021300 <_malloc_usable_size_r>:
 8021300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021304:	1f18      	subs	r0, r3, #4
 8021306:	2b00      	cmp	r3, #0
 8021308:	bfbc      	itt	lt
 802130a:	580b      	ldrlt	r3, [r1, r0]
 802130c:	18c0      	addlt	r0, r0, r3
 802130e:	4770      	bx	lr

08021310 <__ssputs_r>:
 8021310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021314:	688e      	ldr	r6, [r1, #8]
 8021316:	461f      	mov	r7, r3
 8021318:	42be      	cmp	r6, r7
 802131a:	680b      	ldr	r3, [r1, #0]
 802131c:	4682      	mov	sl, r0
 802131e:	460c      	mov	r4, r1
 8021320:	4690      	mov	r8, r2
 8021322:	d82d      	bhi.n	8021380 <__ssputs_r+0x70>
 8021324:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021328:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802132c:	d026      	beq.n	802137c <__ssputs_r+0x6c>
 802132e:	6965      	ldr	r5, [r4, #20]
 8021330:	6909      	ldr	r1, [r1, #16]
 8021332:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021336:	eba3 0901 	sub.w	r9, r3, r1
 802133a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802133e:	1c7b      	adds	r3, r7, #1
 8021340:	444b      	add	r3, r9
 8021342:	106d      	asrs	r5, r5, #1
 8021344:	429d      	cmp	r5, r3
 8021346:	bf38      	it	cc
 8021348:	461d      	movcc	r5, r3
 802134a:	0553      	lsls	r3, r2, #21
 802134c:	d527      	bpl.n	802139e <__ssputs_r+0x8e>
 802134e:	4629      	mov	r1, r5
 8021350:	f7ff f9e4 	bl	802071c <_malloc_r>
 8021354:	4606      	mov	r6, r0
 8021356:	b360      	cbz	r0, 80213b2 <__ssputs_r+0xa2>
 8021358:	6921      	ldr	r1, [r4, #16]
 802135a:	464a      	mov	r2, r9
 802135c:	f7ff ff4d 	bl	80211fa <memcpy>
 8021360:	89a3      	ldrh	r3, [r4, #12]
 8021362:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8021366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802136a:	81a3      	strh	r3, [r4, #12]
 802136c:	6126      	str	r6, [r4, #16]
 802136e:	6165      	str	r5, [r4, #20]
 8021370:	444e      	add	r6, r9
 8021372:	eba5 0509 	sub.w	r5, r5, r9
 8021376:	6026      	str	r6, [r4, #0]
 8021378:	60a5      	str	r5, [r4, #8]
 802137a:	463e      	mov	r6, r7
 802137c:	42be      	cmp	r6, r7
 802137e:	d900      	bls.n	8021382 <__ssputs_r+0x72>
 8021380:	463e      	mov	r6, r7
 8021382:	6820      	ldr	r0, [r4, #0]
 8021384:	4632      	mov	r2, r6
 8021386:	4641      	mov	r1, r8
 8021388:	f7ff fdfe 	bl	8020f88 <memmove>
 802138c:	68a3      	ldr	r3, [r4, #8]
 802138e:	1b9b      	subs	r3, r3, r6
 8021390:	60a3      	str	r3, [r4, #8]
 8021392:	6823      	ldr	r3, [r4, #0]
 8021394:	4433      	add	r3, r6
 8021396:	6023      	str	r3, [r4, #0]
 8021398:	2000      	movs	r0, #0
 802139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802139e:	462a      	mov	r2, r5
 80213a0:	f7ff fabc 	bl	802091c <_realloc_r>
 80213a4:	4606      	mov	r6, r0
 80213a6:	2800      	cmp	r0, #0
 80213a8:	d1e0      	bne.n	802136c <__ssputs_r+0x5c>
 80213aa:	6921      	ldr	r1, [r4, #16]
 80213ac:	4650      	mov	r0, sl
 80213ae:	f7ff ff5d 	bl	802126c <_free_r>
 80213b2:	230c      	movs	r3, #12
 80213b4:	f8ca 3000 	str.w	r3, [sl]
 80213b8:	89a3      	ldrh	r3, [r4, #12]
 80213ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80213be:	81a3      	strh	r3, [r4, #12]
 80213c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80213c4:	e7e9      	b.n	802139a <__ssputs_r+0x8a>
	...

080213c8 <_svfiprintf_r>:
 80213c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213cc:	4698      	mov	r8, r3
 80213ce:	898b      	ldrh	r3, [r1, #12]
 80213d0:	061b      	lsls	r3, r3, #24
 80213d2:	b09d      	sub	sp, #116	@ 0x74
 80213d4:	4607      	mov	r7, r0
 80213d6:	460d      	mov	r5, r1
 80213d8:	4614      	mov	r4, r2
 80213da:	d510      	bpl.n	80213fe <_svfiprintf_r+0x36>
 80213dc:	690b      	ldr	r3, [r1, #16]
 80213de:	b973      	cbnz	r3, 80213fe <_svfiprintf_r+0x36>
 80213e0:	2140      	movs	r1, #64	@ 0x40
 80213e2:	f7ff f99b 	bl	802071c <_malloc_r>
 80213e6:	6028      	str	r0, [r5, #0]
 80213e8:	6128      	str	r0, [r5, #16]
 80213ea:	b930      	cbnz	r0, 80213fa <_svfiprintf_r+0x32>
 80213ec:	230c      	movs	r3, #12
 80213ee:	603b      	str	r3, [r7, #0]
 80213f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80213f4:	b01d      	add	sp, #116	@ 0x74
 80213f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213fa:	2340      	movs	r3, #64	@ 0x40
 80213fc:	616b      	str	r3, [r5, #20]
 80213fe:	2300      	movs	r3, #0
 8021400:	9309      	str	r3, [sp, #36]	@ 0x24
 8021402:	2320      	movs	r3, #32
 8021404:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021408:	f8cd 800c 	str.w	r8, [sp, #12]
 802140c:	2330      	movs	r3, #48	@ 0x30
 802140e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80215ac <_svfiprintf_r+0x1e4>
 8021412:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021416:	f04f 0901 	mov.w	r9, #1
 802141a:	4623      	mov	r3, r4
 802141c:	469a      	mov	sl, r3
 802141e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021422:	b10a      	cbz	r2, 8021428 <_svfiprintf_r+0x60>
 8021424:	2a25      	cmp	r2, #37	@ 0x25
 8021426:	d1f9      	bne.n	802141c <_svfiprintf_r+0x54>
 8021428:	ebba 0b04 	subs.w	fp, sl, r4
 802142c:	d00b      	beq.n	8021446 <_svfiprintf_r+0x7e>
 802142e:	465b      	mov	r3, fp
 8021430:	4622      	mov	r2, r4
 8021432:	4629      	mov	r1, r5
 8021434:	4638      	mov	r0, r7
 8021436:	f7ff ff6b 	bl	8021310 <__ssputs_r>
 802143a:	3001      	adds	r0, #1
 802143c:	f000 80a7 	beq.w	802158e <_svfiprintf_r+0x1c6>
 8021440:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021442:	445a      	add	r2, fp
 8021444:	9209      	str	r2, [sp, #36]	@ 0x24
 8021446:	f89a 3000 	ldrb.w	r3, [sl]
 802144a:	2b00      	cmp	r3, #0
 802144c:	f000 809f 	beq.w	802158e <_svfiprintf_r+0x1c6>
 8021450:	2300      	movs	r3, #0
 8021452:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802145a:	f10a 0a01 	add.w	sl, sl, #1
 802145e:	9304      	str	r3, [sp, #16]
 8021460:	9307      	str	r3, [sp, #28]
 8021462:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021466:	931a      	str	r3, [sp, #104]	@ 0x68
 8021468:	4654      	mov	r4, sl
 802146a:	2205      	movs	r2, #5
 802146c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021470:	484e      	ldr	r0, [pc, #312]	@ (80215ac <_svfiprintf_r+0x1e4>)
 8021472:	f7de ff4d 	bl	8000310 <memchr>
 8021476:	9a04      	ldr	r2, [sp, #16]
 8021478:	b9d8      	cbnz	r0, 80214b2 <_svfiprintf_r+0xea>
 802147a:	06d0      	lsls	r0, r2, #27
 802147c:	bf44      	itt	mi
 802147e:	2320      	movmi	r3, #32
 8021480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021484:	0711      	lsls	r1, r2, #28
 8021486:	bf44      	itt	mi
 8021488:	232b      	movmi	r3, #43	@ 0x2b
 802148a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802148e:	f89a 3000 	ldrb.w	r3, [sl]
 8021492:	2b2a      	cmp	r3, #42	@ 0x2a
 8021494:	d015      	beq.n	80214c2 <_svfiprintf_r+0xfa>
 8021496:	9a07      	ldr	r2, [sp, #28]
 8021498:	4654      	mov	r4, sl
 802149a:	2000      	movs	r0, #0
 802149c:	f04f 0c0a 	mov.w	ip, #10
 80214a0:	4621      	mov	r1, r4
 80214a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80214a6:	3b30      	subs	r3, #48	@ 0x30
 80214a8:	2b09      	cmp	r3, #9
 80214aa:	d94b      	bls.n	8021544 <_svfiprintf_r+0x17c>
 80214ac:	b1b0      	cbz	r0, 80214dc <_svfiprintf_r+0x114>
 80214ae:	9207      	str	r2, [sp, #28]
 80214b0:	e014      	b.n	80214dc <_svfiprintf_r+0x114>
 80214b2:	eba0 0308 	sub.w	r3, r0, r8
 80214b6:	fa09 f303 	lsl.w	r3, r9, r3
 80214ba:	4313      	orrs	r3, r2
 80214bc:	9304      	str	r3, [sp, #16]
 80214be:	46a2      	mov	sl, r4
 80214c0:	e7d2      	b.n	8021468 <_svfiprintf_r+0xa0>
 80214c2:	9b03      	ldr	r3, [sp, #12]
 80214c4:	1d19      	adds	r1, r3, #4
 80214c6:	681b      	ldr	r3, [r3, #0]
 80214c8:	9103      	str	r1, [sp, #12]
 80214ca:	2b00      	cmp	r3, #0
 80214cc:	bfbb      	ittet	lt
 80214ce:	425b      	neglt	r3, r3
 80214d0:	f042 0202 	orrlt.w	r2, r2, #2
 80214d4:	9307      	strge	r3, [sp, #28]
 80214d6:	9307      	strlt	r3, [sp, #28]
 80214d8:	bfb8      	it	lt
 80214da:	9204      	strlt	r2, [sp, #16]
 80214dc:	7823      	ldrb	r3, [r4, #0]
 80214de:	2b2e      	cmp	r3, #46	@ 0x2e
 80214e0:	d10a      	bne.n	80214f8 <_svfiprintf_r+0x130>
 80214e2:	7863      	ldrb	r3, [r4, #1]
 80214e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80214e6:	d132      	bne.n	802154e <_svfiprintf_r+0x186>
 80214e8:	9b03      	ldr	r3, [sp, #12]
 80214ea:	1d1a      	adds	r2, r3, #4
 80214ec:	681b      	ldr	r3, [r3, #0]
 80214ee:	9203      	str	r2, [sp, #12]
 80214f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80214f4:	3402      	adds	r4, #2
 80214f6:	9305      	str	r3, [sp, #20]
 80214f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80215bc <_svfiprintf_r+0x1f4>
 80214fc:	7821      	ldrb	r1, [r4, #0]
 80214fe:	2203      	movs	r2, #3
 8021500:	4650      	mov	r0, sl
 8021502:	f7de ff05 	bl	8000310 <memchr>
 8021506:	b138      	cbz	r0, 8021518 <_svfiprintf_r+0x150>
 8021508:	9b04      	ldr	r3, [sp, #16]
 802150a:	eba0 000a 	sub.w	r0, r0, sl
 802150e:	2240      	movs	r2, #64	@ 0x40
 8021510:	4082      	lsls	r2, r0
 8021512:	4313      	orrs	r3, r2
 8021514:	3401      	adds	r4, #1
 8021516:	9304      	str	r3, [sp, #16]
 8021518:	f814 1b01 	ldrb.w	r1, [r4], #1
 802151c:	4824      	ldr	r0, [pc, #144]	@ (80215b0 <_svfiprintf_r+0x1e8>)
 802151e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021522:	2206      	movs	r2, #6
 8021524:	f7de fef4 	bl	8000310 <memchr>
 8021528:	2800      	cmp	r0, #0
 802152a:	d036      	beq.n	802159a <_svfiprintf_r+0x1d2>
 802152c:	4b21      	ldr	r3, [pc, #132]	@ (80215b4 <_svfiprintf_r+0x1ec>)
 802152e:	bb1b      	cbnz	r3, 8021578 <_svfiprintf_r+0x1b0>
 8021530:	9b03      	ldr	r3, [sp, #12]
 8021532:	3307      	adds	r3, #7
 8021534:	f023 0307 	bic.w	r3, r3, #7
 8021538:	3308      	adds	r3, #8
 802153a:	9303      	str	r3, [sp, #12]
 802153c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802153e:	4433      	add	r3, r6
 8021540:	9309      	str	r3, [sp, #36]	@ 0x24
 8021542:	e76a      	b.n	802141a <_svfiprintf_r+0x52>
 8021544:	fb0c 3202 	mla	r2, ip, r2, r3
 8021548:	460c      	mov	r4, r1
 802154a:	2001      	movs	r0, #1
 802154c:	e7a8      	b.n	80214a0 <_svfiprintf_r+0xd8>
 802154e:	2300      	movs	r3, #0
 8021550:	3401      	adds	r4, #1
 8021552:	9305      	str	r3, [sp, #20]
 8021554:	4619      	mov	r1, r3
 8021556:	f04f 0c0a 	mov.w	ip, #10
 802155a:	4620      	mov	r0, r4
 802155c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021560:	3a30      	subs	r2, #48	@ 0x30
 8021562:	2a09      	cmp	r2, #9
 8021564:	d903      	bls.n	802156e <_svfiprintf_r+0x1a6>
 8021566:	2b00      	cmp	r3, #0
 8021568:	d0c6      	beq.n	80214f8 <_svfiprintf_r+0x130>
 802156a:	9105      	str	r1, [sp, #20]
 802156c:	e7c4      	b.n	80214f8 <_svfiprintf_r+0x130>
 802156e:	fb0c 2101 	mla	r1, ip, r1, r2
 8021572:	4604      	mov	r4, r0
 8021574:	2301      	movs	r3, #1
 8021576:	e7f0      	b.n	802155a <_svfiprintf_r+0x192>
 8021578:	ab03      	add	r3, sp, #12
 802157a:	9300      	str	r3, [sp, #0]
 802157c:	462a      	mov	r2, r5
 802157e:	4b0e      	ldr	r3, [pc, #56]	@ (80215b8 <_svfiprintf_r+0x1f0>)
 8021580:	a904      	add	r1, sp, #16
 8021582:	4638      	mov	r0, r7
 8021584:	f3af 8000 	nop.w
 8021588:	1c42      	adds	r2, r0, #1
 802158a:	4606      	mov	r6, r0
 802158c:	d1d6      	bne.n	802153c <_svfiprintf_r+0x174>
 802158e:	89ab      	ldrh	r3, [r5, #12]
 8021590:	065b      	lsls	r3, r3, #25
 8021592:	f53f af2d 	bmi.w	80213f0 <_svfiprintf_r+0x28>
 8021596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021598:	e72c      	b.n	80213f4 <_svfiprintf_r+0x2c>
 802159a:	ab03      	add	r3, sp, #12
 802159c:	9300      	str	r3, [sp, #0]
 802159e:	462a      	mov	r2, r5
 80215a0:	4b05      	ldr	r3, [pc, #20]	@ (80215b8 <_svfiprintf_r+0x1f0>)
 80215a2:	a904      	add	r1, sp, #16
 80215a4:	4638      	mov	r0, r7
 80215a6:	f000 f879 	bl	802169c <_printf_i>
 80215aa:	e7ed      	b.n	8021588 <_svfiprintf_r+0x1c0>
 80215ac:	080247a2 	.word	0x080247a2
 80215b0:	080247ac 	.word	0x080247ac
 80215b4:	00000000 	.word	0x00000000
 80215b8:	08021311 	.word	0x08021311
 80215bc:	080247a8 	.word	0x080247a8

080215c0 <_printf_common>:
 80215c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80215c4:	4616      	mov	r6, r2
 80215c6:	4698      	mov	r8, r3
 80215c8:	688a      	ldr	r2, [r1, #8]
 80215ca:	690b      	ldr	r3, [r1, #16]
 80215cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80215d0:	4293      	cmp	r3, r2
 80215d2:	bfb8      	it	lt
 80215d4:	4613      	movlt	r3, r2
 80215d6:	6033      	str	r3, [r6, #0]
 80215d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80215dc:	4607      	mov	r7, r0
 80215de:	460c      	mov	r4, r1
 80215e0:	b10a      	cbz	r2, 80215e6 <_printf_common+0x26>
 80215e2:	3301      	adds	r3, #1
 80215e4:	6033      	str	r3, [r6, #0]
 80215e6:	6823      	ldr	r3, [r4, #0]
 80215e8:	0699      	lsls	r1, r3, #26
 80215ea:	bf42      	ittt	mi
 80215ec:	6833      	ldrmi	r3, [r6, #0]
 80215ee:	3302      	addmi	r3, #2
 80215f0:	6033      	strmi	r3, [r6, #0]
 80215f2:	6825      	ldr	r5, [r4, #0]
 80215f4:	f015 0506 	ands.w	r5, r5, #6
 80215f8:	d106      	bne.n	8021608 <_printf_common+0x48>
 80215fa:	f104 0a19 	add.w	sl, r4, #25
 80215fe:	68e3      	ldr	r3, [r4, #12]
 8021600:	6832      	ldr	r2, [r6, #0]
 8021602:	1a9b      	subs	r3, r3, r2
 8021604:	42ab      	cmp	r3, r5
 8021606:	dc26      	bgt.n	8021656 <_printf_common+0x96>
 8021608:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802160c:	6822      	ldr	r2, [r4, #0]
 802160e:	3b00      	subs	r3, #0
 8021610:	bf18      	it	ne
 8021612:	2301      	movne	r3, #1
 8021614:	0692      	lsls	r2, r2, #26
 8021616:	d42b      	bmi.n	8021670 <_printf_common+0xb0>
 8021618:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802161c:	4641      	mov	r1, r8
 802161e:	4638      	mov	r0, r7
 8021620:	47c8      	blx	r9
 8021622:	3001      	adds	r0, #1
 8021624:	d01e      	beq.n	8021664 <_printf_common+0xa4>
 8021626:	6823      	ldr	r3, [r4, #0]
 8021628:	6922      	ldr	r2, [r4, #16]
 802162a:	f003 0306 	and.w	r3, r3, #6
 802162e:	2b04      	cmp	r3, #4
 8021630:	bf02      	ittt	eq
 8021632:	68e5      	ldreq	r5, [r4, #12]
 8021634:	6833      	ldreq	r3, [r6, #0]
 8021636:	1aed      	subeq	r5, r5, r3
 8021638:	68a3      	ldr	r3, [r4, #8]
 802163a:	bf0c      	ite	eq
 802163c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021640:	2500      	movne	r5, #0
 8021642:	4293      	cmp	r3, r2
 8021644:	bfc4      	itt	gt
 8021646:	1a9b      	subgt	r3, r3, r2
 8021648:	18ed      	addgt	r5, r5, r3
 802164a:	2600      	movs	r6, #0
 802164c:	341a      	adds	r4, #26
 802164e:	42b5      	cmp	r5, r6
 8021650:	d11a      	bne.n	8021688 <_printf_common+0xc8>
 8021652:	2000      	movs	r0, #0
 8021654:	e008      	b.n	8021668 <_printf_common+0xa8>
 8021656:	2301      	movs	r3, #1
 8021658:	4652      	mov	r2, sl
 802165a:	4641      	mov	r1, r8
 802165c:	4638      	mov	r0, r7
 802165e:	47c8      	blx	r9
 8021660:	3001      	adds	r0, #1
 8021662:	d103      	bne.n	802166c <_printf_common+0xac>
 8021664:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802166c:	3501      	adds	r5, #1
 802166e:	e7c6      	b.n	80215fe <_printf_common+0x3e>
 8021670:	18e1      	adds	r1, r4, r3
 8021672:	1c5a      	adds	r2, r3, #1
 8021674:	2030      	movs	r0, #48	@ 0x30
 8021676:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802167a:	4422      	add	r2, r4
 802167c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021680:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021684:	3302      	adds	r3, #2
 8021686:	e7c7      	b.n	8021618 <_printf_common+0x58>
 8021688:	2301      	movs	r3, #1
 802168a:	4622      	mov	r2, r4
 802168c:	4641      	mov	r1, r8
 802168e:	4638      	mov	r0, r7
 8021690:	47c8      	blx	r9
 8021692:	3001      	adds	r0, #1
 8021694:	d0e6      	beq.n	8021664 <_printf_common+0xa4>
 8021696:	3601      	adds	r6, #1
 8021698:	e7d9      	b.n	802164e <_printf_common+0x8e>
	...

0802169c <_printf_i>:
 802169c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80216a0:	7e0f      	ldrb	r7, [r1, #24]
 80216a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80216a4:	2f78      	cmp	r7, #120	@ 0x78
 80216a6:	4691      	mov	r9, r2
 80216a8:	4680      	mov	r8, r0
 80216aa:	460c      	mov	r4, r1
 80216ac:	469a      	mov	sl, r3
 80216ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80216b2:	d807      	bhi.n	80216c4 <_printf_i+0x28>
 80216b4:	2f62      	cmp	r7, #98	@ 0x62
 80216b6:	d80a      	bhi.n	80216ce <_printf_i+0x32>
 80216b8:	2f00      	cmp	r7, #0
 80216ba:	f000 80d2 	beq.w	8021862 <_printf_i+0x1c6>
 80216be:	2f58      	cmp	r7, #88	@ 0x58
 80216c0:	f000 80b9 	beq.w	8021836 <_printf_i+0x19a>
 80216c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80216c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80216cc:	e03a      	b.n	8021744 <_printf_i+0xa8>
 80216ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80216d2:	2b15      	cmp	r3, #21
 80216d4:	d8f6      	bhi.n	80216c4 <_printf_i+0x28>
 80216d6:	a101      	add	r1, pc, #4	@ (adr r1, 80216dc <_printf_i+0x40>)
 80216d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80216dc:	08021735 	.word	0x08021735
 80216e0:	08021749 	.word	0x08021749
 80216e4:	080216c5 	.word	0x080216c5
 80216e8:	080216c5 	.word	0x080216c5
 80216ec:	080216c5 	.word	0x080216c5
 80216f0:	080216c5 	.word	0x080216c5
 80216f4:	08021749 	.word	0x08021749
 80216f8:	080216c5 	.word	0x080216c5
 80216fc:	080216c5 	.word	0x080216c5
 8021700:	080216c5 	.word	0x080216c5
 8021704:	080216c5 	.word	0x080216c5
 8021708:	08021849 	.word	0x08021849
 802170c:	08021773 	.word	0x08021773
 8021710:	08021803 	.word	0x08021803
 8021714:	080216c5 	.word	0x080216c5
 8021718:	080216c5 	.word	0x080216c5
 802171c:	0802186b 	.word	0x0802186b
 8021720:	080216c5 	.word	0x080216c5
 8021724:	08021773 	.word	0x08021773
 8021728:	080216c5 	.word	0x080216c5
 802172c:	080216c5 	.word	0x080216c5
 8021730:	0802180b 	.word	0x0802180b
 8021734:	6833      	ldr	r3, [r6, #0]
 8021736:	1d1a      	adds	r2, r3, #4
 8021738:	681b      	ldr	r3, [r3, #0]
 802173a:	6032      	str	r2, [r6, #0]
 802173c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021740:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021744:	2301      	movs	r3, #1
 8021746:	e09d      	b.n	8021884 <_printf_i+0x1e8>
 8021748:	6833      	ldr	r3, [r6, #0]
 802174a:	6820      	ldr	r0, [r4, #0]
 802174c:	1d19      	adds	r1, r3, #4
 802174e:	6031      	str	r1, [r6, #0]
 8021750:	0606      	lsls	r6, r0, #24
 8021752:	d501      	bpl.n	8021758 <_printf_i+0xbc>
 8021754:	681d      	ldr	r5, [r3, #0]
 8021756:	e003      	b.n	8021760 <_printf_i+0xc4>
 8021758:	0645      	lsls	r5, r0, #25
 802175a:	d5fb      	bpl.n	8021754 <_printf_i+0xb8>
 802175c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021760:	2d00      	cmp	r5, #0
 8021762:	da03      	bge.n	802176c <_printf_i+0xd0>
 8021764:	232d      	movs	r3, #45	@ 0x2d
 8021766:	426d      	negs	r5, r5
 8021768:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802176c:	4859      	ldr	r0, [pc, #356]	@ (80218d4 <_printf_i+0x238>)
 802176e:	230a      	movs	r3, #10
 8021770:	e011      	b.n	8021796 <_printf_i+0xfa>
 8021772:	6821      	ldr	r1, [r4, #0]
 8021774:	6833      	ldr	r3, [r6, #0]
 8021776:	0608      	lsls	r0, r1, #24
 8021778:	f853 5b04 	ldr.w	r5, [r3], #4
 802177c:	d402      	bmi.n	8021784 <_printf_i+0xe8>
 802177e:	0649      	lsls	r1, r1, #25
 8021780:	bf48      	it	mi
 8021782:	b2ad      	uxthmi	r5, r5
 8021784:	2f6f      	cmp	r7, #111	@ 0x6f
 8021786:	4853      	ldr	r0, [pc, #332]	@ (80218d4 <_printf_i+0x238>)
 8021788:	6033      	str	r3, [r6, #0]
 802178a:	bf14      	ite	ne
 802178c:	230a      	movne	r3, #10
 802178e:	2308      	moveq	r3, #8
 8021790:	2100      	movs	r1, #0
 8021792:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021796:	6866      	ldr	r6, [r4, #4]
 8021798:	60a6      	str	r6, [r4, #8]
 802179a:	2e00      	cmp	r6, #0
 802179c:	bfa2      	ittt	ge
 802179e:	6821      	ldrge	r1, [r4, #0]
 80217a0:	f021 0104 	bicge.w	r1, r1, #4
 80217a4:	6021      	strge	r1, [r4, #0]
 80217a6:	b90d      	cbnz	r5, 80217ac <_printf_i+0x110>
 80217a8:	2e00      	cmp	r6, #0
 80217aa:	d04b      	beq.n	8021844 <_printf_i+0x1a8>
 80217ac:	4616      	mov	r6, r2
 80217ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80217b2:	fb03 5711 	mls	r7, r3, r1, r5
 80217b6:	5dc7      	ldrb	r7, [r0, r7]
 80217b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80217bc:	462f      	mov	r7, r5
 80217be:	42bb      	cmp	r3, r7
 80217c0:	460d      	mov	r5, r1
 80217c2:	d9f4      	bls.n	80217ae <_printf_i+0x112>
 80217c4:	2b08      	cmp	r3, #8
 80217c6:	d10b      	bne.n	80217e0 <_printf_i+0x144>
 80217c8:	6823      	ldr	r3, [r4, #0]
 80217ca:	07df      	lsls	r7, r3, #31
 80217cc:	d508      	bpl.n	80217e0 <_printf_i+0x144>
 80217ce:	6923      	ldr	r3, [r4, #16]
 80217d0:	6861      	ldr	r1, [r4, #4]
 80217d2:	4299      	cmp	r1, r3
 80217d4:	bfde      	ittt	le
 80217d6:	2330      	movle	r3, #48	@ 0x30
 80217d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80217dc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80217e0:	1b92      	subs	r2, r2, r6
 80217e2:	6122      	str	r2, [r4, #16]
 80217e4:	f8cd a000 	str.w	sl, [sp]
 80217e8:	464b      	mov	r3, r9
 80217ea:	aa03      	add	r2, sp, #12
 80217ec:	4621      	mov	r1, r4
 80217ee:	4640      	mov	r0, r8
 80217f0:	f7ff fee6 	bl	80215c0 <_printf_common>
 80217f4:	3001      	adds	r0, #1
 80217f6:	d14a      	bne.n	802188e <_printf_i+0x1f2>
 80217f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80217fc:	b004      	add	sp, #16
 80217fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021802:	6823      	ldr	r3, [r4, #0]
 8021804:	f043 0320 	orr.w	r3, r3, #32
 8021808:	6023      	str	r3, [r4, #0]
 802180a:	4833      	ldr	r0, [pc, #204]	@ (80218d8 <_printf_i+0x23c>)
 802180c:	2778      	movs	r7, #120	@ 0x78
 802180e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8021812:	6823      	ldr	r3, [r4, #0]
 8021814:	6831      	ldr	r1, [r6, #0]
 8021816:	061f      	lsls	r7, r3, #24
 8021818:	f851 5b04 	ldr.w	r5, [r1], #4
 802181c:	d402      	bmi.n	8021824 <_printf_i+0x188>
 802181e:	065f      	lsls	r7, r3, #25
 8021820:	bf48      	it	mi
 8021822:	b2ad      	uxthmi	r5, r5
 8021824:	6031      	str	r1, [r6, #0]
 8021826:	07d9      	lsls	r1, r3, #31
 8021828:	bf44      	itt	mi
 802182a:	f043 0320 	orrmi.w	r3, r3, #32
 802182e:	6023      	strmi	r3, [r4, #0]
 8021830:	b11d      	cbz	r5, 802183a <_printf_i+0x19e>
 8021832:	2310      	movs	r3, #16
 8021834:	e7ac      	b.n	8021790 <_printf_i+0xf4>
 8021836:	4827      	ldr	r0, [pc, #156]	@ (80218d4 <_printf_i+0x238>)
 8021838:	e7e9      	b.n	802180e <_printf_i+0x172>
 802183a:	6823      	ldr	r3, [r4, #0]
 802183c:	f023 0320 	bic.w	r3, r3, #32
 8021840:	6023      	str	r3, [r4, #0]
 8021842:	e7f6      	b.n	8021832 <_printf_i+0x196>
 8021844:	4616      	mov	r6, r2
 8021846:	e7bd      	b.n	80217c4 <_printf_i+0x128>
 8021848:	6833      	ldr	r3, [r6, #0]
 802184a:	6825      	ldr	r5, [r4, #0]
 802184c:	6961      	ldr	r1, [r4, #20]
 802184e:	1d18      	adds	r0, r3, #4
 8021850:	6030      	str	r0, [r6, #0]
 8021852:	062e      	lsls	r6, r5, #24
 8021854:	681b      	ldr	r3, [r3, #0]
 8021856:	d501      	bpl.n	802185c <_printf_i+0x1c0>
 8021858:	6019      	str	r1, [r3, #0]
 802185a:	e002      	b.n	8021862 <_printf_i+0x1c6>
 802185c:	0668      	lsls	r0, r5, #25
 802185e:	d5fb      	bpl.n	8021858 <_printf_i+0x1bc>
 8021860:	8019      	strh	r1, [r3, #0]
 8021862:	2300      	movs	r3, #0
 8021864:	6123      	str	r3, [r4, #16]
 8021866:	4616      	mov	r6, r2
 8021868:	e7bc      	b.n	80217e4 <_printf_i+0x148>
 802186a:	6833      	ldr	r3, [r6, #0]
 802186c:	1d1a      	adds	r2, r3, #4
 802186e:	6032      	str	r2, [r6, #0]
 8021870:	681e      	ldr	r6, [r3, #0]
 8021872:	6862      	ldr	r2, [r4, #4]
 8021874:	2100      	movs	r1, #0
 8021876:	4630      	mov	r0, r6
 8021878:	f7de fd4a 	bl	8000310 <memchr>
 802187c:	b108      	cbz	r0, 8021882 <_printf_i+0x1e6>
 802187e:	1b80      	subs	r0, r0, r6
 8021880:	6060      	str	r0, [r4, #4]
 8021882:	6863      	ldr	r3, [r4, #4]
 8021884:	6123      	str	r3, [r4, #16]
 8021886:	2300      	movs	r3, #0
 8021888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802188c:	e7aa      	b.n	80217e4 <_printf_i+0x148>
 802188e:	6923      	ldr	r3, [r4, #16]
 8021890:	4632      	mov	r2, r6
 8021892:	4649      	mov	r1, r9
 8021894:	4640      	mov	r0, r8
 8021896:	47d0      	blx	sl
 8021898:	3001      	adds	r0, #1
 802189a:	d0ad      	beq.n	80217f8 <_printf_i+0x15c>
 802189c:	6823      	ldr	r3, [r4, #0]
 802189e:	079b      	lsls	r3, r3, #30
 80218a0:	d413      	bmi.n	80218ca <_printf_i+0x22e>
 80218a2:	68e0      	ldr	r0, [r4, #12]
 80218a4:	9b03      	ldr	r3, [sp, #12]
 80218a6:	4298      	cmp	r0, r3
 80218a8:	bfb8      	it	lt
 80218aa:	4618      	movlt	r0, r3
 80218ac:	e7a6      	b.n	80217fc <_printf_i+0x160>
 80218ae:	2301      	movs	r3, #1
 80218b0:	4632      	mov	r2, r6
 80218b2:	4649      	mov	r1, r9
 80218b4:	4640      	mov	r0, r8
 80218b6:	47d0      	blx	sl
 80218b8:	3001      	adds	r0, #1
 80218ba:	d09d      	beq.n	80217f8 <_printf_i+0x15c>
 80218bc:	3501      	adds	r5, #1
 80218be:	68e3      	ldr	r3, [r4, #12]
 80218c0:	9903      	ldr	r1, [sp, #12]
 80218c2:	1a5b      	subs	r3, r3, r1
 80218c4:	42ab      	cmp	r3, r5
 80218c6:	dcf2      	bgt.n	80218ae <_printf_i+0x212>
 80218c8:	e7eb      	b.n	80218a2 <_printf_i+0x206>
 80218ca:	2500      	movs	r5, #0
 80218cc:	f104 0619 	add.w	r6, r4, #25
 80218d0:	e7f5      	b.n	80218be <_printf_i+0x222>
 80218d2:	bf00      	nop
 80218d4:	080247b3 	.word	0x080247b3
 80218d8:	080247c4 	.word	0x080247c4

080218dc <__sflush_r>:
 80218dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80218e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80218e4:	0716      	lsls	r6, r2, #28
 80218e6:	4605      	mov	r5, r0
 80218e8:	460c      	mov	r4, r1
 80218ea:	d454      	bmi.n	8021996 <__sflush_r+0xba>
 80218ec:	684b      	ldr	r3, [r1, #4]
 80218ee:	2b00      	cmp	r3, #0
 80218f0:	dc02      	bgt.n	80218f8 <__sflush_r+0x1c>
 80218f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80218f4:	2b00      	cmp	r3, #0
 80218f6:	dd48      	ble.n	802198a <__sflush_r+0xae>
 80218f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80218fa:	2e00      	cmp	r6, #0
 80218fc:	d045      	beq.n	802198a <__sflush_r+0xae>
 80218fe:	2300      	movs	r3, #0
 8021900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021904:	682f      	ldr	r7, [r5, #0]
 8021906:	6a21      	ldr	r1, [r4, #32]
 8021908:	602b      	str	r3, [r5, #0]
 802190a:	d030      	beq.n	802196e <__sflush_r+0x92>
 802190c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802190e:	89a3      	ldrh	r3, [r4, #12]
 8021910:	0759      	lsls	r1, r3, #29
 8021912:	d505      	bpl.n	8021920 <__sflush_r+0x44>
 8021914:	6863      	ldr	r3, [r4, #4]
 8021916:	1ad2      	subs	r2, r2, r3
 8021918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802191a:	b10b      	cbz	r3, 8021920 <__sflush_r+0x44>
 802191c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802191e:	1ad2      	subs	r2, r2, r3
 8021920:	2300      	movs	r3, #0
 8021922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021924:	6a21      	ldr	r1, [r4, #32]
 8021926:	4628      	mov	r0, r5
 8021928:	47b0      	blx	r6
 802192a:	1c43      	adds	r3, r0, #1
 802192c:	89a3      	ldrh	r3, [r4, #12]
 802192e:	d106      	bne.n	802193e <__sflush_r+0x62>
 8021930:	6829      	ldr	r1, [r5, #0]
 8021932:	291d      	cmp	r1, #29
 8021934:	d82b      	bhi.n	802198e <__sflush_r+0xb2>
 8021936:	4a2a      	ldr	r2, [pc, #168]	@ (80219e0 <__sflush_r+0x104>)
 8021938:	410a      	asrs	r2, r1
 802193a:	07d6      	lsls	r6, r2, #31
 802193c:	d427      	bmi.n	802198e <__sflush_r+0xb2>
 802193e:	2200      	movs	r2, #0
 8021940:	6062      	str	r2, [r4, #4]
 8021942:	04d9      	lsls	r1, r3, #19
 8021944:	6922      	ldr	r2, [r4, #16]
 8021946:	6022      	str	r2, [r4, #0]
 8021948:	d504      	bpl.n	8021954 <__sflush_r+0x78>
 802194a:	1c42      	adds	r2, r0, #1
 802194c:	d101      	bne.n	8021952 <__sflush_r+0x76>
 802194e:	682b      	ldr	r3, [r5, #0]
 8021950:	b903      	cbnz	r3, 8021954 <__sflush_r+0x78>
 8021952:	6560      	str	r0, [r4, #84]	@ 0x54
 8021954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021956:	602f      	str	r7, [r5, #0]
 8021958:	b1b9      	cbz	r1, 802198a <__sflush_r+0xae>
 802195a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802195e:	4299      	cmp	r1, r3
 8021960:	d002      	beq.n	8021968 <__sflush_r+0x8c>
 8021962:	4628      	mov	r0, r5
 8021964:	f7ff fc82 	bl	802126c <_free_r>
 8021968:	2300      	movs	r3, #0
 802196a:	6363      	str	r3, [r4, #52]	@ 0x34
 802196c:	e00d      	b.n	802198a <__sflush_r+0xae>
 802196e:	2301      	movs	r3, #1
 8021970:	4628      	mov	r0, r5
 8021972:	47b0      	blx	r6
 8021974:	4602      	mov	r2, r0
 8021976:	1c50      	adds	r0, r2, #1
 8021978:	d1c9      	bne.n	802190e <__sflush_r+0x32>
 802197a:	682b      	ldr	r3, [r5, #0]
 802197c:	2b00      	cmp	r3, #0
 802197e:	d0c6      	beq.n	802190e <__sflush_r+0x32>
 8021980:	2b1d      	cmp	r3, #29
 8021982:	d001      	beq.n	8021988 <__sflush_r+0xac>
 8021984:	2b16      	cmp	r3, #22
 8021986:	d11e      	bne.n	80219c6 <__sflush_r+0xea>
 8021988:	602f      	str	r7, [r5, #0]
 802198a:	2000      	movs	r0, #0
 802198c:	e022      	b.n	80219d4 <__sflush_r+0xf8>
 802198e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021992:	b21b      	sxth	r3, r3
 8021994:	e01b      	b.n	80219ce <__sflush_r+0xf2>
 8021996:	690f      	ldr	r7, [r1, #16]
 8021998:	2f00      	cmp	r7, #0
 802199a:	d0f6      	beq.n	802198a <__sflush_r+0xae>
 802199c:	0793      	lsls	r3, r2, #30
 802199e:	680e      	ldr	r6, [r1, #0]
 80219a0:	bf08      	it	eq
 80219a2:	694b      	ldreq	r3, [r1, #20]
 80219a4:	600f      	str	r7, [r1, #0]
 80219a6:	bf18      	it	ne
 80219a8:	2300      	movne	r3, #0
 80219aa:	eba6 0807 	sub.w	r8, r6, r7
 80219ae:	608b      	str	r3, [r1, #8]
 80219b0:	f1b8 0f00 	cmp.w	r8, #0
 80219b4:	dde9      	ble.n	802198a <__sflush_r+0xae>
 80219b6:	6a21      	ldr	r1, [r4, #32]
 80219b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80219ba:	4643      	mov	r3, r8
 80219bc:	463a      	mov	r2, r7
 80219be:	4628      	mov	r0, r5
 80219c0:	47b0      	blx	r6
 80219c2:	2800      	cmp	r0, #0
 80219c4:	dc08      	bgt.n	80219d8 <__sflush_r+0xfc>
 80219c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80219ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80219ce:	81a3      	strh	r3, [r4, #12]
 80219d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80219d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219d8:	4407      	add	r7, r0
 80219da:	eba8 0800 	sub.w	r8, r8, r0
 80219de:	e7e7      	b.n	80219b0 <__sflush_r+0xd4>
 80219e0:	dfbffffe 	.word	0xdfbffffe

080219e4 <_fflush_r>:
 80219e4:	b538      	push	{r3, r4, r5, lr}
 80219e6:	690b      	ldr	r3, [r1, #16]
 80219e8:	4605      	mov	r5, r0
 80219ea:	460c      	mov	r4, r1
 80219ec:	b913      	cbnz	r3, 80219f4 <_fflush_r+0x10>
 80219ee:	2500      	movs	r5, #0
 80219f0:	4628      	mov	r0, r5
 80219f2:	bd38      	pop	{r3, r4, r5, pc}
 80219f4:	b118      	cbz	r0, 80219fe <_fflush_r+0x1a>
 80219f6:	6a03      	ldr	r3, [r0, #32]
 80219f8:	b90b      	cbnz	r3, 80219fe <_fflush_r+0x1a>
 80219fa:	f7ff f8c1 	bl	8020b80 <__sinit>
 80219fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021a02:	2b00      	cmp	r3, #0
 8021a04:	d0f3      	beq.n	80219ee <_fflush_r+0xa>
 8021a06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021a08:	07d0      	lsls	r0, r2, #31
 8021a0a:	d404      	bmi.n	8021a16 <_fflush_r+0x32>
 8021a0c:	0599      	lsls	r1, r3, #22
 8021a0e:	d402      	bmi.n	8021a16 <_fflush_r+0x32>
 8021a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021a12:	f7ff fbe8 	bl	80211e6 <__retarget_lock_acquire_recursive>
 8021a16:	4628      	mov	r0, r5
 8021a18:	4621      	mov	r1, r4
 8021a1a:	f7ff ff5f 	bl	80218dc <__sflush_r>
 8021a1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021a20:	07da      	lsls	r2, r3, #31
 8021a22:	4605      	mov	r5, r0
 8021a24:	d4e4      	bmi.n	80219f0 <_fflush_r+0xc>
 8021a26:	89a3      	ldrh	r3, [r4, #12]
 8021a28:	059b      	lsls	r3, r3, #22
 8021a2a:	d4e1      	bmi.n	80219f0 <_fflush_r+0xc>
 8021a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021a2e:	f7ff fbdb 	bl	80211e8 <__retarget_lock_release_recursive>
 8021a32:	e7dd      	b.n	80219f0 <_fflush_r+0xc>

08021a34 <fiprintf>:
 8021a34:	b40e      	push	{r1, r2, r3}
 8021a36:	b503      	push	{r0, r1, lr}
 8021a38:	4601      	mov	r1, r0
 8021a3a:	ab03      	add	r3, sp, #12
 8021a3c:	4805      	ldr	r0, [pc, #20]	@ (8021a54 <fiprintf+0x20>)
 8021a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021a42:	6800      	ldr	r0, [r0, #0]
 8021a44:	9301      	str	r3, [sp, #4]
 8021a46:	f000 f8bb 	bl	8021bc0 <_vfiprintf_r>
 8021a4a:	b002      	add	sp, #8
 8021a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021a50:	b003      	add	sp, #12
 8021a52:	4770      	bx	lr
 8021a54:	240013a0 	.word	0x240013a0

08021a58 <__swhatbuf_r>:
 8021a58:	b570      	push	{r4, r5, r6, lr}
 8021a5a:	460c      	mov	r4, r1
 8021a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021a60:	2900      	cmp	r1, #0
 8021a62:	b096      	sub	sp, #88	@ 0x58
 8021a64:	4615      	mov	r5, r2
 8021a66:	461e      	mov	r6, r3
 8021a68:	da0d      	bge.n	8021a86 <__swhatbuf_r+0x2e>
 8021a6a:	89a3      	ldrh	r3, [r4, #12]
 8021a6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021a70:	f04f 0100 	mov.w	r1, #0
 8021a74:	bf14      	ite	ne
 8021a76:	2340      	movne	r3, #64	@ 0x40
 8021a78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021a7c:	2000      	movs	r0, #0
 8021a7e:	6031      	str	r1, [r6, #0]
 8021a80:	602b      	str	r3, [r5, #0]
 8021a82:	b016      	add	sp, #88	@ 0x58
 8021a84:	bd70      	pop	{r4, r5, r6, pc}
 8021a86:	466a      	mov	r2, sp
 8021a88:	f000 f848 	bl	8021b1c <_fstat_r>
 8021a8c:	2800      	cmp	r0, #0
 8021a8e:	dbec      	blt.n	8021a6a <__swhatbuf_r+0x12>
 8021a90:	9901      	ldr	r1, [sp, #4]
 8021a92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021a96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021a9a:	4259      	negs	r1, r3
 8021a9c:	4159      	adcs	r1, r3
 8021a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021aa2:	e7eb      	b.n	8021a7c <__swhatbuf_r+0x24>

08021aa4 <__smakebuf_r>:
 8021aa4:	898b      	ldrh	r3, [r1, #12]
 8021aa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021aa8:	079d      	lsls	r5, r3, #30
 8021aaa:	4606      	mov	r6, r0
 8021aac:	460c      	mov	r4, r1
 8021aae:	d507      	bpl.n	8021ac0 <__smakebuf_r+0x1c>
 8021ab0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021ab4:	6023      	str	r3, [r4, #0]
 8021ab6:	6123      	str	r3, [r4, #16]
 8021ab8:	2301      	movs	r3, #1
 8021aba:	6163      	str	r3, [r4, #20]
 8021abc:	b003      	add	sp, #12
 8021abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ac0:	ab01      	add	r3, sp, #4
 8021ac2:	466a      	mov	r2, sp
 8021ac4:	f7ff ffc8 	bl	8021a58 <__swhatbuf_r>
 8021ac8:	9f00      	ldr	r7, [sp, #0]
 8021aca:	4605      	mov	r5, r0
 8021acc:	4639      	mov	r1, r7
 8021ace:	4630      	mov	r0, r6
 8021ad0:	f7fe fe24 	bl	802071c <_malloc_r>
 8021ad4:	b948      	cbnz	r0, 8021aea <__smakebuf_r+0x46>
 8021ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021ada:	059a      	lsls	r2, r3, #22
 8021adc:	d4ee      	bmi.n	8021abc <__smakebuf_r+0x18>
 8021ade:	f023 0303 	bic.w	r3, r3, #3
 8021ae2:	f043 0302 	orr.w	r3, r3, #2
 8021ae6:	81a3      	strh	r3, [r4, #12]
 8021ae8:	e7e2      	b.n	8021ab0 <__smakebuf_r+0xc>
 8021aea:	89a3      	ldrh	r3, [r4, #12]
 8021aec:	6020      	str	r0, [r4, #0]
 8021aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021af2:	81a3      	strh	r3, [r4, #12]
 8021af4:	9b01      	ldr	r3, [sp, #4]
 8021af6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021afa:	b15b      	cbz	r3, 8021b14 <__smakebuf_r+0x70>
 8021afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021b00:	4630      	mov	r0, r6
 8021b02:	f000 f81d 	bl	8021b40 <_isatty_r>
 8021b06:	b128      	cbz	r0, 8021b14 <__smakebuf_r+0x70>
 8021b08:	89a3      	ldrh	r3, [r4, #12]
 8021b0a:	f023 0303 	bic.w	r3, r3, #3
 8021b0e:	f043 0301 	orr.w	r3, r3, #1
 8021b12:	81a3      	strh	r3, [r4, #12]
 8021b14:	89a3      	ldrh	r3, [r4, #12]
 8021b16:	431d      	orrs	r5, r3
 8021b18:	81a5      	strh	r5, [r4, #12]
 8021b1a:	e7cf      	b.n	8021abc <__smakebuf_r+0x18>

08021b1c <_fstat_r>:
 8021b1c:	b538      	push	{r3, r4, r5, lr}
 8021b1e:	4d07      	ldr	r5, [pc, #28]	@ (8021b3c <_fstat_r+0x20>)
 8021b20:	2300      	movs	r3, #0
 8021b22:	4604      	mov	r4, r0
 8021b24:	4608      	mov	r0, r1
 8021b26:	4611      	mov	r1, r2
 8021b28:	602b      	str	r3, [r5, #0]
 8021b2a:	f7e0 fadb 	bl	80020e4 <_fstat>
 8021b2e:	1c43      	adds	r3, r0, #1
 8021b30:	d102      	bne.n	8021b38 <_fstat_r+0x1c>
 8021b32:	682b      	ldr	r3, [r5, #0]
 8021b34:	b103      	cbz	r3, 8021b38 <_fstat_r+0x1c>
 8021b36:	6023      	str	r3, [r4, #0]
 8021b38:	bd38      	pop	{r3, r4, r5, pc}
 8021b3a:	bf00      	nop
 8021b3c:	24069770 	.word	0x24069770

08021b40 <_isatty_r>:
 8021b40:	b538      	push	{r3, r4, r5, lr}
 8021b42:	4d06      	ldr	r5, [pc, #24]	@ (8021b5c <_isatty_r+0x1c>)
 8021b44:	2300      	movs	r3, #0
 8021b46:	4604      	mov	r4, r0
 8021b48:	4608      	mov	r0, r1
 8021b4a:	602b      	str	r3, [r5, #0]
 8021b4c:	f7e0 fada 	bl	8002104 <_isatty>
 8021b50:	1c43      	adds	r3, r0, #1
 8021b52:	d102      	bne.n	8021b5a <_isatty_r+0x1a>
 8021b54:	682b      	ldr	r3, [r5, #0]
 8021b56:	b103      	cbz	r3, 8021b5a <_isatty_r+0x1a>
 8021b58:	6023      	str	r3, [r4, #0]
 8021b5a:	bd38      	pop	{r3, r4, r5, pc}
 8021b5c:	24069770 	.word	0x24069770

08021b60 <abort>:
 8021b60:	b508      	push	{r3, lr}
 8021b62:	2006      	movs	r0, #6
 8021b64:	f000 f96c 	bl	8021e40 <raise>
 8021b68:	2001      	movs	r0, #1
 8021b6a:	f7e0 fa6b 	bl	8002044 <_exit>

08021b6e <__sfputc_r>:
 8021b6e:	6893      	ldr	r3, [r2, #8]
 8021b70:	3b01      	subs	r3, #1
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	b410      	push	{r4}
 8021b76:	6093      	str	r3, [r2, #8]
 8021b78:	da08      	bge.n	8021b8c <__sfputc_r+0x1e>
 8021b7a:	6994      	ldr	r4, [r2, #24]
 8021b7c:	42a3      	cmp	r3, r4
 8021b7e:	db01      	blt.n	8021b84 <__sfputc_r+0x16>
 8021b80:	290a      	cmp	r1, #10
 8021b82:	d103      	bne.n	8021b8c <__sfputc_r+0x1e>
 8021b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021b88:	f7ff b95a 	b.w	8020e40 <__swbuf_r>
 8021b8c:	6813      	ldr	r3, [r2, #0]
 8021b8e:	1c58      	adds	r0, r3, #1
 8021b90:	6010      	str	r0, [r2, #0]
 8021b92:	7019      	strb	r1, [r3, #0]
 8021b94:	4608      	mov	r0, r1
 8021b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021b9a:	4770      	bx	lr

08021b9c <__sfputs_r>:
 8021b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b9e:	4606      	mov	r6, r0
 8021ba0:	460f      	mov	r7, r1
 8021ba2:	4614      	mov	r4, r2
 8021ba4:	18d5      	adds	r5, r2, r3
 8021ba6:	42ac      	cmp	r4, r5
 8021ba8:	d101      	bne.n	8021bae <__sfputs_r+0x12>
 8021baa:	2000      	movs	r0, #0
 8021bac:	e007      	b.n	8021bbe <__sfputs_r+0x22>
 8021bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021bb2:	463a      	mov	r2, r7
 8021bb4:	4630      	mov	r0, r6
 8021bb6:	f7ff ffda 	bl	8021b6e <__sfputc_r>
 8021bba:	1c43      	adds	r3, r0, #1
 8021bbc:	d1f3      	bne.n	8021ba6 <__sfputs_r+0xa>
 8021bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021bc0 <_vfiprintf_r>:
 8021bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bc4:	460d      	mov	r5, r1
 8021bc6:	b09d      	sub	sp, #116	@ 0x74
 8021bc8:	4614      	mov	r4, r2
 8021bca:	4698      	mov	r8, r3
 8021bcc:	4606      	mov	r6, r0
 8021bce:	b118      	cbz	r0, 8021bd8 <_vfiprintf_r+0x18>
 8021bd0:	6a03      	ldr	r3, [r0, #32]
 8021bd2:	b90b      	cbnz	r3, 8021bd8 <_vfiprintf_r+0x18>
 8021bd4:	f7fe ffd4 	bl	8020b80 <__sinit>
 8021bd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021bda:	07d9      	lsls	r1, r3, #31
 8021bdc:	d405      	bmi.n	8021bea <_vfiprintf_r+0x2a>
 8021bde:	89ab      	ldrh	r3, [r5, #12]
 8021be0:	059a      	lsls	r2, r3, #22
 8021be2:	d402      	bmi.n	8021bea <_vfiprintf_r+0x2a>
 8021be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021be6:	f7ff fafe 	bl	80211e6 <__retarget_lock_acquire_recursive>
 8021bea:	89ab      	ldrh	r3, [r5, #12]
 8021bec:	071b      	lsls	r3, r3, #28
 8021bee:	d501      	bpl.n	8021bf4 <_vfiprintf_r+0x34>
 8021bf0:	692b      	ldr	r3, [r5, #16]
 8021bf2:	b99b      	cbnz	r3, 8021c1c <_vfiprintf_r+0x5c>
 8021bf4:	4629      	mov	r1, r5
 8021bf6:	4630      	mov	r0, r6
 8021bf8:	f7ff f960 	bl	8020ebc <__swsetup_r>
 8021bfc:	b170      	cbz	r0, 8021c1c <_vfiprintf_r+0x5c>
 8021bfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021c00:	07dc      	lsls	r4, r3, #31
 8021c02:	d504      	bpl.n	8021c0e <_vfiprintf_r+0x4e>
 8021c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021c08:	b01d      	add	sp, #116	@ 0x74
 8021c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c0e:	89ab      	ldrh	r3, [r5, #12]
 8021c10:	0598      	lsls	r0, r3, #22
 8021c12:	d4f7      	bmi.n	8021c04 <_vfiprintf_r+0x44>
 8021c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021c16:	f7ff fae7 	bl	80211e8 <__retarget_lock_release_recursive>
 8021c1a:	e7f3      	b.n	8021c04 <_vfiprintf_r+0x44>
 8021c1c:	2300      	movs	r3, #0
 8021c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c20:	2320      	movs	r3, #32
 8021c22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8021c2a:	2330      	movs	r3, #48	@ 0x30
 8021c2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021ddc <_vfiprintf_r+0x21c>
 8021c30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021c34:	f04f 0901 	mov.w	r9, #1
 8021c38:	4623      	mov	r3, r4
 8021c3a:	469a      	mov	sl, r3
 8021c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021c40:	b10a      	cbz	r2, 8021c46 <_vfiprintf_r+0x86>
 8021c42:	2a25      	cmp	r2, #37	@ 0x25
 8021c44:	d1f9      	bne.n	8021c3a <_vfiprintf_r+0x7a>
 8021c46:	ebba 0b04 	subs.w	fp, sl, r4
 8021c4a:	d00b      	beq.n	8021c64 <_vfiprintf_r+0xa4>
 8021c4c:	465b      	mov	r3, fp
 8021c4e:	4622      	mov	r2, r4
 8021c50:	4629      	mov	r1, r5
 8021c52:	4630      	mov	r0, r6
 8021c54:	f7ff ffa2 	bl	8021b9c <__sfputs_r>
 8021c58:	3001      	adds	r0, #1
 8021c5a:	f000 80a7 	beq.w	8021dac <_vfiprintf_r+0x1ec>
 8021c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021c60:	445a      	add	r2, fp
 8021c62:	9209      	str	r2, [sp, #36]	@ 0x24
 8021c64:	f89a 3000 	ldrb.w	r3, [sl]
 8021c68:	2b00      	cmp	r3, #0
 8021c6a:	f000 809f 	beq.w	8021dac <_vfiprintf_r+0x1ec>
 8021c6e:	2300      	movs	r3, #0
 8021c70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021c78:	f10a 0a01 	add.w	sl, sl, #1
 8021c7c:	9304      	str	r3, [sp, #16]
 8021c7e:	9307      	str	r3, [sp, #28]
 8021c80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021c84:	931a      	str	r3, [sp, #104]	@ 0x68
 8021c86:	4654      	mov	r4, sl
 8021c88:	2205      	movs	r2, #5
 8021c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c8e:	4853      	ldr	r0, [pc, #332]	@ (8021ddc <_vfiprintf_r+0x21c>)
 8021c90:	f7de fb3e 	bl	8000310 <memchr>
 8021c94:	9a04      	ldr	r2, [sp, #16]
 8021c96:	b9d8      	cbnz	r0, 8021cd0 <_vfiprintf_r+0x110>
 8021c98:	06d1      	lsls	r1, r2, #27
 8021c9a:	bf44      	itt	mi
 8021c9c:	2320      	movmi	r3, #32
 8021c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021ca2:	0713      	lsls	r3, r2, #28
 8021ca4:	bf44      	itt	mi
 8021ca6:	232b      	movmi	r3, #43	@ 0x2b
 8021ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021cac:	f89a 3000 	ldrb.w	r3, [sl]
 8021cb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8021cb2:	d015      	beq.n	8021ce0 <_vfiprintf_r+0x120>
 8021cb4:	9a07      	ldr	r2, [sp, #28]
 8021cb6:	4654      	mov	r4, sl
 8021cb8:	2000      	movs	r0, #0
 8021cba:	f04f 0c0a 	mov.w	ip, #10
 8021cbe:	4621      	mov	r1, r4
 8021cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021cc4:	3b30      	subs	r3, #48	@ 0x30
 8021cc6:	2b09      	cmp	r3, #9
 8021cc8:	d94b      	bls.n	8021d62 <_vfiprintf_r+0x1a2>
 8021cca:	b1b0      	cbz	r0, 8021cfa <_vfiprintf_r+0x13a>
 8021ccc:	9207      	str	r2, [sp, #28]
 8021cce:	e014      	b.n	8021cfa <_vfiprintf_r+0x13a>
 8021cd0:	eba0 0308 	sub.w	r3, r0, r8
 8021cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8021cd8:	4313      	orrs	r3, r2
 8021cda:	9304      	str	r3, [sp, #16]
 8021cdc:	46a2      	mov	sl, r4
 8021cde:	e7d2      	b.n	8021c86 <_vfiprintf_r+0xc6>
 8021ce0:	9b03      	ldr	r3, [sp, #12]
 8021ce2:	1d19      	adds	r1, r3, #4
 8021ce4:	681b      	ldr	r3, [r3, #0]
 8021ce6:	9103      	str	r1, [sp, #12]
 8021ce8:	2b00      	cmp	r3, #0
 8021cea:	bfbb      	ittet	lt
 8021cec:	425b      	neglt	r3, r3
 8021cee:	f042 0202 	orrlt.w	r2, r2, #2
 8021cf2:	9307      	strge	r3, [sp, #28]
 8021cf4:	9307      	strlt	r3, [sp, #28]
 8021cf6:	bfb8      	it	lt
 8021cf8:	9204      	strlt	r2, [sp, #16]
 8021cfa:	7823      	ldrb	r3, [r4, #0]
 8021cfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8021cfe:	d10a      	bne.n	8021d16 <_vfiprintf_r+0x156>
 8021d00:	7863      	ldrb	r3, [r4, #1]
 8021d02:	2b2a      	cmp	r3, #42	@ 0x2a
 8021d04:	d132      	bne.n	8021d6c <_vfiprintf_r+0x1ac>
 8021d06:	9b03      	ldr	r3, [sp, #12]
 8021d08:	1d1a      	adds	r2, r3, #4
 8021d0a:	681b      	ldr	r3, [r3, #0]
 8021d0c:	9203      	str	r2, [sp, #12]
 8021d0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021d12:	3402      	adds	r4, #2
 8021d14:	9305      	str	r3, [sp, #20]
 8021d16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021dec <_vfiprintf_r+0x22c>
 8021d1a:	7821      	ldrb	r1, [r4, #0]
 8021d1c:	2203      	movs	r2, #3
 8021d1e:	4650      	mov	r0, sl
 8021d20:	f7de faf6 	bl	8000310 <memchr>
 8021d24:	b138      	cbz	r0, 8021d36 <_vfiprintf_r+0x176>
 8021d26:	9b04      	ldr	r3, [sp, #16]
 8021d28:	eba0 000a 	sub.w	r0, r0, sl
 8021d2c:	2240      	movs	r2, #64	@ 0x40
 8021d2e:	4082      	lsls	r2, r0
 8021d30:	4313      	orrs	r3, r2
 8021d32:	3401      	adds	r4, #1
 8021d34:	9304      	str	r3, [sp, #16]
 8021d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d3a:	4829      	ldr	r0, [pc, #164]	@ (8021de0 <_vfiprintf_r+0x220>)
 8021d3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021d40:	2206      	movs	r2, #6
 8021d42:	f7de fae5 	bl	8000310 <memchr>
 8021d46:	2800      	cmp	r0, #0
 8021d48:	d03f      	beq.n	8021dca <_vfiprintf_r+0x20a>
 8021d4a:	4b26      	ldr	r3, [pc, #152]	@ (8021de4 <_vfiprintf_r+0x224>)
 8021d4c:	bb1b      	cbnz	r3, 8021d96 <_vfiprintf_r+0x1d6>
 8021d4e:	9b03      	ldr	r3, [sp, #12]
 8021d50:	3307      	adds	r3, #7
 8021d52:	f023 0307 	bic.w	r3, r3, #7
 8021d56:	3308      	adds	r3, #8
 8021d58:	9303      	str	r3, [sp, #12]
 8021d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d5c:	443b      	add	r3, r7
 8021d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d60:	e76a      	b.n	8021c38 <_vfiprintf_r+0x78>
 8021d62:	fb0c 3202 	mla	r2, ip, r2, r3
 8021d66:	460c      	mov	r4, r1
 8021d68:	2001      	movs	r0, #1
 8021d6a:	e7a8      	b.n	8021cbe <_vfiprintf_r+0xfe>
 8021d6c:	2300      	movs	r3, #0
 8021d6e:	3401      	adds	r4, #1
 8021d70:	9305      	str	r3, [sp, #20]
 8021d72:	4619      	mov	r1, r3
 8021d74:	f04f 0c0a 	mov.w	ip, #10
 8021d78:	4620      	mov	r0, r4
 8021d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021d7e:	3a30      	subs	r2, #48	@ 0x30
 8021d80:	2a09      	cmp	r2, #9
 8021d82:	d903      	bls.n	8021d8c <_vfiprintf_r+0x1cc>
 8021d84:	2b00      	cmp	r3, #0
 8021d86:	d0c6      	beq.n	8021d16 <_vfiprintf_r+0x156>
 8021d88:	9105      	str	r1, [sp, #20]
 8021d8a:	e7c4      	b.n	8021d16 <_vfiprintf_r+0x156>
 8021d8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021d90:	4604      	mov	r4, r0
 8021d92:	2301      	movs	r3, #1
 8021d94:	e7f0      	b.n	8021d78 <_vfiprintf_r+0x1b8>
 8021d96:	ab03      	add	r3, sp, #12
 8021d98:	9300      	str	r3, [sp, #0]
 8021d9a:	462a      	mov	r2, r5
 8021d9c:	4b12      	ldr	r3, [pc, #72]	@ (8021de8 <_vfiprintf_r+0x228>)
 8021d9e:	a904      	add	r1, sp, #16
 8021da0:	4630      	mov	r0, r6
 8021da2:	f3af 8000 	nop.w
 8021da6:	4607      	mov	r7, r0
 8021da8:	1c78      	adds	r0, r7, #1
 8021daa:	d1d6      	bne.n	8021d5a <_vfiprintf_r+0x19a>
 8021dac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021dae:	07d9      	lsls	r1, r3, #31
 8021db0:	d405      	bmi.n	8021dbe <_vfiprintf_r+0x1fe>
 8021db2:	89ab      	ldrh	r3, [r5, #12]
 8021db4:	059a      	lsls	r2, r3, #22
 8021db6:	d402      	bmi.n	8021dbe <_vfiprintf_r+0x1fe>
 8021db8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021dba:	f7ff fa15 	bl	80211e8 <__retarget_lock_release_recursive>
 8021dbe:	89ab      	ldrh	r3, [r5, #12]
 8021dc0:	065b      	lsls	r3, r3, #25
 8021dc2:	f53f af1f 	bmi.w	8021c04 <_vfiprintf_r+0x44>
 8021dc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021dc8:	e71e      	b.n	8021c08 <_vfiprintf_r+0x48>
 8021dca:	ab03      	add	r3, sp, #12
 8021dcc:	9300      	str	r3, [sp, #0]
 8021dce:	462a      	mov	r2, r5
 8021dd0:	4b05      	ldr	r3, [pc, #20]	@ (8021de8 <_vfiprintf_r+0x228>)
 8021dd2:	a904      	add	r1, sp, #16
 8021dd4:	4630      	mov	r0, r6
 8021dd6:	f7ff fc61 	bl	802169c <_printf_i>
 8021dda:	e7e4      	b.n	8021da6 <_vfiprintf_r+0x1e6>
 8021ddc:	080247a2 	.word	0x080247a2
 8021de0:	080247ac 	.word	0x080247ac
 8021de4:	00000000 	.word	0x00000000
 8021de8:	08021b9d 	.word	0x08021b9d
 8021dec:	080247a8 	.word	0x080247a8

08021df0 <_raise_r>:
 8021df0:	291f      	cmp	r1, #31
 8021df2:	b538      	push	{r3, r4, r5, lr}
 8021df4:	4605      	mov	r5, r0
 8021df6:	460c      	mov	r4, r1
 8021df8:	d904      	bls.n	8021e04 <_raise_r+0x14>
 8021dfa:	2316      	movs	r3, #22
 8021dfc:	6003      	str	r3, [r0, #0]
 8021dfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021e02:	bd38      	pop	{r3, r4, r5, pc}
 8021e04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021e06:	b112      	cbz	r2, 8021e0e <_raise_r+0x1e>
 8021e08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021e0c:	b94b      	cbnz	r3, 8021e22 <_raise_r+0x32>
 8021e0e:	4628      	mov	r0, r5
 8021e10:	f000 f830 	bl	8021e74 <_getpid_r>
 8021e14:	4622      	mov	r2, r4
 8021e16:	4601      	mov	r1, r0
 8021e18:	4628      	mov	r0, r5
 8021e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021e1e:	f000 b817 	b.w	8021e50 <_kill_r>
 8021e22:	2b01      	cmp	r3, #1
 8021e24:	d00a      	beq.n	8021e3c <_raise_r+0x4c>
 8021e26:	1c59      	adds	r1, r3, #1
 8021e28:	d103      	bne.n	8021e32 <_raise_r+0x42>
 8021e2a:	2316      	movs	r3, #22
 8021e2c:	6003      	str	r3, [r0, #0]
 8021e2e:	2001      	movs	r0, #1
 8021e30:	e7e7      	b.n	8021e02 <_raise_r+0x12>
 8021e32:	2100      	movs	r1, #0
 8021e34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021e38:	4620      	mov	r0, r4
 8021e3a:	4798      	blx	r3
 8021e3c:	2000      	movs	r0, #0
 8021e3e:	e7e0      	b.n	8021e02 <_raise_r+0x12>

08021e40 <raise>:
 8021e40:	4b02      	ldr	r3, [pc, #8]	@ (8021e4c <raise+0xc>)
 8021e42:	4601      	mov	r1, r0
 8021e44:	6818      	ldr	r0, [r3, #0]
 8021e46:	f7ff bfd3 	b.w	8021df0 <_raise_r>
 8021e4a:	bf00      	nop
 8021e4c:	240013a0 	.word	0x240013a0

08021e50 <_kill_r>:
 8021e50:	b538      	push	{r3, r4, r5, lr}
 8021e52:	4d07      	ldr	r5, [pc, #28]	@ (8021e70 <_kill_r+0x20>)
 8021e54:	2300      	movs	r3, #0
 8021e56:	4604      	mov	r4, r0
 8021e58:	4608      	mov	r0, r1
 8021e5a:	4611      	mov	r1, r2
 8021e5c:	602b      	str	r3, [r5, #0]
 8021e5e:	f7e0 f8e1 	bl	8002024 <_kill>
 8021e62:	1c43      	adds	r3, r0, #1
 8021e64:	d102      	bne.n	8021e6c <_kill_r+0x1c>
 8021e66:	682b      	ldr	r3, [r5, #0]
 8021e68:	b103      	cbz	r3, 8021e6c <_kill_r+0x1c>
 8021e6a:	6023      	str	r3, [r4, #0]
 8021e6c:	bd38      	pop	{r3, r4, r5, pc}
 8021e6e:	bf00      	nop
 8021e70:	24069770 	.word	0x24069770

08021e74 <_getpid_r>:
 8021e74:	f7e0 b8ce 	b.w	8002014 <_getpid>

08021e78 <_init>:
 8021e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e7a:	bf00      	nop
 8021e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e7e:	bc08      	pop	{r3}
 8021e80:	469e      	mov	lr, r3
 8021e82:	4770      	bx	lr

08021e84 <_fini>:
 8021e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e86:	bf00      	nop
 8021e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e8a:	bc08      	pop	{r3}
 8021e8c:	469e      	mov	lr, r3
 8021e8e:	4770      	bx	lr
